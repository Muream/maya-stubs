from __future__ import annotations

from typing import *
from typing_extensions import Self

if TYPE_CHECKING:
    from _typeshed import Incomplete
else:
    Incomplete = Any

from maya.OpenMaya import *

def MAnimControl_animationEndTime(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_animationStartTime(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_autoKeyMode(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_currentTime(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_globalInTangentType(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_globalOutTangentType(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_isPlaying(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_isScrubbing(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_isValid(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_maxTime(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_minTime(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_playBackward(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_playForward(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_playbackBy(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_playbackMode(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_playbackSpeed(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_setAnimationEndTime(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_setAnimationStartEndTime(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_setAnimationStartTime(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_setAutoKeyMode(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_setCurrentTime(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_setGlobalInTangentType(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_setGlobalOutTangentType(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_setMaxTime(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_setMinMaxTime(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_setMinTime(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_setPlaybackBy(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_setPlaybackMode(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_setPlaybackSpeed(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_setViewMode(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_setWeightedTangents(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_stop(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_viewMode(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_weightedTangents(*args: Any, **kwargs: Any) -> Any: ...
def MAnimCurveChange_className(*args: Any, **kwargs: Any) -> Any: ...
def MAnimCurveClipboardItemArray_className(*args: Any, **kwargs: Any) -> Any: ...
def MAnimCurveClipboardItem_className(*args: Any, **kwargs: Any) -> Any: ...
def MAnimCurveClipboard_theAPIClipboard(*args: Any, **kwargs: Any) -> Any: ...
def MAnimMessage_addAnimCurveEditedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MAnimMessage_addAnimKeyframeEditCheckCallback(*args: Any, **kwargs: Any) -> Any: ...
def MAnimMessage_addAnimKeyframeEditedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MAnimMessage_addDisableImplicitControlCallback(*args: Any, **kwargs: Any) -> Any: ...
def MAnimMessage_addNodeAnimKeyframeEditedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MAnimMessage_addPostBakeResultsCallback(*args: Any, **kwargs: Any) -> Any: ...
def MAnimMessage_addPreBakeResultsCallback(*args: Any, **kwargs: Any) -> Any: ...
def MAnimMessage_className(*args: Any, **kwargs: Any) -> Any: ...
def MAnimMessage_flushAnimKeyframeEditedCallbacks(*args: Any, **kwargs: Any) -> Any: ...
def MAnimUtil_className(*args: Any, **kwargs: Any) -> Any: ...
def MAnimUtil_findAnimatablePlugs(*args: Any, **kwargs: Any) -> Any: ...
def MAnimUtil_findAnimatedPlugs(*args: Any, **kwargs: Any) -> Any: ...
def MAnimUtil_findAnimation(*args: Any, **kwargs: Any) -> Any: ...
def MAnimUtil_findAnimationLayers(*args: Any, **kwargs: Any) -> Any: ...
def MAnimUtil_findConstraint(*args: Any, **kwargs: Any) -> Any: ...
def MAnimUtil_findSetDrivenKeyAnimation(*args: Any, **kwargs: Any) -> Any: ...
def MAnimUtil_isAnimated(*args: Any, **kwargs: Any) -> Any: ...
def MFnAnimCurve_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnBlendShapeDeformer_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnCharacter_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnClip_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnGeometryFilter_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnHikEffector_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnIkEffector_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnIkHandle_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnIkJoint_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnIkSolver_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnKeyframeDeltaAddRemove_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnKeyframeDeltaBlockAddRemove_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnKeyframeDeltaBreakdown_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnKeyframeDeltaInfType_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnKeyframeDeltaMove_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnKeyframeDeltaScale_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnKeyframeDeltaTangent_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnKeyframeDeltaWeighted_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnKeyframeDelta_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnLatticeDeformer_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnLattice_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnMotionPath_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnSkinCluster_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnWeightGeometryFilter_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnWireDeformer_className(*args: Any, **kwargs: Any) -> Any: ...
def MIkHandleGroup_className(*args: Any, **kwargs: Any) -> Any: ...
def MIkSystem_className(*args: Any, **kwargs: Any) -> Any: ...
def MIkSystem_findSolver(*args: Any, **kwargs: Any) -> Any: ...
def MIkSystem_getSolvers(*args: Any, **kwargs: Any) -> Any: ...
def MIkSystem_isGlobalSnap(*args: Any, **kwargs: Any) -> Any: ...
def MIkSystem_isGlobalSolve(*args: Any, **kwargs: Any) -> Any: ...
def MIkSystem_setGlobalSnap(*args: Any, **kwargs: Any) -> Any: ...
def MIkSystem_setGlobalSolve(*args: Any, **kwargs: Any) -> Any: ...
def MItKeyframe_className(*args: Any, **kwargs: Any) -> Any: ...
def boolPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
def charPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
def doublePtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
def floatPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
def intPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
def shortPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
def uCharPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
def uIntPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...

class MAnimControl:
    def __init__(self, args: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def animationEndTime(self, *args: Any, **kwargs: Any) -> Any: ...
    def animationStartTime(self, *args: Any, **kwargs: Any) -> Any: ...
    def autoKeyMode(self, *args: Any, **kwargs: Any) -> Any: ...
    def currentTime(self, *args: Any, **kwargs: Any) -> Any: ...
    def globalInTangentType(self, *args: Any, **kwargs: Any) -> Any: ...
    def globalOutTangentType(self, *args: Any, **kwargs: Any) -> Any: ...
    def isPlaying(self, *args: Any, **kwargs: Any) -> Any: ...
    def isScrubbing(self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self, *args: Any, **kwargs: Any) -> Any: ...
    kPlaybackLoop: int = ...
    kPlaybackOnce: int = ...
    kPlaybackOscillate: int = ...
    kPlaybackViewActive: int = ...
    kPlaybackViewAll: int = ...
    def maxTime(self, *args: Any, **kwargs: Any) -> Any: ...
    def minTime(self, *args: Any, **kwargs: Any) -> Any: ...
    def playBackward(self, *args: Any, **kwargs: Any) -> Any: ...
    def playForward(self, *args: Any, **kwargs: Any) -> Any: ...
    def playbackBy(self, *args: Any, **kwargs: Any) -> Any: ...
    def playbackMode(self, *args: Any, **kwargs: Any) -> Any: ...
    def playbackSpeed(self, *args: Any, **kwargs: Any) -> Any: ...
    def setAnimationEndTime(self, *args: Any, **kwargs: Any) -> Any: ...
    def setAnimationStartEndTime(self, *args: Any, **kwargs: Any) -> Any: ...
    def setAnimationStartTime(self, *args: Any, **kwargs: Any) -> Any: ...
    def setAutoKeyMode(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCurrentTime(self, *args: Any, **kwargs: Any) -> Any: ...
    def setGlobalInTangentType(self, *args: Any, **kwargs: Any) -> Any: ...
    def setGlobalOutTangentType(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxTime(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMinMaxTime(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMinTime(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPlaybackBy(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPlaybackMode(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPlaybackSpeed(self, *args: Any, **kwargs: Any) -> Any: ...
    def setViewMode(self, *args: Any, **kwargs: Any) -> Any: ...
    def setWeightedTangents(self, *args: Any, **kwargs: Any) -> Any: ...
    def stop(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def viewMode(self, *args: Any, **kwargs: Any) -> Any: ...
    def weightedTangents(self, *args: Any, **kwargs: Any) -> Any: ...

class MAnimCurveChange:
    def __init__(self, args: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def isInteractive(self, *args: Any, **kwargs: Any) -> Any: ...
    def redoIt(self, *args: Any, **kwargs: Any) -> Any: ...
    def setInteractive(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def undoIt(self, *args: Any, **kwargs: Any) -> Any: ...

class MAnimCurveClipboard:
    def __init__(self, args: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self, *args: Any, **kwargs: Any) -> Any: ...
    def clipboardItems(self, *args: Any, **kwargs: Any) -> Any: ...
    def endTime(self, *args: Any, **kwargs: Any) -> Any: ...
    def endUnitlessInput(self, *args: Any, **kwargs: Any) -> Any: ...
    def isEmpty(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    def startTime(self, *args: Any, **kwargs: Any) -> Any: ...
    def startUnitlessInput(self, *args: Any, **kwargs: Any) -> Any: ...
    def theAPIClipboard(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MAnimCurveClipboardItem:
    def __eq__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def animCurve(self, *args: Any, **kwargs: Any) -> Any: ...
    def animCurveType(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def fullAttributeName(self, *args: Any, **kwargs: Any) -> Any: ...
    def getAddressingInfo(self, *args: Any, **kwargs: Any) -> Any: ...
    def leafAttributeName(self, *args: Any, **kwargs: Any) -> Any: ...
    def nodeName(self, *args: Any, **kwargs: Any) -> Any: ...
    def setAddressingInfo(self, *args: Any, **kwargs: Any) -> Any: ...
    def setAnimCurve(self, *args: Any, **kwargs: Any) -> Any: ...
    def setNameInfo(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MAnimCurveClipboardItemArray:
    def __getitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def append(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    def sizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MAnimMessage(MMessage):
    def __init__(self, args: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addAnimCurveEditedCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addAnimKeyframeEditCheckCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addAnimKeyframeEditedCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addDisableImplicitControlCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addNodeAnimKeyframeEditedCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addPostBakeResultsCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addPreBakeResultsCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def flushAnimKeyframeEditedCallbacks(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MAnimUtil:
    def __init__(self, args: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def findAnimatablePlugs(self, *args: Any, **kwargs: Any) -> Any: ...
    def findAnimatedPlugs(self, *args: Any, **kwargs: Any) -> Any: ...
    def findAnimation(self, *args: Any, **kwargs: Any) -> Any: ...
    def findAnimationLayers(self, *args: Any, **kwargs: Any) -> Any: ...
    def findConstraint(self, *args: Any, **kwargs: Any) -> Any: ...
    def findSetDrivenKeyAnimation(self, *args: Any, **kwargs: Any) -> Any: ...
    def isAnimated(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnAnimCurve(MFnDependencyNode):
    def __init__(self, args: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addKey(self, *args: Any, **kwargs: Any) -> Any: ...
    def addKeyframe(self, *args: Any, **kwargs: Any) -> Any: ...
    def addKeys(self, *args: Any, **kwargs: Any) -> Any: ...
    def addKeysWithTangents(self, *args: Any, **kwargs: Any) -> Any: ...
    def animCurveType(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def evaluate(self, *args: Any, **kwargs: Any) -> Any: ...
    def find(self, *args: Any, **kwargs: Any) -> Any: ...
    def findClosest(self, *args: Any, **kwargs: Any) -> Any: ...
    def getTangent(self, *args: Any, **kwargs: Any) -> Any: ...
    def inTangentType(self, *args: Any, **kwargs: Any) -> Any: ...
    def insertKey(self, *args: Any, **kwargs: Any) -> Any: ...
    def isBreakdown(self, *args: Any, **kwargs: Any) -> Any: ...
    def isStatic(self, *args: Any, **kwargs: Any) -> Any: ...
    def isTimeInput(self, *args: Any, **kwargs: Any) -> Any: ...
    def isUnitlessInput(self, *args: Any, **kwargs: Any) -> Any: ...
    def isWeighted(self, *args: Any, **kwargs: Any) -> Any: ...
    kTangentAuto: int = ...
    kTangentAutoCustom: int = ...
    kTangentAutoEase: int = ...
    kTangentAutoMix: int = ...
    kTangentCustomEnd: int = ...
    kTangentCustomStart: int = ...
    kTangentShared1: int = ...
    kTangentShared2: int = ...
    kTangentShared3: int = ...
    kTangentShared4: int = ...
    kTangentShared5: int = ...
    kTangentShared6: int = ...
    kTangentShared7: int = ...
    kTangentShared8: int = ...
    kTangentStepNext: int = ...
    kTangentTypeCount: int = ...
    def numKeyframes(self, *args: Any, **kwargs: Any) -> Any: ...
    def numKeys(self, *args: Any, **kwargs: Any) -> Any: ...
    def outTangentType(self, *args: Any, **kwargs: Any) -> Any: ...
    def postInfinityType(self, *args: Any, **kwargs: Any) -> Any: ...
    def preInfinityType(self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self, *args: Any, **kwargs: Any) -> Any: ...
    def setAngle(self, *args: Any, **kwargs: Any) -> Any: ...
    def setInTangentType(self, *args: Any, **kwargs: Any) -> Any: ...
    def setIsBreakdown(self, *args: Any, **kwargs: Any) -> Any: ...
    def setIsWeighted(self, *args: Any, **kwargs: Any) -> Any: ...
    def setOutTangentType(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPostInfinityType(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPreInfinityType(self, *args: Any, **kwargs: Any) -> Any: ...
    def setTangent(self, *args: Any, **kwargs: Any) -> Any: ...
    def setTangentTypes(self, *args: Any, **kwargs: Any) -> Any: ...
    def setTangentsLocked(self, *args: Any, **kwargs: Any) -> Any: ...
    def setTime(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUnitlessInput(self, *args: Any, **kwargs: Any) -> Any: ...
    def setValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def setWeight(self, *args: Any, **kwargs: Any) -> Any: ...
    def setWeightsLocked(self, *args: Any, **kwargs: Any) -> Any: ...
    def tangentsLocked(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def time(self, *args: Any, **kwargs: Any) -> Any: ...
    def timedAnimCurveTypeForPlug(self, *args: Any, **kwargs: Any) -> Any: ...
    def unitlessAnimCurveTypeForPlug(self, *args: Any, **kwargs: Any) -> Any: ...
    def unitlessInput(self, *args: Any, **kwargs: Any) -> Any: ...
    def value(self, *args: Any, **kwargs: Any) -> Any: ...
    def weightsLocked(self, *args: Any, **kwargs: Any) -> Any: ...

class MFnBlendShapeDeformer(MFnDependencyNode):
    def __init__(self, args: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addBaseObject(self, *args: Any, **kwargs: Any) -> Any: ...
    def addTarget(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def envelope(self, *args: Any, **kwargs: Any) -> Any: ...
    def getBaseObjects(self, *args: Any, **kwargs: Any) -> Any: ...
    def getTargets(self, *args: Any, **kwargs: Any) -> Any: ...
    def historyLocation(self, *args: Any, **kwargs: Any) -> Any: ...
    def numWeights(self, *args: Any, **kwargs: Any) -> Any: ...
    def origin(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeTarget(self, *args: Any, **kwargs: Any) -> Any: ...
    def setEnvelope(self, *args: Any, **kwargs: Any) -> Any: ...
    def setOrigin(self, *args: Any, **kwargs: Any) -> Any: ...
    def setWeight(self, *args: Any, **kwargs: Any) -> Any: ...
    def targetItemIndexList(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def weight(self, *args: Any, **kwargs: Any) -> Any: ...
    def weightIndexList(self, *args: Any, **kwargs: Any) -> Any: ...

class MFnCharacter(MFnSet):
    def __init__(self, args: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addCurveToClip(self, *args: Any, **kwargs: Any) -> Any: ...
    def attachInstanceToCharacter(self, *args: Any, **kwargs: Any) -> Any: ...
    def attachSourceToCharacter(self, *args: Any, **kwargs: Any) -> Any: ...
    def blendExists(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def createBlend(self, *args: Any, **kwargs: Any) -> Any: ...
    def getBlend(self, *args: Any, **kwargs: Any) -> Any: ...
    def getBlendClips(self, *args: Any, **kwargs: Any) -> Any: ...
    def getBlendCount(self, *args: Any, **kwargs: Any) -> Any: ...
    def getCharacterThatOwnsPlug(self, *args: Any, **kwargs: Any) -> Any: ...
    def getClipScheduler(self, *args: Any, **kwargs: Any) -> Any: ...
    def getMemberPlugs(self, *args: Any, **kwargs: Any) -> Any: ...
    def getScheduledClip(self, *args: Any, **kwargs: Any) -> Any: ...
    def getScheduledClipCount(self, *args: Any, **kwargs: Any) -> Any: ...
    def getSourceClip(self, *args: Any, **kwargs: Any) -> Any: ...
    def getSourceClipCount(self, *args: Any, **kwargs: Any) -> Any: ...
    def getSubCharacters(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeBlend(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnClip(MFnDependencyNode):
    def __init__(self, args: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def createInstancedClip(self, *args: Any, **kwargs: Any) -> Any: ...
    def createSourceClip(self, *args: Any, **kwargs: Any) -> Any: ...
    def getAbsolute(self, *args: Any, **kwargs: Any) -> Any: ...
    def getAbsoluteChannelSettings(self, *args: Any, **kwargs: Any) -> Any: ...
    def getCycle(self, *args: Any, **kwargs: Any) -> Any: ...
    def getEnabled(self, *args: Any, **kwargs: Any) -> Any: ...
    def getMemberAnimCurves(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPostCycle(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPreCycle(self, *args: Any, **kwargs: Any) -> Any: ...
    def getScale(self, *args: Any, **kwargs: Any) -> Any: ...
    def getSourceDuration(self, *args: Any, **kwargs: Any) -> Any: ...
    def getSourceStart(self, *args: Any, **kwargs: Any) -> Any: ...
    def getStartFrame(self, *args: Any, **kwargs: Any) -> Any: ...
    def getTrack(self, *args: Any, **kwargs: Any) -> Any: ...
    def getWeight(self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstancedClip(self, *args: Any, **kwargs: Any) -> Any: ...
    def isPose(self, *args: Any, **kwargs: Any) -> Any: ...
    def setAbsolute(self, *args: Any, **kwargs: Any) -> Any: ...
    def setAbsoluteChannelSettings(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCycle(self, *args: Any, **kwargs: Any) -> Any: ...
    def setEnabled(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPoseClip(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPostCycle(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPreCycle(self, *args: Any, **kwargs: Any) -> Any: ...
    def setScale(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSourceData(self, *args: Any, **kwargs: Any) -> Any: ...
    def setStartFrame(self, *args: Any, **kwargs: Any) -> Any: ...
    def setTrack(self, *args: Any, **kwargs: Any) -> Any: ...
    def setWeight(self, *args: Any, **kwargs: Any) -> Any: ...
    def sourceClip(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnGeometryFilter(MFnDependencyNode):
    def __init__(self, args: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def deformerSet(self, *args: Any, **kwargs: Any) -> Any: ...
    def envelope(self, *args: Any, **kwargs: Any) -> Any: ...
    def getComponentAtIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def getInputGeometry(self, *args: Any, **kwargs: Any) -> Any: ...
    def getOutputGeometry(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPathAtIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def groupIdAtIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def indexForGroupId(self, *args: Any, **kwargs: Any) -> Any: ...
    def indexForOutputConnection(self, *args: Any, **kwargs: Any) -> Any: ...
    def indexForOutputShape(self, *args: Any, **kwargs: Any) -> Any: ...
    def inputShapeAtIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def numOutputConnections(self, *args: Any, **kwargs: Any) -> Any: ...
    def outputShapeAtIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def setEnvelope(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnHikEffector(MFnTransform):
    def __init__(self, args: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def getAuxiliaryEffectors(self, *args: Any, **kwargs: Any) -> Any: ...
    def getEffColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPivotOffset(self, *args: Any, **kwargs: Any) -> Any: ...
    def setEffColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPivotOffset(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnIkEffector(MFnTransform):
    def __init__(self, args: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnIkHandle(MFnTransform):
    def __init__(self, args: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def getEffector(self, *args: Any, **kwargs: Any) -> Any: ...
    def getStartJoint(self, *args: Any, **kwargs: Any) -> Any: ...
    def poWeight(self, *args: Any, **kwargs: Any) -> Any: ...
    def priority(self, *args: Any, **kwargs: Any) -> Any: ...
    def setEffector(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPOWeight(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPriority(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSolver(self, *args: Any, **kwargs: Any) -> Any: ...
    def setStartJoint(self, *args: Any, **kwargs: Any) -> Any: ...
    def setStartJointAndEffector(self, *args: Any, **kwargs: Any) -> Any: ...
    def setStickiness(self, *args: Any, **kwargs: Any) -> Any: ...
    def setWeight(self, *args: Any, **kwargs: Any) -> Any: ...
    def solver(self, *args: Any, **kwargs: Any) -> Any: ...
    def stickiness(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def weight(self, *args: Any, **kwargs: Any) -> Any: ...

class MFnIkJoint(MFnTransform):
    def __init__(self, args: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDegreesOfFreedom(self, *args: Any, **kwargs: Any) -> Any: ...
    def getOrientation(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPreferedAngle(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPreferredAngle(self, *args: Any, **kwargs: Any) -> Any: ...
    def getScaleOrientation(self, *args: Any, **kwargs: Any) -> Any: ...
    def getSegmentScale(self, *args: Any, **kwargs: Any) -> Any: ...
    def getStiffness(self, *args: Any, **kwargs: Any) -> Any: ...
    def hikJointName(self, *args: Any, **kwargs: Any) -> Any: ...
    def maxRotateDampXRange(self, *args: Any, **kwargs: Any) -> Any: ...
    def maxRotateDampXStrength(self, *args: Any, **kwargs: Any) -> Any: ...
    def maxRotateDampYRange(self, *args: Any, **kwargs: Any) -> Any: ...
    def maxRotateDampYStrength(self, *args: Any, **kwargs: Any) -> Any: ...
    def maxRotateDampZRange(self, *args: Any, **kwargs: Any) -> Any: ...
    def maxRotateDampZStrength(self, *args: Any, **kwargs: Any) -> Any: ...
    def minRotateDampXRange(self, *args: Any, **kwargs: Any) -> Any: ...
    def minRotateDampXStrength(self, *args: Any, **kwargs: Any) -> Any: ...
    def minRotateDampYRange(self, *args: Any, **kwargs: Any) -> Any: ...
    def minRotateDampYStrength(self, *args: Any, **kwargs: Any) -> Any: ...
    def minRotateDampZRange(self, *args: Any, **kwargs: Any) -> Any: ...
    def minRotateDampZStrength(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDegreesOfFreedom(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxRotateDampXRange(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxRotateDampXStrength(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxRotateDampYRange(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxRotateDampYStrength(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxRotateDampZRange(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxRotateDampZStrength(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMinRotateDampXRange(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMinRotateDampXStrength(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMinRotateDampYRange(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMinRotateDampYStrength(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMinRotateDampZRange(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMinRotateDampZStrength(self, *args: Any, **kwargs: Any) -> Any: ...
    def setOrientation(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPreferedAngle(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPreferredAngle(self, *args: Any, **kwargs: Any) -> Any: ...
    def setScaleOrientation(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSegmentScale(self, *args: Any, **kwargs: Any) -> Any: ...
    def setStiffness(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnIkSolver(MFnDependencyNode):
    def __init__(self, args: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def maxIterations(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxIterations(self, *args: Any, **kwargs: Any) -> Any: ...
    def setTolerance(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def tolerance(self, *args: Any, **kwargs: Any) -> Any: ...

class MFnKeyframeDelta(MFnBase):
    def __init__(self, args: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def keyIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def paramCurve(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnKeyframeDeltaAddRemove(MFnKeyframeDelta):
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def deltaType(self, *args: Any, **kwargs: Any) -> Any: ...
    kAdded: int = ...
    kRemoved: int = ...
    kReplaced: int = ...
    def replacedValue(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def time(self, *args: Any, **kwargs: Any) -> Any: ...
    def value(self, *args: Any, **kwargs: Any) -> Any: ...

class MFnKeyframeDeltaBlockAddRemove(MFnKeyframeDelta):
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def deltaType(self, *args: Any, **kwargs: Any) -> Any: ...
    def endTime(self, *args: Any, **kwargs: Any) -> Any: ...
    def getTimes(self, *args: Any, **kwargs: Any) -> Any: ...
    def getValues(self, *args: Any, **kwargs: Any) -> Any: ...
    kAdded: int = ...
    kRemoved: int = ...
    def numKeys(self, *args: Any, **kwargs: Any) -> Any: ...
    def startTime(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnKeyframeDeltaBreakdown(MFnKeyframeDelta):
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def isBreakdown(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def wasBreakdown(self, *args: Any, **kwargs: Any) -> Any: ...

class MFnKeyframeDeltaInfType(MFnKeyframeDelta):
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def currentInfinityType(self, *args: Any, **kwargs: Any) -> Any: ...
    def isPreInfinity(self, *args: Any, **kwargs: Any) -> Any: ...
    def previousInfinityType(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnKeyframeDeltaMove(MFnKeyframeDelta):
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def currentTime(self, *args: Any, **kwargs: Any) -> Any: ...
    def currentValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def previousIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def previousTime(self, *args: Any, **kwargs: Any) -> Any: ...
    def previousValue(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnKeyframeDeltaScale(MFnKeyframeDelta):
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def currentEndTime(self, *args: Any, **kwargs: Any) -> Any: ...
    def currentStartTime(self, *args: Any, **kwargs: Any) -> Any: ...
    def endTime(self, *args: Any, **kwargs: Any) -> Any: ...
    def pivotTime(self, *args: Any, **kwargs: Any) -> Any: ...
    def startTime(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnKeyframeDeltaTangent(MFnKeyframeDelta):
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def currentTangentType(self, *args: Any, **kwargs: Any) -> Any: ...
    def getCurrentPosition(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPreviousPosition(self, *args: Any, **kwargs: Any) -> Any: ...
    def isInTangent(self, *args: Any, **kwargs: Any) -> Any: ...
    def previousTangentType(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnKeyframeDeltaWeighted(MFnKeyframeDelta):
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def wasWeighted(self, *args: Any, **kwargs: Any) -> Any: ...

class MFnLattice(MFnDagNode):
    def __init__(self, args: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDivisions(self, *args: Any, **kwargs: Any) -> Any: ...
    def point(self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDivisions(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnLatticeDeformer(MFnDependencyNode):
    def __init__(self, args: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addGeometry(self, *args: Any, **kwargs: Any) -> Any: ...
    def baseLattice(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def deformLattice(self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedGeometry(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDivisions(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeGeometry(self, *args: Any, **kwargs: Any) -> Any: ...
    def resetLattice(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDivisions(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnMotionPath(MFnDependencyNode):
    def __init__(self, args: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addAnimatedObject(self, *args: Any, **kwargs: Any) -> Any: ...
    def bank(self, *args: Any, **kwargs: Any) -> Any: ...
    def bankScale(self, *args: Any, **kwargs: Any) -> Any: ...
    def bankThreshold(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def follow(self, *args: Any, **kwargs: Any) -> Any: ...
    def followAxis(self, *args: Any, **kwargs: Any) -> Any: ...
    def getAnimatedObjects(self, *args: Any, **kwargs: Any) -> Any: ...
    def getOrientationMarker(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPositionMarker(self, *args: Any, **kwargs: Any) -> Any: ...
    def inverseNormal(self, *args: Any, **kwargs: Any) -> Any: ...
    def numOrientationMarkers(self, *args: Any, **kwargs: Any) -> Any: ...
    def numPositionMarkers(self, *args: Any, **kwargs: Any) -> Any: ...
    def pathObject(self, *args: Any, **kwargs: Any) -> Any: ...
    def setBank(self, *args: Any, **kwargs: Any) -> Any: ...
    def setBankScale(self, *args: Any, **kwargs: Any) -> Any: ...
    def setBankThreshold(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFollow(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFollowAxis(self, *args: Any, **kwargs: Any) -> Any: ...
    def setInverseNormal(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPathObject(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUEnd(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUStart(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUTimeEnd(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUTimeStart(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUpAxis(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseNormal(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def uEnd(self, *args: Any, **kwargs: Any) -> Any: ...
    def uStart(self, *args: Any, **kwargs: Any) -> Any: ...
    def uTimeEnd(self, *args: Any, **kwargs: Any) -> Any: ...
    def uTimeStart(self, *args: Any, **kwargs: Any) -> Any: ...
    def upAxis(self, *args: Any, **kwargs: Any) -> Any: ...
    def useNormal(self, *args: Any, **kwargs: Any) -> Any: ...

class MFnSkinCluster(MFnGeometryFilter):
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def getBlendWeights(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPointsAffectedByInfluence(self, *args: Any, **kwargs: Any) -> Any: ...
    def getWeights(self, *args: Any, **kwargs: Any) -> Any: ...
    def indexForInfluenceObject(self, *args: Any, **kwargs: Any) -> Any: ...
    def influenceObjects(self, *args: Any, **kwargs: Any) -> Any: ...
    def setBlendWeights(self, *args: Any, **kwargs: Any) -> Any: ...
    def setWeights(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnWeightGeometryFilter(MFnGeometryFilter):
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def getWeightPlugStrings(self, *args: Any, **kwargs: Any) -> Any: ...
    def getWeights(self, *args: Any, **kwargs: Any) -> Any: ...
    def setWeight(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def weightPlugStrings(self, *args: Any, **kwargs: Any) -> Any: ...

class MFnWireDeformer(MFnDependencyNode):
    def __init__(self, args: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addGeometry(self, *args: Any, **kwargs: Any) -> Any: ...
    def addWire(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def crossingEffect(self, *args: Any, **kwargs: Any) -> Any: ...
    def envelope(self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedGeometry(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDropoffLocator(self, *args: Any, **kwargs: Any) -> Any: ...
    def holdingShape(self, *args: Any, **kwargs: Any) -> Any: ...
    def localIntensity(self, *args: Any, **kwargs: Any) -> Any: ...
    def numDropoffLocators(self, *args: Any, **kwargs: Any) -> Any: ...
    def numWires(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeGeometry(self, *args: Any, **kwargs: Any) -> Any: ...
    def rotation(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCrossingEffect(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDropoffLocator(self, *args: Any, **kwargs: Any) -> Any: ...
    def setEnvelope(self, *args: Any, **kwargs: Any) -> Any: ...
    def setHoldingShape(self, *args: Any, **kwargs: Any) -> Any: ...
    def setLocalIntensity(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotation(self, *args: Any, **kwargs: Any) -> Any: ...
    def setWireDropOffDistance(self, *args: Any, **kwargs: Any) -> Any: ...
    def setWireScale(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def wire(self, *args: Any, **kwargs: Any) -> Any: ...
    def wireDropOffDistance(self, *args: Any, **kwargs: Any) -> Any: ...
    def wireScale(self, *args: Any, **kwargs: Any) -> Any: ...

class MIkHandleGroup:
    def __init__(self, args: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def checkEffectorAtGoal(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def dofCount(self, *args: Any, **kwargs: Any) -> Any: ...
    def handle(self, *args: Any, **kwargs: Any) -> Any: ...
    def handleCount(self, *args: Any, **kwargs: Any) -> Any: ...
    def priority(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPriority(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSolverID(self, *args: Any, **kwargs: Any) -> Any: ...
    def solve(self, *args: Any, **kwargs: Any) -> Any: ...
    def solverID(self, *args: Any, **kwargs: Any) -> Any: ...
    def solverPriority(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MIkSystem:
    def __init__(self, args: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def findSolver(self, *args: Any, **kwargs: Any) -> Any: ...
    def getSolvers(self, *args: Any, **kwargs: Any) -> Any: ...
    def isGlobalSnap(self, *args: Any, **kwargs: Any) -> Any: ...
    def isGlobalSolve(self, *args: Any, **kwargs: Any) -> Any: ...
    def setGlobalSnap(self, *args: Any, **kwargs: Any) -> Any: ...
    def setGlobalSolve(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MItKeyframe:
    def __init__(self, args: Any) -> Any: ...
    def __next__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def getTangentIn(self, *args: Any, **kwargs: Any) -> Any: ...
    def getTangentOut(self, *args: Any, **kwargs: Any) -> Any: ...
    def inTangentType(self, *args: Any, **kwargs: Any) -> Any: ...
    def isDone(self, *args: Any, **kwargs: Any) -> Any: ...
    kTangentAuto: int = ...
    kTangentAutoCustom: int = ...
    kTangentAutoEase: int = ...
    kTangentAutoMix: int = ...
    kTangentClamped: int = ...
    kTangentFast: int = ...
    kTangentFixed: int = ...
    kTangentFlat: int = ...
    kTangentGlobal: int = ...
    kTangentLinear: int = ...
    kTangentPlateau: int = ...
    kTangentSlow: int = ...
    kTangentSmooth: int = ...
    kTangentStep: int = ...
    kTangentStepNext: int = ...
    def next(self, *args: Any, **kwargs: Any) -> Any: ...
    def outTangentType(self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self, *args: Any, **kwargs: Any) -> Any: ...
    def setInTangentType(self, *args: Any, **kwargs: Any) -> Any: ...
    def setOutTangentType(self, *args: Any, **kwargs: Any) -> Any: ...
    def setTangentsLocked(self, *args: Any, **kwargs: Any) -> Any: ...
    def setTime(self, *args: Any, **kwargs: Any) -> Any: ...
    def setValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def tangentsLocked(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def time(self, *args: Any, **kwargs: Any) -> Any: ...
    def value(self, *args: Any, **kwargs: Any) -> Any: ...

class _SwigNonDynamicMeta(type):
    def __setattr__(self, cls: Any, name: Any, value: Any) -> Any: ...

class boolPtr:
    def __init__(self, args: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self, *args: Any, **kwargs: Any) -> Any: ...

class charPtr:
    def __init__(self, args: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self, *args: Any, **kwargs: Any) -> Any: ...

class doublePtr:
    def __init__(self, args: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self, *args: Any, **kwargs: Any) -> Any: ...

class floatPtr:
    def __init__(self, args: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self, *args: Any, **kwargs: Any) -> Any: ...

class intPtr:
    def __init__(self, args: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self, *args: Any, **kwargs: Any) -> Any: ...

class shortPtr:
    def __init__(self, args: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self, *args: Any, **kwargs: Any) -> Any: ...

class uCharPtr:
    def __init__(self, args: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self, *args: Any, **kwargs: Any) -> Any: ...

class uIntPtr:
    def __init__(self, args: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self, *args: Any, **kwargs: Any) -> Any: ...
