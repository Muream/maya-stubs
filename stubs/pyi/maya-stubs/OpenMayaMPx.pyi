from __future__ import annotations

from typing import *
from typing_extensions import Self

if TYPE_CHECKING:
    from _typeshed import Incomplete
else:
    Incomplete = Any

from maya.OpenMaya import *

def MFnPlugin_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnPlugin_findPlugin(*args: Any, **kwargs: Any) -> Any: ...
def MFnPlugin_isNodeRegistered(*args: Any, **kwargs: Any) -> Any: ...
def MFnPlugin_registeringCallableScript(*args: Any, **kwargs: Any) -> Any: ...
def MFnPlugin_setRegisteringCallableScript(*args: Any, **kwargs: Any) -> Any: ...
def MPx3dModelView_className(*args: Any, **kwargs: Any) -> Any: ...
def MPx3dModelView_getModelView(*args: Any, **kwargs: Any) -> Any: ...
def MPxAssembly_className(*args: Any, **kwargs: Any) -> Any: ...
def MPxAttributePatternFactory_className(*args: Any, **kwargs: Any) -> Any: ...
def MPxBlendShape_className(*args: Any, **kwargs: Any) -> Any: ...
def MPxCacheFormat_className(*args: Any, **kwargs: Any) -> Any: ...
def MPxCameraSet_className(*args: Any, **kwargs: Any) -> Any: ...
def MPxCommand_appendToResult(*args: Any, **kwargs: Any) -> Any: ...
def MPxCommand_className(*args: Any, **kwargs: Any) -> Any: ...
def MPxCommand_clearResult(*args: Any, **kwargs: Any) -> Any: ...
def MPxCommand_currentDoubleResult(*args: Any, **kwargs: Any) -> Any: ...
def MPxCommand_currentIntResult(*args: Any, **kwargs: Any) -> Any: ...
def MPxCommand_currentResultType(*args: Any, **kwargs: Any) -> Any: ...
def MPxCommand_currentStringResult(*args: Any, **kwargs: Any) -> Any: ...
def MPxCommand_displayError(*args: Any, **kwargs: Any) -> Any: ...
def MPxCommand_displayInfo(*args: Any, **kwargs: Any) -> Any: ...
def MPxCommand_displayWarning(*args: Any, **kwargs: Any) -> Any: ...
def MPxCommand_getCurrentResult(*args: Any, **kwargs: Any) -> Any: ...
def MPxCommand_isCurrentResultArray(*args: Any, **kwargs: Any) -> Any: ...
def MPxCommand_setResult(*args: Any, **kwargs: Any) -> Any: ...
def MPxConstraint_className(*args: Any, **kwargs: Any) -> Any: ...
def MPxContextCommand_className(*args: Any, **kwargs: Any) -> Any: ...
def MPxContext__ignoreEntry(*args: Any, **kwargs: Any) -> Any: ...
def MPxContext_className(*args: Any, **kwargs: Any) -> Any: ...
def MPxControlCommand_className(*args: Any, **kwargs: Any) -> Any: ...
def MPxDeformerNode_className(*args: Any, **kwargs: Any) -> Any: ...
def MPxDragAndDropBehavior_className(*args: Any, **kwargs: Any) -> Any: ...
def MPxEditData_className(*args: Any, **kwargs: Any) -> Any: ...
def MPxEmitterNode_className(*args: Any, **kwargs: Any) -> Any: ...
def MPxFieldNode_className(*args: Any, **kwargs: Any) -> Any: ...
def MPxFileResolver_className(*args: Any, **kwargs: Any) -> Any: ...
def MPxFileResolver_findURIResolverByName(*args: Any, **kwargs: Any) -> Any: ...
def MPxFileResolver_findURIResolverByScheme(*args: Any, **kwargs: Any) -> Any: ...
def MPxFileResolver_getURIResolversByName(*args: Any, **kwargs: Any) -> Any: ...
def MPxFileResolver_getURIResolversByScheme(*args: Any, **kwargs: Any) -> Any: ...
def MPxFileResolver_numURIResolvers(*args: Any, **kwargs: Any) -> Any: ...
def MPxFileTranslator_fileAccessMode(*args: Any, **kwargs: Any) -> Any: ...
def MPxFluidEmitterNode_className(*args: Any, **kwargs: Any) -> Any: ...
def MPxGeometryFilter_className(*args: Any, **kwargs: Any) -> Any: ...
def MPxGeometryIterator_className(*args: Any, **kwargs: Any) -> Any: ...
def MPxGlBuffer_className(*args: Any, **kwargs: Any) -> Any: ...
def MPxHardwareShader_className(*args: Any, **kwargs: Any) -> Any: ...
def MPxHardwareShader_findResource(*args: Any, **kwargs: Any) -> Any: ...
def MPxHardwareShader_getHardwareShaderPtr(*args: Any, **kwargs: Any) -> Any: ...
def MPxHwShaderNode_className(*args: Any, **kwargs: Any) -> Any: ...
def MPxHwShaderNode_getHwShaderNodePtr(*args: Any, **kwargs: Any) -> Any: ...
def MPxIkSolverNode_className(*args: Any, **kwargs: Any) -> Any: ...
def MPxImagePlane_className(*args: Any, **kwargs: Any) -> Any: ...
def MPxLocatorNode_className(*args: Any, **kwargs: Any) -> Any: ...
def MPxManipContainer_addToManipConnectTable(*args: Any, **kwargs: Any) -> Any: ...
def MPxManipContainer_className(*args: Any, **kwargs: Any) -> Any: ...
def MPxManipContainer_initialize(*args: Any, **kwargs: Any) -> Any: ...
def MPxManipContainer_newManipulator(*args: Any, **kwargs: Any) -> Any: ...
def MPxManipContainer_removeFromManipConnectTable(*args: Any, **kwargs: Any) -> Any: ...
def MPxManipulatorNode_className(*args: Any, **kwargs: Any) -> Any: ...
def MPxManipulatorNode_newManipulator(*args: Any, **kwargs: Any) -> Any: ...
def MPxMidiInputDevice_className(*args: Any, **kwargs: Any) -> Any: ...
def MPxModelEditorCommand_className(*args: Any, **kwargs: Any) -> Any: ...
def MPxMultiPolyTweakUVCommand_newSyntax(*args: Any, **kwargs: Any) -> Any: ...
def MPxNode_addAttribute(*args: Any, **kwargs: Any) -> Any: ...
def MPxNode_attributeAffects(*args: Any, **kwargs: Any) -> Any: ...
def MPxNode_className(*args: Any, **kwargs: Any) -> Any: ...
def MPxNode_inheritAttributesFrom(*args: Any, **kwargs: Any) -> Any: ...
def MPxObjectSet_className(*args: Any, **kwargs: Any) -> Any: ...
def MPxParticleAttributeMapperNode_className(*args: Any, **kwargs: Any) -> Any: ...
def MPxPolyTweakUVCommand_newSyntax(*args: Any, **kwargs: Any) -> Any: ...
def MPxPolyTweakUVInteractiveCommand_className(*args: Any, **kwargs: Any) -> Any: ...
def MPxSelectionContext_className(*args: Any, **kwargs: Any) -> Any: ...
def MPxSkinCluster_className(*args: Any, **kwargs: Any) -> Any: ...
def MPxSpringNode_className(*args: Any, **kwargs: Any) -> Any: ...
def MPxSurfaceShapeUI_className(*args: Any, **kwargs: Any) -> Any: ...
def MPxSurfaceShapeUI_surfaceShapeUI(*args: Any, **kwargs: Any) -> Any: ...
def MPxSurfaceShape_className(*args: Any, **kwargs: Any) -> Any: ...
def MPxTexContext_className(*args: Any, **kwargs: Any) -> Any: ...
def MPxTexContext_getMarqueeSelection(*args: Any, **kwargs: Any) -> Any: ...
def MPxToolCommand_className(*args: Any, **kwargs: Any) -> Any: ...
def MPxTransform_className(*args: Any, **kwargs: Any) -> Any: ...
def MPxTransform_isNonAffineMatricesEnabled(*args: Any, **kwargs: Any) -> Any: ...
def MPxTransform_mustCallValidateAndSet(*args: Any, **kwargs: Any) -> Any: ...
def MPxTransform_setNonAffineMatricesEnabled(*args: Any, **kwargs: Any) -> Any: ...
def MPxTransformationMatrix_convertEulerRotationOrder(*args: Any, **kwargs: Any) -> Any: ...
def MPxTransformationMatrix_convertTransformationRotationOrder(*args: Any, **kwargs: Any) -> Any: ...
def MPxTransformationMatrix_creator(*args: Any, **kwargs: Any) -> Any: ...
def MPxUIControl_className(*args: Any, **kwargs: Any) -> Any: ...
def MPxUITableControl_className(*args: Any, **kwargs: Any) -> Any: ...

PLUGIN_COMPANY: str

def asHashable(mpxObj: Any) -> Any: ...
def asMPxPtr(mpxObj: Any) -> Any: ...
def boolPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
def charPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...

cvar: swigvarlink

def doublePtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
def floatPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
def getLockCaptureCount(*args: Any, **kwargs: Any) -> Any: ...
def intPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
def shortPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
def uCharPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
def uIntPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...

class MExternalContentInfoTable:
    def __init__(self, args: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addResolvedEntry(self, *args: Any, **kwargs: Any) -> Any: ...
    def addUnresolvedEntry(self, *args: Any, **kwargs: Any) -> Any: ...
    def getEntryByIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def getInfoByKey(self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MExternalContentLocationTable:
    def __init__(self, args: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addEntry(self, *args: Any, **kwargs: Any) -> Any: ...
    def getEntryByIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def getLocationByKey(self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnPlugin(MFnBase):
    def __init__(self, args: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addMenuItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def apiVersion(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterAnimCurveInterpolator(self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterAttributePatternFactory(self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterCacheFormat(self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterCommand(self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterConstraintCommand(self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterContextCommand(self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterControlCommand(self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterData(self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterDevice(self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterDisplayFilter(self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterDragAndDropBehavior(self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterEvaluator(self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterFileTranslator(self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterIkSolver(self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterImageFile(self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterModelEditorCommand(self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterNode(self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterRenderPassImpl(self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterRenderer(self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterTopologyEvaluator(self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterURIFileResolver(self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlugin(self, *args: Any, **kwargs: Any) -> Any: ...
    def getCallableInfo(self, *args: Any, **kwargs: Any) -> Any: ...
    def isNodeRegistered(self, *args: Any, **kwargs: Any) -> Any: ...
    kDefaultDataLocation: SwigPyObject = ...
    kImageFilePriorityDefault: int = ...
    kImageFilePriorityHigh: int = ...
    kImageFilePriorityHighest: int = ...
    kImageFilePriorityLow: int = ...
    kImageFilePriorityLowest: int = ...
    def loadPath(self, *args: Any, **kwargs: Any) -> Any: ...
    def matrixTypeIdFromXformId(self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self, *args: Any, **kwargs: Any) -> Any: ...
    def registerAnimCurveInterpolator(self, *args: Any, **kwargs: Any) -> Any: ...
    def registerAttributePatternFactory(self, *args: Any, **kwargs: Any) -> Any: ...
    def registerBakeEngine(self, *args: Any, **kwargs: Any) -> Any: ...
    def registerCacheFormat(self, *args: Any, **kwargs: Any) -> Any: ...
    def registerCommand(self, *args: Any, **kwargs: Any) -> Any: ...
    def registerConstraintCommand(self, *args: Any, **kwargs: Any) -> Any: ...
    def registerContextCommand(self, *args: Any, **kwargs: Any) -> Any: ...
    def registerControlCommand(self, *args: Any, **kwargs: Any) -> Any: ...
    def registerData(self, *args: Any, **kwargs: Any) -> Any: ...
    def registerDevice(self, *args: Any, **kwargs: Any) -> Any: ...
    def registerDisplayFilter(self, *args: Any, **kwargs: Any) -> Any: ...
    def registerDragAndDropBehavior(self, *args: Any, **kwargs: Any) -> Any: ...
    def registerEvaluator(self, *args: Any, **kwargs: Any) -> Any: ...
    def registerFileTranslator(self, *args: Any, **kwargs: Any) -> Any: ...
    def registerIkSolver(self, *args: Any, **kwargs: Any) -> Any: ...
    def registerImageFile(self, *args: Any, **kwargs: Any) -> Any: ...
    def registerMaterialInfo(self, *args: Any, **kwargs: Any) -> Any: ...
    def registerModelEditorCommand(self, *args: Any, **kwargs: Any) -> Any: ...
    def registerNode(self, *args: Any, **kwargs: Any) -> Any: ...
    def registerRenderPassImpl(self, *args: Any, **kwargs: Any) -> Any: ...
    def registerRenderer(self, *args: Any, **kwargs: Any) -> Any: ...
    def registerShape(self, *args: Any, **kwargs: Any) -> Any: ...
    def registerTopologyEvaluator(self, *args: Any, **kwargs: Any) -> Any: ...
    def registerTransform(self, *args: Any, **kwargs: Any) -> Any: ...
    def registerUI(self, *args: Any, **kwargs: Any) -> Any: ...
    def registerUIStrings(self, *args: Any, **kwargs: Any) -> Any: ...
    def registerURIFileResolver(self, *args: Any, **kwargs: Any) -> Any: ...
    def registeringCallableScript(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeMenuItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCallableInfo(self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRegisteringCallableScript(self, *args: Any, **kwargs: Any) -> Any: ...
    def setVersion(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def unregisterBakeEngine(self, *args: Any, **kwargs: Any) -> Any: ...
    def unregisterMaterialInfo(self, *args: Any, **kwargs: Any) -> Any: ...
    def vendor(self, *args: Any, **kwargs: Any) -> Any: ...
    def version(self, *args: Any, **kwargs: Any) -> Any: ...

class MPx3dModelView:
    def __disown__(self) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def backgroundColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def backgroundColorBottom(self, *args: Any, **kwargs: Any) -> Any: ...
    def backgroundColorTop(self, *args: Any, **kwargs: Any) -> Any: ...
    def beginGL(self, *args: Any, **kwargs: Any) -> Any: ...
    def beginXorDrawing(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def colorAtIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def customDraw(self, *args: Any, **kwargs: Any) -> Any: ...
    def customDrawEnabled(self, *args: Any, **kwargs: Any) -> Any: ...
    def destroyOnPanelDestruction(self, *args: Any, **kwargs: Any) -> Any: ...
    def displayAxisAtOriginOn(self, *args: Any, **kwargs: Any) -> Any: ...
    def displayAxisOn(self, *args: Any, **kwargs: Any) -> Any: ...
    def displayCameraAnnotationOn(self, *args: Any, **kwargs: Any) -> Any: ...
    def displayHUD(self, *args: Any, **kwargs: Any) -> Any: ...
    def displayStyle(self, *args: Any, **kwargs: Any) -> Any: ...
    def doUpdateOnMove(self, *args: Any, **kwargs: Any) -> Any: ...
    def drawAdornments(self, *args: Any, **kwargs: Any) -> Any: ...
    def drawAdornmentsNow(self, *args: Any, **kwargs: Any) -> Any: ...
    def drawHUDNow(self, *args: Any, **kwargs: Any) -> Any: ...
    def drawInterrupt(self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOnePass(self, *args: Any, **kwargs: Any) -> Any: ...
    def drawText(self, *args: Any, **kwargs: Any) -> Any: ...
    def endGL(self, *args: Any, **kwargs: Any) -> Any: ...
    def endXorDrawing(self, *args: Any, **kwargs: Any) -> Any: ...
    def filteredObjectList(self, *args: Any, **kwargs: Any) -> Any: ...
    def fogColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def fogDensity(self, *args: Any, **kwargs: Any) -> Any: ...
    def fogEnd(self, *args: Any, **kwargs: Any) -> Any: ...
    def fogMode(self, *args: Any, **kwargs: Any) -> Any: ...
    def fogSource(self, *args: Any, **kwargs: Any) -> Any: ...
    def fogStart(self, *args: Any, **kwargs: Any) -> Any: ...
    def getAsM3dView(self, *args: Any, **kwargs: Any) -> Any: ...
    def getCamera(self, *args: Any, **kwargs: Any) -> Any: ...
    def getCameraHUDName(self, *args: Any, **kwargs: Any) -> Any: ...
    def getCameraSet(self, *args: Any, **kwargs: Any) -> Any: ...
    def getColorIndexAndTable(self, *args: Any, **kwargs: Any) -> Any: ...
    def getCurrentCameraSetCamera(self, *args: Any, **kwargs: Any) -> Any: ...
    def getModelView(self, *args: Any, **kwargs: Any) -> Any: ...
    def getObjectsToView(self, *args: Any, **kwargs: Any) -> Any: ...
    def handleDraw(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasStereoBufferSupport(self, *args: Any, **kwargs: Any) -> Any: ...
    def includeInvisible(self, *args: Any, **kwargs: Any) -> Any: ...
    def isBackfaceCulling(self, *args: Any, **kwargs: Any) -> Any: ...
    def isBackgroundFogEnabled(self, *args: Any, **kwargs: Any) -> Any: ...
    def isBackgroundGradient(self, *args: Any, **kwargs: Any) -> Any: ...
    def isFogEnabled(self, *args: Any, **kwargs: Any) -> Any: ...
    def isShadeActiveOnly(self, *args: Any, **kwargs: Any) -> Any: ...
    def isTextureDisplayEnabled(self, *args: Any, **kwargs: Any) -> Any: ...
    def isTwoSidedLighting(self, *args: Any, **kwargs: Any) -> Any: ...
    def isVisible(self, *args: Any, **kwargs: Any) -> Any: ...
    def isWireframeOnShaded(self, *args: Any, **kwargs: Any) -> Any: ...
    def isXrayEnabled(self, *args: Any, **kwargs: Any) -> Any: ...
    kFogCoordinate: int = ...
    kFogExponential: int = ...
    kFogExponentialSquared: int = ...
    kFogFragment: int = ...
    kFogLinear: int = ...
    kLightActive: int = ...
    kLightAll: int = ...
    kLightDefault: int = ...
    kLightNone: int = ...
    kLightQuality: int = ...
    kLightSelected: int = ...
    def lightingMode(self, *args: Any, **kwargs: Any) -> Any: ...
    def multipleDrawEnabled(self, *args: Any, **kwargs: Any) -> Any: ...
    def multipleDrawPassCount(self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self, *args: Any, **kwargs: Any) -> Any: ...
    def numActiveColors(self, *args: Any, **kwargs: Any) -> Any: ...
    def numDormantColors(self, *args: Any, **kwargs: Any) -> Any: ...
    def numUserDefinedColors(self, *args: Any, **kwargs: Any) -> Any: ...
    def objectDisplay(self, *args: Any, **kwargs: Any) -> Any: ...
    def okForMultipleDraw(self, *args: Any, **kwargs: Any) -> Any: ...
    def portHeight(self, *args: Any, **kwargs: Any) -> Any: ...
    def portWidth(self, *args: Any, **kwargs: Any) -> Any: ...
    def postMultipleDraw(self, *args: Any, **kwargs: Any) -> Any: ...
    def postMultipleDrawPass(self, *args: Any, **kwargs: Any) -> Any: ...
    def preMultipleDraw(self, *args: Any, **kwargs: Any) -> Any: ...
    def preMultipleDrawPass(self, *args: Any, **kwargs: Any) -> Any: ...
    def processDraw(self, *args: Any, **kwargs: Any) -> Any: ...
    def refresh(self, *args: Any, **kwargs: Any) -> Any: ...
    def removingCamera(self, *args: Any, **kwargs: Any) -> Any: ...
    def requestOkForDraw(self, *args: Any, **kwargs: Any) -> Any: ...
    def setBackfaceCulling(self, *args: Any, **kwargs: Any) -> Any: ...
    def setBackgroundFogEnabled(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCamera(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCameraInDraw(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCameraSet(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCurrentCameraSetCamera(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCustomDrawEnable(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDestroyOnPanelDestruction(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDisplayAxis(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDisplayAxisAtOrigin(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDisplayCameraAnnotation(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDisplayHUD(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDisplayStyle(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoUpdateOnMove(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDrawAdornments(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDrawCameraOverride(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDrawColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDrawInterrupt(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFogColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFogDensity(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFogEnabled(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFogEnd(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFogMode(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFogSource(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFogStart(self, *args: Any, **kwargs: Any) -> Any: ...
    def setInStereoDrawMode(self, *args: Any, **kwargs: Any) -> Any: ...
    def setIncludeInvisible(self, *args: Any, **kwargs: Any) -> Any: ...
    def setLightingMode(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMultipleDrawEnable(self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectDisplay(self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectsToView(self, *args: Any, **kwargs: Any) -> Any: ...
    def setTextureDisplayEnabled(self, *args: Any, **kwargs: Any) -> Any: ...
    def setTwoSidedLighting(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUserDefinedColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def setViewSelected(self, *args: Any, **kwargs: Any) -> Any: ...
    def setViewSelectedPrefix(self, *args: Any, **kwargs: Any) -> Any: ...
    def setViewSelectedSet(self, *args: Any, **kwargs: Any) -> Any: ...
    def setWireframeOnShaded(self, *args: Any, **kwargs: Any) -> Any: ...
    def setXrayEnabled(self, *args: Any, **kwargs: Any) -> Any: ...
    def templateColor(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def updateViewingParameters(self, *args: Any, **kwargs: Any) -> Any: ...
    def userDefinedColorIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def viewIsFiltered(self, *args: Any, **kwargs: Any) -> Any: ...
    def viewSelected(self, *args: Any, **kwargs: Any) -> Any: ...
    def viewSelectedPrefix(self, *args: Any, **kwargs: Any) -> Any: ...
    def viewSelectedSet(self, *args: Any, **kwargs: Any) -> Any: ...
    def viewToObjectSpace(self, *args: Any, **kwargs: Any) -> Any: ...
    def viewToWorld(self, *args: Any, **kwargs: Any) -> Any: ...
    def viewType(self, *args: Any, **kwargs: Any) -> Any: ...
    def wantStereoGLBuffer(self, *args: Any, **kwargs: Any) -> Any: ...
    def worldToView(self, *args: Any, **kwargs: Any) -> Any: ...

class MPxAnimCurveInterpolator:
    def __disown__(self) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def evaluate(self, *args: Any, **kwargs: Any) -> Any: ...
    def initialize(self, *args: Any, **kwargs: Any) -> Any: ...
    kEvaluateAtKey: int = ...
    kLockType: int = ...
    thisown: property = ...
    def typeId(self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self, *args: Any, **kwargs: Any) -> Any: ...

class MPxNode:
    def __disown__(self) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def _doNotWrite(self, *args: Any, **kwargs: Any) -> Any: ...
    def _forceCache(self, *args: Any, **kwargs: Any) -> Any: ...
    def _setDoNotWrite(self, *args: Any, **kwargs: Any) -> Any: ...
    def _setMPSafe(self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeAffects(self, *args: Any, **kwargs: Any) -> Any: ...
    caching: property = ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def compute(self, *args: Any, **kwargs: Any) -> Any: ...
    def configCache(self, *args: Any, **kwargs: Any) -> Any: ...
    def connectionBroken(self, *args: Any, **kwargs: Any) -> Any: ...
    def connectionMade(self, *args: Any, **kwargs: Any) -> Any: ...
    def copyInternalData(self, *args: Any, **kwargs: Any) -> Any: ...
    def dependsOn(self, *args: Any, **kwargs: Any) -> Any: ...
    def existWithoutInConnections(self, *args: Any, **kwargs: Any) -> Any: ...
    def existWithoutOutConnections(self, *args: Any, **kwargs: Any) -> Any: ...
    frozen: property = ...
    def getCacheSetup(self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self, *args: Any, **kwargs: Any) -> Any: ...
    def getFilesToArchive(self, *args: Any, **kwargs: Any) -> Any: ...
    def getInternalValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def getInternalValueInContext(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasInvalidationRangeTransformation(self, *args: Any, **kwargs: Any) -> Any: ...
    def inheritAttributesFrom(self, *args: Any, **kwargs: Any) -> Any: ...
    def internalArrayCount(self, *args: Any, **kwargs: Any) -> Any: ...
    def isAbstractClass(self, *args: Any, **kwargs: Any) -> Any: ...
    isHistoricallyInteresting: property = ...
    def isPassiveOutput(self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingTopology(self, *args: Any, **kwargs: Any) -> Any: ...
    kAssembly: int = ...
    kBlendShape: int = ...
    kCameraSetNode: int = ...
    kClientDeviceNode: int = ...
    kConstraintNode: int = ...
    kDefaultScheduling: int = ...
    kDeformerNode: int = ...
    kDependNode: int = ...
    kEmitterNode: int = ...
    kEvaluatedDirectly: int = ...
    kEvaluatedIndirectly: int = ...
    kFieldNode: int = ...
    kFluidEmitterNode: int = ...
    kGeometryFilter: int = ...
    kGloballySerial: int = ...
    kGloballySerialize: int = ...
    kHardwareShader: int = ...
    kHwShaderNode: int = ...
    kIkSolverNode: int = ...
    kImagePlaneNode: int = ...
    kLast: int = ...
    kLeaveDirty: int = ...
    kLocatorNode: int = ...
    kManipContainer: int = ...
    kManipulatorNode: int = ...
    kMotionPathNode: int = ...
    kObjectSet: int = ...
    kParallel: int = ...
    kParticleAttributeMapperNode: int = ...
    kPostEvaluationTypeLast: int = ...
    kSchedulingTypeLast: int = ...
    kSerial: int = ...
    kSerialize: int = ...
    kSkinCluster: int = ...
    kSpringNode: int = ...
    kSurfaceShape: int = ...
    kThreadedDeviceNode: int = ...
    kTransformNode: int = ...
    kUntrusted: int = ...
    def legalConnection(self, *args: Any, **kwargs: Any) -> Any: ...
    def legalDisconnection(self, *args: Any, **kwargs: Any) -> Any: ...
    message: property = ...
    def name(self, *args: Any, **kwargs: Any) -> Any: ...
    def passThroughToMany(self, *args: Any, **kwargs: Any) -> Any: ...
    def passThroughToOne(self, *args: Any, **kwargs: Any) -> Any: ...
    def postConstructor(self, *args: Any, **kwargs: Any) -> Any: ...
    def postEvaluation(self, *args: Any, **kwargs: Any) -> Any: ...
    def preEvaluation(self, *args: Any, **kwargs: Any) -> Any: ...
    def schedulingType(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDependentsDirty(self, *args: Any, **kwargs: Any) -> Any: ...
    def setExistWithoutInConnections(self, *args: Any, **kwargs: Any) -> Any: ...
    def setExistWithoutOutConnections(self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternalValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternalValueInContext(self, *args: Any, **kwargs: Any) -> Any: ...
    def shouldSave(self, *args: Any, **kwargs: Any) -> Any: ...
    state: property = ...
    def thisMObject(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transformInvalidationRange(self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self, *args: Any, **kwargs: Any) -> Any: ...

class MPxAssembly(MPxNode):
    def __disown__(self) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def activate(self, *args: Any, **kwargs: Any) -> Any: ...
    def activateRep(self, *args: Any, **kwargs: Any) -> Any: ...
    def activating(self, *args: Any, **kwargs: Any) -> Any: ...
    def addAddAttrEdit(self, *args: Any, **kwargs: Any) -> Any: ...
    def addConnectAttrEdit(self, *args: Any, **kwargs: Any) -> Any: ...
    def addDeleteAttrEdit(self, *args: Any, **kwargs: Any) -> Any: ...
    def addDisconnectAttrEdit(self, *args: Any, **kwargs: Any) -> Any: ...
    def addEdits(self, *args: Any, **kwargs: Any) -> Any: ...
    def addParentEdit(self, *args: Any, **kwargs: Any) -> Any: ...
    def addSetAttrEdit(self, *args: Any, **kwargs: Any) -> Any: ...
    def beforeSave(self, *args: Any, **kwargs: Any) -> Any: ...
    def canRepApplyEdits(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def createRepresentation(self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteAllRepresentations(self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteRepresentation(self, *args: Any, **kwargs: Any) -> Any: ...
    def getActive(self, *args: Any, **kwargs: Any) -> Any: ...
    def getInitialRep(self, *args: Any, **kwargs: Any) -> Any: ...
    def getInstancePtr(self, *args: Any, **kwargs: Any) -> Any: ...
    def getRepLabel(self, *args: Any, **kwargs: Any) -> Any: ...
    def getRepNamespace(self, *args: Any, **kwargs: Any) -> Any: ...
    def getRepType(self, *args: Any, **kwargs: Any) -> Any: ...
    def getRepresentations(self, *args: Any, **kwargs: Any) -> Any: ...
    def handlesAddEdits(self, *args: Any, **kwargs: Any) -> Any: ...
    def inactivateRep(self, *args: Any, **kwargs: Any) -> Any: ...
    def isActive(self, *args: Any, **kwargs: Any) -> Any: ...
    def memberAdded(self, *args: Any, **kwargs: Any) -> Any: ...
    def memberRemoved(self, *args: Any, **kwargs: Any) -> Any: ...
    def performActivate(self, *args: Any, **kwargs: Any) -> Any: ...
    def performInactivate(self, *args: Any, **kwargs: Any) -> Any: ...
    def postActivateRep(self, *args: Any, **kwargs: Any) -> Any: ...
    def postApplyEdits(self, *args: Any, **kwargs: Any) -> Any: ...
    def postLoad(self, *args: Any, **kwargs: Any) -> Any: ...
    def postUnapplyEdits(self, *args: Any, **kwargs: Any) -> Any: ...
    def preApplyEdits(self, *args: Any, **kwargs: Any) -> Any: ...
    def preUnapplyEdits(self, *args: Any, **kwargs: Any) -> Any: ...
    def repTypes(self, *args: Any, **kwargs: Any) -> Any: ...
    def setInstancePtr(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRepLabel(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRepName(self, *args: Any, **kwargs: Any) -> Any: ...
    def supportsEdits(self, *args: Any, **kwargs: Any) -> Any: ...
    def supportsMemberChanges(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self, *args: Any, **kwargs: Any) -> Any: ...
    def updateRepNamespace(self, *args: Any, **kwargs: Any) -> Any: ...

class MPxAttributePatternFactory:
    def __disown__(self) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def createPatternsFromFile(self, *args: Any, **kwargs: Any) -> Any: ...
    def createPatternsFromString(self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MPxBakeEngine:
    def __disown__(self) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def bake(self, *args: Any, **kwargs: Any) -> Any: ...
    def getUVRange(self, *args: Any, **kwargs: Any) -> Any: ...
    def setNeedTransparency(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MPxGeometryFilter(MPxNode):
    def __disown__(self) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def accessoryAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def accessoryNodeSetup(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    componentTagExpression: property = ...
    def deform(self, *args: Any, **kwargs: Any) -> Any: ...
    envelope: property = ...
    def getDeformationDetails(self, *args: Any, **kwargs: Any) -> Any: ...
    def getFixedSetupData(self, *args: Any, **kwargs: Any) -> Any: ...
    def getGeometryIterator(self, *args: Any, **kwargs: Any) -> Any: ...
    groupId: property = ...
    input: property = ...
    inputGeom: property = ...
    outputGeom: property = ...
    def setDeformationDetails(self, *args: Any, **kwargs: Any) -> Any: ...
    def setModifiedCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseExistingConnectionWhenSetEditing(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self, *args: Any, **kwargs: Any) -> Any: ...

class MPxBlendShape(MPxGeometryFilter):
    def __disown__(self) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def deformData(self, *args: Any, **kwargs: Any) -> Any: ...
    inputComponentsTarget: property = ...
    inputGeomTarget: property = ...
    inputPointsTarget: property = ...
    inputTarget: property = ...
    inputTargetGroup: property = ...
    inputTargetItem: property = ...
    targetWeights: property = ...
    thisown: property = ...
    def type(self, *args: Any, **kwargs: Any) -> Any: ...
    weight: property = ...

class MPxCacheConfigRuleFilter:
    def __disown__(self) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def isMatch(self, *args: Any, **kwargs: Any) -> Any: ...
    def postRulesExecution(self, *args: Any, **kwargs: Any) -> Any: ...
    def preRulesExecution(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MPxCacheFormat:
    def __disown__(self) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def beginReadChunk(self, *args: Any, **kwargs: Any) -> Any: ...
    def beginWriteChunk(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def close(self, *args: Any, **kwargs: Any) -> Any: ...
    def endReadChunk(self, *args: Any, **kwargs: Any) -> Any: ...
    def endWriteChunk(self, *args: Any, **kwargs: Any) -> Any: ...
    def extension(self, *args: Any, **kwargs: Any) -> Any: ...
    def findChannelName(self, *args: Any, **kwargs: Any) -> Any: ...
    def findTime(self, *args: Any, **kwargs: Any) -> Any: ...
    def handlesDescription(self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self, *args: Any, **kwargs: Any) -> Any: ...
    kRead: int = ...
    kReadWrite: int = ...
    kWrite: int = ...
    def open(self, *args: Any, **kwargs: Any) -> Any: ...
    def readArraySize(self, *args: Any, **kwargs: Any) -> Any: ...
    def readChannelName(self, *args: Any, **kwargs: Any) -> Any: ...
    def readDescription(self, *args: Any, **kwargs: Any) -> Any: ...
    def readDoubleArray(self, *args: Any, **kwargs: Any) -> Any: ...
    def readDoubleVectorArray(self, *args: Any, **kwargs: Any) -> Any: ...
    def readFloatArray(self, *args: Any, **kwargs: Any) -> Any: ...
    def readFloatVectorArray(self, *args: Any, **kwargs: Any) -> Any: ...
    def readHeader(self, *args: Any, **kwargs: Any) -> Any: ...
    def readInt32(self, *args: Any, **kwargs: Any) -> Any: ...
    def readIntArray(self, *args: Any, **kwargs: Any) -> Any: ...
    def readNextTime(self, *args: Any, **kwargs: Any) -> Any: ...
    def readTime(self, *args: Any, **kwargs: Any) -> Any: ...
    def rewind(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def writeChannelName(self, *args: Any, **kwargs: Any) -> Any: ...
    def writeDescription(self, *args: Any, **kwargs: Any) -> Any: ...
    def writeDoubleArray(self, *args: Any, **kwargs: Any) -> Any: ...
    def writeDoubleVectorArray(self, *args: Any, **kwargs: Any) -> Any: ...
    def writeFloatArray(self, *args: Any, **kwargs: Any) -> Any: ...
    def writeFloatVectorArray(self, *args: Any, **kwargs: Any) -> Any: ...
    def writeHeader(self, *args: Any, **kwargs: Any) -> Any: ...
    def writeInt32(self, *args: Any, **kwargs: Any) -> Any: ...
    def writeIntArray(self, *args: Any, **kwargs: Any) -> Any: ...
    def writeTime(self, *args: Any, **kwargs: Any) -> Any: ...

class MPxCameraSet(MPxNode):
    def __disown__(self) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    active: property = ...
    camera: property = ...
    cameraLayer: property = ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    order: property = ...
    sceneData: property = ...
    thisown: property = ...
    def type(self, *args: Any, **kwargs: Any) -> Any: ...

class MPxCommand:
    def __disown__(self) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def appendToResult(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def clearResult(self, *args: Any, **kwargs: Any) -> Any: ...
    def commandString(self, *args: Any, **kwargs: Any) -> Any: ...
    def currentDoubleResult(self, *args: Any, **kwargs: Any) -> Any: ...
    def currentIntResult(self, *args: Any, **kwargs: Any) -> Any: ...
    def currentResultType(self, *args: Any, **kwargs: Any) -> Any: ...
    def currentStringResult(self, *args: Any, **kwargs: Any) -> Any: ...
    def displayError(self, *args: Any, **kwargs: Any) -> Any: ...
    def displayInfo(self, *args: Any, **kwargs: Any) -> Any: ...
    def displayWarning(self, *args: Any, **kwargs: Any) -> Any: ...
    def doIt(self, *args: Any, **kwargs: Any) -> Any: ...
    def getCurrentResult(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasSyntax(self, *args: Any, **kwargs: Any) -> Any: ...
    def isCurrentResultArray(self, *args: Any, **kwargs: Any) -> Any: ...
    def isHistoryOn(self, *args: Any, **kwargs: Any) -> Any: ...
    def isUndoable(self, *args: Any, **kwargs: Any) -> Any: ...
    kDouble: int = ...
    kLong: int = ...
    kNoArg: int = ...
    kString: int = ...
    def redoIt(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCommandString(self, *args: Any, **kwargs: Any) -> Any: ...
    def setHistoryOn(self, *args: Any, **kwargs: Any) -> Any: ...
    def setResult(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUndoable(self, *args: Any, **kwargs: Any) -> Any: ...
    def syntax(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def undoIt(self, *args: Any, **kwargs: Any) -> Any: ...

class MPxSurfaceShape(MPxNode):
    def __disown__(self) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def acceptsGeometryIterator(self, *args: Any, **kwargs: Any) -> Any: ...
    def activeComponents(self, *args: Any, **kwargs: Any) -> Any: ...
    def boundingBox(self, *args: Any, **kwargs: Any) -> Any: ...
    boundingBoxCenterX: property = ...
    boundingBoxCenterY: property = ...
    boundingBoxCenterZ: property = ...
    def cachedShapeAttr(self, *args: Any, **kwargs: Any) -> Any: ...
    def canMakeLive(self, *args: Any, **kwargs: Any) -> Any: ...
    center: property = ...
    def childChanged(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def closestPoint(self, *args: Any, **kwargs: Any) -> Any: ...
    def componentToPlugs(self, *args: Any, **kwargs: Any) -> Any: ...
    def convertToTweakNodePlug(self, *args: Any, **kwargs: Any) -> Any: ...
    def createFullRenderGroup(self, *args: Any, **kwargs: Any) -> Any: ...
    def createFullVertexGroup(self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteComponents(self, *args: Any, **kwargs: Any) -> Any: ...
    def evalNodeAffectsDrawDb(self, *args: Any, **kwargs: Any) -> Any: ...
    def excludeAsPluginShape(self, *args: Any, **kwargs: Any) -> Any: ...
    def geometryData(self, *args: Any, **kwargs: Any) -> Any: ...
    def geometryIteratorSetup(self, *args: Any, **kwargs: Any) -> Any: ...
    def getComponentSelectionMask(self, *args: Any, **kwargs: Any) -> Any: ...
    def getShapeSelectionMask(self, *args: Any, **kwargs: Any) -> Any: ...
    def getWorldMatrix(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasActiveComponents(self, *args: Any, **kwargs: Any) -> Any: ...
    instObjGroups: property = ...
    intermediateObject: property = ...
    inverseMatrix: property = ...
    def isBounded(self, *args: Any, **kwargs: Any) -> Any: ...
    def isRenderable(self, *args: Any, **kwargs: Any) -> Any: ...
    isTemplated: property = ...
    def localShapeInAttr(self, *args: Any, **kwargs: Any) -> Any: ...
    def localShapeOutAttr(self, *args: Any, **kwargs: Any) -> Any: ...
    mControlPoints: property = ...
    mControlValueX: property = ...
    mControlValueY: property = ...
    mControlValueZ: property = ...
    mHasHistoryOnCreate: property = ...
    def match(self, *args: Any, **kwargs: Any) -> Any: ...
    def matchComponent(self, *args: Any, **kwargs: Any) -> Any: ...
    matrix: property = ...
    def newControlPointComponent(self, *args: Any, **kwargs: Any) -> Any: ...
    nodeBoundingBox: property = ...
    nodeBoundingBoxMax: property = ...
    nodeBoundingBoxMaxX: property = ...
    nodeBoundingBoxMaxY: property = ...
    nodeBoundingBoxMaxZ: property = ...
    nodeBoundingBoxMin: property = ...
    nodeBoundingBoxMinX: property = ...
    nodeBoundingBoxMinY: property = ...
    nodeBoundingBoxMinZ: property = ...
    nodeBoundingBoxSize: property = ...
    nodeBoundingBoxSizeX: property = ...
    nodeBoundingBoxSizeY: property = ...
    nodeBoundingBoxSizeZ: property = ...
    objectColor: property = ...
    objectGroupColor: property = ...
    objectGroupId: property = ...
    objectGroups: property = ...
    objectGrpCompList: property = ...
    parentInverseMatrix: property = ...
    parentMatrix: property = ...
    def pointAtParm(self, *args: Any, **kwargs: Any) -> Any: ...
    def renderGroupComponentType(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRenderable(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transformUsing(self, *args: Any, **kwargs: Any) -> Any: ...
    def tweakUsing(self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self, *args: Any, **kwargs: Any) -> Any: ...
    def undeleteComponents(self, *args: Any, **kwargs: Any) -> Any: ...
    useObjectColor: property = ...
    def vertexOffsetDirection(self, *args: Any, **kwargs: Any) -> Any: ...
    visibility: property = ...
    def weightedTransformUsing(self, *args: Any, **kwargs: Any) -> Any: ...
    def weightedTweakUsing(self, *args: Any, **kwargs: Any) -> Any: ...
    worldInverseMatrix: property = ...
    worldMatrix: property = ...
    def worldShapeOutAttr(self, *args: Any, **kwargs: Any) -> Any: ...

class MPxComponentShape(MPxSurfaceShape):
    def __disown__(self) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def componentToPlugs(self, *args: Any, **kwargs: Any) -> Any: ...
    def createFullVertexGroup(self, *args: Any, **kwargs: Any) -> Any: ...
    def getControlPoints(self, *args: Any, **kwargs: Any) -> Any: ...
    def localShapeInAttr(self, *args: Any, **kwargs: Any) -> Any: ...
    def match(self, *args: Any, **kwargs: Any) -> Any: ...
    def setControlPoints(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transformUsing(self, *args: Any, **kwargs: Any) -> Any: ...

class MPxConstraint(MPxNode):
    def __disown__(self) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def constraintRotateOrderAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    enableRestPosition: property = ...
    def getOutputAttributes(self, *args: Any, **kwargs: Any) -> Any: ...
    lockOutput: property = ...
    def passiveOutputAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def targetAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def weightAttribute(self, *args: Any, **kwargs: Any) -> Any: ...

class MPxConstraintCommand(MPxCommand):
    def __disown__(self) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def _syntax(self, *args: Any, **kwargs: Any) -> Any: ...
    def aimVectorAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def appendSyntax(self, *args: Any, **kwargs: Any) -> Any: ...
    def connectObjectAndConstraint(self, *args: Any, **kwargs: Any) -> Any: ...
    def connectTarget(self, *args: Any, **kwargs: Any) -> Any: ...
    def constraintEnableRestAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def constraintInstancedAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def constraintNode(self, *args: Any, **kwargs: Any) -> Any: ...
    def constraintOutputAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def constraintRestAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def constraintTargetAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def constraintTargetInstancedAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def constraintTargetWeightAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def constraintTypeId(self, *args: Any, **kwargs: Any) -> Any: ...
    def createdConstraint(self, *args: Any, **kwargs: Any) -> Any: ...
    def doCreate(self, *args: Any, **kwargs: Any) -> Any: ...
    def doEdit(self, *args: Any, **kwargs: Any) -> Any: ...
    def doIt(self, *args: Any, **kwargs: Any) -> Any: ...
    def doQuery(self, *args: Any, **kwargs: Any) -> Any: ...
    def getObjectAttributesArray(self, *args: Any, **kwargs: Any) -> Any: ...
    def handleNewTargets(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasVectorFlags(self, *args: Any, **kwargs: Any) -> Any: ...
    def objectAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def offsetAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def parseArgs(self, *args: Any, **kwargs: Any) -> Any: ...
    def redoIt(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRestPosition(self, *args: Any, **kwargs: Any) -> Any: ...
    def supportsOffset(self, *args: Any, **kwargs: Any) -> Any: ...
    def targetType(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def undoIt(self, *args: Any, **kwargs: Any) -> Any: ...
    def upVectorAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def worldUpMatrixAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def worldUpTypeAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def worldUpVectorAttribute(self, *args: Any, **kwargs: Any) -> Any: ...

class MPxContext:
    def __disown__(self) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def _beginMarquee(self, *args: Any, **kwargs: Any) -> Any: ...
    def _dragMarquee(self, *args: Any, **kwargs: Any) -> Any: ...
    def _ignoreEntry(self, *args: Any, **kwargs: Any) -> Any: ...
    def _newToolCommand(self, *args: Any, **kwargs: Any) -> Any: ...
    def _releaseMarquee(self, *args: Any, **kwargs: Any) -> Any: ...
    def _setCursor(self, *args: Any, **kwargs: Any) -> Any: ...
    def _setHelpString(self, *args: Any, **kwargs: Any) -> Any: ...
    def _setTitleString(self, *args: Any, **kwargs: Any) -> Any: ...
    def abortAction(self, *args: Any, **kwargs: Any) -> Any: ...
    def addManipulator(self, *args: Any, **kwargs: Any) -> Any: ...
    def argTypeNumericalInput(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def completeAction(self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteAction(self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteManipulators(self, *args: Any, **kwargs: Any) -> Any: ...
    def doDrag(self, *args: Any, **kwargs: Any) -> Any: ...
    def doEnterRegion(self, *args: Any, **kwargs: Any) -> Any: ...
    def doHold(self, *args: Any, **kwargs: Any) -> Any: ...
    def doPress(self, *args: Any, **kwargs: Any) -> Any: ...
    def doPtrMoved(self, *args: Any, **kwargs: Any) -> Any: ...
    def doRelease(self, *args: Any, **kwargs: Any) -> Any: ...
    def feedbackNumericalInput(self, *args: Any, **kwargs: Any) -> Any: ...
    def helpStateHasChanged(self, *args: Any, **kwargs: Any) -> Any: ...
    def image(self, *args: Any, **kwargs: Any) -> Any: ...
    kImage1: int = ...
    kImage2: int = ...
    kImage3: int = ...
    def newToolCommand(self, *args: Any, **kwargs: Any) -> Any: ...
    def processNumericalInput(self, *args: Any, **kwargs: Any) -> Any: ...
    def setImage(self, *args: Any, **kwargs: Any) -> Any: ...
    def stringClassName(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def toolOffCleanup(self, *args: Any, **kwargs: Any) -> Any: ...
    def toolOnSetup(self, *args: Any, **kwargs: Any) -> Any: ...

class MPxContextCommand:
    def __disown__(self) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def _parser(self, *args: Any, **kwargs: Any) -> Any: ...
    def _syntax(self, *args: Any, **kwargs: Any) -> Any: ...
    def appendSyntax(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def doEditFlags(self, *args: Any, **kwargs: Any) -> Any: ...
    def doQueryFlags(self, *args: Any, **kwargs: Any) -> Any: ...
    def makeObj(self, *args: Any, **kwargs: Any) -> Any: ...
    def setResult(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MPxControlCommand:
    def __disown__(self) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def _control(self, *args: Any, **kwargs: Any) -> Any: ...
    def _parser(self, *args: Any, **kwargs: Any) -> Any: ...
    def _syntax(self, *args: Any, **kwargs: Any) -> Any: ...
    def appendSyntax(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def clearResult(self, *args: Any, **kwargs: Any) -> Any: ...
    def doEditFlags(self, *args: Any, **kwargs: Any) -> Any: ...
    def doQueryFlags(self, *args: Any, **kwargs: Any) -> Any: ...
    def makeControl(self, *args: Any, **kwargs: Any) -> Any: ...
    def setResult(self, *args: Any, **kwargs: Any) -> Any: ...
    def skipFlagForCreate(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MPxData:
    def __disown__(self) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self, *args: Any, **kwargs: Any) -> Any: ...
    kData: int = ...
    kGeometryData: int = ...
    kLast: int = ...
    def name(self, *args: Any, **kwargs: Any) -> Any: ...
    def readASCII(self, *args: Any, **kwargs: Any) -> Any: ...
    def readBinary(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def typeId(self, *args: Any, **kwargs: Any) -> Any: ...
    def writeASCII(self, *args: Any, **kwargs: Any) -> Any: ...
    def writeBinary(self, *args: Any, **kwargs: Any) -> Any: ...

class MPxDeformerNode(MPxGeometryFilter):
    def __disown__(self) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDeformationDetails(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDeformationDetails(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseExistingConnectionWhenSetEditing(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self, *args: Any, **kwargs: Any) -> Any: ...
    weightList: property = ...
    def weightValue(self, *args: Any, **kwargs: Any) -> Any: ...
    weights: property = ...

class MPxDragAndDropBehavior:
    def __disown__(self) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def connectAttrToAttr(self, *args: Any, **kwargs: Any) -> Any: ...
    def connectAttrToNode(self, *args: Any, **kwargs: Any) -> Any: ...
    def connectNodeToAttr(self, *args: Any, **kwargs: Any) -> Any: ...
    def connectNodeToNode(self, *args: Any, **kwargs: Any) -> Any: ...
    def shouldBeUsedFor(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MPxEditData:
    def __disown__(self) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    _dataStringValue: property = ...
    _dataValue: property = ...
    def _getStringValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def _getValue(self) -> Any: ...
    def _setStringValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def _setValue(self, value: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def isEqual(self, *args: Any, **kwargs: Any) -> Any: ...
    def isLessThan(self, *args: Any, **kwargs: Any) -> Any: ...
    def performIsEqual(self, *args: Any, **kwargs: Any) -> Any: ...
    def performIsLessThan(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MPxEmitterNode(MPxNode):
    def __disown__(self) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def compute(self, *args: Any, **kwargs: Any) -> Any: ...
    def draw(self, *args: Any, **kwargs: Any) -> Any: ...
    def evalEmission2dTexture(self, *args: Any, **kwargs: Any) -> Any: ...
    def getCurrentTime(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDeltaTime(self, *args: Any, **kwargs: Any) -> Any: ...
    def getEmitterType(self, *args: Any, **kwargs: Any) -> Any: ...
    def getMaxDistance(self, *args: Any, **kwargs: Any) -> Any: ...
    def getMinDistance(self, *args: Any, **kwargs: Any) -> Any: ...
    def getOwnerShape(self, *args: Any, **kwargs: Any) -> Any: ...
    def getRandomSeed(self, *args: Any, **kwargs: Any) -> Any: ...
    def getRandomState(self, *args: Any, **kwargs: Any) -> Any: ...
    def getRate(self, *args: Any, **kwargs: Any) -> Any: ...
    def getStartTime(self, *args: Any, **kwargs: Any) -> Any: ...
    def getWorldMatrix(self, *args: Any, **kwargs: Any) -> Any: ...
    def getWorldPosition(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasValidEmission2dTexture(self, *args: Any, **kwargs: Any) -> Any: ...
    mCurrentTime: property = ...
    mDeltaTime: property = ...
    mDirection: property = ...
    mDirectionX: property = ...
    mDirectionY: property = ...
    mDirectionZ: property = ...
    mEmitterType: property = ...
    mInheritFactor: property = ...
    mIsFull: property = ...
    mMaxDistance: property = ...
    mMinDistance: property = ...
    mOutput: property = ...
    mOwnerCentroid: property = ...
    mOwnerCentroidX: property = ...
    mOwnerCentroidY: property = ...
    mOwnerCentroidZ: property = ...
    mOwnerPosData: property = ...
    mOwnerVelData: property = ...
    mRandState: property = ...
    mRandStateX: property = ...
    mRandStateY: property = ...
    mRandStateZ: property = ...
    mRate: property = ...
    mSeed: property = ...
    mSpeed: property = ...
    mStartTime: property = ...
    mSweptGeometry: property = ...
    mWorldMatrix: property = ...
    def randgen(self, *args: Any, **kwargs: Any) -> Any: ...
    def resetRandomState(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRandomState(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self, *args: Any, **kwargs: Any) -> Any: ...
    def volumePrimitiveBoundingBox(self, *args: Any, **kwargs: Any) -> Any: ...
    def volumePrimitiveDistanceFromAxis(self, *args: Any, **kwargs: Any) -> Any: ...
    def volumePrimitivePointInside(self, *args: Any, **kwargs: Any) -> Any: ...

class MPxFieldNode(MPxNode):
    def __disown__(self) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def compute(self, *args: Any, **kwargs: Any) -> Any: ...
    def draw(self, *args: Any, **kwargs: Any) -> Any: ...
    def falloffCurve(self, *args: Any, **kwargs: Any) -> Any: ...
    def getForceAtPoint(self, *args: Any, **kwargs: Any) -> Any: ...
    def iconBitmap(self, *args: Any, **kwargs: Any) -> Any: ...
    def iconSizeAndOrigin(self, *args: Any, **kwargs: Any) -> Any: ...
    def isFalloffCurveConstantOne(self, *args: Any, **kwargs: Any) -> Any: ...
    mApplyPerVertex: property = ...
    mAttenuation: property = ...
    mDeltaTime: property = ...
    mInputData: property = ...
    mInputForce: property = ...
    mInputMass: property = ...
    mInputPPData: property = ...
    mInputPositions: property = ...
    mInputVelocities: property = ...
    mMagnitude: property = ...
    mMaxDistance: property = ...
    mOutputForce: property = ...
    mOwnerCentroid: property = ...
    mOwnerCentroidX: property = ...
    mOwnerCentroidY: property = ...
    mOwnerCentroidZ: property = ...
    mOwnerPPData: property = ...
    mOwnerPosData: property = ...
    mOwnerVelData: property = ...
    mUseMaxDistance: property = ...
    mWorldMatrix: property = ...
    thisown: property = ...
    def type(self, *args: Any, **kwargs: Any) -> Any: ...

class MPxFileResolver:
    def __disown__(self) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def findURIResolverByName(self, *args: Any, **kwargs: Any) -> Any: ...
    def findURIResolverByScheme(self, *args: Any, **kwargs: Any) -> Any: ...
    def getURIResolversByName(self, *args: Any, **kwargs: Any) -> Any: ...
    def getURIResolversByScheme(self, *args: Any, **kwargs: Any) -> Any: ...
    kInput: int = ...
    kNone: int = ...
    def numURIResolvers(self, *args: Any, **kwargs: Any) -> Any: ...
    def performAfterSaveURI(self, *args: Any, **kwargs: Any) -> Any: ...
    def resolveURI(self, *args: Any, **kwargs: Any) -> Any: ...
    def resolveURIWithContext(self, *args: Any, **kwargs: Any) -> Any: ...
    def resolverName(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def uriScheme(self, *args: Any, **kwargs: Any) -> Any: ...

class MPxFileTranslator:
    def __disown__(self) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def allowMultipleFileOptimization(self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeOpened(self, *args: Any, **kwargs: Any) -> Any: ...
    def defaultExtension(self, *args: Any, **kwargs: Any) -> Any: ...
    def fileAccessMode(self, *args: Any, **kwargs: Any) -> Any: ...
    def filter(self, *args: Any, **kwargs: Any) -> Any: ...
    def haveNamespaceSupport(self, *args: Any, **kwargs: Any) -> Any: ...
    def haveReadMethod(self, *args: Any, **kwargs: Any) -> Any: ...
    def haveReferenceMethod(self, *args: Any, **kwargs: Any) -> Any: ...
    def haveWriteMethod(self, *args: Any, **kwargs: Any) -> Any: ...
    def identifyFile(self, *args: Any, **kwargs: Any) -> Any: ...
    kCouldBeMyFileType: int = ...
    kExportAccessMode: int = ...
    kExportActiveAccessMode: int = ...
    kImportAccessMode: int = ...
    kIsMyFileType: int = ...
    kNotMyFileType: int = ...
    kOpenAccessMode: int = ...
    kReferenceAccessMode: int = ...
    kSaveAccessMode: int = ...
    kUnknownAccessMode: int = ...
    def reader(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def writer(self, *args: Any, **kwargs: Any) -> Any: ...

class MPxFluidEmitterNode(MPxEmitterNode):
    def __disown__(self) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def compute(self, *args: Any, **kwargs: Any) -> Any: ...
    def fluidColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def fluidDensityEmission(self, *args: Any, **kwargs: Any) -> Any: ...
    def fluidDropoff(self, *args: Any, **kwargs: Any) -> Any: ...
    def fluidEmitColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def fluidEmitter(self, *args: Any, **kwargs: Any) -> Any: ...
    def fluidFuelEmission(self, *args: Any, **kwargs: Any) -> Any: ...
    def fluidHeatEmission(self, *args: Any, **kwargs: Any) -> Any: ...
    def fluidJitter(self, *args: Any, **kwargs: Any) -> Any: ...
    mEmissionFunction: property = ...
    mEmitFluidColor: property = ...
    mFluidColor: property = ...
    mFluidColorB: property = ...
    mFluidColorG: property = ...
    mFluidColorR: property = ...
    mFluidDensityEmission: property = ...
    mFluidDropoff: property = ...
    mFluidFuelEmission: property = ...
    mFluidHeatEmission: property = ...
    mFluidJitter: property = ...
    mTurbulence: property = ...
    thisown: property = ...
    def turbulence(self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self, *args: Any, **kwargs: Any) -> Any: ...

class MPxGeometryData(MPxData):
    def __disown__(self) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteComponent(self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteComponentsFromGroups(self, *args: Any, **kwargs: Any) -> Any: ...
    def iterator(self, *args: Any, **kwargs: Any) -> Any: ...
    def matrix(self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMatrix(self, *args: Any, **kwargs: Any) -> Any: ...
    def smartCopy(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def typeId(self, *args: Any, **kwargs: Any) -> Any: ...
    def updateCompleteVertexGroup(self, *args: Any, **kwargs: Any) -> Any: ...

class MPxGeometryIterator:
    def __disown__(self) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __next__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def component(self, *args: Any, **kwargs: Any) -> Any: ...
    def currentPoint(self, *args: Any, **kwargs: Any) -> Any: ...
    def geometry(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasNormals(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasPoints(self, *args: Any, **kwargs: Any) -> Any: ...
    def index(self, *args: Any, **kwargs: Any) -> Any: ...
    def indexUnsimplified(self, *args: Any, **kwargs: Any) -> Any: ...
    def isDone(self, *args: Any, **kwargs: Any) -> Any: ...
    def iteratorCount(self, *args: Any, **kwargs: Any) -> Any: ...
    def maxPoints(self, *args: Any, **kwargs: Any) -> Any: ...
    def next(self, *args: Any, **kwargs: Any) -> Any: ...
    def point(self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCurrentPoint(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxPoints(self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPoint(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPointGetNext(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MPxGlBuffer:
    def __disown__(self) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def beginBufferNotify(self, *args: Any, **kwargs: Any) -> Any: ...
    def bindFbo(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def closeFbo(self, *args: Any, **kwargs: Any) -> Any: ...
    def endBufferNotify(self, *args: Any, **kwargs: Any) -> Any: ...
    def openFbo(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def unbindFbo(self, *args: Any, **kwargs: Any) -> Any: ...

class MPxHardwareShader(MPxNode):
    def __disown__(self) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def findResource(self, *args: Any, **kwargs: Any) -> Any: ...
    def getHardwareShaderPtr(self, *args: Any, **kwargs: Any) -> Any: ...
    outColor: property = ...
    outColorB: property = ...
    outColorG: property = ...
    outColorR: property = ...
    def profile(self, *args: Any, **kwargs: Any) -> Any: ...
    def render(self, *args: Any, **kwargs: Any) -> Any: ...
    def renderSwatchImage(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUniformParameters(self, *args: Any, **kwargs: Any) -> Any: ...
    def setVaryingParameters(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transparencyOptions(self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self, *args: Any, **kwargs: Any) -> Any: ...

class MPxHwShaderNode(MPxNode):
    def __disown__(self) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def bind(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def colorsPerVertex(self, *args: Any, **kwargs: Any) -> Any: ...
    def currentPath(self, *args: Any, **kwargs: Any) -> Any: ...
    def currentShadingEngine(self, *args: Any, **kwargs: Any) -> Any: ...
    def dirtyMask(self, *args: Any, **kwargs: Any) -> Any: ...
    def geometry(self, *args: Any, **kwargs: Any) -> Any: ...
    def getHwShaderNodePtr(self, *args: Any, **kwargs: Any) -> Any: ...
    def glBind(self, *args: Any, **kwargs: Any) -> Any: ...
    def glGeometry(self, *args: Any, **kwargs: Any) -> Any: ...
    def glUnbind(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasTransparency(self, *args: Any, **kwargs: Any) -> Any: ...
    def invertTexCoords(self, *args: Any, **kwargs: Any) -> Any: ...
    def normalsPerVertex(self, *args: Any, **kwargs: Any) -> Any: ...
    outColor: property = ...
    outColorB: property = ...
    outColorG: property = ...
    outColorR: property = ...
    outGlowColor: property = ...
    outGlowColorB: property = ...
    outGlowColorG: property = ...
    outGlowColorR: property = ...
    outMatteOpacity: property = ...
    outMatteOpacityB: property = ...
    outMatteOpacityG: property = ...
    outMatteOpacityR: property = ...
    outTransparency: property = ...
    outTransparencyB: property = ...
    outTransparencyG: property = ...
    outTransparencyR: property = ...
    def provideFaceIDs(self, *args: Any, **kwargs: Any) -> Any: ...
    def provideLocalUVCoord(self, *args: Any, **kwargs: Any) -> Any: ...
    def provideVertexIDs(self, *args: Any, **kwargs: Any) -> Any: ...
    def renderSwatchImage(self, *args: Any, **kwargs: Any) -> Any: ...
    def supportsBatching(self, *args: Any, **kwargs: Any) -> Any: ...
    def texCoordsPerVertex(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transparencyOptions(self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self, *args: Any, **kwargs: Any) -> Any: ...
    def unbind(self, *args: Any, **kwargs: Any) -> Any: ...

class MPxIkSolverNode(MPxNode):
    def __disown__(self) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def _getJointAngles(self, *args: Any, **kwargs: Any) -> Any: ...
    def _setJointAngles(self, *args: Any, **kwargs: Any) -> Any: ...
    def _setToRestAngles(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def doSolve(self, *args: Any, **kwargs: Any) -> Any: ...
    def funcValueTolerance(self, *args: Any, **kwargs: Any) -> Any: ...
    def groupHandlesByTopology(self, *args: Any, **kwargs: Any) -> Any: ...
    def handleGroup(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasJointLimitSupport(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueSolution(self, *args: Any, **kwargs: Any) -> Any: ...
    def isAttributeCreatedBySolver(self, *args: Any, **kwargs: Any) -> Any: ...
    def isPositionOnly(self, *args: Any, **kwargs: Any) -> Any: ...
    def isSingleChainOnly(self, *args: Any, **kwargs: Any) -> Any: ...
    def maxIterations(self, *args: Any, **kwargs: Any) -> Any: ...
    def positionOnly(self, *args: Any, **kwargs: Any) -> Any: ...
    def postSolve(self, *args: Any, **kwargs: Any) -> Any: ...
    def preSolve(self, *args: Any, **kwargs: Any) -> Any: ...
    def rotatePlane(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFuncValueTolerance(self, *args: Any, **kwargs: Any) -> Any: ...
    def setHandleGroup(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxIterations(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPositionOnly(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotatePlane(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSingleChainOnly(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSupportJointLimits(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUniqueSolution(self, *args: Any, **kwargs: Any) -> Any: ...
    def singleChainOnly(self, *args: Any, **kwargs: Any) -> Any: ...
    def snapHandle(self, *args: Any, **kwargs: Any) -> Any: ...
    def solverTypeName(self, *args: Any, **kwargs: Any) -> Any: ...
    def supportJointLimits(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def toSolverSpace(self, *args: Any, **kwargs: Any) -> Any: ...
    def toWorldSpace(self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self, *args: Any, **kwargs: Any) -> Any: ...
    def uniqueSolution(self, *args: Any, **kwargs: Any) -> Any: ...

class MPxImageFile:
    def __disown__(self) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def close(self, *args: Any, **kwargs: Any) -> Any: ...
    def glLoad(self, *args: Any, **kwargs: Any) -> Any: ...
    def load(self, *args: Any, **kwargs: Any) -> Any: ...
    def open(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MPxImagePlane(MPxNode):
    def __disown__(self) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    alphaGain: property = ...
    alreadyPremult: property = ...
    center: property = ...
    centerX: property = ...
    centerY: property = ...
    centerZ: property = ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    colorGain: property = ...
    colorGainB: property = ...
    colorGainG: property = ...
    colorGainR: property = ...
    colorOffset: property = ...
    colorOffsetB: property = ...
    colorOffsetG: property = ...
    colorOffsetR: property = ...
    composite: property = ...
    coverage: property = ...
    coverageOrigin: property = ...
    coverageOriginX: property = ...
    coverageOriginY: property = ...
    coverageX: property = ...
    coverageY: property = ...
    depth: property = ...
    depthBias: property = ...
    depthFile: property = ...
    depthOversample: property = ...
    depthScale: property = ...
    displayMode: property = ...
    displayOnlyIfCurrent: property = ...
    def exactImageFile(self, *args: Any, **kwargs: Any) -> Any: ...
    fit: property = ...
    frameExtension: property = ...
    frameOffset: property = ...
    height: property = ...
    imageName: property = ...
    imageType: property = ...
    def loadImageMap(self, *args: Any, **kwargs: Any) -> Any: ...
    lockedToCamera: property = ...
    maxShadingSamples: property = ...
    offset: property = ...
    offsetX: property = ...
    offsetY: property = ...
    def refreshImage(self, *args: Any, **kwargs: Any) -> Any: ...
    rotate: property = ...
    separateDepth: property = ...
    def setImageDirty(self, *args: Any, **kwargs: Any) -> Any: ...
    shadingSamples: property = ...
    shadingSamplesOverride: property = ...
    size: property = ...
    sizeX: property = ...
    sizeY: property = ...
    sourceTexture: property = ...
    squeezeCorrection: property = ...
    thisown: property = ...
    def type(self, *args: Any, **kwargs: Any) -> Any: ...
    useDepthMap: property = ...
    useFrameExtension: property = ...
    visibleInReflections: property = ...
    visibleInRefractions: property = ...
    width: property = ...

class MPxLocatorNode(MPxNode):
    def __disown__(self) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def boundingBox(self, *args: Any, **kwargs: Any) -> Any: ...
    boundingBoxCenterX: property = ...
    boundingBoxCenterY: property = ...
    boundingBoxCenterZ: property = ...
    center: property = ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def closestPoint(self, *args: Any, **kwargs: Any) -> Any: ...
    def color(self, *args: Any, **kwargs: Any) -> Any: ...
    def colorRGB(self, *args: Any, **kwargs: Any) -> Any: ...
    def draw(self, *args: Any, **kwargs: Any) -> Any: ...
    def drawLast(self, *args: Any, **kwargs: Any) -> Any: ...
    def excludeAsLocator(self, *args: Any, **kwargs: Any) -> Any: ...
    def getCacheSetup(self, *args: Any, **kwargs: Any) -> Any: ...
    def getShapeSelectionMask(self, *args: Any, **kwargs: Any) -> Any: ...
    instObjGroups: property = ...
    intermediateObject: property = ...
    inverseMatrix: property = ...
    def isBounded(self, *args: Any, **kwargs: Any) -> Any: ...
    isTemplated: property = ...
    def isTransparent(self, *args: Any, **kwargs: Any) -> Any: ...
    localPosition: property = ...
    localPositionX: property = ...
    localPositionY: property = ...
    localPositionZ: property = ...
    localScale: property = ...
    localScaleX: property = ...
    localScaleY: property = ...
    localScaleZ: property = ...
    matrix: property = ...
    nodeBoundingBox: property = ...
    nodeBoundingBoxMax: property = ...
    nodeBoundingBoxMaxX: property = ...
    nodeBoundingBoxMaxY: property = ...
    nodeBoundingBoxMaxZ: property = ...
    nodeBoundingBoxMin: property = ...
    nodeBoundingBoxMinX: property = ...
    nodeBoundingBoxMinY: property = ...
    nodeBoundingBoxMinZ: property = ...
    nodeBoundingBoxSize: property = ...
    nodeBoundingBoxSizeX: property = ...
    nodeBoundingBoxSizeY: property = ...
    nodeBoundingBoxSizeZ: property = ...
    objectColor: property = ...
    objectGroupColor: property = ...
    objectGroupId: property = ...
    objectGroups: property = ...
    objectGrpCompList: property = ...
    parentInverseMatrix: property = ...
    parentMatrix: property = ...
    thisown: property = ...
    def type(self, *args: Any, **kwargs: Any) -> Any: ...
    underWorldObject: property = ...
    def useClosestPointForSelection(self, *args: Any, **kwargs: Any) -> Any: ...
    useObjectColor: property = ...
    visibility: property = ...
    worldInverseMatrix: property = ...
    worldMatrix: property = ...
    worldPosition: property = ...
    worldPositionX: property = ...
    worldPositionY: property = ...
    worldPositionZ: property = ...

class MPxManipContainer(MPxNode):
    def __disown__(self) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addCircleSweepManip(self, *args: Any, **kwargs: Any) -> Any: ...
    def addCurveSegmentManip(self, *args: Any, **kwargs: Any) -> Any: ...
    def addDirectionManip(self, *args: Any, **kwargs: Any) -> Any: ...
    def addDiscManip(self, *args: Any, **kwargs: Any) -> Any: ...
    def addDistanceManip(self, *args: Any, **kwargs: Any) -> Any: ...
    def addFreePointTriadManip(self, *args: Any, **kwargs: Any) -> Any: ...
    def addMPxManipulatorNode(self, *args: Any, **kwargs: Any) -> Any: ...
    def addManipToPlugConversion(self, *args: Any, **kwargs: Any) -> Any: ...
    def addPlugToInViewEditor(self, *args: Any, **kwargs: Any) -> Any: ...
    def addPlugToManipConversion(self, *args: Any, **kwargs: Any) -> Any: ...
    def addPointOnCurveManip(self, *args: Any, **kwargs: Any) -> Any: ...
    def addPointOnSurfaceManip(self, *args: Any, **kwargs: Any) -> Any: ...
    def addRotateManip(self, *args: Any, **kwargs: Any) -> Any: ...
    def addScaleManip(self, *args: Any, **kwargs: Any) -> Any: ...
    def addStateManip(self, *args: Any, **kwargs: Any) -> Any: ...
    def addToManipConnectTable(self, *args: Any, **kwargs: Any) -> Any: ...
    def addToggleManip(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def connectToDependNode(self, *args: Any, **kwargs: Any) -> Any: ...
    def createChildren(self, *args: Any, **kwargs: Any) -> Any: ...
    def doDrag(self, *args: Any, **kwargs: Any) -> Any: ...
    def doPress(self, *args: Any, **kwargs: Any) -> Any: ...
    def doRelease(self, *args: Any, **kwargs: Any) -> Any: ...
    def draw(self, *args: Any, **kwargs: Any) -> Any: ...
    def finishAddingManips(self, *args: Any, **kwargs: Any) -> Any: ...
    def getConverterManipValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def getConverterPlugValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def initialize(self, *args: Any, **kwargs: Any) -> Any: ...
    def isManipActive(self, *args: Any, **kwargs: Any) -> Any: ...
    def manipToPlugConversion(self, *args: Any, **kwargs: Any) -> Any: ...
    def newManipulator(self, *args: Any, **kwargs: Any) -> Any: ...
    def plugToManipConversion(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeFromManipConnectTable(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self, *args: Any, **kwargs: Any) -> Any: ...

class MPxManipulatorNode(MPxNode):
    def __disown__(self) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addDependentPlug(self, *args: Any, **kwargs: Any) -> Any: ...
    def addDoubleValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def addPointValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def addVectorValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def colorAndName(self, *args: Any, **kwargs: Any) -> Any: ...
    def connectPlugToValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def connectToDependNode(self, *args: Any, **kwargs: Any) -> Any: ...
    connectedNodes: property = ...
    def dependentPlugsReset(self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterForMouseMove(self, *args: Any, **kwargs: Any) -> Any: ...
    def dimmedColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def doDrag(self, *args: Any, **kwargs: Any) -> Any: ...
    def doMove(self, *args: Any, **kwargs: Any) -> Any: ...
    def doPress(self, *args: Any, **kwargs: Any) -> Any: ...
    def doRelease(self, *args: Any, **kwargs: Any) -> Any: ...
    def draw(self, *args: Any, **kwargs: Any) -> Any: ...
    def finishAddingManips(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDoubleValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def getInstancePtr(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPointValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def getVectorValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def glActiveName(self, *args: Any, **kwargs: Any) -> Any: ...
    def glFirstHandle(self, *args: Any, **kwargs: Any) -> Any: ...
    def labelBackgroundColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def labelColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def lineColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def mainColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def mouseDown(self, *args: Any, **kwargs: Any) -> Any: ...
    def mousePosition(self, *args: Any, **kwargs: Any) -> Any: ...
    def mouseRay(self, *args: Any, **kwargs: Any) -> Any: ...
    def mouseRayWorld(self, *args: Any, **kwargs: Any) -> Any: ...
    def mouseUp(self, *args: Any, **kwargs: Any) -> Any: ...
    def newManipulator(self, *args: Any, **kwargs: Any) -> Any: ...
    def prevColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def registerForMouseMove(self, *args: Any, **kwargs: Any) -> Any: ...
    def selectedColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoubleValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def setHandleColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def setInstancePtr(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPointValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def setVectorValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def shouldDrawHandleAsSelected(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def xColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def yColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def zColor(self, *args: Any, **kwargs: Any) -> Any: ...

class MPxMaterialInformation:
    def __disown__(self) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def computeMaterial(self, *args: Any, **kwargs: Any) -> Any: ...
    def connectAsTexture(self, *args: Any, **kwargs: Any) -> Any: ...
    kOverrideDraw: int = ...
    kSimpleMaterial: int = ...
    kTexture: int = ...
    def materialInfoIsDirty(self, *args: Any, **kwargs: Any) -> Any: ...
    def textureDisconnected(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def useMaterialAsTexture(self, *args: Any, **kwargs: Any) -> Any: ...

class MPxMayaAsciiFilter(MPxFileTranslator):
    def __disown__(self) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def haveReadMethod(self, *args: Any, **kwargs: Any) -> Any: ...
    def haveWriteMethod(self, *args: Any, **kwargs: Any) -> Any: ...
    def processReadOptions(self, *args: Any, **kwargs: Any) -> Any: ...
    def processWriteOptions(self, *args: Any, **kwargs: Any) -> Any: ...
    def reader(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def writePostConnectAttrsBlock(self, *args: Any, **kwargs: Any) -> Any: ...
    def writePostCreateNodesBlock(self, *args: Any, **kwargs: Any) -> Any: ...
    def writePostHeader(self, *args: Any, **kwargs: Any) -> Any: ...
    def writePostRequires(self, *args: Any, **kwargs: Any) -> Any: ...
    def writePreConnectAttrsBlock(self, *args: Any, **kwargs: Any) -> Any: ...
    def writePreCreateNodesBlock(self, *args: Any, **kwargs: Any) -> Any: ...
    def writePreTrailer(self, *args: Any, **kwargs: Any) -> Any: ...
    def writer(self, *args: Any, **kwargs: Any) -> Any: ...
    def writesConnectAttr(self, *args: Any, **kwargs: Any) -> Any: ...
    def writesCreateNode(self, *args: Any, **kwargs: Any) -> Any: ...
    def writesDisconnectAttr(self, *args: Any, **kwargs: Any) -> Any: ...
    def writesFileReference(self, *args: Any, **kwargs: Any) -> Any: ...
    def writesMetadata(self, *args: Any, **kwargs: Any) -> Any: ...
    def writesParentNode(self, *args: Any, **kwargs: Any) -> Any: ...
    def writesRequirements(self, *args: Any, **kwargs: Any) -> Any: ...
    def writesSelectNode(self, *args: Any, **kwargs: Any) -> Any: ...
    def writesSetAttr(self, *args: Any, **kwargs: Any) -> Any: ...

class MPxMayaAsciiFilterOutput:
    def __init__(self, args: Any) -> Any: ...
    def __lshift__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MPxMidiInputDevice:
    def __disown__(self) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def closeDevice(self, *args: Any, **kwargs: Any) -> Any: ...
    def deviceState(self, *args: Any, **kwargs: Any) -> Any: ...
    def doButtonEvents(self, *args: Any, **kwargs: Any) -> Any: ...
    def doMovementEvents(self, *args: Any, **kwargs: Any) -> Any: ...
    def getMessage(self, *args: Any, **kwargs: Any) -> Any: ...
    def nameAxes(self, *args: Any, **kwargs: Any) -> Any: ...
    def nameButtons(self, *args: Any, **kwargs: Any) -> Any: ...
    def openDevice(self, *args: Any, **kwargs: Any) -> Any: ...
    def sendMessage(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MPxModelEditorCommand:
    def __disown__(self) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def _parser(self, *args: Any, **kwargs: Any) -> Any: ...
    def _syntax(self, *args: Any, **kwargs: Any) -> Any: ...
    def appendSyntax(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def doEditFlags(self, *args: Any, **kwargs: Any) -> Any: ...
    def doQueryFlags(self, *args: Any, **kwargs: Any) -> Any: ...
    def editorCommandName(self, *args: Any, **kwargs: Any) -> Any: ...
    def editorMenuScriptName(self, *args: Any, **kwargs: Any) -> Any: ...
    def makeModelView(self, *args: Any, **kwargs: Any) -> Any: ...
    def modelView(self, *args: Any, **kwargs: Any) -> Any: ...
    def setResult(self, *args: Any, **kwargs: Any) -> Any: ...
    def skipFlagForCreate(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MPxMotionPathNode(MPxNode):
    def __disown__(self) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    allCoordinates: property = ...
    bank: property = ...
    bankScale: property = ...
    bankThreshold: property = ...
    def banking(self, *args: Any, **kwargs: Any) -> Any: ...
    def evaluatePath(self, *args: Any, **kwargs: Any) -> Any: ...
    flowNode: property = ...
    follow: property = ...
    fractionMode: property = ...
    def fractionalToParametric(self, *args: Any, **kwargs: Any) -> Any: ...
    frontAxis: property = ...
    frontTwist: property = ...
    def getVectors(self, *args: Any, **kwargs: Any) -> Any: ...
    inverseFront: property = ...
    inverseUp: property = ...
    def matrix(self, *args: Any, **kwargs: Any) -> Any: ...
    normal: property = ...
    orientMatrix: property = ...
    orientationMarkerTime: property = ...
    def parametricToFractional(self, *args: Any, **kwargs: Any) -> Any: ...
    pathGeometry: property = ...
    def position(self, *args: Any, **kwargs: Any) -> Any: ...
    positionMarkerTime: property = ...
    rotate: property = ...
    rotateOrder: property = ...
    rotateX: property = ...
    rotateY: property = ...
    rotateZ: property = ...
    sideTwist: property = ...
    thisown: property = ...
    def type(self, *args: Any, **kwargs: Any) -> Any: ...
    uValue: property = ...
    upAxis: property = ...
    upTwist: property = ...
    updateOrientationMarkers: property = ...
    worldUpMatrix: property = ...
    worldUpType: property = ...
    worldUpVector: property = ...
    worldUpVectorX: property = ...
    worldUpVectorY: property = ...
    worldUpVectorZ: property = ...
    def wraparoundFractionalValue(self, *args: Any, **kwargs: Any) -> Any: ...
    xCoordinate: property = ...
    yCoordinate: property = ...
    zCoordinate: property = ...

class MPxMultiPolyTweakUVCommand(MPxCommand):
    def __disown__(self) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def getTweakedUVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def newSyntax(self, *args: Any, **kwargs: Any) -> Any: ...
    def parseSyntax(self, *args: Any, **kwargs: Any) -> Any: ...
    def preProcessUVs(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MPxObjectSet(MPxNode):
    DNSetMembers: property = ...
    def __disown__(self) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    annotation: property = ...
    def canBeDeleted(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    dagSetMembers: property = ...
    edgesOnlySet: property = ...
    editPointsOnlySet: property = ...
    facetsOnlySet: property = ...
    groupNodes: property = ...
    isLayer: property = ...
    memberWireframeColor: property = ...
    partition: property = ...
    renderableOnlySet: property = ...
    thisown: property = ...
    def type(self, *args: Any, **kwargs: Any) -> Any: ...
    usedByNodes: property = ...
    verticesOnlySet: property = ...

class MPxParticleAttributeMapperNode(MPxNode):
    def __disown__(self) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def compute(self, *args: Any, **kwargs: Any) -> Any: ...
    computeNode: property = ...
    computeNodeColor: property = ...
    computeNodeColorB: property = ...
    computeNodeColorG: property = ...
    computeNodeColorR: property = ...
    outColorPP: property = ...
    outMaxValue: property = ...
    outMinValue: property = ...
    outValuePP: property = ...
    thisown: property = ...
    time: property = ...
    def type(self, *args: Any, **kwargs: Any) -> Any: ...
    uCoordPP: property = ...
    vCoordPP: property = ...

class MPxPolyTrg(MPxNode):
    def __disown__(self) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def compute(self, *args: Any, **kwargs: Any) -> Any: ...
    def isAbstractClass(self, *args: Any, **kwargs: Any) -> Any: ...
    def postConstructor(self, *args: Any, **kwargs: Any) -> Any: ...
    def registerTrgFunction(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def unregisterTrgFunction(self, *args: Any, **kwargs: Any) -> Any: ...

class MPxPolyTweakUVCommand(MPxCommand):
    def __disown__(self) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def getTweakedUVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def newSyntax(self, *args: Any, **kwargs: Any) -> Any: ...
    def parseSyntax(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MPxToolCommand(MPxCommand):
    def __disown__(self) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def _doFinalize(self, *args: Any, **kwargs: Any) -> Any: ...
    def cancel(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def doIt(self, *args: Any, **kwargs: Any) -> Any: ...
    def finalize(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MPxPolyTweakUVInteractiveCommand(MPxToolCommand):
    def __disown__(self) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def cancel(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def doIt(self, *args: Any, **kwargs: Any) -> Any: ...
    def finalize(self, *args: Any, **kwargs: Any) -> Any: ...
    def isUndoable(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUVs(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MPxRenderPassImpl:
    def __disown__(self) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def frameBufferSemantic(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDefaultType(self, *args: Any, **kwargs: Any) -> Any: ...
    def getNumChannels(self, *args: Any, **kwargs: Any) -> Any: ...
    def isCompatible(self, *args: Any, **kwargs: Any) -> Any: ...
    kBit: int = ...
    kColorSemantic: int = ...
    kDepthSemantic: int = ...
    kDirectionVectorSemantic: int = ...
    kFloat16: int = ...
    kFloat32: int = ...
    kFloat64: int = ...
    kInt16: int = ...
    kInt32: int = ...
    kInt64: int = ...
    kInt8: int = ...
    kInvalidSemantic: int = ...
    kLabelSemantic: int = ...
    kMaskSemantic: int = ...
    kOther: int = ...
    kOtherSemantic: int = ...
    kUInt16: int = ...
    kUInt32: int = ...
    kUInt64: int = ...
    kUInt8: int = ...
    kVectorSemantic: int = ...
    def perLightPassContributionSupported(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def typesSupported(self, *args: Any, **kwargs: Any) -> Any: ...

class MPxRepresentation:
    def __disown__(self) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def _getAssembly(self, *args: Any, **kwargs: Any) -> Any: ...
    def activate(self, *args: Any, **kwargs: Any) -> Any: ...
    def canApplyEdits(self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self, *args: Any, **kwargs: Any) -> Any: ...
    def getName(self, *args: Any, **kwargs: Any) -> Any: ...
    def getType(self, *args: Any, **kwargs: Any) -> Any: ...
    def inactivate(self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MPxSelectionContext(MPxContext):
    def __disown__(self) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def _isSelecting(self, *args: Any, **kwargs: Any) -> Any: ...
    def _lastDragPoint(self, *args: Any, **kwargs: Any) -> Any: ...
    def _newToolCommand(self, *args: Any, **kwargs: Any) -> Any: ...
    def _startPoint(self, *args: Any, **kwargs: Any) -> Any: ...
    def abortAction(self, *args: Any, **kwargs: Any) -> Any: ...
    def addManipulator(self, *args: Any, **kwargs: Any) -> Any: ...
    def argTypeNumericalInput(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteManipulators(self, *args: Any, **kwargs: Any) -> Any: ...
    def doDrag(self, *args: Any, **kwargs: Any) -> Any: ...
    def doHold(self, *args: Any, **kwargs: Any) -> Any: ...
    def doPress(self, *args: Any, **kwargs: Any) -> Any: ...
    def doRelease(self, *args: Any, **kwargs: Any) -> Any: ...
    def feedbackNumericalInput(self, *args: Any, **kwargs: Any) -> Any: ...
    def helpStateHasChanged(self, *args: Any, **kwargs: Any) -> Any: ...
    def image(self, *args: Any, **kwargs: Any) -> Any: ...
    def newToolCommand(self, *args: Any, **kwargs: Any) -> Any: ...
    def processNumericalInput(self, *args: Any, **kwargs: Any) -> Any: ...
    def setAllowDoubleClickAction(self, *args: Any, **kwargs: Any) -> Any: ...
    def setAllowPaintSelect(self, *args: Any, **kwargs: Any) -> Any: ...
    def setAllowPreSelectHilight(self, *args: Any, **kwargs: Any) -> Any: ...
    def setAllowSoftSelect(self, *args: Any, **kwargs: Any) -> Any: ...
    def setAllowSymmetry(self, *args: Any, **kwargs: Any) -> Any: ...
    def setImage(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MPxSkinCluster(MPxGeometryFilter):
    def __disown__(self) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    bindPreMatrix: property = ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    matrix: property = ...
    thisown: property = ...
    def type(self, *args: Any, **kwargs: Any) -> Any: ...
    weightList: property = ...
    def weightValue(self, *args: Any, **kwargs: Any) -> Any: ...
    weights: property = ...

class MPxSpringNode(MPxNode):
    def __disown__(self) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def applySpringLaw(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    mDeltaTime: property = ...
    mEnd1Weight: property = ...
    mEnd2Weight: property = ...
    thisown: property = ...
    def type(self, *args: Any, **kwargs: Any) -> Any: ...

class MPxSurfaceShapeUI:
    def __disown__(self) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def canDrawUV(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def draw(self, *args: Any, **kwargs: Any) -> Any: ...
    def drawUV(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDrawData(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDrawRequests(self, *args: Any, **kwargs: Any) -> Any: ...
    kSelectMeshEdges: int = ...
    kSelectMeshFaces: int = ...
    kSelectMeshUVs: int = ...
    kSelectMeshVerts: int = ...
    def material(self, *args: Any, **kwargs: Any) -> Any: ...
    def materials(self, *args: Any, **kwargs: Any) -> Any: ...
    def select(self, *args: Any, **kwargs: Any) -> Any: ...
    def selectUV(self, *args: Any, **kwargs: Any) -> Any: ...
    def snap(self, *args: Any, **kwargs: Any) -> Any: ...
    def surfaceShape(self, *args: Any, **kwargs: Any) -> Any: ...
    def surfaceShapeUI(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MPxTexContext(MPxContext):
    def __disown__(self) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def getMarqueeSelection(self, *args: Any, **kwargs: Any) -> Any: ...
    def newToolCommand(self, *args: Any, **kwargs: Any) -> Any: ...
    def portSize(self, *args: Any, **kwargs: Any) -> Any: ...
    def portToView(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def viewRect(self, *args: Any, **kwargs: Any) -> Any: ...
    def viewToPort(self, *args: Any, **kwargs: Any) -> Any: ...

class MPxTransform(MPxNode):
    def __disown__(self) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def _dirtyMatrix(self, *args: Any, **kwargs: Any) -> Any: ...
    def _dirtyRotateOrientation(self, *args: Any, **kwargs: Any) -> Any: ...
    def _dirtyRotatePivot(self, *args: Any, **kwargs: Any) -> Any: ...
    def _dirtyRotatePivotTranslation(self, *args: Any, **kwargs: Any) -> Any: ...
    def _dirtyRotation(self, *args: Any, **kwargs: Any) -> Any: ...
    def _dirtyScale(self, *args: Any, **kwargs: Any) -> Any: ...
    def _dirtyScalePivot(self, *args: Any, **kwargs: Any) -> Any: ...
    def _dirtyScalePivotTranslation(self, *args: Any, **kwargs: Any) -> Any: ...
    def _dirtyShear(self, *args: Any, **kwargs: Any) -> Any: ...
    def _dirtyTranslation(self, *args: Any, **kwargs: Any) -> Any: ...
    def applyRotateOrientationLocks(self, *args: Any, **kwargs: Any) -> Any: ...
    def applyRotatePivotLocks(self, *args: Any, **kwargs: Any) -> Any: ...
    def applyRotatePivotLocksTranslate(self, *args: Any, **kwargs: Any) -> Any: ...
    def applyRotationLimits(self, *args: Any, **kwargs: Any) -> Any: ...
    def applyRotationLocks(self, *args: Any, **kwargs: Any) -> Any: ...
    def applyScaleLimits(self, *args: Any, **kwargs: Any) -> Any: ...
    def applyScaleLocks(self, *args: Any, **kwargs: Any) -> Any: ...
    def applyScaleLocksPivot(self, *args: Any, **kwargs: Any) -> Any: ...
    def applyScaleLocksPivotTranslate(self, *args: Any, **kwargs: Any) -> Any: ...
    def applyShearLocks(self, *args: Any, **kwargs: Any) -> Any: ...
    def applyTranslationLimits(self, *args: Any, **kwargs: Any) -> Any: ...
    def applyTranslationLocks(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    baseTransformationMatrix: property = ...
    def boundingBox(self, *args: Any, **kwargs: Any) -> Any: ...
    boundingBoxCenterX: property = ...
    boundingBoxCenterY: property = ...
    boundingBoxCenterZ: property = ...
    center: property = ...
    def checkAndSetRotateOrientation(self, *args: Any, **kwargs: Any) -> Any: ...
    def checkAndSetRotatePivot(self, *args: Any, **kwargs: Any) -> Any: ...
    def checkAndSetRotatePivotTranslation(self, *args: Any, **kwargs: Any) -> Any: ...
    def checkAndSetRotation(self, *args: Any, **kwargs: Any) -> Any: ...
    def checkAndSetScale(self, *args: Any, **kwargs: Any) -> Any: ...
    def checkAndSetScalePivot(self, *args: Any, **kwargs: Any) -> Any: ...
    def checkAndSetScalePivotTranslation(self, *args: Any, **kwargs: Any) -> Any: ...
    def checkAndSetShear(self, *args: Any, **kwargs: Any) -> Any: ...
    def checkAndSetTranslation(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def clearLimits(self, *args: Any, **kwargs: Any) -> Any: ...
    def compute(self, *args: Any, **kwargs: Any) -> Any: ...
    def computeLocalTransformation(self, *args: Any, **kwargs: Any) -> Any: ...
    def copyInternalData(self, *args: Any, **kwargs: Any) -> Any: ...
    def createTransformationMatrix(self, *args: Any, **kwargs: Any) -> Any: ...
    displayHandle: property = ...
    displayLocalAxis: property = ...
    displayRotatePivot: property = ...
    displayScalePivot: property = ...
    drawOverride: property = ...
    dynamics: property = ...
    def enableLimit(self, *args: Any, **kwargs: Any) -> Any: ...
    geometry: property = ...
    def getEulerRotation(self, *args: Any, **kwargs: Any) -> Any: ...
    def getMatrix(self, *args: Any, **kwargs: Any) -> Any: ...
    def getMatrixInverse(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPreRotation(self, *args: Any, **kwargs: Any) -> Any: ...
    def getRotateOrientation(self, *args: Any, **kwargs: Any) -> Any: ...
    def getRotatePivot(self, *args: Any, **kwargs: Any) -> Any: ...
    def getRotatePivotTranslation(self, *args: Any, **kwargs: Any) -> Any: ...
    def getRotation(self, *args: Any, **kwargs: Any) -> Any: ...
    def getRotationOrder(self, *args: Any, **kwargs: Any) -> Any: ...
    def getScale(self, *args: Any, **kwargs: Any) -> Any: ...
    def getScalePivot(self, *args: Any, **kwargs: Any) -> Any: ...
    def getScalePivotTranslation(self, *args: Any, **kwargs: Any) -> Any: ...
    def getShear(self, *args: Any, **kwargs: Any) -> Any: ...
    def getTranslation(self, *args: Any, **kwargs: Any) -> Any: ...
    ghosting: property = ...
    identification: property = ...
    inheritsTransform: property = ...
    instObjGroups: property = ...
    intermediateObject: property = ...
    inverseMatrix: property = ...
    def isBounded(self, *args: Any, **kwargs: Any) -> Any: ...
    def isLimited(self, *args: Any, **kwargs: Any) -> Any: ...
    def isNonAffineMatricesEnabled(self, *args: Any, **kwargs: Any) -> Any: ...
    isTemplated: property = ...
    layerOverrideColor: property = ...
    layerRenderable: property = ...
    def limitValue(self, *args: Any, **kwargs: Any) -> Any: ...
    lodVisibility: property = ...
    matrix: property = ...
    maxRotLimit: property = ...
    maxRotLimitEnable: property = ...
    maxRotXLimit: property = ...
    maxRotXLimitEnable: property = ...
    maxRotYLimit: property = ...
    maxRotYLimitEnable: property = ...
    maxRotZLimit: property = ...
    maxRotZLimitEnable: property = ...
    maxScaleLimit: property = ...
    maxScaleLimitEnable: property = ...
    maxScaleXLimit: property = ...
    maxScaleXLimitEnable: property = ...
    maxScaleYLimit: property = ...
    maxScaleYLimitEnable: property = ...
    maxScaleZLimit: property = ...
    maxScaleZLimitEnable: property = ...
    maxTransLimit: property = ...
    maxTransLimitEnable: property = ...
    maxTransXLimit: property = ...
    maxTransXLimitEnable: property = ...
    maxTransYLimit: property = ...
    maxTransYLimitEnable: property = ...
    maxTransZLimit: property = ...
    maxTransZLimitEnable: property = ...
    minRotLimit: property = ...
    minRotLimitEnable: property = ...
    minRotXLimit: property = ...
    minRotXLimitEnable: property = ...
    minRotYLimit: property = ...
    minRotYLimitEnable: property = ...
    minRotZLimit: property = ...
    minRotZLimitEnable: property = ...
    minScaleLimit: property = ...
    minScaleLimitEnable: property = ...
    minScaleXLimit: property = ...
    minScaleXLimitEnable: property = ...
    minScaleYLimit: property = ...
    minScaleYLimitEnable: property = ...
    minScaleZLimit: property = ...
    minScaleZLimitEnable: property = ...
    minTransLimit: property = ...
    minTransLimitEnable: property = ...
    minTransXLimit: property = ...
    minTransXLimitEnable: property = ...
    minTransYLimit: property = ...
    minTransYLimitEnable: property = ...
    minTransZLimit: property = ...
    minTransZLimitEnable: property = ...
    def mustCallValidateAndSet(self, *args: Any, **kwargs: Any) -> Any: ...
    nodeBoundingBox: property = ...
    nodeBoundingBoxMax: property = ...
    nodeBoundingBoxMaxX: property = ...
    nodeBoundingBoxMaxY: property = ...
    nodeBoundingBoxMaxZ: property = ...
    nodeBoundingBoxMin: property = ...
    nodeBoundingBoxMinX: property = ...
    nodeBoundingBoxMinY: property = ...
    nodeBoundingBoxMinZ: property = ...
    nodeBoundingBoxSize: property = ...
    nodeBoundingBoxSizeX: property = ...
    nodeBoundingBoxSizeY: property = ...
    nodeBoundingBoxSizeZ: property = ...
    objectColor: property = ...
    objectGroupColor: property = ...
    objectGroupId: property = ...
    objectGroups: property = ...
    objectGrpCompList: property = ...
    offsetParentMatrix: property = ...
    overrideColor: property = ...
    overrideDisplayType: property = ...
    overrideEnabled: property = ...
    overrideLevelOfDetail: property = ...
    overridePlayback: property = ...
    overrideShading: property = ...
    overrideTexturing: property = ...
    overrideVisibility: property = ...
    parentInverseMatrix: property = ...
    parentMatrix: property = ...
    def postConstructor(self, *args: Any, **kwargs: Any) -> Any: ...
    renderInfo: property = ...
    renderLayerColor: property = ...
    renderLayerId: property = ...
    renderLayerInfo: property = ...
    renderLayerRenderable: property = ...
    def resetTransformation(self, *args: Any, **kwargs: Any) -> Any: ...
    rotate: property = ...
    rotateAxis: property = ...
    rotateAxisX: property = ...
    rotateAxisY: property = ...
    rotateAxisZ: property = ...
    def rotateBy(self, *args: Any, **kwargs: Any) -> Any: ...
    rotateOrder: property = ...
    rotatePivot: property = ...
    rotatePivotTranslate: property = ...
    rotatePivotTranslateX: property = ...
    rotatePivotTranslateY: property = ...
    rotatePivotTranslateZ: property = ...
    rotatePivotX: property = ...
    rotatePivotY: property = ...
    rotatePivotZ: property = ...
    rotateQuaternion: property = ...
    rotateQuaternionW: property = ...
    rotateQuaternionX: property = ...
    rotateQuaternionY: property = ...
    rotateQuaternionZ: property = ...
    def rotateTo(self, *args: Any, **kwargs: Any) -> Any: ...
    rotateX: property = ...
    rotateY: property = ...
    rotateZ: property = ...
    rotationInterpolation: property = ...
    scale: property = ...
    def scaleBy(self, *args: Any, **kwargs: Any) -> Any: ...
    scalePivot: property = ...
    scalePivotTranslate: property = ...
    scalePivotTranslateX: property = ...
    scalePivotTranslateY: property = ...
    scalePivotTranslateZ: property = ...
    scalePivotX: property = ...
    scalePivotY: property = ...
    scalePivotZ: property = ...
    def scaleTo(self, *args: Any, **kwargs: Any) -> Any: ...
    scaleX: property = ...
    scaleY: property = ...
    scaleZ: property = ...
    selectHandle: property = ...
    selectHandleX: property = ...
    selectHandleY: property = ...
    selectHandleZ: property = ...
    def setLimit(self, *args: Any, **kwargs: Any) -> Any: ...
    def setNonAffineMatricesEnabled(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotateOrientation(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotatePivot(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotatePivotTranslation(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotationOrder(self, *args: Any, **kwargs: Any) -> Any: ...
    def setScalePivot(self, *args: Any, **kwargs: Any) -> Any: ...
    def setScalePivotTranslation(self, *args: Any, **kwargs: Any) -> Any: ...
    shear: property = ...
    def shearBy(self, *args: Any, **kwargs: Any) -> Any: ...
    def shearTo(self, *args: Any, **kwargs: Any) -> Any: ...
    shearXY: property = ...
    shearXZ: property = ...
    shearYZ: property = ...
    showManipDefault: property = ...
    specifiedManipLocation: property = ...
    thisown: property = ...
    transMinusRotatePivot: property = ...
    transMinusRotatePivotX: property = ...
    transMinusRotatePivotY: property = ...
    transMinusRotatePivotZ: property = ...
    def transformationMatrix(self, *args: Any, **kwargs: Any) -> Any: ...
    def transformationMatrixPtr(self, *args: Any, **kwargs: Any) -> Any: ...
    translate: property = ...
    def translateBy(self, *args: Any, **kwargs: Any) -> Any: ...
    def translateTo(self, *args: Any, **kwargs: Any) -> Any: ...
    translateX: property = ...
    translateY: property = ...
    translateZ: property = ...
    def treatAsTransform(self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self, *args: Any, **kwargs: Any) -> Any: ...
    def updateMatrixAttrs(self, *args: Any, **kwargs: Any) -> Any: ...
    useObjectColor: property = ...
    def validateAndSetValue(self, *args: Any, **kwargs: Any) -> Any: ...
    visibility: property = ...
    worldInverseMatrix: property = ...
    worldMatrix: property = ...
    xformMatrix: property = ...

class MPxTransformationMatrix:
    def __disown__(self) -> Any: ...
    def __eq__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __ne__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def asInterpolationMatrix(self, *args: Any, **kwargs: Any) -> Any: ...
    def asMatrix(self, *args: Any, **kwargs: Any) -> Any: ...
    def asMatrixInverse(self, *args: Any, **kwargs: Any) -> Any: ...
    def asRotateMatrix(self, *args: Any, **kwargs: Any) -> Any: ...
    def asRotateMatrixInverse(self, *args: Any, **kwargs: Any) -> Any: ...
    def asScaleMatrix(self, *args: Any, **kwargs: Any) -> Any: ...
    def asScaleMatrixInverse(self, *args: Any, **kwargs: Any) -> Any: ...
    def asTransformationMatrix(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    baseTransformationMatrixId: property = ...
    def convertEulerRotationOrder(self, *args: Any, **kwargs: Any) -> Any: ...
    def convertTransformationRotationOrder(self, *args: Any, **kwargs: Any) -> Any: ...
    def copyValues(self, *args: Any, **kwargs: Any) -> Any: ...
    def creator(self, *args: Any, **kwargs: Any) -> Any: ...
    def decomposeMatrix(self, *args: Any, **kwargs: Any) -> Any: ...
    def eulerRotateOrientation(self, *args: Any, **kwargs: Any) -> Any: ...
    def eulerRotation(self, *args: Any, **kwargs: Any) -> Any: ...
    identity: MPxTransformationMatrix = ...
    def isEquivalent(self, *args: Any, **kwargs: Any) -> Any: ...
    def preRotation(self, *args: Any, **kwargs: Any) -> Any: ...
    def reverse(self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateBy(self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateOrientation(self, *args: Any, **kwargs: Any) -> Any: ...
    def rotatePivot(self, *args: Any, **kwargs: Any) -> Any: ...
    def rotatePivotTranslation(self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateTo(self, *args: Any, **kwargs: Any) -> Any: ...
    def rotation(self, *args: Any, **kwargs: Any) -> Any: ...
    def rotationOrder(self, *args: Any, **kwargs: Any) -> Any: ...
    def scale(self, *args: Any, **kwargs: Any) -> Any: ...
    def scaleBy(self, *args: Any, **kwargs: Any) -> Any: ...
    def scalePivot(self, *args: Any, **kwargs: Any) -> Any: ...
    def scalePivotTranslation(self, *args: Any, **kwargs: Any) -> Any: ...
    def scaleTo(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotateOrientation(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotatePivot(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotatePivotTranslation(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotationOrder(self, *args: Any, **kwargs: Any) -> Any: ...
    def setScalePivot(self, *args: Any, **kwargs: Any) -> Any: ...
    def setScalePivotTranslation(self, *args: Any, **kwargs: Any) -> Any: ...
    def shear(self, *args: Any, **kwargs: Any) -> Any: ...
    def shearBy(self, *args: Any, **kwargs: Any) -> Any: ...
    def shearTo(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transformBy(self, *args: Any, **kwargs: Any) -> Any: ...
    def translateBy(self, *args: Any, **kwargs: Any) -> Any: ...
    def translateTo(self, *args: Any, **kwargs: Any) -> Any: ...
    def translation(self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self, *args: Any, **kwargs: Any) -> Any: ...
    def unSquishIt(self, *args: Any, **kwargs: Any) -> Any: ...
    def unSquishMatrix(self, *args: Any, **kwargs: Any) -> Any: ...

class MPxUIControl:
    def __disown__(self) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MPxUITableControl(MPxUIControl):
    def __disown__(self) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addToSelection(self, *args: Any, **kwargs: Any) -> Any: ...
    def allowEdit(self, *args: Any, **kwargs: Any) -> Any: ...
    def allowSelection(self, *args: Any, **kwargs: Any) -> Any: ...
    def cellString(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def clearSelection(self, *args: Any, **kwargs: Any) -> Any: ...
    def collapseOrExpandRow(self, *args: Any, **kwargs: Any) -> Any: ...
    def getCellColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def isSelected(self, *args: Any, **kwargs: Any) -> Any: ...
    kAllLabels: int = ...
    kColumnLabel: int = ...
    kNoLabel: int = ...
    kRowLabel: int = ...
    def labelString(self, *args: Any, **kwargs: Any) -> Any: ...
    def numberOfColumns(self, *args: Any, **kwargs: Any) -> Any: ...
    def numberOfRows(self, *args: Any, **kwargs: Any) -> Any: ...
    def redrawCells(self, *args: Any, **kwargs: Any) -> Any: ...
    def redrawLabels(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeFromSelection(self, *args: Any, **kwargs: Any) -> Any: ...
    def setNumberOfColumns(self, *args: Any, **kwargs: Any) -> Any: ...
    def setNumberOfRows(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSelection(self, *args: Any, **kwargs: Any) -> Any: ...
    def suspendUpdates(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MaterialInputData:
    def __init__(self, args: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    ambient: property = ...
    diffuse: property = ...
    emission: property = ...
    hasTransparency: property = ...
    shininess: property = ...
    specular: property = ...
    thisown: property = ...

class _SwigNonDynamicMeta(type):
    def __setattr__(self, cls: Any, name: Any, value: Any) -> Any: ...

class boolPtr:
    def __init__(self, args: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self, *args: Any, **kwargs: Any) -> Any: ...

class charPtr:
    def __init__(self, args: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self, *args: Any, **kwargs: Any) -> Any: ...

class doublePtr:
    def __init__(self, args: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self, *args: Any, **kwargs: Any) -> Any: ...

class floatPtr:
    def __init__(self, args: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self, *args: Any, **kwargs: Any) -> Any: ...

class intPtr:
    def __init__(self, args: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self, *args: Any, **kwargs: Any) -> Any: ...

class shortPtr:
    def __init__(self, args: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self, *args: Any, **kwargs: Any) -> Any: ...

class uCharPtr:
    def __init__(self, args: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self, *args: Any, **kwargs: Any) -> Any: ...

class uIntPtr:
    def __init__(self, args: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self, *args: Any, **kwargs: Any) -> Any: ...
