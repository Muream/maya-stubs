from __future__ import annotations

from typing import *

import maya.OpenMaya

Unknown = Any

class MAnimControl:
    """ """
    def __init__(self, *args: Unknown) -> None: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def animationEndTime(*args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def animationStartTime(*args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def autoKeyMode(*args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def currentTime(*args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def globalInTangentType(*args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def globalOutTangentType(*args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def isPlaying(*args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def isScrubbing(*args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def isValid(*args: Unknown, **kwargs: Unknown) -> Any: ...

    kPlaybackLoop: int = 1
    kPlaybackOnce: int = 0
    kPlaybackOscillate: int = 2
    kPlaybackViewActive: int = 1
    kPlaybackViewAll: int = 0
    @staticmethod
    def maxTime(*args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def minTime(*args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def playBackward(*args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def playForward(*args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def playbackBy(*args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def playbackMode(*args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def playbackSpeed(*args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def setAnimationEndTime(*args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def setAnimationStartEndTime(*args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def setAnimationStartTime(*args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def setAutoKeyMode(*args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def setCurrentTime(*args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def setGlobalInTangentType(*args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def setGlobalOutTangentType(*args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def setMaxTime(*args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def setMinMaxTime(*args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def setMinTime(*args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def setPlaybackBy(*args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def setPlaybackMode(*args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def setPlaybackSpeed(*args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def setViewMode(*args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def setWeightedTangents(*args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def stop(*args: Unknown, **kwargs: Unknown) -> Any: ...

    thisown: bool
    @staticmethod
    def viewMode(*args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def weightedTangents(*args: Unknown, **kwargs: Unknown) -> Any: ...

class MAnimCurveChange:
    """ """
    def __init__(self, *args: Unknown) -> None: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def className(*args: Unknown, **kwargs: Unknown) -> Any: ...
    def isInteractive(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def redoIt(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setInteractive(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...

    thisown: bool
    def undoIt(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...

class MAnimCurveClipboard:
    """ """
    def __init__(self, *args: Unknown) -> None: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def clear(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def clipboardItems(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def endTime(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def endUnitlessInput(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def isEmpty(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def set(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def startTime(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def startUnitlessInput(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def theAPIClipboard(*args: Unknown, **kwargs: Unknown) -> Any: ...

    thisown: bool

class MAnimCurveClipboardItem:
    """ """
    def __eq__(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def __init__(self, *args: Unknown) -> None: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def animCurve(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def animCurveType(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def assign(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def className(*args: Unknown, **kwargs: Unknown) -> Any: ...
    def fullAttributeName(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def getAddressingInfo(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def leafAttributeName(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def nodeName(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setAddressingInfo(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setAnimCurve(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setNameInfo(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...

    thisown: bool

class MAnimCurveClipboardItemArray:
    """ """
    def __getitem__(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def __init__(self, *args: Unknown) -> None: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def append(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def assign(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def className(*args: Unknown, **kwargs: Unknown) -> Any: ...
    def clear(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def copy(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def insert(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def isValid(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def length(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def remove(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def set(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setLength(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setSizeIncrement(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def sizeIncrement(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...

    thisown: bool

class MAnimMessage(maya.OpenMaya.MMessage):
    """ """
    def __init__(self, *args: Unknown) -> None: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def addAnimCurveEditedCallback(*args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def addAnimKeyframeEditCheckCallback(*args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def addAnimKeyframeEditedCallback(*args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def addDisableImplicitControlCallback(*args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def addNodeAnimKeyframeEditedCallback(*args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def addPostBakeResultsCallback(*args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def addPreBakeResultsCallback(*args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def className(*args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def flushAnimKeyframeEditedCallbacks(*args: Unknown, **kwargs: Unknown) -> Any: ...

    thisown: bool

class MAnimUtil:
    """ """
    def __init__(self, *args: Unknown) -> None: ...
    def __repr__(self) -> Any: ...
    @staticmethod
    def className(*args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def findAnimatablePlugs(*args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def findAnimatedPlugs(*args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def findAnimation(*args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def findAnimationLayers(*args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def findConstraint(*args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def findSetDrivenKeyAnimation(*args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def isAnimated(*args: Unknown, **kwargs: Unknown) -> Any: ...

    thisown: bool

class MFnAnimCurve(maya.OpenMaya.MFnDependencyNode):
    """ """
    def __init__(self, *args: Unknown) -> None: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def addKey(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def addKeyframe(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def addKeys(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def addKeysWithTangents(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def animCurveType(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def className(*args: Unknown, **kwargs: Unknown) -> Any: ...
    def create(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def evaluate(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def find(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def findClosest(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def getTangent(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def inTangentType(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def insertKey(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def isBreakdown(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def isStatic(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def isTimeInput(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def isUnitlessInput(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def isWeighted(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...

    kTangentAuto: int = 11
    kTangentAutoCustom: int = 29
    kTangentAutoEase: int = 28
    kTangentAutoMix: int = 27
    kTangentCustomEnd: int = 32767
    kTangentCustomStart: int = 64
    kTangentShared1: int = 19
    kTangentShared2: int = 20
    kTangentShared3: int = 21
    kTangentShared4: int = 22
    kTangentShared5: int = 23
    kTangentShared6: int = 24
    kTangentShared7: int = 25
    kTangentShared8: int = 26
    kTangentStepNext: int = 10
    kTangentTypeCount: int = 32768
    def numKeyframes(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def numKeys(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def outTangentType(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def postInfinityType(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def preInfinityType(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def quaternionW(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def remove(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setAngle(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setInTangentType(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setIsBreakdown(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setIsWeighted(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setOutTangentType(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setPostInfinityType(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setPreInfinityType(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setQuaternionW(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setTangent(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setTangentTypes(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setTangentsLocked(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setTime(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setUnitlessInput(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setValue(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setWeight(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setWeightsLocked(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def tangentsLocked(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...

    thisown: bool
    def time(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def timedAnimCurveTypeForPlug(
        self, /, *args: Unknown, **kwargs: Unknown
    ) -> Any: ...
    def unitlessAnimCurveTypeForPlug(
        self, /, *args: Unknown, **kwargs: Unknown
    ) -> Any: ...
    def unitlessInput(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def value(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def weightsLocked(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...

class MFnBlendShapeDeformer(maya.OpenMaya.MFnDependencyNode):
    """ """
    def __init__(self, *args: Unknown) -> None: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def addBaseObject(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def addTarget(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def className(*args: Unknown, **kwargs: Unknown) -> Any: ...
    def create(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def envelope(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def getBaseObjects(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def getTargets(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def historyLocation(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def numWeights(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def origin(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def removeTarget(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setEnvelope(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setOrigin(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setWeight(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def targetItemIndexList(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...

    thisown: bool
    def weight(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def weightIndexList(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...

class MFnCharacter(maya.OpenMaya.MFnSet):
    """ """
    def __init__(self, *args: Unknown) -> None: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def addCurveToClip(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def attachInstanceToCharacter(
        self, /, *args: Unknown, **kwargs: Unknown
    ) -> Any: ...
    def attachSourceToCharacter(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def blendExists(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def className(*args: Unknown, **kwargs: Unknown) -> Any: ...
    def createBlend(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def getBlend(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def getBlendClips(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def getBlendCount(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def getCharacterThatOwnsPlug(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def getClipScheduler(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def getMemberPlugs(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def getScheduledClip(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def getScheduledClipCount(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def getSourceClip(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def getSourceClipCount(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def getSubCharacters(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def removeBlend(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...

    thisown: bool

class MFnClip(maya.OpenMaya.MFnDependencyNode):
    """ """
    def __init__(self, *args: Unknown) -> None: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def className(*args: Unknown, **kwargs: Unknown) -> Any: ...
    def createInstancedClip(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def createSourceClip(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def getAbsolute(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def getAbsoluteChannelSettings(
        self, /, *args: Unknown, **kwargs: Unknown
    ) -> Any: ...
    def getCycle(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def getEnabled(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def getMemberAnimCurves(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def getPostCycle(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def getPreCycle(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def getScale(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def getSourceDuration(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def getSourceStart(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def getStartFrame(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def getTrack(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def getWeight(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def isInstancedClip(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def isPose(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setAbsolute(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setAbsoluteChannelSettings(
        self, /, *args: Unknown, **kwargs: Unknown
    ) -> Any: ...
    def setCycle(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setEnabled(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setPoseClip(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setPostCycle(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setPreCycle(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setScale(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setSourceData(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setStartFrame(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setTrack(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setWeight(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def sourceClip(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...

    thisown: bool

class MFnGeometryFilter(maya.OpenMaya.MFnDependencyNode):
    """ """
    def __init__(self, *args: Unknown) -> None: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def className(*args: Unknown, **kwargs: Unknown) -> Any: ...
    def deformerSet(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def envelope(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def getComponentAtIndex(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def getIndexMapper(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def getInputGeometry(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def getOutputGeometry(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def getPathAtIndex(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def groupIdAtIndex(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def indexForGroupId(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def indexForOutputConnection(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def indexForOutputShape(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def inputShapeAtIndex(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def numOutputConnections(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def outputShapeAtIndex(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setEnvelope(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...

    thisown: bool

class MFnHikEffector(maya.OpenMaya.MFnTransform):
    """ """
    def __init__(self, *args: Unknown) -> None: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def className(*args: Unknown, **kwargs: Unknown) -> Any: ...
    def create(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def getAuxiliaryEffectors(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def getEffColor(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def getPivotOffset(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setEffColor(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setPivotOffset(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...

    thisown: bool

class MFnIkEffector(maya.OpenMaya.MFnTransform):
    """ """
    def __init__(self, *args: Unknown) -> None: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def className(*args: Unknown, **kwargs: Unknown) -> Any: ...
    def create(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...

    thisown: bool

class MFnIkHandle(maya.OpenMaya.MFnTransform):
    """ """
    def __init__(self, *args: Unknown) -> None: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def className(*args: Unknown, **kwargs: Unknown) -> Any: ...
    def create(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def getEffector(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def getStartJoint(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def poWeight(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def priority(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setEffector(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setPOWeight(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setPriority(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setSolver(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setStartJoint(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setStartJointAndEffector(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setStickiness(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setWeight(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def solver(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def stickiness(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...

    thisown: bool
    def weight(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...

class MFnIkJoint(maya.OpenMaya.MFnTransform):
    """ """
    def __init__(self, *args: Unknown) -> None: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def className(*args: Unknown, **kwargs: Unknown) -> Any: ...
    def create(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def getDegreesOfFreedom(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def getOrientation(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def getPreferedAngle(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def getPreferredAngle(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def getScaleOrientation(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def getSegmentScale(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def getStiffness(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def hikJointName(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def maxRotateDampXRange(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def maxRotateDampXStrength(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def maxRotateDampYRange(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def maxRotateDampYStrength(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def maxRotateDampZRange(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def maxRotateDampZStrength(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def minRotateDampXRange(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def minRotateDampXStrength(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def minRotateDampYRange(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def minRotateDampYStrength(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def minRotateDampZRange(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def minRotateDampZStrength(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setDegreesOfFreedom(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setMaxRotateDampXRange(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setMaxRotateDampXStrength(
        self, /, *args: Unknown, **kwargs: Unknown
    ) -> Any: ...
    def setMaxRotateDampYRange(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setMaxRotateDampYStrength(
        self, /, *args: Unknown, **kwargs: Unknown
    ) -> Any: ...
    def setMaxRotateDampZRange(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setMaxRotateDampZStrength(
        self, /, *args: Unknown, **kwargs: Unknown
    ) -> Any: ...
    def setMinRotateDampXRange(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setMinRotateDampXStrength(
        self, /, *args: Unknown, **kwargs: Unknown
    ) -> Any: ...
    def setMinRotateDampYRange(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setMinRotateDampYStrength(
        self, /, *args: Unknown, **kwargs: Unknown
    ) -> Any: ...
    def setMinRotateDampZRange(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setMinRotateDampZStrength(
        self, /, *args: Unknown, **kwargs: Unknown
    ) -> Any: ...
    def setOrientation(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setPreferedAngle(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setPreferredAngle(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setScaleOrientation(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setSegmentScale(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setStiffness(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...

    thisown: bool

class MFnIkSolver(maya.OpenMaya.MFnDependencyNode):
    """ """
    def __init__(self, *args: Unknown) -> None: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def className(*args: Unknown, **kwargs: Unknown) -> Any: ...
    def maxIterations(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setMaxIterations(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setTolerance(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...

    thisown: bool
    def tolerance(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...

class MFnKeyframeDelta(maya.OpenMaya.MFnBase):
    """ """
    def __init__(self, *args: Unknown) -> None: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def className(*args: Unknown, **kwargs: Unknown) -> Any: ...
    def keyIndex(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def paramCurve(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...

    thisown: bool

class MFnKeyframeDeltaAddRemove(MFnKeyframeDelta):
    """ """
    def __init__(self, *args: Unknown) -> None: ...
    def __swig_destroy__(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def className(*args: Unknown, **kwargs: Unknown) -> Any: ...
    def deltaType(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...

    kAdded: int = 0
    kRemoved: int = 1
    kReplaced: int = 2
    def replacedValue(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...

    thisown: bool
    def time(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def value(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...

class MFnKeyframeDeltaBlockAddRemove(MFnKeyframeDelta):
    """ """
    def __init__(self, *args: Unknown) -> None: ...
    def __swig_destroy__(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def className(*args: Unknown, **kwargs: Unknown) -> Any: ...
    def deltaType(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def endTime(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def getTimes(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def getValues(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...

    kAdded: int = 0
    kRemoved: int = 1
    def numKeys(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def startTime(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...

    thisown: bool

class MFnKeyframeDeltaBreakdown(MFnKeyframeDelta):
    """ """
    def __init__(self, *args: Unknown) -> None: ...
    def __swig_destroy__(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def className(*args: Unknown, **kwargs: Unknown) -> Any: ...
    def isBreakdown(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...

    thisown: bool
    def wasBreakdown(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...

class MFnKeyframeDeltaInfType(MFnKeyframeDelta):
    """ """
    def __init__(self, *args: Unknown) -> None: ...
    def __swig_destroy__(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def className(*args: Unknown, **kwargs: Unknown) -> Any: ...
    def currentInfinityType(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def isPreInfinity(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def previousInfinityType(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...

    thisown: bool

class MFnKeyframeDeltaMove(MFnKeyframeDelta):
    """ """
    def __init__(self, *args: Unknown) -> None: ...
    def __swig_destroy__(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def className(*args: Unknown, **kwargs: Unknown) -> Any: ...
    def currentTime(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def currentValue(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def previousIndex(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def previousTime(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def previousValue(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...

    thisown: bool

class MFnKeyframeDeltaScale(MFnKeyframeDelta):
    """ """
    def __init__(self, *args: Unknown) -> None: ...
    def __swig_destroy__(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def className(*args: Unknown, **kwargs: Unknown) -> Any: ...
    def currentEndTime(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def currentStartTime(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def endTime(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def pivotTime(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def startTime(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...

    thisown: bool

class MFnKeyframeDeltaTangent(MFnKeyframeDelta):
    """ """
    def __init__(self, *args: Unknown) -> None: ...
    def __swig_destroy__(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def className(*args: Unknown, **kwargs: Unknown) -> Any: ...
    def currentTangentType(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def getCurrentPosition(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def getPreviousPosition(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def isInTangent(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def previousTangentType(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...

    thisown: bool

class MFnKeyframeDeltaWeighted(MFnKeyframeDelta):
    """ """
    def __init__(self, *args: Unknown) -> None: ...
    def __swig_destroy__(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def className(*args: Unknown, **kwargs: Unknown) -> Any: ...

    thisown: bool
    def wasWeighted(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...

class MFnLattice(maya.OpenMaya.MFnDagNode):
    """ """
    def __init__(self, *args: Unknown) -> None: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def className(*args: Unknown, **kwargs: Unknown) -> Any: ...
    def create(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def getDivisions(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def point(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def reset(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setDivisions(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...

    thisown: bool

class MFnLatticeDeformer(maya.OpenMaya.MFnDependencyNode):
    """ """
    def __init__(self, *args: Unknown) -> None: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def addGeometry(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def baseLattice(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def className(*args: Unknown, **kwargs: Unknown) -> Any: ...
    def create(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def deformLattice(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def getAffectedGeometry(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def getDivisions(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def removeGeometry(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def resetLattice(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setDivisions(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...

    thisown: bool

class MFnMotionPath(maya.OpenMaya.MFnDependencyNode):
    """ """
    def __init__(self, *args: Unknown) -> None: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def addAnimatedObject(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def bank(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def bankScale(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def bankThreshold(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def className(*args: Unknown, **kwargs: Unknown) -> Any: ...
    def create(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def follow(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def followAxis(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def getAnimatedObjects(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def getOrientationMarker(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def getPositionMarker(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def inverseNormal(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def numOrientationMarkers(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def numPositionMarkers(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def pathObject(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setBank(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setBankScale(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setBankThreshold(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setFollow(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setFollowAxis(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setInverseNormal(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setPathObject(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setUEnd(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setUStart(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setUTimeEnd(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setUTimeStart(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setUpAxis(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setUseNormal(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...

    thisown: bool
    def uEnd(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def uStart(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def uTimeEnd(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def uTimeStart(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def upAxis(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def useNormal(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...

class MFnSkinCluster(MFnGeometryFilter):
    """ """
    def __init__(self, *args: Unknown) -> None: ...
    def __swig_destroy__(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def className(*args: Unknown, **kwargs: Unknown) -> Any: ...
    def getBlendWeights(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def getPointsAffectedByInfluence(
        self, /, *args: Unknown, **kwargs: Unknown
    ) -> Any: ...
    def getWeights(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def indexForInfluenceObject(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def influenceObjects(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setBlendWeights(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setWeights(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...

    thisown: bool

class MFnWeightGeometryFilter(MFnGeometryFilter):
    """ """
    def __init__(self, *args: Unknown) -> None: ...
    def __swig_destroy__(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def className(*args: Unknown, **kwargs: Unknown) -> Any: ...
    def getEnvelopeWeights(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def getWeightPlugStrings(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def getWeights(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setWeight(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...

    thisown: bool
    def weightPlugStrings(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...

class MFnWireDeformer(maya.OpenMaya.MFnDependencyNode):
    """ """
    def __init__(self, *args: Unknown) -> None: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def addGeometry(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def addWire(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def className(*args: Unknown, **kwargs: Unknown) -> Any: ...
    def create(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def crossingEffect(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def envelope(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def getAffectedGeometry(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def getDropoffLocator(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def holdingShape(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def localIntensity(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def numDropoffLocators(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def numWires(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def removeGeometry(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def rotation(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setCrossingEffect(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setDropoffLocator(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setEnvelope(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setHoldingShape(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setLocalIntensity(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setRotation(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setWireDropOffDistance(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setWireScale(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...

    thisown: bool
    def wire(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def wireDropOffDistance(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def wireScale(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...

class MIkHandleGroup:
    """ """
    def __init__(self, *args: Unknown) -> None: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def checkEffectorAtGoal(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def className(*args: Unknown, **kwargs: Unknown) -> Any: ...
    def dofCount(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def handle(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def handleCount(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def priority(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setPriority(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setSolverID(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def solve(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def solverID(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def solverPriority(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...

    thisown: bool

class MIkSystem:
    """ """
    def __init__(self, *args: Unknown) -> None: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def className(*args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def findSolver(*args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def getSolvers(*args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def isGlobalSnap(*args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def isGlobalSolve(*args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def setGlobalSnap(*args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def setGlobalSolve(*args: Unknown, **kwargs: Unknown) -> Any: ...

    thisown: bool

class MItKeyframe:
    """ """
    def __init__(self, *args: Unknown) -> None: ...
    def __next__(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def className(*args: Unknown, **kwargs: Unknown) -> Any: ...
    def getTangentIn(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def getTangentOut(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def inTangentType(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def isDone(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...

    kTangentAuto: int = 11
    kTangentAutoCustom: int = 14
    kTangentAutoEase: int = 13
    kTangentAutoMix: int = 12
    kTangentClamped: int = 8
    kTangentFast: int = 7
    kTangentFixed: int = 1
    kTangentFlat: int = 3
    kTangentGlobal: int = 0
    kTangentLinear: int = 2
    kTangentPlateau: int = 9
    kTangentSlow: int = 6
    kTangentSmooth: int = 4
    kTangentStep: int = 5
    kTangentStepNext: int = 10
    def next(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def outTangentType(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def reset(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setInTangentType(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setOutTangentType(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setTangentsLocked(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setTime(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def setValue(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def tangentsLocked(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...

    thisown: Any
    def time(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def value(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...

class boolPtr:
    """ """
    def __init__(self, *args: Unknown) -> None: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def assign(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def cast(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def frompointer(*args: Unknown, **kwargs: Unknown) -> Any: ...

    thisown: bool
    def value(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...

class charPtr:
    """ """
    def __init__(self, *args: Unknown) -> None: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def assign(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def cast(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def frompointer(*args: Unknown, **kwargs: Unknown) -> Any: ...

    thisown: bool
    def value(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...

class doublePtr:
    """ """
    def __init__(self, *args: Unknown) -> None: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def assign(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def cast(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def frompointer(*args: Unknown, **kwargs: Unknown) -> Any: ...

    thisown: bool
    def value(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...

class floatPtr:
    """ """
    def __init__(self, *args: Unknown) -> None: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def assign(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def cast(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def frompointer(*args: Unknown, **kwargs: Unknown) -> Any: ...

    thisown: bool
    def value(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...

class intPtr:
    """ """
    def __init__(self, *args: Unknown) -> None: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def assign(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def cast(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def frompointer(*args: Unknown, **kwargs: Unknown) -> Any: ...

    thisown: bool
    def value(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...

class shortPtr:
    """ """
    def __init__(self, *args: Unknown) -> None: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def assign(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def cast(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def frompointer(*args: Unknown, **kwargs: Unknown) -> Any: ...

    thisown: bool
    def value(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...

class uCharPtr:
    """ """
    def __init__(self, *args: Unknown) -> None: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def assign(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def cast(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def frompointer(*args: Unknown, **kwargs: Unknown) -> Any: ...

    thisown: bool
    def value(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...

class uIntPtr:
    """ """
    def __init__(self, *args: Unknown) -> None: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def assign(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    def cast(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
    @staticmethod
    def frompointer(*args: Unknown, **kwargs: Unknown) -> Any: ...

    thisown: bool
    def value(self, /, *args: Unknown, **kwargs: Unknown) -> Any: ...
