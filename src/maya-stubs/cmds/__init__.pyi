from __future__ import annotations

from typing import *

Unknown = Any

_T = TypeVar("_T")

Queryable = Union[bool, _T]
Multiuse = Union[_T, List[_T]]
Range = Union[Tuple[_T], Tuple[_T, _T]]
NullableRange = Range[Optional[_T]]

def aaf2fcp(
    *,
    deleteFile: bool = ...,
    dstPath: str = ...,
    getFileName: int = ...,
    progress: int = ...,
    srcFile: str = ...,
    terminate: int = ...,
    waitCompletion: int = ...,
) -> str: ...
def about(
    *,
    apiVersion: bool = ...,
    application: bool = ...,
    arm64: bool = ...,
    batch: bool = ...,
    buildDirectory: bool = ...,
    buildVariant: bool = ...,
    codeset: bool = ...,
    compositingManager: bool = ...,
    connected: bool = ...,
    creativeVersion: bool = ...,
    ctime: bool = ...,
    currentDate: bool = ...,
    currentTime: bool = ...,
    customVersion: bool = ...,
    customVersionClient: bool = ...,
    customVersionMajor: bool = ...,
    customVersionMinor: bool = ...,
    customVersionString: bool = ...,
    cutIdentifier: bool = ...,
    date: bool = ...,
    environmentFile: bool = ...,
    evalVersion: bool = ...,
    file: bool = ...,
    fontInfo: bool = ...,
    helpDataDirectory: bool = ...,
    installedVersion: bool = ...,
    ioVersion: bool = ...,
    irix: bool = ...,
    is64: bool = ...,
    languageResources: bool = ...,
    linux: bool = ...,
    linux64: bool = ...,
    liveUpdate: bool = ...,
    localizedResourceLocation: bool = ...,
    ltVersion: bool = ...,
    macOS: bool = ...,
    macOSASi: bool = ...,
    macOSppc: bool = ...,
    macOSx86: bool = ...,
    majorVersion: bool = ...,
    minorVersion: bool = ...,
    ntOS: bool = ...,
    operatingSystem: bool = ...,
    operatingSystemVersion: bool = ...,
    patchVersion: bool = ...,
    preferences: bool = ...,
    product: bool = ...,
    qtVersion: bool = ...,
    tablet: bool = ...,
    tabletMode: bool = ...,
    uiLanguage: bool = ...,
    uiLanguageForStartup: bool = ...,
    uiLanguageIsLocalized: bool = ...,
    uiLocaleLanguage: bool = ...,
    version: bool = ...,
    win64: bool = ...,
    windowManager: bool = ...,
    windows: bool = ...,
) -> str: ...
def addAttr(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    attributeType: Queryable[str] = ...,
    binaryTag: Queryable[str] = ...,
    cachedInternally: bool = ...,
    category: Queryable[Multiuse[str]] = ...,
    dataType: Queryable[Multiuse[str]] = ...,
    defaultValue: Queryable[float] = ...,
    disconnectBehaviour: Queryable[int] = ...,
    enforcingUniqueName: bool = ...,
    enumName: Queryable[str] = ...,
    exists: bool = ...,
    fromPlugin: bool = ...,
    hasMaxValue: bool = ...,
    hasMinValue: bool = ...,
    hasSoftMaxValue: bool = ...,
    hasSoftMinValue: bool = ...,
    hidden: bool = ...,
    indexMatters: bool = ...,
    internalSet: bool = ...,
    keyable: bool = ...,
    longName: Queryable[str] = ...,
    maxValue: Queryable[float] = ...,
    minValue: Queryable[float] = ...,
    multi: bool = ...,
    niceName: Queryable[str] = ...,
    numberOfChildren: Queryable[int] = ...,
    parent: Queryable[str] = ...,
    proxy: Queryable[str] = ...,
    readable: bool = ...,
    shortName: Queryable[str] = ...,
    softMaxValue: Queryable[float] = ...,
    softMinValue: Queryable[float] = ...,
    storable: bool = ...,
    usedAsColor: bool = ...,
    usedAsFilename: bool = ...,
    usedAsProxy: bool = ...,
    worldSpace: bool = ...,
    writable: bool = ...,
) -> Union[bool, str, Multiuse[str], float, int]: ...
def addDynamic(*args: str) -> str: ...
def addDynamicAttribute() -> None: ...
def addExtension(
    *,
    edit: bool = ...,
    query: bool = ...,
    nodeType: Queryable[str] = ...,
    attributeType: Queryable[str] = ...,
    binaryTag: Queryable[str] = ...,
    cachedInternally: bool = ...,
    category: Queryable[Multiuse[str]] = ...,
    dataType: Queryable[Multiuse[str]] = ...,
    defaultValue: Queryable[float] = ...,
    disconnectBehaviour: Queryable[int] = ...,
    enforcingUniqueName: bool = ...,
    enumName: Queryable[str] = ...,
    exists: bool = ...,
    fromPlugin: bool = ...,
    hasMaxValue: bool = ...,
    hasMinValue: bool = ...,
    hasSoftMaxValue: bool = ...,
    hasSoftMinValue: bool = ...,
    hidden: bool = ...,
    indexMatters: bool = ...,
    internalSet: bool = ...,
    keyable: bool = ...,
    longName: Queryable[str] = ...,
    maxValue: Queryable[float] = ...,
    minValue: Queryable[float] = ...,
    multi: bool = ...,
    niceName: Queryable[str] = ...,
    numberOfChildren: Queryable[int] = ...,
    parent: Queryable[str] = ...,
    proxy: Queryable[str] = ...,
    readable: bool = ...,
    shortName: Queryable[str] = ...,
    softMaxValue: Queryable[float] = ...,
    softMinValue: Queryable[float] = ...,
    storable: bool = ...,
    usedAsColor: bool = ...,
    usedAsFilename: bool = ...,
    usedAsProxy: bool = ...,
    worldSpace: bool = ...,
    writable: bool = ...,
) -> Union[bool, str, Multiuse[str], float, int]: ...
def addMetadata(
    *args: str,
    query: bool = ...,
    channelName: Queryable[str] = ...,
    channelType: Queryable[str] = ...,
    indexType: Queryable[str] = ...,
    scene: bool = ...,
    streamName: Queryable[str] = ...,
    structure: Queryable[str] = ...,
) -> Union[List[str], str, bool]: ...
def addPP(*args: str, attribute: str = ...) -> List[str]: ...
def adpAnalyticsDialog(
    *, activeNotification: bool = ..., desktopAnalytics: bool = ...
) -> None: ...
def adpWaypoint(*, name: str = ..., property: Multiuse[str] = ...) -> None: ...
def adskAsset(
    arg0: str = ...,
    /,
    *,
    query: bool = ...,
    assetID: str = ...,
    library: str = ...,
    resolved: bool = ...,
) -> None: ...
def adskAssetLibrary(*args: str, unloadAll: bool = ..., unload: bool = ...) -> None: ...
def adskAssetList(*, infoType: str = ...) -> None: ...
def adskAssetListUI(
    *,
    query: bool = ...,
    commandSuffix: str = ...,
    materialLoaded: bool = ...,
    uiCommand: str = ...,
) -> None: ...
def affectedNet(
    *args: str, edit: bool = ..., query: bool = ..., type: str = ...
) -> bool: ...
def affects(arg0: str = ..., /, *args: str, by: bool = ..., type: str = ...) -> str: ...
def agFormatIn(*, file: str = ..., name: str = ...) -> None: ...
def agFormatOut(*args: str, file: str = ...) -> None: ...
def aimConstraint(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    aimVector: Queryable[Tuple[float, float, float]] = ...,
    layer: str = ...,
    maintainOffset: bool = ...,
    name: Queryable[str] = ...,
    offset: Queryable[Tuple[float, float, float]] = ...,
    remove: bool = ...,
    skip: Multiuse[str] = ...,
    targetList: bool = ...,
    upVector: Queryable[Tuple[float, float, float]] = ...,
    weight: Queryable[float] = ...,
    weightAliasList: bool = ...,
    worldUpObject: Queryable[str] = ...,
    worldUpType: Queryable[str] = ...,
    worldUpVector: Queryable[Tuple[float, float, float]] = ...,
) -> Union[List[str], Tuple[float, float, float], str, bool, float]: ...
def air(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    attenuation: Queryable[float] = ...,
    directionX: Queryable[float] = ...,
    directionY: Queryable[float] = ...,
    directionZ: Queryable[float] = ...,
    enableSpread: bool = ...,
    fanSetup: bool = ...,
    inheritRotation: bool = ...,
    inheritVelocity: Queryable[float] = ...,
    magnitude: Queryable[float] = ...,
    maxDistance: Queryable[float] = ...,
    name: Queryable[str] = ...,
    perVertex: bool = ...,
    position: Queryable[Multiuse[Tuple[float, float, float]]] = ...,
    speed: Queryable[float] = ...,
    spread: Queryable[float] = ...,
    torusSectionRadius: Queryable[float] = ...,
    velocityComponentOnly: bool = ...,
    volumeExclusion: bool = ...,
    volumeOffset: Queryable[Tuple[float, float, float]] = ...,
    volumeShape: Queryable[str] = ...,
    volumeSweep: Queryable[float] = ...,
    wakeSetup: bool = ...,
    windSetup: bool = ...,
) -> Union[
    str, float, bool, Multiuse[Tuple[float, float, float]], Tuple[float, float, float]
]: ...
def aliasAttr(
    *args: str, edit: bool = ..., query: bool = ..., remove: bool = ...
) -> List[str]: ...
def align(
    *args: str,
    alignToLead: bool = ...,
    coordinateSystem: str = ...,
    xAxis: str = ...,
    yAxis: str = ...,
    zAxis: str = ...,
) -> bool: ...
def alignCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    align: bool = ...,
    anchorFirstObject: bool = ...,
    distribute: bool = ...,
    exists: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    name: str = ...,
    showAlignTouch: bool = ...,
) -> Union[str, bool]: ...
def alignCurve(
    arg0: str = ...,
    arg1: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    curvatureContinuity: bool = ...,
    curvatureScale1: Queryable[float] = ...,
    curvatureScale2: Queryable[float] = ...,
    joinParameter: Queryable[float] = ...,
    nodeState: Queryable[int] = ...,
    positionalContinuity: bool = ...,
    positionalContinuityType: Queryable[int] = ...,
    reverse1: bool = ...,
    reverse2: bool = ...,
    tangentContinuity: bool = ...,
    tangentContinuityType: Queryable[int] = ...,
    tangentScale1: Queryable[float] = ...,
    tangentScale2: Queryable[float] = ...,
    attach: bool = ...,
    constructionHistory: bool = ...,
    keepMultipleKnots: bool = ...,
    name: str = ...,
    object: bool = ...,
    replaceOriginal: bool = ...,
) -> Union[List[str], bool, float, int]: ...
def alignSurface(
    arg0: str = ...,
    arg1: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    curvatureContinuity: bool = ...,
    curvatureScale1: Queryable[float] = ...,
    curvatureScale2: Queryable[float] = ...,
    directionU: bool = ...,
    joinParameter: Queryable[float] = ...,
    nodeState: Queryable[int] = ...,
    positionalContinuity: bool = ...,
    positionalContinuityType: Queryable[int] = ...,
    reverse1: bool = ...,
    reverse2: bool = ...,
    swap1: bool = ...,
    swap2: bool = ...,
    tangentContinuity: bool = ...,
    tangentContinuityType: Queryable[int] = ...,
    tangentScale1: Queryable[float] = ...,
    tangentScale2: Queryable[float] = ...,
    twist: bool = ...,
    attach: bool = ...,
    constructionHistory: bool = ...,
    keepMultipleKnots: bool = ...,
    name: str = ...,
    object: bool = ...,
    replaceOriginal: bool = ...,
) -> Union[List[str], bool, float, int]: ...
def allNodeTypes(*, includeAbstract: bool = ...) -> List[str]: ...
def ambientLight(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    ambientShade: Queryable[float] = ...,
    discRadius: Queryable[float] = ...,
    exclusive: bool = ...,
    intensity: Queryable[float] = ...,
    name: Queryable[str] = ...,
    position: Queryable[Tuple[float, float, float]] = ...,
    rgb: Queryable[Tuple[float, float, float]] = ...,
    rotation: Queryable[Tuple[float, float, float]] = ...,
    shadowColor: Queryable[Tuple[float, float, float]] = ...,
    shadowDither: Queryable[float] = ...,
    shadowSamples: Queryable[int] = ...,
    softShadow: bool = ...,
    useRayTraceShadows: bool = ...,
) -> Union[List[float], str, float, bool, Tuple[float, float, float], int]: ...
def angleBetween(
    *,
    caching: bool = ...,
    constructionHistory: bool = ...,
    euler: bool = ...,
    nodeState: int = ...,
    vector1: Tuple[float, float, float] = ...,
    vector1X: float = ...,
    vector1Y: float = ...,
    vector1Z: float = ...,
    vector2: Tuple[float, float, float] = ...,
    vector2X: float = ...,
    vector2Y: float = ...,
    vector2Z: float = ...,
) -> Union[List[float], str]: ...
def animContextManager(
    *,
    query: bool = ...,
    availableTracks: bool = ...,
    clear: bool = ...,
    clipAvailableTracks: int = ...,
    clipAvailableVersions: Tuple[int, int] = ...,
    clipCurrentTrack: int = ...,
    clipCurrentVersion: Tuple[int, int, int] = ...,
    clipEndTime: int = ...,
    cancelMediaDownload: int = ...,
    clipName: int = ...,
    currentShotId: str = ...,
    currentShotMode: int = ...,
    clipStartTime: int = ...,
    mediaDownloadProgress: Tuple[str, int] = ...,
    enable: bool = ...,
    featureAvailable: bool = ...,
    hasContext: bool = ...,
    hasGap: int = ...,
    hasShotPadding: bool = ...,
    liveEdit: bool = ...,
    loadTimeline: str = ...,
    mediaResolved: int = ...,
    numClips: bool = ...,
    playbackRange: int = ...,
    reload: bool = ...,
    retryMediaDownload: int = ...,
    replaceShot: Tuple[int, int, int] = ...,
    recentShotMedia: bool = ...,
    referenceTracks: bool = ...,
    shotCamera: str = ...,
    showDemoDialog: int = ...,
    setDownloadError: Tuple[str, bool] = ...,
    shotIndex: int = ...,
    shotMedia: str = ...,
    shotPanel: bool = ...,
    showPipelineStepDialog: bool = ...,
    showShotPadding: bool = ...,
    shotStartTime: int = ...,
    currentTrack: int = ...,
    mediaFileURL: Tuple[str, str] = ...,
) -> None: ...
def animCurveEditor(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    areCurvesSelected: bool = ...,
    autoFit: Queryable[str] = ...,
    autoFitTime: Queryable[str] = ...,
    classicMode: bool = ...,
    clipTime: Queryable[str] = ...,
    constrainDrag: Queryable[int] = ...,
    control: bool = ...,
    curvesShown: bool = ...,
    curvesShownForceUpdate: bool = ...,
    defineTemplate: str = ...,
    denormalizeCurvesCommand: str = ...,
    displayActiveKeyTangents: str = ...,
    displayActiveKeys: str = ...,
    displayInfinities: str = ...,
    displayKeys: str = ...,
    displayNormalized: bool = ...,
    displayTangents: str = ...,
    displayValues: str = ...,
    docTag: Queryable[str] = ...,
    exists: bool = ...,
    filter: Queryable[str] = ...,
    forceMainConnection: Queryable[str] = ...,
    highlightAffectedCurves: bool = ...,
    highlightConnection: Queryable[str] = ...,
    keyMinScale: Queryable[float] = ...,
    keyScale: Queryable[float] = ...,
    keyingTime: Queryable[str] = ...,
    limitToSelectedCurves: bool = ...,
    lockMainConnection: bool = ...,
    lockPlayRangeShades: Queryable[str] = ...,
    lookAt: str = ...,
    mainListConnection: Queryable[str] = ...,
    menu: Callable[..., Any] = ...,
    normalizeCurvesCommand: str = ...,
    outliner: Queryable[str] = ...,
    panel: Queryable[str] = ...,
    parent: Queryable[str] = ...,
    preSelectionHighlight: bool = ...,
    renormalizeCurves: bool = ...,
    resultSamples: Queryable[int] = ...,
    resultScreenSamples: Queryable[int] = ...,
    resultUpdate: Queryable[str] = ...,
    selectionConnection: Queryable[str] = ...,
    showActiveCurveNames: bool = ...,
    showBufferCurves: Queryable[str] = ...,
    showCurveNames: bool = ...,
    showPlayRangeShades: Queryable[str] = ...,
    showResults: Queryable[str] = ...,
    showUpstreamCurves: bool = ...,
    simpleKeyView: bool = ...,
    smoothness: Queryable[str] = ...,
    snapTime: Queryable[str] = ...,
    snapValue: Queryable[str] = ...,
    stackedCurves: bool = ...,
    stackedCurvesMax: Queryable[float] = ...,
    stackedCurvesMin: Queryable[float] = ...,
    stackedCurvesSpace: Queryable[float] = ...,
    stateString: bool = ...,
    tangentLineThickness: Queryable[float] = ...,
    tangentScale: Queryable[float] = ...,
    timelinePositionTop: bool = ...,
    unParent: bool = ...,
    unlockMainConnection: bool = ...,
    updateMainConnection: bool = ...,
    useTemplate: str = ...,
    valueLinesToggle: str = ...,
) -> Union[str, bool, int, float]: ...
def animDisplay(
    *,
    edit: bool = ...,
    query: bool = ...,
    modelUpdate: Queryable[str] = ...,
    refAnimCurvesEditable: bool = ...,
    timeCode: Queryable[str] = ...,
    timeCodeOffset: Queryable[str] = ...,
) -> Union[bool, str]: ...
def animLayer(
    arg0: str = ...,
    arg1: str = ...,
    /,
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    addRelatedKG: bool = ...,
    addSelectedObjects: bool = ...,
    affectedLayers: bool = ...,
    affectedLayersAttribute: Multiuse[str] = ...,
    animCurves: bool = ...,
    attribute: Queryable[Multiuse[str]] = ...,
    baseAnimCurves: bool = ...,
    bestAnimLayer: bool = ...,
    bestLayer: bool = ...,
    blendNodes: bool = ...,
    children: Queryable[str] = ...,
    collapse: bool = ...,
    copy: str = ...,
    copyAnimation: str = ...,
    copyNoAnimation: str = ...,
    excludeBoolean: bool = ...,
    excludeDynamic: bool = ...,
    excludeEnum: bool = ...,
    excludeProxy: bool = ...,
    excludeRotate: bool = ...,
    excludeScale: bool = ...,
    excludeTranslate: bool = ...,
    excludeVisibility: bool = ...,
    exists: bool = ...,
    extractAnimation: str = ...,
    findCurveForPlug: str = ...,
    forceUIRebuild: bool = ...,
    forceUIRefresh: bool = ...,
    layeredPlug: str = ...,
    lock: bool = ...,
    maxLayers: bool = ...,
    moveLayerAfter: str = ...,
    moveLayerBefore: str = ...,
    mute: bool = ...,
    override: bool = ...,
    parent: Queryable[str] = ...,
    passthrough: bool = ...,
    preferred: bool = ...,
    removeAllAttributes: bool = ...,
    removeAttribute: Multiuse[str] = ...,
    removeSelectedObjects: bool = ...,
    root: Queryable[str] = ...,
    selected: bool = ...,
    solo: bool = ...,
    weight: Queryable[float] = ...,
    writeBlendnodeDestinations: bool = ...,
) -> Union[str, bool, Multiuse[str], float]: ...
def animView(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    endTime: int = ...,
    maxValue: float = ...,
    minValue: float = ...,
    nextView: bool = ...,
    previousView: bool = ...,
    startTime: int = ...,
) -> bool: ...
def annotate(
    *args: str, point: Tuple[float, float, float] = ..., text: str = ...
) -> str: ...
def appHome(
    *,
    edit: bool = ...,
    query: bool = ...,
    iconVisible: bool = ...,
    instrument: str = ...,
    setTab: str = ...,
    toggleVisibility: bool = ...,
    updateRecentFiles: bool = ...,
    visible: bool = ...,
) -> bool: ...
def appendListItem() -> None: ...
def applyAttrPattern(
    *args: str, nodeType: str = ..., patternName: str = ...
) -> int: ...
def applyMetadata(
    arg0: str = ..., /, *, format: str = ..., scene: bool = ..., value: str = ...
) -> bool: ...
def applyTake(
    *,
    channel: Multiuse[str] = ...,
    device: Multiuse[str] = ...,
    filter: Multiuse[str] = ...,
    preview: bool = ...,
    recurseChannel: bool = ...,
    reset: bool = ...,
    specifyChannel: bool = ...,
    startTime: int = ...,
) -> bool: ...
def arcLenDimContext(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    exists: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    name: str = ...,
) -> str: ...
def arcLengthDimension(*args: str) -> str: ...
def arclen(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    nodeState: Queryable[int] = ...,
) -> Union[float, str, bool, int]: ...
def arrayMapper(
    *,
    destAttr: str = ...,
    inputU: str = ...,
    inputV: str = ...,
    mapTo: str = ...,
    target: Multiuse[str] = ...,
    type: str = ...,
) -> List[str]: ...
def art3dPaintCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    accopacity: bool = ...,
    afterStrokeCmd: Queryable[str] = ...,
    alphablendmode: Queryable[str] = ...,
    assigntxt: bool = ...,
    attrnames: Queryable[str] = ...,
    beforeStrokeCmd: Queryable[str] = ...,
    brushalignment: bool = ...,
    brushdepth: Queryable[float] = ...,
    brushfeedback: bool = ...,
    brushtype: Queryable[str] = ...,
    clear: bool = ...,
    commonattr: Queryable[str] = ...,
    dragSlider: str = ...,
    dynclonemode: bool = ...,
    exists: bool = ...,
    expandfilename: bool = ...,
    extendFillColor: bool = ...,
    fileformat: Queryable[str] = ...,
    filetxtaspectratio: Queryable[float] = ...,
    filetxtsizex: Queryable[int] = ...,
    filetxtsizey: Queryable[int] = ...,
    floodOpacity: Queryable[float] = ...,
    floodall: bool = ...,
    floodselect: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    keepaspectratio: bool = ...,
    lastRecorderCmd: Queryable[str] = ...,
    lastStampName: Queryable[str] = ...,
    lowerradius: Queryable[float] = ...,
    makeStroke: Queryable[Multiuse[int]] = ...,
    mappressure: Queryable[str] = ...,
    name: str = ...,
    opacity: Queryable[float] = ...,
    outline: bool = ...,
    outwhilepaint: bool = ...,
    paintmode: Queryable[str] = ...,
    paintoperationtype: Queryable[str] = ...,
    painttxtattr: Queryable[str] = ...,
    painttxtattrname: Queryable[str] = ...,
    pfxScale: Queryable[float] = ...,
    pfxWidth: Queryable[float] = ...,
    pickColor: bool = ...,
    pickValue: bool = ...,
    playbackCursor: Queryable[Multiuse[Tuple[float, float]]] = ...,
    playbackPressure: Queryable[Multiuse[float]] = ...,
    preserveclonesource: bool = ...,
    pressureMapping1: Queryable[int] = ...,
    pressureMapping2: Queryable[int] = ...,
    pressureMapping3: Queryable[int] = ...,
    pressureMax1: Queryable[float] = ...,
    pressureMax2: Queryable[float] = ...,
    pressureMax3: Queryable[float] = ...,
    pressureMin1: Queryable[float] = ...,
    pressureMin2: Queryable[float] = ...,
    pressureMin3: Queryable[float] = ...,
    profileShapeFile: Queryable[str] = ...,
    projective: bool = ...,
    radius: Queryable[float] = ...,
    record: bool = ...,
    reflection: bool = ...,
    reflectionaboutorigin: bool = ...,
    reflectionaxis: Queryable[str] = ...,
    reloadtexfile: bool = ...,
    resizeratio: Queryable[float] = ...,
    resizetxt: bool = ...,
    rgbcolor: Queryable[Tuple[float, float, float]] = ...,
    rgbflood: Queryable[Tuple[float, float, float]] = ...,
    saveTextureOnStroke: bool = ...,
    saveonstroke: bool = ...,
    savetexture: bool = ...,
    screenRadius: Queryable[float] = ...,
    selectclonesource: bool = ...,
    shadernames: Queryable[str] = ...,
    shapeattr: bool = ...,
    shapenames: Queryable[str] = ...,
    showactive: bool = ...,
    soloAsDiffuse: bool = ...,
    stampDepth: Queryable[float] = ...,
    stampProfile: Queryable[str] = ...,
    stampSpacing: Queryable[float] = ...,
    strokesmooth: Queryable[str] = ...,
    surfaceConformedBrushVertices: bool = ...,
    tablet: bool = ...,
    tangentOutline: bool = ...,
    textureFilenames: bool = ...,
    updateEraseTex: bool = ...,
    usepressure: bool = ...,
    worldRadius: Queryable[float] = ...,
) -> Union[
    bool,
    str,
    float,
    int,
    Multiuse[int],
    Multiuse[Tuple[float, float]],
    Multiuse[float],
    Tuple[float, float, float],
]: ...
def artAttr(*args: str) -> None: ...
def artAttrCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    accopacity: bool = ...,
    activeListChangedProc: Queryable[str] = ...,
    afterStrokeCmd: Queryable[str] = ...,
    alphaclamp: Queryable[str] = ...,
    alphaclamplower: Queryable[float] = ...,
    alphaclampupper: Queryable[float] = ...,
    attrSelected: Queryable[str] = ...,
    beforeStrokeCmd: Queryable[str] = ...,
    brushalignment: bool = ...,
    brushfeedback: bool = ...,
    clamp: Queryable[str] = ...,
    clamplower: Queryable[float] = ...,
    clampupper: Queryable[float] = ...,
    clear: bool = ...,
    colorAlphaValue: Queryable[float] = ...,
    colorRGBAValue: Queryable[Tuple[float, float, float, float]] = ...,
    colorRGBValue: Queryable[Tuple[float, float, float]] = ...,
    colorRamp: Queryable[str] = ...,
    colorfeedback: bool = ...,
    colorfeedbackOverride: bool = ...,
    colorrangelower: Queryable[float] = ...,
    colorrangeupper: Queryable[float] = ...,
    dataTypeIndex: Queryable[int] = ...,
    disablelighting: bool = ...,
    dragSlider: str = ...,
    duringStrokeCmd: Queryable[str] = ...,
    dynclonemode: bool = ...,
    exists: bool = ...,
    expandfilename: bool = ...,
    exportaspectratio: Queryable[float] = ...,
    exportfilemode: Queryable[str] = ...,
    exportfilesave: str = ...,
    exportfilesizex: Queryable[int] = ...,
    exportfilesizey: Queryable[int] = ...,
    exportfiletype: Queryable[str] = ...,
    filterNodes: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    importfileload: str = ...,
    importfilemode: Queryable[str] = ...,
    importreassign: bool = ...,
    interactiveUpdate: bool = ...,
    lastRecorderCmd: Queryable[str] = ...,
    lastStampName: Queryable[str] = ...,
    lowerradius: Queryable[float] = ...,
    makeStroke: Queryable[Multiuse[int]] = ...,
    mappressure: Queryable[str] = ...,
    maxvalue: Queryable[float] = ...,
    minvalue: Queryable[float] = ...,
    name: str = ...,
    numericColorRamp: Queryable[str] = ...,
    numericDisplayColor: Queryable[Tuple[float, float, float]] = ...,
    numericDisplayPrecision: Queryable[int] = ...,
    numericMaxColor: Queryable[Tuple[float, float, float]] = ...,
    numericMinColor: Queryable[Tuple[float, float, float]] = ...,
    objattrArray: Queryable[str] = ...,
    objattrArrayNoMenu: Queryable[str] = ...,
    opacity: Queryable[float] = ...,
    outline: bool = ...,
    outwhilepaint: bool = ...,
    paintNodeArray: Queryable[str] = ...,
    paintattrselected: str = ...,
    paintmode: Queryable[str] = ...,
    paintoperationtype: Queryable[str] = ...,
    pickColor: bool = ...,
    pickValue: bool = ...,
    playbackCursor: Queryable[Multiuse[Tuple[float, float]]] = ...,
    playbackPressure: Queryable[Multiuse[float]] = ...,
    preserveclonesource: bool = ...,
    profileShapeFile: Queryable[str] = ...,
    projective: bool = ...,
    radius: Queryable[float] = ...,
    rampMaxColor: Queryable[Tuple[float, float, float]] = ...,
    rampMinColor: Queryable[Tuple[float, float, float]] = ...,
    record: bool = ...,
    reflection: bool = ...,
    reflectionaboutorigin: bool = ...,
    reflectionaxis: Queryable[str] = ...,
    screenRadius: Queryable[float] = ...,
    selectclonesource: bool = ...,
    selectedattroper: Queryable[str] = ...,
    showactive: bool = ...,
    stampDepth: Queryable[float] = ...,
    stampProfile: Queryable[str] = ...,
    stampSpacing: Queryable[float] = ...,
    strokesmooth: Queryable[str] = ...,
    surfaceConformedBrushVertices: bool = ...,
    tablet: bool = ...,
    tangentOutline: bool = ...,
    toolOffProc: Queryable[str] = ...,
    toolOnProc: Queryable[str] = ...,
    useColorRamp: bool = ...,
    useMaxMinColor: bool = ...,
    useNumericColorRamp: bool = ...,
    useNumericDisplay: bool = ...,
    usepressure: bool = ...,
    value: Queryable[float] = ...,
    whichTool: Queryable[str] = ...,
    worldRadius: Queryable[float] = ...,
) -> Union[
    str,
    bool,
    float,
    Tuple[float, float, float, float],
    Tuple[float, float, float],
    int,
    Multiuse[int],
    Multiuse[Tuple[float, float]],
    Multiuse[float],
]: ...
def artAttrPaintVertexCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    accopacity: bool = ...,
    activeListChangedProc: Queryable[str] = ...,
    afterStrokeCmd: Queryable[str] = ...,
    alphaclamp: Queryable[str] = ...,
    alphaclamplower: Queryable[float] = ...,
    alphaclampupper: Queryable[float] = ...,
    attrSelected: Queryable[str] = ...,
    beforeStrokeCmd: Queryable[str] = ...,
    brushalignment: bool = ...,
    brushfeedback: bool = ...,
    clamp: Queryable[str] = ...,
    clamplower: Queryable[float] = ...,
    clampupper: Queryable[float] = ...,
    clear: bool = ...,
    colorAlphaValue: Queryable[float] = ...,
    colorRGBAValue: Queryable[Tuple[float, float, float, float]] = ...,
    colorRGBValue: Queryable[Tuple[float, float, float]] = ...,
    colorRamp: Queryable[str] = ...,
    colorfeedback: bool = ...,
    colorfeedbackOverride: bool = ...,
    colorrangelower: Queryable[float] = ...,
    colorrangeupper: Queryable[float] = ...,
    dataTypeIndex: Queryable[int] = ...,
    disablelighting: bool = ...,
    dragSlider: str = ...,
    duringStrokeCmd: Queryable[str] = ...,
    dynclonemode: bool = ...,
    exists: bool = ...,
    expandfilename: bool = ...,
    exportaspectratio: Queryable[float] = ...,
    exportfilemode: Queryable[str] = ...,
    exportfilesave: str = ...,
    exportfilesizex: Queryable[int] = ...,
    exportfilesizey: Queryable[int] = ...,
    exportfiletype: Queryable[str] = ...,
    filterNodes: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    importfileload: str = ...,
    importfilemode: Queryable[str] = ...,
    importreassign: bool = ...,
    interactiveUpdate: bool = ...,
    lastRecorderCmd: Queryable[str] = ...,
    lastStampName: Queryable[str] = ...,
    lowerradius: Queryable[float] = ...,
    makeStroke: Queryable[Multiuse[int]] = ...,
    mappressure: Queryable[str] = ...,
    maxvalue: Queryable[float] = ...,
    minvalue: Queryable[float] = ...,
    name: str = ...,
    numericColorRamp: Queryable[str] = ...,
    numericDisplayColor: Queryable[Tuple[float, float, float]] = ...,
    numericDisplayPrecision: Queryable[int] = ...,
    numericMaxColor: Queryable[Tuple[float, float, float]] = ...,
    numericMinColor: Queryable[Tuple[float, float, float]] = ...,
    objattrArray: Queryable[str] = ...,
    objattrArrayNoMenu: Queryable[str] = ...,
    opacity: Queryable[float] = ...,
    outline: bool = ...,
    outwhilepaint: bool = ...,
    paintChannel: Queryable[str] = ...,
    paintComponent: Queryable[int] = ...,
    paintNodeArray: Queryable[str] = ...,
    paintNumChannels: Queryable[int] = ...,
    paintRGBA: bool = ...,
    paintVertexFace: bool = ...,
    paintattrselected: str = ...,
    paintmode: Queryable[str] = ...,
    paintoperationtype: Queryable[str] = ...,
    pickColor: bool = ...,
    pickValue: bool = ...,
    playbackCursor: Queryable[Multiuse[Tuple[float, float]]] = ...,
    playbackPressure: Queryable[Multiuse[float]] = ...,
    preserveclonesource: bool = ...,
    profileShapeFile: Queryable[str] = ...,
    projective: bool = ...,
    radius: Queryable[float] = ...,
    rampMaxColor: Queryable[Tuple[float, float, float]] = ...,
    rampMinColor: Queryable[Tuple[float, float, float]] = ...,
    record: bool = ...,
    reflection: bool = ...,
    reflectionaboutorigin: bool = ...,
    reflectionaxis: Queryable[str] = ...,
    screenRadius: Queryable[float] = ...,
    selectclonesource: bool = ...,
    selectedattroper: Queryable[str] = ...,
    showactive: bool = ...,
    stampDepth: Queryable[float] = ...,
    stampProfile: Queryable[str] = ...,
    stampSpacing: Queryable[float] = ...,
    strokesmooth: Queryable[str] = ...,
    surfaceConformedBrushVertices: bool = ...,
    tablet: bool = ...,
    tangentOutline: bool = ...,
    toolOffProc: Queryable[str] = ...,
    toolOnProc: Queryable[str] = ...,
    useColorRamp: bool = ...,
    useMaxMinColor: bool = ...,
    useNumericColorRamp: bool = ...,
    useNumericDisplay: bool = ...,
    usepressure: bool = ...,
    value: Queryable[float] = ...,
    vertexColorRange: bool = ...,
    vertexColorRangeLower: Queryable[float] = ...,
    vertexColorRangeUpper: Queryable[float] = ...,
    whichTool: Queryable[str] = ...,
    worldRadius: Queryable[float] = ...,
) -> Union[
    bool,
    str,
    float,
    Tuple[float, float, float, float],
    Tuple[float, float, float],
    int,
    Multiuse[int],
    Multiuse[Tuple[float, float]],
    Multiuse[float],
]: ...
def artAttrSkinPaint(*args: str) -> None: ...
def artAttrSkinPaintCmd(*args: Any, **kwargs: Any) -> None: ...
def artAttrSkinPaintCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    accopacity: bool = ...,
    activeListChangedProc: Queryable[str] = ...,
    afterStrokeCmd: Queryable[str] = ...,
    alphaclamp: Queryable[str] = ...,
    alphaclamplower: Queryable[float] = ...,
    alphaclampupper: Queryable[float] = ...,
    attrSelected: Queryable[str] = ...,
    beforeStrokeCmd: Queryable[str] = ...,
    brushalignment: bool = ...,
    brushfeedback: bool = ...,
    clamp: Queryable[str] = ...,
    clamplower: Queryable[float] = ...,
    clampupper: Queryable[float] = ...,
    clear: bool = ...,
    colorAlphaValue: Queryable[float] = ...,
    colorRGBAValue: Queryable[Tuple[float, float, float, float]] = ...,
    colorRGBValue: Queryable[Tuple[float, float, float]] = ...,
    colorRamp: Queryable[str] = ...,
    colorfeedback: bool = ...,
    colorfeedbackOverride: bool = ...,
    colorrangelower: Queryable[float] = ...,
    colorrangeupper: Queryable[float] = ...,
    dataTypeIndex: Queryable[int] = ...,
    disablelighting: bool = ...,
    dragSlider: str = ...,
    duringStrokeCmd: Queryable[str] = ...,
    dynclonemode: bool = ...,
    exists: bool = ...,
    expandfilename: bool = ...,
    exportaspectratio: Queryable[float] = ...,
    exportfilemode: Queryable[str] = ...,
    exportfilesave: str = ...,
    exportfilesizex: Queryable[int] = ...,
    exportfilesizey: Queryable[int] = ...,
    exportfiletype: Queryable[str] = ...,
    filterNodes: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    importfileload: str = ...,
    importfilemode: Queryable[str] = ...,
    importreassign: bool = ...,
    influence: Queryable[str] = ...,
    interactiveUpdate: bool = ...,
    lastRecorderCmd: Queryable[str] = ...,
    lastStampName: Queryable[str] = ...,
    lowerradius: Queryable[float] = ...,
    makeStroke: Queryable[Multiuse[int]] = ...,
    mappressure: Queryable[str] = ...,
    maxvalue: Queryable[float] = ...,
    minvalue: Queryable[float] = ...,
    name: str = ...,
    numericColorRamp: Queryable[str] = ...,
    numericDisplayColor: Queryable[Tuple[float, float, float]] = ...,
    numericDisplayPrecision: Queryable[int] = ...,
    numericMaxColor: Queryable[Tuple[float, float, float]] = ...,
    numericMinColor: Queryable[Tuple[float, float, float]] = ...,
    objattrArray: Queryable[str] = ...,
    objattrArrayNoMenu: Queryable[str] = ...,
    opacity: Queryable[float] = ...,
    outline: bool = ...,
    outwhilepaint: bool = ...,
    paintNodeArray: Queryable[str] = ...,
    paintSelectMode: Queryable[int] = ...,
    paintattrselected: str = ...,
    paintmode: Queryable[str] = ...,
    paintoperationtype: Queryable[str] = ...,
    pickColor: bool = ...,
    pickValue: bool = ...,
    playbackCursor: Queryable[Multiuse[Tuple[float, float]]] = ...,
    playbackPressure: Queryable[Multiuse[float]] = ...,
    preserveclonesource: bool = ...,
    profileShapeFile: Queryable[str] = ...,
    projective: bool = ...,
    radius: Queryable[float] = ...,
    rampMaxColor: Queryable[Tuple[float, float, float]] = ...,
    rampMinColor: Queryable[Tuple[float, float, float]] = ...,
    record: bool = ...,
    reflection: bool = ...,
    reflectionaboutorigin: bool = ...,
    reflectionaxis: Queryable[str] = ...,
    screenRadius: Queryable[float] = ...,
    selectclonesource: bool = ...,
    selectedattroper: Queryable[str] = ...,
    showactive: bool = ...,
    skinPaintMode: Queryable[int] = ...,
    stampDepth: Queryable[float] = ...,
    stampProfile: Queryable[str] = ...,
    stampSpacing: Queryable[float] = ...,
    strokesmooth: Queryable[str] = ...,
    surfaceConformedBrushVertices: bool = ...,
    tablet: bool = ...,
    tangentOutline: bool = ...,
    toolOffProc: Queryable[str] = ...,
    toolOnProc: Queryable[str] = ...,
    useColorRamp: bool = ...,
    useMaxMinColor: bool = ...,
    useNumericColorRamp: bool = ...,
    useNumericDisplay: bool = ...,
    usepressure: bool = ...,
    value: Queryable[float] = ...,
    whichTool: Queryable[str] = ...,
    worldRadius: Queryable[float] = ...,
    xrayJoints: bool = ...,
) -> Union[
    bool,
    str,
    float,
    Tuple[float, float, float, float],
    Tuple[float, float, float],
    int,
    Multiuse[int],
    Multiuse[Tuple[float, float]],
    Multiuse[float],
]: ...
def artAttrTool(
    *,
    query: bool = ...,
    add: str = ...,
    exists: Queryable[str] = ...,
    remove: str = ...,
) -> Union[bool, str]: ...
def artBaseCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    accopacity: bool = ...,
    afterStrokeCmd: str = ...,
    brushalignment: bool = ...,
    brushfeedback: bool = ...,
    beforeStrokeCmd: str = ...,
    history: bool = ...,
    clear: bool = ...,
    dynclonemode: bool = ...,
    dragSlider: str = ...,
    exportaspectratio: float = ...,
    expandfilename: bool = ...,
    exportfilemode: str = ...,
    exportfiletype: str = ...,
    exportfilesave: str = ...,
    exists: bool = ...,
    exportfilesizex: int = ...,
    exportfilesizey: int = ...,
    image1: str = ...,
    image2: str = ...,
    image3: str = ...,
    importfileload: str = ...,
    importfilemode: str = ...,
    importreassign: bool = ...,
    lowerradius: float = ...,
    lastRecorderCmd: str = ...,
    lastStampName: str = ...,
    mappressure: str = ...,
    makeStroke: Multiuse[int] = ...,
    name: str = ...,
    outline: bool = ...,
    opacity: float = ...,
    outwhilepaint: bool = ...,
    pickColor: bool = ...,
    preserveclonesource: bool = ...,
    playbackCursor: Multiuse[Tuple[float, float]] = ...,
    playbackPressure: Multiuse[float] = ...,
    paintmode: str = ...,
    paintoperationtype: str = ...,
    projective: bool = ...,
    profileShapeFile: str = ...,
    pickValue: bool = ...,
    radius: float = ...,
    reflectionaxis: str = ...,
    record: bool = ...,
    reflection: bool = ...,
    reflectionaboutorigin: bool = ...,
    showactive: bool = ...,
    screenRadius: float = ...,
    selectclonesource: bool = ...,
    surfaceConformedBrushVertices: bool = ...,
    strokesmooth: str = ...,
    stampDepth: float = ...,
    stampProfile: str = ...,
    stampSpacing: float = ...,
    tablet: bool = ...,
    tangentOutline: bool = ...,
    usepressure: bool = ...,
    worldRadius: float = ...,
) -> None: ...
def artBuildPaintMenu(*args: str) -> bool: ...
def artFluidAttr(*args: str) -> None: ...
def artFluidAttrCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    accopacity: bool = ...,
    activeListChangedProc: Queryable[str] = ...,
    afterStrokeCmd: Queryable[str] = ...,
    alphaclamp: Queryable[str] = ...,
    alphaclamplower: Queryable[float] = ...,
    alphaclampupper: Queryable[float] = ...,
    attrSelected: Queryable[str] = ...,
    autoSave: Queryable[str] = ...,
    beforeStrokeCmd: Queryable[str] = ...,
    brushalignment: bool = ...,
    brushfeedback: bool = ...,
    clamp: Queryable[str] = ...,
    clamplower: Queryable[float] = ...,
    clampupper: Queryable[float] = ...,
    clear: bool = ...,
    colorAlphaValue: Queryable[float] = ...,
    colorRGBAValue: Queryable[Tuple[float, float, float, float]] = ...,
    colorRGBValue: Queryable[Tuple[float, float, float]] = ...,
    colorRamp: Queryable[str] = ...,
    colorfeedback: bool = ...,
    colorfeedbackOverride: bool = ...,
    colorrangelower: Queryable[float] = ...,
    colorrangeupper: Queryable[float] = ...,
    currentPaintableFluid: Queryable[str] = ...,
    dataTypeIndex: Queryable[int] = ...,
    delaySelectionChanged: bool = ...,
    disablelighting: bool = ...,
    displayAsRender: bool = ...,
    displayVelocity: bool = ...,
    doAutoSave: bool = ...,
    dragSlider: str = ...,
    duringStrokeCmd: Queryable[str] = ...,
    dynclonemode: bool = ...,
    exists: bool = ...,
    expandfilename: bool = ...,
    exportaspectratio: Queryable[float] = ...,
    exportfilemode: Queryable[str] = ...,
    exportfilesave: str = ...,
    exportfilesizex: Queryable[int] = ...,
    exportfilesizey: Queryable[int] = ...,
    exportfiletype: Queryable[str] = ...,
    filterNodes: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    importfileload: str = ...,
    importfilemode: Queryable[str] = ...,
    importreassign: bool = ...,
    interactiveUpdate: bool = ...,
    lastRecorderCmd: Queryable[str] = ...,
    lastStampName: Queryable[str] = ...,
    lowerradius: Queryable[float] = ...,
    makeStroke: Queryable[Multiuse[int]] = ...,
    mappressure: Queryable[str] = ...,
    maxvalue: Queryable[float] = ...,
    minvalue: Queryable[float] = ...,
    name: str = ...,
    numericColorRamp: Queryable[str] = ...,
    numericDisplayColor: Queryable[Tuple[float, float, float]] = ...,
    numericDisplayPrecision: Queryable[int] = ...,
    numericMaxColor: Queryable[Tuple[float, float, float]] = ...,
    numericMinColor: Queryable[Tuple[float, float, float]] = ...,
    objattrArray: Queryable[str] = ...,
    objattrArrayNoMenu: Queryable[str] = ...,
    opacity: Queryable[float] = ...,
    outline: bool = ...,
    outwhilepaint: bool = ...,
    paintNodeArray: Queryable[str] = ...,
    paintattrselected: str = ...,
    paintmode: Queryable[str] = ...,
    paintoperationtype: Queryable[str] = ...,
    pickColor: bool = ...,
    pickValue: bool = ...,
    playbackCursor: Queryable[Multiuse[Tuple[float, float]]] = ...,
    playbackPressure: Queryable[Multiuse[float]] = ...,
    preserveclonesource: bool = ...,
    profileShapeFile: Queryable[str] = ...,
    projective: bool = ...,
    property: Queryable[str] = ...,
    radius: Queryable[float] = ...,
    rampMaxColor: Queryable[Tuple[float, float, float]] = ...,
    rampMinColor: Queryable[Tuple[float, float, float]] = ...,
    record: bool = ...,
    reflection: bool = ...,
    reflectionaboutorigin: bool = ...,
    reflectionaxis: Queryable[str] = ...,
    rgbValue: Queryable[Tuple[float, float, float]] = ...,
    screenRadius: Queryable[float] = ...,
    selectclonesource: bool = ...,
    selectedattroper: Queryable[str] = ...,
    showactive: bool = ...,
    stampDepth: Queryable[float] = ...,
    stampProfile: Queryable[str] = ...,
    stampSpacing: Queryable[float] = ...,
    strokesmooth: Queryable[str] = ...,
    surfaceConformedBrushVertices: bool = ...,
    tablet: bool = ...,
    tangentOutline: bool = ...,
    toolOffProc: Queryable[str] = ...,
    toolOnProc: Queryable[str] = ...,
    useColorRamp: bool = ...,
    useMaxMinColor: bool = ...,
    useNumericColorRamp: bool = ...,
    useNumericDisplay: bool = ...,
    useStrokeDirection: bool = ...,
    usepressure: bool = ...,
    value: Queryable[float] = ...,
    velocity: Queryable[Tuple[float, float, float]] = ...,
    whichTool: Queryable[str] = ...,
    worldRadius: Queryable[float] = ...,
) -> Union[
    bool,
    str,
    float,
    Tuple[float, float, float, float],
    Tuple[float, float, float],
    int,
    Multiuse[int],
    Multiuse[Tuple[float, float]],
    Multiuse[float],
]: ...
def artPuttyCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    accopacity: bool = ...,
    activeListChangedProc: Queryable[str] = ...,
    afterStrokeCmd: Queryable[str] = ...,
    alphaclamp: Queryable[str] = ...,
    alphaclamplower: Queryable[float] = ...,
    alphaclampupper: Queryable[float] = ...,
    attrSelected: Queryable[str] = ...,
    autosmooth: bool = ...,
    beforeStrokeCmd: Queryable[str] = ...,
    brushStrength: Queryable[float] = ...,
    brushalignment: bool = ...,
    brushfeedback: bool = ...,
    clamp: Queryable[str] = ...,
    clamplower: Queryable[float] = ...,
    clampupper: Queryable[float] = ...,
    clear: bool = ...,
    collapsecvtol: Queryable[float] = ...,
    colorAlphaValue: Queryable[float] = ...,
    colorRGBAValue: Queryable[Tuple[float, float, float, float]] = ...,
    colorRGBValue: Queryable[Tuple[float, float, float]] = ...,
    colorRamp: Queryable[str] = ...,
    colorfeedback: bool = ...,
    colorfeedbackOverride: bool = ...,
    colorrangelower: Queryable[float] = ...,
    colorrangeupper: Queryable[float] = ...,
    dataTypeIndex: Queryable[int] = ...,
    disablelighting: bool = ...,
    dispdecr: bool = ...,
    dispincr: bool = ...,
    dragSlider: str = ...,
    duringStrokeCmd: Queryable[str] = ...,
    dynclonemode: bool = ...,
    erasesrfupd: bool = ...,
    exists: bool = ...,
    expandfilename: bool = ...,
    exportaspectratio: Queryable[float] = ...,
    exportfilemode: Queryable[str] = ...,
    exportfilesave: str = ...,
    exportfilesizex: Queryable[int] = ...,
    exportfilesizey: Queryable[int] = ...,
    exportfiletype: Queryable[str] = ...,
    filterNodes: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    importfileload: str = ...,
    importfilemode: Queryable[str] = ...,
    importreassign: bool = ...,
    interactiveUpdate: bool = ...,
    invertrefvector: bool = ...,
    lastRecorderCmd: Queryable[str] = ...,
    lastStampName: Queryable[str] = ...,
    lowerradius: Queryable[float] = ...,
    makeStroke: Queryable[Multiuse[int]] = ...,
    mappressure: Queryable[str] = ...,
    maxdisp: Queryable[float] = ...,
    maxvalue: Queryable[float] = ...,
    minvalue: Queryable[float] = ...,
    mouldtypehead: Queryable[str] = ...,
    mouldtypemouse: Queryable[str] = ...,
    mouldtypetail: Queryable[str] = ...,
    name: str = ...,
    numericColorRamp: Queryable[str] = ...,
    numericDisplayColor: Queryable[Tuple[float, float, float]] = ...,
    numericDisplayPrecision: Queryable[int] = ...,
    numericMaxColor: Queryable[Tuple[float, float, float]] = ...,
    numericMinColor: Queryable[Tuple[float, float, float]] = ...,
    objattrArray: Queryable[str] = ...,
    objattrArrayNoMenu: Queryable[str] = ...,
    opacity: Queryable[float] = ...,
    outline: bool = ...,
    outwhilepaint: bool = ...,
    paintNodeArray: Queryable[str] = ...,
    paintattrselected: str = ...,
    paintmode: Queryable[str] = ...,
    paintoperationtype: Queryable[str] = ...,
    pickColor: bool = ...,
    pickValue: bool = ...,
    playbackCursor: Queryable[Multiuse[Tuple[float, float]]] = ...,
    playbackPressure: Queryable[Multiuse[float]] = ...,
    polecv: bool = ...,
    preserveclonesource: bool = ...,
    profileShapeFile: Queryable[str] = ...,
    projective: bool = ...,
    radius: Queryable[float] = ...,
    rampMaxColor: Queryable[Tuple[float, float, float]] = ...,
    rampMinColor: Queryable[Tuple[float, float, float]] = ...,
    record: bool = ...,
    reflection: bool = ...,
    reflectionaboutorigin: bool = ...,
    reflectionaxis: Queryable[str] = ...,
    refsurface: bool = ...,
    refvector: Queryable[str] = ...,
    refvectoru: Queryable[float] = ...,
    refvectorv: Queryable[float] = ...,
    screenRadius: Queryable[float] = ...,
    selectclonesource: bool = ...,
    selectedattroper: Queryable[str] = ...,
    showactive: bool = ...,
    smoothiters: Queryable[int] = ...,
    stampDepth: Queryable[float] = ...,
    stampProfile: Queryable[str] = ...,
    stampSpacing: Queryable[float] = ...,
    stitchcorner: bool = ...,
    stitchedgeflood: bool = ...,
    stitchtype: Queryable[str] = ...,
    strokesmooth: Queryable[str] = ...,
    surfaceConformedBrushVertices: bool = ...,
    tablet: bool = ...,
    tangentOutline: bool = ...,
    toolOffProc: Queryable[str] = ...,
    toolOnProc: Queryable[str] = ...,
    updateerasesrf: bool = ...,
    updaterefsrf: bool = ...,
    useColorRamp: bool = ...,
    useMaxMinColor: bool = ...,
    useNumericColorRamp: bool = ...,
    useNumericDisplay: bool = ...,
    usepressure: bool = ...,
    value: Queryable[float] = ...,
    whichTool: Queryable[str] = ...,
    worldRadius: Queryable[float] = ...,
) -> Union[
    bool,
    str,
    float,
    Tuple[float, float, float, float],
    Tuple[float, float, float],
    int,
    Multiuse[int],
    Multiuse[Tuple[float, float]],
    Multiuse[float],
]: ...
def artSelect(*args: str) -> None: ...
def artSelectCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    accopacity: bool = ...,
    addselection: bool = ...,
    afterStrokeCmd: Queryable[str] = ...,
    beforeStrokeCmd: Queryable[str] = ...,
    brushalignment: bool = ...,
    brushfeedback: bool = ...,
    clear: bool = ...,
    dragSlider: str = ...,
    dynclonemode: bool = ...,
    exists: bool = ...,
    expandfilename: bool = ...,
    exportaspectratio: Queryable[float] = ...,
    exportfilemode: Queryable[str] = ...,
    exportfilesave: str = ...,
    exportfilesizex: Queryable[int] = ...,
    exportfilesizey: Queryable[int] = ...,
    exportfiletype: Queryable[str] = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    importfileload: str = ...,
    importfilemode: Queryable[str] = ...,
    importreassign: bool = ...,
    importthreshold: Queryable[float] = ...,
    lastRecorderCmd: Queryable[str] = ...,
    lastStampName: Queryable[str] = ...,
    lowerradius: Queryable[float] = ...,
    makeStroke: Queryable[Multiuse[int]] = ...,
    mappressure: Queryable[str] = ...,
    name: str = ...,
    opacity: Queryable[float] = ...,
    outline: bool = ...,
    outwhilepaint: bool = ...,
    paintmode: Queryable[str] = ...,
    paintoperationtype: Queryable[str] = ...,
    pickColor: bool = ...,
    pickValue: bool = ...,
    playbackCursor: Queryable[Multiuse[Tuple[float, float]]] = ...,
    playbackPressure: Queryable[Multiuse[float]] = ...,
    preserveclonesource: bool = ...,
    profileShapeFile: Queryable[str] = ...,
    projective: bool = ...,
    radius: Queryable[float] = ...,
    record: bool = ...,
    reflection: bool = ...,
    reflectionaboutorigin: bool = ...,
    reflectionaxis: Queryable[str] = ...,
    screenRadius: Queryable[float] = ...,
    selectall: bool = ...,
    selectclonesource: bool = ...,
    selectop: Queryable[str] = ...,
    showactive: bool = ...,
    stampDepth: Queryable[float] = ...,
    stampProfile: Queryable[str] = ...,
    stampSpacing: Queryable[float] = ...,
    strokesmooth: Queryable[str] = ...,
    surfaceConformedBrushVertices: bool = ...,
    tablet: bool = ...,
    tangentOutline: bool = ...,
    toggleall: bool = ...,
    unselectall: bool = ...,
    usepressure: bool = ...,
    worldRadius: Queryable[float] = ...,
) -> Union[
    bool, str, float, int, Multiuse[int], Multiuse[Tuple[float, float]], Multiuse[float]
]: ...
def artSetPaint(*args: str) -> None: ...
def artSetPaintCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    accopacity: bool = ...,
    afterStrokeCmd: Queryable[str] = ...,
    beforeStrokeCmd: Queryable[str] = ...,
    brushalignment: bool = ...,
    brushfeedback: bool = ...,
    clear: bool = ...,
    dragSlider: str = ...,
    dynclonemode: bool = ...,
    exists: bool = ...,
    expandfilename: bool = ...,
    exportaspectratio: Queryable[float] = ...,
    exportfilemode: Queryable[str] = ...,
    exportfilesave: str = ...,
    exportfilesizex: Queryable[int] = ...,
    exportfilesizey: Queryable[int] = ...,
    exportfiletype: Queryable[str] = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    importfileload: str = ...,
    importfilemode: Queryable[str] = ...,
    importreassign: bool = ...,
    lastRecorderCmd: Queryable[str] = ...,
    lastStampName: Queryable[str] = ...,
    lowerradius: Queryable[float] = ...,
    makeStroke: Queryable[Multiuse[int]] = ...,
    mappressure: Queryable[str] = ...,
    name: str = ...,
    objectsetnames: Queryable[str] = ...,
    opacity: Queryable[float] = ...,
    outline: bool = ...,
    outwhilepaint: bool = ...,
    paintmode: Queryable[str] = ...,
    paintoperationtype: Queryable[str] = ...,
    pickColor: bool = ...,
    pickValue: bool = ...,
    playbackCursor: Queryable[Multiuse[Tuple[float, float]]] = ...,
    playbackPressure: Queryable[Multiuse[float]] = ...,
    preserveclonesource: bool = ...,
    profileShapeFile: Queryable[str] = ...,
    projective: bool = ...,
    radius: Queryable[float] = ...,
    record: bool = ...,
    reflection: bool = ...,
    reflectionaboutorigin: bool = ...,
    reflectionaxis: Queryable[str] = ...,
    screenRadius: Queryable[float] = ...,
    selectclonesource: bool = ...,
    setcolorfeedback: bool = ...,
    setdisplaycvs: bool = ...,
    setopertype: Queryable[str] = ...,
    settomodify: Queryable[str] = ...,
    showactive: bool = ...,
    stampDepth: Queryable[float] = ...,
    stampProfile: Queryable[str] = ...,
    stampSpacing: Queryable[float] = ...,
    strokesmooth: Queryable[str] = ...,
    surfaceConformedBrushVertices: bool = ...,
    tablet: bool = ...,
    tangentOutline: bool = ...,
    usepressure: bool = ...,
    worldRadius: Queryable[float] = ...,
) -> Union[
    bool, str, float, int, Multiuse[int], Multiuse[Tuple[float, float]], Multiuse[float]
]: ...
def artUserPaintCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    accopacity: bool = ...,
    activeListChangedProc: Queryable[str] = ...,
    afterStrokeCmd: Queryable[str] = ...,
    alphaclamp: Queryable[str] = ...,
    alphaclamplower: Queryable[float] = ...,
    alphaclampupper: Queryable[float] = ...,
    attrSelected: Queryable[str] = ...,
    beforeStrokeCmd: Queryable[str] = ...,
    brushalignment: bool = ...,
    brushfeedback: bool = ...,
    chunkCommand: Queryable[str] = ...,
    clamp: Queryable[str] = ...,
    clamplower: Queryable[float] = ...,
    clampupper: Queryable[float] = ...,
    clear: bool = ...,
    colorAlphaValue: Queryable[float] = ...,
    colorRGBAValue: Queryable[Tuple[float, float, float, float]] = ...,
    colorRGBValue: Queryable[Tuple[float, float, float]] = ...,
    colorRamp: Queryable[str] = ...,
    colorfeedback: bool = ...,
    colorfeedbackOverride: bool = ...,
    colorrangelower: Queryable[float] = ...,
    colorrangeupper: Queryable[float] = ...,
    dataTypeIndex: Queryable[int] = ...,
    disablelighting: bool = ...,
    dragSlider: str = ...,
    duringStrokeCmd: Queryable[str] = ...,
    dynclonemode: bool = ...,
    exists: bool = ...,
    expandfilename: bool = ...,
    exportaspectratio: Queryable[float] = ...,
    exportfilemode: Queryable[str] = ...,
    exportfilesave: str = ...,
    exportfilesizex: Queryable[int] = ...,
    exportfilesizey: Queryable[int] = ...,
    exportfiletype: Queryable[str] = ...,
    filterNodes: bool = ...,
    finalizeCmd: Queryable[str] = ...,
    fullpaths: bool = ...,
    getArrayAttrCommand: Queryable[str] = ...,
    getSurfaceCommand: Queryable[str] = ...,
    getValueCommand: Queryable[str] = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    importfileload: str = ...,
    importfilemode: Queryable[str] = ...,
    importreassign: bool = ...,
    initializeCmd: Queryable[str] = ...,
    interactiveUpdate: bool = ...,
    lastRecorderCmd: Queryable[str] = ...,
    lastStampName: Queryable[str] = ...,
    lowerradius: Queryable[float] = ...,
    makeStroke: Queryable[Multiuse[int]] = ...,
    mappressure: Queryable[str] = ...,
    maxvalue: Queryable[float] = ...,
    minvalue: Queryable[float] = ...,
    name: str = ...,
    numericColorRamp: Queryable[str] = ...,
    numericDisplayColor: Queryable[Tuple[float, float, float]] = ...,
    numericDisplayPrecision: Queryable[int] = ...,
    numericMaxColor: Queryable[Tuple[float, float, float]] = ...,
    numericMinColor: Queryable[Tuple[float, float, float]] = ...,
    objattrArray: Queryable[str] = ...,
    objattrArrayNoMenu: Queryable[str] = ...,
    opacity: Queryable[float] = ...,
    outline: bool = ...,
    outwhilepaint: bool = ...,
    paintNodeArray: Queryable[str] = ...,
    paintattrselected: str = ...,
    paintmode: Queryable[str] = ...,
    paintoperationtype: Queryable[str] = ...,
    pickColor: bool = ...,
    pickValue: bool = ...,
    playbackCursor: Queryable[Multiuse[Tuple[float, float]]] = ...,
    playbackPressure: Queryable[Multiuse[float]] = ...,
    preserveclonesource: bool = ...,
    profileShapeFile: Queryable[str] = ...,
    projective: bool = ...,
    radius: Queryable[float] = ...,
    rampMaxColor: Queryable[Tuple[float, float, float]] = ...,
    rampMinColor: Queryable[Tuple[float, float, float]] = ...,
    record: bool = ...,
    reflection: bool = ...,
    reflectionaboutorigin: bool = ...,
    reflectionaxis: Queryable[str] = ...,
    screenRadius: Queryable[float] = ...,
    selectclonesource: bool = ...,
    selectedattroper: Queryable[str] = ...,
    setArrayValueCommand: Queryable[str] = ...,
    setValueCommand: Queryable[str] = ...,
    showactive: bool = ...,
    stampDepth: Queryable[float] = ...,
    stampProfile: Queryable[str] = ...,
    stampSpacing: Queryable[float] = ...,
    strokesmooth: Queryable[str] = ...,
    surfaceConformedBrushVertices: bool = ...,
    tablet: bool = ...,
    tangentOutline: bool = ...,
    toolCleanupCmd: Queryable[str] = ...,
    toolOffProc: Queryable[str] = ...,
    toolOnProc: Queryable[str] = ...,
    toolSetupCmd: Queryable[str] = ...,
    useColorRamp: bool = ...,
    useMaxMinColor: bool = ...,
    useNumericColorRamp: bool = ...,
    useNumericDisplay: bool = ...,
    usepressure: bool = ...,
    value: Queryable[float] = ...,
    whichTool: Queryable[str] = ...,
    worldRadius: Queryable[float] = ...,
) -> Union[
    str,
    bool,
    float,
    Tuple[float, float, float, float],
    Tuple[float, float, float],
    int,
    Multiuse[int],
    Multiuse[Tuple[float, float]],
    Multiuse[float],
]: ...
def arubaNurbsToPoly(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    localSpace: bool = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
    object: bool = ...,
    worldSpace: bool = ...,
) -> Union[List[str], bool, int]: ...
def assembly(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    active: Queryable[str] = ...,
    activeLabel: Queryable[str] = ...,
    canCreate: Queryable[str] = ...,
    createOptionBoxProc: Queryable[Callable[..., Any]] = ...,
    createRepresentation: str = ...,
    defaultType: Queryable[str] = ...,
    deleteRepresentation: str = ...,
    deregister: str = ...,
    input: str = ...,
    isAType: Queryable[str] = ...,
    isTrackingMemberEdits: Queryable[str] = ...,
    label: Queryable[str] = ...,
    listRepTypes: bool = ...,
    listRepTypesProc: Queryable[Callable[..., Any]] = ...,
    listRepresentations: bool = ...,
    listTypes: bool = ...,
    name: str = ...,
    newRepLabel: str = ...,
    postCreateUIProc: Queryable[Callable[..., Any]] = ...,
    proc: Callable[..., Any] = ...,
    renameRepresentation: str = ...,
    repLabel: str = ...,
    repName: str = ...,
    repNamespace: Queryable[str] = ...,
    repPostCreateUIProc: str = ...,
    repPreCreateUIProc: str = ...,
    repType: str = ...,
    repTypeLabel: str = ...,
    repTypeLabelProc: Queryable[Callable[..., Any]] = ...,
    type: str = ...,
) -> Union[bool, str, Callable[..., Any]]: ...
def assignCommand(
    arg0: int = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    addDivider: str = ...,
    altModifier: bool = ...,
    annotation: Queryable[str] = ...,
    command: Queryable[Callable[..., Any]] = ...,
    commandModifier: bool = ...,
    ctrlModifier: bool = ...,
    data1: Queryable[str] = ...,
    data2: Queryable[str] = ...,
    data3: Queryable[str] = ...,
    delete: int = ...,
    dividerString: Queryable[str] = ...,
    enableCommandRepeat: bool = ...,
    factorySettings: bool = ...,
    index: int = ...,
    keyArray: bool = ...,
    keyString: Queryable[str] = ...,
    keyUp: bool = ...,
    name: bool = ...,
    numDividersPreceding: Queryable[int] = ...,
    numElements: bool = ...,
    optionModifier: bool = ...,
    sortByKey: bool = ...,
    sourceUserCommands: bool = ...,
) -> Union[bool, str, Callable[..., Any], int]: ...
def assignInputDevice(
    arg0: str = ...,
    /,
    *,
    query: bool = ...,
    clutch: str = ...,
    continuous: bool = ...,
    device: str = ...,
    immediate: bool = ...,
    multiple: bool = ...,
) -> str: ...
def assignViewportFactories(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    materialFactory: Queryable[str] = ...,
    nodeType: Queryable[str] = ...,
    textureFactory: Queryable[str] = ...,
) -> Union[bool, str]: ...
def attachCache() -> None: ...
def attachCurve(
    arg0: str = ...,
    /,
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    blendBias: Queryable[float] = ...,
    blendKnotInsertion: bool = ...,
    caching: bool = ...,
    keepMultipleKnots: bool = ...,
    method: Queryable[int] = ...,
    nodeState: Queryable[int] = ...,
    parameter: Queryable[float] = ...,
    reverse1: bool = ...,
    reverse2: bool = ...,
    constructionHistory: bool = ...,
    name: str = ...,
    object: bool = ...,
    replaceOriginal: bool = ...,
) -> Union[List[str], float, bool, int]: ...
def attachDeviceAttr(
    *args: str,
    query: bool = ...,
    attribute: Multiuse[str] = ...,
    axis: str = ...,
    camera: bool = ...,
    cameraRotate: bool = ...,
    cameraTranslate: bool = ...,
    clutch: str = ...,
    device: str = ...,
    selection: bool = ...,
) -> bool: ...
def attachFluidCache() -> None: ...
def attachGeometryCache() -> None: ...
def attachNclothCache() -> None: ...
def attachSurface(
    arg0: str = ...,
    arg1: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    blendBias: Queryable[float] = ...,
    blendKnotInsertion: bool = ...,
    caching: bool = ...,
    directionU: bool = ...,
    keepMultipleKnots: bool = ...,
    method: Queryable[int] = ...,
    nodeState: Queryable[int] = ...,
    parameter: Queryable[float] = ...,
    reverse1: bool = ...,
    reverse2: bool = ...,
    swap1: bool = ...,
    swap2: bool = ...,
    twist: bool = ...,
    constructionHistory: bool = ...,
    name: str = ...,
    object: bool = ...,
    replaceOriginal: bool = ...,
) -> Union[List[str], float, bool, int]: ...
def attrColorSliderGrp(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    adjustableColumn: int = ...,
    adjustableColumn2: int = ...,
    adjustableColumn3: int = ...,
    adjustableColumn4: int = ...,
    adjustableColumn5: int = ...,
    adjustableColumn6: int = ...,
    alphaValue: Queryable[float] = ...,
    annotation: Queryable[str] = ...,
    attrNavDecision: Queryable[Tuple[str, str]] = ...,
    attribute: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    columnAlign: Multiuse[Tuple[int, str]] = ...,
    columnAlign2: Tuple[str, str] = ...,
    columnAlign3: Tuple[str, str, str] = ...,
    columnAlign4: Tuple[str, str, str, str] = ...,
    columnAlign5: Tuple[str, str, str, str, str] = ...,
    columnAlign6: Tuple[str, str, str, str, str, str] = ...,
    columnAttach: Multiuse[Tuple[int, str, int]] = ...,
    columnAttach2: Tuple[str, str] = ...,
    columnAttach3: Tuple[str, str, str] = ...,
    columnAttach4: Tuple[str, str, str, str] = ...,
    columnAttach5: Tuple[str, str, str, str, str] = ...,
    columnAttach6: Tuple[str, str, str, str, str, str] = ...,
    columnOffset2: Tuple[int, int] = ...,
    columnOffset3: Tuple[int, int, int] = ...,
    columnOffset4: Tuple[int, int, int, int] = ...,
    columnOffset5: Tuple[int, int, int, int, int] = ...,
    columnOffset6: Tuple[int, int, int, int, int, int] = ...,
    columnWidth: Multiuse[Tuple[int, int]] = ...,
    columnWidth1: int = ...,
    columnWidth2: Tuple[int, int] = ...,
    columnWidth3: Tuple[int, int, int] = ...,
    columnWidth4: Tuple[int, int, int, int] = ...,
    columnWidth5: Tuple[int, int, int, int, int] = ...,
    columnWidth6: Tuple[int, int, int, int, int, int] = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    hsvValue: Queryable[Tuple[float, float, float]] = ...,
    isObscured: bool = ...,
    label: Queryable[str] = ...,
    manage: bool = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    rgbValue: Queryable[Tuple[float, float, float]] = ...,
    rowAttach: Multiuse[Tuple[int, str, int]] = ...,
    showButton: bool = ...,
    statusBarMessage: str = ...,
    useTemplate: str = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[
    str,
    float,
    Tuple[str, str],
    Tuple[float, float, float],
    bool,
    int,
    Callable[..., Any],
]: ...
def attrCompatibility(
    arg0: str = ...,
    arg1: str = ...,
    /,
    *,
    addAttr: bool = ...,
    clear: bool = ...,
    dumpTable: bool = ...,
    enable: bool = ...,
    nodeRename: str = ...,
    pluginNode: str = ...,
    renameAttr: str = ...,
    removeAttr: bool = ...,
    type: str = ...,
    version: str = ...,
) -> None: ...
def attrControlGrp(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    annotation: Queryable[str] = ...,
    attribute: Queryable[str] = ...,
    changeCommand: Queryable[Callable[..., Any]] = ...,
    enable: bool = ...,
    exists: bool = ...,
    handlesAttribute: str = ...,
    hideMapButton: bool = ...,
    label: Queryable[str] = ...,
    preventOverride: bool = ...,
) -> Union[str, Callable[..., Any], bool]: ...
def attrEnumOptionMenu(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    annotation: Queryable[str] = ...,
    attribute: str = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    changeCommand: Callable[..., Any] = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    enumeratedItem: Multiuse[Tuple[int, str]] = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    isObscured: bool = ...,
    label: Queryable[str] = ...,
    manage: bool = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    statusBarMessage: str = ...,
    useTemplate: str = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[str, Tuple[float, float, float], bool, int, Callable[..., Any]]: ...
def attrEnumOptionMenuGrp(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    adjustableColumn: int = ...,
    adjustableColumn2: int = ...,
    adjustableColumn3: int = ...,
    adjustableColumn4: int = ...,
    adjustableColumn5: int = ...,
    adjustableColumn6: int = ...,
    annotation: Queryable[str] = ...,
    attribute: str = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    columnAlign: Multiuse[Tuple[int, str]] = ...,
    columnAlign2: Tuple[str, str] = ...,
    columnAlign3: Tuple[str, str, str] = ...,
    columnAlign4: Tuple[str, str, str, str] = ...,
    columnAlign5: Tuple[str, str, str, str, str] = ...,
    columnAlign6: Tuple[str, str, str, str, str, str] = ...,
    columnAttach: Multiuse[Tuple[int, str, int]] = ...,
    columnAttach2: Tuple[str, str] = ...,
    columnAttach3: Tuple[str, str, str] = ...,
    columnAttach4: Tuple[str, str, str, str] = ...,
    columnAttach5: Tuple[str, str, str, str, str] = ...,
    columnAttach6: Tuple[str, str, str, str, str, str] = ...,
    columnOffset2: Tuple[int, int] = ...,
    columnOffset3: Tuple[int, int, int] = ...,
    columnOffset4: Tuple[int, int, int, int] = ...,
    columnOffset5: Tuple[int, int, int, int, int] = ...,
    columnOffset6: Tuple[int, int, int, int, int, int] = ...,
    columnWidth: Multiuse[Tuple[int, int]] = ...,
    columnWidth1: int = ...,
    columnWidth2: Tuple[int, int] = ...,
    columnWidth3: Tuple[int, int, int] = ...,
    columnWidth4: Tuple[int, int, int, int] = ...,
    columnWidth5: Tuple[int, int, int, int, int] = ...,
    columnWidth6: Tuple[int, int, int, int, int, int] = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    enumeratedItem: Multiuse[Tuple[int, str]] = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    isObscured: bool = ...,
    label: Queryable[str] = ...,
    manage: bool = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    rowAttach: Multiuse[Tuple[int, str, int]] = ...,
    statusBarMessage: str = ...,
    useTemplate: str = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[str, Tuple[float, float, float], bool, int, Callable[..., Any]]: ...
def attrFieldGrp(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    adjustableColumn: int = ...,
    adjustableColumn2: int = ...,
    adjustableColumn3: int = ...,
    adjustableColumn4: int = ...,
    adjustableColumn5: int = ...,
    adjustableColumn6: int = ...,
    annotation: Queryable[str] = ...,
    attribute: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    changeCommand: Callable[..., Any] = ...,
    columnAlign: Multiuse[Tuple[int, str]] = ...,
    columnAlign2: Tuple[str, str] = ...,
    columnAlign3: Tuple[str, str, str] = ...,
    columnAlign4: Tuple[str, str, str, str] = ...,
    columnAlign5: Tuple[str, str, str, str, str] = ...,
    columnAlign6: Tuple[str, str, str, str, str, str] = ...,
    columnAttach: Multiuse[Tuple[int, str, int]] = ...,
    columnAttach2: Tuple[str, str] = ...,
    columnAttach3: Tuple[str, str, str] = ...,
    columnAttach4: Tuple[str, str, str, str] = ...,
    columnAttach5: Tuple[str, str, str, str, str] = ...,
    columnAttach6: Tuple[str, str, str, str, str, str] = ...,
    columnOffset2: Tuple[int, int] = ...,
    columnOffset3: Tuple[int, int, int] = ...,
    columnOffset4: Tuple[int, int, int, int] = ...,
    columnOffset5: Tuple[int, int, int, int, int] = ...,
    columnOffset6: Tuple[int, int, int, int, int, int] = ...,
    columnWidth: Multiuse[Tuple[int, int]] = ...,
    columnWidth1: int = ...,
    columnWidth2: Tuple[int, int] = ...,
    columnWidth3: Tuple[int, int, int] = ...,
    columnWidth4: Tuple[int, int, int, int] = ...,
    columnWidth5: Tuple[int, int, int, int, int] = ...,
    columnWidth6: Tuple[int, int, int, int, int, int] = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    extraButton: bool = ...,
    extraButtonCommand: Callable[..., Any] = ...,
    extraButtonIcon: Queryable[str] = ...,
    extraLabel: Queryable[str] = ...,
    forceAddMapButton: bool = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    hideMapButton: bool = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    isObscured: bool = ...,
    label: Queryable[str] = ...,
    manage: bool = ...,
    maxValue: Queryable[float] = ...,
    minValue: Queryable[float] = ...,
    noBackground: bool = ...,
    numberOfFields: int = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    precision: int = ...,
    preventOverride: bool = ...,
    rowAttach: Multiuse[Tuple[int, str, int]] = ...,
    statusBarMessage: str = ...,
    step: Queryable[float] = ...,
    useTemplate: str = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[str, Tuple[float, float, float], bool, int, float, Callable[..., Any]]: ...
def attrFieldSliderGrp(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    adjustableColumn: int = ...,
    adjustableColumn2: int = ...,
    adjustableColumn3: int = ...,
    adjustableColumn4: int = ...,
    adjustableColumn5: int = ...,
    adjustableColumn6: int = ...,
    annotation: Queryable[str] = ...,
    attribute: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    changeCommand: Callable[..., Any] = ...,
    columnAlign: Multiuse[Tuple[int, str]] = ...,
    columnAlign2: Tuple[str, str] = ...,
    columnAlign3: Tuple[str, str, str] = ...,
    columnAlign4: Tuple[str, str, str, str] = ...,
    columnAlign5: Tuple[str, str, str, str, str] = ...,
    columnAlign6: Tuple[str, str, str, str, str, str] = ...,
    columnAttach: Multiuse[Tuple[int, str, int]] = ...,
    columnAttach2: Tuple[str, str] = ...,
    columnAttach3: Tuple[str, str, str] = ...,
    columnAttach4: Tuple[str, str, str, str] = ...,
    columnAttach5: Tuple[str, str, str, str, str] = ...,
    columnAttach6: Tuple[str, str, str, str, str, str] = ...,
    columnOffset2: Tuple[int, int] = ...,
    columnOffset3: Tuple[int, int, int] = ...,
    columnOffset4: Tuple[int, int, int, int] = ...,
    columnOffset5: Tuple[int, int, int, int, int] = ...,
    columnOffset6: Tuple[int, int, int, int, int, int] = ...,
    columnWidth: Multiuse[Tuple[int, int]] = ...,
    columnWidth1: int = ...,
    columnWidth2: Tuple[int, int] = ...,
    columnWidth3: Tuple[int, int, int] = ...,
    columnWidth4: Tuple[int, int, int, int] = ...,
    columnWidth5: Tuple[int, int, int, int, int] = ...,
    columnWidth6: Tuple[int, int, int, int, int, int] = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    extraButton: bool = ...,
    extraButtonCommand: Callable[..., Any] = ...,
    extraButtonIcon: Queryable[str] = ...,
    fieldMaxValue: Queryable[float] = ...,
    fieldMinValue: Queryable[float] = ...,
    fieldStep: Queryable[float] = ...,
    forceAddMapButton: bool = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    hideMapButton: bool = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    isObscured: bool = ...,
    label: Queryable[str] = ...,
    manage: bool = ...,
    maxValue: Queryable[float] = ...,
    minValue: Queryable[float] = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    precision: int = ...,
    preventOverride: bool = ...,
    rowAttach: Multiuse[Tuple[int, str, int]] = ...,
    sliderMaxValue: Queryable[float] = ...,
    sliderMinValue: Queryable[float] = ...,
    sliderStep: Queryable[float] = ...,
    statusBarMessage: str = ...,
    step: Queryable[float] = ...,
    useTemplate: str = ...,
    vertical: bool = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[str, Tuple[float, float, float], bool, float, int, Callable[..., Any]]: ...
def attrNavigationControlGrp(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    adjustableColumn: int = ...,
    adjustableColumn2: int = ...,
    adjustableColumn3: int = ...,
    adjustableColumn4: int = ...,
    adjustableColumn5: int = ...,
    adjustableColumn6: int = ...,
    annotation: Queryable[str] = ...,
    attrNavDecision: Queryable[Tuple[str, str]] = ...,
    attribute: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    columnAlign: Multiuse[Tuple[int, str]] = ...,
    columnAlign2: Tuple[str, str] = ...,
    columnAlign3: Tuple[str, str, str] = ...,
    columnAlign4: Tuple[str, str, str, str] = ...,
    columnAlign5: Tuple[str, str, str, str, str] = ...,
    columnAlign6: Tuple[str, str, str, str, str, str] = ...,
    columnAttach: Multiuse[Tuple[int, str, int]] = ...,
    columnAttach2: Tuple[str, str] = ...,
    columnAttach3: Tuple[str, str, str] = ...,
    columnAttach4: Tuple[str, str, str, str] = ...,
    columnAttach5: Tuple[str, str, str, str, str] = ...,
    columnAttach6: Tuple[str, str, str, str, str, str] = ...,
    columnOffset2: Tuple[int, int] = ...,
    columnOffset3: Tuple[int, int, int] = ...,
    columnOffset4: Tuple[int, int, int, int] = ...,
    columnOffset5: Tuple[int, int, int, int, int] = ...,
    columnOffset6: Tuple[int, int, int, int, int, int] = ...,
    columnWidth: Multiuse[Tuple[int, int]] = ...,
    columnWidth1: int = ...,
    columnWidth2: Tuple[int, int] = ...,
    columnWidth3: Tuple[int, int, int] = ...,
    columnWidth4: Tuple[int, int, int, int] = ...,
    columnWidth5: Tuple[int, int, int, int, int] = ...,
    columnWidth6: Tuple[int, int, int, int, int, int] = ...,
    connectAttrToDropped: Queryable[Callable[..., Any]] = ...,
    connectNodeToDropped: Queryable[Callable[..., Any]] = ...,
    connectToExisting: Queryable[Callable[..., Any]] = ...,
    createNew: Queryable[Callable[..., Any]] = ...,
    defaultTraversal: Queryable[Callable[..., Any]] = ...,
    defineTemplate: str = ...,
    delete: Queryable[str] = ...,
    disconnect: Queryable[Callable[..., Any]] = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    extraButton: bool = ...,
    extraButtonCommand: Callable[..., Any] = ...,
    extraButtonIcon: Queryable[str] = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    ignore: Queryable[Callable[..., Any]] = ...,
    ignoreNotSupported: bool = ...,
    isObscured: bool = ...,
    label: Queryable[str] = ...,
    manage: bool = ...,
    noBackground: bool = ...,
    noIgnorableMenu: bool = ...,
    noKeyableMenu: bool = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    relatedNodes: Queryable[Callable[..., Any]] = ...,
    rowAttach: Multiuse[Tuple[int, str, int]] = ...,
    statusBarMessage: str = ...,
    unignore: Queryable[Callable[..., Any]] = ...,
    useTemplate: str = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[
    str, Tuple[str, str], Tuple[float, float, float], Callable[..., Any], bool, int
]: ...
def attributeInfo(
    *args: str,
    allAttributes: bool = ...,
    bool: bool = ...,
    enumerated: bool = ...,
    hidden: bool = ...,
    inherited: bool = ...,
    internal: bool = ...,
    leaf: bool = ...,
    logicalAnd: bool = ...,
    multi: bool = ...,
    short: bool = ...,
    userInterface: bool = ...,
    writable: bool = ...,
    type: str = ...,
) -> List[str]: ...
def attributeMenu(
    *args: str,
    beginMenu: bool = ...,
    editor: str = ...,
    finishMenu: bool = ...,
    inputs: bool = ...,
    plug: str = ...,
    regPulldownMenuCommand: str = ...,
    unregPulldownMenuCommand: int = ...,
) -> str: ...
def attributeName(
    arg0: str = ...,
    /,
    *,
    leaf: bool = ...,
    long: bool = ...,
    nice: bool = ...,
    short: bool = ...,
) -> str: ...
def attributeQuery(
    arg0: str = ...,
    /,
    *,
    affectsAppearance: bool = ...,
    affectsWorldspace: bool = ...,
    attributeType: bool = ...,
    cachedInternally: bool = ...,
    categories: bool = ...,
    channelBox: bool = ...,
    connectable: bool = ...,
    enforcingUniqueName: bool = ...,
    enum: bool = ...,
    exists: bool = ...,
    hidden: bool = ...,
    indeterminant: bool = ...,
    indexMatters: bool = ...,
    internal: bool = ...,
    internalGet: bool = ...,
    internalSet: bool = ...,
    keyable: bool = ...,
    listChildren: bool = ...,
    listDefault: bool = ...,
    listEnum: bool = ...,
    listParent: bool = ...,
    listSiblings: bool = ...,
    localizedListEnum: bool = ...,
    longName: bool = ...,
    maxExists: bool = ...,
    maximum: bool = ...,
    message: bool = ...,
    minExists: bool = ...,
    minimum: bool = ...,
    multi: bool = ...,
    niceName: bool = ...,
    node: str = ...,
    numberOfChildren: bool = ...,
    range: bool = ...,
    rangeExists: bool = ...,
    readable: bool = ...,
    renderSource: bool = ...,
    shortName: bool = ...,
    softMax: bool = ...,
    softMaxExists: bool = ...,
    softMin: bool = ...,
    softMinExists: bool = ...,
    softRange: bool = ...,
    softRangeExists: bool = ...,
    storable: bool = ...,
    type: str = ...,
    typeExact: str = ...,
    usedAsColor: bool = ...,
    usedAsFilename: bool = ...,
    usesMultiBuilder: bool = ...,
    worldspace: bool = ...,
    writable: bool = ...,
) -> Union[List[float], bool]: ...
def audioTrack(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    insertTrack: int = ...,
    lock: bool = ...,
    mute: bool = ...,
    numTracks: Queryable[int] = ...,
    removeEmptyTracks: bool = ...,
    removeTrack: int = ...,
    solo: bool = ...,
    swapTracks: Tuple[int, int] = ...,
    title: Queryable[str] = ...,
    track: int = ...,
) -> Union[bool, int, str]: ...
def autoKeyframe(
    *,
    edit: bool = ...,
    query: bool = ...,
    addAttr: str = ...,
    characterOption: Queryable[str] = ...,
    listAttr: bool = ...,
    noReset: bool = ...,
    state: bool = ...,
) -> Union[int, str, bool]: ...
def autoPlace(*, useMouse: bool = ...) -> List[float]: ...
def autoSave(
    *,
    query: bool = ...,
    destination: Queryable[int] = ...,
    destinationFolder: bool = ...,
    enable: bool = ...,
    folder: Queryable[str] = ...,
    interval: Queryable[float] = ...,
    limitBackups: bool = ...,
    maxBackups: Queryable[int] = ...,
    perform: bool = ...,
    prompt: bool = ...,
) -> Union[bool, int, str, float]: ...
def backgroundEvaluationManager(
    *args: str,
    query: bool = ...,
    interrupt: bool = ...,
    mode: Queryable[str] = ...,
    pause: bool = ...,
    resume: bool = ...,
) -> Union[bool, str]: ...
def bakeClip(
    *args: str,
    blend: Tuple[int, int] = ...,
    clipIndex: Multiuse[int] = ...,
    keepOriginals: bool = ...,
    name: str = ...,
) -> str: ...
def bakeDeformer(
    *,
    bakeRangeOfMotion: bool = ...,
    colorizeSkeleton: bool = ...,
    customRangeOfMotion: NullableRange[float] = ...,
    dstMeshName: str = ...,
    dstSkeletonName: str = ...,
    hierarchy: bool = ...,
    influences: List[str] = ...,
    maxInfluences: int = ...,
    pruneWeights: float = ...,
    smoothWeights: int = ...,
    srcMeshName: str = ...,
    srcSkeletonName: str = ...,
) -> str: ...
def bakePartialHistory(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    allShapes: bool = ...,
    postSmooth: bool = ...,
    preCache: bool = ...,
    preDeformers: bool = ...,
    prePostDeformers: bool = ...,
) -> Union[str, bool]: ...
def bakeResults(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    animation: str = ...,
    attribute: Multiuse[str] = ...,
    bakeOnOverrideLayer: bool = ...,
    controlPoints: bool = ...,
    destinationLayer: str = ...,
    disableImplicitControl: bool = ...,
    float: Multiuse[Range[float]] = ...,
    hierarchy: str = ...,
    includeUpperBound: bool = ...,
    index: Multiuse[int] = ...,
    minimizeRotation: bool = ...,
    oversamplingRate: int = ...,
    preserveOutsideKeys: bool = ...,
    removeBakedAnimFromLayer: bool = ...,
    removeBakedAttributeFromLayer: bool = ...,
    resolveWithoutLayer: Multiuse[str] = ...,
    sampleBy: int = ...,
    shape: bool = ...,
    simulation: bool = ...,
    smart: Union[Tuple[()], Tuple[bool, float]] = ...,
    sparseAnimCurveBake: bool = ...,
    time: Multiuse[NullableRange[float]] = ...,
) -> int: ...
def bakeSimulation(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    animation: str = ...,
    attribute: Multiuse[str] = ...,
    bakeOnOverrideLayer: bool = ...,
    controlPoints: bool = ...,
    destinationLayer: str = ...,
    disableImplicitControl: bool = ...,
    float: Multiuse[Range[float]] = ...,
    hierarchy: str = ...,
    includeUpperBound: bool = ...,
    index: Multiuse[int] = ...,
    minimizeRotation: bool = ...,
    preserveOutsideKeys: bool = ...,
    removeBakedAnimFromLayer: bool = ...,
    removeBakedAttributeFromLayer: bool = ...,
    resolveWithoutLayer: Multiuse[str] = ...,
    sampleBy: int = ...,
    shape: bool = ...,
    simulation: bool = ...,
    smart: Union[Tuple[()], Tuple[bool, float]] = ...,
    sparseAnimCurveBake: bool = ...,
    time: Multiuse[NullableRange[float]] = ...,
) -> bool: ...
def baseTemplate(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    exists: bool = ...,
    fileName: Queryable[str] = ...,
    force: bool = ...,
    load: bool = ...,
    matchFile: str = ...,
    silent: bool = ...,
    unload: bool = ...,
    viewList: Queryable[str] = ...,
) -> Union[bool, str]: ...
def baseView(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    itemInfo: str = ...,
    itemList: bool = ...,
    viewDescription: bool = ...,
    viewLabel: bool = ...,
    viewList: bool = ...,
    viewName: Queryable[str] = ...,
) -> Union[bool, str]: ...
def batchRender(
    arg0: str = ...,
    arg1: str = ...,
    arg2: str = ...,
    arg3: str = ...,
    arg4: str = ...,
    /,
    *,
    filename: str = ...,
    melCommand: str = ...,
    numProcs: int = ...,
    preRenderCommand: str = ...,
    remoteRenderMachine: str = ...,
    renderCommandOptions: str = ...,
    showImage: bool = ...,
    status: str = ...,
    useRemoteRender: bool = ...,
    useStandalone: bool = ...,
    verbosity: int = ...,
) -> bool: ...
def bevel(
    arg0: str = ...,
    arg1: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    bevelShapeType: Queryable[int] = ...,
    caching: bool = ...,
    cornerType: Queryable[int] = ...,
    depth: Queryable[float] = ...,
    extrudeDepth: Queryable[float] = ...,
    nodeState: Queryable[int] = ...,
    tolerance: Queryable[float] = ...,
    width: Queryable[float] = ...,
    constructionHistory: bool = ...,
    joinSurfaces: bool = ...,
    name: str = ...,
    numberOfSides: Queryable[int] = ...,
    object: bool = ...,
    polygon: int = ...,
    range: bool = ...,
) -> Union[List[str], int, bool, float]: ...
def bevelPlus(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    bevelInside: bool = ...,
    capSides: Queryable[int] = ...,
    constructionHistory: bool = ...,
    innerStyle: Queryable[int] = ...,
    joinSurfaces: bool = ...,
    name: str = ...,
    normalsOutwards: bool = ...,
    numberOfSides: Queryable[int] = ...,
    outerStyle: Queryable[int] = ...,
    polygon: int = ...,
    range: bool = ...,
) -> Union[List[str], bool, int]: ...
def bezierAnchorPreset(*, preset: int = ...) -> int: ...
def bezierAnchorState(*, even: bool = ..., smooth: bool = ...) -> int: ...
def bezierCurveToNurbs() -> List[str]: ...
def bezierInfo(
    *,
    anchorFromCV: int = ...,
    cvFromAnchor: int = ...,
    isAnchorSelected: bool = ...,
    isTangentSelected: bool = ...,
    onlyAnchorsSelected: bool = ...,
    onlyTangentsSelected: bool = ...,
) -> int: ...
def binMembership(
    *args: str,
    query: bool = ...,
    addToBin: str = ...,
    exists: str = ...,
    inheritBinsFromNodes: str = ...,
    isValidBinName: str = ...,
    listBins: bool = ...,
    makeExclusive: str = ...,
    notifyChanged: bool = ...,
    removeFromBin: str = ...,
) -> bool: ...
def bindSkin(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    byClosestPoint: bool = ...,
    byPartition: bool = ...,
    colorJoints: bool = ...,
    delete: bool = ...,
    doNotDescend: bool = ...,
    enable: bool = ...,
    name: str = ...,
    partition: str = ...,
    toAll: bool = ...,
    toSelectedBones: bool = ...,
    toSkeleton: bool = ...,
    unbind: bool = ...,
    unbindKeepHistory: bool = ...,
    unlock: bool = ...,
) -> str: ...
def blend(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    autoDirection: bool = ...,
    caching: bool = ...,
    crvsInFirstRail: int = ...,
    constructionHistory: bool = ...,
    flipLeft: bool = ...,
    flipRight: bool = ...,
    frozen: bool = ...,
    leftParameter: float = ...,
    multipleKnots: bool = ...,
    name: str = ...,
    nodeState: int = ...,
    object: bool = ...,
    polygon: int = ...,
    positionTolerance: float = ...,
    rightParameter: float = ...,
    tangentTolerance: float = ...,
) -> None: ...
def blend2(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    autoAnchor: bool = ...,
    autoNormal: bool = ...,
    caching: bool = ...,
    flipLeftNormal: bool = ...,
    flipRightNormal: bool = ...,
    leftAnchor: Queryable[float] = ...,
    leftEnd: Queryable[float] = ...,
    leftStart: Queryable[float] = ...,
    multipleKnots: bool = ...,
    nodeState: Queryable[int] = ...,
    positionTolerance: Queryable[float] = ...,
    reverseLeft: bool = ...,
    reverseRight: bool = ...,
    rightAnchor: Queryable[float] = ...,
    rightEnd: Queryable[float] = ...,
    rightStart: Queryable[float] = ...,
    tangentTolerance: Queryable[float] = ...,
    constructionHistory: bool = ...,
    crvsInFirstRail: Queryable[int] = ...,
    name: str = ...,
    object: bool = ...,
    polygon: int = ...,
) -> Union[List[str], bool, float, int]: ...
def blendCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    autoCreate: bool = ...,
    autoDirection: bool = ...,
    activeNodes: bool = ...,
    caching: bool = ...,
    crvsInFirstRail: int = ...,
    constructionHistory: bool = ...,
    exists: bool = ...,
    flipLeft: bool = ...,
    flipRight: bool = ...,
    frozen: bool = ...,
    image1: str = ...,
    image2: str = ...,
    image3: str = ...,
    immediate: bool = ...,
    leftParameter: float = ...,
    multipleKnots: bool = ...,
    name: str = ...,
    nodeState: int = ...,
    object: bool = ...,
    polygon: int = ...,
    positionTolerance: float = ...,
    rightParameter: float = ...,
    reset: bool = ...,
    toolNode: bool = ...,
    tangentTolerance: float = ...,
    useGlobalTol: bool = ...,
) -> None: ...
def blendShape(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    after: bool = ...,
    afterReference: bool = ...,
    automatic: bool = ...,
    before: bool = ...,
    components: bool = ...,
    copyDelta: Tuple[int, int, int] = ...,
    copyInBetweenDelta: Tuple[int, int, int, int] = ...,
    copyWeights: Tuple[int, int, int] = ...,
    deformerTools: bool = ...,
    dumpInfo: bool = ...,
    editTarget: bool = ...,
    envelope: Queryable[float] = ...,
    exclusive: Queryable[str] = ...,
    export: str = ...,
    exportTarget: Multiuse[Tuple[int, int]] = ...,
    fixedSetupData: str = ...,
    flipTarget: Multiuse[Tuple[int, int]] = ...,
    frontOfChain: bool = ...,
    geometry: Queryable[Multiuse[str]] = ...,
    geometryIndices: bool = ...,
    ignoreSelected: bool = ...,
    ip: str = ...,
    inBetween: bool = ...,
    inBetweenIndex: int = ...,
    inBetweenType: str = ...,
    includeHiddenSelections: bool = ...,
    mergeSource: Multiuse[int] = ...,
    mergeTarget: int = ...,
    mirrorDirection: int = ...,
    mirrorTarget: Multiuse[Tuple[int, int]] = ...,
    name: str = ...,
    normalizationGroups: bool = ...,
    origin: str = ...,
    parallel: bool = ...,
    prune: bool = ...,
    remove: Multiuse[bool] = ...,
    resetTargetDelta: Multiuse[Tuple[int, int]] = ...,
    selectedComponents: bool = ...,
    split: bool = ...,
    suppressDialog: bool = ...,
    symmetryAxis: Queryable[str] = ...,
    symmetryEdge: Queryable[Multiuse[str]] = ...,
    symmetrySpace: Queryable[int] = ...,
    tangentSpace: bool = ...,
    target: Queryable[Multiuse[Tuple[str, int, str, float]]] = ...,
    topologyCheck: bool = ...,
    transform: Queryable[str] = ...,
    useComponentTags: bool = ...,
    weight: Queryable[Multiuse[Tuple[int, float]]] = ...,
    weightCount: Queryable[int] = ...,
) -> Union[
    List[str],
    bool,
    float,
    str,
    Multiuse[str],
    int,
    Multiuse[Tuple[str, int, str, float]],
    Multiuse[Tuple[int, float]],
]: ...
def blendShapeEditor(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    control: bool = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    exists: bool = ...,
    filter: Queryable[str] = ...,
    forceMainConnection: Queryable[str] = ...,
    highlightConnection: Queryable[str] = ...,
    lockMainConnection: bool = ...,
    mainListConnection: Queryable[str] = ...,
    panel: Queryable[str] = ...,
    parent: Queryable[str] = ...,
    selectionConnection: Queryable[str] = ...,
    stateString: bool = ...,
    targetControlList: bool = ...,
    targetList: bool = ...,
    unParent: bool = ...,
    unlockMainConnection: bool = ...,
    updateMainConnection: bool = ...,
    useTemplate: str = ...,
    verticalSliders: bool = ...,
) -> Union[str, bool]: ...
def blendShapePanel(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    blendShapeEditor: bool = ...,
    control: bool = ...,
    copy: str = ...,
    createString: bool = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    editString: bool = ...,
    exists: bool = ...,
    init: bool = ...,
    isUnique: bool = ...,
    label: Queryable[str] = ...,
    menuBarRepeatLast: bool = ...,
    menuBarVisible: bool = ...,
    needsInit: bool = ...,
    parent: str = ...,
    popupMenuProcedure: Queryable[Callable[..., Any]] = ...,
    replacePanel: str = ...,
    tearOff: bool = ...,
    tearOffCopy: str = ...,
    tearOffRestore: bool = ...,
    unParent: bool = ...,
    useTemplate: str = ...,
) -> Union[str, bool, Callable[..., Any]]: ...
def blendTwoAttr(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    attribute: Multiuse[str] = ...,
    attribute0: Queryable[str] = ...,
    attribute1: Queryable[str] = ...,
    blender: Queryable[str] = ...,
    controlPoints: bool = ...,
    driver: Queryable[int] = ...,
    name: Queryable[str] = ...,
    shape: bool = ...,
    time: NullableRange[float] = ...,
) -> Union[List[str], str, int]: ...
def blindDataType(
    *,
    dataType: Multiuse[str] = ...,
    longDataName: Multiuse[str] = ...,
    longNames: bool = ...,
    query: bool = ...,
    shortDataName: Multiuse[str] = ...,
    shortNames: bool = ...,
    typeId: int = ...,
    typeNames: bool = ...,
) -> str: ...
def boneLattice(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    after: bool = ...,
    afterReference: bool = ...,
    before: bool = ...,
    bicep: Queryable[float] = ...,
    components: bool = ...,
    deformerTools: bool = ...,
    dumpInfo: bool = ...,
    exclusive: Queryable[str] = ...,
    fixedSetupData: str = ...,
    frontOfChain: bool = ...,
    geometry: Queryable[Multiuse[str]] = ...,
    geometryIndices: bool = ...,
    ignoreSelected: bool = ...,
    includeHiddenSelections: bool = ...,
    joint: Queryable[str] = ...,
    lengthIn: Queryable[float] = ...,
    lengthOut: Queryable[float] = ...,
    name: str = ...,
    parallel: bool = ...,
    prune: bool = ...,
    remove: Multiuse[bool] = ...,
    selectedComponents: bool = ...,
    split: bool = ...,
    transform: str = ...,
    tricep: Queryable[float] = ...,
    useComponentTags: bool = ...,
    widthLeft: Queryable[float] = ...,
    widthRight: Queryable[float] = ...,
) -> Union[str, float, bool, Multiuse[str]]: ...
def boundary(
    arg0: str = ...,
    arg1: str = ...,
    arg2: str = ...,
    arg3: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    endPoint: bool = ...,
    endPointTolerance: Queryable[float] = ...,
    nodeState: Queryable[int] = ...,
    order: bool = ...,
    constructionHistory: bool = ...,
    name: str = ...,
    object: bool = ...,
    polygon: int = ...,
    range: bool = ...,
) -> Union[List[str], bool, float, int]: ...
def boxDollyCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    alternateContext: bool = ...,
    exists: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    name: str = ...,
    toolName: Queryable[str] = ...,
) -> Union[str, bool]: ...
def boxZoomCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    exists: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    name: str = ...,
    zoomScale: Queryable[float] = ...,
) -> Union[str, float]: ...
def bufferCurve(
    *args: str,
    query: bool = ...,
    animation: str = ...,
    attribute: Multiuse[str] = ...,
    controlPoints: bool = ...,
    exists: bool = ...,
    float: Multiuse[Range[float]] = ...,
    hierarchy: str = ...,
    includeUpperBound: bool = ...,
    index: Multiuse[int] = ...,
    overwrite: bool = ...,
    shape: bool = ...,
    swap: bool = ...,
    time: Multiuse[NullableRange[float]] = ...,
    useReferencedCurve: bool = ...,
) -> Union[int, bool]: ...
def buildBookmarkMenu(
    arg0: str = ..., /, *, editor: str = ..., type: str = ...
) -> bool: ...
def buildKeyframeMenu(arg0: str = ..., /) -> bool: ...
def buildSendToBackburnerDialog() -> None: ...
def button(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    actOnPress: bool = ...,
    actionIsSubstitute: bool = ...,
    align: Queryable[str] = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    command: Queryable[Callable[..., Any]] = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    isObscured: bool = ...,
    label: Queryable[str] = ...,
    manage: bool = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    recomputeSize: bool = ...,
    statusBarMessage: str = ...,
    useTemplate: str = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[str, bool, Tuple[float, float, float], Callable[..., Any], int]: ...
def buttonManip(
    arg0: Callable[..., Any] = ..., arg1: str = ..., /, *, icon: str = ...
) -> bool: ...
def cacheAppend() -> None: ...
def cacheAppendOpt() -> None: ...
def cacheEvaluator(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    cacheFillMode: Queryable[str] = ...,
    cacheFillOrder: Queryable[str] = ...,
    cacheInvalidate: NullableRange[float] = ...,
    cacheName: str = ...,
    cachedFrames: bool = ...,
    cachingPoints: bool = ...,
    creationParameters: bool = ...,
    delegateEvaluation: bool = ...,
    dynamicsAsyncRefresh: bool = ...,
    dynamicsSupportActive: bool = ...,
    dynamicsSupportEnabled: bool = ...,
    flushCache: str = ...,
    flushCacheRange: Tuple[NullableRange[float], bool] = ...,
    flushCacheSync: bool = ...,
    flushCacheWait: bool = ...,
    hybridCacheMode: Queryable[str] = ...,
    layeredEvaluationActive: bool = ...,
    layeredEvaluationCachingPoints: bool = ...,
    layeredEvaluationEnabled: bool = ...,
    listCacheNames: bool = ...,
    listCachedNodes: bool = ...,
    listValueNames: bool = ...,
    newAction: str = ...,
    newActionParam: str = ...,
    newFilter: str = ...,
    newFilterParam: str = ...,
    newRule: str = ...,
    newRuleParam: str = ...,
    pauseInvalidation: bool = ...,
    preventFrameSkip: bool = ...,
    resetRules: bool = ...,
    resourceUsage: bool = ...,
    resumeInvalidation: bool = ...,
    safeMode: bool = ...,
    safeModeMessages: bool = ...,
    safeModeTriggered: bool = ...,
    valueName: str = ...,
    waitForCache: float = ...,
) -> Union[str, bool, List[str], List[int]]: ...
def cacheFile(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    appendFrame: bool = ...,
    attachFile: bool = ...,
    cacheFileNode: Multiuse[str] = ...,
    cacheFormat: Queryable[str] = ...,
    cacheInfo: Queryable[Multiuse[str]] = ...,
    cacheableAttrs: Queryable[str] = ...,
    cacheableNode: Multiuse[str] = ...,
    channelIndex: bool = ...,
    channelName: Queryable[Multiuse[str]] = ...,
    convertPc2: bool = ...,
    createCacheNode: bool = ...,
    creationChannelName: Multiuse[str] = ...,
    dataSize: bool = ...,
    deleteCachedFrame: bool = ...,
    descriptionFileName: bool = ...,
    directory: Queryable[str] = ...,
    doubleToFloat: bool = ...,
    endTime: int = ...,
    fileName: Queryable[str] = ...,
    format: str = ...,
    geometry: bool = ...,
    inAttr: Multiuse[str] = ...,
    inTangent: str = ...,
    interpEndTime: int = ...,
    interpStartTime: int = ...,
    noBackup: bool = ...,
    outAttr: Multiuse[str] = ...,
    outTangent: str = ...,
    pc2File: str = ...,
    pointCount: bool = ...,
    points: Multiuse[str] = ...,
    pointsAndNormals: Multiuse[str] = ...,
    prefix: bool = ...,
    refresh: bool = ...,
    replaceCachedFrame: bool = ...,
    replaceWithoutSimulating: bool = ...,
    runupFrames: Queryable[int] = ...,
    sampleMultiplier: Queryable[int] = ...,
    simulationRate: Queryable[int] = ...,
    singleCache: bool = ...,
    startTime: int = ...,
    staticCache: bool = ...,
    worldSpace: bool = ...,
) -> Union[str, Multiuse[str], bool, int]: ...
def cacheFileCombine(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    cacheIndex: bool = ...,
    channelName: Multiuse[str] = ...,
    connectCache: Queryable[str] = ...,
    keepWeights: bool = ...,
    layerNode: bool = ...,
    nextAvailable: bool = ...,
    object: str = ...,
    objectIndex: Queryable[int] = ...,
) -> Union[str, bool, int]: ...
def cacheFileMerge(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    endTime: int = ...,
    geometry: bool = ...,
    startTime: int = ...,
) -> Union[List[float], List[str], bool]: ...
def cacheFileTrack(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    insertTrack: int = ...,
    lock: bool = ...,
    mute: bool = ...,
    removeEmptyTracks: bool = ...,
    removeTrack: int = ...,
    solo: bool = ...,
    track: Queryable[int] = ...,
) -> Union[bool, int]: ...
def caddyManip(*args: Any, **kwargs: Any) -> None: ...
def callbacks(
    *args: str,
    addCallback: Callable[..., Any] = ...,
    clearAllCallbacks: bool = ...,
    clearCallbacks: bool = ...,
    describeHooks: bool = ...,
    dumpCallbacks: bool = ...,
    executeCallbacks: bool = ...,
    hook: str = ...,
    listCallbacks: bool = ...,
    owner: str = ...,
    removeCallback: Callable[..., Any] = ...,
) -> List[str]: ...
def camera(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    aspectRatio: Queryable[float] = ...,
    cameraScale: Queryable[float] = ...,
    centerOfInterest: Queryable[float] = ...,
    clippingPlanes: bool = ...,
    depthOfField: bool = ...,
    displayFieldChart: bool = ...,
    displayFilmGate: bool = ...,
    displayFilmOrigin: bool = ...,
    displayFilmPivot: bool = ...,
    displayGateMask: bool = ...,
    displayResolution: bool = ...,
    displaySafeAction: bool = ...,
    displaySafeTitle: bool = ...,
    fStop: Queryable[float] = ...,
    farClipPlane: Queryable[float] = ...,
    farFocusDistance: Queryable[float] = ...,
    filmFit: Queryable[str] = ...,
    filmFitOffset: Queryable[float] = ...,
    filmRollOrder: Queryable[str] = ...,
    filmRollValue: Queryable[float] = ...,
    filmTranslateH: Queryable[float] = ...,
    filmTranslateV: Queryable[float] = ...,
    focalLength: Queryable[float] = ...,
    focusDistance: Queryable[float] = ...,
    homeCommand: Queryable[str] = ...,
    horizontalFieldOfView: Queryable[float] = ...,
    horizontalFilmAperture: Queryable[float] = ...,
    horizontalFilmOffset: Queryable[float] = ...,
    horizontalPan: Queryable[float] = ...,
    horizontalRollPivot: Queryable[float] = ...,
    horizontalShake: Queryable[float] = ...,
    journalCommand: bool = ...,
    lensSqueezeRatio: Queryable[float] = ...,
    lockTransform: bool = ...,
    motionBlur: bool = ...,
    name: Queryable[str] = ...,
    nearClipPlane: Queryable[float] = ...,
    nearFocusDistance: Queryable[float] = ...,
    orthographic: bool = ...,
    orthographicWidth: Queryable[float] = ...,
    overscan: Queryable[float] = ...,
    panZoomEnabled: bool = ...,
    position: Queryable[Tuple[float, float, float]] = ...,
    postScale: Queryable[float] = ...,
    preScale: Queryable[float] = ...,
    renderPanZoom: bool = ...,
    rotation: Queryable[Tuple[float, float, float]] = ...,
    shakeEnabled: bool = ...,
    shakeOverscan: Queryable[float] = ...,
    shakeOverscanEnabled: bool = ...,
    shutterAngle: Queryable[float] = ...,
    startupCamera: bool = ...,
    stereoHorizontalImageTranslate: Queryable[float] = ...,
    stereoHorizontalImageTranslateEnabled: bool = ...,
    verticalFieldOfView: Queryable[float] = ...,
    verticalFilmAperture: Queryable[float] = ...,
    verticalFilmOffset: Queryable[float] = ...,
    verticalLock: bool = ...,
    verticalPan: Queryable[float] = ...,
    verticalRollPivot: Queryable[float] = ...,
    verticalShake: Queryable[float] = ...,
    worldCenterOfInterest: Queryable[Tuple[float, float, float]] = ...,
    worldUp: Queryable[Tuple[float, float, float]] = ...,
    zoom: Queryable[float] = ...,
) -> Union[List[str], float, bool, str, Tuple[float, float, float]]: ...
def cameraSet(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    active: bool = ...,
    appendTo: bool = ...,
    camera: Queryable[str] = ...,
    clearDepth: bool = ...,
    deleteAll: bool = ...,
    deleteLayer: bool = ...,
    insertAt: bool = ...,
    layer: Queryable[int] = ...,
    name: Queryable[str] = ...,
    numLayers: bool = ...,
    objectSet: Queryable[str] = ...,
    order: Queryable[int] = ...,
) -> Union[str, bool, int]: ...
def cameraView(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    addBookmark: bool = ...,
    animate: bool = ...,
    bookmarkType: int = ...,
    camera: str = ...,
    name: str = ...,
    removeBookmark: bool = ...,
    setCamera: bool = ...,
    setView: bool = ...,
) -> str: ...
def canCreateCaddyManip(*args: Any) -> bool: ...
def canCreateManip(*args: str) -> bool: ...
def canvas(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    hsvValue: Queryable[Tuple[float, float, float]] = ...,
    isObscured: bool = ...,
    manage: bool = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    pressCommand: Callable[..., Any] = ...,
    preventOverride: bool = ...,
    rgbValue: Queryable[Tuple[float, float, float]] = ...,
    statusBarMessage: str = ...,
    useTemplate: str = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[str, Tuple[float, float, float], bool, int, Callable[..., Any]]: ...
def changeSubdivComponentDisplayLevel(
    *args: Any, query: bool = ..., level: Queryable[int] = ..., relative: bool = ...
) -> Union[int, bool]: ...
def changeSubdivRegion(*args: Any, action: int = ..., level: int = ...) -> bool: ...
def channelBox(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    annotation: Queryable[str] = ...,
    attrBgColor: Queryable[Tuple[float, float, float]] = ...,
    attrColor: Queryable[Tuple[float, float, float]] = ...,
    attrFilter: Queryable[str] = ...,
    attrRegex: Queryable[str] = ...,
    attributeEditorMode: bool = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    containerAtTop: bool = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    enableLabelSelection: bool = ...,
    execute: Tuple[str, bool] = ...,
    exists: bool = ...,
    fieldWidth: Queryable[int] = ...,
    fixedAttrList: Queryable[List[str]] = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    historyObjectList: bool = ...,
    hyperbolic: bool = ...,
    inputs: bool = ...,
    isObscured: bool = ...,
    labelWidth: Queryable[int] = ...,
    longNames: bool = ...,
    mainListConnection: Queryable[str] = ...,
    mainObjectList: bool = ...,
    manage: bool = ...,
    maxHeight: Queryable[int] = ...,
    maxWidth: Queryable[int] = ...,
    niceNames: bool = ...,
    noBackground: bool = ...,
    nodeRegex: Queryable[str] = ...,
    numberOfPopupMenus: bool = ...,
    outputObjectList: bool = ...,
    outputs: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    precision: Queryable[int] = ...,
    preventOverride: bool = ...,
    rebuildCommand: Queryable[Callable[..., Any]] = ...,
    select: Multiuse[str] = ...,
    selectedHistoryAttributes: bool = ...,
    selectedMainAttributes: bool = ...,
    selectedOutputAttributes: bool = ...,
    selectedShapeAttributes: bool = ...,
    shapeObjectList: bool = ...,
    shapes: bool = ...,
    showNamespace: bool = ...,
    showTransforms: bool = ...,
    speed: Queryable[float] = ...,
    statusBarMessage: str = ...,
    takeFocus: bool = ...,
    ufeFixedAttrList: Queryable[Tuple[str, List[str]]] = ...,
    update: bool = ...,
    useManips: Queryable[str] = ...,
    useTemplate: str = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[
    str,
    Tuple[float, float, float],
    bool,
    int,
    List[str],
    Callable[..., Any],
    float,
    Tuple[str, List[str]],
]: ...
def character(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    addElement: str = ...,
    addOffsetObject: Queryable[str] = ...,
    anyMember: str = ...,
    characterPlug: bool = ...,
    clear: str = ...,
    empty: bool = ...,
    excludeDynamic: bool = ...,
    excludeRotate: bool = ...,
    excludeScale: bool = ...,
    excludeTranslate: bool = ...,
    excludeVisibility: bool = ...,
    flatten: str = ...,
    forceElement: str = ...,
    include: str = ...,
    intersection: Queryable[str] = ...,
    isIntersecting: Queryable[str] = ...,
    isMember: Queryable[str] = ...,
    library: bool = ...,
    memberIndex: Queryable[int] = ...,
    name: str = ...,
    noWarnings: bool = ...,
    nodesOnly: bool = ...,
    offsetNode: bool = ...,
    remove: str = ...,
    removeOffsetObject: str = ...,
    root: str = ...,
    scheduler: bool = ...,
    split: str = ...,
    subtract: Queryable[str] = ...,
    text: Queryable[str] = ...,
    union: Queryable[str] = ...,
    userAlias: Queryable[str] = ...,
) -> Union[str, List[str], bool, int]: ...
def characterMap(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    mapAttr: Queryable[Tuple[str, str]] = ...,
    mapMethod: str = ...,
    mapNode: Queryable[Tuple[str, str]] = ...,
    mapping: Queryable[str] = ...,
    proposedMapping: bool = ...,
    unmapAttr: Tuple[str, str] = ...,
    unmapNode: Tuple[str, str] = ...,
) -> Union[str, Tuple[str, str], bool]: ...
def characterize(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    activatePivot: bool = ...,
    addAuxEffector: bool = ...,
    addFloorContactPlane: bool = ...,
    addMissingEffectors: bool = ...,
    attributeFromHIKProperty: Queryable[str] = ...,
    attributeFromHIKPropertyMode: Queryable[str] = ...,
    autoActivateBodyPart: bool = ...,
    changePivotPlacement: bool = ...,
    effectors: str = ...,
    fkSkeleton: str = ...,
    name: str = ...,
    pinHandFeet: bool = ...,
    placeNewPivot: bool = ...,
    posture: str = ...,
    sourceSkeleton: str = ...,
    stancePose: Queryable[str] = ...,
    type: str = ...,
) -> Union[str, bool]: ...
def checkBox(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    align: Queryable[str] = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    changeCommand: Queryable[Callable[..., Any]] = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    editable: bool = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    isObscured: bool = ...,
    label: Queryable[str] = ...,
    manage: bool = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    offCommand: Queryable[Callable[..., Any]] = ...,
    onCommand: Queryable[Callable[..., Any]] = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    recomputeSize: bool = ...,
    statusBarMessage: str = ...,
    useTemplate: str = ...,
    value: bool = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[str, Tuple[float, float, float], Callable[..., Any], bool, int]: ...
def checkBoxGrp(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    adjustableColumn: int = ...,
    adjustableColumn2: int = ...,
    adjustableColumn3: int = ...,
    adjustableColumn4: int = ...,
    adjustableColumn5: int = ...,
    adjustableColumn6: int = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    changeCommand: Callable[..., Any] = ...,
    changeCommand1: Callable[..., Any] = ...,
    changeCommand2: Callable[..., Any] = ...,
    changeCommand3: Callable[..., Any] = ...,
    changeCommand4: Callable[..., Any] = ...,
    columnAlign: Multiuse[Tuple[int, str]] = ...,
    columnAlign2: Tuple[str, str] = ...,
    columnAlign3: Tuple[str, str, str] = ...,
    columnAlign4: Tuple[str, str, str, str] = ...,
    columnAlign5: Tuple[str, str, str, str, str] = ...,
    columnAlign6: Tuple[str, str, str, str, str, str] = ...,
    columnAttach: Multiuse[Tuple[int, str, int]] = ...,
    columnAttach2: Tuple[str, str] = ...,
    columnAttach3: Tuple[str, str, str] = ...,
    columnAttach4: Tuple[str, str, str, str] = ...,
    columnAttach5: Tuple[str, str, str, str, str] = ...,
    columnAttach6: Tuple[str, str, str, str, str, str] = ...,
    columnOffset2: Tuple[int, int] = ...,
    columnOffset3: Tuple[int, int, int] = ...,
    columnOffset4: Tuple[int, int, int, int] = ...,
    columnOffset5: Tuple[int, int, int, int, int] = ...,
    columnOffset6: Tuple[int, int, int, int, int, int] = ...,
    columnWidth: Multiuse[Tuple[int, int]] = ...,
    columnWidth1: int = ...,
    columnWidth2: Tuple[int, int] = ...,
    columnWidth3: Tuple[int, int, int] = ...,
    columnWidth4: Tuple[int, int, int, int] = ...,
    columnWidth5: Tuple[int, int, int, int, int] = ...,
    columnWidth6: Tuple[int, int, int, int, int, int] = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    editable: bool = ...,
    enable: bool = ...,
    enable1: bool = ...,
    enable2: bool = ...,
    enable3: bool = ...,
    enable4: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    isObscured: bool = ...,
    label: Queryable[str] = ...,
    label1: Queryable[str] = ...,
    label2: Queryable[str] = ...,
    label3: Queryable[str] = ...,
    label4: Queryable[str] = ...,
    labelArray2: Queryable[Tuple[str, str]] = ...,
    labelArray3: Queryable[Tuple[str, str, str]] = ...,
    labelArray4: Queryable[Tuple[str, str, str, str]] = ...,
    manage: bool = ...,
    noBackground: bool = ...,
    numberOfCheckBoxes: int = ...,
    numberOfPopupMenus: bool = ...,
    offCommand: Callable[..., Any] = ...,
    offCommand1: Callable[..., Any] = ...,
    offCommand2: Callable[..., Any] = ...,
    offCommand3: Callable[..., Any] = ...,
    offCommand4: Callable[..., Any] = ...,
    onCommand: Callable[..., Any] = ...,
    onCommand1: Callable[..., Any] = ...,
    onCommand2: Callable[..., Any] = ...,
    onCommand3: Callable[..., Any] = ...,
    onCommand4: Callable[..., Any] = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    rowAttach: Multiuse[Tuple[int, str, int]] = ...,
    statusBarMessage: str = ...,
    useTemplate: str = ...,
    value1: bool = ...,
    value2: bool = ...,
    value3: bool = ...,
    value4: bool = ...,
    valueArray2: Queryable[Tuple[bool, bool]] = ...,
    valueArray3: Queryable[Tuple[bool, bool, bool]] = ...,
    valueArray4: Queryable[Tuple[bool, bool, bool, bool]] = ...,
    vertical: bool = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[
    str,
    Tuple[float, float, float],
    bool,
    int,
    Tuple[str, str],
    Tuple[str, str, str],
    Tuple[str, str, str, str],
    Tuple[bool, bool],
    Tuple[bool, bool, bool],
    Tuple[bool, bool, bool, bool],
    Callable[..., Any],
]: ...
def checkDefaultRenderGlobals(arg0: str = ..., /) -> bool: ...
def choice(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    attribute: Multiuse[str] = ...,
    controlPoints: bool = ...,
    index: Queryable[int] = ...,
    name: Queryable[str] = ...,
    selector: Queryable[str] = ...,
    shape: bool = ...,
    sourceAttribute: str = ...,
    time: Multiuse[int] = ...,
) -> Union[List[str], int, str]: ...
def circle(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    center: Queryable[Tuple[float, float, float]] = ...,
    centerX: Queryable[float] = ...,
    centerY: Queryable[float] = ...,
    centerZ: Queryable[float] = ...,
    degree: Queryable[int] = ...,
    first: Queryable[Tuple[float, float, float]] = ...,
    firstPointX: Queryable[float] = ...,
    firstPointY: Queryable[float] = ...,
    firstPointZ: Queryable[float] = ...,
    fixCenter: bool = ...,
    nodeState: Queryable[int] = ...,
    normal: Queryable[Tuple[float, float, float]] = ...,
    normalX: Queryable[float] = ...,
    normalY: Queryable[float] = ...,
    normalZ: Queryable[float] = ...,
    radius: Queryable[float] = ...,
    sections: Queryable[int] = ...,
    sweep: Queryable[float] = ...,
    tolerance: Queryable[float] = ...,
    useTolerance: bool = ...,
    constructionHistory: bool = ...,
    name: str = ...,
    object: bool = ...,
) -> Union[List[str], bool, Tuple[float, float, float], float, int]: ...
def circularFillet(
    arg0: str = ...,
    arg1: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    nodeState: Queryable[int] = ...,
    positionTolerance: Queryable[float] = ...,
    primaryRadius: Queryable[float] = ...,
    secondaryRadius: Queryable[float] = ...,
    tangentTolerance: Queryable[float] = ...,
    constructionHistory: bool = ...,
    curveOnSurface: bool = ...,
    name: str = ...,
    object: bool = ...,
) -> Union[List[str], bool, int, float]: ...
def clearCache(
    *args: str, allNodes: bool = ..., computed: bool = ..., dirty: bool = ...
) -> int: ...
def clearDynStartState() -> None: ...
def clearNClothStartState() -> None: ...
def clearShear(*args: str) -> None: ...
def clip(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    absolute: bool = ...,
    absoluteRotations: bool = ...,
    active: Queryable[str] = ...,
    addTrack: bool = ...,
    allAbsolute: bool = ...,
    allClips: bool = ...,
    allRelative: bool = ...,
    allSourceClips: bool = ...,
    animCurveRange: bool = ...,
    character: bool = ...,
    constraint: bool = ...,
    copy: bool = ...,
    defaultAbsolute: bool = ...,
    duplicate: bool = ...,
    endTime: Queryable[int] = ...,
    expression: bool = ...,
    ignoreSubcharacters: bool = ...,
    isolate: bool = ...,
    leaveOriginal: bool = ...,
    mapMethod: str = ...,
    name: Queryable[Multiuse[str]] = ...,
    newName: str = ...,
    paste: bool = ...,
    pasteInstance: bool = ...,
    remove: bool = ...,
    removeTrack: bool = ...,
    rotationOffset: Queryable[Tuple[float, float, float]] = ...,
    rotationsAbsolute: bool = ...,
    scheduleClip: bool = ...,
    sourceClipName: bool = ...,
    split: int = ...,
    startTime: Queryable[int] = ...,
    translationOffset: Queryable[Tuple[float, float, float]] = ...,
    useChannel: Multiuse[str] = ...,
) -> Union[List[str], str, bool, int, Multiuse[str], Tuple[float, float, float]]: ...
def clipEditor(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    allTrackHeights: int = ...,
    autoFit: Queryable[str] = ...,
    autoFitTime: Queryable[str] = ...,
    clipDropCmd: str = ...,
    clipStyle: Queryable[int] = ...,
    control: bool = ...,
    defineTemplate: str = ...,
    deleteCmd: str = ...,
    deselectAll: bool = ...,
    displayActiveKeyTangents: str = ...,
    displayActiveKeys: str = ...,
    displayInfinities: str = ...,
    displayKeys: str = ...,
    displayTangents: str = ...,
    displayValues: str = ...,
    docTag: Queryable[str] = ...,
    exists: bool = ...,
    filter: Queryable[str] = ...,
    forceMainConnection: Queryable[str] = ...,
    frameAll: bool = ...,
    frameRange: Queryable[Tuple[float, float]] = ...,
    highlightConnection: Queryable[str] = ...,
    highlightedBlend: Queryable[Tuple[str, str]] = ...,
    highlightedClip: Queryable[Tuple[str, str]] = ...,
    initialized: bool = ...,
    listAllCharacters: bool = ...,
    listCurrentCharacters: bool = ...,
    lockMainConnection: bool = ...,
    lookAt: str = ...,
    mainListConnection: Queryable[str] = ...,
    manageSequencer: bool = ...,
    menuContext: Queryable[str] = ...,
    panel: Queryable[str] = ...,
    parent: Queryable[str] = ...,
    selectBlend: Queryable[Tuple[str, str, str]] = ...,
    selectClip: Queryable[Tuple[str, str]] = ...,
    selectionConnection: Queryable[str] = ...,
    snapTime: Queryable[str] = ...,
    snapValue: Queryable[str] = ...,
    stateString: bool = ...,
    unParent: bool = ...,
    unlockMainConnection: bool = ...,
    updateMainConnection: bool = ...,
    useTemplate: str = ...,
) -> Union[
    str, int, bool, Tuple[float, float], Tuple[str, str], Tuple[str, str, str]
]: ...
def clipEditorCurrentTimeCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    exists: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    name: str = ...,
) -> str: ...
def clipMatching(
    *args: str,
    clipDst: Tuple[str, float] = ...,
    clipSrc: Tuple[str, float] = ...,
    matchRotation: int = ...,
    matchTranslation: int = ...,
) -> bool: ...
def clipSchedule(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    allAbsolute: bool = ...,
    allRelative: bool = ...,
    blend: Queryable[Tuple[int, int]] = ...,
    blendNode: Queryable[Tuple[int, int]] = ...,
    blendUsingNode: str = ...,
    character: bool = ...,
    clipIndex: Queryable[int] = ...,
    cycle: Queryable[float] = ...,
    defaultAbsolute: bool = ...,
    enable: bool = ...,
    group: bool = ...,
    groupIndex: Multiuse[int] = ...,
    groupName: Queryable[str] = ...,
    hold: Queryable[int] = ...,
    insertTrack: int = ...,
    instance: str = ...,
    listCurves: bool = ...,
    listPairs: bool = ...,
    lock: bool = ...,
    mute: bool = ...,
    name: Queryable[str] = ...,
    postCycle: Queryable[float] = ...,
    preCycle: Queryable[float] = ...,
    remove: bool = ...,
    removeBlend: Tuple[int, int] = ...,
    removeEmptyTracks: bool = ...,
    removeTrack: int = ...,
    rotationsAbsolute: bool = ...,
    scale: Queryable[float] = ...,
    shift: int = ...,
    shiftIndex: Multiuse[int] = ...,
    solo: bool = ...,
    sourceClipName: bool = ...,
    sourceEnd: Queryable[int] = ...,
    sourceStart: Queryable[int] = ...,
    start: Queryable[int] = ...,
    track: Queryable[int] = ...,
    weight: Queryable[float] = ...,
    weightStyle: Queryable[int] = ...,
) -> Union[str, bool, Tuple[int, int], int, float]: ...
def clipSchedulerOutliner(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    clipScheduler: str = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    isObscured: bool = ...,
    manage: bool = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    statusBarMessage: str = ...,
    useTemplate: str = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[str, Tuple[float, float, float], bool, int, Callable[..., Any]]: ...
def closeCurve(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    blendBias: Queryable[float] = ...,
    blendKnotInsertion: bool = ...,
    caching: bool = ...,
    nodeState: Queryable[int] = ...,
    parameter: Queryable[float] = ...,
    preserveShape: Queryable[int] = ...,
    constructionHistory: bool = ...,
    curveOnSurface: bool = ...,
    name: str = ...,
    object: bool = ...,
    replaceOriginal: bool = ...,
) -> Union[List[str], float, bool, int]: ...
def closeSurface(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    blendBias: Queryable[float] = ...,
    blendKnotInsertion: bool = ...,
    caching: bool = ...,
    direction: Queryable[int] = ...,
    nodeState: Queryable[int] = ...,
    parameter: Queryable[float] = ...,
    preserveShape: Queryable[int] = ...,
    constructionHistory: bool = ...,
    name: str = ...,
    object: bool = ...,
    replaceOriginal: bool = ...,
) -> Union[List[str], float, bool, int]: ...
def cluster(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    after: bool = ...,
    afterReference: bool = ...,
    before: bool = ...,
    bindState: bool = ...,
    components: bool = ...,
    deformerTools: bool = ...,
    dumpInfo: bool = ...,
    envelope: Queryable[float] = ...,
    exclusive: Queryable[str] = ...,
    fixedSetupData: str = ...,
    frontOfChain: bool = ...,
    geometry: Queryable[Multiuse[str]] = ...,
    geometryIndices: bool = ...,
    ignoreSelected: bool = ...,
    includeHiddenSelections: bool = ...,
    name: str = ...,
    parallel: bool = ...,
    prune: bool = ...,
    relative: bool = ...,
    remove: Multiuse[bool] = ...,
    resetGeometry: bool = ...,
    selectedComponents: bool = ...,
    split: bool = ...,
    useComponentTags: bool = ...,
    weightedNode: Queryable[Tuple[str, str]] = ...,
) -> Union[List[str], bool, float, str, Multiuse[str], Tuple[str, str]]: ...
def cmdFileOutput(
    *,
    query: bool = ...,
    close: int = ...,
    closeAll: bool = ...,
    open: str = ...,
    status: Queryable[int] = ...,
) -> int: ...
def cmdScrollFieldExecuter(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    annotation: Queryable[str] = ...,
    appendText: str = ...,
    autoCloseBraces: bool = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    clear: bool = ...,
    commandCompletion: bool = ...,
    copySelection: bool = ...,
    currentLine: Queryable[int] = ...,
    cutSelection: bool = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    execute: bool = ...,
    executeAll: bool = ...,
    exists: bool = ...,
    fileChangedCommand: Callable[..., Any] = ...,
    filename: bool = ...,
    filterKeyPress: Queryable[Callable[..., Any]] = ...,
    fullPathName: bool = ...,
    hasFocus: bool = ...,
    hasSelection: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    insertText: str = ...,
    isObscured: bool = ...,
    load: bool = ...,
    loadContents: str = ...,
    loadFile: str = ...,
    manage: bool = ...,
    modificationChangedCommand: Callable[..., Any] = ...,
    modified: bool = ...,
    noBackground: bool = ...,
    numberOfLines: Queryable[int] = ...,
    numberOfPopupMenus: bool = ...,
    objectPathCompletion: bool = ...,
    parent: Queryable[str] = ...,
    pasteSelection: bool = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    redo: bool = ...,
    removeStoredContents: str = ...,
    replaceAll: Tuple[str, str] = ...,
    saveFile: str = ...,
    saveSelection: str = ...,
    saveSelectionToShelf: bool = ...,
    searchAndSelect: bool = ...,
    searchDown: bool = ...,
    searchMatchCase: bool = ...,
    searchString: Queryable[str] = ...,
    searchWraps: bool = ...,
    select: Tuple[int, int] = ...,
    selectAll: bool = ...,
    selectedText: bool = ...,
    showLineNumbers: bool = ...,
    showTabsAndSpaces: bool = ...,
    showTooltipHelp: bool = ...,
    source: bool = ...,
    sourceType: Queryable[str] = ...,
    spacesPerTab: Queryable[int] = ...,
    statusBarMessage: str = ...,
    storeContents: str = ...,
    tabsForIndent: bool = ...,
    text: Queryable[str] = ...,
    textLength: bool = ...,
    undo: bool = ...,
    useTemplate: str = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[str, bool, Tuple[float, float, float], int, Callable[..., Any]]: ...
def cmdScrollFieldReporter(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    clear: bool = ...,
    copySelection: bool = ...,
    cutSelection: bool = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    echoAllCommands: bool = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    filterSourceType: Queryable[str] = ...,
    fullPathName: bool = ...,
    hasFocus: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    isObscured: bool = ...,
    lineNumbers: bool = ...,
    manage: bool = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    pasteSelection: bool = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    receiveFocusCommand: Callable[..., Any] = ...,
    saveSelection: str = ...,
    saveSelectionToShelf: bool = ...,
    select: Tuple[int, int] = ...,
    selectAll: bool = ...,
    stackTrace: bool = ...,
    statusBarMessage: str = ...,
    suppressErrors: bool = ...,
    suppressInfo: bool = ...,
    suppressResults: bool = ...,
    suppressStackTrace: bool = ...,
    suppressWarnings: bool = ...,
    text: Queryable[str] = ...,
    textLength: bool = ...,
    useTemplate: str = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[str, Tuple[float, float, float], bool, int, Callable[..., Any]]: ...
def cmdShell(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    clear: bool = ...,
    command: Queryable[str] = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    isObscured: bool = ...,
    manage: bool = ...,
    noBackground: bool = ...,
    numberOfHistoryLines: Queryable[int] = ...,
    numberOfPopupMenus: bool = ...,
    numberOfSavedLines: Queryable[int] = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    prompt: Queryable[str] = ...,
    statusBarMessage: str = ...,
    useTemplate: str = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[str, Tuple[float, float, float], bool, int, Callable[..., Any]]: ...
def coarsenSubdivSelectionList(*args: Any) -> bool: ...
def collision(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    friction: Queryable[float] = ...,
    name: Queryable[str] = ...,
    offset: Queryable[float] = ...,
    resilience: Queryable[float] = ...,
) -> Union[List[str], float, str]: ...
def color(
    *args: str, rgbColor: Tuple[float, float, float] = ..., userDefined: int = ...
) -> bool: ...
def colorAtPoint(
    *args: str,
    coordU: Multiuse[float] = ...,
    coordV: Multiuse[float] = ...,
    maxU: float = ...,
    maxV: float = ...,
    minU: float = ...,
    minV: float = ...,
    output: str = ...,
    samplesU: int = ...,
    samplesV: int = ...,
) -> bool: ...
def colorEditor(
    *,
    query: bool = ...,
    alpha: Queryable[float] = ...,
    hsvValue: Queryable[Tuple[float, float, float]] = ...,
    mini: bool = ...,
    parent: str = ...,
    position: Tuple[int, int] = ...,
    result: bool = ...,
    rgbValue: Queryable[Tuple[float, float, float]] = ...,
) -> Union[str, float, Tuple[float, float, float], bool]: ...
def colorIndex(
    arg0: int = ...,
    arg1: float = ...,
    arg2: float = ...,
    arg3: float = ...,
    /,
    *,
    query: bool = ...,
    active: bool = ...,
    dormant: bool = ...,
    hueSaturationValue: bool = ...,
    resetToFactory: bool = ...,
    resetToSaved: bool = ...,
    userColor: bool = ...,
) -> Union[int, bool]: ...
def colorIndexSliderGrp(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    adjustableColumn: int = ...,
    adjustableColumn2: int = ...,
    adjustableColumn3: int = ...,
    adjustableColumn4: int = ...,
    adjustableColumn5: int = ...,
    adjustableColumn6: int = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    changeCommand: Callable[..., Any] = ...,
    columnAlign: Multiuse[Tuple[int, str]] = ...,
    columnAlign2: Tuple[str, str] = ...,
    columnAlign3: Tuple[str, str, str] = ...,
    columnAlign4: Tuple[str, str, str, str] = ...,
    columnAlign5: Tuple[str, str, str, str, str] = ...,
    columnAlign6: Tuple[str, str, str, str, str, str] = ...,
    columnAttach: Multiuse[Tuple[int, str, int]] = ...,
    columnAttach2: Tuple[str, str] = ...,
    columnAttach3: Tuple[str, str, str] = ...,
    columnAttach4: Tuple[str, str, str, str] = ...,
    columnAttach5: Tuple[str, str, str, str, str] = ...,
    columnAttach6: Tuple[str, str, str, str, str, str] = ...,
    columnOffset2: Tuple[int, int] = ...,
    columnOffset3: Tuple[int, int, int] = ...,
    columnOffset4: Tuple[int, int, int, int] = ...,
    columnOffset5: Tuple[int, int, int, int, int] = ...,
    columnOffset6: Tuple[int, int, int, int, int, int] = ...,
    columnWidth: Multiuse[Tuple[int, int]] = ...,
    columnWidth1: int = ...,
    columnWidth2: Tuple[int, int] = ...,
    columnWidth3: Tuple[int, int, int] = ...,
    columnWidth4: Tuple[int, int, int, int] = ...,
    columnWidth5: Tuple[int, int, int, int, int] = ...,
    columnWidth6: Tuple[int, int, int, int, int, int] = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dragCommand: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    extraLabel: Queryable[str] = ...,
    forceDragRefresh: bool = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    invisible: Queryable[int] = ...,
    isObscured: bool = ...,
    label: Queryable[str] = ...,
    manage: bool = ...,
    maxValue: Queryable[int] = ...,
    minValue: Queryable[int] = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    rowAttach: Multiuse[Tuple[int, str, int]] = ...,
    statusBarMessage: str = ...,
    useTemplate: str = ...,
    value: Queryable[int] = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[str, Tuple[float, float, float], bool, int, Callable[..., Any]]: ...
def colorInputWidgetGrp(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    adjustableColumn: int = ...,
    adjustableColumn2: int = ...,
    adjustableColumn3: int = ...,
    adjustableColumn4: int = ...,
    adjustableColumn5: int = ...,
    adjustableColumn6: int = ...,
    alphaValue: Queryable[float] = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    changeCommand: Callable[..., Any] = ...,
    columnAlign: Multiuse[Tuple[int, str]] = ...,
    columnAlign2: Tuple[str, str] = ...,
    columnAlign3: Tuple[str, str, str] = ...,
    columnAlign4: Tuple[str, str, str, str] = ...,
    columnAlign5: Tuple[str, str, str, str, str] = ...,
    columnAlign6: Tuple[str, str, str, str, str, str] = ...,
    columnAttach: Multiuse[Tuple[int, str, int]] = ...,
    columnAttach2: Tuple[str, str] = ...,
    columnAttach3: Tuple[str, str, str] = ...,
    columnAttach4: Tuple[str, str, str, str] = ...,
    columnAttach5: Tuple[str, str, str, str, str] = ...,
    columnAttach6: Tuple[str, str, str, str, str, str] = ...,
    columnOffset2: Tuple[int, int] = ...,
    columnOffset3: Tuple[int, int, int] = ...,
    columnOffset4: Tuple[int, int, int, int] = ...,
    columnOffset5: Tuple[int, int, int, int, int] = ...,
    columnOffset6: Tuple[int, int, int, int, int, int] = ...,
    columnWidth: Multiuse[Tuple[int, int]] = ...,
    columnWidth1: int = ...,
    columnWidth2: Tuple[int, int] = ...,
    columnWidth3: Tuple[int, int, int] = ...,
    columnWidth4: Tuple[int, int, int, int] = ...,
    columnWidth5: Tuple[int, int, int, int, int] = ...,
    columnWidth6: Tuple[int, int, int, int, int, int] = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    forceDragRefresh: bool = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    hsvValue: Queryable[Tuple[float, float, float]] = ...,
    isObscured: bool = ...,
    label: Queryable[str] = ...,
    manage: bool = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    rgbValue: Queryable[Tuple[float, float, float]] = ...,
    rowAttach: Multiuse[Tuple[int, str, int]] = ...,
    statusBarMessage: str = ...,
    useTemplate: str = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[str, float, Tuple[float, float, float], bool, int, Callable[..., Any]]: ...
def colorManagementCatalog(
    *,
    addTransform: str = ...,
    editUserTransformPath: str = ...,
    listSupportedExtensions: bool = ...,
    listTransformConnections: bool = ...,
    path: str = ...,
    queryUserTransformPath: bool = ...,
    removeTransform: str = ...,
    transformConnection: str = ...,
    type: str = ...,
) -> bool: ...
def colorManagementConvert(
    *, toDisplaySpace: Tuple[float, float, float] = ...
) -> bool: ...
def colorManagementFileRules(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    addRule: str = ...,
    colorSpace: Queryable[str] = ...,
    colorSpaceDescription: str = ...,
    colorSpaceFamilies: str = ...,
    colorSpaceNames: bool = ...,
    down: str = ...,
    enabled: bool = ...,
    evaluate: str = ...,
    extension: Queryable[str] = ...,
    listRules: bool = ...,
    load: bool = ...,
    moveUp: str = ...,
    pattern: Queryable[str] = ...,
    remove: str = ...,
    restoreDefaults: bool = ...,
    save: bool = ...,
) -> Union[bool, str]: ...
def colorManagementPrefs(
    *,
    edit: bool = ...,
    query: bool = ...,
    cmConfigFileEnabled: bool = ...,
    cmEnabled: bool = ...,
    colorManageAllNodes: bool = ...,
    colorManagePots: bool = ...,
    colorManagedNodes: bool = ...,
    colorManagementSDKVersion: Queryable[str] = ...,
    configFilePath: Queryable[str] = ...,
    configFileVersion: Queryable[str] = ...,
    defaultInputSpaceName: Queryable[str] = ...,
    displayName: Queryable[str] = ...,
    displayNames: bool = ...,
    equalsToPolicyFile: str = ...,
    exportPolicy: str = ...,
    inhibitEvents: bool = ...,
    inputSpaceDescription: str = ...,
    inputSpaceFamilies: str = ...,
    inputSpaceNames: bool = ...,
    loadPolicy: str = ...,
    loadedDefaultInputSpaceName: Queryable[str] = ...,
    loadedDisplayName: Queryable[str] = ...,
    loadedOutputTransformName: Queryable[str] = ...,
    loadedRenderingSpaceName: Queryable[str] = ...,
    loadedViewName: Queryable[str] = ...,
    loadedViewTransformName: Queryable[str] = ...,
    missingColorSpaceNodes: bool = ...,
    ocioRulesEnabled: bool = ...,
    ociov2Enabled: bool = ...,
    outputTarget: str = ...,
    outputTransformEnabled: bool = ...,
    outputTransformName: Queryable[str] = ...,
    outputTransformNames: bool = ...,
    outputTransformUseColorConversion: bool = ...,
    outputUseViewTransform: bool = ...,
    policyFileName: Queryable[str] = ...,
    popupOnError: bool = ...,
    refresh: bool = ...,
    renderingSpaceName: Queryable[str] = ...,
    renderingSpaceNames: bool = ...,
    restoreDefaults: bool = ...,
    viewDisplayNames: str = ...,
    viewName: Queryable[str] = ...,
    viewNames: bool = ...,
    viewTransformName: Queryable[str] = ...,
    viewTransformNames: bool = ...,
) -> Union[bool, str]: ...
def colorSliderButtonGrp(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    adjustableColumn: int = ...,
    adjustableColumn2: int = ...,
    adjustableColumn3: int = ...,
    adjustableColumn4: int = ...,
    adjustableColumn5: int = ...,
    adjustableColumn6: int = ...,
    alphaValue: Queryable[float] = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    buttonCommand: Callable[..., Any] = ...,
    buttonLabel: Queryable[str] = ...,
    changeCommand: Callable[..., Any] = ...,
    columnAlign: Multiuse[Tuple[int, str]] = ...,
    columnAlign2: Tuple[str, str] = ...,
    columnAlign3: Tuple[str, str, str] = ...,
    columnAlign4: Tuple[str, str, str, str] = ...,
    columnAlign5: Tuple[str, str, str, str, str] = ...,
    columnAlign6: Tuple[str, str, str, str, str, str] = ...,
    columnAttach: Multiuse[Tuple[int, str, int]] = ...,
    columnAttach2: Tuple[str, str] = ...,
    columnAttach3: Tuple[str, str, str] = ...,
    columnAttach4: Tuple[str, str, str, str] = ...,
    columnAttach5: Tuple[str, str, str, str, str] = ...,
    columnAttach6: Tuple[str, str, str, str, str, str] = ...,
    columnOffset2: Tuple[int, int] = ...,
    columnOffset3: Tuple[int, int, int] = ...,
    columnOffset4: Tuple[int, int, int, int] = ...,
    columnOffset5: Tuple[int, int, int, int, int] = ...,
    columnOffset6: Tuple[int, int, int, int, int, int] = ...,
    columnWidth: Multiuse[Tuple[int, int]] = ...,
    columnWidth1: int = ...,
    columnWidth2: Tuple[int, int] = ...,
    columnWidth3: Tuple[int, int, int] = ...,
    columnWidth4: Tuple[int, int, int, int] = ...,
    columnWidth5: Tuple[int, int, int, int, int] = ...,
    columnWidth6: Tuple[int, int, int, int, int, int] = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dragCommand: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    forceDragRefresh: bool = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    hsvValue: Queryable[Tuple[float, float, float]] = ...,
    image: Queryable[str] = ...,
    isObscured: bool = ...,
    label: Queryable[str] = ...,
    manage: bool = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    rgbValue: Queryable[Tuple[float, float, float]] = ...,
    rowAttach: Multiuse[Tuple[int, str, int]] = ...,
    statusBarMessage: str = ...,
    symbolButtonCommand: Callable[..., Any] = ...,
    symbolButtonDisplay: bool = ...,
    useDisplaySpace: bool = ...,
    useTemplate: str = ...,
    useVpColorPicker: bool = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[str, float, Tuple[float, float, float], bool, int, Callable[..., Any]]: ...
def colorSliderGrp(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    adjustableColumn: int = ...,
    adjustableColumn2: int = ...,
    adjustableColumn3: int = ...,
    adjustableColumn4: int = ...,
    adjustableColumn5: int = ...,
    adjustableColumn6: int = ...,
    alphaValue: Queryable[float] = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    changeCommand: Callable[..., Any] = ...,
    columnAlign: Multiuse[Tuple[int, str]] = ...,
    columnAlign2: Tuple[str, str] = ...,
    columnAlign3: Tuple[str, str, str] = ...,
    columnAlign4: Tuple[str, str, str, str] = ...,
    columnAlign5: Tuple[str, str, str, str, str] = ...,
    columnAlign6: Tuple[str, str, str, str, str, str] = ...,
    columnAttach: Multiuse[Tuple[int, str, int]] = ...,
    columnAttach2: Tuple[str, str] = ...,
    columnAttach3: Tuple[str, str, str] = ...,
    columnAttach4: Tuple[str, str, str, str] = ...,
    columnAttach5: Tuple[str, str, str, str, str] = ...,
    columnAttach6: Tuple[str, str, str, str, str, str] = ...,
    columnOffset2: Tuple[int, int] = ...,
    columnOffset3: Tuple[int, int, int] = ...,
    columnOffset4: Tuple[int, int, int, int] = ...,
    columnOffset5: Tuple[int, int, int, int, int] = ...,
    columnOffset6: Tuple[int, int, int, int, int, int] = ...,
    columnWidth: Multiuse[Tuple[int, int]] = ...,
    columnWidth1: int = ...,
    columnWidth2: Tuple[int, int] = ...,
    columnWidth3: Tuple[int, int, int] = ...,
    columnWidth4: Tuple[int, int, int, int] = ...,
    columnWidth5: Tuple[int, int, int, int, int] = ...,
    columnWidth6: Tuple[int, int, int, int, int, int] = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dragCommand: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    forceDragRefresh: bool = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    hsvValue: Queryable[Tuple[float, float, float]] = ...,
    isObscured: bool = ...,
    label: Queryable[str] = ...,
    manage: bool = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    rgbValue: Queryable[Tuple[float, float, float]] = ...,
    rowAttach: Multiuse[Tuple[int, str, int]] = ...,
    statusBarMessage: str = ...,
    useDisplaySpace: bool = ...,
    useTemplate: str = ...,
    useVpColorPicker: bool = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[str, float, Tuple[float, float, float], bool, int, Callable[..., Any]]: ...
def columnLayout(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    adjustableColumn: bool = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    childArray: bool = ...,
    columnAlign: str = ...,
    columnAttach: Tuple[str, int] = ...,
    columnOffset: Tuple[str, int] = ...,
    columnWidth: Queryable[int] = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    generalSpacing: int = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    isObscured: bool = ...,
    manage: bool = ...,
    margins: int = ...,
    margins4: Tuple[int, int, int, int] = ...,
    noBackground: bool = ...,
    numberOfChildren: bool = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    rowSpacing: Queryable[int] = ...,
    statusBarMessage: str = ...,
    useTemplate: str = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[str, Tuple[float, float, float], bool, int, Callable[..., Any]]: ...
def combinationShape(
    arg0: str = ...,
    /,
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    addDriver: bool = ...,
    allDrivers: bool = ...,
    blendShape: str = ...,
    combinationTargetIndex: int = ...,
    combinationTargetName: str = ...,
    combineMethod: Queryable[int] = ...,
    driverTargetIndex: Multiuse[int] = ...,
    driverTargetName: Multiuse[str] = ...,
    exist: bool = ...,
    removeDriver: bool = ...,
) -> Union[int, bool]: ...
def commandEcho(
    *,
    query: bool = ...,
    addFilter: List[str] = ...,
    filter: Queryable[List[str]] = ...,
    lineNumbers: bool = ...,
    state: bool = ...,
) -> Union[bool, List[str]]: ...
def commandLine(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    command: Callable[..., Any] = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    enterCommand: Callable[..., Any] = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    holdFocus: bool = ...,
    inputAnnotation: Queryable[str] = ...,
    isObscured: bool = ...,
    manage: bool = ...,
    noBackground: bool = ...,
    numberOfHistoryLines: Queryable[int] = ...,
    numberOfPopupMenus: bool = ...,
    outputAnnotation: Queryable[str] = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    sourceType: Queryable[str] = ...,
    statusBarMessage: str = ...,
    useTemplate: str = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[str, Tuple[float, float, float], bool, int, Callable[..., Any]]: ...
def commandLogging(
    *,
    query: bool = ...,
    historySize: Queryable[int] = ...,
    logCommands: bool = ...,
    logFile: Queryable[str] = ...,
    recordCommands: bool = ...,
    resetLogFile: bool = ...,
) -> Union[bool, int, str]: ...
def commandPort(
    arg0: str = ...,
    /,
    *,
    query: bool = ...,
    bufferSize: int = ...,
    close: bool = ...,
    echoOutput: bool = ...,
    listPorts: bool = ...,
    name: str = ...,
    noreturn: bool = ...,
    pickleOutput: bool = ...,
    prefix: str = ...,
    returnNumCommands: bool = ...,
    securityWarning: bool = ...,
    sourceType: str = ...,
) -> bool: ...
def componentBox(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    execute: Tuple[str, bool] = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    isObscured: bool = ...,
    labelWidth: Queryable[int] = ...,
    manage: bool = ...,
    maxHeight: Queryable[int] = ...,
    maxWidth: Queryable[int] = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    precision: Queryable[int] = ...,
    preventOverride: bool = ...,
    rowHeight: int = ...,
    selectedAttr: bool = ...,
    statusBarMessage: str = ...,
    useTemplate: str = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[str, Tuple[float, float, float], bool, int, Callable[..., Any]]: ...
def componentEditor(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    control: bool = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    exists: bool = ...,
    filter: Queryable[str] = ...,
    floatField: Queryable[str] = ...,
    floatSlider: Queryable[str] = ...,
    forceMainConnection: Queryable[str] = ...,
    hidePathName: bool = ...,
    hideZeroColumns: bool = ...,
    highlightConnection: Queryable[str] = ...,
    justifyHeaders: Queryable[int] = ...,
    lockInput: bool = ...,
    lockMainConnection: bool = ...,
    mainListConnection: Queryable[str] = ...,
    newTab: Tuple[str, str, str] = ...,
    normalizeWeights: int = ...,
    operationCount: bool = ...,
    operationLabels: bool = ...,
    operationType: Queryable[int] = ...,
    panel: Queryable[str] = ...,
    parent: Queryable[str] = ...,
    precision: Queryable[int] = ...,
    removeTab: str = ...,
    selected: bool = ...,
    selectionConnection: Queryable[str] = ...,
    setOperationLabel: Tuple[int, str] = ...,
    showNamespaces: bool = ...,
    showObjects: bool = ...,
    showSelected: bool = ...,
    sortAlpha: bool = ...,
    stateString: bool = ...,
    unParent: bool = ...,
    unlockMainConnection: bool = ...,
    updateMainConnection: bool = ...,
    useTemplate: str = ...,
) -> Union[str, bool, int]: ...
def componentTag(
    *args: str,
    create: bool = ...,
    delete: bool = ...,
    injectionLocation: str = ...,
    modify: str = ...,
    newTagName: str = ...,
    queryEdit: bool = ...,
    rename: bool = ...,
    tagName: Multiuse[str] = ...,
    uniqueTagName: bool = ...,
) -> Any: ...
def condition(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    delete: bool = ...,
    dependency: Multiuse[str] = ...,
    initialize: bool = ...,
    script: str = ...,
    state: bool = ...,
) -> bool: ...
def cone(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    axis: Queryable[Tuple[float, float, float]] = ...,
    caching: bool = ...,
    degree: Queryable[int] = ...,
    endSweep: Queryable[float] = ...,
    heightRatio: Queryable[float] = ...,
    nodeState: Queryable[int] = ...,
    pivot: Queryable[Tuple[float, float, float]] = ...,
    radius: Queryable[float] = ...,
    sections: Queryable[int] = ...,
    spans: Queryable[int] = ...,
    startSweep: Queryable[float] = ...,
    tolerance: Queryable[float] = ...,
    useOldInitBehaviour: bool = ...,
    useTolerance: bool = ...,
    constructionHistory: bool = ...,
    name: str = ...,
    object: bool = ...,
    polygon: int = ...,
) -> Union[List[str], Tuple[float, float, float], bool, int, float]: ...
def confirmDialog(
    *,
    annotation: Multiuse[str] = ...,
    backgroundColor: Tuple[float, float, float] = ...,
    button: Multiuse[str] = ...,
    cancelButton: str = ...,
    defaultButton: str = ...,
    detailedMessage: str = ...,
    dismissString: str = ...,
    icon: str = ...,
    message: str = ...,
    messageAlign: str = ...,
    parent: str = ...,
    title: str = ...,
) -> str: ...
def connectAttr(
    arg0: str = ...,
    arg1: str = ...,
    /,
    *,
    force: bool = ...,
    lock: bool = ...,
    nextAvailable: bool = ...,
    referenceDest: str = ...,
) -> str: ...
def connectControl(
    arg0: str = ...,
    /,
    *args: str,
    fileName: bool = ...,
    index: int = ...,
    preventContextualMenu: bool = ...,
    preventOverride: bool = ...,
) -> bool: ...
def connectDynamic(
    *args: str,
    addScriptHandler: Callable[..., Any] = ...,
    collisions: Multiuse[str] = ...,
    delete: bool = ...,
    emitters: Multiuse[str] = ...,
    fields: Multiuse[str] = ...,
    removeScriptHandler: int = ...,
) -> str: ...
def connectJoint(
    arg0: str = ...,
    arg1: str = ...,
    /,
    *,
    connectMode: bool = ...,
    parentMode: bool = ...,
) -> bool: ...
def connectionInfo(
    arg0: str = ...,
    /,
    *,
    destinationFromSource: bool = ...,
    getExactDestination: bool = ...,
    getExactSource: bool = ...,
    getLockedAncestor: bool = ...,
    isDestination: bool = ...,
    isExactDestination: bool = ...,
    isExactSource: bool = ...,
    isLocked: bool = ...,
    isSource: bool = ...,
    sourceFromDestination: bool = ...,
) -> Union[bool, str, List[str]]: ...
def constrain(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    barrier: bool = ...,
    damping: Queryable[float] = ...,
    directionalHinge: bool = ...,
    hinge: bool = ...,
    interpenetrate: bool = ...,
    nail: bool = ...,
    name: Queryable[str] = ...,
    orientation: Queryable[Tuple[float, float, float]] = ...,
    pinConstraint: bool = ...,
    position: Queryable[Tuple[float, float, float]] = ...,
    restLength: Queryable[float] = ...,
    spring: bool = ...,
    stiffness: Queryable[float] = ...,
) -> Union[bool, float, str, Tuple[float, float, float]]: ...
def constructionHistory(*, query: bool = ..., toggle: bool = ...) -> bool: ...
def container(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    addNode: List[str] = ...,
    asset: Queryable[List[str]] = ...,
    assetMember: str = ...,
    bindAttr: Queryable[Tuple[str, str]] = ...,
    connectionList: bool = ...,
    current: bool = ...,
    fileName: List[str] = ...,
    findContainer: List[str] = ...,
    force: bool = ...,
    includeHierarchyAbove: bool = ...,
    includeHierarchyBelow: bool = ...,
    includeNetwork: bool = ...,
    includeNetworkDetails: Multiuse[str] = ...,
    includeShaders: bool = ...,
    includeShapes: bool = ...,
    includeTransform: bool = ...,
    isContainer: bool = ...,
    name: str = ...,
    nodeList: bool = ...,
    nodeNamePrefix: bool = ...,
    parentContainer: bool = ...,
    preview: bool = ...,
    publishAndBind: Tuple[str, str] = ...,
    publishAsChild: Queryable[Tuple[str, str]] = ...,
    publishAsParent: Queryable[Tuple[str, str]] = ...,
    publishAsRoot: Queryable[Tuple[str, bool]] = ...,
    publishAttr: str = ...,
    publishConnections: bool = ...,
    publishName: Queryable[str] = ...,
    removeContainer: bool = ...,
    removeNode: List[str] = ...,
    type: Queryable[str] = ...,
    unbindAndUnpublish: str = ...,
    unbindAttr: Queryable[Tuple[str, str]] = ...,
    unbindChild: str = ...,
    unbindParent: str = ...,
    unpublishChild: str = ...,
    unpublishName: str = ...,
    unpublishParent: str = ...,
    unsortedOrder: bool = ...,
) -> Union[str, List[str], Tuple[str, str], bool, Tuple[str, bool]]: ...
def containerBind(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    allNames: bool = ...,
    bindingSet: str = ...,
    bindingSetConditions: bool = ...,
    bindingSetList: bool = ...,
    force: bool = ...,
    preview: bool = ...,
) -> bool: ...
def containerProxy(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    fromTemplate: str = ...,
    type: str = ...,
) -> bool: ...
def containerPublish(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    bindNode: Queryable[Tuple[str, str]] = ...,
    bindTemplateStandins: bool = ...,
    inConnections: bool = ...,
    mergeShared: bool = ...,
    outConnections: bool = ...,
    publishNode: Queryable[Tuple[str, str]] = ...,
    unbindNode: Queryable[str] = ...,
    unpublishNode: Queryable[str] = ...,
) -> Union[bool, Tuple[str, str], str]: ...
def containerTemplate(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    addBindingSet: str = ...,
    addNames: bool = ...,
    addView: str = ...,
    allKeyable: bool = ...,
    attribute: Multiuse[str] = ...,
    attributeList: Queryable[str] = ...,
    baseName: Queryable[str] = ...,
    bindingSetList: Queryable[str] = ...,
    childAnchor: bool = ...,
    delete: bool = ...,
    expandCompounds: bool = ...,
    fromContainer: str = ...,
    fromSelection: bool = ...,
    layoutMode: int = ...,
    matchName: str = ...,
    parentAnchor: bool = ...,
    publishedNodeList: Queryable[str] = ...,
    removeBindingSet: str = ...,
    removeView: str = ...,
    rootTransform: bool = ...,
    save: bool = ...,
    searchPath: Queryable[str] = ...,
    templateList: Queryable[str] = ...,
    updateBindingSet: str = ...,
    useHierarchy: bool = ...,
    exists: bool = ...,
    fileName: Queryable[str] = ...,
    force: bool = ...,
    load: bool = ...,
    matchFile: str = ...,
    silent: bool = ...,
    unload: bool = ...,
    viewList: Queryable[str] = ...,
) -> Union[bool, str]: ...
def containerView(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    itemInfo: str = ...,
    itemList: bool = ...,
    viewDescription: bool = ...,
    viewLabel: bool = ...,
    viewList: bool = ...,
    viewName: Queryable[str] = ...,
) -> Union[bool, str]: ...
def contentBrowser(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    addContentPath: str = ...,
    context: Queryable[Union[Tuple[str], Tuple[str, str], Tuple[str, str, str]]] = ...,
    control: bool = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    exists: bool = ...,
    filter: Queryable[str] = ...,
    forceMainConnection: Queryable[str] = ...,
    highlightConnection: Queryable[str] = ...,
    location: str = ...,
    lockMainConnection: bool = ...,
    mainListConnection: Queryable[str] = ...,
    panel: Queryable[str] = ...,
    parent: Queryable[str] = ...,
    preview: bool = ...,
    refreshTreeView: bool = ...,
    removeContentPath: str = ...,
    saveCurrentContext: bool = ...,
    selectionConnection: Queryable[str] = ...,
    stateString: bool = ...,
    thumbnailView: bool = ...,
    treeView: bool = ...,
    unParent: bool = ...,
    unlockMainConnection: bool = ...,
    updateMainConnection: bool = ...,
    useTemplate: str = ...,
) -> Union[str, Union[Tuple[str], Tuple[str, str], Tuple[str, str, str]], bool]: ...
def contextInfo(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    c: bool = ...,
    escapeContext: bool = ...,
    exists: bool = ...,
    image1: bool = ...,
    image2: bool = ...,
    image3: bool = ...,
    title: bool = ...,
) -> str: ...
def control(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    isObscured: bool = ...,
    manage: bool = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    statusBarMessage: str = ...,
    useTemplate: str = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[bool, str, Tuple[float, float, float], int, Callable[..., Any]]: ...
def controller(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    allControllers: bool = ...,
    children: bool = ...,
    group: bool = ...,
    index: Queryable[int] = ...,
    isController: Queryable[str] = ...,
    parent: bool = ...,
    pickWalkDown: bool = ...,
    pickWalkLeft: bool = ...,
    pickWalkRight: bool = ...,
    pickWalkUp: bool = ...,
    unparent: bool = ...,
) -> Union[str, bool, int]: ...
def convertIffToPsd(
    *,
    query: bool = ...,
    iffFileName: Queryable[str] = ...,
    psdFileName: Queryable[str] = ...,
    xResolution: Queryable[int] = ...,
    yResolution: Queryable[int] = ...,
) -> Union[bool, str, int]: ...
def convertSolidTx(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    alpha: bool = ...,
    antiAlias: bool = ...,
    backgroundColor: Tuple[int, int, int] = ...,
    backgroundMode: str = ...,
    camera: str = ...,
    componentRange: bool = ...,
    doubleSided: bool = ...,
    fileFormat: str = ...,
    fileImageName: str = ...,
    fillTextureSeams: bool = ...,
    force: bool = ...,
    fullUvRange: bool = ...,
    name: str = ...,
    pixelFormat: str = ...,
    resolutionX: int = ...,
    resolutionY: int = ...,
    reuseDepthMap: bool = ...,
    samplePlane: bool = ...,
    samplePlaneRange: Tuple[float, float, float, float] = ...,
    shadows: bool = ...,
    uvBBoxIntersect: bool = ...,
    uvRange: Tuple[float, float, float, float] = ...,
    uvSetName: str = ...,
) -> List[str]: ...
def convertTessellation(
    *args: str, allCameras: bool = ..., camera: str = ...
) -> bool: ...
def convertUnit(*args: str, fromUnit: str = ..., toUnit: str = ...) -> float: ...
def copyAttr(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    attribute: Multiuse[str] = ...,
    containerParentChild: bool = ...,
    inConnections: bool = ...,
    keepSourceConnections: bool = ...,
    outConnections: bool = ...,
    renameTargetContainer: bool = ...,
    values: bool = ...,
) -> bool: ...
def copyDeformerWeights(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    destinationDeformer: Queryable[str] = ...,
    destinationShape: Queryable[str] = ...,
    mirrorInverse: bool = ...,
    mirrorMode: Queryable[str] = ...,
    noMirror: bool = ...,
    smooth: bool = ...,
    sourceDeformer: Queryable[str] = ...,
    sourceShape: Queryable[str] = ...,
    surfaceAssociation: Queryable[str] = ...,
    uvSpace: Queryable[Tuple[str, str]] = ...,
) -> Union[bool, str, Tuple[str, str]]: ...
def copyFlexor(*args: str) -> str: ...
def copyKey(
    *args: str,
    animLayer: str = ...,
    animation: str = ...,
    attribute: Multiuse[str] = ...,
    clipboard: str = ...,
    controlPoints: bool = ...,
    float: Multiuse[Range[float]] = ...,
    forceIndependentEulerAngles: bool = ...,
    hierarchy: str = ...,
    includeUpperBound: bool = ...,
    index: Multiuse[int] = ...,
    option: str = ...,
    shape: bool = ...,
    time: Multiuse[NullableRange[float]] = ...,
) -> int: ...
def copyNode(arg0: str = ..., arg1: str = ..., /) -> None: ...
def copySkinWeights(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    destinationSkin: Queryable[str] = ...,
    influenceAssociation: Queryable[Multiuse[str]] = ...,
    mirrorInverse: bool = ...,
    mirrorMode: Queryable[str] = ...,
    noBlendWeight: bool = ...,
    noMirror: bool = ...,
    normalize: bool = ...,
    sampleSpace: Queryable[int] = ...,
    selectedComponents: bool = ...,
    smooth: bool = ...,
    sourceSkin: Queryable[str] = ...,
    surfaceAssociation: Queryable[str] = ...,
    uvSpace: Queryable[Tuple[str, str]] = ...,
) -> Union[bool, str, Multiuse[str], int, Tuple[str, str]]: ...
def crashInfo(
    *,
    query: bool = ...,
    crashFile: bool = ...,
    crashLog: bool = ...,
    savedBeforeCrash: bool = ...,
) -> bool: ...
def crashInfoCmd(*args: Any, **kwargs: Any) -> None: ...
def createAttrPatterns(
    *, patternDefinition: str = ..., patternFile: str = ..., patternType: str = ...
) -> str: ...
def createDisplayLayer(
    *args: str,
    empty: bool = ...,
    makeCurrent: bool = ...,
    name: str = ...,
    noRecurse: bool = ...,
    number: int = ...,
) -> str: ...
def createEditor(
    arg0: str = ...,
    arg1: str = ...,
    /,
    *,
    noCloseOnDelete: bool = ...,
    queueForDelete: bool = ...,
) -> bool: ...
def createLayeredPsdFile(
    *args: Any,
    imageFileName: Multiuse[Tuple[str, str, str]] = ...,
    psdFileName: str = ...,
    xResolution: int = ...,
    yResolution: int = ...,
) -> bool: ...
def createNode(
    arg0: str = ...,
    /,
    *,
    name: str = ...,
    parent: str = ...,
    shared: bool = ...,
    skipSelect: bool = ...,
) -> str: ...
def createNurbsCircleCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    attachToSections: bool = ...,
    history: bool = ...,
    degree: int = ...,
    doDragEdit: bool = ...,
    exists: bool = ...,
    image1: str = ...,
    image2: str = ...,
    image3: str = ...,
    name: str = ...,
    normal: Tuple[float, float, float] = ...,
    normalType: int = ...,
    radius: float = ...,
    sections: int = ...,
    sweep: float = ...,
    toleranceType: int = ...,
    tolerance: float = ...,
    useTolerance: bool = ...,
) -> None: ...
def createNurbsConeCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    attachToHeightRatio: bool = ...,
    attachToSections: bool = ...,
    attachToSpans: bool = ...,
    axis: Tuple[float, float, float] = ...,
    axisType: int = ...,
    history: bool = ...,
    caps: int = ...,
    doDragEdit: bool = ...,
    endSweep: float = ...,
    exists: bool = ...,
    height: float = ...,
    image1: str = ...,
    image2: str = ...,
    image3: str = ...,
    name: str = ...,
    radius: float = ...,
    sections: int = ...,
    surfaceDegree: int = ...,
    spans: int = ...,
    startSweep: float = ...,
    toleranceType: int = ...,
    tolerance: float = ...,
    useTolerance: bool = ...,
    extraTransformOnCaps: bool = ...,
) -> None: ...
def createNurbsCubeCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    attachToPatchesU: bool = ...,
    attachToPatchesV: bool = ...,
    axis: Tuple[float, float, float] = ...,
    axisType: int = ...,
    history: bool = ...,
    depth: float = ...,
    doDragEdit: bool = ...,
    exists: bool = ...,
    height: float = ...,
    image1: str = ...,
    image2: str = ...,
    image3: str = ...,
    name: str = ...,
    surfaceDegree: int = ...,
    uPatches: int = ...,
    vPatches: int = ...,
    width: float = ...,
) -> None: ...
def createNurbsCylinderCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    attachToHeightRatio: bool = ...,
    attachToSections: bool = ...,
    attachToSpans: bool = ...,
    axis: Tuple[float, float, float] = ...,
    axisType: int = ...,
    history: bool = ...,
    caps: int = ...,
    doDragEdit: bool = ...,
    endSweep: float = ...,
    exists: bool = ...,
    height: float = ...,
    image1: str = ...,
    image2: str = ...,
    image3: str = ...,
    name: str = ...,
    radius: float = ...,
    sections: int = ...,
    surfaceDegree: int = ...,
    spans: int = ...,
    startSweep: float = ...,
    toleranceType: int = ...,
    tolerance: float = ...,
    useTolerance: bool = ...,
    extraTransformOnCaps: bool = ...,
) -> None: ...
def createNurbsPlaneCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    attachToPatchesU: bool = ...,
    attachToPatchesV: bool = ...,
    axis: Tuple[float, float, float] = ...,
    axisType: int = ...,
    history: bool = ...,
    doDragEdit: bool = ...,
    exists: bool = ...,
    height: float = ...,
    image1: str = ...,
    image2: str = ...,
    image3: str = ...,
    name: str = ...,
    surfaceDegree: int = ...,
    uPatches: int = ...,
    vPatches: int = ...,
    width: float = ...,
) -> None: ...
def createNurbsSphereCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    attachToHeightRatio: bool = ...,
    attachToSections: bool = ...,
    attachToSpans: bool = ...,
    axis: Tuple[float, float, float] = ...,
    axisType: int = ...,
    history: bool = ...,
    degree: int = ...,
    doDragEdit: bool = ...,
    endSweep: float = ...,
    exists: bool = ...,
    image1: str = ...,
    image2: str = ...,
    image3: str = ...,
    name: str = ...,
    radius: float = ...,
    sections: int = ...,
    spans: int = ...,
    startSweep: float = ...,
    toleranceType: int = ...,
    tolerance: float = ...,
    useTolerance: bool = ...,
) -> None: ...
def createNurbsSquareCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    attachToSpans: bool = ...,
    axis: Tuple[float, float, float] = ...,
    axisType: int = ...,
    history: bool = ...,
    doDragEdit: bool = ...,
    exists: bool = ...,
    height: float = ...,
    image1: str = ...,
    image2: str = ...,
    image3: str = ...,
    name: str = ...,
    surfaceDegree: int = ...,
    spans: int = ...,
    width: float = ...,
) -> None: ...
def createNurbsTorusCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    attachToHeightRatio: bool = ...,
    attachToSections: bool = ...,
    attachToSpans: bool = ...,
    axis: Tuple[float, float, float] = ...,
    axisType: int = ...,
    history: bool = ...,
    doDragEdit: bool = ...,
    endSweep: float = ...,
    exists: bool = ...,
    image1: str = ...,
    image2: str = ...,
    image3: str = ...,
    minorRadius: float = ...,
    minorSweep: float = ...,
    name: str = ...,
    radius: float = ...,
    sections: int = ...,
    surfaceDegree: int = ...,
    spans: int = ...,
    startSweep: float = ...,
    toleranceType: int = ...,
    tolerance: float = ...,
    useTolerance: bool = ...,
) -> None: ...
def createPolyConeCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    attachToSubdivisionsAxis: bool = ...,
    attachToSubdivisionsCap: bool = ...,
    attachToSubdivisionsHeight: bool = ...,
    axis: int = ...,
    history: bool = ...,
    createUVs: int = ...,
    doDragEdit: bool = ...,
    doSubdivisionsCapsEdit: bool = ...,
    exists: bool = ...,
    height: float = ...,
    image1: str = ...,
    image2: str = ...,
    image3: str = ...,
    name: str = ...,
    radius: float = ...,
    roundCap: bool = ...,
    subdivisionsDepth: int = ...,
    subdivisionsHeight: int = ...,
    subdivisionsWidth: int = ...,
) -> None: ...
def createPolyCubeCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    attachToSubdivisionsAll: bool = ...,
    attachToSubdivisionsDepth: bool = ...,
    attachToSubdivisionsHeight: bool = ...,
    attachToSubdivisionsWidth: bool = ...,
    axis: int = ...,
    history: bool = ...,
    createUVs: int = ...,
    depth: float = ...,
    doDragEdit: bool = ...,
    doSubdivisionsCapsEdit: bool = ...,
    exists: bool = ...,
    height: float = ...,
    image1: str = ...,
    image2: str = ...,
    image3: str = ...,
    name: str = ...,
    subdivisionsDepth: int = ...,
    subdivisionsHeight: int = ...,
    subdivisionsWidth: int = ...,
    width: float = ...,
) -> None: ...
def createPolyCylinderCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    attachToSubdivisionsAxis: bool = ...,
    attachToSubdivisionsCap: bool = ...,
    attachToSubdivisionsHeight: bool = ...,
    axis: int = ...,
    history: bool = ...,
    createUVs: int = ...,
    doDragEdit: bool = ...,
    doSubdivisionsCapsEdit: bool = ...,
    exists: bool = ...,
    height: float = ...,
    image1: str = ...,
    image2: str = ...,
    image3: str = ...,
    name: str = ...,
    radius: float = ...,
    roundCap: bool = ...,
    subdivisionsAxis: int = ...,
    subdivisionsCap: int = ...,
    subdivisionsHeight: int = ...,
) -> None: ...
def createPolyHelixCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    attachToNumberCoils: bool = ...,
    attachToSubdivisionsAxis: bool = ...,
    attachToSubdivisionsCap: bool = ...,
    attachToSubdivisionsCoil: bool = ...,
    attachToRadius: bool = ...,
    axis: int = ...,
    coils: float = ...,
    history: bool = ...,
    createUVs: int = ...,
    doDragEdit: bool = ...,
    direction: bool = ...,
    doSubdivisionsCapsEdit: bool = ...,
    exists: bool = ...,
    height: float = ...,
    image1: str = ...,
    image2: str = ...,
    image3: str = ...,
    name: str = ...,
    radius: float = ...,
    roundCap: bool = ...,
    subdivisionsAxis: int = ...,
    subdivisionsCap: int = ...,
    subdivisionsCoil: int = ...,
    width: float = ...,
) -> None: ...
def createPolyPipeCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    attachToSubdivisionsAxis: bool = ...,
    attachToSubdivisionsCap: bool = ...,
    attachToSubdivisionsHeight: bool = ...,
    attachToThickness: bool = ...,
    axis: int = ...,
    history: bool = ...,
    createUVs: int = ...,
    doDragEdit: bool = ...,
    doSubdivisionsCapsEdit: bool = ...,
    exists: bool = ...,
    height: float = ...,
    image1: str = ...,
    image2: str = ...,
    image3: str = ...,
    name: str = ...,
    radius: float = ...,
    roundCap: bool = ...,
    subdivisionsAxis: int = ...,
    subdivisionsCap: int = ...,
    subdivisionsHeight: int = ...,
    thickness: float = ...,
) -> None: ...
def createPolyPlaneCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    attachToSubdivisionsAll: bool = ...,
    attachToSubdivisionsHeight: bool = ...,
    attachToSubdivisionsWidth: bool = ...,
    axis: int = ...,
    history: bool = ...,
    createUVs: int = ...,
    doDragEdit: bool = ...,
    doSubdivisionsCapsEdit: bool = ...,
    exists: bool = ...,
    height: float = ...,
    image1: str = ...,
    image2: str = ...,
    image3: str = ...,
    name: str = ...,
    subdivisionsHeight: int = ...,
    subdivisionsWidth: int = ...,
    width: float = ...,
) -> None: ...
def createPolyPlatonicSolidCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    axis: int = ...,
    history: bool = ...,
    createUVs: int = ...,
    doDragEdit: bool = ...,
    doSubdivisionsCapsEdit: bool = ...,
    exists: bool = ...,
    image1: str = ...,
    image2: str = ...,
    image3: str = ...,
    name: str = ...,
    radius: float = ...,
    sideLength: float = ...,
    solidType: int = ...,
) -> None: ...
def createPolyPrismCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    attachToNumSides: bool = ...,
    attachToSubdivisionsCap: bool = ...,
    attachToSubdivisionsHeight: bool = ...,
    axis: int = ...,
    history: bool = ...,
    createUVs: int = ...,
    doDragEdit: bool = ...,
    doSubdivisionsCapsEdit: bool = ...,
    exists: bool = ...,
    image1: str = ...,
    image2: str = ...,
    image3: str = ...,
    length: float = ...,
    name: str = ...,
    numberOfSides: int = ...,
    subdivisionsCap: int = ...,
    subdivisionsHeight: int = ...,
    sideLength: float = ...,
) -> None: ...
def createPolyPyramidCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    attachToSubdivisionsCap: bool = ...,
    attachToSubdivisionsHeight: bool = ...,
    axis: int = ...,
    history: bool = ...,
    createUVs: int = ...,
    doDragEdit: bool = ...,
    doSubdivisionsCapsEdit: bool = ...,
    exists: bool = ...,
    image1: str = ...,
    image2: str = ...,
    image3: str = ...,
    name: str = ...,
    numberOfSides: int = ...,
    subdivisionsDepth: int = ...,
    subdivisionsHeight: int = ...,
    sideLength: float = ...,
) -> None: ...
def createPolySoccerBallCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    axis: int = ...,
    history: bool = ...,
    createUVs: int = ...,
    doDragEdit: bool = ...,
    doSubdivisionsCapsEdit: bool = ...,
    exists: bool = ...,
    image1: str = ...,
    image2: str = ...,
    image3: str = ...,
    name: str = ...,
    radius: float = ...,
    sideLength: float = ...,
) -> None: ...
def createPolySphereCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    attachToSubdivisionsAll: bool = ...,
    attachToSubdivisionsHeight: bool = ...,
    attachToSubdivisionsAxis: bool = ...,
    axis: int = ...,
    history: bool = ...,
    createUVs: int = ...,
    doDragEdit: bool = ...,
    doSubdivisionsCapsEdit: bool = ...,
    exists: bool = ...,
    image1: str = ...,
    image2: str = ...,
    image3: str = ...,
    name: str = ...,
    radius: float = ...,
    subdivisionsHeight: int = ...,
    subdivisionsWidth: int = ...,
) -> None: ...
def createPolyTorusCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    attachToSubdivisionsAxis: bool = ...,
    attachToSubdivisionsHeight: bool = ...,
    attachToSectionRadius: bool = ...,
    axis: int = ...,
    history: bool = ...,
    createUVs: int = ...,
    doDragEdit: bool = ...,
    doSubdivisionsCapsEdit: bool = ...,
    exists: bool = ...,
    image1: str = ...,
    image2: str = ...,
    image3: str = ...,
    name: str = ...,
    radius: float = ...,
    subdivisionsHeight: int = ...,
    sectionRadius: float = ...,
    subdivisionsWidth: int = ...,
    twist: float = ...,
) -> None: ...
def createRenderLayer(
    *args: str,
    empty: bool = ...,
    g: bool = ...,
    makeCurrent: bool = ...,
    name: str = ...,
    noRecurse: bool = ...,
    number: int = ...,
) -> str: ...
def createSubdivRegion(*args: Any) -> bool: ...
def ctxAbort() -> bool: ...
def ctxCompletion() -> bool: ...
def ctxData() -> None: ...
def ctxEditMode(*, buttonDown: bool = ..., buttonUp: bool = ...) -> bool: ...
def ctxTraverse(
    *, down: bool = ..., left: bool = ..., right: bool = ..., up: bool = ...
) -> bool: ...
def currentCtx() -> str: ...
def currentTime(
    arg0: int = ..., /, *, edit: bool = ..., query: bool = ..., update: bool = ...
) -> int: ...
def currentTimeCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    exists: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    name: str = ...,
) -> str: ...
def currentUnit(
    *args: str,
    query: bool = ...,
    angle: Queryable[str] = ...,
    fullName: bool = ...,
    linear: Queryable[str] = ...,
    time: Queryable[str] = ...,
    updateAnimation: bool = ...,
) -> Union[str, bool]: ...
def curve(
    *args: str,
    append: bool = ...,
    bezier: bool = ...,
    degree: float = ...,
    editPoint: Multiuse[Tuple[float, float, float]] = ...,
    knot: Multiuse[float] = ...,
    name: str = ...,
    objectSpace: bool = ...,
    periodic: bool = ...,
    point: Multiuse[Tuple[float, float, float]] = ...,
    pointWeight: Multiuse[Tuple[float, float, float, float]] = ...,
    replace: bool = ...,
    worldSpace: bool = ...,
) -> str: ...
def curveAddPtCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    exists: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
) -> str: ...
def curveBezierCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    history: bool = ...,
    degree: int = ...,
    exists: bool = ...,
    image1: str = ...,
    image2: str = ...,
    image3: str = ...,
    manipMode: str = ...,
    name: str = ...,
    preserveShapeFraction: float = ...,
    preserveShape: bool = ...,
    refit: bool = ...,
    selectMode: str = ...,
    uniform: bool = ...,
) -> None: ...
def curveCVCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    bezier: bool = ...,
    degree: Queryable[int] = ...,
    exists: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    multEndKnots: bool = ...,
    name: str = ...,
    preserveShape: bool = ...,
    rational: bool = ...,
    refit: bool = ...,
    symmetry: bool = ...,
    uniform: bool = ...,
) -> Union[str, bool, int]: ...
def curveEPCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    bezier: bool = ...,
    degree: Queryable[int] = ...,
    exists: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    name: str = ...,
    preserveShape: bool = ...,
    preserveShapeFraction: Queryable[float] = ...,
    refit: bool = ...,
    uniform: bool = ...,
) -> Union[str, bool, int, float]: ...
def curveEditorCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    direction: Queryable[int] = ...,
    exists: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    name: str = ...,
    relativeTangentSize: Queryable[float] = ...,
    title: Queryable[str] = ...,
) -> Union[str, int, float]: ...
def curveIntersect(
    arg0: str = ...,
    arg1: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    direction: Queryable[Tuple[float, float, float]] = ...,
    directionX: Queryable[float] = ...,
    directionY: Queryable[float] = ...,
    directionZ: Queryable[float] = ...,
    nodeState: Queryable[int] = ...,
    tolerance: Queryable[float] = ...,
    useDirection: bool = ...,
) -> Union[str, bool, Tuple[float, float, float], float, int]: ...
def curveMoveEPCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    exists: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
) -> str: ...
def curveOnSurface(
    *args: str,
    append: bool = ...,
    degree: float = ...,
    knot: Multiuse[float] = ...,
    name: str = ...,
    periodic: bool = ...,
    positionUV: Multiuse[Tuple[float, float]] = ...,
    replace: bool = ...,
) -> str: ...
def curveRGBColor(
    arg0: str = ...,
    arg1: float = ...,
    arg2: float = ...,
    arg3: float = ...,
    /,
    *,
    query: bool = ...,
    hueSaturationValue: bool = ...,
    list: bool = ...,
    listNames: bool = ...,
    remove: bool = ...,
    resetToFactory: bool = ...,
    resetToSaved: bool = ...,
) -> Union[List[float], bool]: ...
def curveSketchCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    degree: Queryable[int] = ...,
    exists: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    name: str = ...,
) -> Union[str, int]: ...
def cutKey(
    *args: str,
    animation: str = ...,
    attribute: Multiuse[str] = ...,
    clear: bool = ...,
    controlPoints: bool = ...,
    float: Multiuse[Range[float]] = ...,
    hierarchy: str = ...,
    includeUpperBound: bool = ...,
    index: Multiuse[int] = ...,
    option: str = ...,
    selectKey: bool = ...,
    shape: bool = ...,
    time: Multiuse[NullableRange[float]] = ...,
) -> int: ...
def cutView(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    annotation: str = ...,
    backgroundColor: Tuple[float, float, float] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    defineTemplate: str = ...,
    docTag: str = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    enable: bool = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    height: int = ...,
    highlightColor: Tuple[float, float, float] = ...,
    isObscured: bool = ...,
    manage: bool = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    parent: str = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    refresh: bool = ...,
    statusBarMessage: str = ...,
    useTemplate: str = ...,
    visibleChangeCommand: Callable[..., Any] = ...,
    visible: bool = ...,
    width: int = ...,
    widthHeight: Tuple[int, int] = ...,
) -> None: ...
def cycleCheck(
    *args: str,
    query: bool = ...,
    all: bool = ...,
    children: bool = ...,
    dag: bool = ...,
    evaluation: bool = ...,
    firstCycleOnly: bool = ...,
    firstPlugPerNode: bool = ...,
    lastPlugPerNode: bool = ...,
    list: bool = ...,
    listSeparator: str = ...,
    parents: bool = ...,
    secondary: bool = ...,
    timeLimit: int = ...,
) -> Union[bool, List[str]]: ...
def cylinder(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    axis: Queryable[Tuple[float, float, float]] = ...,
    caching: bool = ...,
    degree: Queryable[int] = ...,
    endSweep: Queryable[float] = ...,
    heightRatio: Queryable[float] = ...,
    nodeState: Queryable[int] = ...,
    pivot: Queryable[Tuple[float, float, float]] = ...,
    radius: Queryable[float] = ...,
    sections: Queryable[int] = ...,
    spans: Queryable[int] = ...,
    startSweep: Queryable[float] = ...,
    tolerance: Queryable[float] = ...,
    useTolerance: bool = ...,
    constructionHistory: bool = ...,
    name: str = ...,
    object: bool = ...,
    polygon: int = ...,
) -> Union[List[str], Tuple[float, float, float], bool, int, float]: ...
def dagCommandWrapper() -> None: ...
def dagObjectCompare(
    *args: str,
    attribute: bool = ...,
    bail: str = ...,
    connection: bool = ...,
    namespace: str = ...,
    relative: bool = ...,
    short: bool = ...,
    type: bool = ...,
) -> bool: ...
def dagObjectHit(
    *, cache: bool = ..., multiple: bool = ..., menu: str = ..., targetSize: int = ...
) -> None: ...
def dagPose(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    addToPose: bool = ...,
    atPose: bool = ...,
    bindPose: bool = ...,
    g: bool = ...,
    members: bool = ...,
    name: Queryable[str] = ...,
    remove: bool = ...,
    reset: bool = ...,
    restore: bool = ...,
    save: bool = ...,
    selection: bool = ...,
    worldParent: bool = ...,
) -> Union[str, bool]: ...
def dataStructure(
    *,
    query: bool = ...,
    asFile: Queryable[str] = ...,
    asString: Queryable[str] = ...,
    dataType: bool = ...,
    format: Queryable[str] = ...,
    listMemberNames: Queryable[str] = ...,
    name: Queryable[str] = ...,
    remove: bool = ...,
    removeAll: bool = ...,
) -> Union[str, List[str], bool]: ...
def date(
    *,
    date: bool = ...,
    format: str = ...,
    shortDate: bool = ...,
    shortTime: bool = ...,
    time: bool = ...,
) -> str: ...
def dbcount(
    *,
    enabled: bool = ...,
    file: str = ...,
    keyword: str = ...,
    list: bool = ...,
    maxdepth: int = ...,
    quick: bool = ...,
    reset: bool = ...,
    spreadsheet: bool = ...,
) -> bool: ...
def dbfootprint(
    *args: str,
    query: bool = ...,
    allObjects: bool = ...,
    outputFile: str = ...,
    type: Queryable[str] = ...,
) -> Union[str, List[str]]: ...
def dbmessage(
    *, file: str = ..., list: bool = ..., monitor: bool = ..., type: str = ...
) -> bool: ...
def dbpeek(
    *args: str,
    query: bool = ...,
    allObjects: bool = ...,
    argument: Multiuse[str] = ...,
    count: Queryable[int] = ...,
    evaluationGraph: bool = ...,
    operation: Queryable[str] = ...,
    outputFile: Queryable[str] = ...,
) -> Union[List[str], str, int, bool]: ...
def dbtrace(
    *,
    query: bool = ...,
    filter: Queryable[str] = ...,
    info: bool = ...,
    keyword: Queryable[Multiuse[str]] = ...,
    mark: bool = ...,
    off: bool = ...,
    output: Queryable[str] = ...,
    timed: bool = ...,
    title: str = ...,
    verbose: bool = ...,
) -> Union[bool, str, Multiuse[str]]: ...
def debug(*args: Any, **kwargs: Any) -> None: ...
def debugNamespace(*args: Any, **kwargs: Any) -> None: ...
def debugVar(*args: Any, **kwargs: Any) -> None: ...
def defaultLightListCheckBox(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    isObscured: bool = ...,
    label: str = ...,
    manage: bool = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    shadingGroup: str = ...,
    statusBarMessage: str = ...,
    useTemplate: str = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[str, Tuple[float, float, float], bool, int, Callable[..., Any]]: ...
def defaultNavigation(
    arg0: str = ...,
    arg1: str = ...,
    /,
    *,
    connectToExisting: bool = ...,
    createNew: bool = ...,
    defaultAttribute: bool = ...,
    defaultTraversal: bool = ...,
    defaultWorkingNode: bool = ...,
    delete: bool = ...,
    destination: str = ...,
    disconnect: bool = ...,
    force: bool = ...,
    ignore: bool = ...,
    navigatorDecisionString: str = ...,
    quiet: bool = ...,
    relatedNodes: bool = ...,
    source: str = ...,
    unignore: bool = ...,
) -> str: ...
def defineDataServer(
    *, device: str = ..., server: str = ..., undefine: bool = ...
) -> bool: ...
def defineVirtualDevice(
    *,
    query: bool = ...,
    axis: int = ...,
    channel: str = ...,
    clear: bool = ...,
    create: bool = ...,
    device: str = ...,
    parent: str = ...,
    undefine: bool = ...,
    usage: str = ...,
) -> bool: ...
def deformableShape(
    *args: str,
    chain: bool = ...,
    chainHistory: bool = ...,
    createOriginalGeometry: bool = ...,
    createTweakNode: bool = ...,
    createUpstreamTagInjectionNode: bool = ...,
    deformShapeInAttr: bool = ...,
    deformShapeOutAttr: bool = ...,
    frontOfChain: bool = ...,
    localShapeInAttr: bool = ...,
    localShapeOutAttr: bool = ...,
    nodeChain: bool = ...,
    originalGeometry: bool = ...,
    outputPlugChain: bool = ...,
    plugChain: bool = ...,
    supportsComponentTags: bool = ...,
    tagInjectionList: bool = ...,
    tagInjectionNode: bool = ...,
    tweakAttr: bool = ...,
    tweakNode: bool = ...,
    upstreamTagInjectionNode: bool = ...,
    worldShapeOutAttr: bool = ...,
) -> bool: ...
def deformer(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    after: bool = ...,
    afterReference: bool = ...,
    before: bool = ...,
    components: bool = ...,
    deformerTools: bool = ...,
    dumpInfo: bool = ...,
    exclusive: Queryable[str] = ...,
    fixedSetupData: str = ...,
    frontOfChain: bool = ...,
    geometry: Queryable[Multiuse[str]] = ...,
    geometryIndices: bool = ...,
    ignoreSelected: bool = ...,
    includeHiddenSelections: bool = ...,
    name: str = ...,
    parallel: bool = ...,
    prune: bool = ...,
    remove: Multiuse[bool] = ...,
    selectedComponents: bool = ...,
    split: bool = ...,
    type: str = ...,
    useComponentTags: bool = ...,
) -> Union[List[str], bool, str, Multiuse[str]]: ...
def deformerWeights(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    attribute: Queryable[Multiuse[str]] = ...,
    defaultValue: Queryable[float] = ...,
    deformer: Queryable[Multiuse[str]] = ...,
    export: bool = ...,
    format: Queryable[str] = ...,
    ignoreName: bool = ...,
    im: bool = ...,
    method: Queryable[str] = ...,
    path: Queryable[str] = ...,
    positionTolerance: Queryable[float] = ...,
    remap: Queryable[Multiuse[str]] = ...,
    shape: Queryable[Multiuse[str]] = ...,
    skip: Queryable[Multiuse[str]] = ...,
    vertexConnections: bool = ...,
    weightPrecision: Queryable[int] = ...,
    weightTolerance: Queryable[float] = ...,
    worldSpace: bool = ...,
) -> Union[str, Multiuse[str], float, bool, int]: ...
def delete(
    *args: str,
    all: bool = ...,
    attribute: Multiuse[str] = ...,
    channels: bool = ...,
    constraints: bool = ...,
    constructionHistory: bool = ...,
    controlPoints: bool = ...,
    expressions: bool = ...,
    hierarchy: str = ...,
    inputConnectionsAndNodes: bool = ...,
    motionPaths: bool = ...,
    shape: bool = ...,
    staticChannels: bool = ...,
    timeAnimationCurves: bool = ...,
    unitlessAnimationCurves: bool = ...,
) -> bool: ...
def deleteAttr(
    *args: str, edit: bool = ..., query: bool = ..., attribute: str = ...
) -> bool: ...
def deleteAttrPattern(
    *, allPatterns: bool = ..., patternName: str = ..., patternType: str = ...
) -> str: ...
def deleteExtension(
    *, attribute: str = ..., forceDelete: bool = ..., nodeType: str = ...
) -> int: ...
def deleteGeometryCache() -> None: ...
def deleteHistoryAheadOfGeomCache() -> None: ...
def deleteNclothCache() -> None: ...
def deleteUI(
    *args: str,
    collection: bool = ...,
    control: bool = ...,
    editor: bool = ...,
    layout: bool = ...,
    menu: bool = ...,
    menuItem: bool = ...,
    panel: bool = ...,
    panelConfig: bool = ...,
    radioMenuItemCollection: bool = ...,
    toolContext: bool = ...,
    uiTemplate: bool = ...,
    window: bool = ...,
) -> bool: ...
def deltaMush(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    after: bool = ...,
    afterReference: bool = ...,
    before: bool = ...,
    components: bool = ...,
    deformerTools: bool = ...,
    dumpInfo: bool = ...,
    envelope: Queryable[float] = ...,
    exclusive: Queryable[str] = ...,
    fixedSetupData: str = ...,
    frontOfChain: bool = ...,
    geometry: Queryable[Multiuse[str]] = ...,
    geometryIndices: bool = ...,
    ignoreSelected: bool = ...,
    includeHiddenSelections: bool = ...,
    inwardConstraint: Queryable[float] = ...,
    name: str = ...,
    outwardConstraint: Queryable[float] = ...,
    parallel: bool = ...,
    pinBorderVertices: bool = ...,
    prune: bool = ...,
    remove: Multiuse[bool] = ...,
    selectedComponents: bool = ...,
    smoothingIterations: Queryable[int] = ...,
    smoothingStep: Queryable[float] = ...,
    split: bool = ...,
    useComponentTags: bool = ...,
) -> Union[str, bool, float, Multiuse[str], int]: ...
def detachCurve(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    keep: Queryable[Multiuse[bool]] = ...,
    nodeState: Queryable[int] = ...,
    parameter: Queryable[Multiuse[float]] = ...,
    constructionHistory: bool = ...,
    curveOnSurface: bool = ...,
    name: str = ...,
    object: bool = ...,
    replaceOriginal: bool = ...,
) -> Union[List[str], bool, Multiuse[bool], int, Multiuse[float]]: ...
def detachDeviceAttr(
    *args: str,
    query: bool = ...,
    all: bool = ...,
    attribute: str = ...,
    axis: str = ...,
    device: str = ...,
    selection: bool = ...,
) -> bool: ...
def detachSurface(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    direction: Queryable[int] = ...,
    keep: Queryable[Multiuse[bool]] = ...,
    nodeState: Queryable[int] = ...,
    parameter: Queryable[Multiuse[float]] = ...,
    constructionHistory: bool = ...,
    name: str = ...,
    object: bool = ...,
    replaceOriginal: bool = ...,
) -> Union[List[str], bool, int, Multiuse[bool], Multiuse[float]]: ...
def deviceEditor(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    control: bool = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    exists: bool = ...,
    filter: Queryable[str] = ...,
    forceMainConnection: Queryable[str] = ...,
    highlightConnection: Queryable[str] = ...,
    lockMainConnection: bool = ...,
    mainListConnection: Queryable[str] = ...,
    panel: Queryable[str] = ...,
    parent: Queryable[str] = ...,
    selectionConnection: Queryable[str] = ...,
    stateString: bool = ...,
    takePath: Queryable[str] = ...,
    unParent: bool = ...,
    unlockMainConnection: bool = ...,
    updateMainConnection: bool = ...,
    useTemplate: str = ...,
) -> Union[str, bool]: ...
def deviceManager(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    attachment: bool = ...,
    axisCoordChanges: bool = ...,
    axisIndex: Queryable[int] = ...,
    axisName: bool = ...,
    axisOffset: bool = ...,
    axisScale: bool = ...,
    deviceIndex: Queryable[int] = ...,
    deviceNameFromIndex: Queryable[int] = ...,
    numAxis: bool = ...,
    numDevices: bool = ...,
) -> Union[bool, int]: ...
def devicePanel(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    control: bool = ...,
    copy: str = ...,
    createString: bool = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    editString: bool = ...,
    exists: bool = ...,
    init: bool = ...,
    isUnique: bool = ...,
    label: Queryable[str] = ...,
    menuBarRepeatLast: bool = ...,
    menuBarVisible: bool = ...,
    needsInit: bool = ...,
    parent: str = ...,
    popupMenuProcedure: Queryable[Callable[..., Any]] = ...,
    replacePanel: str = ...,
    tearOff: bool = ...,
    tearOffCopy: str = ...,
    tearOffRestore: bool = ...,
    unParent: bool = ...,
    useTemplate: str = ...,
) -> Union[str, bool, Callable[..., Any]]: ...
def dgControl(*args: Any, **kwargs: Any) -> None: ...
def dgInfo(
    *args: str,
    allNodes: bool = ...,
    connections: bool = ...,
    dirty: bool = ...,
    nodes: bool = ...,
    nonDeletable: bool = ...,
    outputFile: str = ...,
    propagation: bool = ...,
    short: bool = ...,
    size: bool = ...,
    subgraph: bool = ...,
    type: str = ...,
) -> bool: ...
def dgPerformance(*args: Any, **kwargs: Any) -> None: ...
def dgValidateCurve(*args: str, allCurves: bool = ..., verbose: bool = ...) -> int: ...
def dgcontrol(*args: Any, **kwargs: Any) -> None: ...
def dgdebug(*args: Any, **kwargs: Any) -> None: ...
def dgdirty(
    *args: str,
    query: bool = ...,
    allPlugs: bool = ...,
    clean: bool = ...,
    implicit: bool = ...,
    list: Queryable[str] = ...,
    propagation: bool = ...,
    showTiming: bool = ...,
    verbose: bool = ...,
) -> Union[List[str], int, bool, str]: ...
def dgeval(*args: str, src: bool = ..., verbose: bool = ...) -> bool: ...
def dgfilter(
    *args: Any,
    attribute: str = ...,
    list: bool = ...,
    logicalAnd: Tuple[str, str] = ...,
    logicalNot: str = ...,
    logicalOr: Tuple[str, str] = ...,
    name: str = ...,
    node: str = ...,
    nodeType: str = ...,
    plug: str = ...,
) -> Union[str, List[str], bool]: ...
def dgmodified() -> List[str]: ...
def dgstats(*args: Any, **kwargs: Any) -> None: ...
def dgtimer(
    *,
    query: bool = ...,
    combineType: bool = ...,
    hide: Queryable[Multiuse[str]] = ...,
    hierarchy: bool = ...,
    maxDisplay: Queryable[int] = ...,
    name: Queryable[str] = ...,
    noHeader: bool = ...,
    outputFile: str = ...,
    overhead: bool = ...,
    rangeLower: float = ...,
    rangeUpper: float = ...,
    reset: bool = ...,
    returnCode: Queryable[str] = ...,
    returnType: Queryable[str] = ...,
    show: Queryable[Multiuse[str]] = ...,
    sortMetric: Queryable[str] = ...,
    sortType: Queryable[str] = ...,
    threshold: Queryable[float] = ...,
    timerOff: bool = ...,
    timerOn: bool = ...,
    trace: bool = ...,
    type: Queryable[str] = ...,
    uniqueName: bool = ...,
    updateHeatMap: int = ...,
) -> Union[float, bool, Multiuse[str], int, str]: ...
def dimWhen(
    arg0: str = ...,
    arg1: str = ...,
    /,
    *,
    clear: bool = ...,
    false: bool = ...,
    true: bool = ...,
) -> bool: ...
def directConnectPath() -> None: ...
def directKeyCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    exists: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    name: str = ...,
    option: Queryable[str] = ...,
    selectedOnly: bool = ...,
) -> Union[str, bool]: ...
def directionalLight(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    decayRate: int = ...,
    discRadius: Queryable[float] = ...,
    exclusive: bool = ...,
    intensity: Queryable[float] = ...,
    name: Queryable[str] = ...,
    position: Queryable[Tuple[float, float, float]] = ...,
    rgb: Queryable[Tuple[float, float, float]] = ...,
    rotation: Queryable[Tuple[float, float, float]] = ...,
    shadowColor: Queryable[Tuple[float, float, float]] = ...,
    shadowDither: Queryable[float] = ...,
    shadowSamples: Queryable[int] = ...,
    softShadow: bool = ...,
    useRayTraceShadows: bool = ...,
) -> Union[List[float], int, str, float, bool, Tuple[float, float, float]]: ...
def dirmap(
    arg0: str = ...,
    /,
    *,
    query: bool = ...,
    convertDirectory: str = ...,
    enable: bool = ...,
    getAllMappings: bool = ...,
    getMappedDirectory: str = ...,
    mapDirectory: Tuple[str, str] = ...,
    unmapDirectory: str = ...,
) -> Union[str, None, bool]: ...
def disable(arg0: str = ..., /, *, value: bool = ...) -> bool: ...
def disableIncorrectNameWarning() -> bool: ...
def disconnectAttr(
    arg0: str = ..., arg1: str = ..., /, *, nextAvailable: bool = ...
) -> str: ...
def disconnectJoint(
    arg0: str = ..., /, *, attachHandleMode: bool = ..., deleteHandleMode: bool = ...
) -> str: ...
def diskCache(
    *,
    query: bool = ...,
    append: bool = ...,
    cacheType: Queryable[str] = ...,
    close: Queryable[str] = ...,
    closeAll: bool = ...,
    delete: Queryable[str] = ...,
    deleteAll: bool = ...,
    empty: Queryable[str] = ...,
    emptyAll: bool = ...,
    enabledCachesOnly: bool = ...,
    endTime: Queryable[int] = ...,
    frameRangeType: Queryable[str] = ...,
    overSample: bool = ...,
    samplingRate: Queryable[int] = ...,
    startTime: Queryable[int] = ...,
    tempDir: bool = ...,
) -> Union[bool, str, int]: ...
def dispatchGenericCommand(*args: Any, **kwargs: Any) -> Any: ...
def displacementToPoly(
    *args: str, edit: bool = ..., query: bool = ..., findBboxOnly: bool = ...
) -> bool: ...
def displayAffected(arg0: bool = ..., /) -> int: ...
def displayColor(
    arg0: str = ...,
    arg1: int = ...,
    /,
    *,
    query: bool = ...,
    active: bool = ...,
    create: bool = ...,
    dormant: bool = ...,
    list: bool = ...,
    queryIndex: int = ...,
    resetToFactory: bool = ...,
    resetToSaved: bool = ...,
) -> bool: ...
def displayCull(*args: str, query: bool = ..., backFaceCulling: bool = ...) -> bool: ...
def displayLevelOfDetail(*, query: bool = ..., levelOfDetail: bool = ...) -> bool: ...
def displayPref(
    *,
    query: bool = ...,
    activeObjectPivots: bool = ...,
    defaultFontSize: Queryable[int] = ...,
    displayAffected: bool = ...,
    displayGradient: bool = ...,
    fontSettingMode: Queryable[int] = ...,
    ghostFrames: Queryable[Tuple[int, int, int]] = ...,
    materialLoadingMode: Queryable[str] = ...,
    maxHardwareTextureResolution: bool = ...,
    maxTextureResolution: Queryable[int] = ...,
    purgeExistingTextures: bool = ...,
    regionOfEffect: bool = ...,
    shadeTemplates: bool = ...,
    smallFontSize: Queryable[int] = ...,
    textureDrawPixel: bool = ...,
    wireframeOnShadedActive: Queryable[str] = ...,
) -> Union[bool, int, Tuple[int, int, int], str]: ...
def displayRGBColor(
    arg0: str = ...,
    arg1: float = ...,
    arg2: float = ...,
    arg3: float = ...,
    arg4: float = ...,
    /,
    *,
    query: bool = ...,
    alpha: bool = ...,
    create: bool = ...,
    hueSaturationValue: bool = ...,
    list: bool = ...,
    resetToFactory: bool = ...,
    resetToSaved: bool = ...,
) -> Union[str, bool]: ...
def displaySmoothness(
    *args: str,
    query: bool = ...,
    all: bool = ...,
    boundary: bool = ...,
    defaultCreation: bool = ...,
    divisionsU: Queryable[int] = ...,
    divisionsV: Queryable[int] = ...,
    full: bool = ...,
    hull: bool = ...,
    pointsShaded: Queryable[int] = ...,
    pointsWire: Queryable[int] = ...,
    polygonObject: Queryable[int] = ...,
    renderTessellation: bool = ...,
    simplifyU: Queryable[int] = ...,
    simplifyV: Queryable[int] = ...,
) -> Union[bool, int]: ...
def displayStats() -> None: ...
def displayString(
    arg0: str = ...,
    arg1: str = ...,
    arg2: str = ...,
    arg3: str = ...,
    /,
    *,
    query: bool = ...,
    delete: bool = ...,
    exists: bool = ...,
    keys: bool = ...,
    replace: bool = ...,
    value: Queryable[str] = ...,
) -> Union[bool, str]: ...
def displaySurface(
    *args: str,
    query: bool = ...,
    flipNormals: bool = ...,
    twoSidedLighting: bool = ...,
    xRay: bool = ...,
) -> bool: ...
def distanceDimContext(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    exists: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    name: str = ...,
) -> str: ...
def distanceDimension(
    *args: str,
    endPoint: Tuple[float, float, float] = ...,
    startPoint: Tuple[float, float, float] = ...,
) -> str: ...
def doBlur(
    *,
    colorFile: str = ...,
    length: float = ...,
    memCapSize: float = ...,
    sharpness: float = ...,
    smooth: float = ...,
    smoothColor: bool = ...,
    vectorFile: str = ...,
) -> str: ...
def dockControl(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    allowedArea: Queryable[Multiuse[str]] = ...,
    annotation: Queryable[str] = ...,
    area: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    closeCommand: Callable[..., Any] = ...,
    content: Queryable[str] = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dockStation: str = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    enablePopupOption: bool = ...,
    exists: bool = ...,
    fixedHeight: bool = ...,
    fixedWidth: bool = ...,
    floatChangeCommand: Callable[..., Any] = ...,
    floating: bool = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    isObscured: bool = ...,
    label: Queryable[str] = ...,
    manage: bool = ...,
    moveable: bool = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    r: bool = ...,
    retain: bool = ...,
    sizeable: bool = ...,
    splitLayout: str = ...,
    state: Queryable[str] = ...,
    statusBarMessage: str = ...,
    useTemplate: str = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[
    str, Multiuse[str], Tuple[float, float, float], bool, int, Callable[..., Any]
]: ...
def dolly(
    arg0: str = ...,
    /,
    *,
    absolute: bool = ...,
    distance: float = ...,
    dollyTowardsCenter: bool = ...,
    orthoScale: float = ...,
    relative: bool = ...,
) -> bool: ...
def dollyCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    alternateContext: bool = ...,
    boxDollyType: Queryable[str] = ...,
    centerOfInterestDolly: bool = ...,
    dollyTowardsCenter: bool = ...,
    exists: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    localDolly: bool = ...,
    name: str = ...,
    orthoZoom: bool = ...,
    scale: Queryable[float] = ...,
    toolName: Queryable[str] = ...,
) -> Union[str, bool, float]: ...
def dopeSheetEditor(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    autoFit: Queryable[str] = ...,
    autoFitTime: Queryable[str] = ...,
    control: bool = ...,
    defineTemplate: str = ...,
    displayActiveKeyTangents: str = ...,
    displayActiveKeys: str = ...,
    displayInfinities: str = ...,
    displayKeys: str = ...,
    displayTangents: str = ...,
    displayValues: str = ...,
    docTag: Queryable[str] = ...,
    exists: bool = ...,
    filter: Queryable[str] = ...,
    forceMainConnection: Queryable[str] = ...,
    hierarchyBelow: bool = ...,
    highlightConnection: Queryable[str] = ...,
    highlightedAttributes: bool = ...,
    lockMainConnection: bool = ...,
    lookAt: str = ...,
    mainListConnection: Queryable[str] = ...,
    outliner: Queryable[str] = ...,
    panel: Queryable[str] = ...,
    parent: Queryable[str] = ...,
    selectionConnection: Queryable[str] = ...,
    selectionWindow: Queryable[Tuple[float, float, float, float]] = ...,
    showChannelSets: bool = ...,
    showKeyValues: bool = ...,
    showScene: bool = ...,
    showSummary: bool = ...,
    snapTime: Queryable[str] = ...,
    snapValue: Queryable[str] = ...,
    stateString: bool = ...,
    unParent: bool = ...,
    unlockMainConnection: bool = ...,
    updateMainConnection: bool = ...,
    useTemplate: str = ...,
) -> Union[str, bool, Tuple[float, float, float, float]]: ...
def doubleProfileBirailSurface(
    arg0: str = ...,
    arg1: str = ...,
    arg2: str = ...,
    /,
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    blendFactor: Queryable[float] = ...,
    caching: bool = ...,
    nodeState: Queryable[int] = ...,
    tangentContinuityProfile1: bool = ...,
    tangentContinuityProfile2: bool = ...,
    transformMode: Queryable[int] = ...,
    constructionHistory: bool = ...,
    name: str = ...,
    object: bool = ...,
    polygon: int = ...,
) -> Union[List[str], float, bool, int]: ...
def dpBirailCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    autoCreate: bool = ...,
    activeNodes: bool = ...,
    blendFactor: float = ...,
    bldProfiles: bool = ...,
    bldProfileFirst: bool = ...,
    bldProfileLast: bool = ...,
    bldRailOne: bool = ...,
    bldRailTwo: bool = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    exists: bool = ...,
    frozen: bool = ...,
    image1: str = ...,
    image2: str = ...,
    image3: str = ...,
    immediate: bool = ...,
    name: str = ...,
    nodeState: int = ...,
    object: bool = ...,
    polygon: int = ...,
    reset: bool = ...,
    transformMode: int = ...,
    toolNode: bool = ...,
    tangentContinuityProfile1: bool = ...,
    tangentContinuityProfile2: bool = ...,
) -> None: ...
def drag(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    attenuation: Queryable[float] = ...,
    directionX: Queryable[float] = ...,
    directionY: Queryable[float] = ...,
    directionZ: Queryable[float] = ...,
    magnitude: Queryable[float] = ...,
    maxDistance: Queryable[float] = ...,
    name: Queryable[str] = ...,
    perVertex: bool = ...,
    position: Queryable[Multiuse[Tuple[float, float, float]]] = ...,
    torusSectionRadius: Queryable[float] = ...,
    useDirection: bool = ...,
    volumeExclusion: bool = ...,
    volumeOffset: Queryable[Tuple[float, float, float]] = ...,
    volumeShape: Queryable[str] = ...,
    volumeSweep: Queryable[float] = ...,
) -> Union[
    str, float, bool, Multiuse[Tuple[float, float, float]], Tuple[float, float, float]
]: ...
def dragAttrContext(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    connectTo: Queryable[Multiuse[str]] = ...,
    exists: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    name: str = ...,
    reset: bool = ...,
) -> Union[str, Multiuse[str]]: ...
def draggerContext(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    anchorPoint: Queryable[Tuple[float, float, float]] = ...,
    button: Queryable[int] = ...,
    currentStep: Queryable[int] = ...,
    cursor: Queryable[str] = ...,
    dragCommand: Queryable[Callable[..., Any]] = ...,
    dragPoint: Queryable[Tuple[float, float, float]] = ...,
    drawString: str = ...,
    exists: bool = ...,
    finalize: Queryable[Callable[..., Any]] = ...,
    helpString: Queryable[str] = ...,
    history: bool = ...,
    holdCommand: Queryable[Callable[..., Any]] = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    initialize: Queryable[Callable[..., Any]] = ...,
    modifier: Queryable[str] = ...,
    name: str = ...,
    plane: Tuple[float, float, float] = ...,
    prePressCommand: Queryable[Callable[..., Any]] = ...,
    pressCommand: Queryable[Callable[..., Any]] = ...,
    projection: Queryable[str] = ...,
    releaseCommand: Queryable[Callable[..., Any]] = ...,
    snapping: bool = ...,
    space: Queryable[str] = ...,
    stepsCount: Queryable[int] = ...,
    undoMode: Queryable[str] = ...,
) -> Union[str, Tuple[float, float, float], int, Callable[..., Any], bool]: ...
def drawExtrudeFacetCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    history: bool = ...,
    degree: int = ...,
    divisions: int = ...,
    exists: bool = ...,
    facesTogether: bool = ...,
    image1: str = ...,
    image2: str = ...,
    image3: str = ...,
    name: str = ...,
) -> None: ...
def dropoffLocator(
    arg0: float = ..., arg1: float = ..., arg2: str = ..., /, *args: str
) -> List[str]: ...
def duplicate(
    *args: str,
    fullPath: bool = ...,
    inputConnections: bool = ...,
    instanceLeaf: bool = ...,
    name: str = ...,
    parentOnly: bool = ...,
    renameChildren: bool = ...,
    returnRootsOnly: bool = ...,
    smartTransform: bool = ...,
    transformsOnly: bool = ...,
    upstreamNodes: bool = ...,
) -> List[str]: ...
def duplicateCurve(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    local: bool = ...,
    maxValue: Queryable[float] = ...,
    mergeItems: bool = ...,
    minValue: Queryable[float] = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
    range: bool = ...,
    relative: bool = ...,
) -> Union[List[str], bool, float, int]: ...
def duplicateSurface(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    faceCountU: Queryable[int] = ...,
    faceCountV: Queryable[int] = ...,
    firstFaceU: Queryable[int] = ...,
    firstFaceV: Queryable[int] = ...,
    local: bool = ...,
    mergeItems: bool = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
) -> Union[List[str], bool, int]: ...
def dynCache() -> bool: ...
def dynControl() -> None: ...
def dynExport(
    *args: str,
    allObjects: bool = ...,
    attribute: Multiuse[str] = ...,
    format: str = ...,
    maxFrame: int = ...,
    minFrame: int = ...,
    onlyUpdateParticles: bool = ...,
    overSampling: int = ...,
    path: str = ...,
) -> str: ...
def dynExpression(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    creation: bool = ...,
    runtime: bool = ...,
    runtimeAfterDynamics: bool = ...,
    runtimeBeforeDynamics: bool = ...,
    string: str = ...,
) -> Union[str, bool]: ...
def dynGlobals(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    active: bool = ...,
    listAll: bool = ...,
    overSampling: Queryable[int] = ...,
) -> Union[str, int, bool]: ...
def dynPaintCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    brushDrag: float = ...,
    brushMass: float = ...,
    drawAsMesh: bool = ...,
    dragBrushSize: str = ...,
    doProject: int = ...,
    displayQuality: float = ...,
    exists: bool = ...,
    image1: str = ...,
    image2: str = ...,
    image3: str = ...,
    inputSamples: int = ...,
    paintAtDepth: bool = ...,
    pressureMapping1: int = ...,
    pressureMapping2: int = ...,
    pressureMapping3: int = ...,
    pressureMin1: float = ...,
    pressureMin2: float = ...,
    pressureMin3: float = ...,
    pressureMax1: float = ...,
    pressureMax2: float = ...,
    pressureMax3: float = ...,
    pixelMode: int = ...,
    surfaceOffset: float = ...,
    sampleSeparation: float = ...,
    setSelection: bool = ...,
    usePressure: bool = ...,
) -> None: ...
def dynPaintEditor(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    activeOnly: bool = ...,
    autoSave: bool = ...,
    camera: Queryable[str] = ...,
    canvasMode: bool = ...,
    canvasUndo: bool = ...,
    changeCommand: Queryable[Tuple[str, str, str, str]] = ...,
    clear: Tuple[float, float, float] = ...,
    control: bool = ...,
    currentCanvasSize: bool = ...,
    defineTemplate: str = ...,
    displayAppearance: Queryable[str] = ...,
    displayFog: bool = ...,
    displayImage: Queryable[int] = ...,
    displayLights: Queryable[str] = ...,
    displayStyle: Queryable[str] = ...,
    displayTextures: bool = ...,
    docTag: Queryable[str] = ...,
    doubleBuffer: bool = ...,
    drawAxis: bool = ...,
    drawContext: bool = ...,
    exists: bool = ...,
    fastUpdate: int = ...,
    fileName: Queryable[str] = ...,
    filter: Queryable[str] = ...,
    forceMainConnection: Queryable[str] = ...,
    highlightConnection: Queryable[str] = ...,
    iconGrab: bool = ...,
    loadImage: str = ...,
    lockMainConnection: bool = ...,
    mainListConnection: Queryable[str] = ...,
    menu: str = ...,
    nbImages: bool = ...,
    newImage: Queryable[Tuple[int, int, float, float, float]] = ...,
    paintAll: float = ...,
    panel: Queryable[str] = ...,
    parent: Queryable[str] = ...,
    redrawLast: bool = ...,
    refresh: bool = ...,
    refreshMode: Queryable[int] = ...,
    removeAllImages: bool = ...,
    removeImage: bool = ...,
    rollImage: Tuple[float, float] = ...,
    saveAlpha: bool = ...,
    saveBumpmap: Queryable[str] = ...,
    saveImage: bool = ...,
    scaleBlue: Queryable[float] = ...,
    scaleGreen: Queryable[float] = ...,
    scaleRed: Queryable[float] = ...,
    selectionConnection: Queryable[str] = ...,
    singleBuffer: bool = ...,
    snapShot: bool = ...,
    stateString: bool = ...,
    swap: int = ...,
    tileSize: int = ...,
    unParent: bool = ...,
    undoCache: bool = ...,
    unlockMainConnection: bool = ...,
    updateMainConnection: bool = ...,
    useTemplate: str = ...,
    wrap: Queryable[Tuple[bool, bool]] = ...,
    writeImage: str = ...,
    zoom: Queryable[float] = ...,
) -> Union[
    str,
    bool,
    Tuple[str, str, str, str],
    int,
    Tuple[int, int, float, float, float],
    float,
    Tuple[bool, bool],
]: ...
def dynParticleCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    conserve: Queryable[float] = ...,
    cursorPlacement: bool = ...,
    exists: bool = ...,
    grid: bool = ...,
    gridSpacing: Queryable[float] = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    jitterRadius: Queryable[float] = ...,
    lowerLeftX: Queryable[float] = ...,
    lowerLeftY: Queryable[float] = ...,
    lowerLeftZ: Queryable[float] = ...,
    name: str = ...,
    nucleus: bool = ...,
    numJitters: Queryable[int] = ...,
    particleName: Queryable[str] = ...,
    sketch: bool = ...,
    sketchInterval: Queryable[int] = ...,
    textPlacement: bool = ...,
    upperRightX: Queryable[float] = ...,
    upperRightY: Queryable[float] = ...,
    upperZ: Queryable[float] = ...,
) -> Union[bool, float, str, int]: ...
def dynPref(
    *,
    query: bool = ...,
    autoCreate: bool = ...,
    echoCollision: bool = ...,
    runupFrom: Queryable[int] = ...,
    runupToCurrentTime: bool = ...,
    saveOnQuit: bool = ...,
    saveRuntimeState: bool = ...,
) -> Union[bool, int]: ...
def dynSelectCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    enable: bool = ...,
    exists: bool = ...,
    image1: str = ...,
    image2: str = ...,
    image3: str = ...,
) -> None: ...
def dynTestData(*, arrayAttrs: bool = ..., verbose: bool = ...) -> None: ...
def dynWireCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    brushDrag: float = ...,
    brushMass: float = ...,
    drawAsMesh: bool = ...,
    dragBrushSize: str = ...,
    doProject: int = ...,
    displayQuality: float = ...,
    exists: bool = ...,
    image1: str = ...,
    image2: str = ...,
    image3: str = ...,
    inputSamples: int = ...,
    paintAtDepth: bool = ...,
    pressureMapping1: int = ...,
    pressureMapping2: int = ...,
    pressureMapping3: int = ...,
    pressureMin1: float = ...,
    pressureMin2: float = ...,
    pressureMin3: float = ...,
    pressureMax1: float = ...,
    pressureMax2: float = ...,
    pressureMax3: float = ...,
    pixelMode: int = ...,
    surfaceOffset: float = ...,
    sampleSeparation: float = ...,
    setSelection: bool = ...,
    usePressure: bool = ...,
) -> None: ...
def dynamicConstraintRemove() -> None: ...
def dynamicLoad(*args: str) -> bool: ...
def editDisplayLayerGlobals(
    *,
    query: bool = ...,
    baseId: Queryable[int] = ...,
    currentDisplayLayer: Queryable[str] = ...,
    mergeType: Queryable[int] = ...,
    useCurrent: bool = ...,
) -> Union[bool, str, int]: ...
def editDisplayLayerMembers(
    *args: str,
    query: bool = ...,
    clear: bool = ...,
    fullNames: bool = ...,
    noRecurse: bool = ...,
    ufeObjects: bool = ...,
) -> Union[int, List[str], bool]: ...
def editImportedStatus() -> None: ...
def editMetadata(
    *args: str,
    memberName: str = ...,
    remove: bool = ...,
    stringValue: Multiuse[str] = ...,
    value: Multiuse[float] = ...,
    channelName: Queryable[str] = ...,
    channelType: Queryable[str] = ...,
    endIndex: str = ...,
    index: Queryable[Multiuse[str]] = ...,
    indexType: Queryable[str] = ...,
    scene: bool = ...,
    startIndex: str = ...,
    streamName: Queryable[str] = ...,
) -> Union[str, Multiuse[str], bool]: ...
def editRenderLayerAdjustment(
    *args: str,
    query: bool = ...,
    attributeLog: bool = ...,
    layer: Queryable[str] = ...,
    nodeLog: bool = ...,
    remove: bool = ...,
) -> Union[int, List[str], bool, str]: ...
def editRenderLayerGlobals(
    *,
    query: bool = ...,
    baseId: Queryable[int] = ...,
    currentRenderLayer: Queryable[str] = ...,
    enableAutoAdjustments: bool = ...,
    mergeType: Queryable[int] = ...,
    useCurrent: bool = ...,
) -> Union[bool, str, int]: ...
def editRenderLayerMembers(
    *args: str,
    query: bool = ...,
    fullNames: bool = ...,
    noRecurse: bool = ...,
    remove: bool = ...,
) -> Union[int, List[str], bool]: ...
def editor(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    control: bool = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    exists: bool = ...,
    filter: Queryable[str] = ...,
    forceMainConnection: Queryable[str] = ...,
    highlightConnection: Queryable[str] = ...,
    lockMainConnection: bool = ...,
    mainListConnection: Queryable[str] = ...,
    panel: Queryable[str] = ...,
    parent: Queryable[str] = ...,
    selectionConnection: Queryable[str] = ...,
    stateString: bool = ...,
    unParent: bool = ...,
    unlockMainConnection: bool = ...,
    updateMainConnection: bool = ...,
    useTemplate: str = ...,
) -> Union[str, bool]: ...
def editorTemplate(
    *args: str,
    addAdskAssetControls: bool = ...,
    addComponents: bool = ...,
    addControl: Tuple[str, Callable[..., Any]] = ...,
    addDynamicControl: Tuple[str, Callable[..., Any]] = ...,
    addExtraControls: bool = ...,
    addSeparator: bool = ...,
    annotateFieldOnly: bool = ...,
    annotation: str = ...,
    beginLayout: str = ...,
    beginNoOptimize: bool = ...,
    beginScrollLayout: bool = ...,
    callCustom: Tuple[Callable[..., Any], Callable[..., Any]] = ...,
    collapse: bool = ...,
    debugMode: bool = ...,
    dimControl: Tuple[str, str, bool] = ...,
    endLayout: bool = ...,
    endNoOptimize: bool = ...,
    endScrollLayout: bool = ...,
    extraControlsLabel: str = ...,
    forceRebuild: bool = ...,
    interruptOptimize: bool = ...,
    label: str = ...,
    listExtraAttributes: str = ...,
    preventOverride: bool = ...,
    queryControl: Tuple[str, str] = ...,
    queryLabel: Tuple[str, str] = ...,
    queryName: Tuple[str, str] = ...,
    suppress: str = ...,
) -> str: ...
def effector(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    hide: bool = ...,
    name: Queryable[str] = ...,
) -> Union[str, bool]: ...
def emit(
    *,
    attribute: Multiuse[str] = ...,
    floatValue: Multiuse[float] = ...,
    object: str = ...,
    position: Multiuse[Tuple[float, float, float]] = ...,
    vectorValue: Multiuse[Tuple[float, float, float]] = ...,
) -> List[int]: ...
def emitter(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    alongAxis: Queryable[float] = ...,
    aroundAxis: Queryable[float] = ...,
    awayFromAxis: Queryable[float] = ...,
    awayFromCenter: Queryable[float] = ...,
    cycleEmission: Queryable[str] = ...,
    cycleInterval: Queryable[int] = ...,
    directionX: Queryable[float] = ...,
    directionY: Queryable[float] = ...,
    directionZ: Queryable[float] = ...,
    directionalSpeed: Queryable[float] = ...,
    maxDistance: Queryable[float] = ...,
    minDistance: Queryable[float] = ...,
    name: Queryable[str] = ...,
    needParentUV: bool = ...,
    normalSpeed: Queryable[float] = ...,
    position: Queryable[Multiuse[Tuple[float, float, float]]] = ...,
    randomDirection: Queryable[float] = ...,
    rate: Queryable[float] = ...,
    scaleRateByObjectSize: bool = ...,
    scaleSpeedBySize: bool = ...,
    speed: Queryable[float] = ...,
    speedRandom: Queryable[float] = ...,
    spread: Queryable[float] = ...,
    tangentSpeed: Queryable[float] = ...,
    torusSectionRadius: Queryable[float] = ...,
    type: Queryable[str] = ...,
    volumeOffset: Queryable[Tuple[float, float, float]] = ...,
    volumeShape: Queryable[str] = ...,
    volumeSweep: Queryable[float] = ...,
) -> Union[
    str,
    float,
    int,
    bool,
    Multiuse[Tuple[float, float, float]],
    Tuple[float, float, float],
]: ...
def enableDevice(
    *args: str,
    query: bool = ...,
    apply: bool = ...,
    device: Queryable[str] = ...,
    enable: bool = ...,
    monitor: bool = ...,
    record: bool = ...,
) -> Union[bool, str]: ...
def encodeString(*args: str) -> str: ...
def error(*args: str, noContext: bool = ..., showLineNumber: bool = ...) -> bool: ...
def eval(arg0: str = ..., /) -> Any: ...
def evalContinue(arg0: str = ..., /) -> None: ...
def evalDeferred(
    arg0: Callable[..., Any] = ...,
    /,
    *,
    evaluateNext: bool = ...,
    list: bool = ...,
    lowPriority: bool = ...,
    lowestPriority: bool = ...,
) -> List[str]: ...
def evalEcho() -> None: ...
def evalNoSelectNotify() -> None: ...
def evaluationManager(
    *args: str,
    query: bool = ...,
    cycleCluster: Queryable[str] = ...,
    disableInfo: Queryable[str] = ...,
    empty: bool = ...,
    enabled: bool = ...,
    fallbackTriggered: bool = ...,
    idleAction: Queryable[int] = ...,
    idleBuild: bool = ...,
    invalidate: bool = ...,
    manipulation: bool = ...,
    manipulationPrevalidation: bool = ...,
    manipulationReady: bool = ...,
    mode: Queryable[str] = ...,
    downstreamFrom: str = ...,
    nodeTypeGloballySerialize: bool = ...,
    nodeTypeParallel: bool = ...,
    nodeTypeSerialize: bool = ...,
    nodeTypeUntrusted: bool = ...,
    upstreamFrom: str = ...,
    reduceGraphRebuild: bool = ...,
    safeMode: bool = ...,
) -> Union[List[str], bool, int, List[bool], str]: ...
def evaluationManagerInternal(
    *args: str, query: bool = ..., dataSharing: bool = ..., dataTypeShare: bool = ...
) -> None: ...
def evaluator(
    *args: str,
    query: bool = ...,
    clusters: bool = ...,
    configuration: Queryable[Multiuse[str]] = ...,
    enable: bool = ...,
    info: bool = ...,
    name: Queryable[str] = ...,
    nodeType: Queryable[Multiuse[str]] = ...,
    nodeTypeChildren: bool = ...,
    priority: Queryable[int] = ...,
    valueName: Queryable[str] = ...,
) -> Union[List[str], bool, str, int, Multiuse[str]]: ...
def evaluatorInternal(
    *args: str, query: bool = ..., name: str = ..., ready: bool = ...
) -> None: ...
def event(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    count: Queryable[int] = ...,
    delete: bool = ...,
    dieAtCollision: bool = ...,
    emit: Queryable[int] = ...,
    list: bool = ...,
    name: Queryable[str] = ...,
    proc: Queryable[Callable[..., Any]] = ...,
    random: bool = ...,
    rename: Queryable[str] = ...,
    select: bool = ...,
    split: Queryable[int] = ...,
    spread: Queryable[float] = ...,
    target: Queryable[str] = ...,
) -> Union[str, int, bool, Callable[..., Any], float]: ...
def exactWorldBoundingBox(
    *args: str, calculateExactly: bool = ..., ignoreInvisible: bool = ...
) -> List[float]: ...
def excludeObjectDisplayPreset() -> str: ...
def exclusiveLightCheckBox(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    isObscured: bool = ...,
    label: str = ...,
    light: str = ...,
    manage: bool = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    statusBarMessage: str = ...,
    useTemplate: str = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[str, Tuple[float, float, float], bool, int, Callable[..., Any]]: ...
def expandedSelection(
    *args: str, depth: int = ..., expansionType: str = ...
) -> Union[str, List[str]]: ...
def exportEdits(
    *args: str,
    query: bool = ...,
    excludeHierarchy: bool = ...,
    excludeNode: Queryable[Multiuse[str]] = ...,
    exportSelected: bool = ...,
    force: bool = ...,
    includeAnimation: bool = ...,
    includeConstraints: bool = ...,
    includeDeformers: bool = ...,
    includeNetwork: bool = ...,
    includeNode: Queryable[Multiuse[str]] = ...,
    includeSetAttrs: bool = ...,
    includeSetDrivenKeys: bool = ...,
    includeShaders: bool = ...,
    selected: bool = ...,
    type: Queryable[str] = ...,
    editCommand: Queryable[Multiuse[str]] = ...,
    onReferenceNode: Queryable[Multiuse[str]] = ...,
) -> Union[List[str], bool, Multiuse[str], str]: ...
def expression(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    alwaysEvaluate: Queryable[int] = ...,
    animated: Queryable[int] = ...,
    attribute: Queryable[str] = ...,
    name: Queryable[str] = ...,
    object: Queryable[str] = ...,
    safe: bool = ...,
    shortNames: bool = ...,
    string: Queryable[str] = ...,
    timeDependent: bool = ...,
    unitConversion: Queryable[str] = ...,
) -> Union[str, int, bool]: ...
def expressionEditorListen(
    *,
    listenFile: str = ...,
    listenForAttr: str = ...,
    listenForExpression: str = ...,
    listenForName: str = ...,
    stopListenForAttr: str = ...,
    stopListenForExpression: str = ...,
    stopListenForName: str = ...,
) -> bool: ...
def extendCurve(
    arg0: str = ...,
    arg1: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    distance: Queryable[float] = ...,
    extendMethod: Queryable[int] = ...,
    extensionType: Queryable[int] = ...,
    inputPoint: Queryable[Tuple[float, float, float]] = ...,
    join: bool = ...,
    nodeState: Queryable[int] = ...,
    pointX: Queryable[float] = ...,
    pointY: Queryable[float] = ...,
    pointZ: Queryable[float] = ...,
    removeMultipleKnots: bool = ...,
    start: Queryable[int] = ...,
    constructionHistory: bool = ...,
    curveOnSurface: bool = ...,
    name: str = ...,
    noChanges: bool = ...,
    object: bool = ...,
    range: bool = ...,
    replaceOriginal: bool = ...,
) -> Union[List[str], bool, float, int, Tuple[float, float, float]]: ...
def extendFluid(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    endD: int = ...,
    endH: int = ...,
    endW: int = ...,
    startD: int = ...,
    startH: int = ...,
    startW: int = ...,
) -> None: ...
def extendSurface(
    arg0: str = ...,
    arg1: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    distance: Queryable[float] = ...,
    extendDirection: Queryable[int] = ...,
    extendMethod: Queryable[int] = ...,
    extendSide: Queryable[int] = ...,
    extensionType: Queryable[int] = ...,
    join: bool = ...,
    nodeState: Queryable[int] = ...,
    constructionHistory: bool = ...,
    name: str = ...,
    object: bool = ...,
    replaceOriginal: bool = ...,
) -> Union[List[str], bool, float, int]: ...
def extrude(
    arg0: str = ...,
    arg1: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    degreeAlongLength: Queryable[int] = ...,
    direction: Queryable[Tuple[float, float, float]] = ...,
    directionX: Queryable[float] = ...,
    directionY: Queryable[float] = ...,
    directionZ: Queryable[float] = ...,
    extrudeType: Queryable[int] = ...,
    fixedPath: bool = ...,
    length: Queryable[float] = ...,
    nodeState: Queryable[int] = ...,
    pivot: Queryable[Tuple[float, float, float]] = ...,
    reverseSurfaceIfPathReversed: bool = ...,
    rotation: Queryable[float] = ...,
    scale: Queryable[float] = ...,
    subCurveSubSurface: bool = ...,
    useComponentPivot: Queryable[int] = ...,
    useProfileNormal: bool = ...,
    constructionHistory: bool = ...,
    mergeItems: bool = ...,
    name: str = ...,
    object: bool = ...,
    polygon: int = ...,
    range: bool = ...,
    rebuild: bool = ...,
) -> Union[List[str], bool, int, Tuple[float, float, float], float]: ...
def falloffCurve(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    addControlVertex: str = ...,
    annotation: Queryable[str] = ...,
    asString: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    changeCommand: Callable[..., Any] = ...,
    currentKey: Queryable[int] = ...,
    currentKeyValue: Queryable[Tuple[float, float]] = ...,
    customCurveWidget: bool = ...,
    defineTemplate: str = ...,
    deleteControlVertex: int = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    isObscured: bool = ...,
    manage: bool = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    optionVar: Queryable[str] = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    readOnly: bool = ...,
    snapToGrid: bool = ...,
    statusBarMessage: str = ...,
    useTemplate: str = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[
    str, Tuple[float, float, float], int, Tuple[float, float], bool, Callable[..., Any]
]: ...
def falloffCurveAttr(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    addControlVertex: str = ...,
    annotation: Queryable[str] = ...,
    asString: Queryable[str] = ...,
    attribute: str = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    changeCommand: Callable[..., Any] = ...,
    currentKey: Queryable[int] = ...,
    currentKeyValue: Queryable[Tuple[float, float]] = ...,
    customCurveWidget: Queryable[int] = ...,
    defineTemplate: str = ...,
    deleteControlVertex: int = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    isObscured: bool = ...,
    manage: bool = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    readOnly: Queryable[int] = ...,
    selectedPositionControl: str = ...,
    selectedValueControl: str = ...,
    snapToGrid: Queryable[int] = ...,
    statusBarMessage: str = ...,
    useTemplate: str = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[
    str, Tuple[float, float, float], int, Tuple[float, float], bool, Callable[..., Any]
]: ...
def file(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    absoluteName: bool = ...,
    activate: bool = ...,
    activeProxy: bool = ...,
    add: bool = ...,
    anyModified: bool = ...,
    applyTo: str = ...,
    buildLoadSettings: bool = ...,
    channels: bool = ...,
    cleanReference: str = ...,
    command: Queryable[Tuple[str, str]] = ...,
    compress: bool = ...,
    constraints: bool = ...,
    constructionHistory: bool = ...,
    copyNumberList: bool = ...,
    defaultExtensions: bool = ...,
    defaultNamespace: bool = ...,
    deferReference: bool = ...,
    editCommand: str = ...,
    errorStatus: bool = ...,
    executeScriptNodes: bool = ...,
    exists: bool = ...,
    expandName: bool = ...,
    exportAll: bool = ...,
    exportAnim: bool = ...,
    exportAnimFromReference: bool = ...,
    exportAsReference: bool = ...,
    exportAsSegment: bool = ...,
    exportSelected: bool = ...,
    exportSelectedAnim: bool = ...,
    exportSelectedAnimFromReference: bool = ...,
    exportSelectedNoReference: bool = ...,
    exportSelectedStrict: bool = ...,
    exportSnapshotCallback: Tuple[Callable[..., Any], str] = ...,
    exportUnloadedReferences: bool = ...,
    expressions: bool = ...,
    fileMetaData: bool = ...,
    flushReference: str = ...,
    force: bool = ...,
    groupLocator: bool = ...,
    groupName: str = ...,
    groupReference: bool = ...,
    ignoreVersion: bool = ...,
    i: bool = ...,
    importFrameRate: bool = ...,
    importReference: bool = ...,
    importTimeRange: str = ...,
    lastFileOption: bool = ...,
    lastTempFile: bool = ...,
    list: bool = ...,
    loadAllDeferred: bool = ...,
    loadAllReferences: bool = ...,
    loadNoReferences: bool = ...,
    loadReference: Queryable[str] = ...,
    loadReferenceDepth: str = ...,
    loadReferencePreview: str = ...,
    loadSettings: str = ...,
    location: bool = ...,
    lockContainerUnpublished: bool = ...,
    lockFile: bool = ...,
    lockReference: bool = ...,
    mapPlaceHolderNamespace: Queryable[Multiuse[Tuple[str, str]]] = ...,
    mergeBaseAnimLayer: bool = ...,
    mergeNamespaceWithParent: bool = ...,
    mergeNamespaceWithRoot: bool = ...,
    mergeNamespacesOnClash: bool = ...,
    modified: bool = ...,
    moveSelected: bool = ...,
    namespace: str = ...,
    newFile: bool = ...,
    open: bool = ...,
    options: Queryable[str] = ...,
    parentNamespace: bool = ...,
    postSaveScript: str = ...,
    preSaveScript: str = ...,
    preserveName: bool = ...,
    preserveReferences: bool = ...,
    preview: bool = ...,
    prompt: bool = ...,
    proxyManager: str = ...,
    proxyTag: str = ...,
    reference: bool = ...,
    referenceDepthInfo: int = ...,
    referenceNode: Queryable[str] = ...,
    relativeNamespace: str = ...,
    removeDuplicateNetworks: bool = ...,
    removeReference: bool = ...,
    rename: str = ...,
    renameAll: bool = ...,
    renameToSave: bool = ...,
    renamingPrefix: Queryable[str] = ...,
    renamingPrefixList: bool = ...,
    replaceName: Queryable[Multiuse[Tuple[str, str]]] = ...,
    reserveNamespaces: bool = ...,
    resetError: bool = ...,
    returnNewNodes: bool = ...,
    save: bool = ...,
    saveDiskCache: Queryable[str] = ...,
    saveReference: bool = ...,
    saveReferencesUnloaded: bool = ...,
    saveTextures: Queryable[str] = ...,
    sceneName: bool = ...,
    segment: str = ...,
    selectAll: bool = ...,
    shader: bool = ...,
    sharedNodes: Multiuse[str] = ...,
    sharedReferenceFile: bool = ...,
    shortName: bool = ...,
    strict: bool = ...,
    swapNamespace: Multiuse[Tuple[str, str]] = ...,
    type: Queryable[str] = ...,
    uiConfiguration: bool = ...,
    uiLoadConfiguration: bool = ...,
    unloadReference: str = ...,
    unresolvedName: bool = ...,
    usingNamespaces: bool = ...,
    withoutCopyNumber: bool = ...,
    writable: bool = ...,
) -> Union[str, bool, Tuple[str, str], Multiuse[Tuple[str, str]]]: ...
def fileBrowserDialog(
    *,
    actionName: str = ...,
    dialogStyle: int = ...,
    fileCommand: Callable[..., Any] = ...,
    fileType: str = ...,
    filterList: Multiuse[str] = ...,
    includeName: str = ...,
    mode: int = ...,
    operationMode: str = ...,
    tipMessage: str = ...,
    windowTitle: str = ...,
) -> str: ...
def fileDialog(
    *,
    application: bool = ...,
    defaultFileName: str = ...,
    directoryMask: str = ...,
    mode: int = ...,
    title: str = ...,
) -> str: ...
def fileDialog2(
    *,
    buttonBoxOrientation: int = ...,
    cancelCaption: str = ...,
    caption: str = ...,
    dialogStyle: int = ...,
    fileFilter: str = ...,
    fileMode: int = ...,
    fileTypeChanged: Callable[..., Any] = ...,
    hideNameEdit: bool = ...,
    okCaption: str = ...,
    optionsUICancel: Callable[..., Any] = ...,
    optionsUICommit: Callable[..., Any] = ...,
    optionsUICommit2: Callable[..., Any] = ...,
    optionsUICreate: Callable[..., Any] = ...,
    optionsUIInit: Callable[..., Any] = ...,
    optionsUITitle: str = ...,
    returnFilter: bool = ...,
    selectFileFilter: str = ...,
    selectionChanged: Callable[..., Any] = ...,
    setProjectBtnEnabled: bool = ...,
    startingDirectory: str = ...,
) -> str: ...
def fileInfo(
    arg0: str = ...,
    arg1: str = ...,
    /,
    *,
    query: bool = ...,
    referenceNode: str = ...,
    remove: Queryable[str] = ...,
) -> Union[List[str], str]: ...
def filePathEditor(
    *args: str,
    query: bool = ...,
    attributeOnly: bool = ...,
    attributeType: Queryable[str] = ...,
    byType: str = ...,
    copyAndRepath: Tuple[str, str] = ...,
    deregisterType: str = ...,
    force: bool = ...,
    listDirectories: str = ...,
    listFiles: str = ...,
    listRegisteredTypes: bool = ...,
    preview: bool = ...,
    recursive: bool = ...,
    refresh: bool = ...,
    registerType: str = ...,
    relativeNames: bool = ...,
    repath: str = ...,
    replaceAll: bool = ...,
    replaceField: str = ...,
    replaceString: Tuple[str, str] = ...,
    status: bool = ...,
    temporary: bool = ...,
    typeLabel: str = ...,
    unresolved: bool = ...,
    withAttribute: bool = ...,
) -> Union[bool, str]: ...
def filletCurve(
    arg0: str = ...,
    arg1: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    bias: Queryable[float] = ...,
    blendControl: bool = ...,
    caching: bool = ...,
    circular: bool = ...,
    curveParameter1: Queryable[float] = ...,
    curveParameter2: Queryable[float] = ...,
    depth: Queryable[float] = ...,
    freeformBlend: bool = ...,
    nodeState: Queryable[int] = ...,
    radius: Queryable[float] = ...,
    constructionHistory: bool = ...,
    join: bool = ...,
    name: str = ...,
    object: bool = ...,
    replaceOriginal: bool = ...,
    trim: bool = ...,
) -> Union[List[str], float, bool, int]: ...
def filter(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    name: Queryable[str] = ...,
    type: Queryable[str] = ...,
) -> str: ...
def filterButterworthCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    apply: bool = ...,
    cutoffFrequency: Queryable[float] = ...,
    endTime: Queryable[int] = ...,
    exists: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    keepKeysOnFrame: bool = ...,
    name: str = ...,
    samplingRate: Queryable[float] = ...,
    selectedKeys: bool = ...,
    startTime: Queryable[int] = ...,
) -> Union[str, float, int, bool]: ...
def filterCurve(
    *args: str,
    cutoffFrequency: float = ...,
    endTime: int = ...,
    filter: str = ...,
    keepKeysOnFrame: bool = ...,
    kernel: str = ...,
    keySync: bool = ...,
    maxTimeStep: float = ...,
    minTimeStep: float = ...,
    period: float = ...,
    precision: float = ...,
    precisionMode: int = ...,
    preserveKeyTangent: Multiuse[str] = ...,
    sampleCount: int = ...,
    samplingRate: float = ...,
    selectedKeys: bool = ...,
    startTime: int = ...,
    timeTolerance: float = ...,
    tolerance: float = ...,
    useQuaternion: bool = ...,
    width: int = ...,
) -> int: ...
def filterExpand(
    *args: str,
    expand: bool = ...,
    fullPath: bool = ...,
    selectionMask: Multiuse[int] = ...,
    symActive: bool = ...,
    symNegative: bool = ...,
    symPositive: bool = ...,
    symSeam: bool = ...,
) -> List[str]: ...
def filterGaussianCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    apply: bool = ...,
    endTime: Queryable[int] = ...,
    exists: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    name: str = ...,
    sampleCount: Queryable[int] = ...,
    selectedKeys: bool = ...,
    startTime: Queryable[int] = ...,
    useQuaternion: bool = ...,
    width: Queryable[int] = ...,
) -> Union[str, int, bool]: ...
def filterInstances(*args: str, query: bool = ..., shapes: bool = ...) -> List[str]: ...
def filterKeyReducerCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    apply: bool = ...,
    endTime: Queryable[int] = ...,
    exists: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    keySync: bool = ...,
    name: str = ...,
    precision: Queryable[float] = ...,
    precisionMode: Queryable[int] = ...,
    preserveKeyTangent: Queryable[Multiuse[str]] = ...,
    selectedKeys: bool = ...,
    startTime: Queryable[int] = ...,
) -> Union[str, int, bool, float, Multiuse[str]]: ...
def filterPeakRemoverCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    apply: bool = ...,
    history: bool = ...,
    endTime: int = ...,
    exists: bool = ...,
    image1: str = ...,
    image2: str = ...,
    image3: str = ...,
    name: str = ...,
    startTime: int = ...,
    selectedKeys: bool = ...,
) -> None: ...
def findDeformers(*args: str) -> bool: ...
def findKeyframe(
    *args: str,
    animation: str = ...,
    attribute: Multiuse[str] = ...,
    controlPoints: bool = ...,
    curve: bool = ...,
    float: Multiuse[Range[float]] = ...,
    hierarchy: str = ...,
    includeUpperBound: bool = ...,
    index: Multiuse[int] = ...,
    shape: bool = ...,
    time: Multiuse[NullableRange[float]] = ...,
    timeSlider: bool = ...,
    which: str = ...,
) -> int: ...
def findType(
    *args: str,
    deep: bool = ...,
    exact: bool = ...,
    forward: bool = ...,
    type: str = ...,
) -> List[str]: ...
def fitBspline(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    nodeState: Queryable[int] = ...,
    tolerance: Queryable[float] = ...,
    constructionHistory: bool = ...,
    name: str = ...,
    object: bool = ...,
) -> Union[List[str], bool, int, float]: ...
def flagTest(
    arg0: str = ...,
    arg1: float = ...,
    arg2: int = ...,
    arg3: str = ...,
    /,
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    floatRange: Multiuse[Range[float]] = ...,
    int64: int = ...,
    indexRange: Multiuse[int] = ...,
    multiUse: Multiuse[Tuple[float, int, str]] = ...,
    noReport: bool = ...,
    optionalQueryArgsFlag: Tuple[float, int, str] = ...,
    pythonOptionalQueryArgsFlag: Tuple[float, int, str] = ...,
    pythonQueryArgsFlag: Tuple[float, int, str] = ...,
    queryArgsFlag: Tuple[float, int, str] = ...,
    simpleFlag: bool = ...,
    stringArrayFlag: List[str] = ...,
    stringFlag: str = ...,
    tripleFloat: Tuple[float, float, float] = ...,
    timeRange: Multiuse[NullableRange[float]] = ...,
) -> None: ...
def flexor(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    atBones: bool = ...,
    atJoints: bool = ...,
    deformerCommand: str = ...,
    list: bool = ...,
    name: str = ...,
    noScale: bool = ...,
    toSkeleton: bool = ...,
    type: str = ...,
) -> Union[List[str], bool]: ...
def floatField(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    changeCommand: Callable[..., Any] = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dragCommand: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    editable: bool = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    enterCommand: Callable[..., Any] = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    isObscured: bool = ...,
    manage: bool = ...,
    maxValue: Queryable[float] = ...,
    minValue: Queryable[float] = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    precision: Queryable[int] = ...,
    preventOverride: bool = ...,
    receiveFocusCommand: Callable[..., Any] = ...,
    showTrailingZeros: bool = ...,
    statusBarMessage: str = ...,
    step: Queryable[float] = ...,
    useTemplate: str = ...,
    value: Queryable[float] = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[str, Tuple[float, float, float], bool, int, float, Callable[..., Any]]: ...
def floatFieldGrp(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    adjustableColumn: int = ...,
    adjustableColumn2: int = ...,
    adjustableColumn3: int = ...,
    adjustableColumn4: int = ...,
    adjustableColumn5: int = ...,
    adjustableColumn6: int = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    changeCommand: Callable[..., Any] = ...,
    columnAlign: Multiuse[Tuple[int, str]] = ...,
    columnAlign2: Tuple[str, str] = ...,
    columnAlign3: Tuple[str, str, str] = ...,
    columnAlign4: Tuple[str, str, str, str] = ...,
    columnAlign5: Tuple[str, str, str, str, str] = ...,
    columnAlign6: Tuple[str, str, str, str, str, str] = ...,
    columnAttach: Multiuse[Tuple[int, str, int]] = ...,
    columnAttach2: Tuple[str, str] = ...,
    columnAttach3: Tuple[str, str, str] = ...,
    columnAttach4: Tuple[str, str, str, str] = ...,
    columnAttach5: Tuple[str, str, str, str, str] = ...,
    columnAttach6: Tuple[str, str, str, str, str, str] = ...,
    columnOffset2: Tuple[int, int] = ...,
    columnOffset3: Tuple[int, int, int] = ...,
    columnOffset4: Tuple[int, int, int, int] = ...,
    columnOffset5: Tuple[int, int, int, int, int] = ...,
    columnOffset6: Tuple[int, int, int, int, int, int] = ...,
    columnWidth: Multiuse[Tuple[int, int]] = ...,
    columnWidth1: int = ...,
    columnWidth2: Tuple[int, int] = ...,
    columnWidth3: Tuple[int, int, int] = ...,
    columnWidth4: Tuple[int, int, int, int] = ...,
    columnWidth5: Tuple[int, int, int, int, int] = ...,
    columnWidth6: Tuple[int, int, int, int, int, int] = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dragCommand: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enable1: bool = ...,
    enable2: bool = ...,
    enable3: bool = ...,
    enable4: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    extraLabel: Queryable[str] = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    isObscured: bool = ...,
    label: Queryable[str] = ...,
    manage: bool = ...,
    noBackground: bool = ...,
    numberOfFields: int = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    precision: int = ...,
    preventOverride: bool = ...,
    rowAttach: Multiuse[Tuple[int, str, int]] = ...,
    showTrailingZeros: bool = ...,
    statusBarMessage: str = ...,
    step: Queryable[float] = ...,
    useTemplate: str = ...,
    value: Queryable[Tuple[float, float, float, float]] = ...,
    value1: Queryable[float] = ...,
    value2: Queryable[float] = ...,
    value3: Queryable[float] = ...,
    value4: Queryable[float] = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[
    str,
    Tuple[float, float, float],
    bool,
    int,
    float,
    Tuple[float, float, float, float],
    Callable[..., Any],
]: ...
def floatScrollBar(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    changeCommand: Callable[..., Any] = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dragCommand: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    horizontal: bool = ...,
    isObscured: bool = ...,
    largeStep: Queryable[float] = ...,
    manage: bool = ...,
    maxValue: Queryable[float] = ...,
    minValue: Queryable[float] = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    statusBarMessage: str = ...,
    step: Queryable[float] = ...,
    useTemplate: str = ...,
    value: Queryable[float] = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[str, Tuple[float, float, float], bool, int, float, Callable[..., Any]]: ...
def floatSlider(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    changeCommand: Callable[..., Any] = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dragCommand: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    horizontal: bool = ...,
    isObscured: bool = ...,
    manage: bool = ...,
    maxValue: Queryable[float] = ...,
    minValue: Queryable[float] = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    statusBarMessage: str = ...,
    step: Queryable[float] = ...,
    useTemplate: str = ...,
    value: Queryable[float] = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[str, Tuple[float, float, float], bool, int, float, Callable[..., Any]]: ...
def floatSlider2(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    changeCommand1: str = ...,
    changeCommand2: str = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    isObscured: bool = ...,
    manage: bool = ...,
    maximum: Queryable[float] = ...,
    minimum: Queryable[float] = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    polarity: Queryable[int] = ...,
    popupMenuArray: bool = ...,
    positionControl1: str = ...,
    positionControl2: str = ...,
    preventOverride: bool = ...,
    statusBarMessage: str = ...,
    useTemplate: str = ...,
    value1: Queryable[float] = ...,
    value2: Queryable[float] = ...,
    values: Tuple[float, float] = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[str, Tuple[float, float, float], bool, int, float, Callable[..., Any]]: ...
def floatSliderButtonGrp(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    adjustableColumn: int = ...,
    adjustableColumn2: int = ...,
    adjustableColumn3: int = ...,
    adjustableColumn4: int = ...,
    adjustableColumn5: int = ...,
    adjustableColumn6: int = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    buttonCommand: Callable[..., Any] = ...,
    buttonLabel: Queryable[str] = ...,
    changeCommand: Callable[..., Any] = ...,
    columnAlign: Multiuse[Tuple[int, str]] = ...,
    columnAlign2: Tuple[str, str] = ...,
    columnAlign3: Tuple[str, str, str] = ...,
    columnAlign4: Tuple[str, str, str, str] = ...,
    columnAlign5: Tuple[str, str, str, str, str] = ...,
    columnAlign6: Tuple[str, str, str, str, str, str] = ...,
    columnAttach: Multiuse[Tuple[int, str, int]] = ...,
    columnAttach2: Tuple[str, str] = ...,
    columnAttach3: Tuple[str, str, str] = ...,
    columnAttach4: Tuple[str, str, str, str] = ...,
    columnAttach5: Tuple[str, str, str, str, str] = ...,
    columnAttach6: Tuple[str, str, str, str, str, str] = ...,
    columnOffset2: Tuple[int, int] = ...,
    columnOffset3: Tuple[int, int, int] = ...,
    columnOffset4: Tuple[int, int, int, int] = ...,
    columnOffset5: Tuple[int, int, int, int, int] = ...,
    columnOffset6: Tuple[int, int, int, int, int, int] = ...,
    columnWidth: Multiuse[Tuple[int, int]] = ...,
    columnWidth1: int = ...,
    columnWidth2: Tuple[int, int] = ...,
    columnWidth3: Tuple[int, int, int] = ...,
    columnWidth4: Tuple[int, int, int, int] = ...,
    columnWidth5: Tuple[int, int, int, int, int] = ...,
    columnWidth6: Tuple[int, int, int, int, int, int] = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dragCommand: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    extraLabel: Queryable[str] = ...,
    field: bool = ...,
    fieldMaxValue: Queryable[float] = ...,
    fieldMinValue: Queryable[float] = ...,
    fieldStep: Queryable[float] = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    image: Queryable[str] = ...,
    isObscured: bool = ...,
    label: Queryable[str] = ...,
    manage: bool = ...,
    maxValue: Queryable[float] = ...,
    minValue: Queryable[float] = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    precision: int = ...,
    preventOverride: bool = ...,
    rowAttach: Multiuse[Tuple[int, str, int]] = ...,
    sliderStep: Queryable[float] = ...,
    statusBarMessage: str = ...,
    step: Queryable[float] = ...,
    symbolButtonCommand: Callable[..., Any] = ...,
    symbolButtonDisplay: bool = ...,
    useTemplate: str = ...,
    value: Queryable[float] = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[str, Tuple[float, float, float], bool, float, int, Callable[..., Any]]: ...
def floatSliderGrp(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    adjustableColumn: int = ...,
    adjustableColumn2: int = ...,
    adjustableColumn3: int = ...,
    adjustableColumn4: int = ...,
    adjustableColumn5: int = ...,
    adjustableColumn6: int = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    changeCommand: Callable[..., Any] = ...,
    columnAlign: Multiuse[Tuple[int, str]] = ...,
    columnAlign2: Tuple[str, str] = ...,
    columnAlign3: Tuple[str, str, str] = ...,
    columnAlign4: Tuple[str, str, str, str] = ...,
    columnAlign5: Tuple[str, str, str, str, str] = ...,
    columnAlign6: Tuple[str, str, str, str, str, str] = ...,
    columnAttach: Multiuse[Tuple[int, str, int]] = ...,
    columnAttach2: Tuple[str, str] = ...,
    columnAttach3: Tuple[str, str, str] = ...,
    columnAttach4: Tuple[str, str, str, str] = ...,
    columnAttach5: Tuple[str, str, str, str, str] = ...,
    columnAttach6: Tuple[str, str, str, str, str, str] = ...,
    columnOffset2: Tuple[int, int] = ...,
    columnOffset3: Tuple[int, int, int] = ...,
    columnOffset4: Tuple[int, int, int, int] = ...,
    columnOffset5: Tuple[int, int, int, int, int] = ...,
    columnOffset6: Tuple[int, int, int, int, int, int] = ...,
    columnWidth: Multiuse[Tuple[int, int]] = ...,
    columnWidth1: int = ...,
    columnWidth2: Tuple[int, int] = ...,
    columnWidth3: Tuple[int, int, int] = ...,
    columnWidth4: Tuple[int, int, int, int] = ...,
    columnWidth5: Tuple[int, int, int, int, int] = ...,
    columnWidth6: Tuple[int, int, int, int, int, int] = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dragCommand: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    extraLabel: Queryable[str] = ...,
    field: bool = ...,
    fieldMaxValue: Queryable[float] = ...,
    fieldMinValue: Queryable[float] = ...,
    fieldStep: Queryable[float] = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    isObscured: bool = ...,
    label: Queryable[str] = ...,
    manage: bool = ...,
    maxValue: Queryable[float] = ...,
    minValue: Queryable[float] = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    precision: int = ...,
    preventOverride: bool = ...,
    rowAttach: Multiuse[Tuple[int, str, int]] = ...,
    sliderStep: Queryable[float] = ...,
    statusBarMessage: str = ...,
    step: Queryable[float] = ...,
    useTemplate: str = ...,
    value: Queryable[float] = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[str, Tuple[float, float, float], bool, float, int, Callable[..., Any]]: ...
def flow(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    divisions: Queryable[Tuple[int, int, int]] = ...,
    localCompute: bool = ...,
    localDivisions: Queryable[Tuple[int, int, int]] = ...,
    objectCentered: bool = ...,
) -> Union[List[str], Tuple[int, int, int], bool]: ...
def flowLayout(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    childArray: bool = ...,
    columnSpacing: Queryable[int] = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    generalSpacing: int = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    horizontal: bool = ...,
    isObscured: bool = ...,
    manage: bool = ...,
    margins: int = ...,
    margins4: Tuple[int, int, int, int] = ...,
    noBackground: bool = ...,
    numberOfChildren: bool = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    statusBarMessage: str = ...,
    useTemplate: str = ...,
    vertical: bool = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
    wrap: bool = ...,
) -> Union[str, Tuple[float, float, float], bool, int, Callable[..., Any]]: ...
def fluidAppend() -> None: ...
def fluidAppendOpt() -> None: ...
def fluidCacheInfo(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    attribute: Queryable[str] = ...,
    cacheTime: Queryable[int] = ...,
    endFrame: bool = ...,
    hasCache: bool = ...,
    hasData: bool = ...,
    initialConditions: bool = ...,
    playback: bool = ...,
    resolution: bool = ...,
    startFrame: bool = ...,
) -> Union[bool, str, int]: ...
def fluidDeleteCache() -> None: ...
def fluidDeleteCacheFrames() -> None: ...
def fluidDeleteCacheFramesOpt() -> None: ...
def fluidDeleteCacheOpt() -> None: ...
def fluidEmitter(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    cycleEmission: Queryable[str] = ...,
    cycleInterval: Queryable[int] = ...,
    densityEmissionRate: Queryable[float] = ...,
    fluidDropoff: Queryable[float] = ...,
    fuelEmissionRate: Queryable[float] = ...,
    heatEmissionRate: Queryable[float] = ...,
    maxDistance: Queryable[float] = ...,
    minDistance: Queryable[float] = ...,
    name: Queryable[str] = ...,
    position: Queryable[Multiuse[Tuple[float, float, float]]] = ...,
    rate: Queryable[float] = ...,
    torusSectionRadius: Queryable[float] = ...,
    type: Queryable[str] = ...,
    volumeOffset: Queryable[Tuple[float, float, float]] = ...,
    volumeShape: Queryable[str] = ...,
    volumeSweep: Queryable[float] = ...,
) -> Union[
    str, int, float, Multiuse[Tuple[float, float, float]], Tuple[float, float, float]
]: ...
def fluidMergeCache() -> None: ...
def fluidMergeCacheOpt() -> None: ...
def fluidReplaceCache() -> None: ...
def fluidReplaceCacheOpt() -> None: ...
def fluidReplaceFrames() -> None: ...
def fluidReplaceFramesOpt() -> None: ...
def fluidVoxelInfo(
    *args: str,
    checkBounds: bool = ...,
    inBounds: Tuple[int, int, int] = ...,
    objectSpace: bool = ...,
    radius: float = ...,
    voxel: Tuple[float, float, float] = ...,
    voxelCenter: bool = ...,
    xIndex: int = ...,
    yIndex: int = ...,
    zIndex: int = ...,
) -> bool: ...
def flushIdleQueue(*, resume: bool = ...) -> None: ...
def flushThumbnailCache(arg0: bool = ..., /) -> None: ...
def flushUndo() -> bool: ...
def fontDialog(*, FontList: bool = ..., scalable: bool = ...) -> str: ...
def formLayout(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    annotation: Queryable[str] = ...,
    attachControl: Multiuse[Tuple[str, str, int, str]] = ...,
    attachForm: Multiuse[Tuple[str, str, int]] = ...,
    attachNone: Multiuse[Tuple[str, str]] = ...,
    attachOppositeControl: Multiuse[Tuple[str, str, int, str]] = ...,
    attachOppositeForm: Multiuse[Tuple[str, str, int]] = ...,
    attachPosition: Multiuse[Tuple[str, str, int, int]] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    childArray: bool = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    generalSpacing: int = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    isObscured: bool = ...,
    manage: bool = ...,
    margins: int = ...,
    margins4: Tuple[int, int, int, int] = ...,
    noBackground: bool = ...,
    numberOfChildren: bool = ...,
    numberOfDivisions: Queryable[int] = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    statusBarMessage: str = ...,
    useTemplate: str = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[str, Tuple[float, float, float], bool, int, Callable[..., Any]]: ...
def format(arg0: str = ..., /, *, stringArg: Multiuse[str] = ...) -> str: ...
def frameBufferName(
    *,
    autoTruncate: bool = ...,
    camera: str = ...,
    renderLayer: str = ...,
    renderPass: str = ...,
) -> str: ...
def frameLayout(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    backgroundShade: bool = ...,
    borderStyle: Queryable[str] = ...,
    borderVisible: bool = ...,
    childArray: bool = ...,
    collapsable: bool = ...,
    collapse: bool = ...,
    collapseCommand: Callable[..., Any] = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    expandCommand: Callable[..., Any] = ...,
    font: Queryable[str] = ...,
    fullPathName: bool = ...,
    generalSpacing: int = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    isObscured: bool = ...,
    label: Queryable[str] = ...,
    labelAlign: Queryable[str] = ...,
    labelIndent: Queryable[int] = ...,
    labelVisible: bool = ...,
    labelWidth: Queryable[int] = ...,
    manage: bool = ...,
    marginHeight: Queryable[int] = ...,
    marginWidth: Queryable[int] = ...,
    margins: int = ...,
    margins4: Tuple[int, int, int, int] = ...,
    noBackground: bool = ...,
    numberOfChildren: bool = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preCollapseCommand: Callable[..., Any] = ...,
    preExpandCommand: Callable[..., Any] = ...,
    preventOverride: bool = ...,
    statusBarMessage: str = ...,
    useTemplate: str = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[str, Tuple[float, float, float], bool, int, Callable[..., Any]]: ...
def framelessDialog(
    *,
    button: Multiuse[str] = ...,
    message: str = ...,
    parent: str = ...,
    path: str = ...,
    primary: Multiuse[str] = ...,
    title: str = ...,
) -> str: ...
def freeFormFillet(
    arg0: str = ...,
    arg1: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    bias: Queryable[float] = ...,
    caching: bool = ...,
    depth: Queryable[float] = ...,
    nodeState: Queryable[int] = ...,
    positionTolerance: Queryable[float] = ...,
    tangentTolerance: Queryable[float] = ...,
    constructionHistory: bool = ...,
    name: str = ...,
    object: bool = ...,
    polygon: int = ...,
    range: bool = ...,
) -> Union[List[str], float, bool, int]: ...
def freezeOptions(
    *,
    query: bool = ...,
    displayLayers: bool = ...,
    downstream: Queryable[str] = ...,
    explicitPropagation: bool = ...,
    invisible: bool = ...,
    referencedNodes: bool = ...,
    runtimePropagation: bool = ...,
    upstream: Queryable[str] = ...,
) -> Union[str, bool]: ...
def geomBind(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    bindMethod: int = ...,
    falloff: Queryable[float] = ...,
    geodesicVoxelParams: Queryable[Tuple[int, bool]] = ...,
    maxInfluences: Queryable[int] = ...,
) -> Union[bool, float, Tuple[int, bool], int]: ...
def geomToBBox(
    *args: str,
    bakeAnimation: bool = ...,
    combineMesh: bool = ...,
    endTime: int = ...,
    keepOriginal: bool = ...,
    name: str = ...,
    nameSuffix: str = ...,
    sampleBy: int = ...,
    shaderColor: Tuple[float, float, float] = ...,
    single: bool = ...,
    startTime: int = ...,
) -> bool: ...
def geometryAppendCache() -> None: ...
def geometryAppendCacheOpt() -> None: ...
def geometryAttrInfo(
    *args: str,
    boundingBox: bool = ...,
    castToEdges: bool = ...,
    castToFaces: bool = ...,
    castToVerts: bool = ...,
    componentTagCategory: bool = ...,
    componentTagExpression: str = ...,
    componentTagHash: bool = ...,
    componentTagHistory: bool = ...,
    componentTagHistoryHash: bool = ...,
    componentTagNames: bool = ...,
    components: bool = ...,
    deformerChain: bool = ...,
    elementCount: bool = ...,
    groupId: int = ...,
    matrix: bool = ...,
    nodeChain: bool = ...,
    originalGeometry: bool = ...,
    outputPlugChain: bool = ...,
    plugChain: bool = ...,
    pointCount: bool = ...,
    pointIndices: bool = ...,
    points: bool = ...,
    subsetState: bool = ...,
) -> Any: ...
def geometryCache() -> None: ...
def geometryCacheOpt() -> None: ...
def geometryConstraint(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    layer: str = ...,
    name: Queryable[str] = ...,
    remove: bool = ...,
    targetList: bool = ...,
    weight: Queryable[float] = ...,
    weightAliasList: bool = ...,
) -> Union[List[str], str, bool, float]: ...
def geometryDeleteCacheFrames() -> None: ...
def geometryDeleteCacheFramesOpt() -> None: ...
def geometryDeleteCacheOpt() -> None: ...
def geometryExportCache() -> None: ...
def geometryExportCacheOpt() -> None: ...
def geometryMergeCache() -> None: ...
def geometryMergeCacheOpt() -> None: ...
def geometryReplaceCache() -> None: ...
def geometryReplaceCacheFrames() -> None: ...
def geometryReplaceCacheFramesOpt() -> None: ...
def geometryReplaceCacheOpt() -> None: ...
def getAttr(
    *args: str,
    asString: bool = ...,
    caching: bool = ...,
    channelBox: bool = ...,
    expandEnvironmentVariables: bool = ...,
    keyable: bool = ...,
    lock: bool = ...,
    multiIndices: bool = ...,
    settable: bool = ...,
    silent: bool = ...,
    size: bool = ...,
    time: int = ...,
    type: bool = ...,
) -> Any: ...
def getClassification(arg0: str = ..., /, *, satisfies: str = ...) -> List[str]: ...
def getDefaultBrush() -> str: ...
def getFileList(*, filespec: str = ..., folder: str = ...) -> List[str]: ...
def getFluidAttr(
    *args: str,
    attribute: str = ...,
    lowerFace: bool = ...,
    xIndex: int = ...,
    xvalue: bool = ...,
    yIndex: int = ...,
    yvalue: bool = ...,
    zIndex: int = ...,
    zvalue: bool = ...,
) -> bool: ...
def getInputDeviceRange(
    arg0: str = ..., arg1: str = ..., /, *, maxValue: bool = ..., minValue: bool = ...
) -> List[float]: ...
def getLastError() -> None: ...
def getMetadata(
    *args: str,
    dataType: bool = ...,
    listChannelNames: bool = ...,
    listMemberNames: bool = ...,
    listStreamNames: bool = ...,
    memberName: str = ...,
    channelName: Queryable[str] = ...,
    channelType: Queryable[str] = ...,
    endIndex: str = ...,
    index: Queryable[Multiuse[str]] = ...,
    indexType: Queryable[str] = ...,
    scene: bool = ...,
    startIndex: str = ...,
    streamName: Queryable[str] = ...,
) -> Union[List[int], List[float], List[str], str, Multiuse[str], bool]: ...
def getModifiers() -> int: ...
def getModulePath(*, moduleName: str = ...) -> str: ...
def getPanel(
    *,
    allConfigs: bool = ...,
    allPanels: bool = ...,
    allScriptedTypes: bool = ...,
    allTypes: bool = ...,
    atPosition: Tuple[int, int] = ...,
    configWithLabel: str = ...,
    containing: str = ...,
    invisiblePanels: bool = ...,
    scriptType: str = ...,
    type: str = ...,
    typeOf: str = ...,
    underPointer: bool = ...,
    visiblePanels: bool = ...,
    withFocus: bool = ...,
    withLabel: str = ...,
) -> List[str]: ...
def getParticleAttr(
    *args: str, array: bool = ..., attribute: str = ..., object: str = ...
) -> List[float]: ...
def getProcArguments(arg0: str = ..., /) -> None: ...
def getRenderDependencies(arg0: str = ..., /) -> str: ...
def getRenderTasks(
    arg0: str = ..., /, *, camera: str = ..., renderLayer: str = ...
) -> List[str]: ...
def ghosting(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    action: str = ...,
    allGhostedObjects: bool = ...,
    allInRange: bool = ...,
    customFrames: Queryable[Multiuse[int]] = ...,
    enable: bool = ...,
    farOpacity: Queryable[float] = ...,
    frames: bool = ...,
    geometryFilter: bool = ...,
    ghostedObjects: bool = ...,
    ghostsStep: Queryable[int] = ...,
    hierarchy: bool = ...,
    jointFilter: bool = ...,
    locatorFilter: bool = ...,
    mode: Queryable[str] = ...,
    nearOpacity: Queryable[float] = ...,
    postColor: Queryable[Tuple[float, float, float]] = ...,
    postFrames: Queryable[int] = ...,
    preColor: Queryable[Tuple[float, float, float]] = ...,
    preFrames: Queryable[int] = ...,
    preset: Queryable[str] = ...,
    resetAll: bool = ...,
    useDriver: bool = ...,
) -> Union[
    bool,
    List[str],
    List[float],
    float,
    str,
    List[int],
    Multiuse[int],
    int,
    Tuple[float, float, float],
]: ...
def glRender(
    *,
    edit: bool = ...,
    query: bool = ...,
    accumBufferPasses: Queryable[int] = ...,
    alphaSource: Queryable[str] = ...,
    antiAliasMethod: Queryable[str] = ...,
    cameraIcons: bool = ...,
    clearClr: Queryable[Tuple[float, float, float]] = ...,
    collisionIcons: bool = ...,
    crossingEffect: bool = ...,
    currentFrame: bool = ...,
    drawStyle: Queryable[str] = ...,
    edgeSmoothness: Queryable[float] = ...,
    emitterIcons: bool = ...,
    fieldIcons: bool = ...,
    flipbookCallback: Queryable[str] = ...,
    frameEnd: Queryable[int] = ...,
    frameIncrement: Queryable[int] = ...,
    frameStart: Queryable[int] = ...,
    fullResolution: bool = ...,
    grid: bool = ...,
    imageDirectory: Queryable[str] = ...,
    imageName: Queryable[str] = ...,
    imageSize: Queryable[Tuple[int, int, float]] = ...,
    lightIcons: bool = ...,
    lightingMode: Queryable[str] = ...,
    lineSmoothing: bool = ...,
    offScreen: bool = ...,
    renderFrame: Queryable[str] = ...,
    renderSequence: Queryable[str] = ...,
    sharpness: Queryable[float] = ...,
    shutterAngle: Queryable[float] = ...,
    textureDisplay: bool = ...,
    transformIcons: bool = ...,
    useAccumBuffer: bool = ...,
    viewport: Queryable[Tuple[int, int, float]] = ...,
    writeDepthMap: bool = ...,
) -> Union[
    bool, int, str, Tuple[float, float, float], float, Tuple[int, int, float]
]: ...
def glRenderEditor(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    control: bool = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    exists: bool = ...,
    filter: Queryable[str] = ...,
    forceMainConnection: Queryable[str] = ...,
    highlightConnection: Queryable[str] = ...,
    lockMainConnection: bool = ...,
    lookThru: Queryable[str] = ...,
    mainListConnection: Queryable[str] = ...,
    panel: Queryable[str] = ...,
    parent: Queryable[str] = ...,
    selectionConnection: Queryable[str] = ...,
    stateString: bool = ...,
    unParent: bool = ...,
    unlockMainConnection: bool = ...,
    updateMainConnection: bool = ...,
    useTemplate: str = ...,
    viewCameraName: bool = ...,
) -> Union[bool, str]: ...
def globalStitch(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    lockSurface: Queryable[Multiuse[bool]] = ...,
    maxSeparation: Queryable[float] = ...,
    modificationResistance: Queryable[float] = ...,
    nodeState: Queryable[int] = ...,
    sampling: Queryable[int] = ...,
    stitchCorners: Queryable[int] = ...,
    stitchEdges: Queryable[int] = ...,
    stitchPartialEdges: bool = ...,
    stitchSmoothness: Queryable[int] = ...,
    constructionHistory: bool = ...,
    name: str = ...,
    object: bool = ...,
) -> Union[List[str], bool, Multiuse[bool], float, int]: ...
def goal(
    *args: str,
    query: bool = ...,
    goal: Queryable[Multiuse[str]] = ...,
    index: bool = ...,
    useTransformAsGoal: bool = ...,
    weight: float = ...,
) -> Union[str, Multiuse[str], bool]: ...
def grabColor(
    *, alpha: bool = ..., hsvValue: bool = ..., rgbValue: bool = ...
) -> float: ...
def gradientControl(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    adaptiveScaling: bool = ...,
    annotation: Queryable[str] = ...,
    attribute: str = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    clearAttribute: bool = ...,
    defineTemplate: str = ...,
    displayKeyInfo: bool = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    highlightMode: Queryable[str] = ...,
    isObscured: bool = ...,
    manage: bool = ...,
    noBackground: bool = ...,
    numberOfControls: Queryable[int] = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    readOnly: bool = ...,
    refreshOnRelease: Queryable[int] = ...,
    selectedColorControl: str = ...,
    selectedInterpControl: str = ...,
    selectedPositionControl: str = ...,
    staticNumberOfControls: bool = ...,
    staticPositions: bool = ...,
    statusBarMessage: str = ...,
    upperLimitControl: Queryable[str] = ...,
    useTemplate: str = ...,
    verticalLayout: bool = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[str, bool, Tuple[float, float, float], int, Callable[..., Any]]: ...
def gradientControlNoAttr(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    addEntry: Tuple[float, float, float, float, int] = ...,
    annotation: Queryable[str] = ...,
    asString: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    changeCommand: Callable[..., Any] = ...,
    currentKey: Queryable[int] = ...,
    currentKeyChanged: Callable[..., Any] = ...,
    currentKeyColorValue: Queryable[Tuple[float, float, float]] = ...,
    currentKeyCurveValue: bool = ...,
    currentKeyInterpValue: Queryable[int] = ...,
    defineTemplate: str = ...,
    displayKeyInfo: bool = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dragCommand: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    highlightMode: Queryable[str] = ...,
    isObscured: bool = ...,
    manage: bool = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    optionVar: Queryable[str] = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    rampAsColor: bool = ...,
    readOnly: bool = ...,
    staticNumberOfControls: bool = ...,
    statusBarMessage: str = ...,
    useTemplate: str = ...,
    valueAtPoint: float = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[str, Tuple[float, float, float], int, bool, Callable[..., Any]]: ...
def graphDollyCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    exists: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    name: str = ...,
) -> str: ...
def graphSelectContext(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    exists: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
) -> str: ...
def graphTrackCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    exists: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    name: str = ...,
) -> str: ...
def gravity(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    attenuation: Queryable[float] = ...,
    directionX: Queryable[float] = ...,
    directionY: Queryable[float] = ...,
    directionZ: Queryable[float] = ...,
    magnitude: Queryable[float] = ...,
    maxDistance: Queryable[float] = ...,
    name: Queryable[str] = ...,
    perVertex: bool = ...,
    position: Queryable[Multiuse[Tuple[float, float, float]]] = ...,
    torusSectionRadius: Queryable[float] = ...,
    volumeExclusion: bool = ...,
    volumeOffset: Queryable[Tuple[float, float, float]] = ...,
    volumeShape: Queryable[str] = ...,
    volumeSweep: Queryable[float] = ...,
) -> Union[
    str, float, bool, Multiuse[Tuple[float, float, float]], Tuple[float, float, float]
]: ...
def grid(
    *args: str,
    query: bool = ...,
    default: bool = ...,
    displayAxes: bool = ...,
    displayAxesBold: bool = ...,
    displayDivisionLines: bool = ...,
    displayGridLines: bool = ...,
    displayOrthographicLabels: bool = ...,
    displayPerspectiveLabels: bool = ...,
    divisions: Queryable[int] = ...,
    orthographicLabelPosition: Queryable[str] = ...,
    perspectiveLabelPosition: Queryable[str] = ...,
    reset: bool = ...,
    size: Queryable[float] = ...,
    spacing: Queryable[float] = ...,
    style: Queryable[int] = ...,
    toggle: bool = ...,
) -> Union[bool, int, str, float]: ...
def gridLayout(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    allowEmptyCells: bool = ...,
    annotation: Queryable[str] = ...,
    autoGrow: bool = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    cellHeight: Queryable[int] = ...,
    cellWidth: Queryable[int] = ...,
    cellWidthHeight: Tuple[int, int] = ...,
    childArray: bool = ...,
    columnsResizable: bool = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    generalSpacing: int = ...,
    gridOrder: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    isObscured: bool = ...,
    manage: bool = ...,
    margins: int = ...,
    margins4: Tuple[int, int, int, int] = ...,
    noBackground: bool = ...,
    numberOfChildren: bool = ...,
    numberOfColumns: Queryable[int] = ...,
    numberOfPopupMenus: bool = ...,
    numberOfRows: Queryable[int] = ...,
    numberOfRowsColumns: Tuple[int, int] = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    position: Multiuse[Tuple[str, int]] = ...,
    preventOverride: bool = ...,
    statusBarMessage: str = ...,
    useTemplate: str = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[str, bool, Tuple[float, float, float], int, Callable[..., Any]]: ...
def group(
    *args: str,
    absolute: bool = ...,
    empty: bool = ...,
    name: str = ...,
    parent: str = ...,
    relative: bool = ...,
    useAsGroup: str = ...,
    world: bool = ...,
) -> str: ...
def groupParts() -> None: ...
def hardenPointCurve(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    multiplicity: Queryable[int] = ...,
    nodeState: Queryable[int] = ...,
    constructionHistory: bool = ...,
    name: str = ...,
    object: bool = ...,
    replaceOriginal: bool = ...,
) -> Union[List[str], bool, int]: ...
def hardware(
    *,
    brdType: bool = ...,
    cpuType: bool = ...,
    graphicsType: bool = ...,
    megaHertz: bool = ...,
    numProcessors: bool = ...,
) -> str: ...
def hardwareRenderPanel(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    camera: Queryable[str] = ...,
    control: bool = ...,
    copy: str = ...,
    createString: bool = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    editString: bool = ...,
    exists: bool = ...,
    glRenderEditor: bool = ...,
    init: bool = ...,
    isUnique: bool = ...,
    label: Queryable[str] = ...,
    menuBarRepeatLast: bool = ...,
    menuBarVisible: bool = ...,
    needsInit: bool = ...,
    parent: str = ...,
    popupMenuProcedure: Queryable[Callable[..., Any]] = ...,
    replacePanel: str = ...,
    tearOff: bool = ...,
    tearOffCopy: str = ...,
    tearOffRestore: bool = ...,
    unParent: bool = ...,
    useTemplate: str = ...,
) -> Union[str, bool, Callable[..., Any]]: ...
def hasMetadata(
    *args: str,
    asList: bool = ...,
    ignoreDefault: bool = ...,
    memberName: str = ...,
    channelName: Queryable[str] = ...,
    channelType: Queryable[str] = ...,
    endIndex: str = ...,
    index: Queryable[Multiuse[str]] = ...,
    indexType: Queryable[str] = ...,
    scene: bool = ...,
    startIndex: str = ...,
    streamName: Queryable[str] = ...,
) -> Union[List[str], List[bool], str, Multiuse[str], bool]: ...
def headsUpDisplay(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    allDescendants: bool = ...,
    allowOverlap: bool = ...,
    attachToRefresh: bool = ...,
    attributeChange: str = ...,
    block: Queryable[int] = ...,
    blockAlignment: Queryable[str] = ...,
    blockSize: Queryable[str] = ...,
    command: Queryable[Callable[..., Any]] = ...,
    conditionChange: str = ...,
    conditionFalse: str = ...,
    conditionTrue: str = ...,
    connectionChange: str = ...,
    dataAlignment: Queryable[str] = ...,
    dataFontSize: Queryable[str] = ...,
    dataWidth: Queryable[int] = ...,
    decimalPrecision: Queryable[int] = ...,
    disregardIndex: bool = ...,
    event: str = ...,
    exists: bool = ...,
    getOption: str = ...,
    gridColor: Queryable[int] = ...,
    label: Queryable[str] = ...,
    labelFontSize: Queryable[str] = ...,
    labelWidth: Queryable[int] = ...,
    lastOccupiedBlock: int = ...,
    layoutVisibility: bool = ...,
    listConditions: bool = ...,
    listEvents: bool = ...,
    listHeadsUpDisplays: bool = ...,
    listNodeChanges: bool = ...,
    listPresets: bool = ...,
    name: str = ...,
    nextFreeBlock: int = ...,
    nodeChanges: Queryable[Multiuse[str]] = ...,
    padding: Queryable[int] = ...,
    preset: Queryable[str] = ...,
    refresh: bool = ...,
    remove: bool = ...,
    removeID: int = ...,
    removePosition: Tuple[int, int] = ...,
    resetNodeChanges: Multiuse[str] = ...,
    scriptResult: bool = ...,
    section: Queryable[int] = ...,
    setOption: Tuple[str, str] = ...,
    showGrid: bool = ...,
    visible: bool = ...,
) -> Union[
    int, Union[str, int, Tuple[int, int]], bool, str, Callable[..., Any], Multiuse[str]
]: ...
def headsUpMessage(
    *args: Any,
    horizontalOffset: int = ...,
    object: str = ...,
    selection: bool = ...,
    time: float = ...,
    uvTextureEditor: bool = ...,
    verticalOffset: int = ...,
    viewport: bool = ...,
) -> bool: ...
def help(
    arg0: str = ...,
    /,
    *,
    query: bool = ...,
    documentation: bool = ...,
    language: str = ...,
    list: bool = ...,
    popupDisplayTime: Queryable[int] = ...,
    popupMode: bool = ...,
    popupPauseTime: Queryable[int] = ...,
    popupSimpleMode: bool = ...,
    rolloverMode: bool = ...,
    syntaxOnly: bool = ...,
) -> Union[bool, int]: ...
def helpLine(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    isObscured: bool = ...,
    manage: bool = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    statusBarMessage: str = ...,
    useTemplate: str = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[str, Tuple[float, float, float], bool, int, Callable[..., Any]]: ...
def hide(
    *args: str,
    allObjects: bool = ...,
    clearLastHidden: bool = ...,
    clearSelection: bool = ...,
    invertComponents: bool = ...,
    returnHidden: bool = ...,
    testVisibility: bool = ...,
) -> bool: ...
def hikGlobals(
    *, edit: bool = ..., query: bool = ..., releaseAllPinning: bool = ...
) -> bool: ...
def hilite(
    *args: str, replace: bool = ..., toggle: bool = ..., unHilite: bool = ...
) -> bool: ...
def hitTest(arg0: str = ..., arg1: int = ..., arg2: int = ..., /) -> List[str]: ...
def hotBox(
    *,
    query: bool = ...,
    PaneOnlyMenus: bool = ...,
    PaneToggleMenus: bool = ...,
    animationOnlyMenus: bool = ...,
    animationToggleMenus: bool = ...,
    clothOnlyMenus: bool = ...,
    clothToggleMenus: bool = ...,
    commonOnlyMenus: bool = ...,
    commonToggleMenus: bool = ...,
    customMenuSetsToggleMenus: bool = ...,
    displayCenterOnly: bool = ...,
    displayHotbox: bool = ...,
    displayStyle: bool = ...,
    displayZonesOnly: bool = ...,
    dynamicsOnlyMenus: bool = ...,
    dynamicsToggleMenus: bool = ...,
    liveOnlyMenus: bool = ...,
    liveToggleMenus: bool = ...,
    menuSetOnly: str = ...,
    menuSetToggle: Tuple[str, bool] = ...,
    modelingOnlyMenus: bool = ...,
    modelingToggleMenus: bool = ...,
    noClickCommand: Callable[..., Any] = ...,
    noClickDelay: float = ...,
    noClickPosition: bool = ...,
    noKeyPress: bool = ...,
    polygonsOnlyMenus: bool = ...,
    polygonsToggleMenus: bool = ...,
    position: Tuple[int, int] = ...,
    release: bool = ...,
    renderingOnlyMenus: bool = ...,
    renderingToggleMenus: bool = ...,
    riggingOnlyMenus: bool = ...,
    riggingToggleMenus: bool = ...,
    rmbPopups: bool = ...,
    showAllToggleMenus: bool = ...,
    surfacesOnlyMenus: bool = ...,
    surfacesToggleMenus: bool = ...,
    transparenyLevel: Queryable[int] = ...,
    updateMenus: bool = ...,
) -> Union[bool, int]: ...
def hotkey(
    arg0: str = ...,
    /,
    *,
    query: bool = ...,
    altModifier: bool = ...,
    autoSave: bool = ...,
    commandModifier: bool = ...,
    ctrlModifier: bool = ...,
    ctxClient: str = ...,
    dragPress: bool = ...,
    factorySettings: bool = ...,
    isModifier: bool = ...,
    keyShortcut: str = ...,
    name: Queryable[str] = ...,
    pressCommandRepeat: bool = ...,
    releaseCommandRepeat: bool = ...,
    releaseName: Queryable[str] = ...,
    shiftModifier: bool = ...,
    sourceUserHotkeys: bool = ...,
) -> Union[bool, str]: ...
def hotkeyCheck(
    *,
    altModifier: bool = ...,
    commandModifier: bool = ...,
    ctrlModifier: bool = ...,
    isRepeatable: bool = ...,
    keyString: str = ...,
    keyUp: bool = ...,
    optionModifier: bool = ...,
) -> str: ...
def hotkeyCtx(
    *,
    query: bool = ...,
    addClient: Multiuse[str] = ...,
    clientArray: bool = ...,
    currentClient: Queryable[str] = ...,
    insertTypeAt: Tuple[str, str] = ...,
    removeAllClients: bool = ...,
    removeClient: Multiuse[str] = ...,
    removeType: str = ...,
    type: Queryable[str] = ...,
    typeArray: bool = ...,
    typeExists: str = ...,
) -> Union[bool, str]: ...
def hotkeyEditor(*args: Any, **kwargs: Any) -> None: ...
def hotkeyEditorPanel(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    isObscured: bool = ...,
    manage: bool = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    statusBarMessage: str = ...,
    useTemplate: str = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[str, Tuple[float, float, float], bool, int, Callable[..., Any]]: ...
def hotkeyMapSet(*args: Any, **kwargs: Any) -> None: ...
def hotkeySet(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    current: bool = ...,
    delete: bool = ...,
    exists: bool = ...,
    export: str = ...,
    hotkeySetArray: bool = ...,
    ip: str = ...,
    rename: str = ...,
    source: str = ...,
) -> Union[str, bool]: ...
def hudButton(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    allowOverlap: bool = ...,
    block: Queryable[int] = ...,
    blockAlignment: Queryable[str] = ...,
    blockSize: Queryable[str] = ...,
    buttonShape: Queryable[str] = ...,
    buttonWidth: Queryable[int] = ...,
    label: Queryable[str] = ...,
    labelFontSize: Queryable[str] = ...,
    padding: Queryable[int] = ...,
    pressCommand: Queryable[Callable[..., Any]] = ...,
    releaseCommand: Queryable[Callable[..., Any]] = ...,
    section: Queryable[int] = ...,
    visible: bool = ...,
) -> Union[int, Union[str, int, Tuple[int, int]], bool, str, Callable[..., Any]]: ...
def hudSlider(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    allowOverlap: bool = ...,
    block: Queryable[int] = ...,
    blockAlignment: Queryable[str] = ...,
    blockSize: Queryable[str] = ...,
    decimalPrecision: Queryable[int] = ...,
    dragCommand: Queryable[Callable[..., Any]] = ...,
    internalPadding: Queryable[int] = ...,
    label: Queryable[str] = ...,
    labelFontSize: Queryable[str] = ...,
    labelWidth: Queryable[int] = ...,
    maxValue: Queryable[float] = ...,
    minValue: Queryable[float] = ...,
    padding: Queryable[int] = ...,
    pressCommand: Queryable[Callable[..., Any]] = ...,
    releaseCommand: Queryable[Callable[..., Any]] = ...,
    section: Queryable[int] = ...,
    sliderIncrement: Queryable[float] = ...,
    sliderLength: Queryable[int] = ...,
    type: Queryable[str] = ...,
    value: Queryable[float] = ...,
    valueAlignment: Queryable[str] = ...,
    valueFontSize: Queryable[str] = ...,
    valueWidth: Queryable[int] = ...,
    visible: bool = ...,
) -> Union[
    int, Union[str, int, Tuple[int, int]], bool, str, Callable[..., Any], float
]: ...
def hudSliderButton(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    allowOverlap: bool = ...,
    block: Queryable[int] = ...,
    blockAlignment: Queryable[str] = ...,
    blockSize: Queryable[str] = ...,
    buttonLabel: Queryable[str] = ...,
    buttonLabelFontSize: Queryable[str] = ...,
    buttonPressCommand: Queryable[Callable[..., Any]] = ...,
    buttonReleaseCommand: Queryable[Callable[..., Any]] = ...,
    buttonShape: Queryable[str] = ...,
    buttonWidth: Queryable[int] = ...,
    decimalPrecision: Queryable[int] = ...,
    internalPadding: Queryable[int] = ...,
    maxValue: Queryable[float] = ...,
    minValue: Queryable[float] = ...,
    padding: Queryable[int] = ...,
    section: Queryable[int] = ...,
    sliderDragCommand: Queryable[Callable[..., Any]] = ...,
    sliderIncrement: Queryable[float] = ...,
    sliderLabel: Queryable[str] = ...,
    sliderLabelFontSize: Queryable[str] = ...,
    sliderLabelWidth: Queryable[int] = ...,
    sliderLength: Queryable[int] = ...,
    sliderPressCommand: Queryable[Callable[..., Any]] = ...,
    sliderReleaseCommand: Queryable[Callable[..., Any]] = ...,
    type: Queryable[str] = ...,
    value: Queryable[float] = ...,
    valueAlignment: Queryable[str] = ...,
    valueFontSize: Queryable[str] = ...,
    valueWidth: Queryable[int] = ...,
    visible: bool = ...,
) -> Union[
    int, Union[str, int, Tuple[int, int]], bool, str, Callable[..., Any], float
]: ...
def hwReflectionMap(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    backTextureName: Queryable[str] = ...,
    bottomTextureName: Queryable[str] = ...,
    cubeMap: bool = ...,
    decalMode: bool = ...,
    enable: bool = ...,
    frontTextureName: Queryable[str] = ...,
    leftTextureName: Queryable[str] = ...,
    rightTextureName: Queryable[str] = ...,
    sphereMapTextureName: Queryable[str] = ...,
    topTextureName: Queryable[str] = ...,
) -> Union[str, bool]: ...
def hwRender(
    *args: str,
    query: bool = ...,
    acceleratedMultiSampleSupport: bool = ...,
    activeTextureCount: bool = ...,
    camera: Queryable[str] = ...,
    currentFrame: bool = ...,
    currentView: bool = ...,
    edgeAntiAliasing: Queryable[Tuple[int, int]] = ...,
    fixFileNameNumberPattern: bool = ...,
    frame: float = ...,
    fullRenderSupport: bool = ...,
    height: Queryable[int] = ...,
    imageFileName: bool = ...,
    layer: Queryable[str] = ...,
    limitedRenderSupport: bool = ...,
    lowQualityLighting: bool = ...,
    noRenderView: bool = ...,
    notWriteToFile: bool = ...,
    printGeometry: bool = ...,
    renderHardwareName: bool = ...,
    renderRegion: Queryable[Tuple[int, int, int, int]] = ...,
    renderSelected: bool = ...,
    textureResolution: Queryable[int] = ...,
    width: Queryable[int] = ...,
    writeAlpha: bool = ...,
    writeDepth: bool = ...,
) -> Union[bool, str, Tuple[int, int], int, Tuple[int, int, int, int]]: ...
def hwRenderLoad() -> bool: ...
def hyperGraph(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    addBookmark: bool = ...,
    addDependGraph: str = ...,
    addDependNode: str = ...,
    animateTransition: bool = ...,
    attributeEditor: str = ...,
    backward: bool = ...,
    bookmarkName: bool = ...,
    breakConnectionCommand: Queryable[str] = ...,
    clear: bool = ...,
    collapseContainer: bool = ...,
    connectionDrawStyle: str = ...,
    control: bool = ...,
    currentEdge: Queryable[str] = ...,
    currentNode: Queryable[str] = ...,
    debug: str = ...,
    defineTemplate: str = ...,
    deleteBookmark: str = ...,
    dependGraph: bool = ...,
    dependNode: str = ...,
    directoryPressCommand: str = ...,
    docTag: Queryable[str] = ...,
    down: bool = ...,
    downstream: bool = ...,
    dragAndDropBehaviorCommand: str = ...,
    dropNode: Queryable[str] = ...,
    dropTargetNode: Queryable[str] = ...,
    edgeDblClickCommand: str = ...,
    edgeDimmedDblClickCommand: str = ...,
    edgeDropCommand: str = ...,
    edgePressCommand: str = ...,
    edgeReleaseCommand: str = ...,
    enableAutomaticLayout: bool = ...,
    exists: bool = ...,
    expandContainer: bool = ...,
    feedbackGadget: Queryable[str] = ...,
    feedbackNode: Queryable[str] = ...,
    filter: Queryable[str] = ...,
    filterDetail: Tuple[str, bool] = ...,
    fitImageToHeight: bool = ...,
    fitImageToWidth: bool = ...,
    focusCommand: str = ...,
    fold: bool = ...,
    forceMainConnection: Queryable[str] = ...,
    forceRefresh: bool = ...,
    forward: bool = ...,
    frame: bool = ...,
    frameBranch: bool = ...,
    frameGraph: bool = ...,
    frameGraphNoRebuild: bool = ...,
    frameHierarchy: bool = ...,
    freeform: bool = ...,
    fromAttr: Queryable[str] = ...,
    fromNode: Queryable[str] = ...,
    getNodeList: bool = ...,
    getNodePosition: Queryable[str] = ...,
    graphDescription: bool = ...,
    graphLayoutStyle: Queryable[str] = ...,
    graphType: Queryable[str] = ...,
    heatMapDisplay: bool = ...,
    highlightConnection: Queryable[str] = ...,
    iconSize: Queryable[str] = ...,
    image: Queryable[str] = ...,
    imageEnabled: bool = ...,
    imageForContainer: bool = ...,
    imagePosition: Queryable[Tuple[float, float]] = ...,
    imageScale: Queryable[float] = ...,
    initializeScript: str = ...,
    isHotkeyTarget: bool = ...,
    layout: bool = ...,
    layoutSelected: str = ...,
    limitGraphTraversal: int = ...,
    lockMainConnection: bool = ...,
    look: Tuple[float, float] = ...,
    mainListConnection: Queryable[str] = ...,
    mergeConnections: bool = ...,
    navigateHome: bool = ...,
    navup: bool = ...,
    newInputConnection: str = ...,
    newOutputConnection: str = ...,
    nextView: bool = ...,
    nodeConnectCommand: str = ...,
    nodeDblClickCommand: str = ...,
    nodeDropCommand: str = ...,
    nodeMenuCommand: str = ...,
    nodePressCommand: str = ...,
    nodeReleaseCommand: str = ...,
    opaqueContainers: bool = ...,
    orientation: Queryable[str] = ...,
    panView: Tuple[float, float] = ...,
    panel: Queryable[str] = ...,
    parent: Queryable[str] = ...,
    popupMenuScript: str = ...,
    previousView: bool = ...,
    range: Queryable[Tuple[float, float]] = ...,
    rebuild: bool = ...,
    removeNode: str = ...,
    rename: bool = ...,
    resetFreeform: bool = ...,
    restoreBookmark: str = ...,
    scrollUpDownNoZoom: bool = ...,
    selectionConnection: Queryable[str] = ...,
    setNodePosition: Tuple[str, float, float] = ...,
    showCachedConnections: bool = ...,
    showConnectionFromSelected: bool = ...,
    showConnectionToSelected: bool = ...,
    showConstraintLabels: bool = ...,
    showConstraints: bool = ...,
    showDeformers: bool = ...,
    showExpressions: bool = ...,
    showInvisible: bool = ...,
    showRelationships: bool = ...,
    showShapes: bool = ...,
    showUnderworld: bool = ...,
    stateString: bool = ...,
    toAttr: Queryable[str] = ...,
    toNode: Queryable[str] = ...,
    transitionFrames: Queryable[int] = ...,
    unParent: bool = ...,
    unfold: bool = ...,
    unfoldAll: bool = ...,
    unfoldAllShapes: bool = ...,
    unfoldHidden: bool = ...,
    unlockMainConnection: bool = ...,
    updateMainConnection: bool = ...,
    updateNodeAdded: bool = ...,
    updateSelection: bool = ...,
    upstream: bool = ...,
    useDrawOverrideColor: bool = ...,
    useFeedbackList: bool = ...,
    useTemplate: str = ...,
    viewOption: Queryable[str] = ...,
    visibility: bool = ...,
    zoom: float = ...,
) -> Union[str, bool, Tuple[float, float], float, int]: ...
def hyperPanel(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    control: bool = ...,
    copy: str = ...,
    createString: bool = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    editString: bool = ...,
    exists: bool = ...,
    hyperEditor: bool = ...,
    init: bool = ...,
    isUnique: bool = ...,
    label: Queryable[str] = ...,
    menuBarRepeatLast: bool = ...,
    menuBarVisible: bool = ...,
    needsInit: bool = ...,
    parent: str = ...,
    popupMenuProcedure: Queryable[Callable[..., Any]] = ...,
    replacePanel: str = ...,
    tearOff: bool = ...,
    tearOffCopy: str = ...,
    tearOffRestore: bool = ...,
    unParent: bool = ...,
    useTemplate: str = ...,
) -> Union[str, bool, Callable[..., Any]]: ...
def hyperShade(
    arg0: str = ...,
    /,
    *,
    assign: str = ...,
    clearWorkArea: bool = ...,
    collapse: str = ...,
    createNode: str = ...,
    dependGraphArea: bool = ...,
    downStream: bool = ...,
    duplicate: bool = ...,
    fixRenderSize: bool = ...,
    geometries: Multiuse[str] = ...,
    incremental: bool = ...,
    listDownstreamNodes: str = ...,
    listDownstreamShaderNodes: str = ...,
    listGeometries: str = ...,
    listMaterialNodes: bool = ...,
    listUpstreamNodes: str = ...,
    name: str = ...,
    networks: bool = ...,
    noSGShapes: bool = ...,
    noShapes: bool = ...,
    noTransforms: bool = ...,
    objects: str = ...,
    renderCreateAndDrop: str = ...,
    reset: bool = ...,
    resetGraph: bool = ...,
    resetSwatch: bool = ...,
    setAllowsRegraphing: bool = ...,
    setWorkArea: str = ...,
    shaderNetwork: str = ...,
    shaderNetworks: bool = ...,
    shaderNetworksSelectMaterialNodes: bool = ...,
    snapShot: bool = ...,
    uncollapse: str = ...,
    upStream: bool = ...,
    useMaterialTemplate: bool = ...,
    userDefinedLayout: bool = ...,
    workAreaAddCmd: str = ...,
    workAreaDeleteCmd: str = ...,
    workAreaSelectCmd: str = ...,
) -> str: ...
def iconTextButton(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    align: Queryable[str] = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    command: Queryable[Callable[..., Any]] = ...,
    commandRepeatable: bool = ...,
    defineTemplate: str = ...,
    disabledImage: Queryable[str] = ...,
    docTag: Queryable[str] = ...,
    doubleClickCommand: Queryable[Callable[..., Any]] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    flat: bool = ...,
    flipX: bool = ...,
    flipY: bool = ...,
    font: Queryable[str] = ...,
    fullPathName: bool = ...,
    handleNodeDropCallback: Callable[..., Any] = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    highlightImage: Queryable[str] = ...,
    image: Queryable[str] = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    imageOverlayLabel: Queryable[str] = ...,
    isObscured: bool = ...,
    label: Queryable[str] = ...,
    labelEditingCallback: Callable[..., Any] = ...,
    labelOffset: Queryable[int] = ...,
    manage: bool = ...,
    marginHeight: Queryable[int] = ...,
    marginWidth: Queryable[int] = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    overlayLabelBackColor: Queryable[Tuple[float, float, float, float]] = ...,
    overlayLabelColor: Queryable[Tuple[float, float, float]] = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    rotation: Queryable[float] = ...,
    runTimeCommand: str = ...,
    scaleIcon: bool = ...,
    selectionImage: Queryable[str] = ...,
    sourceType: Queryable[str] = ...,
    statusBarMessage: str = ...,
    style: Queryable[str] = ...,
    useAlpha: bool = ...,
    useTemplate: str = ...,
    version: Queryable[str] = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[
    str,
    Tuple[float, float, float],
    Callable[..., Any],
    bool,
    int,
    Tuple[float, float, float, float],
    float,
]: ...
def iconTextCheckBox(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    align: Queryable[str] = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    changeCommand: Queryable[Callable[..., Any]] = ...,
    defineTemplate: str = ...,
    disabledImage: Queryable[str] = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    flat: bool = ...,
    flipX: bool = ...,
    flipY: bool = ...,
    font: Queryable[str] = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    highlightImage: Queryable[str] = ...,
    image: Queryable[str] = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    imageOverlayLabel: Queryable[str] = ...,
    isObscured: bool = ...,
    label: Queryable[str] = ...,
    labelOffset: Queryable[int] = ...,
    manage: bool = ...,
    marginHeight: Queryable[int] = ...,
    marginWidth: Queryable[int] = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    offCommand: Queryable[Callable[..., Any]] = ...,
    onCommand: Queryable[Callable[..., Any]] = ...,
    overlayLabelBackColor: Queryable[Tuple[float, float, float, float]] = ...,
    overlayLabelColor: Queryable[Tuple[float, float, float]] = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    rotation: Queryable[float] = ...,
    runTimeCommand: str = ...,
    selectionHighlightImage: Queryable[str] = ...,
    selectionImage: Queryable[str] = ...,
    statusBarMessage: str = ...,
    style: Queryable[str] = ...,
    useAlpha: bool = ...,
    useTemplate: str = ...,
    value: bool = ...,
    version: Queryable[str] = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[
    str,
    Tuple[float, float, float],
    Callable[..., Any],
    bool,
    int,
    Tuple[float, float, float, float],
    float,
]: ...
def iconTextRadioButton(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    align: Queryable[str] = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    changeCommand: Queryable[Callable[..., Any]] = ...,
    collection: str = ...,
    defineTemplate: str = ...,
    disabledImage: Queryable[str] = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    flat: bool = ...,
    flipX: bool = ...,
    flipY: bool = ...,
    font: Queryable[str] = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    highlightImage: Queryable[str] = ...,
    image: Queryable[str] = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    imageOverlayLabel: Queryable[str] = ...,
    isObscured: bool = ...,
    label: Queryable[str] = ...,
    labelOffset: Queryable[int] = ...,
    manage: bool = ...,
    marginHeight: Queryable[int] = ...,
    marginWidth: Queryable[int] = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    offCommand: Queryable[Callable[..., Any]] = ...,
    onCommand: Queryable[Callable[..., Any]] = ...,
    overlayLabelBackColor: Queryable[Tuple[float, float, float, float]] = ...,
    overlayLabelColor: Queryable[Tuple[float, float, float]] = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    rotation: Queryable[float] = ...,
    runTimeCommand: str = ...,
    select: bool = ...,
    selectionHighlightImage: Queryable[str] = ...,
    selectionImage: Queryable[str] = ...,
    statusBarMessage: str = ...,
    style: Queryable[str] = ...,
    useAlpha: bool = ...,
    useTemplate: str = ...,
    version: Queryable[str] = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[
    str,
    Tuple[float, float, float],
    Callable[..., Any],
    bool,
    int,
    Tuple[float, float, float, float],
    float,
]: ...
def iconTextRadioCollection(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    collectionItemArray: bool = ...,
    defineTemplate: str = ...,
    disableCommands: bool = ...,
    exists: bool = ...,
    gl: bool = ...,
    numberOfCollectionItems: bool = ...,
    parent: str = ...,
    select: Queryable[str] = ...,
    useTemplate: str = ...,
) -> Union[str, bool]: ...
def iconTextScrollList(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    allowMultiSelection: bool = ...,
    annotation: Queryable[str] = ...,
    append: Multiuse[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    changeCommand: Callable[..., Any] = ...,
    defineTemplate: str = ...,
    deselectAll: bool = ...,
    docTag: Queryable[str] = ...,
    doubleClickCommand: Callable[..., Any] = ...,
    dragCallback: Callable[..., Any] = ...,
    dragFeedbackVisible: bool = ...,
    dropCallback: Callable[..., Any] = ...,
    dropRectCallback: Callable[..., Any] = ...,
    editIndexed: int = ...,
    editable: bool = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    isObscured: bool = ...,
    itemAt: Tuple[int, int] = ...,
    itemTextColor: Multiuse[Tuple[int, float, float, float]] = ...,
    manage: bool = ...,
    noBackground: bool = ...,
    numberOfIcons: Queryable[int] = ...,
    numberOfPopupMenus: bool = ...,
    numberOfRows: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    removeAll: bool = ...,
    selectCommand: Callable[..., Any] = ...,
    selectIndexedItem: Queryable[Multiuse[int]] = ...,
    selectItem: Queryable[Multiuse[str]] = ...,
    statusBarMessage: str = ...,
    useTemplate: str = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    visualRectAt: Tuple[int, int] = ...,
    width: Queryable[int] = ...,
) -> Union[
    str,
    bool,
    Tuple[float, float, float],
    int,
    Multiuse[int],
    Multiuse[str],
    Callable[..., Any],
]: ...
def iconTextStaticLabel(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    align: Queryable[str] = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    defineTemplate: str = ...,
    disabledImage: Queryable[str] = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    flipX: bool = ...,
    flipY: bool = ...,
    font: Queryable[str] = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    image: Queryable[str] = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    imageOverlayLabel: Queryable[str] = ...,
    isObscured: bool = ...,
    label: Queryable[str] = ...,
    labelOffset: Queryable[int] = ...,
    manage: bool = ...,
    marginHeight: Queryable[int] = ...,
    marginWidth: Queryable[int] = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    overlayLabelBackColor: Queryable[Tuple[float, float, float, float]] = ...,
    overlayLabelColor: Queryable[Tuple[float, float, float]] = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    rotation: Queryable[float] = ...,
    runTimeCommand: str = ...,
    statusBarMessage: str = ...,
    style: Queryable[str] = ...,
    useAlpha: bool = ...,
    useTemplate: str = ...,
    version: Queryable[str] = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[
    str,
    Tuple[float, float, float],
    bool,
    int,
    Tuple[float, float, float, float],
    float,
    Callable[..., Any],
]: ...
def ikHandle(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    autoPriority: bool = ...,
    connectEffector: bool = ...,
    createCurve: bool = ...,
    createRootAxis: bool = ...,
    curve: Queryable[str] = ...,
    disableHandles: bool = ...,
    enableHandles: bool = ...,
    endEffector: Queryable[str] = ...,
    exists: str = ...,
    forceSolver: bool = ...,
    freezeJoints: bool = ...,
    jointList: bool = ...,
    name: Queryable[str] = ...,
    numSpans: int = ...,
    parentCurve: bool = ...,
    positionWeight: Queryable[float] = ...,
    priority: Queryable[int] = ...,
    rootOnCurve: bool = ...,
    rootTwistMode: bool = ...,
    setupForRPsolver: bool = ...,
    simplifyCurve: bool = ...,
    snapCurve: bool = ...,
    snapHandleFlagToggle: bool = ...,
    snapHandleToEffector: bool = ...,
    solver: Queryable[str] = ...,
    startJoint: Queryable[str] = ...,
    sticky: Queryable[str] = ...,
    twistType: Queryable[str] = ...,
    weight: Queryable[float] = ...,
) -> Union[str, bool, float, int]: ...
def ikHandleCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    autoPriorityH: bool = ...,
    createCurve: bool = ...,
    createRootAxis: bool = ...,
    exists: bool = ...,
    forceSolverH: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    name: str = ...,
    numSpans: int = ...,
    parentCurve: bool = ...,
    poWeightH: Queryable[float] = ...,
    priorityH: Queryable[int] = ...,
    rootOnCurve: bool = ...,
    rootTwistMode: bool = ...,
    simplifyCurve: bool = ...,
    snapCurve: bool = ...,
    snapHandleH: bool = ...,
    solverTypeH: Queryable[str] = ...,
    stickyH: Queryable[str] = ...,
    twistType: str = ...,
    weightH: Queryable[float] = ...,
) -> Union[str, bool, float, int]: ...
def ikHandleDisplayScale(arg0: float = ..., /) -> float: ...
def ikSolver(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    epsilon: Queryable[float] = ...,
    maxIterations: Queryable[int] = ...,
    name: Queryable[str] = ...,
    solverType: Queryable[str] = ...,
) -> Union[str, float, int]: ...
def ikSplineHandleCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    autoPriorityH: bool = ...,
    createCurve: bool = ...,
    createRootAxis: bool = ...,
    exists: bool = ...,
    forceSolverH: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    name: str = ...,
    numSpans: int = ...,
    parentCurve: bool = ...,
    poWeightH: Queryable[float] = ...,
    priorityH: Queryable[int] = ...,
    rootOnCurve: bool = ...,
    rootTwistMode: bool = ...,
    simplifyCurve: bool = ...,
    snapCurve: bool = ...,
    snapHandleH: bool = ...,
    solverTypeH: Queryable[str] = ...,
    stickyH: Queryable[str] = ...,
    twistType: str = ...,
    weightH: Queryable[float] = ...,
) -> Union[str, bool, float, int]: ...
def ikSystem(
    *,
    edit: bool = ...,
    query: bool = ...,
    allowRotation: bool = ...,
    autoPriority: bool = ...,
    autoPriorityMC: bool = ...,
    autoPrioritySC: bool = ...,
    list: Queryable[Tuple[int, int]] = ...,
    snap: bool = ...,
    solve: bool = ...,
    solverTypes: bool = ...,
) -> Union[str, bool, Tuple[int, int]]: ...
def ikSystemInfo(
    arg0: bool = ..., /, *, query: bool = ..., globalSnapHandle: bool = ...
) -> bool: ...
def ikfkDisplayMethod(
    *, query: bool = ..., display: Queryable[str] = ...
) -> Union[bool, str]: ...
def illustratorCurves(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    illustratorFilename: str = ...,
    nodeState: Queryable[int] = ...,
    object: bool = ...,
    tolerance: Queryable[float] = ...,
) -> Union[List[str], bool, int, float]: ...
def image(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    image: Queryable[str] = ...,
    isObscured: bool = ...,
    manage: bool = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    statusBarMessage: str = ...,
    useTemplate: str = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[str, Tuple[float, float, float], bool, int, Callable[..., Any]]: ...
def imagePlane(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    camera: Queryable[str] = ...,
    counter: bool = ...,
    detach: bool = ...,
    dropFrame: bool = ...,
    fileName: str = ...,
    frameDuration: Queryable[int] = ...,
    height: Queryable[float] = ...,
    imageSize: Queryable[Tuple[int, int]] = ...,
    lookThrough: Queryable[str] = ...,
    maintainRatio: bool = ...,
    name: Queryable[str] = ...,
    negTimesOK: bool = ...,
    numFrames: Queryable[int] = ...,
    quickTime: bool = ...,
    showInAllViews: bool = ...,
    timeCode: Queryable[int] = ...,
    timeCodeTrack: bool = ...,
    timeScale: Queryable[int] = ...,
    twentyFourHourMax: bool = ...,
    width: Queryable[float] = ...,
) -> Union[bool, str, int, float, Tuple[int, int]]: ...
def imageWindowEditor(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    autoResize: bool = ...,
    changeCommand: Tuple[str, str, str, str] = ...,
    clear: Tuple[int, int, float, float, float] = ...,
    control: bool = ...,
    drawAxis: bool = ...,
    doubleBuffer: bool = ...,
    displayImage: int = ...,
    displayStyle: str = ...,
    defineTemplate: str = ...,
    docTag: str = ...,
    exists: bool = ...,
    filter: str = ...,
    frameImage: bool = ...,
    forceMainConnection: str = ...,
    frameRegion: bool = ...,
    highlightConnection: str = ...,
    lockMainConnection: bool = ...,
    loadImage: str = ...,
    mainListConnection: str = ...,
    marquee: Tuple[float, float, float, float] = ...,
    nbImages: bool = ...,
    parent: str = ...,
    panel: str = ...,
    removeAllImages: bool = ...,
    refresh: bool = ...,
    removeImage: bool = ...,
    realSize: bool = ...,
    scaleBlue: float = ...,
    singleBuffer: bool = ...,
    scaleGreen: float = ...,
    saveImage: bool = ...,
    selectionConnection: str = ...,
    scaleRed: float = ...,
    showRegion: Tuple[int, int] = ...,
    stateString: bool = ...,
    toggle: bool = ...,
    unlockMainConnection: bool = ...,
    unParent: bool = ...,
    updateMainConnection: bool = ...,
    useTemplate: str = ...,
    writeImage: str = ...,
) -> None: ...
def imfPlugins(
    arg0: str = ...,
    /,
    *,
    query: bool = ...,
    extension: Queryable[str] = ...,
    keyword: Queryable[str] = ...,
    multiFrameSupport: Queryable[str] = ...,
    pluginName: Queryable[str] = ...,
    readSupport: Queryable[str] = ...,
    writeSupport: Queryable[str] = ...,
) -> Union[List[str], str]: ...
def inViewMessage(
    *,
    alpha: float = ...,
    assistMessage: str = ...,
    backColor: int = ...,
    clear: str = ...,
    clickKill: bool = ...,
    dragKill: bool = ...,
    fade: bool = ...,
    fadeInTime: int = ...,
    fadeOutTime: int = ...,
    fadeStayTime: int = ...,
    font: str = ...,
    fontSize: int = ...,
    frameOffset: int = ...,
    hide: bool = ...,
    message: str = ...,
    minimize: bool = ...,
    position: str = ...,
    restore: bool = ...,
    show: bool = ...,
    statusMessage: str = ...,
    textAlpha: float = ...,
    textOffset: int = ...,
    uvEditor: bool = ...,
) -> bool: ...
def inheritTransform(
    *args: str,
    query: bool = ...,
    off: bool = ...,
    on: bool = ...,
    preserve: bool = ...,
    toggle: bool = ...,
) -> bool: ...
def insertJoint(arg0: str = ..., /) -> str: ...
def insertJointCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    exists: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
) -> str: ...
def insertKeyCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    breakdown: bool = ...,
    exists: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    name: str = ...,
    preserveTangent: bool = ...,
) -> Union[str, bool]: ...
def insertKnotCurve(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    addKnots: bool = ...,
    caching: bool = ...,
    insertBetween: bool = ...,
    nodeState: Queryable[int] = ...,
    numberOfKnots: Queryable[Multiuse[int]] = ...,
    parameter: Queryable[Multiuse[float]] = ...,
    constructionHistory: bool = ...,
    curveOnSurface: bool = ...,
    name: str = ...,
    object: bool = ...,
    replaceOriginal: bool = ...,
) -> Union[List[str], bool, int, Multiuse[int], Multiuse[float]]: ...
def insertKnotSurface(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    addKnots: bool = ...,
    caching: bool = ...,
    direction: Queryable[int] = ...,
    insertBetween: bool = ...,
    nodeState: Queryable[int] = ...,
    numberOfKnots: Queryable[Multiuse[int]] = ...,
    parameter: Queryable[Multiuse[float]] = ...,
    constructionHistory: bool = ...,
    name: str = ...,
    object: bool = ...,
    replaceOriginal: bool = ...,
) -> Union[List[str], bool, int, Multiuse[int], Multiuse[float]]: ...
def insertListItem() -> None: ...
def insertListItemBefore() -> None: ...
def instance(
    *args: str, leaf: bool = ..., name: str = ..., smartTransform: bool = ...
) -> str: ...
def instanceable(
    *args: str,
    query: bool = ...,
    allow: bool = ...,
    recursive: bool = ...,
    shape: bool = ...,
) -> Union[None, List[bool], bool]: ...
def instancer(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    addObject: bool = ...,
    cycle: Queryable[str] = ...,
    cycleStep: Queryable[float] = ...,
    cycleStepUnits: Queryable[str] = ...,
    index: Queryable[int] = ...,
    levelOfDetail: Queryable[str] = ...,
    name: Queryable[str] = ...,
    object: Queryable[Multiuse[str]] = ...,
    objectPosition: Queryable[str] = ...,
    objectRotation: Queryable[str] = ...,
    objectScale: Queryable[str] = ...,
    pointDataSource: bool = ...,
    removeObject: bool = ...,
    rotationOrder: Queryable[str] = ...,
    rotationUnits: Queryable[str] = ...,
    valueName: Queryable[str] = ...,
) -> Union[str, float, int, Multiuse[str], bool]: ...
def intField(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    changeCommand: Callable[..., Any] = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dragCommand: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    editable: bool = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    enterCommand: Callable[..., Any] = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    isObscured: bool = ...,
    manage: bool = ...,
    maxValue: Queryable[int] = ...,
    minValue: Queryable[int] = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    receiveFocusCommand: Callable[..., Any] = ...,
    statusBarMessage: str = ...,
    step: Queryable[int] = ...,
    useTemplate: str = ...,
    value: Queryable[int] = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[str, Tuple[float, float, float], bool, int, Callable[..., Any]]: ...
def intFieldGrp(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    adjustableColumn: int = ...,
    adjustableColumn2: int = ...,
    adjustableColumn3: int = ...,
    adjustableColumn4: int = ...,
    adjustableColumn5: int = ...,
    adjustableColumn6: int = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    changeCommand: Callable[..., Any] = ...,
    columnAlign: Multiuse[Tuple[int, str]] = ...,
    columnAlign2: Tuple[str, str] = ...,
    columnAlign3: Tuple[str, str, str] = ...,
    columnAlign4: Tuple[str, str, str, str] = ...,
    columnAlign5: Tuple[str, str, str, str, str] = ...,
    columnAlign6: Tuple[str, str, str, str, str, str] = ...,
    columnAttach: Multiuse[Tuple[int, str, int]] = ...,
    columnAttach2: Tuple[str, str] = ...,
    columnAttach3: Tuple[str, str, str] = ...,
    columnAttach4: Tuple[str, str, str, str] = ...,
    columnAttach5: Tuple[str, str, str, str, str] = ...,
    columnAttach6: Tuple[str, str, str, str, str, str] = ...,
    columnOffset2: Tuple[int, int] = ...,
    columnOffset3: Tuple[int, int, int] = ...,
    columnOffset4: Tuple[int, int, int, int] = ...,
    columnOffset5: Tuple[int, int, int, int, int] = ...,
    columnOffset6: Tuple[int, int, int, int, int, int] = ...,
    columnWidth: Multiuse[Tuple[int, int]] = ...,
    columnWidth1: int = ...,
    columnWidth2: Tuple[int, int] = ...,
    columnWidth3: Tuple[int, int, int] = ...,
    columnWidth4: Tuple[int, int, int, int] = ...,
    columnWidth5: Tuple[int, int, int, int, int] = ...,
    columnWidth6: Tuple[int, int, int, int, int, int] = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dragCommand: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enable1: bool = ...,
    enable2: bool = ...,
    enable3: bool = ...,
    enable4: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    extraLabel: Queryable[str] = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    isObscured: bool = ...,
    label: Queryable[str] = ...,
    manage: bool = ...,
    noBackground: bool = ...,
    numberOfFields: int = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    rowAttach: Multiuse[Tuple[int, str, int]] = ...,
    statusBarMessage: str = ...,
    useTemplate: str = ...,
    value: Queryable[Tuple[int, int, int, int]] = ...,
    value1: Queryable[int] = ...,
    value2: Queryable[int] = ...,
    value3: Queryable[int] = ...,
    value4: Queryable[int] = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[
    str,
    Tuple[float, float, float],
    bool,
    int,
    Tuple[int, int, int, int],
    Callable[..., Any],
]: ...
def intScrollBar(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    changeCommand: Callable[..., Any] = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dragCommand: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    horizontal: bool = ...,
    isObscured: bool = ...,
    largeStep: Queryable[int] = ...,
    manage: bool = ...,
    maxValue: Queryable[int] = ...,
    minValue: Queryable[int] = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    statusBarMessage: str = ...,
    step: Queryable[int] = ...,
    useTemplate: str = ...,
    value: Queryable[int] = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[str, Tuple[float, float, float], bool, int, Callable[..., Any]]: ...
def intSlider(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    changeCommand: Callable[..., Any] = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dragCommand: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    horizontal: bool = ...,
    isObscured: bool = ...,
    manage: bool = ...,
    maxValue: Queryable[int] = ...,
    minValue: Queryable[int] = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    statusBarMessage: str = ...,
    step: Queryable[int] = ...,
    useTemplate: str = ...,
    value: Queryable[int] = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[str, Tuple[float, float, float], bool, int, Callable[..., Any]]: ...
def intSliderGrp(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    adjustableColumn: int = ...,
    adjustableColumn2: int = ...,
    adjustableColumn3: int = ...,
    adjustableColumn4: int = ...,
    adjustableColumn5: int = ...,
    adjustableColumn6: int = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    changeCommand: Callable[..., Any] = ...,
    columnAlign: Multiuse[Tuple[int, str]] = ...,
    columnAlign2: Tuple[str, str] = ...,
    columnAlign3: Tuple[str, str, str] = ...,
    columnAlign4: Tuple[str, str, str, str] = ...,
    columnAlign5: Tuple[str, str, str, str, str] = ...,
    columnAlign6: Tuple[str, str, str, str, str, str] = ...,
    columnAttach: Multiuse[Tuple[int, str, int]] = ...,
    columnAttach2: Tuple[str, str] = ...,
    columnAttach3: Tuple[str, str, str] = ...,
    columnAttach4: Tuple[str, str, str, str] = ...,
    columnAttach5: Tuple[str, str, str, str, str] = ...,
    columnAttach6: Tuple[str, str, str, str, str, str] = ...,
    columnOffset2: Tuple[int, int] = ...,
    columnOffset3: Tuple[int, int, int] = ...,
    columnOffset4: Tuple[int, int, int, int] = ...,
    columnOffset5: Tuple[int, int, int, int, int] = ...,
    columnOffset6: Tuple[int, int, int, int, int, int] = ...,
    columnWidth: Multiuse[Tuple[int, int]] = ...,
    columnWidth1: int = ...,
    columnWidth2: Tuple[int, int] = ...,
    columnWidth3: Tuple[int, int, int] = ...,
    columnWidth4: Tuple[int, int, int, int] = ...,
    columnWidth5: Tuple[int, int, int, int, int] = ...,
    columnWidth6: Tuple[int, int, int, int, int, int] = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dragCommand: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    extraLabel: Queryable[str] = ...,
    field: bool = ...,
    fieldMaxValue: Queryable[int] = ...,
    fieldMinValue: Queryable[int] = ...,
    fieldStep: Queryable[int] = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    isObscured: bool = ...,
    label: Queryable[str] = ...,
    manage: bool = ...,
    maxValue: Queryable[int] = ...,
    minValue: Queryable[int] = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    rowAttach: Multiuse[Tuple[int, str, int]] = ...,
    sliderStep: Queryable[int] = ...,
    statusBarMessage: str = ...,
    step: Queryable[int] = ...,
    useTemplate: str = ...,
    value: Queryable[int] = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[str, Tuple[float, float, float], bool, int, Callable[..., Any]]: ...
def interactionStyle(*, query: bool = ..., style: str = ...) -> None: ...
def internalVar(
    *,
    mayaInstallDir: bool = ...,
    userAppDir: bool = ...,
    userBitmapsDir: bool = ...,
    userHotkeyDir: bool = ...,
    userMarkingMenuDir: bool = ...,
    userPrefDir: bool = ...,
    userPresetsDir: bool = ...,
    userScriptDir: bool = ...,
    userShelfDir: bool = ...,
    userTmpDir: bool = ...,
    userWorkspaceDir: bool = ...,
) -> str: ...
def intersect(
    arg0: str = ...,
    arg1: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    firstSurface: bool = ...,
    nodeState: Queryable[int] = ...,
    tolerance: Queryable[float] = ...,
    constructionHistory: bool = ...,
    curveOnSurface: bool = ...,
    name: str = ...,
    object: bool = ...,
) -> Union[List[str], bool, int, float]: ...
def invertShape(arg0: str = ..., arg1: str = ..., /) -> None: ...
def iprEngine(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    copy: str = ...,
    defineTemplate: str = ...,
    diagnostics: bool = ...,
    estimatedMemory: bool = ...,
    exists: bool = ...,
    iprImage: Queryable[str] = ...,
    motionVectorFile: bool = ...,
    object: Queryable[str] = ...,
    region: Queryable[Tuple[int, int, int, int]] = ...,
    relatedFiles: bool = ...,
    releaseIprImage: bool = ...,
    resolution: bool = ...,
    scanlineIncrement: Queryable[str] = ...,
    showProgressBar: bool = ...,
    startTuning: bool = ...,
    stopTuning: bool = ...,
    underPixel: Tuple[int, int] = ...,
    update: bool = ...,
    updateDepthOfField: bool = ...,
    updateLightGlow: bool = ...,
    updateMotionBlur: bool = ...,
    updatePort: Queryable[str] = ...,
    updateShaderGlow: bool = ...,
    updateShading: bool = ...,
    updateShadowMaps: bool = ...,
    useTemplate: str = ...,
) -> Union[str, bool, Tuple[int, int, int, int]]: ...
def isConnected(
    arg0: str = ..., arg1: str = ..., /, *, ignoreUnitConversion: bool = ...
) -> bool: ...
def isDirty(*args: str, connection: bool = ..., datablock: bool = ...) -> bool: ...
def isTrue(arg0: str = ..., /) -> bool: ...
def isolateSelect(
    arg0: str = ...,
    /,
    *,
    query: bool = ...,
    addDagObject: str = ...,
    addSelected: bool = ...,
    addSelectedObjects: bool = ...,
    loadSelected: bool = ...,
    removeDagObject: str = ...,
    removeSelected: bool = ...,
    state: bool = ...,
    update: bool = ...,
    viewObjects: bool = ...,
) -> bool: ...
def itemFilter(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    byBin: Queryable[Multiuse[str]] = ...,
    byName: Queryable[str] = ...,
    byScript: Queryable[str] = ...,
    byType: Queryable[Multiuse[str]] = ...,
    category: Queryable[Multiuse[str]] = ...,
    classification: Queryable[str] = ...,
    clearByBin: bool = ...,
    clearByType: bool = ...,
    difference: Queryable[Tuple[str, str]] = ...,
    exists: bool = ...,
    intersect: Queryable[Tuple[str, str]] = ...,
    listBuiltInFilters: bool = ...,
    listOtherFilters: bool = ...,
    listUserFilters: bool = ...,
    negate: bool = ...,
    parent: Queryable[str] = ...,
    pythonModule: Queryable[str] = ...,
    secondScript: Queryable[str] = ...,
    text: Queryable[str] = ...,
    union: Queryable[Tuple[str, str]] = ...,
    uniqueNodeNames: bool = ...,
) -> Union[str, List[str], Multiuse[str], Tuple[str, str], bool]: ...
def itemFilterAttr(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    byName: Queryable[str] = ...,
    byNameString: Queryable[Multiuse[str]] = ...,
    byScript: Queryable[str] = ...,
    classification: Queryable[str] = ...,
    dynamic: bool = ...,
    exists: bool = ...,
    hasCurve: bool = ...,
    hasDrivenKey: bool = ...,
    hasExpression: bool = ...,
    hidden: bool = ...,
    intersect: Queryable[Tuple[str, str]] = ...,
    keyable: bool = ...,
    listBuiltInFilters: bool = ...,
    listOtherFilters: bool = ...,
    listUserFilters: bool = ...,
    negate: bool = ...,
    parent: str = ...,
    published: bool = ...,
    readable: bool = ...,
    scaleRotateTranslate: bool = ...,
    secondScript: Queryable[str] = ...,
    text: Queryable[str] = ...,
    union: Queryable[Tuple[str, str]] = ...,
    writable: bool = ...,
) -> Union[str, List[str], Multiuse[str], bool, Tuple[str, str]]: ...
def itemFilterRender(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    anyTextures: bool = ...,
    category: Multiuse[str] = ...,
    classification: str = ...,
    exists: bool = ...,
    exclusiveLights: bool = ...,
    lights: bool = ...,
    listBuiltInFilters: bool = ...,
    linkedLights: bool = ...,
    listOtherFilters: bool = ...,
    lightSets: bool = ...,
    listUserFilters: bool = ...,
    nodeClassification: Multiuse[str] = ...,
    negate: bool = ...,
    nonIlluminatingLights: bool = ...,
    nonExclusiveLights: bool = ...,
    parent: str = ...,
    postProcess: bool = ...,
    renderingNode: bool = ...,
    renderableObjectSets: bool = ...,
    renderUtilityNode: bool = ...,
    shaders: bool = ...,
    text: str = ...,
    textures2d: bool = ...,
    textures3d: bool = ...,
    texturesProcedural: bool = ...,
) -> None: ...
def itemFilterType(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    text: Queryable[str] = ...,
    type: bool = ...,
) -> Union[str, List[str], bool]: ...
def iterOnNurbs(*args: Any, **kwargs: Any) -> None: ...
def joint(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    absolute: bool = ...,
    angleX: Queryable[float] = ...,
    angleY: Queryable[float] = ...,
    angleZ: Queryable[float] = ...,
    assumePreferredAngles: bool = ...,
    autoOrientSecondaryAxis: bool = ...,
    automaticLimits: bool = ...,
    children: bool = ...,
    component: bool = ...,
    degreeOfFreedom: Queryable[str] = ...,
    exists: Queryable[str] = ...,
    limitSwitchX: bool = ...,
    limitSwitchY: bool = ...,
    limitSwitchZ: bool = ...,
    limitX: Queryable[Tuple[float, float]] = ...,
    limitY: Queryable[Tuple[float, float]] = ...,
    limitZ: Queryable[Tuple[float, float]] = ...,
    name: Queryable[str] = ...,
    orientJoint: str = ...,
    orientation: Queryable[Tuple[float, float, float]] = ...,
    position: Queryable[Tuple[float, float, float]] = ...,
    radius: Queryable[float] = ...,
    relative: bool = ...,
    rotationOrder: Queryable[str] = ...,
    scale: Queryable[Tuple[float, float, float]] = ...,
    scaleCompensate: bool = ...,
    scaleOrientation: Queryable[Tuple[float, float, float]] = ...,
    secondaryAxisOrient: str = ...,
    setPreferredAngles: bool = ...,
    stiffnessX: Queryable[float] = ...,
    stiffnessY: Queryable[float] = ...,
    stiffnessZ: Queryable[float] = ...,
    symmetry: bool = ...,
    symmetryAxis: str = ...,
    zeroScaleOrient: bool = ...,
) -> Union[str, bool, float, Tuple[float, float], Tuple[float, float, float]]: ...
def jointCluster(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    aboveBound: Queryable[float] = ...,
    aboveCluster: bool = ...,
    aboveDropoffType: Queryable[str] = ...,
    aboveValue: Queryable[float] = ...,
    belowBound: Queryable[float] = ...,
    belowCluster: bool = ...,
    belowDropoffType: Queryable[str] = ...,
    belowValue: Queryable[float] = ...,
    deformerTools: bool = ...,
    joint: str = ...,
    name: str = ...,
) -> Union[str, float, bool]: ...
def jointCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    autoJointOrient: Queryable[str] = ...,
    autoOrientSecondaryAxis: bool = ...,
    autoPriorityH: bool = ...,
    createIKHandle: bool = ...,
    degreeOfFreedomJ: Queryable[str] = ...,
    exists: bool = ...,
    forceSolverH: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    jointAutoLimits: bool = ...,
    jointOrientationJ: Queryable[Tuple[float, float, float]] = ...,
    largeBoneLength: Queryable[float] = ...,
    largeBoneRadius: Queryable[float] = ...,
    poWeightH: Queryable[float] = ...,
    priorityH: Queryable[int] = ...,
    scaleCompensateJ: bool = ...,
    scaleJ: Queryable[Tuple[float, float, float]] = ...,
    scaleOrientationJ: Queryable[Tuple[float, float, float]] = ...,
    secondaryAxisOrient: Queryable[str] = ...,
    smallBoneLength: Queryable[float] = ...,
    smallBoneRadius: Queryable[float] = ...,
    snapHandleH: bool = ...,
    solverTypeH: Queryable[str] = ...,
    stickyH: Queryable[str] = ...,
    symmetry: bool = ...,
    symmetryAxis: Queryable[str] = ...,
    variableBoneSize: bool = ...,
    weightH: Queryable[float] = ...,
) -> Union[str, bool, Tuple[float, float, float], float, int]: ...
def jointDisplayScale(
    arg0: float = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    absolute: bool = ...,
    ikfk: Queryable[float] = ...,
) -> Union[float, bool]: ...
def jointLattice(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    after: bool = ...,
    afterReference: bool = ...,
    before: bool = ...,
    components: bool = ...,
    creasing: Queryable[float] = ...,
    deformerTools: bool = ...,
    dumpInfo: bool = ...,
    exclusive: Queryable[str] = ...,
    fixedSetupData: str = ...,
    frontOfChain: bool = ...,
    geometry: Queryable[Multiuse[str]] = ...,
    geometryIndices: bool = ...,
    ignoreSelected: bool = ...,
    includeHiddenSelections: bool = ...,
    joint: str = ...,
    lengthIn: Queryable[float] = ...,
    lengthOut: Queryable[float] = ...,
    lowerBindSkin: str = ...,
    lowerTransform: str = ...,
    name: str = ...,
    parallel: bool = ...,
    prune: bool = ...,
    remove: Multiuse[bool] = ...,
    rounding: Queryable[float] = ...,
    selectedComponents: bool = ...,
    split: bool = ...,
    upperBindSkin: str = ...,
    upperTransform: str = ...,
    useComponentTags: bool = ...,
    widthLeft: Queryable[float] = ...,
    widthRight: Queryable[float] = ...,
) -> Union[str, bool, float, Multiuse[str]]: ...
def journal(
    *,
    query: bool = ...,
    comment: str = ...,
    flush: bool = ...,
    highPrecision: bool = ...,
    state: bool = ...,
) -> None: ...
def keyTangent(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    absolute: bool = ...,
    animation: str = ...,
    attribute: Multiuse[str] = ...,
    controlPoints: bool = ...,
    float: Multiuse[Range[float]] = ...,
    g: bool = ...,
    hierarchy: str = ...,
    inAngle: Queryable[float] = ...,
    inTangentType: Queryable[str] = ...,
    inWeight: Queryable[float] = ...,
    includeUpperBound: bool = ...,
    index: Multiuse[int] = ...,
    ix: Queryable[float] = ...,
    iy: Queryable[float] = ...,
    lock: bool = ...,
    outAngle: Queryable[float] = ...,
    outTangentType: Queryable[str] = ...,
    outWeight: Queryable[float] = ...,
    ox: Queryable[float] = ...,
    oy: Queryable[float] = ...,
    pluginTangentTypes: Queryable[str] = ...,
    relative: bool = ...,
    shape: bool = ...,
    stepAttributes: bool = ...,
    time: Multiuse[NullableRange[float]] = ...,
    unify: bool = ...,
    weightLock: bool = ...,
    weightedTangents: bool = ...,
) -> Union[int, float, str, bool]: ...
def keyframe(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    absolute: bool = ...,
    adjustBreakdown: bool = ...,
    animation: str = ...,
    attribute: Multiuse[str] = ...,
    breakdown: bool = ...,
    clipTime: Tuple[int, int, float] = ...,
    controlPoints: bool = ...,
    eval: bool = ...,
    float: Multiuse[Range[float]] = ...,
    floatChange: Queryable[float] = ...,
    hierarchy: str = ...,
    includeUpperBound: bool = ...,
    index: Multiuse[int] = ...,
    indexValue: bool = ...,
    keyframeCount: bool = ...,
    lastSelected: bool = ...,
    name: bool = ...,
    option: str = ...,
    relative: bool = ...,
    selected: bool = ...,
    shape: bool = ...,
    tickDrawSpecial: bool = ...,
    time: Multiuse[NullableRange[float]] = ...,
    timeChange: Queryable[int] = ...,
    valueChange: Queryable[float] = ...,
) -> Union[int, bool, float]: ...
def keyframeOutliner(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    animCurve: str = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    defineTemplate: str = ...,
    display: Queryable[str] = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    isObscured: bool = ...,
    manage: bool = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    statusBarMessage: str = ...,
    useTemplate: str = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[str, Tuple[float, float, float], bool, int, Callable[..., Any]]: ...
def keyframeRegionCurrentTimeCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    exists: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    name: str = ...,
) -> str: ...
def keyframeRegionDirectKeyCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    exists: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    name: str = ...,
    option: str = ...,
) -> str: ...
def keyframeRegionDollyCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    exists: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    name: str = ...,
) -> str: ...
def keyframeRegionInsertKeyCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    breakdown: bool = ...,
    exists: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    name: str = ...,
) -> Union[str, bool]: ...
def keyframeRegionMoveKeyCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    exists: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    name: str = ...,
    option: Queryable[str] = ...,
) -> str: ...
def keyframeRegionScaleKeyCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    exists: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    name: str = ...,
    scaleSpecifiedKeys: bool = ...,
    type: str = ...,
) -> Union[str, bool]: ...
def keyframeRegionSelectKeyCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    exists: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    name: str = ...,
) -> str: ...
def keyframeRegionSetKeyCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    breakdown: bool = ...,
    exists: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    name: str = ...,
) -> Union[str, bool]: ...
def keyframeRegionTrackCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    exists: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    name: str = ...,
) -> str: ...
def keyframeStats(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    adjustableColumn: int = ...,
    adjustableColumn2: int = ...,
    adjustableColumn3: int = ...,
    adjustableColumn4: int = ...,
    adjustableColumn5: int = ...,
    adjustableColumn6: int = ...,
    animEditor: Queryable[str] = ...,
    annotation: Queryable[str] = ...,
    autoUnitWidth: Queryable[int] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    columnAlign: Multiuse[Tuple[int, str]] = ...,
    columnAlign2: Tuple[str, str] = ...,
    columnAlign3: Tuple[str, str, str] = ...,
    columnAlign4: Tuple[str, str, str, str] = ...,
    columnAlign5: Tuple[str, str, str, str, str] = ...,
    columnAlign6: Tuple[str, str, str, str, str, str] = ...,
    columnAttach: Multiuse[Tuple[int, str, int]] = ...,
    columnAttach2: Tuple[str, str] = ...,
    columnAttach3: Tuple[str, str, str] = ...,
    columnAttach4: Tuple[str, str, str, str] = ...,
    columnAttach5: Tuple[str, str, str, str, str] = ...,
    columnAttach6: Tuple[str, str, str, str, str, str] = ...,
    columnOffset2: Tuple[int, int] = ...,
    columnOffset3: Tuple[int, int, int] = ...,
    columnOffset4: Tuple[int, int, int, int] = ...,
    columnOffset5: Tuple[int, int, int, int, int] = ...,
    columnOffset6: Tuple[int, int, int, int, int, int] = ...,
    columnWidth: Multiuse[Tuple[int, int]] = ...,
    columnWidth1: int = ...,
    columnWidth2: Tuple[int, int] = ...,
    columnWidth3: Tuple[int, int, int] = ...,
    columnWidth4: Tuple[int, int, int, int] = ...,
    columnWidth5: Tuple[int, int, int, int, int] = ...,
    columnWidth6: Tuple[int, int, int, int, int, int] = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    isObscured: bool = ...,
    manage: bool = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    precision: Queryable[int] = ...,
    preventOverride: bool = ...,
    rowAttach: Multiuse[Tuple[int, str, int]] = ...,
    statusBarMessage: str = ...,
    timeAnnotation: Queryable[str] = ...,
    useTemplate: str = ...,
    valueAnnotation: Queryable[str] = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[str, int, Tuple[float, float, float], bool, Callable[..., Any]]: ...
def keyframeTangentControl(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    isObscured: bool = ...,
    manage: bool = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    precision: Queryable[int] = ...,
    preventOverride: bool = ...,
    statusBarMessage: str = ...,
    useTemplate: str = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[str, Tuple[float, float, float], bool, int, Callable[..., Any]]: ...
def keyingGroup(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    activator: Queryable[str] = ...,
    addElement: str = ...,
    afterFilters: bool = ...,
    anyMember: str = ...,
    category: Queryable[str] = ...,
    channelSetColor: Queryable[Tuple[float, float, float]] = ...,
    channelSetColorIndex: Queryable[int] = ...,
    clear: str = ...,
    color: Queryable[int] = ...,
    copy: str = ...,
    edges: bool = ...,
    editPoints: bool = ...,
    empty: bool = ...,
    excludeDynamic: bool = ...,
    excludeRotate: bool = ...,
    excludeScale: bool = ...,
    excludeTranslate: bool = ...,
    excludeVisibility: bool = ...,
    facets: bool = ...,
    flatten: str = ...,
    forceElement: str = ...,
    include: str = ...,
    intersection: str = ...,
    isIntersecting: str = ...,
    isMember: str = ...,
    layer: bool = ...,
    minimizeRotation: bool = ...,
    name: str = ...,
    noIntermediate: bool = ...,
    noSurfaceShader: bool = ...,
    noWarnings: bool = ...,
    nodesOnly: bool = ...,
    ordered: bool = ...,
    remove: str = ...,
    removeActivator: str = ...,
    renderable: bool = ...,
    setActiveFilter: Queryable[str] = ...,
    size: bool = ...,
    split: str = ...,
    subtract: str = ...,
    text: Queryable[str] = ...,
    union: str = ...,
    vertices: bool = ...,
) -> Union[str, List[str], bool, Tuple[float, float, float], int]: ...
def lassoContext(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    drawClosed: bool = ...,
    exists: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    name: str = ...,
) -> Union[str, bool]: ...
def lattice(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    after: bool = ...,
    afterReference: bool = ...,
    before: bool = ...,
    commonParent: bool = ...,
    components: bool = ...,
    deformerTools: bool = ...,
    divisions: Queryable[Tuple[int, int, int]] = ...,
    dualBase: bool = ...,
    dumpInfo: bool = ...,
    exclusive: Queryable[str] = ...,
    fixedSetupData: str = ...,
    freezeMapping: bool = ...,
    frontOfChain: bool = ...,
    geometry: Queryable[Multiuse[str]] = ...,
    geometryIndices: bool = ...,
    ignoreSelected: bool = ...,
    includeHiddenSelections: bool = ...,
    latticeReset: bool = ...,
    ldivisions: Queryable[Tuple[int, int, int]] = ...,
    minimumSize: float = ...,
    name: str = ...,
    objectCentered: bool = ...,
    outsideFalloffDistance: float = ...,
    outsideLattice: int = ...,
    parallel: bool = ...,
    position: Tuple[float, float, float] = ...,
    prune: bool = ...,
    remove: Multiuse[bool] = ...,
    removeTweaks: bool = ...,
    rotation: Tuple[float, float, float] = ...,
    scale: Tuple[float, float, float] = ...,
    selectedComponents: bool = ...,
    split: bool = ...,
    useComponentTags: bool = ...,
) -> Union[List[str], bool, Tuple[int, int, int], str, Multiuse[str]]: ...
def latticeDeformKeyCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    envelope: Queryable[float] = ...,
    exists: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    latticeColumns: Queryable[int] = ...,
    latticeRows: Queryable[int] = ...,
    name: str = ...,
    scaleLatticePts: bool = ...,
) -> Union[str, float, int, bool]: ...
def launch(
    *, directory: str = ..., movie: str = ..., pdfFile: str = ..., webPage: str = ...
) -> bool: ...
def launchImageEditor(
    *, editImageFile: str = ..., viewImageFile: str = ...
) -> bool: ...
def layerButton(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    changeCommand: Callable[..., Any] = ...,
    color: Tuple[float, float, float] = ...,
    command: Callable[..., Any] = ...,
    current: bool = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    doubleClickCommand: Callable[..., Any] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    hideOnPlaybackCommand: Callable[..., Any] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    identification: Queryable[int] = ...,
    isObscured: bool = ...,
    label: Queryable[str] = ...,
    labelWidth: bool = ...,
    layerHideOnPlayback: bool = ...,
    layerState: Queryable[str] = ...,
    layerVisible: bool = ...,
    manage: bool = ...,
    name: Queryable[str] = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    renameCommand: str = ...,
    select: bool = ...,
    statusBarMessage: str = ...,
    transparent: bool = ...,
    typeCommand: Callable[..., Any] = ...,
    useTemplate: str = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    visibleCommand: Callable[..., Any] = ...,
    width: Queryable[int] = ...,
) -> Union[str, Tuple[float, float, float], bool, int, Callable[..., Any]]: ...
def layeredShaderPort(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    isObscured: bool = ...,
    manage: bool = ...,
    noBackground: bool = ...,
    node: str = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    selectedColorControl: str = ...,
    selectedTransparencyControl: str = ...,
    statusBarMessage: str = ...,
    useTemplate: str = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[str, Tuple[float, float, float], bool, int, Callable[..., Any]]: ...
def layeredTexturePort(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    isObscured: bool = ...,
    manage: bool = ...,
    noBackground: bool = ...,
    node: str = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    selectedAlphaControl: str = ...,
    selectedBlendModeControl: str = ...,
    selectedColorControl: str = ...,
    selectedIsVisibleControl: str = ...,
    statusBarMessage: str = ...,
    useTemplate: str = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[str, Tuple[float, float, float], bool, int, Callable[..., Any]]: ...
def layout(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    childArray: bool = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    generalSpacing: int = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    isObscured: bool = ...,
    manage: bool = ...,
    margins: int = ...,
    margins4: Tuple[int, int, int, int] = ...,
    noBackground: bool = ...,
    numberOfChildren: bool = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    statusBarMessage: str = ...,
    useTemplate: str = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[bool, str, Tuple[float, float, float], int, Callable[..., Any]]: ...
def layoutDialog(
    *,
    backgroundColor: Tuple[float, float, float] = ...,
    dismiss: str = ...,
    parent: str = ...,
    resizable: bool = ...,
    title: str = ...,
    uiScript: Callable[..., Any] = ...,
) -> str: ...
def license(
    *,
    borrow: bool = ...,
    info: bool = ...,
    isBorrowed: bool = ...,
    isExported: bool = ...,
    isTrial: bool = ...,
    licenseMethod: bool = ...,
    productChoice: bool = ...,
    r: bool = ...,
    showBorrowInfo: bool = ...,
    showProductInfoDialog: bool = ...,
    status: bool = ...,
    usage: bool = ...,
) -> str: ...
def licenseCheck(*, mode: str = ..., type: str = ...) -> None: ...
def lightList(
    *args: str, edit: bool = ..., query: bool = ..., add: str = ..., remove: str = ...
) -> bool: ...
def lightlink(
    *args: str,
    query: bool = ...,
    b: bool = ...,
    hierarchy: bool = ...,
    light: Multiuse[str] = ...,
    make: bool = ...,
    object: Multiuse[str] = ...,
    sets: bool = ...,
    shadow: bool = ...,
    shapes: bool = ...,
    transforms: bool = ...,
    useActiveLights: bool = ...,
    useActiveObjects: bool = ...,
) -> Union[str, List[str]]: ...
def linearPrecision(arg0: int = ..., /) -> bool: ...
def listAnimatable(
    *args: str,
    active: bool = ...,
    manip: bool = ...,
    manipHandle: bool = ...,
    shape: bool = ...,
    type: bool = ...,
) -> List[str]: ...
def listAttr(
    *args: str,
    array: bool = ...,
    attributeType: Multiuse[str] = ...,
    caching: bool = ...,
    category: Multiuse[str] = ...,
    changedSinceFileOpen: bool = ...,
    channelBox: bool = ...,
    connectable: bool = ...,
    extension: bool = ...,
    fromPlugin: bool = ...,
    fullNodeName: bool = ...,
    hasData: bool = ...,
    hasNullData: bool = ...,
    inUse: bool = ...,
    keyable: bool = ...,
    leaf: bool = ...,
    locked: bool = ...,
    multi: bool = ...,
    nodeName: bool = ...,
    output: bool = ...,
    ramp: bool = ...,
    read: bool = ...,
    readOnly: bool = ...,
    scalar: bool = ...,
    scalarAndArray: bool = ...,
    settable: bool = ...,
    shortNames: bool = ...,
    string: Multiuse[str] = ...,
    unlocked: bool = ...,
    usedAsFilename: bool = ...,
    userDefined: bool = ...,
    visible: bool = ...,
    write: bool = ...,
) -> List[str]: ...
def listAttrPatterns(*, patternType: bool = ..., verbose: bool = ...) -> List[str]: ...
def listCameras(
    *, orthographic: bool = ..., perspective: bool = ..., ufeCameras: bool = ...
) -> List[str]: ...
def listConnections(
    *args: str,
    connections: bool = ...,
    destination: bool = ...,
    exactType: bool = ...,
    fullNodeName: bool = ...,
    plugs: bool = ...,
    shapes: bool = ...,
    skipConversionNodes: bool = ...,
    source: bool = ...,
    type: str = ...,
) -> List[str]: ...
def listDeviceAttachments(
    *,
    attribute: str = ...,
    axis: str = ...,
    clutch: str = ...,
    device: str = ...,
    file: str = ...,
    selection: bool = ...,
    write: bool = ...,
) -> str: ...
def listHistory(
    *args: str,
    query: bool = ...,
    allConnections: bool = ...,
    allFuture: bool = ...,
    allGraphs: bool = ...,
    breadthFirst: bool = ...,
    fastIteration: bool = ...,
    fullNodeName: bool = ...,
    future: bool = ...,
    futureLocalAttr: bool = ...,
    futureWorldAttr: bool = ...,
    groupLevels: bool = ...,
    historyAttr: bool = ...,
    interestLevel: int = ...,
    leaf: bool = ...,
    levels: int = ...,
    pruneDagObjects: bool = ...,
) -> Union[List[str], bool]: ...
def listInputDeviceAxes(arg0: str = ..., /) -> List[str]: ...
def listInputDeviceButtons(arg0: str = ..., /) -> List[str]: ...
def listInputDevices(
    *, free: bool = ..., primary: bool = ..., secondary: bool = ...
) -> List[str]: ...
def listNodeTypes(arg0: str = ..., /, *, exclude: str = ...) -> List[str]: ...
def listNodesWithIncorrectNames() -> bool: ...
def listRelatives(
    *args: str,
    allDescendents: bool = ...,
    allParents: bool = ...,
    children: bool = ...,
    fullPath: bool = ...,
    noIntermediate: bool = ...,
    parent: bool = ...,
    path: bool = ...,
    shapes: bool = ...,
    type: Multiuse[str] = ...,
) -> List[str]: ...
def listSets(
    *,
    allSets: bool = ...,
    extendToShape: bool = ...,
    object: str = ...,
    type: int = ...,
) -> List[str]: ...
def loadFluid(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    currentTime: bool = ...,
    frame: Queryable[float] = ...,
    initialConditions: bool = ...,
) -> Union[bool, float]: ...
def loadModule(
    *, allModules: bool = ..., load: str = ..., scan: bool = ...
) -> List[str]: ...
def loadPlugin(
    *args: str,
    addCallback: Callable[..., Any] = ...,
    allPlugins: bool = ...,
    name: str = ...,
    pluginPath: bool = ...,
    quiet: bool = ...,
    removeCallback: Callable[..., Any] = ...,
) -> List[str]: ...
def loadPrefObjects() -> bool: ...
def loadUI(
    *,
    listTypes: bool = ...,
    uiFile: str = ...,
    uiString: str = ...,
    verbose: bool = ...,
    workingDirectory: str = ...,
) -> str: ...
def lockNode(
    *args: str,
    query: bool = ...,
    ignoreComponents: bool = ...,
    lock: bool = ...,
    lockName: bool = ...,
    lockUnpublished: bool = ...,
) -> Union[None, List[bool], bool]: ...
def loft(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    autoReverse: bool = ...,
    caching: bool = ...,
    close: bool = ...,
    createCusp: Queryable[Multiuse[bool]] = ...,
    degree: Queryable[int] = ...,
    nodeState: Queryable[int] = ...,
    reverse: Queryable[Multiuse[bool]] = ...,
    reverseSurfaceNormals: bool = ...,
    sectionSpans: Queryable[int] = ...,
    uniform: bool = ...,
    constructionHistory: bool = ...,
    name: str = ...,
    object: bool = ...,
    polygon: int = ...,
    range: bool = ...,
    rebuild: bool = ...,
) -> Union[List[str], bool, Multiuse[bool], int]: ...
def lookThru(
    arg0: str = ...,
    arg1: str = ...,
    /,
    *,
    query: bool = ...,
    farClip: float = ...,
    nearClip: float = ...,
) -> bool: ...
def ls(
    *args: str,
    absoluteName: bool = ...,
    allPaths: bool = ...,
    assemblies: bool = ...,
    cameras: bool = ...,
    containerType: Multiuse[str] = ...,
    containers: bool = ...,
    dagObjects: bool = ...,
    defaultNodes: bool = ...,
    dependencyNodes: bool = ...,
    exactType: Multiuse[str] = ...,
    excludeType: Multiuse[str] = ...,
    flatten: bool = ...,
    geometry: bool = ...,
    ghost: bool = ...,
    head: int = ...,
    hilite: bool = ...,
    intermediateObjects: bool = ...,
    invisible: bool = ...,
    leaf: bool = ...,
    lights: bool = ...,
    live: bool = ...,
    lockedNodes: bool = ...,
    long: bool = ...,
    materials: bool = ...,
    modified: bool = ...,
    noIntermediate: bool = ...,
    nodeTypes: bool = ...,
    objectsOnly: bool = ...,
    orderedComponentSelection: bool = ...,
    orderedSelection: bool = ...,
    partitions: bool = ...,
    persistentNodes: bool = ...,
    planes: bool = ...,
    preSelectHilite: bool = ...,
    readOnly: bool = ...,
    recursive: bool = ...,
    referencedNodes: bool = ...,
    references: bool = ...,
    renderGlobals: bool = ...,
    renderQualities: bool = ...,
    renderResolutions: bool = ...,
    renderSetups: bool = ...,
    selection: bool = ...,
    sets: bool = ...,
    shapes: bool = ...,
    shortNames: bool = ...,
    showNamespace: bool = ...,
    showType: bool = ...,
    tail: int = ...,
    templated: bool = ...,
    textures: bool = ...,
    transforms: bool = ...,
    type: Multiuse[str] = ...,
    ufeObjects: bool = ...,
    undeletable: bool = ...,
    untemplated: bool = ...,
    uuid: bool = ...,
    visible: bool = ...,
) -> List[str]: ...
def lsThroughFilter(
    arg0: str = ...,
    /,
    *args: str,
    item: Multiuse[str] = ...,
    nodeArray: bool = ...,
    reverse: bool = ...,
    selection: bool = ...,
    sort: str = ...,
) -> List[str]: ...
def lsUI(
    *args: str,
    cmdTemplates: bool = ...,
    collection: bool = ...,
    contexts: bool = ...,
    controlLayouts: bool = ...,
    controls: bool = ...,
    dumpWidgets: bool = ...,
    editors: bool = ...,
    head: int = ...,
    long: bool = ...,
    menuItems: bool = ...,
    menus: bool = ...,
    numWidgets: bool = ...,
    panels: bool = ...,
    radioMenuItemCollections: bool = ...,
    tail: int = ...,
    type: Multiuse[str] = ...,
    windows: bool = ...,
    workspaceControls: bool = ...,
) -> List[str]: ...
def makeIdentity(
    *args: str,
    apply: bool = ...,
    jointOrient: bool = ...,
    normal: int = ...,
    preserveNormals: bool = ...,
    rotate: bool = ...,
    scale: bool = ...,
    translate: bool = ...,
) -> bool: ...
def makeLive(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    addObjects: bool = ...,
    none: bool = ...,
    registry: Queryable[int] = ...,
    registryCount: bool = ...,
    registryReset: bool = ...,
    registrySize: Queryable[int] = ...,
    removeObjects: bool = ...,
) -> Union[bool, int]: ...
def makePaintable(
    arg0: str = ...,
    arg1: str = ...,
    /,
    *,
    query: bool = ...,
    activate: bool = ...,
    activateAll: bool = ...,
    altAttribute: Queryable[Multiuse[str]] = ...,
    attrType: Queryable[str] = ...,
    clearAll: bool = ...,
    remove: bool = ...,
    shapeMode: Queryable[str] = ...,
    uiName: Queryable[str] = ...,
) -> Union[bool, Multiuse[str], str]: ...
def makeSingleSurface(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
    object: bool = ...,
    stitchTolerance: float = ...,
) -> Union[List[str], bool, int]: ...
def makebot(
    *,
    checkdepends: bool = ...,
    checkres: int = ...,
    input: str = ...,
    nooverwrite: bool = ...,
    output: str = ...,
    verbose: bool = ...,
) -> bool: ...
def manipComponentPivot(*args: Any, **kwargs: Any) -> None: ...
def manipComponentUpdate() -> None: ...
def manipMoveContext(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    activeHandle: Queryable[int] = ...,
    activeHandleNormal: Queryable[int] = ...,
    alignAlong: Tuple[float, float, float] = ...,
    autoOrientSecondaryAxis: bool = ...,
    bakePivotOri: bool = ...,
    constrainAlongNormal: bool = ...,
    currentActiveHandle: Queryable[int] = ...,
    editPivotMode: bool = ...,
    editPivotPosition: bool = ...,
    exists: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    interactiveUpdate: bool = ...,
    lastMode: Queryable[int] = ...,
    manipVisible: bool = ...,
    mode: Queryable[int] = ...,
    orientAxes: Queryable[Tuple[float, float, float]] = ...,
    orientJoint: Queryable[str] = ...,
    orientJointEnabled: bool = ...,
    orientObject: str = ...,
    orientTowards: Tuple[float, float, float] = ...,
    pinPivot: bool = ...,
    pivotOriHandle: bool = ...,
    position: bool = ...,
    postCommand: Callable[..., Any] = ...,
    postDragCommand: Tuple[Callable[..., Any], str] = ...,
    preCommand: Callable[..., Any] = ...,
    preDragCommand: Tuple[Callable[..., Any], str] = ...,
    preserveChildPosition: bool = ...,
    preserveUV: bool = ...,
    reflection: bool = ...,
    reflectionAbout: int = ...,
    reflectionAxis: int = ...,
    reflectionTolerance: float = ...,
    resetPivotMode: Queryable[int] = ...,
    secondaryAxisOrient: Queryable[str] = ...,
    snap: bool = ...,
    snapComponentsRelative: bool = ...,
    snapLiveFaceCenter: bool = ...,
    snapLivePoint: bool = ...,
    snapPivotOri: bool = ...,
    snapPivotPos: bool = ...,
    snapRelative: bool = ...,
    snapValue: Queryable[float] = ...,
    translate: Queryable[Tuple[float, float, float]] = ...,
    tweakMode: bool = ...,
    xformConstraint: Queryable[str] = ...,
) -> Union[str, int, bool, Tuple[float, float, float], float]: ...
def manipMoveLimitsCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    exists: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    name: str = ...,
) -> str: ...
def manipOptions(
    *,
    query: bool = ...,
    enableSmartDuplicate: bool = ...,
    enableSmartExtrude: bool = ...,
    forceRefresh: bool = ...,
    handleSize: Queryable[float] = ...,
    hideManipOnCtrl: bool = ...,
    hideManipOnShift: bool = ...,
    hideManipOnShiftCtrl: bool = ...,
    linePick: Queryable[float] = ...,
    lineSize: Queryable[float] = ...,
    middleMouseRepositioning: bool = ...,
    pivotRotateHandleOffset: Queryable[int] = ...,
    planeHandleOffset: Queryable[int] = ...,
    pointSize: Queryable[float] = ...,
    preselectHighlight: bool = ...,
    refreshMode: Queryable[int] = ...,
    relative: bool = ...,
    rememberActiveHandle: bool = ...,
    rememberActiveHandleAfterToolSwitch: bool = ...,
    scale: Queryable[float] = ...,
    showExtrudeSliders: bool = ...,
    showPivotRotateHandle: bool = ...,
    showPlaneHandles: bool = ...,
    smartDuplicateType: Queryable[int] = ...,
) -> Union[bool, float, int]: ...
def manipPivot(
    *,
    query: bool = ...,
    bakeOri: bool = ...,
    moveToolOri: int = ...,
    ori: Queryable[Tuple[float, float, float]] = ...,
    oriValid: bool = ...,
    pinPivot: bool = ...,
    pos: Queryable[Tuple[float, float, float]] = ...,
    posValid: bool = ...,
    reset: bool = ...,
    resetMode: Queryable[int] = ...,
    resetOri: bool = ...,
    resetPos: bool = ...,
    rotateToolOri: int = ...,
    scaleToolOri: int = ...,
    snapOri: bool = ...,
    snapPos: bool = ...,
    valid: bool = ...,
) -> Union[bool, Tuple[float, float, float], int]: ...
def manipRotateContext(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    activeHandle: Queryable[int] = ...,
    alignAlong: Tuple[float, float, float] = ...,
    bakePivotOri: bool = ...,
    centerTrackball: bool = ...,
    constrainAlongNormal: bool = ...,
    currentActiveHandle: Queryable[int] = ...,
    editPivotMode: bool = ...,
    editPivotPosition: bool = ...,
    exists: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    lastMode: Queryable[int] = ...,
    manipVisible: bool = ...,
    mode: Queryable[int] = ...,
    modifyTranslation: bool = ...,
    orientAxes: Queryable[Tuple[float, float, float]] = ...,
    orientObject: str = ...,
    orientTowards: Tuple[float, float, float] = ...,
    pinPivot: bool = ...,
    pivotOriHandle: bool = ...,
    position: bool = ...,
    postCommand: Callable[..., Any] = ...,
    postDragCommand: Tuple[Callable[..., Any], str] = ...,
    preCommand: Callable[..., Any] = ...,
    preDragCommand: Tuple[Callable[..., Any], str] = ...,
    preserveChildPosition: bool = ...,
    preserveUV: bool = ...,
    reflection: bool = ...,
    reflectionAbout: int = ...,
    reflectionAxis: int = ...,
    reflectionTolerance: float = ...,
    resetPivotMode: Queryable[int] = ...,
    rotate: Queryable[Tuple[float, float, float]] = ...,
    snap: bool = ...,
    snapPivotOri: bool = ...,
    snapPivotPos: bool = ...,
    snapRelative: bool = ...,
    snapValue: Queryable[float] = ...,
    tweakMode: bool = ...,
    useCenterPivot: bool = ...,
    useManipPivot: bool = ...,
    useObjectPivot: bool = ...,
    xformConstraint: Queryable[str] = ...,
) -> Union[str, int, bool, Tuple[float, float, float], float]: ...
def manipRotateLimitsCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    exists: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    name: str = ...,
) -> str: ...
def manipScaleContext(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    activeHandle: Queryable[int] = ...,
    alignAlong: Tuple[float, float, float] = ...,
    bakePivotOri: bool = ...,
    constrainAlongNormal: bool = ...,
    currentActiveHandle: Queryable[int] = ...,
    editPivotMode: bool = ...,
    editPivotPosition: bool = ...,
    exists: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    lastMode: Queryable[int] = ...,
    manipVisible: bool = ...,
    mode: Queryable[int] = ...,
    orientAxes: Queryable[Tuple[float, float, float]] = ...,
    orientObject: str = ...,
    orientTowards: Tuple[float, float, float] = ...,
    pinPivot: bool = ...,
    pivotOriHandle: bool = ...,
    position: bool = ...,
    postCommand: Callable[..., Any] = ...,
    postDragCommand: Tuple[Callable[..., Any], str] = ...,
    preCommand: Callable[..., Any] = ...,
    preDragCommand: Tuple[Callable[..., Any], str] = ...,
    preserveChildPosition: bool = ...,
    preserveUV: bool = ...,
    preventNegativeScale: bool = ...,
    reflection: bool = ...,
    reflectionAbout: int = ...,
    reflectionAxis: int = ...,
    reflectionTolerance: float = ...,
    resetPivotMode: Queryable[int] = ...,
    scale: Queryable[Tuple[float, float, float]] = ...,
    snap: bool = ...,
    snapPivotOri: bool = ...,
    snapPivotPos: bool = ...,
    snapRelative: bool = ...,
    snapValue: Queryable[float] = ...,
    tweakMode: bool = ...,
    useManipPivot: bool = ...,
    useObjectPivot: bool = ...,
    xformConstraint: Queryable[str] = ...,
) -> Union[str, int, bool, Tuple[float, float, float], float]: ...
def manipScaleLimitsCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    exists: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    name: str = ...,
) -> str: ...
def marker(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    attach: bool = ...,
    detach: bool = ...,
    frontTwist: Queryable[float] = ...,
    orientationMarker: bool = ...,
    positionMarker: bool = ...,
    sideTwist: Queryable[float] = ...,
    time: Queryable[int] = ...,
    upTwist: Queryable[float] = ...,
    valueU: Queryable[float] = ...,
) -> Union[List[str], float, bool, int]: ...
def matchTransform(
    *args: str,
    pivots: bool = ...,
    position: bool = ...,
    positionX: bool = ...,
    positionY: bool = ...,
    positionZ: bool = ...,
    rotatePivot: bool = ...,
    rotation: bool = ...,
    rotationX: bool = ...,
    rotationY: bool = ...,
    rotationZ: bool = ...,
    scale: bool = ...,
    scaleBox: bool = ...,
    scalePivot: bool = ...,
    scaleX: bool = ...,
    scaleY: bool = ...,
    scaleZ: bool = ...,
) -> bool: ...
def mateCtx(*args: Any, **kwargs: Any) -> None: ...
def matrixUtil(
    arg0: float = ...,
    arg1: float = ...,
    arg2: float = ...,
    arg3: float = ...,
    arg4: float = ...,
    arg5: float = ...,
    arg6: float = ...,
    arg7: float = ...,
    arg8: float = ...,
    arg9: float = ...,
    arg10: float = ...,
    arg11: float = ...,
    arg12: float = ...,
    arg13: float = ...,
    arg14: float = ...,
    arg15: float = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    inverse: bool = ...,
    quaternion: Queryable[Tuple[float, float, float, float]] = ...,
    relative: bool = ...,
    rotation: Queryable[Tuple[float, float, float]] = ...,
    scale: Queryable[Tuple[float, float, float]] = ...,
    shear: Queryable[Tuple[float, float, float]] = ...,
    translation: Queryable[Tuple[float, float, float]] = ...,
    transpose: bool = ...,
) -> Union[
    str, bool, Tuple[float, float, float, float], Tuple[float, float, float]
]: ...
def mayaHasRenderSetup(
    *,
    edit: bool = ...,
    query: bool = ...,
    enableCurrentSession: bool = ...,
    enableDuringTests: bool = ...,
) -> bool: ...
def mayaPreviewRenderIntoNewWindow() -> None: ...
def melInfo() -> List[str]: ...
def melOptions(*, query: bool = ..., duplicateVariableWarnings: bool = ...) -> bool: ...
def memory(
    *,
    adjustedVirtualMemory: bool = ...,
    asFloat: bool = ...,
    debug: bool = ...,
    freeMemory: bool = ...,
    gigaByte: bool = ...,
    heapMemory: bool = ...,
    kiloByte: bool = ...,
    megaByte: bool = ...,
    pageFaults: bool = ...,
    pageReclaims: bool = ...,
    physicalMemory: bool = ...,
    processVirtualMemory: bool = ...,
    summary: bool = ...,
    swapFree: bool = ...,
    swapLogical: bool = ...,
    swapMax: bool = ...,
    swapPhysical: bool = ...,
    swapReserved: bool = ...,
    swapVirtual: bool = ...,
    swaps: bool = ...,
) -> bool: ...
def menu(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    allowOptionBoxes: bool = ...,
    defineTemplate: str = ...,
    deleteAllItems: bool = ...,
    docTag: Queryable[str] = ...,
    enable: bool = ...,
    exists: bool = ...,
    familyImage: Queryable[str] = ...,
    helpMenu: bool = ...,
    itemArray: bool = ...,
    label: Queryable[str] = ...,
    mnemonic: Queryable[str] = ...,
    numberOfItems: bool = ...,
    parent: str = ...,
    postMenuCommand: Callable[..., Any] = ...,
    postMenuCommandOnce: bool = ...,
    scrollable: bool = ...,
    tearOff: bool = ...,
    useTemplate: str = ...,
    version: Queryable[str] = ...,
    visible: bool = ...,
) -> Union[str, bool]: ...
def menuBarLayout(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    childArray: bool = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    generalSpacing: int = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    isObscured: bool = ...,
    manage: bool = ...,
    margins: int = ...,
    margins4: Tuple[int, int, int, int] = ...,
    menuArray: bool = ...,
    menuBarVisible: bool = ...,
    menuIndex: Tuple[str, int] = ...,
    noBackground: bool = ...,
    numberOfChildren: bool = ...,
    numberOfMenus: bool = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    statusBarMessage: str = ...,
    useTemplate: str = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[str, Tuple[float, float, float], bool, int, Callable[..., Any]]: ...
def menuEditor(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    cellHeight: Queryable[int] = ...,
    cellWidth: Queryable[int] = ...,
    cellWidthHeight: Tuple[int, int] = ...,
    checkBoxPresent: Queryable[Tuple[bool, str, int]] = ...,
    checkBoxState: Queryable[Tuple[bool, str, int]] = ...,
    command: Queryable[Tuple[str, str, int, bool]] = ...,
    defineTemplate: str = ...,
    delete: Tuple[str, int] = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    iconMenuCallback: str = ...,
    image: Queryable[Tuple[str, str, int]] = ...,
    isLanguageMel: Queryable[Tuple[bool, str, int]] = ...,
    isObscured: bool = ...,
    label: Queryable[Tuple[str, str, int]] = ...,
    manage: bool = ...,
    menuItemTypes: bool = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    optionBoxCommand: Queryable[Tuple[str, str, int]] = ...,
    optionBoxPresent: Queryable[Tuple[bool, str, int]] = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    radioButtonPresent: Queryable[Tuple[bool, str, int]] = ...,
    radioButtonState: Queryable[Tuple[bool, str, int]] = ...,
    separator: Queryable[Tuple[str, int]] = ...,
    statusBarMessage: str = ...,
    style: Queryable[str] = ...,
    subMenuAt: Tuple[str, int] = ...,
    subMenuEditorWindow: str = ...,
    subMenuEditorsOpen: bool = ...,
    subMenuOf: Tuple[str, str, int] = ...,
    topLevelMenu: Queryable[str] = ...,
    useTemplate: str = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[
    str,
    Tuple[float, float, float],
    int,
    Tuple[bool, str, int],
    Tuple[str, str, int, bool],
    bool,
    Tuple[str, str, int],
    Tuple[str, int],
    Callable[..., Any],
]: ...
def menuItem(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    allowOptionBoxes: bool = ...,
    annotation: Queryable[str] = ...,
    boldFont: bool = ...,
    checkBox: bool = ...,
    collection: Queryable[str] = ...,
    command: Queryable[Callable[..., Any]] = ...,
    data: Queryable[int] = ...,
    defineTemplate: str = ...,
    divider: bool = ...,
    dividerLabel: Queryable[str] = ...,
    docTag: Queryable[str] = ...,
    dragDoubleClickCommand: Queryable[Callable[..., Any]] = ...,
    dragMenuCommand: Queryable[Callable[..., Any]] = ...,
    echoCommand: bool = ...,
    enable: bool = ...,
    enableCommandRepeat: bool = ...,
    exists: bool = ...,
    familyImage: Queryable[str] = ...,
    header: bool = ...,
    image: Queryable[str] = ...,
    imageOverlayLabel: Queryable[str] = ...,
    insertAfter: str = ...,
    isCheckBox: bool = ...,
    isOptionBox: bool = ...,
    isRadioButton: bool = ...,
    italicized: bool = ...,
    label: Queryable[str] = ...,
    longDivider: bool = ...,
    optionBox: bool = ...,
    optionBoxIcon: Queryable[str] = ...,
    parent: str = ...,
    postMenuCommand: Queryable[Callable[..., Any]] = ...,
    postMenuCommandOnce: bool = ...,
    radialPosition: Queryable[str] = ...,
    radioButton: bool = ...,
    runTimeCommand: str = ...,
    sourceType: Queryable[str] = ...,
    subMenu: bool = ...,
    tearOff: bool = ...,
    useTemplate: str = ...,
    version: Queryable[str] = ...,
    visible: bool = ...,
) -> Union[str, bool, Callable[..., Any], int]: ...
def menuSet(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    addMenu: str = ...,
    allMenuSets: bool = ...,
    currentMenuSet: Queryable[str] = ...,
    exists: str = ...,
    hotBoxVisible: bool = ...,
    insertMenu: Tuple[str, int] = ...,
    label: Queryable[str] = ...,
    menuArray: Queryable[List[str]] = ...,
    moveMenu: Tuple[str, int] = ...,
    moveMenuSet: Tuple[str, int] = ...,
    numberOfMenuSets: bool = ...,
    numberOfMenus: bool = ...,
    permanent: bool = ...,
    removeMenu: str = ...,
    removeMenuSet: str = ...,
) -> Union[str, bool, List[str]]: ...
def menuSetPref(
    *,
    edit: bool = ...,
    query: bool = ...,
    exists: bool = ...,
    force: bool = ...,
    loadAll: bool = ...,
    removeAll: bool = ...,
    saveAll: bool = ...,
    saveBackup: bool = ...,
    version: bool = ...,
) -> bool: ...
def meshIntersectTest(*args: Any, **kwargs: Any) -> None: ...
def messageLine(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    isObscured: bool = ...,
    manage: bool = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    statusBarMessage: str = ...,
    useTemplate: str = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[str, Tuple[float, float, float], bool, int, Callable[..., Any]]: ...
def mimicManipulation(
    *, manipulations: str = ..., prevalidation: bool = ..., refresh: bool = ...
) -> List[bool]: ...
def mimicMnipulation(*args: Any, **kwargs: Any) -> None: ...
def minimizeApp() -> bool: ...
def mirrorJoint(
    arg0: str = ...,
    /,
    *,
    mirrorBehavior: bool = ...,
    mirrorXY: bool = ...,
    mirrorXZ: bool = ...,
    mirrorYZ: bool = ...,
    searchReplace: Tuple[str, str] = ...,
) -> List[str]: ...
def mirrorShape(
    arg0: str = ..., arg1: str = ..., /, *, mirrorAxis: str = ...
) -> None: ...
def modelCurrentTimeCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    exists: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    name: str = ...,
    percent: Queryable[float] = ...,
) -> Union[str, float]: ...
def modelEditor(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    activeComponentsXray: bool = ...,
    activeCustomEnvironment: str = ...,
    activeCustomGeometry: Queryable[str] = ...,
    activeCustomLightSet: Queryable[str] = ...,
    activeCustomOverrideGeometry: Queryable[str] = ...,
    activeCustomRenderer: Queryable[str] = ...,
    activeOnly: bool = ...,
    activeShadingGraph: Queryable[str] = ...,
    activeView: bool = ...,
    addObjects: str = ...,
    addSelected: bool = ...,
    addSelectedObjects: bool = ...,
    allObjects: bool = ...,
    backfaceCulling: bool = ...,
    bluePencil: bool = ...,
    bufferMode: Queryable[str] = ...,
    bumpResolution: Queryable[Tuple[int, int]] = ...,
    camera: Queryable[str] = ...,
    cameraName: str = ...,
    cameraSet: Queryable[str] = ...,
    cameraSetup: bool = ...,
    cameras: bool = ...,
    capture: Queryable[str] = ...,
    captureSequenceNumber: Queryable[int] = ...,
    clipGhosts: bool = ...,
    cmEnabled: bool = ...,
    colorMap: bool = ...,
    colorResolution: Queryable[Tuple[int, int]] = ...,
    control: bool = ...,
    controlVertices: bool = ...,
    cullingOverride: Queryable[str] = ...,
    default: bool = ...,
    defineTemplate: str = ...,
    deformers: bool = ...,
    dimensions: bool = ...,
    displayAppearance: Queryable[str] = ...,
    displayLights: Queryable[str] = ...,
    displayTextures: bool = ...,
    docTag: Queryable[str] = ...,
    dynamicConstraints: bool = ...,
    dynamics: bool = ...,
    editorChanged: Queryable[Callable[..., Any]] = ...,
    excludeObjectMask: Queryable[int] = ...,
    excludeObjectPreset: Queryable[str] = ...,
    excludePluginList: Queryable[Multiuse[str]] = ...,
    exists: bool = ...,
    exposure: Queryable[float] = ...,
    filter: Queryable[str] = ...,
    filteredObjectList: bool = ...,
    fluids: bool = ...,
    fogColor: Queryable[Tuple[float, float, float, float]] = ...,
    fogDensity: Queryable[float] = ...,
    fogEnd: Queryable[float] = ...,
    fogMode: Queryable[str] = ...,
    fogSource: Queryable[str] = ...,
    fogStart: Queryable[float] = ...,
    fogging: bool = ...,
    follicles: bool = ...,
    forceMainConnection: Queryable[str] = ...,
    gamma: Queryable[float] = ...,
    greasePencils: bool = ...,
    grid: bool = ...,
    hairSystems: bool = ...,
    handles: bool = ...,
    headsUpDisplay: bool = ...,
    height: bool = ...,
    highlightConnection: Queryable[str] = ...,
    hulls: bool = ...,
    ignorePanZoom: bool = ...,
    ikHandles: bool = ...,
    imagePlane: bool = ...,
    interactive: bool = ...,
    interactiveBackFaceCull: bool = ...,
    interactiveDisableShadows: bool = ...,
    isFiltered: bool = ...,
    jointXray: bool = ...,
    joints: bool = ...,
    lights: bool = ...,
    lineWidth: Queryable[float] = ...,
    locators: bool = ...,
    lockMainConnection: bool = ...,
    lowQualityLighting: bool = ...,
    mainListConnection: Queryable[str] = ...,
    manipulators: bool = ...,
    maxConstantTransparency: Queryable[float] = ...,
    maximumNumHardwareLights: bool = ...,
    modelPanel: str = ...,
    motionTrails: bool = ...,
    nCloths: bool = ...,
    nParticles: bool = ...,
    nRigids: bool = ...,
    noUndo: bool = ...,
    nurbsCurves: bool = ...,
    nurbsSurfaces: bool = ...,
    objectFilter: Queryable[Callable[..., Any]] = ...,
    objectFilterList: Queryable[Callable[..., Any]] = ...,
    objectFilterListUI: Queryable[Callable[..., Any]] = ...,
    objectFilterShowInHUD: bool = ...,
    objectFilterUI: Queryable[Callable[..., Any]] = ...,
    occlusionCulling: bool = ...,
    panel: Queryable[str] = ...,
    parent: Queryable[str] = ...,
    particleInstancers: bool = ...,
    pivots: bool = ...,
    planes: bool = ...,
    pluginObjects: Multiuse[Tuple[str, bool]] = ...,
    pluginShapes: bool = ...,
    polymeshes: bool = ...,
    queryPluginObjects: Queryable[str] = ...,
    removeSelected: bool = ...,
    rendererDeviceName: bool = ...,
    rendererList: bool = ...,
    rendererListUI: bool = ...,
    rendererName: Queryable[str] = ...,
    rendererOverrideList: bool = ...,
    rendererOverrideListUI: bool = ...,
    rendererOverrideName: Queryable[str] = ...,
    resetCustomCamera: bool = ...,
    sceneRenderFilter: Queryable[str] = ...,
    selectionConnection: Queryable[str] = ...,
    selectionHiliteDisplay: bool = ...,
    setSelected: bool = ...,
    shadingModel: Queryable[int] = ...,
    shadows: bool = ...,
    smallObjectCulling: bool = ...,
    smallObjectThreshold: Queryable[float] = ...,
    smoothWireframe: bool = ...,
    sortTransparent: bool = ...,
    stateString: bool = ...,
    stereoDrawMode: bool = ...,
    strokes: bool = ...,
    subdivSurfaces: bool = ...,
    textureAnisotropic: bool = ...,
    textureCompression: bool = ...,
    textureDisplay: Queryable[str] = ...,
    textureEnvironmentMap: bool = ...,
    textureHilight: bool = ...,
    textureMaxSize: Queryable[int] = ...,
    textureMemoryUsed: bool = ...,
    textureSampling: Queryable[int] = ...,
    textures: bool = ...,
    toggleExposure: bool = ...,
    toggleGamma: bool = ...,
    transpInShadows: bool = ...,
    transparencyAlgorithm: Queryable[str] = ...,
    twoSidedLighting: bool = ...,
    unParent: bool = ...,
    unlockMainConnection: bool = ...,
    updateColorMode: bool = ...,
    updateMainConnection: bool = ...,
    useBaseRenderer: bool = ...,
    useColorIndex: bool = ...,
    useDefaultMaterial: bool = ...,
    useInteractiveMode: bool = ...,
    useRGBImagePlane: bool = ...,
    useReducedRenderer: bool = ...,
    useTemplate: str = ...,
    userNode: Queryable[str] = ...,
    viewObjects: bool = ...,
    viewSelected: bool = ...,
    viewTransformName: Queryable[str] = ...,
    viewType: bool = ...,
    width: bool = ...,
    wireframeBackingStore: bool = ...,
    wireframeOnShaded: bool = ...,
    xray: bool = ...,
) -> Union[
    str,
    bool,
    Tuple[int, int],
    int,
    Callable[..., Any],
    Multiuse[str],
    float,
    Tuple[float, float, float, float],
]: ...
def modelPanel(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    barLayout: bool = ...,
    camera: Queryable[str] = ...,
    control: bool = ...,
    copy: str = ...,
    createString: bool = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    editString: bool = ...,
    exists: bool = ...,
    init: bool = ...,
    isUnique: bool = ...,
    label: Queryable[str] = ...,
    menuBarRepeatLast: bool = ...,
    menuBarVisible: bool = ...,
    modelEditor: bool = ...,
    needsInit: bool = ...,
    parent: str = ...,
    popupMenuProcedure: Queryable[Callable[..., Any]] = ...,
    replacePanel: str = ...,
    tearOff: bool = ...,
    tearOffCopy: str = ...,
    tearOffRestore: bool = ...,
    unParent: bool = ...,
    useTemplate: str = ...,
) -> Union[str, bool, Callable[..., Any]]: ...
def modelingToolkitSuperCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    attach: Multiuse[str] = ...,
    exists: bool = ...,
    image1: str = ...,
    image2: str = ...,
    image3: str = ...,
) -> None: ...
def moduleInfo(
    *,
    definition: bool = ...,
    listModules: bool = ...,
    moduleName: str = ...,
    path: bool = ...,
    version: bool = ...,
) -> List[str]: ...
def mouldMesh(*args: str) -> None: ...
def mouldSrf(*args: str) -> None: ...
def mouldSubdiv(*args: str) -> None: ...
def mouse(
    *,
    enableScrollWheel: bool = ...,
    mouseButtonTracking: int = ...,
    mouseButtonTrackingStatus: bool = ...,
    scrollWheelStatus: bool = ...,
) -> int: ...
def movIn(*args: str, file: str = ..., startTime: int = ...) -> bool: ...
def movOut(
    *args: str,
    comment: bool = ...,
    file: str = ...,
    precision: int = ...,
    time: NullableRange[float] = ...,
) -> bool: ...
def move(
    arg0: float = ...,
    arg1: float = ...,
    arg2: float = ...,
    /,
    *args: str,
    absolute: bool = ...,
    autoOrientSecondaryAxis: bool = ...,
    componentOffset: bool = ...,
    componentSpace: bool = ...,
    constrainAlongNormal: bool = ...,
    deletePriorHistory: bool = ...,
    localSpace: bool = ...,
    moveX: bool = ...,
    moveXY: bool = ...,
    moveXYZ: bool = ...,
    moveXZ: bool = ...,
    moveY: bool = ...,
    moveYZ: bool = ...,
    moveZ: bool = ...,
    objectSpace: bool = ...,
    orientJoint: str = ...,
    parameter: bool = ...,
    preserveChildPosition: bool = ...,
    preserveGeometryPosition: bool = ...,
    preserveUV: bool = ...,
    reflection: bool = ...,
    reflectionAboutBBox: bool = ...,
    reflectionAboutOrigin: bool = ...,
    reflectionAboutX: bool = ...,
    reflectionAboutY: bool = ...,
    reflectionAboutZ: bool = ...,
    reflectionTolerance: float = ...,
    relative: bool = ...,
    rotatePivotRelative: bool = ...,
    scalePivotRelative: bool = ...,
    secondaryAxisOrient: str = ...,
    symNegative: bool = ...,
    worldSpace: bool = ...,
    worldSpaceDistance: bool = ...,
    xformConstraint: str = ...,
) -> bool: ...
def moveKeyCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    exists: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    moveFunction: Queryable[str] = ...,
    moveReplace: bool = ...,
    name: str = ...,
    option: Queryable[str] = ...,
) -> Union[str, bool]: ...
def moveVertexAlongDirection(
    *args: str,
    direction: Multiuse[Tuple[float, float, float]] = ...,
    magnitude: Multiuse[float] = ...,
    normalDirection: Multiuse[float] = ...,
    uDirection: Multiuse[float] = ...,
    uvNormalDirection: Multiuse[Tuple[float, float, float]] = ...,
    vDirection: Multiuse[float] = ...,
) -> bool: ...
def movieCompressor(
    *, hardwareOptions: bool = ..., softwareOptions: bool = ...
) -> None: ...
def movieInfo(
    arg0: str = ...,
    /,
    *,
    counter: bool = ...,
    dropFrame: bool = ...,
    frameCount: bool = ...,
    frameDuration: bool = ...,
    height: bool = ...,
    movieTexture: bool = ...,
    negTimesOK: bool = ...,
    numFrames: bool = ...,
    quickTime: bool = ...,
    timeCode: bool = ...,
    timeCodeTrack: bool = ...,
    timeScale: bool = ...,
    twentyFourHourMax: bool = ...,
    width: bool = ...,
) -> bool: ...
def mpBirailCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    autoCreate: bool = ...,
    activeNodes: bool = ...,
    bldProfiles: bool = ...,
    bldProfileFirst: bool = ...,
    bldProfileLast: bool = ...,
    bldRailOne: bool = ...,
    bldRailTwo: bool = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    exists: bool = ...,
    frozen: bool = ...,
    image1: str = ...,
    image2: str = ...,
    image3: str = ...,
    immediate: bool = ...,
    name: str = ...,
    nodeState: int = ...,
    object: bool = ...,
    polygon: int = ...,
    reset: bool = ...,
    transformMode: int = ...,
    toolNode: bool = ...,
    tangentContinuityProfile1: bool = ...,
    tangentContinuityProfile2: bool = ...,
) -> None: ...
def mrMapVisualizer() -> None: ...
def mrShaderManager() -> None: ...
def multiProfileBirailSurface(
    arg0: str = ...,
    arg1: str = ...,
    arg2: str = ...,
    /,
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    nodeState: Queryable[int] = ...,
    tangentContinuityProfile1: bool = ...,
    tangentContinuityProfile2: bool = ...,
    transformMode: Queryable[int] = ...,
    constructionHistory: bool = ...,
    name: str = ...,
    object: bool = ...,
    polygon: int = ...,
) -> Union[List[str], bool, int]: ...
def multiTouch(
    *args: Any, query: bool = ..., gestures: bool = ..., trackpad: Queryable[int] = ...
) -> Union[bool, int]: ...
def mute(
    *args: str, query: bool = ..., disable: bool = ..., force: bool = ...
) -> List[str]: ...
def myTestCmd(*args: Any, **kwargs: Any) -> None: ...
def nBase(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    clearCachedTextureMap: str = ...,
    clearStart: bool = ...,
    stuffStart: bool = ...,
    textureToVertex: str = ...,
) -> bool: ...
def nClothAppend() -> None: ...
def nClothAppendOpt() -> None: ...
def nClothCache() -> None: ...
def nClothCacheOpt() -> None: ...
def nClothCreate() -> None: ...
def nClothCreateOptions() -> None: ...
def nClothDeleteCacheFrames() -> None: ...
def nClothDeleteCacheFramesOpt() -> None: ...
def nClothDeleteCacheOpt() -> None: ...
def nClothDeleteHistory() -> None: ...
def nClothDeleteHistoryOpt() -> None: ...
def nClothDisplayCurrentMesh() -> None: ...
def nClothDisplayInputMesh() -> None: ...
def nClothLocalToWorld() -> None: ...
def nClothMakeCollide() -> None: ...
def nClothMakeCollideOptions() -> None: ...
def nClothMergeCache() -> None: ...
def nClothMergeCacheOpt() -> None: ...
def nClothRemove() -> None: ...
def nClothReplaceCache() -> None: ...
def nClothReplaceCacheOpt() -> None: ...
def nClothReplaceFrames() -> None: ...
def nClothReplaceFramesOpt() -> None: ...
def nClothRestToInput() -> None: ...
def nClothRestToInputStart() -> None: ...
def nClothRestToMesh() -> None: ...
def nClothWorldToLocal() -> None: ...
def nConstraintAddMembers() -> None: ...
def nConstraintAttractToMatch() -> None: ...
def nConstraintAttractToMatchOptions() -> None: ...
def nConstraintCollisionExclusion() -> None: ...
def nConstraintCollisionExclusionOptions() -> None: ...
def nConstraintComponent() -> None: ...
def nConstraintComponentOptions() -> None: ...
def nConstraintComponentToComponent() -> None: ...
def nConstraintComponentToComponentOptions() -> None: ...
def nConstraintConstraintMembershipTool() -> None: ...
def nConstraintDisableCollision() -> None: ...
def nConstraintDisableCollisionOptions() -> None: ...
def nConstraintForceField() -> None: ...
def nConstraintForceFieldOptions() -> None: ...
def nConstraintPointToSurface() -> None: ...
def nConstraintPointToSurfaceOptions() -> None: ...
def nConstraintRemoveMembers() -> None: ...
def nConstraintReplaceMembers() -> None: ...
def nConstraintSelectMembers() -> None: ...
def nConstraintSlideOnSurface() -> None: ...
def nConstraintSlideOnSurfaceOptions() -> None: ...
def nConstraintTearableSurface() -> None: ...
def nConstraintTearableSurfaceOptions() -> None: ...
def nConstraintTransform() -> None: ...
def nConstraintTransformOptions() -> None: ...
def nConstraintWeldBorders() -> None: ...
def nConstraintWeldBordersOptions() -> None: ...
def nParticle(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    attribute: str = ...,
    cache: bool = ...,
    conserve: Queryable[float] = ...,
    count: bool = ...,
    deleteCache: bool = ...,
    dynamicAttrList: bool = ...,
    floatValue: float = ...,
    gridSpacing: Queryable[Multiuse[float]] = ...,
    inherit: Queryable[float] = ...,
    jitterBasePoint: Queryable[Multiuse[Tuple[float, float, float]]] = ...,
    jitterRadius: Queryable[Multiuse[float]] = ...,
    lowerLeft: Queryable[Multiuse[Tuple[float, float, float]]] = ...,
    name: Queryable[str] = ...,
    numJitters: Queryable[Multiuse[int]] = ...,
    order: int = ...,
    particleId: int = ...,
    perParticleDouble: bool = ...,
    perParticleVector: bool = ...,
    position: Multiuse[Tuple[float, float, float]] = ...,
    shapeName: Queryable[str] = ...,
    upperRight: Queryable[Multiuse[Tuple[float, float, float]]] = ...,
    vectorValue: Tuple[float, float, float] = ...,
) -> Union[
    str,
    bool,
    float,
    Multiuse[float],
    Multiuse[Tuple[float, float, float]],
    Multiuse[int],
]: ...
def nSoft(
    *args: str,
    query: bool = ...,
    convert: bool = ...,
    duplicate: bool = ...,
    duplicateHistory: bool = ...,
    goal: float = ...,
    hideOriginal: bool = ...,
) -> str: ...
def nameCommand(
    arg0: str = ...,
    /,
    *,
    annotation: str = ...,
    command: Callable[..., Any] = ...,
    data1: str = ...,
    data2: str = ...,
    data3: str = ...,
    default: bool = ...,
    sourceType: str = ...,
) -> str: ...
def nameField(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    changeCommand: Queryable[Callable[..., Any]] = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    drawInactiveFrame: bool = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    isObscured: bool = ...,
    manage: bool = ...,
    nameChangeCommand: Queryable[Callable[..., Any]] = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    object: Queryable[str] = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    receiveFocusCommand: Queryable[Callable[..., Any]] = ...,
    statusBarMessage: str = ...,
    useTemplate: str = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[str, Tuple[float, float, float], Callable[..., Any], bool, int]: ...
def namespace(
    *,
    query: bool = ...,
    absoluteName: bool = ...,
    addNamespace: str = ...,
    collapseAncestors: str = ...,
    deleteNamespaceContent: bool = ...,
    exists: str = ...,
    force: bool = ...,
    isRootNamespace: Queryable[str] = ...,
    mergeNamespaceWithOther: str = ...,
    mergeNamespaceWithParent: bool = ...,
    mergeNamespaceWithRoot: bool = ...,
    moveNamespace: Tuple[str, str] = ...,
    parent: str = ...,
    recurse: bool = ...,
    relativeNames: bool = ...,
    removeNamespace: str = ...,
    rename: Tuple[str, str] = ...,
    setNamespace: str = ...,
    validateName: str = ...,
) -> Union[str, bool]: ...
def namespaceInfo(
    arg0: str = ...,
    /,
    *,
    absoluteName: bool = ...,
    baseName: bool = ...,
    currentNamespace: bool = ...,
    dagPath: bool = ...,
    fullName: bool = ...,
    internal: bool = ...,
    isRootNamespace: bool = ...,
    listNamespace: bool = ...,
    listOnlyDependencyNodes: bool = ...,
    listOnlyNamespaces: bool = ...,
    parent: bool = ...,
    recurse: bool = ...,
    shortName: bool = ...,
) -> str: ...
def newton(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    attenuation: Queryable[float] = ...,
    magnitude: Queryable[float] = ...,
    maxDistance: Queryable[float] = ...,
    minDistance: Queryable[float] = ...,
    name: Queryable[str] = ...,
    perVertex: bool = ...,
    position: Queryable[Multiuse[Tuple[float, float, float]]] = ...,
    torusSectionRadius: Queryable[float] = ...,
    volumeExclusion: bool = ...,
    volumeOffset: Queryable[Tuple[float, float, float]] = ...,
    volumeShape: Queryable[str] = ...,
    volumeSweep: Queryable[float] = ...,
) -> Union[
    str, float, bool, Multiuse[Tuple[float, float, float]], Tuple[float, float, float]
]: ...
def nodeCast(
    arg0: str = ...,
    arg1: str = ...,
    /,
    *,
    copyDynamicAttrs: bool = ...,
    disableAPICallbacks: bool = ...,
    disableScriptJobCallbacks: bool = ...,
    disconnectUnmatchedAttrs: bool = ...,
    force: bool = ...,
    swapNames: bool = ...,
    swapValues: bool = ...,
) -> int: ...
def nodeEditor(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    activeTab: Queryable[int] = ...,
    addNewNodes: bool = ...,
    addNode: Multiuse[str] = ...,
    additiveGraphingMode: bool = ...,
    allAttributes: bool = ...,
    allNodes: bool = ...,
    allowNewTabs: bool = ...,
    allowTabTearoff: bool = ...,
    autoSizeNodes: bool = ...,
    beginCreateNode: bool = ...,
    beginNewConnection: str = ...,
    breakSelectedConnections: bool = ...,
    closeAllTabs: bool = ...,
    closeTab: int = ...,
    connectSelectedNodes: bool = ...,
    connectedGraphingMode: bool = ...,
    connectionMinSegment: Queryable[float] = ...,
    connectionOffset: Queryable[float] = ...,
    connectionRoundness: Queryable[float] = ...,
    connectionStyle: Queryable[str] = ...,
    connectionTension: Queryable[int] = ...,
    consistentNameSize: bool = ...,
    contentsChangedCommand: Queryable[Callable[..., Any]] = ...,
    control: bool = ...,
    createInfo: str = ...,
    createNodeCommand: Queryable[Callable[..., Any]] = ...,
    createTab: Union[Tuple[int], Tuple[int, str]] = ...,
    crosshairOnEdgeDragging: bool = ...,
    customAttributeListEdit: Queryable[Union[Tuple[str], Tuple[str, str]]] = ...,
    cycleHUD: bool = ...,
    defaultPinnedState: bool = ...,
    defineTemplate: str = ...,
    deleteSelected: bool = ...,
    docTag: Queryable[str] = ...,
    dotFormat: str = ...,
    downstream: bool = ...,
    duplicateTab: Union[Tuple[int], Tuple[int, int]] = ...,
    enableOpenGL: bool = ...,
    exists: bool = ...,
    extendToShapes: bool = ...,
    feedbackConnection: bool = ...,
    feedbackNode: bool = ...,
    feedbackPlug: bool = ...,
    feedbackTabIndex: bool = ...,
    feedbackType: bool = ...,
    filter: Queryable[str] = ...,
    filterCreateNodeTypes: Queryable[Callable[..., Any]] = ...,
    focusCommand: Queryable[Callable[..., Any]] = ...,
    forceMainConnection: Queryable[str] = ...,
    frameAll: bool = ...,
    frameModelSelection: bool = ...,
    frameSelected: bool = ...,
    getNodeList: bool = ...,
    graphSelectedConnections: bool = ...,
    graphSelection: bool = ...,
    gridSnap: bool = ...,
    gridVisibility: bool = ...,
    hasWatchpoint: bool = ...,
    highlightConnection: Queryable[str] = ...,
    highlightConnections: Queryable[Multiuse[Tuple[str, bool]]] = ...,
    hudMessage: Tuple[str, int, float] = ...,
    ignoreAssets: bool = ...,
    island: bool = ...,
    keyPressCommand: Queryable[Callable[..., Any]] = ...,
    keyReleaseCommand: Queryable[Callable[..., Any]] = ...,
    layout: bool = ...,
    layoutCommand: Queryable[Callable[..., Any]] = ...,
    lockMainConnection: bool = ...,
    mainListConnection: Queryable[str] = ...,
    nodeSwatchSize: str = ...,
    nodeTitleMode: Queryable[str] = ...,
    nodeViewMode: str = ...,
    overrideNodeDropPosition: Tuple[float, float] = ...,
    panView: Tuple[float, float] = ...,
    panel: Queryable[str] = ...,
    parent: Queryable[str] = ...,
    pinSelectedNodes: bool = ...,
    popupMenuScript: Queryable[Callable[..., Any]] = ...,
    primary: bool = ...,
    redockTab: bool = ...,
    removeDownstream: bool = ...,
    removeNode: Multiuse[str] = ...,
    removeUnselected: bool = ...,
    removeUpstream: bool = ...,
    renameNode: str = ...,
    renameTab: Union[Tuple[int], Tuple[int, str]] = ...,
    restoreInfo: str = ...,
    restoreLastClosedTab: bool = ...,
    rootNode: Multiuse[str] = ...,
    rootsFromSelection: bool = ...,
    scaleView: float = ...,
    selectAll: bool = ...,
    selectConnectionNodes: bool = ...,
    selectDownstream: bool = ...,
    selectFeedbackConnection: bool = ...,
    selectNode: Queryable[Multiuse[str]] = ...,
    selectUpstream: bool = ...,
    selectionConnection: Queryable[str] = ...,
    setWatchpoint: bool = ...,
    settingsChangedCallback: Queryable[Callable[..., Any]] = ...,
    shaderNetworks: bool = ...,
    showAllNodeAttributes: str = ...,
    showNamespace: bool = ...,
    showSGShapes: bool = ...,
    showShapes: bool = ...,
    showTabs: bool = ...,
    showTransforms: bool = ...,
    showUnitConversions: bool = ...,
    stateString: bool = ...,
    syncedSelection: bool = ...,
    tabChangeCommand: Callable[..., Any] = ...,
    toggleAttrFilter: bool = ...,
    toggleSelectedPins: bool = ...,
    toggleSwatchSize: str = ...,
    toolTipCommand: Queryable[Callable[..., Any]] = ...,
    traversalDepthLimit: Queryable[int] = ...,
    unParent: bool = ...,
    unlockMainConnection: bool = ...,
    updateMainConnection: bool = ...,
    upstream: bool = ...,
    useAssets: bool = ...,
    useLongName: Queryable[int] = ...,
    useTemplate: str = ...,
) -> Union[
    str,
    int,
    bool,
    float,
    Callable[..., Any],
    Union[Tuple[str], Tuple[str, str]],
    Multiuse[Tuple[str, bool]],
    Multiuse[str],
]: ...
def nodeGrapher(*args: Any, **kwargs: Any) -> None: ...
def nodeIconButton(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    align: Queryable[str] = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    command: Queryable[Callable[..., Any]] = ...,
    defineTemplate: str = ...,
    disabledImage: Queryable[str] = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    flipX: bool = ...,
    flipY: bool = ...,
    font: Queryable[str] = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    image: Queryable[str] = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    imageOverlayLabel: Queryable[str] = ...,
    isObscured: bool = ...,
    label: Queryable[str] = ...,
    labelOffset: Queryable[int] = ...,
    manage: bool = ...,
    marginHeight: Queryable[int] = ...,
    marginWidth: Queryable[int] = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    overlayLabelBackColor: Queryable[Tuple[float, float, float, float]] = ...,
    overlayLabelColor: Queryable[Tuple[float, float, float]] = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    rotation: Queryable[float] = ...,
    runTimeCommand: str = ...,
    statusBarMessage: str = ...,
    style: Queryable[str] = ...,
    useAlpha: bool = ...,
    useTemplate: str = ...,
    version: Queryable[str] = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[
    str,
    Tuple[float, float, float],
    Callable[..., Any],
    bool,
    int,
    Tuple[float, float, float, float],
    float,
]: ...
def nodeOutliner(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    addCommand: Queryable[Callable[..., Any]] = ...,
    addObject: str = ...,
    annotation: Queryable[str] = ...,
    attrAlphaOrder: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    connectivity: Queryable[str] = ...,
    currentSelection: bool = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    filter: Queryable[str] = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    isObscured: bool = ...,
    lastClickedNode: bool = ...,
    lastMenuChoice: Queryable[str] = ...,
    longNames: bool = ...,
    manage: bool = ...,
    menuCommand: Callable[..., Any] = ...,
    menuMultiOption: bool = ...,
    multiSelect: bool = ...,
    niceNames: bool = ...,
    noBackground: bool = ...,
    noConnectivity: bool = ...,
    nodesDisplayed: bool = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    pressHighlightsUnconnected: bool = ...,
    preventOverride: bool = ...,
    redraw: bool = ...,
    redrawRow: bool = ...,
    remove: Multiuse[str] = ...,
    removeAll: bool = ...,
    replace: Queryable[str] = ...,
    selectCommand: Queryable[Callable[..., Any]] = ...,
    showConnectedOnly: bool = ...,
    showHidden: bool = ...,
    showInputs: bool = ...,
    showNonConnectable: bool = ...,
    showNonKeyable: bool = ...,
    showOutputs: bool = ...,
    showPublished: bool = ...,
    showReadOnly: bool = ...,
    statusBarMessage: str = ...,
    useTemplate: str = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[bool, Callable[..., Any], str, Tuple[float, float, float], int]: ...
def nodePreset(
    *,
    attributes: str = ...,
    custom: str = ...,
    delete: Tuple[str, str] = ...,
    exists: Tuple[str, str] = ...,
    isValidName: str = ...,
    list: str = ...,
    load: Tuple[str, str] = ...,
    save: Tuple[str, str] = ...,
) -> bool: ...
def nodeTreeLister(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    addFavorite: Multiuse[str] = ...,
    addItem: Multiuse[Tuple[str, str, Callable[..., Any]]] = ...,
    addVnnItem: Multiuse[Tuple[str, str, str, str]] = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    clearContents: bool = ...,
    collapsePath: Multiuse[str] = ...,
    defineTemplate: str = ...,
    displayName: Queryable[str] = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    executeItem: str = ...,
    exists: bool = ...,
    expandPath: Multiuse[str] = ...,
    expandToDepth: int = ...,
    favoritesCallback: Callable[..., Any] = ...,
    favoritesList: bool = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    isObscured: bool = ...,
    itemScript: str = ...,
    manage: bool = ...,
    noBackground: bool = ...,
    nodeLibrary: Queryable[str] = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    refreshCommand: Queryable[Callable[..., Any]] = ...,
    removeFavorite: Multiuse[str] = ...,
    removeItem: Multiuse[str] = ...,
    resultsPathUnderCursor: bool = ...,
    selectPath: Multiuse[str] = ...,
    setDisplayName: Multiuse[Tuple[str, str]] = ...,
    statusBarMessage: str = ...,
    useTemplate: str = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    vnnString: bool = ...,
    width: Queryable[int] = ...,
) -> Union[str, Tuple[float, float, float], bool, int, Callable[..., Any]]: ...
def nodeType(
    arg0: str = ...,
    /,
    *,
    apiType: bool = ...,
    derived: bool = ...,
    inherited: bool = ...,
    isTypeName: bool = ...,
    ufeRuntimeName: bool = ...,
) -> Union[str, List[str]]: ...
def nonLinear(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    after: bool = ...,
    afterReference: bool = ...,
    autoParent: bool = ...,
    before: bool = ...,
    commonParent: bool = ...,
    components: bool = ...,
    defaultScale: bool = ...,
    deformerTools: bool = ...,
    dumpInfo: bool = ...,
    exclusive: Queryable[str] = ...,
    fixedSetupData: str = ...,
    frontOfChain: bool = ...,
    geometry: Queryable[Multiuse[str]] = ...,
    geometryIndices: bool = ...,
    ignoreSelected: bool = ...,
    includeHiddenSelections: bool = ...,
    name: str = ...,
    parallel: bool = ...,
    prune: bool = ...,
    remove: Multiuse[bool] = ...,
    selectedComponents: bool = ...,
    split: bool = ...,
    type: str = ...,
    useComponentTags: bool = ...,
) -> Union[List[str], bool, str, Multiuse[str]]: ...
def nop(*args: Any, **kwargs: Any) -> None: ...
def normalConstraint(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    aimVector: Queryable[Tuple[float, float, float]] = ...,
    layer: str = ...,
    name: Queryable[str] = ...,
    remove: bool = ...,
    targetList: bool = ...,
    upVector: Queryable[Tuple[float, float, float]] = ...,
    weight: Queryable[float] = ...,
    weightAliasList: bool = ...,
    worldUpObject: Queryable[str] = ...,
    worldUpType: Queryable[str] = ...,
    worldUpVector: Queryable[Tuple[float, float, float]] = ...,
) -> Union[List[str], Tuple[float, float, float], str, bool, float]: ...
def notifyDecorator() -> None: ...
def notifyPostRedo() -> None: ...
def notifyPostUndo() -> None: ...
def nucleusDisplayDynamicConstraintNodes() -> None: ...
def nucleusDisplayMaterialNodes() -> None: ...
def nucleusDisplayNComponentNodes() -> None: ...
def nucleusDisplayOtherNodes() -> None: ...
def nucleusDisplayTextureNodes() -> None: ...
def nucleusDisplayTransformNodes() -> None: ...
def nucleusGetEffectsAsset() -> None: ...
def nucleusGetnClothExample() -> None: ...
def nucleusGetnParticleExample() -> None: ...
def nurbsBoolean(
    arg0: str = ...,
    /,
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    nodeState: Queryable[int] = ...,
    operation: Queryable[int] = ...,
    tolerance: Queryable[float] = ...,
    constructionHistory: bool = ...,
    name: str = ...,
    nsrfsInFirstShell: int = ...,
    object: bool = ...,
    smartConnection: bool = ...,
) -> Union[List[str], bool, int, float]: ...
def nurbsCopyUVSet(*args: str) -> bool: ...
def nurbsCube(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    axis: Queryable[Tuple[float, float, float]] = ...,
    caching: bool = ...,
    degree: Queryable[int] = ...,
    heightRatio: Queryable[float] = ...,
    lengthRatio: Queryable[float] = ...,
    nodeState: Queryable[int] = ...,
    patchesU: Queryable[int] = ...,
    patchesV: Queryable[int] = ...,
    pivot: Queryable[Tuple[float, float, float]] = ...,
    width: Queryable[float] = ...,
    constructionHistory: bool = ...,
    name: str = ...,
    object: bool = ...,
    polygon: int = ...,
) -> Union[List[str], Tuple[float, float, float], bool, int, float]: ...
def nurbsCurveRebuildPref(
    *,
    query: bool = ...,
    degree: int = ...,
    endKnots: int = ...,
    fitRebuild: int = ...,
    keepControlPoints: bool = ...,
    keepEndPoints: bool = ...,
    keepRange: int = ...,
    keepTangents: bool = ...,
    rebuildType: int = ...,
    spans: int = ...,
    smartSurfaceCurve: bool = ...,
    tolerance: float = ...,
) -> None: ...
def nurbsCurveToBezier() -> List[str]: ...
def nurbsEditUV(
    *args: str,
    query: bool = ...,
    angle: Queryable[float] = ...,
    pivotU: Queryable[float] = ...,
    pivotV: Queryable[float] = ...,
    relative: bool = ...,
    rotateRatio: Queryable[float] = ...,
    rotation: bool = ...,
    scale: bool = ...,
    scaleU: Queryable[float] = ...,
    scaleV: Queryable[float] = ...,
    uValue: Queryable[float] = ...,
    vValue: Queryable[float] = ...,
) -> Union[bool, float]: ...
def nurbsPlane(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    axis: Queryable[Tuple[float, float, float]] = ...,
    caching: bool = ...,
    degree: Queryable[int] = ...,
    lengthRatio: Queryable[float] = ...,
    nodeState: Queryable[int] = ...,
    patchesU: Queryable[int] = ...,
    patchesV: Queryable[int] = ...,
    pivot: Queryable[Tuple[float, float, float]] = ...,
    width: Queryable[float] = ...,
    constructionHistory: bool = ...,
    name: str = ...,
    object: bool = ...,
    polygon: int = ...,
) -> Union[List[str], Tuple[float, float, float], bool, int, float]: ...
def nurbsSelect(
    *args: str,
    borderSelection: bool = ...,
    bottomBorder: bool = ...,
    growSelection: int = ...,
    leftBorder: bool = ...,
    rightBorder: bool = ...,
    shrinkSelection: int = ...,
    topBorder: bool = ...,
) -> bool: ...
def nurbsSquare(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    center: Queryable[Tuple[float, float, float]] = ...,
    centerX: Queryable[float] = ...,
    centerY: Queryable[float] = ...,
    centerZ: Queryable[float] = ...,
    degree: Queryable[int] = ...,
    nodeState: Queryable[int] = ...,
    normal: Queryable[Tuple[float, float, float]] = ...,
    normalX: Queryable[float] = ...,
    normalY: Queryable[float] = ...,
    normalZ: Queryable[float] = ...,
    sideLength1: Queryable[float] = ...,
    sideLength2: Queryable[float] = ...,
    spansPerSide: Queryable[int] = ...,
    constructionHistory: bool = ...,
    name: str = ...,
    object: bool = ...,
) -> Union[List[str], bool, Tuple[float, float, float], float, int]: ...
def nurbsToPoly(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    curvatureTolerance: Queryable[int] = ...,
    explicitTessellationAttributes: bool = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
    object: bool = ...,
    smoothEdge: bool = ...,
    smoothEdgeRatio: Queryable[float] = ...,
    uDivisionsFactor: Queryable[float] = ...,
    vDivisionsFactor: Queryable[float] = ...,
) -> Union[List[str], bool, int, float]: ...
def nurbsToPolygonsPref(
    *,
    query: bool = ...,
    chordHeight: Queryable[float] = ...,
    chordHeightRatio: Queryable[float] = ...,
    delta3D: Queryable[float] = ...,
    edgeSwap: bool = ...,
    format: Queryable[int] = ...,
    fraction: Queryable[float] = ...,
    matchRenderTessellation: Queryable[int] = ...,
    merge: Queryable[int] = ...,
    mergeTolerance: Queryable[float] = ...,
    minEdgeLen: Queryable[float] = ...,
    polyCount: Queryable[int] = ...,
    polyType: Queryable[int] = ...,
    uNumber: Queryable[int] = ...,
    uType: Queryable[int] = ...,
    useChordHeight: bool = ...,
    useChordHeightRatio: bool = ...,
    vNumber: Queryable[int] = ...,
    vType: Queryable[int] = ...,
) -> Union[bool, float, int]: ...
def nurbsToSubdiv(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    addUnderTransform: bool = ...,
    caching: bool = ...,
    collapsePoles: bool = ...,
    constructionHistory: bool = ...,
    matchPeriodic: bool = ...,
    maxPolyCount: Queryable[int] = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
    object: bool = ...,
    reverseNormal: bool = ...,
) -> Union[List[str], bool, int]: ...
def nurbsToSubdivPref(
    *,
    query: bool = ...,
    bridge: Queryable[int] = ...,
    capType: Queryable[int] = ...,
    collapsePoles: bool = ...,
    matchPeriodic: bool = ...,
    maxPolyCount: Queryable[int] = ...,
    offset: Queryable[float] = ...,
    reverseNormal: bool = ...,
    solidType: Queryable[int] = ...,
    trans00: Queryable[float] = ...,
    trans01: Queryable[float] = ...,
    trans02: Queryable[float] = ...,
    trans10: Queryable[float] = ...,
    trans11: Queryable[float] = ...,
    trans12: Queryable[float] = ...,
    trans20: Queryable[float] = ...,
    trans21: Queryable[float] = ...,
    trans22: Queryable[float] = ...,
    trans30: Queryable[float] = ...,
    trans31: Queryable[float] = ...,
    trans32: Queryable[float] = ...,
) -> Union[bool, int, float]: ...
def nurbsUVSet(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    create: bool = ...,
    useExplicit: bool = ...,
) -> bool: ...
def objExists(arg0: str = ..., /) -> bool: ...
def objectCenter(
    arg0: str = ...,
    /,
    *,
    gl: bool = ...,
    local: bool = ...,
    x: bool = ...,
    y: bool = ...,
    z: bool = ...,
) -> Union[List[float], float]: ...
def objectType(
    arg0: str = ...,
    /,
    *,
    isAType: str = ...,
    isType: str = ...,
    tagFromType: str = ...,
    typeFromTag: int = ...,
    typeTag: bool = ...,
) -> Union[str, bool]: ...
def objectTypeUI(
    arg0: str = ...,
    /,
    *,
    isType: str = ...,
    listAll: bool = ...,
    superClasses: bool = ...,
) -> str: ...
def offsetCurve(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    connectBreaks: Queryable[int] = ...,
    cutLoop: bool = ...,
    cutRadius: Queryable[float] = ...,
    distance: Queryable[float] = ...,
    nodeState: Queryable[int] = ...,
    normal: Queryable[Tuple[float, float, float]] = ...,
    reparameterize: bool = ...,
    stitch: bool = ...,
    subdivisionDensity: Queryable[int] = ...,
    tolerance: Queryable[float] = ...,
    useGivenNormal: bool = ...,
    constructionHistory: bool = ...,
    name: str = ...,
    object: bool = ...,
    range: bool = ...,
) -> Union[List[str], bool, int, float, Tuple[float, float, float]]: ...
def offsetCurveOnSurface(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    checkPoints: Queryable[int] = ...,
    connectBreaks: Queryable[int] = ...,
    cutLoop: bool = ...,
    distance: Queryable[float] = ...,
    nodeState: Queryable[int] = ...,
    stitch: bool = ...,
    subdivisionDensity: Queryable[int] = ...,
    tolerance: Queryable[float] = ...,
    constructionHistory: bool = ...,
    name: str = ...,
    object: bool = ...,
    range: bool = ...,
) -> Union[List[str], bool, int, float]: ...
def offsetSurface(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    distance: Queryable[float] = ...,
    method: Queryable[int] = ...,
    nodeState: Queryable[int] = ...,
    constructionHistory: bool = ...,
    name: str = ...,
    object: bool = ...,
) -> Union[List[str], bool, float, int]: ...
def ogs(
    *,
    query: bool = ...,
    deviceInformation: bool = ...,
    disposeReleasableTextures: bool = ...,
    dumpTexture: str = ...,
    enableHardwareInstancing: bool = ...,
    fragmentEditor: str = ...,
    fragmentXML: str = ...,
    gpuMemoryTotal: Queryable[int] = ...,
    gpuMemoryUsed: bool = ...,
    isLegacyViewportEnabled: bool = ...,
    isRemoteGLSessionEnabled: bool = ...,
    isWinRemoteSession: bool = ...,
    pause: bool = ...,
    rebakeTextures: bool = ...,
    regenerateUVTilePreview: str = ...,
    reloadTextures: bool = ...,
    reset: bool = ...,
    shaderSource: Queryable[str] = ...,
    toggleTexturePaging: bool = ...,
    traceRenderPipeline: bool = ...,
) -> Union[str, int, bool]: ...
def ogsRender(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    activeMultisampleType: Queryable[str] = ...,
    activeRenderOverride: Queryable[str] = ...,
    activeRenderTargetFormat: Queryable[str] = ...,
    availableFloatingPointTargetFormat: bool = ...,
    availableMultisampleType: bool = ...,
    availableRenderOverrides: bool = ...,
    camera: Queryable[str] = ...,
    currentFrame: bool = ...,
    currentView: bool = ...,
    enableFloatingPointRenderTarget: bool = ...,
    enableMultisample: bool = ...,
    frame: float = ...,
    height: Queryable[int] = ...,
    layer: Queryable[str] = ...,
    noRenderView: bool = ...,
    width: Queryable[int] = ...,
) -> Union[bool, str, int]: ...
def ogsdebug(
    *, count: int = ..., debug: str = ..., timing: str = ..., verbose: bool = ...
) -> None: ...
def openCLInfo(
    *args: str,
    query: bool = ...,
    limitMinimumVerts: bool = ...,
    minVertexBuffer: Queryable[int] = ...,
    supportsDoublePrecision: bool = ...,
    valid: bool = ...,
) -> Union[bool, int]: ...
def openGLExtension(
    *args: str,
    extension: str = ...,
    renderer: bool = ...,
    vendor: bool = ...,
    version: bool = ...,
) -> str: ...
def openMayaPref(
    *,
    edit: bool = ...,
    query: bool = ...,
    errlog: bool = ...,
    lazyLoad: bool = ...,
    oldPluginWarning: bool = ...,
) -> Union[int, bool]: ...
def optionMenu(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    alwaysCallChangeCommand: bool = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    beforeShowPopup: Callable[..., Any] = ...,
    changeCommand: Callable[..., Any] = ...,
    defineTemplate: str = ...,
    deleteAllItems: bool = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    isObscured: bool = ...,
    itemListLong: bool = ...,
    itemListShort: bool = ...,
    label: Queryable[str] = ...,
    manage: bool = ...,
    maxVisibleItems: Queryable[int] = ...,
    noBackground: bool = ...,
    numberOfItems: bool = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    postMenuCommand: Callable[..., Any] = ...,
    postMenuCommandOnce: bool = ...,
    preventOverride: bool = ...,
    select: Queryable[int] = ...,
    statusBarMessage: str = ...,
    useTemplate: str = ...,
    value: Queryable[str] = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[str, bool, Tuple[float, float, float], int, Callable[..., Any]]: ...
def optionMenuGrp(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    adjustableColumn: int = ...,
    adjustableColumn2: int = ...,
    adjustableColumn3: int = ...,
    adjustableColumn4: int = ...,
    adjustableColumn5: int = ...,
    adjustableColumn6: int = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    changeCommand: Callable[..., Any] = ...,
    columnAlign: Multiuse[Tuple[int, str]] = ...,
    columnAlign2: Tuple[str, str] = ...,
    columnAlign3: Tuple[str, str, str] = ...,
    columnAlign4: Tuple[str, str, str, str] = ...,
    columnAlign5: Tuple[str, str, str, str, str] = ...,
    columnAlign6: Tuple[str, str, str, str, str, str] = ...,
    columnAttach: Multiuse[Tuple[int, str, int]] = ...,
    columnAttach2: Tuple[str, str] = ...,
    columnAttach3: Tuple[str, str, str] = ...,
    columnAttach4: Tuple[str, str, str, str] = ...,
    columnAttach5: Tuple[str, str, str, str, str] = ...,
    columnAttach6: Tuple[str, str, str, str, str, str] = ...,
    columnOffset2: Tuple[int, int] = ...,
    columnOffset3: Tuple[int, int, int] = ...,
    columnOffset4: Tuple[int, int, int, int] = ...,
    columnOffset5: Tuple[int, int, int, int, int] = ...,
    columnOffset6: Tuple[int, int, int, int, int, int] = ...,
    columnWidth: Multiuse[Tuple[int, int]] = ...,
    columnWidth1: int = ...,
    columnWidth2: Tuple[int, int] = ...,
    columnWidth3: Tuple[int, int, int] = ...,
    columnWidth4: Tuple[int, int, int, int] = ...,
    columnWidth5: Tuple[int, int, int, int, int] = ...,
    columnWidth6: Tuple[int, int, int, int, int, int] = ...,
    defineTemplate: str = ...,
    deleteAllItems: bool = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    extraLabel: Queryable[str] = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    isObscured: bool = ...,
    itemListLong: bool = ...,
    itemListShort: bool = ...,
    label: Queryable[str] = ...,
    manage: bool = ...,
    noBackground: bool = ...,
    numberOfItems: bool = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    postMenuCommand: Callable[..., Any] = ...,
    postMenuCommandOnce: bool = ...,
    preventOverride: bool = ...,
    rowAttach: Multiuse[Tuple[int, str, int]] = ...,
    select: Queryable[int] = ...,
    statusBarMessage: str = ...,
    useTemplate: str = ...,
    value: Queryable[str] = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[str, Tuple[float, float, float], bool, int, Callable[..., Any]]: ...
def optionVar(
    *,
    query: str = ...,
    arraySize: str = ...,
    category: str = ...,
    clearArray: Multiuse[str] = ...,
    clearStash: Multiuse[str] = ...,
    default: bool = ...,
    exists: str = ...,
    floatArray: Multiuse[str] = ...,
    floatValue: Multiuse[Tuple[str, float]] = ...,
    floatValue2: Multiuse[Tuple[str, float, float]] = ...,
    floatValue3: Multiuse[Tuple[str, float, float, float]] = ...,
    floatValue4: Multiuse[Tuple[str, float, float, float, float]] = ...,
    floatValueAppend: Multiuse[Tuple[str, float]] = ...,
    init: bool = ...,
    intArray: Multiuse[str] = ...,
    intValue: Multiuse[Tuple[str, int]] = ...,
    intValue2: Multiuse[Tuple[str, int, int]] = ...,
    intValue3: Multiuse[Tuple[str, int, int, int]] = ...,
    intValue4: Multiuse[Tuple[str, int, int, int, int]] = ...,
    intValueAppend: Multiuse[Tuple[str, int]] = ...,
    list: bool = ...,
    listCategories: bool = ...,
    listModified: bool = ...,
    prefFile: Queryable[str] = ...,
    remove: Multiuse[str] = ...,
    removeFromArray: Multiuse[Tuple[str, int]] = ...,
    stash: Multiuse[str] = ...,
    stringArray: Multiuse[str] = ...,
    stringValue: Multiuse[Tuple[str, str]] = ...,
    stringValueAppend: Multiuse[Tuple[str, str]] = ...,
    transient: bool = ...,
    unstash: Multiuse[str] = ...,
    version: int = ...,
) -> Union[int, List[str], None, str]: ...
def orbit(
    arg0: str = ...,
    /,
    *,
    horizontalAngle: float = ...,
    pivotPoint: Tuple[float, float, float] = ...,
    rotationAngles: Tuple[float, float] = ...,
    verticalAngle: float = ...,
) -> bool: ...
def orbitCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    alternateContext: bool = ...,
    exists: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    localOrbit: bool = ...,
    name: str = ...,
    orbitScale: Queryable[float] = ...,
    toolName: Queryable[str] = ...,
) -> Union[str, bool, float]: ...
def orientConstraint(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    createCache: Tuple[float, float] = ...,
    deleteCache: bool = ...,
    layer: str = ...,
    maintainOffset: bool = ...,
    name: Queryable[str] = ...,
    offset: Queryable[Tuple[float, float, float]] = ...,
    remove: bool = ...,
    skip: Multiuse[str] = ...,
    targetList: bool = ...,
    weight: Queryable[float] = ...,
    weightAliasList: bool = ...,
) -> Union[str, Tuple[float, float, float], bool, float]: ...
def outlinerEditor(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    allowMultiSelection: bool = ...,
    alwaysToggleSelect: bool = ...,
    animLayerFilterOptions: Queryable[str] = ...,
    attrAlphaOrder: Queryable[str] = ...,
    attrFilter: Queryable[str] = ...,
    autoExpand: bool = ...,
    autoExpandAllAnimatedShapes: bool = ...,
    autoExpandAnimatedShapes: bool = ...,
    autoExpandLayers: bool = ...,
    autoSelectNewObjects: bool = ...,
    containersIgnoreFilters: bool = ...,
    control: bool = ...,
    defineTemplate: str = ...,
    directSelect: bool = ...,
    displayMode: Queryable[str] = ...,
    doNotSelectNewObjects: bool = ...,
    docTag: Queryable[str] = ...,
    dropIsParent: bool = ...,
    editAttrName: bool = ...,
    exists: bool = ...,
    expandAllAttributes: bool = ...,
    expandAllItems: bool = ...,
    expandAllSelectedItems: bool = ...,
    expandAttribute: bool = ...,
    expandConnections: bool = ...,
    expandObjects: bool = ...,
    feedbackItemName: bool = ...,
    feedbackRowNumber: bool = ...,
    filter: Queryable[str] = ...,
    forceMainConnection: Queryable[str] = ...,
    getCurrentSetOfItem: Queryable[int] = ...,
    highlightActive: bool = ...,
    highlightConnection: Queryable[str] = ...,
    highlightSecondary: bool = ...,
    ignoreDagHierarchy: bool = ...,
    ignoreHiddenAttribute: bool = ...,
    ignoreOutlinerColor: bool = ...,
    isChildSelected: Queryable[str] = ...,
    isSet: Queryable[int] = ...,
    isSetMember: Queryable[int] = ...,
    isUfeItem: Queryable[int] = ...,
    lockMainConnection: bool = ...,
    longNames: bool = ...,
    mainListConnection: Queryable[str] = ...,
    mapMotionTrails: bool = ...,
    masterOutliner: Queryable[str] = ...,
    niceNames: bool = ...,
    object: Queryable[str] = ...,
    organizeByClip: bool = ...,
    organizeByLayer: bool = ...,
    panel: Queryable[str] = ...,
    parent: Queryable[str] = ...,
    parentObject: bool = ...,
    pinPlug: Queryable[str] = ...,
    refresh: bool = ...,
    removeFromCurrentSet: int = ...,
    renameItem: int = ...,
    renameSelectedItem: bool = ...,
    renderFilterActive: bool = ...,
    renderFilterIndex: Queryable[int] = ...,
    renderFilterVisible: bool = ...,
    selectCommand: Queryable[Callable[..., Any]] = ...,
    selectionConnection: Queryable[str] = ...,
    selectionOrder: str = ...,
    setFilter: Queryable[str] = ...,
    setsIgnoreFilters: bool = ...,
    showAnimCurvesOnly: bool = ...,
    showAnimLayerWeight: bool = ...,
    showAssets: bool = ...,
    showAssignedMaterials: bool = ...,
    showAttrValues: bool = ...,
    showAttributes: bool = ...,
    showCompounds: bool = ...,
    showConnected: bool = ...,
    showContainedOnly: bool = ...,
    showContainerContents: bool = ...,
    showDagOnly: bool = ...,
    showLeafs: bool = ...,
    showMuteInfo: bool = ...,
    showNamespace: bool = ...,
    showNumericAttrsOnly: bool = ...,
    showParentContainers: bool = ...,
    showPinIcons: bool = ...,
    showPublishedAsConnected: bool = ...,
    showReferenceMembers: bool = ...,
    showReferenceNodes: bool = ...,
    showSelected: bool = ...,
    showSetMembers: bool = ...,
    showShapes: bool = ...,
    showTextureNodesOnly: bool = ...,
    showTimeEditor: bool = ...,
    showUVAttrsOnly: bool = ...,
    showUfeItems: bool = ...,
    showUnitlessCurves: bool = ...,
    showUpstreamCurves: bool = ...,
    sortOrder: Queryable[str] = ...,
    stateString: bool = ...,
    transmitFilters: bool = ...,
    ufeFilter: Queryable[Tuple[str, str]] = ...,
    ufeFilterValue: bool = ...,
    unParent: bool = ...,
    unlockMainConnection: bool = ...,
    unpinPlug: str = ...,
    updateMainConnection: bool = ...,
    useTemplate: str = ...,
) -> Union[str, bool, int, Callable[..., Any], Tuple[str, str]]: ...
def outlinerPanel(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    control: bool = ...,
    copy: str = ...,
    createString: bool = ...,
    defineTemplate: str = ...,
    divider: Queryable[int] = ...,
    docTag: Queryable[str] = ...,
    editString: bool = ...,
    exists: bool = ...,
    init: bool = ...,
    isUnique: bool = ...,
    label: Queryable[str] = ...,
    menuBarRepeatLast: bool = ...,
    menuBarVisible: bool = ...,
    needsInit: bool = ...,
    outlinerEditor: bool = ...,
    parent: str = ...,
    popupMenuProcedure: Queryable[Callable[..., Any]] = ...,
    replacePanel: str = ...,
    tearOff: bool = ...,
    tearOffCopy: str = ...,
    tearOffRestore: bool = ...,
    unParent: bool = ...,
    useTemplate: str = ...,
) -> Union[str, bool, int, Callable[..., Any]]: ...
def outputWindow(*, query: bool = ..., show: bool = ...) -> bool: ...
def overrideModifier(
    *, clear: bool = ..., press: Multiuse[str] = ..., release: Multiuse[str] = ...
) -> bool: ...
def paint3d(*args: str) -> None: ...
def paintEffectsDisplay(*, query: bool = ..., meshDrawEnable: bool = ...) -> bool: ...
def pairBlend(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    attribute: Multiuse[str] = ...,
    input1: bool = ...,
    input2: bool = ...,
    node: str = ...,
) -> Union[str, bool]: ...
def palettePort(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    actualTotal: Queryable[int] = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    changeCommand: Callable[..., Any] = ...,
    colorEditable: bool = ...,
    colorEdited: Callable[..., Any] = ...,
    defineTemplate: str = ...,
    dimensions: Queryable[Tuple[int, int]] = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    editable: bool = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    hsvValue: Queryable[Tuple[int, int, float, float, float]] = ...,
    isObscured: bool = ...,
    manage: bool = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    redraw: bool = ...,
    rgbValue: Queryable[Tuple[int, float, float, float]] = ...,
    setCurCell: Queryable[int] = ...,
    statusBarMessage: str = ...,
    topDown: bool = ...,
    transparent: Queryable[int] = ...,
    useTemplate: str = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[
    str,
    int,
    Tuple[float, float, float],
    bool,
    Tuple[int, int],
    Tuple[int, int, float, float, float],
    Tuple[int, float, float, float],
    Callable[..., Any],
]: ...
def panZoom(
    arg0: str = ...,
    /,
    *,
    absolute: bool = ...,
    downDistance: float = ...,
    leftDistance: float = ...,
    relative: bool = ...,
    rightDistance: float = ...,
    upDistance: float = ...,
    zoomRatio: float = ...,
) -> bool: ...
def panZoomCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    alternateContext: bool = ...,
    buttonDown: bool = ...,
    buttonUp: bool = ...,
    exists: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    name: str = ...,
    panMode: bool = ...,
    toolName: Queryable[str] = ...,
    zoomMode: bool = ...,
    zoomScale: Queryable[float] = ...,
) -> Union[str, bool, float]: ...
def paneLayout(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    activeFrameThickness: Queryable[int] = ...,
    activePane: Queryable[str] = ...,
    activePaneIndex: Queryable[int] = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    childArray: bool = ...,
    configuration: Queryable[str] = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    generalSpacing: int = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    isObscured: bool = ...,
    manage: bool = ...,
    margins: int = ...,
    margins4: Tuple[int, int, int, int] = ...,
    noBackground: bool = ...,
    numberOfChildren: bool = ...,
    numberOfPopupMenus: bool = ...,
    numberOfVisiblePanes: bool = ...,
    pane1: bool = ...,
    pane2: bool = ...,
    pane3: bool = ...,
    pane4: bool = ...,
    paneSize: Queryable[Multiuse[Tuple[int, int, int]]] = ...,
    paneUnderPointer: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    separatorMovedCommand: Callable[..., Any] = ...,
    separatorThickness: Queryable[int] = ...,
    setPane: Multiuse[Tuple[str, int]] = ...,
    staticHeightPane: int = ...,
    staticWidthPane: int = ...,
    statusBarMessage: str = ...,
    useTemplate: str = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[
    str,
    int,
    Tuple[float, float, float],
    bool,
    Multiuse[Tuple[int, int, int]],
    Callable[..., Any],
]: ...
def panel(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    control: bool = ...,
    copy: str = ...,
    createString: bool = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    editString: bool = ...,
    exists: bool = ...,
    init: bool = ...,
    isUnique: bool = ...,
    label: Queryable[str] = ...,
    menuBarRepeatLast: bool = ...,
    menuBarVisible: bool = ...,
    needsInit: bool = ...,
    parent: str = ...,
    popupMenuProcedure: Queryable[Callable[..., Any]] = ...,
    replacePanel: str = ...,
    tearOff: bool = ...,
    tearOffCopy: str = ...,
    tearOffRestore: bool = ...,
    unParent: bool = ...,
    useTemplate: str = ...,
) -> Union[bool, str, Callable[..., Any]]: ...
def panelConfiguration(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    addPanel: Multiuse[Tuple[bool, str, str, str, str]] = ...,
    configString: Queryable[str] = ...,
    createStrings: bool = ...,
    defaultImage: Queryable[str] = ...,
    defineTemplate: str = ...,
    editStrings: bool = ...,
    exists: bool = ...,
    image: Queryable[str] = ...,
    isFixedState: bool = ...,
    label: Queryable[str] = ...,
    labelStrings: bool = ...,
    numberOfPanels: bool = ...,
    removeAllPanels: bool = ...,
    removeLastPanel: bool = ...,
    replaceCreateString: Tuple[int, str] = ...,
    replaceEditString: Tuple[int, str] = ...,
    replaceFixedState: Tuple[int, bool] = ...,
    replaceLabel: Tuple[int, str] = ...,
    replacePanel: Tuple[int, bool, str, str, str, str] = ...,
    replaceTypeString: Tuple[int, str] = ...,
    sceneConfig: bool = ...,
    typeStrings: bool = ...,
    useTemplate: str = ...,
    userCreated: bool = ...,
) -> Union[str, bool]: ...
def panelHistory(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    back: bool = ...,
    clear: bool = ...,
    defineTemplate: str = ...,
    exists: bool = ...,
    forward: bool = ...,
    historyDepth: Queryable[int] = ...,
    isEmpty: bool = ...,
    suspend: bool = ...,
    targetPane: Queryable[str] = ...,
    useTemplate: str = ...,
    wrap: bool = ...,
) -> Union[str, int, bool]: ...
def paramDimContext(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    exists: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    name: str = ...,
) -> str: ...
def paramDimension(*args: str) -> str: ...
def paramLocator(
    *args: str, edit: bool = ..., query: bool = ..., position: bool = ...
) -> str: ...
def parent(
    *args: str,
    absolute: bool = ...,
    addObject: bool = ...,
    noConnections: bool = ...,
    noInvScale: bool = ...,
    relative: bool = ...,
    removeObject: bool = ...,
    shape: bool = ...,
    world: bool = ...,
) -> List[str]: ...
def parentConstraint(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    createCache: Tuple[float, float] = ...,
    decompRotationToChild: bool = ...,
    deleteCache: bool = ...,
    layer: str = ...,
    maintainOffset: bool = ...,
    name: Queryable[str] = ...,
    remove: bool = ...,
    skipRotate: Multiuse[str] = ...,
    skipTranslate: Multiuse[str] = ...,
    targetList: bool = ...,
    weight: Queryable[float] = ...,
    weightAliasList: bool = ...,
) -> Union[List[str], str, bool, float]: ...
def particle(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    attribute: str = ...,
    cache: bool = ...,
    conserve: Queryable[float] = ...,
    count: bool = ...,
    deleteCache: bool = ...,
    dynamicAttrList: bool = ...,
    floatValue: float = ...,
    gridSpacing: Queryable[Multiuse[float]] = ...,
    inherit: Queryable[float] = ...,
    jitterBasePoint: Queryable[Multiuse[Tuple[float, float, float]]] = ...,
    jitterRadius: Queryable[Multiuse[float]] = ...,
    lowerLeft: Queryable[Multiuse[Tuple[float, float, float]]] = ...,
    name: Queryable[str] = ...,
    numJitters: Queryable[Multiuse[int]] = ...,
    order: int = ...,
    particleId: int = ...,
    perParticleDouble: bool = ...,
    perParticleVector: bool = ...,
    position: Multiuse[Tuple[float, float, float]] = ...,
    shapeName: Queryable[str] = ...,
    upperRight: Queryable[Multiuse[Tuple[float, float, float]]] = ...,
    vectorValue: Tuple[float, float, float] = ...,
) -> Union[
    str,
    bool,
    float,
    Multiuse[float],
    Multiuse[Tuple[float, float, float]],
    Multiuse[int],
]: ...
def particleExists(*args: str) -> bool: ...
def particleFill(
    *args: str,
    closePacking: bool = ...,
    doubleWalled: bool = ...,
    maxX: float = ...,
    maxY: float = ...,
    maxZ: float = ...,
    minX: float = ...,
    minY: float = ...,
    minZ: float = ...,
    particleDensity: float = ...,
    resolution: int = ...,
) -> bool: ...
def particleInstancer(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    addObject: bool = ...,
    aimAxis: Queryable[str] = ...,
    aimDirection: Queryable[str] = ...,
    aimPosition: Queryable[str] = ...,
    aimUpAxis: Queryable[str] = ...,
    aimWorldUp: Queryable[str] = ...,
    attributeMapping: bool = ...,
    cycle: Queryable[str] = ...,
    cycleStartObject: Queryable[str] = ...,
    cycleStep: Queryable[float] = ...,
    cycleStepUnits: Queryable[str] = ...,
    index: Queryable[int] = ...,
    instanceId: Queryable[str] = ...,
    levelOfDetail: Queryable[str] = ...,
    name: Queryable[str] = ...,
    object: Queryable[Multiuse[str]] = ...,
    objectIndex: Queryable[str] = ...,
    particleAge: Queryable[str] = ...,
    position: Queryable[str] = ...,
    removeObject: bool = ...,
    rotation: Queryable[str] = ...,
    rotationOrder: Queryable[str] = ...,
    rotationType: Queryable[str] = ...,
    rotationUnits: Queryable[str] = ...,
    scale: Queryable[str] = ...,
    shear: Queryable[str] = ...,
    visibility: Queryable[str] = ...,
) -> Union[str, bool, float, int, Multiuse[str]]: ...
def particleRenderInfo(
    *,
    query: bool = ...,
    attrList: Queryable[int] = ...,
    attrListAll: bool = ...,
    name: Queryable[int] = ...,
    renderTypeCount: bool = ...,
) -> Union[bool, int]: ...
def partition(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    addSet: str = ...,
    name: str = ...,
    removeSet: str = ...,
    render: bool = ...,
) -> Union[str, bool]: ...
def pasteKey(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    animLayer: str = ...,
    animation: str = ...,
    attribute: Multiuse[str] = ...,
    clipboard: str = ...,
    connect: bool = ...,
    copies: int = ...,
    float: Range[float] = ...,
    floatOffset: float = ...,
    includeUpperBound: bool = ...,
    index: int = ...,
    matchByName: bool = ...,
    option: str = ...,
    selectPasted: bool = ...,
    time: NullableRange[float] = ...,
    timeOffset: int = ...,
    valueOffset: float = ...,
) -> int: ...
def pathAnimation(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    bank: bool = ...,
    bankScale: Queryable[float] = ...,
    bankThreshold: Queryable[float] = ...,
    curve: Queryable[str] = ...,
    endTimeU: Queryable[Multiuse[int]] = ...,
    endU: Queryable[float] = ...,
    follow: bool = ...,
    followAxis: Queryable[str] = ...,
    fractionMode: bool = ...,
    inverseFront: bool = ...,
    inverseUp: bool = ...,
    name: Queryable[str] = ...,
    startTimeU: Queryable[Multiuse[int]] = ...,
    startU: Queryable[float] = ...,
    upAxis: Queryable[str] = ...,
    useNormal: bool = ...,
    worldUpObject: Queryable[str] = ...,
    worldUpType: Queryable[str] = ...,
    worldUpVector: Queryable[Tuple[float, float, float]] = ...,
) -> Union[str, bool, float, Multiuse[int], Tuple[float, float, float]]: ...
def pause(*, seconds: int = ...) -> bool: ...
def perCameraVisibility(
    *args: str,
    query: bool = ...,
    camera: Queryable[str] = ...,
    exclusive: bool = ...,
    hide: bool = ...,
    remove: bool = ...,
    removeAll: bool = ...,
    removeCamera: bool = ...,
) -> Union[List[str], str, bool]: ...
def percent(
    arg0: str = ...,
    /,
    *args: str,
    query: bool = ...,
    addPercent: bool = ...,
    dropoffAxis: Tuple[float, float, float] = ...,
    dropoffCurve: str = ...,
    dropoffDistance: float = ...,
    dropoffPosition: Tuple[float, float, float] = ...,
    dropoffType: str = ...,
    multiplyPercent: bool = ...,
    value: Queryable[float] = ...,
) -> Union[bool, float]: ...
def performanceOptions(
    *,
    query: bool = ...,
    clusterResolution: Queryable[float] = ...,
    disableStitch: Queryable[str] = ...,
    disableTrimBoundaryDisplay: Queryable[str] = ...,
    disableTrimDisplay: Queryable[str] = ...,
    latticeResolution: Queryable[float] = ...,
    passThroughBindSkinAndFlexors: Queryable[str] = ...,
    passThroughBlendShape: Queryable[str] = ...,
    passThroughCluster: Queryable[str] = ...,
    passThroughDeltaMush: Queryable[str] = ...,
    passThroughFlexors: Queryable[str] = ...,
    passThroughLattice: Queryable[str] = ...,
    passThroughMeshBoolean: Queryable[str] = ...,
    passThroughPaintEffects: Queryable[str] = ...,
    passThroughSculpt: Queryable[str] = ...,
    passThroughWire: Queryable[str] = ...,
    regionOfEffect: Queryable[str] = ...,
    skipHierarchyTraversal: bool = ...,
    useClusterResolution: Queryable[str] = ...,
    useLatticeResolution: Queryable[str] = ...,
) -> Union[str, float, bool]: ...
def pfxstrokes(
    *, filename: str = ..., postCallback: bool = ..., selected: bool = ...
) -> bool: ...
def pickWalk(
    *args: str, direction: str = ..., recurse: bool = ..., type: str = ...
) -> List[str]: ...
def picture(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    image: Queryable[str] = ...,
    isObscured: bool = ...,
    manage: bool = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    statusBarMessage: str = ...,
    tile: bool = ...,
    useTemplate: str = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[str, Tuple[float, float, float], bool, int, Callable[..., Any]]: ...
def pixelMove(arg0: int = ..., arg1: int = ..., /) -> bool: ...
def planarSrf(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    degree: Queryable[int] = ...,
    keepOutside: bool = ...,
    nodeState: Queryable[int] = ...,
    tolerance: Queryable[float] = ...,
    constructionHistory: bool = ...,
    name: str = ...,
    object: bool = ...,
    polygon: int = ...,
    range: bool = ...,
) -> Union[List[str], bool, int, float]: ...
def plane(
    *,
    length: float = ...,
    name: str = ...,
    position: Tuple[float, float, float] = ...,
    rotation: Tuple[float, float, float] = ...,
    size: float = ...,
    width: float = ...,
) -> str: ...
def play(
    *,
    query: bool = ...,
    forward: bool = ...,
    playSound: bool = ...,
    record: bool = ...,
    sound: Queryable[str] = ...,
    state: bool = ...,
    wait: bool = ...,
) -> Union[bool, str]: ...
def playbackOptions(
    *,
    edit: bool = ...,
    query: bool = ...,
    animationEndTime: Queryable[int] = ...,
    animationStartTime: Queryable[int] = ...,
    blockingAnim: bool = ...,
    by: Queryable[float] = ...,
    framesPerSecond: bool = ...,
    loop: Queryable[str] = ...,
    maxPlaybackSpeed: Queryable[float] = ...,
    maxTime: Queryable[int] = ...,
    minTime: Queryable[int] = ...,
    playbackSpeed: Queryable[float] = ...,
    selectionEndTime: Queryable[int] = ...,
    selectionStartTime: Queryable[int] = ...,
    selectionVisible: bool = ...,
    stepKeyLoop: bool = ...,
    stepLoop: bool = ...,
    view: Queryable[str] = ...,
) -> Union[str, int, bool, float]: ...
def playblast(
    *,
    activeEditor: bool = ...,
    cameraSetup: Multiuse[Tuple[str, str]] = ...,
    clearCache: bool = ...,
    codecOptions: bool = ...,
    combineSound: bool = ...,
    completeFilename: str = ...,
    compression: str = ...,
    editorPanelName: str = ...,
    endTime: int = ...,
    exposure: float = ...,
    filename: str = ...,
    forceOverwrite: bool = ...,
    format: str = ...,
    frame: Multiuse[int] = ...,
    framePadding: int = ...,
    gamma: float = ...,
    height: int = ...,
    indexFromZero: bool = ...,
    offScreen: bool = ...,
    offScreenViewportUpdate: bool = ...,
    options: bool = ...,
    partialSave: bool = ...,
    percent: int = ...,
    quality: int = ...,
    rawFrameNumbers: bool = ...,
    replaceAudioOnly: bool = ...,
    replaceEndTime: int = ...,
    replaceFilename: str = ...,
    replaceStartTime: int = ...,
    sequenceTime: bool = ...,
    showOrnaments: bool = ...,
    sound: str = ...,
    startTime: int = ...,
    throwOnError: bool = ...,
    useTraxSounds: bool = ...,
    viewer: bool = ...,
    width: int = ...,
    widthHeight: Tuple[int, int] = ...,
) -> str: ...
def pluginDisplayFilter(
    arg0: str = ...,
    /,
    *,
    query: bool = ...,
    classification: Queryable[str] = ...,
    deregister: bool = ...,
    exists: bool = ...,
    label: Queryable[str] = ...,
    listFilters: bool = ...,
    register: bool = ...,
) -> Union[str, bool]: ...
def pluginInfo(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    activeFile: bool = ...,
    allEvaluators: bool = ...,
    animCurveInterp: Queryable[str] = ...,
    apiVersion: bool = ...,
    autoload: bool = ...,
    cacheFormat: bool = ...,
    changedCommand: Callable[..., Any] = ...,
    command: Queryable[Multiuse[str]] = ...,
    constraintCommand: bool = ...,
    controlCommand: bool = ...,
    data: Queryable[Multiuse[Tuple[str, str]]] = ...,
    dependNode: Queryable[Multiuse[bool]] = ...,
    dependNodeByType: Queryable[str] = ...,
    dependNodeId: Queryable[str] = ...,
    device: bool = ...,
    dragAndDropBehavior: bool = ...,
    evaluator: bool = ...,
    iksolver: bool = ...,
    listPlugins: bool = ...,
    listPluginsPath: bool = ...,
    loadPluginPrefs: bool = ...,
    loaded: bool = ...,
    modelEditorCommand: bool = ...,
    name: Queryable[str] = ...,
    path: Queryable[str] = ...,
    pluginForNodeType: Queryable[str] = ...,
    pluginsInUse: bool = ...,
    referenceTranslators: bool = ...,
    registered: bool = ...,
    remove: bool = ...,
    renderer: bool = ...,
    savePluginPrefs: bool = ...,
    serviceDescriptions: bool = ...,
    settings: bool = ...,
    tool: Queryable[Multiuse[str]] = ...,
    translator: bool = ...,
    unloadOk: bool = ...,
    userNamed: bool = ...,
    vendor: Queryable[str] = ...,
    version: bool = ...,
    writeRequires: bool = ...,
) -> Union[
    Any, bool, str, Multiuse[str], Multiuse[Tuple[str, str]], Multiuse[bool]
]: ...
def pointConstraint(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    layer: str = ...,
    maintainOffset: bool = ...,
    name: Queryable[str] = ...,
    offset: Queryable[Tuple[float, float, float]] = ...,
    remove: bool = ...,
    skip: Multiuse[str] = ...,
    targetList: bool = ...,
    weight: Queryable[float] = ...,
    weightAliasList: bool = ...,
) -> Union[List[str], str, Tuple[float, float, float], bool, float]: ...
def pointCurveConstraint(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    nodeState: Queryable[int] = ...,
    pointConstraintUVW: Queryable[Tuple[float, float, float]] = ...,
    pointWeight: Queryable[float] = ...,
    position: Tuple[float, float, float] = ...,
    weight: float = ...,
    constructionHistory: bool = ...,
    name: str = ...,
    object: bool = ...,
    replaceOriginal: bool = ...,
) -> Union[List[str], bool, int, Tuple[float, float, float], float]: ...
def pointLight(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    decayRate: Queryable[int] = ...,
    discRadius: Queryable[float] = ...,
    exclusive: bool = ...,
    intensity: Queryable[float] = ...,
    name: Queryable[str] = ...,
    position: Queryable[Tuple[float, float, float]] = ...,
    rgb: Queryable[Tuple[float, float, float]] = ...,
    rotation: Queryable[Tuple[float, float, float]] = ...,
    shadowColor: Queryable[Tuple[float, float, float]] = ...,
    shadowDither: Queryable[float] = ...,
    shadowSamples: Queryable[int] = ...,
    softShadow: bool = ...,
    useRayTraceShadows: bool = ...,
) -> Union[str, int, float, bool, Tuple[float, float, float]]: ...
def pointOnCurve(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    curvatureCenter: bool = ...,
    curvatureRadius: bool = ...,
    nodeState: Queryable[int] = ...,
    normal: bool = ...,
    normalizedNormal: bool = ...,
    normalizedTangent: bool = ...,
    parameter: Queryable[float] = ...,
    position: bool = ...,
    tangent: bool = ...,
    turnOnPercentage: bool = ...,
) -> Union[Tuple[float, float, float], float, str, bool, int]: ...
def pointOnPolyConstraint(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    layer: str = ...,
    maintainOffset: bool = ...,
    name: Queryable[str] = ...,
    offset: Queryable[Tuple[float, float, float]] = ...,
    remove: bool = ...,
    skip: Multiuse[str] = ...,
    targetList: bool = ...,
    weight: Queryable[float] = ...,
    weightAliasList: bool = ...,
) -> Union[List[str], str, Tuple[float, float, float], bool, float]: ...
def pointOnSurface(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    nodeState: Queryable[int] = ...,
    normal: bool = ...,
    normalizedNormal: bool = ...,
    normalizedTangentU: bool = ...,
    normalizedTangentV: bool = ...,
    parameterU: Queryable[float] = ...,
    parameterV: Queryable[float] = ...,
    position: bool = ...,
    tangentU: bool = ...,
    tangentV: bool = ...,
    turnOnPercentage: bool = ...,
) -> Union[Tuple[float, float, float], str, bool, int, float]: ...
def pointPosition(
    arg0: str = ..., /, *, local: bool = ..., world: bool = ...
) -> List[float]: ...
def poleVectorConstraint(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    layer: str = ...,
    name: Queryable[str] = ...,
    remove: bool = ...,
    targetList: bool = ...,
    weight: Queryable[float] = ...,
    weightAliasList: bool = ...,
) -> Union[List[str], str, bool, float]: ...
def polyAppend(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    append: Multiuse[Union[Tuple[()], Tuple[float, float, float]]] = ...,
    constructionHistory: bool = ...,
    edge: Multiuse[int] = ...,
    hole: Multiuse[bool] = ...,
    name: str = ...,
    point: Multiuse[Tuple[float, float, float]] = ...,
    subdivision: Queryable[int] = ...,
    texture: Queryable[int] = ...,
) -> Union[str, bool, int]: ...
def polyAppendFacetCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    append: bool = ...,
    exists: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    isRotateAvailable: bool = ...,
    maximumNumberOfPoints: Queryable[int] = ...,
    planarConstraint: bool = ...,
    rotate: Queryable[float] = ...,
    subdivision: Queryable[int] = ...,
    texture: Queryable[int] = ...,
) -> Union[bool, str, int, float]: ...
def polyAppendVertex(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    append: Multiuse[Union[Tuple[()], Tuple[float, float, float]]] = ...,
    constructionHistory: bool = ...,
    hole: Multiuse[bool] = ...,
    name: str = ...,
    point: Multiuse[Tuple[float, float, float]] = ...,
    texture: Queryable[int] = ...,
    vertex: Multiuse[int] = ...,
) -> Union[str, bool, int]: ...
def polyAutoProjection(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    createNewMap: bool = ...,
    insertBeforeDeformers: bool = ...,
    layout: Queryable[int] = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
    optimize: Queryable[int] = ...,
    percentageSpace: Queryable[float] = ...,
    planes: Queryable[int] = ...,
    projectBothDirections: bool = ...,
    scaleMode: Queryable[int] = ...,
    skipIntersect: bool = ...,
    uvSetName: str = ...,
    worldSpace: bool = ...,
    layoutMethod: Queryable[int] = ...,
    pivot: Queryable[Tuple[float, float, float]] = ...,
    pivotX: Queryable[float] = ...,
    pivotY: Queryable[float] = ...,
    pivotZ: Queryable[float] = ...,
    rotate: Queryable[Tuple[float, float, float]] = ...,
    rotateX: Queryable[float] = ...,
    rotateY: Queryable[float] = ...,
    rotateZ: Queryable[float] = ...,
    scale: Queryable[Tuple[float, float, float]] = ...,
    scaleX: Queryable[float] = ...,
    scaleY: Queryable[float] = ...,
    scaleZ: Queryable[float] = ...,
    translate: Queryable[Tuple[float, float, float]] = ...,
    translateX: Queryable[float] = ...,
    translateY: Queryable[float] = ...,
    translateZ: Queryable[float] = ...,
) -> Union[str, bool, int, float, Tuple[float, float, float]]: ...
def polyAverageNormal(
    *args: str,
    allowZeroNormal: bool = ...,
    distance: float = ...,
    postnormalize: bool = ...,
    prenormalize: bool = ...,
    replaceNormalXYZ: Tuple[float, float, float] = ...,
) -> str: ...
def polyAverageVertex(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    iterations: Queryable[int] = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
    worldSpace: bool = ...,
) -> Union[str, bool, int]: ...
def polyAxis(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    arrowType: Queryable[int] = ...,
    axis: Queryable[Tuple[float, float, float]] = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    frameType: Queryable[int] = ...,
    lengthX: Queryable[float] = ...,
    lengthY: Queryable[float] = ...,
    lengthZ: Queryable[float] = ...,
    materialTemplate: str = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
    object: bool = ...,
    radius: Queryable[float] = ...,
    rightHanded: bool = ...,
    scale: Queryable[float] = ...,
    subdivisionsAxis: Queryable[int] = ...,
) -> Union[List[str], int, Tuple[float, float, float], bool, float]: ...
def polyBevel(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    angleTolerance: Queryable[float] = ...,
    autoFit: bool = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    mergeVertexTolerance: Queryable[float] = ...,
    mergeVertices: bool = ...,
    miteringAngle: Queryable[float] = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
    offset: Queryable[float] = ...,
    offsetAsFraction: bool = ...,
    roundness: Queryable[float] = ...,
    segments: Queryable[int] = ...,
    smoothingAngle: Queryable[float] = ...,
    subdivideNgons: bool = ...,
    useLegacyBevelAlgorithm: bool = ...,
    uvAssignment: Queryable[int] = ...,
    worldSpace: bool = ...,
) -> Union[str, float, bool, int]: ...
def polyBevel3(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    angleTolerance: Queryable[float] = ...,
    autoFit: bool = ...,
    caching: bool = ...,
    chamfer: bool = ...,
    constructionHistory: bool = ...,
    depth: Queryable[float] = ...,
    fillNgons: bool = ...,
    mergeVertexTolerance: Queryable[float] = ...,
    mergeVertices: bool = ...,
    miterAlong: Queryable[int] = ...,
    mitering: Queryable[int] = ...,
    miteringAngle: Queryable[float] = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
    offset: Queryable[float] = ...,
    offsetAsFraction: bool = ...,
    roundness: Queryable[float] = ...,
    segments: Queryable[int] = ...,
    smoothingAngle: Queryable[float] = ...,
    uvAssignment: Queryable[int] = ...,
    worldSpace: bool = ...,
) -> Union[str, float, bool, int]: ...
def polyBlendColor(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    baseColorName: Queryable[str] = ...,
    blendFunc: Queryable[int] = ...,
    blendWeightA: Queryable[float] = ...,
    blendWeightB: Queryable[float] = ...,
    blendWeightC: Queryable[float] = ...,
    blendWeightD: Queryable[float] = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    dstColorName: Queryable[str] = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
    srcColorName: Queryable[str] = ...,
) -> Union[str, int, float, bool]: ...
def polyBlindData(
    *args: str,
    edit: bool = ...,
    associationType: str = ...,
    binaryData: Multiuse[str] = ...,
    booleanData: Multiuse[bool] = ...,
    delete: bool = ...,
    doubleData: Multiuse[float] = ...,
    int64Data: Multiuse[int] = ...,
    intData: Multiuse[int] = ...,
    longDataName: Multiuse[str] = ...,
    rescan: bool = ...,
    reset: bool = ...,
    shape: bool = ...,
    shortDataName: Multiuse[str] = ...,
    stringData: Multiuse[str] = ...,
    typeId: int = ...,
) -> str: ...
def polyBoolOp(
    arg0: str = ...,
    arg1: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    faceAreaThreshold: Queryable[float] = ...,
    operation: Queryable[int] = ...,
    preserveColor: bool = ...,
    useThresholds: bool = ...,
    vertexDistanceThreshold: Queryable[float] = ...,
    caching: bool = ...,
    mergeUVSets: Queryable[int] = ...,
    nodeState: Queryable[int] = ...,
) -> Union[List[str], float, int, bool]: ...
def polyBridgeEdge(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    bridgeOffset: Queryable[int] = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    curveType: Queryable[int] = ...,
    divisions: Queryable[int] = ...,
    inputCurve: str = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
    smoothingAngle: Queryable[float] = ...,
    startVert1: Queryable[int] = ...,
    startVert2: Queryable[int] = ...,
    taper: Queryable[float] = ...,
    taperCurve_FloatValue: Queryable[float] = ...,
    taperCurve_Interp: Queryable[int] = ...,
    taperCurve_Position: Queryable[float] = ...,
    twist: Queryable[float] = ...,
    worldSpace: bool = ...,
) -> Union[str, int, bool, float]: ...
def polyCBoolOp(
    arg0: str = ...,
    /,
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    classification: Queryable[int] = ...,
    faceAreaThreshold: Queryable[float] = ...,
    operation: Queryable[int] = ...,
    preserveColor: bool = ...,
    useCarveBooleans: bool = ...,
    useThresholds: bool = ...,
    vertexDistanceThreshold: Queryable[float] = ...,
    caching: bool = ...,
    mergeUVSets: Queryable[int] = ...,
    nodeState: Queryable[int] = ...,
    tagIntersection: bool = ...,
) -> Union[List[str], int, float, bool]: ...
def polyCacheMonitor(*, cacheValue: bool = ..., nodeName: str = ...) -> bool: ...
def polyCanBridgeEdge(*args: str) -> bool: ...
def polyCheck(
    *args: str,
    edge: bool = ...,
    face: bool = ...,
    faceOffset: bool = ...,
    openFile: str = ...,
) -> int: ...
def polyChipOff(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    attraction: Queryable[float] = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    duplicate: bool = ...,
    gain: Queryable[Multiuse[float]] = ...,
    gravity: Queryable[Tuple[float, float, float]] = ...,
    gravityX: Queryable[float] = ...,
    gravityY: Queryable[float] = ...,
    gravityZ: Queryable[float] = ...,
    keepFacesTogether: bool = ...,
    keepFacetTogether: bool = ...,
    localCenter: Queryable[int] = ...,
    localDirection: Queryable[Tuple[float, float, float]] = ...,
    localDirectionX: Queryable[float] = ...,
    localDirectionY: Queryable[float] = ...,
    localDirectionZ: Queryable[float] = ...,
    localRotate: Queryable[Tuple[float, float, float]] = ...,
    localRotateX: Queryable[float] = ...,
    localRotateY: Queryable[float] = ...,
    localRotateZ: Queryable[float] = ...,
    localScale: Queryable[Tuple[float, float, float]] = ...,
    localScaleX: Queryable[float] = ...,
    localScaleY: Queryable[float] = ...,
    localScaleZ: Queryable[float] = ...,
    localTranslate: Queryable[Tuple[float, float, float]] = ...,
    localTranslateX: Queryable[float] = ...,
    localTranslateY: Queryable[float] = ...,
    localTranslateZ: Queryable[float] = ...,
    magnX: Queryable[float] = ...,
    magnY: Queryable[float] = ...,
    magnZ: Queryable[float] = ...,
    magnet: Queryable[Tuple[float, float, float]] = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
    offset: Queryable[float] = ...,
    pivot: Queryable[Tuple[float, float, float]] = ...,
    pivotX: Queryable[float] = ...,
    pivotY: Queryable[float] = ...,
    pivotZ: Queryable[float] = ...,
    random: Queryable[float] = ...,
    scale: Queryable[Tuple[float, float, float]] = ...,
    scaleX: Queryable[float] = ...,
    scaleY: Queryable[float] = ...,
    scaleZ: Queryable[float] = ...,
    translate: Queryable[Tuple[float, float, float]] = ...,
    translateX: Queryable[float] = ...,
    translateY: Queryable[float] = ...,
    translateZ: Queryable[float] = ...,
    weight: Queryable[float] = ...,
    worldSpace: bool = ...,
) -> Union[str, float, bool, Multiuse[float], Tuple[float, float, float], int]: ...
def polyCircularize(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    alignment: Queryable[int] = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    createCurve: bool = ...,
    evenlyDistribute: bool = ...,
    inputCurve: str = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
    normalOrientation: Queryable[int] = ...,
    radialOffset: Queryable[float] = ...,
    smoothingAngle: Queryable[float] = ...,
    worldSpace: bool = ...,
) -> Union[str, int, bool, float]: ...
def polyCircularizeEdge(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    alignment: Queryable[int] = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    createCurve: bool = ...,
    evenlyDistribute: bool = ...,
    inputCurve: str = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
    normalOrientation: Queryable[int] = ...,
    radialOffset: Queryable[float] = ...,
    smoothingAngle: Queryable[float] = ...,
    worldSpace: bool = ...,
) -> Union[str, int, bool, float]: ...
def polyCircularizeFace(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    alignment: Queryable[int] = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    createCurve: bool = ...,
    evenlyDistribute: bool = ...,
    inputCurve: str = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
    normalOrientation: Queryable[int] = ...,
    radialOffset: Queryable[float] = ...,
    smoothingAngle: Queryable[float] = ...,
    worldSpace: bool = ...,
) -> Union[str, int, bool, float]: ...
def polyClean(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    cleanEdges: bool = ...,
    cleanPartialUVMapping: bool = ...,
    cleanUVs: bool = ...,
    cleanVertices: bool = ...,
    constructionHistory: bool = ...,
    frozen: bool = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
) -> Union[str, bool, int]: ...
def polyClipboard(
    *args: str,
    clear: bool = ...,
    color: bool = ...,
    copy: bool = ...,
    paste: bool = ...,
    shader: bool = ...,
    uvCoordinates: bool = ...,
) -> bool: ...
def polyCloseBorder(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
) -> Union[str, bool, int]: ...
def polyCollapseEdge(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
) -> Union[str, bool, int]: ...
def polyCollapseFacet(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    areaThreshold: Queryable[float] = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
    useAreaThreshold: bool = ...,
) -> Union[str, float, bool, int]: ...
def polyCollapseTweaks(
    arg0: str = ..., /, *, query: bool = ..., hasVertexTweaks: bool = ...
) -> bool: ...
def polyColorBlindData(
    *args: str,
    aboveMaxColorBlue: Multiuse[float] = ...,
    aboveMaxColorGreen: Multiuse[float] = ...,
    aboveMaxColorRed: Multiuse[float] = ...,
    attrName: Multiuse[str] = ...,
    belowMinColorBlue: Multiuse[float] = ...,
    belowMinColorGreen: Multiuse[float] = ...,
    belowMinColorRed: Multiuse[float] = ...,
    clashColorBlue: float = ...,
    clashColorGreen: float = ...,
    clashColorRed: float = ...,
    colorBlue: Multiuse[float] = ...,
    colorGreen: Multiuse[float] = ...,
    colorRed: Multiuse[float] = ...,
    dataType: Multiuse[str] = ...,
    enableFalseColor: bool = ...,
    maxColorBlue: Multiuse[float] = ...,
    maxColorGreen: Multiuse[float] = ...,
    maxColorRed: Multiuse[float] = ...,
    maxValue: Multiuse[float] = ...,
    minColorBlue: Multiuse[float] = ...,
    minColorGreen: Multiuse[float] = ...,
    minColorRed: Multiuse[float] = ...,
    minValue: Multiuse[float] = ...,
    mode: Multiuse[int] = ...,
    noColorBlue: float = ...,
    noColorGreen: float = ...,
    noColorRed: float = ...,
    numIdTypes: Multiuse[int] = ...,
    queryMode: bool = ...,
    typeId: Multiuse[int] = ...,
    useMax: Multiuse[bool] = ...,
    useMin: Multiuse[bool] = ...,
    value: Multiuse[str] = ...,
) -> List[str]: ...
def polyColorDel(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    colorSetName: Queryable[str] = ...,
    constructionHistory: bool = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
) -> Union[str, bool, int]: ...
def polyColorMod(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    alphaScale_FloatValue: Queryable[float] = ...,
    alphaScale_Interp: Queryable[int] = ...,
    alphaScale_Position: Queryable[float] = ...,
    baseColorName: str = ...,
    blueScale_FloatValue: Queryable[float] = ...,
    blueScale_Interp: Queryable[int] = ...,
    blueScale_Position: Queryable[float] = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    greenScale_FloatValue: Queryable[float] = ...,
    greenScale_Interp: Queryable[int] = ...,
    greenScale_Position: Queryable[float] = ...,
    huev: Queryable[float] = ...,
    intensityScale_FloatValue: Queryable[float] = ...,
    intensityScale_Interp: Queryable[int] = ...,
    intensityScale_Position: Queryable[float] = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
    redScale_FloatValue: Queryable[float] = ...,
    redScale_Interp: Queryable[int] = ...,
    redScale_Position: Queryable[float] = ...,
    satv: Queryable[float] = ...,
    value: Queryable[float] = ...,
) -> Union[str, float, int, bool]: ...
def polyColorPerVertex(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    alpha: Queryable[float] = ...,
    clamped: bool = ...,
    colorB: Queryable[float] = ...,
    colorDisplayOption: bool = ...,
    colorG: Queryable[float] = ...,
    colorR: Queryable[float] = ...,
    colorRGB: Queryable[Tuple[float, float, float]] = ...,
    notUndoable: bool = ...,
    relative: bool = ...,
    remove: bool = ...,
    representation: Queryable[int] = ...,
) -> Union[bool, float, Tuple[float, float, float], int]: ...
def polyColorSet(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    allColorSets: bool = ...,
    clamped: bool = ...,
    colorSet: Queryable[str] = ...,
    copy: bool = ...,
    create: bool = ...,
    currentColorSet: bool = ...,
    currentPerInstanceSet: bool = ...,
    delete: bool = ...,
    newColorSet: Queryable[str] = ...,
    perInstance: bool = ...,
    rename: bool = ...,
    representation: Queryable[str] = ...,
    shareInstances: bool = ...,
    unshared: bool = ...,
) -> Union[bool, str]: ...
def polyColorSetCmdWrapper() -> None: ...
def polyCompare(
    *args: str,
    colorSetIndices: bool = ...,
    colorSets: bool = ...,
    edges: bool = ...,
    faceDesc: bool = ...,
    userNormals: bool = ...,
    uvSetIndices: bool = ...,
    uvSets: bool = ...,
    vertices: bool = ...,
) -> int: ...
def polyCone(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    axis: Queryable[Tuple[float, float, float]] = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    createUVs: Queryable[int] = ...,
    height: Queryable[float] = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
    object: bool = ...,
    radius: Queryable[float] = ...,
    roundCap: bool = ...,
    subdivisionsAxis: Queryable[int] = ...,
    subdivisionsCap: Queryable[int] = ...,
    subdivisionsHeight: Queryable[int] = ...,
    subdivisionsX: Queryable[int] = ...,
    subdivisionsY: Queryable[int] = ...,
    subdivisionsZ: Queryable[int] = ...,
    texture: bool = ...,
) -> Union[List[str], Tuple[float, float, float], bool, int, float]: ...
def polyConnectComponents(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    adjustEdgeFlow: Queryable[float] = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    insertWithEdgeFlow: bool = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
) -> Union[str, float, bool, int]: ...
def polyContourProjection(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    createNewMap: bool = ...,
    flipRails: bool = ...,
    insertBeforeDeformers: bool = ...,
    method: Queryable[int] = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
    offset0: Queryable[float] = ...,
    offset1: Queryable[float] = ...,
    offset2: Queryable[float] = ...,
    offset3: Queryable[float] = ...,
    reduceShear: Queryable[float] = ...,
    smoothness0: Queryable[float] = ...,
    smoothness1: Queryable[float] = ...,
    smoothness2: Queryable[float] = ...,
    smoothness3: Queryable[float] = ...,
    userDefinedCorners: bool = ...,
    uvSetName: str = ...,
    worldSpace: bool = ...,
) -> Union[str, bool, int, float]: ...
def polyCopyUV(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    createNewMap: bool = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
    uvSetName: str = ...,
    uvSetNameInput: Queryable[str] = ...,
    worldSpace: bool = ...,
) -> Union[str, bool, int]: ...
def polyCrease(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    createHistory: bool = ...,
    operation: Queryable[int] = ...,
    relativeValue: Queryable[float] = ...,
    value: Queryable[Multiuse[float]] = ...,
    vertexValue: Queryable[Multiuse[float]] = ...,
) -> Union[bool, int, float, Multiuse[float]]: ...
def polyCreaseCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    createSet: str = ...,
    exists: bool = ...,
    extendSelection: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    relative: bool = ...,
) -> Union[bool, str]: ...
def polyCreateFacet(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    constructionHistory: bool = ...,
    hole: Multiuse[bool] = ...,
    name: str = ...,
    point: Multiuse[Union[Tuple[()], Tuple[float, float, float]]] = ...,
    subdivision: Queryable[int] = ...,
    texture: Queryable[int] = ...,
) -> Union[List[str], bool, int]: ...
def polyCreateFacetCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    append: bool = ...,
    exists: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    maximumNumberOfPoints: Queryable[int] = ...,
    planarConstraint: bool = ...,
    subdivision: Queryable[int] = ...,
    texture: Queryable[int] = ...,
) -> Union[bool, str, int]: ...
def polyCube(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    axis: Queryable[Tuple[float, float, float]] = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    createUVs: Queryable[int] = ...,
    depth: Queryable[float] = ...,
    height: Queryable[float] = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
    object: bool = ...,
    subdivisionsDepth: Queryable[int] = ...,
    subdivisionsHeight: Queryable[int] = ...,
    subdivisionsWidth: Queryable[int] = ...,
    subdivisionsX: Queryable[int] = ...,
    subdivisionsY: Queryable[int] = ...,
    subdivisionsZ: Queryable[int] = ...,
    texture: Queryable[int] = ...,
    width: Queryable[float] = ...,
) -> Union[List[str], Tuple[float, float, float], bool, int, float]: ...
def polyCut(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    cutPlaneCenter: Queryable[Tuple[float, float, float]] = ...,
    cutPlaneCenterX: Queryable[float] = ...,
    cutPlaneCenterY: Queryable[float] = ...,
    cutPlaneCenterZ: Queryable[float] = ...,
    cutPlaneHeight: Queryable[float] = ...,
    cutPlaneRotate: Queryable[Tuple[float, float, float]] = ...,
    cutPlaneRotateX: Queryable[float] = ...,
    cutPlaneRotateY: Queryable[float] = ...,
    cutPlaneRotateZ: Queryable[float] = ...,
    cutPlaneSize: Queryable[Tuple[float, float]] = ...,
    cutPlaneWidth: Queryable[float] = ...,
    cuttingDirection: str = ...,
    deleteFaces: bool = ...,
    extractFaces: bool = ...,
    extractOffset: Queryable[Tuple[float, float, float]] = ...,
    extractOffsetX: Queryable[float] = ...,
    extractOffsetY: Queryable[float] = ...,
    extractOffsetZ: Queryable[float] = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
    onObject: bool = ...,
    worldSpace: bool = ...,
) -> Union[str, bool, Tuple[float, float, float], float, Tuple[float, float], int]: ...
def polyCutCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    deleteFaces: bool = ...,
    exists: bool = ...,
    extractFaces: bool = ...,
    extractOffset: Queryable[Tuple[float, float, float]] = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
) -> Union[bool, Tuple[float, float, float], str]: ...
def polyCutUVCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    loopSpeed: Queryable[int] = ...,
    mapBordersColor: Queryable[Tuple[float, float, float]] = ...,
    showCheckerMap: bool = ...,
    showTextureBorders: bool = ...,
    showUVShellColoring: bool = ...,
    steadyStroke: bool = ...,
    steadyStrokeDistance: Queryable[float] = ...,
    symmetry: Queryable[int] = ...,
) -> Union[bool, float, int, Tuple[float, float, float]]: ...
def polyCylinder(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    axis: Queryable[Tuple[float, float, float]] = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    createUVs: Queryable[int] = ...,
    height: Queryable[float] = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
    object: bool = ...,
    radius: Queryable[float] = ...,
    roundCap: bool = ...,
    subdivisionsAxis: Queryable[int] = ...,
    subdivisionsCaps: Queryable[int] = ...,
    subdivisionsHeight: Queryable[int] = ...,
    subdivisionsX: Queryable[int] = ...,
    subdivisionsY: Queryable[int] = ...,
    subdivisionsZ: Queryable[int] = ...,
    texture: Queryable[int] = ...,
) -> Union[List[str], Tuple[float, float, float], bool, int, float]: ...
def polyCylindricalProjection(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    createNewMap: bool = ...,
    imageCenter: Queryable[Tuple[float, float]] = ...,
    imageCenterX: Queryable[float] = ...,
    imageCenterY: Queryable[float] = ...,
    imageScale: Queryable[Tuple[float, float]] = ...,
    imageScaleU: Queryable[float] = ...,
    imageScaleV: Queryable[float] = ...,
    insertBeforeDeformers: bool = ...,
    keepImageRatio: bool = ...,
    mapDirection: str = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
    perInstance: bool = ...,
    projectionCenter: Queryable[Tuple[float, float, float]] = ...,
    projectionCenterX: Queryable[float] = ...,
    projectionCenterY: Queryable[float] = ...,
    projectionCenterZ: Queryable[float] = ...,
    projectionHeight: Queryable[float] = ...,
    projectionHorizontalSweep: Queryable[float] = ...,
    projectionScale: Queryable[Tuple[float, float]] = ...,
    projectionScaleU: Queryable[float] = ...,
    projectionScaleV: Queryable[float] = ...,
    radius: Queryable[float] = ...,
    rotationAngle: Queryable[float] = ...,
    seamCorrect: bool = ...,
    smartFit: bool = ...,
    worldSpace: bool = ...,
) -> Union[str, bool, Tuple[float, float], float, int, Tuple[float, float, float]]: ...
def polyDelEdge(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    cleanVertices: bool = ...,
    constructionHistory: bool = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
) -> Union[str, bool, int]: ...
def polyDelFacet(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
) -> Union[str, bool, int]: ...
def polyDelVertex(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
) -> Union[str, bool, int]: ...
def polyDuplicateAndConnect(
    *args: str, removeOriginalFromShaders: bool = ..., renameChildren: bool = ...
) -> bool: ...
def polyDuplicateEdge(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
    adjustEdgeFlow: Queryable[float] = ...,
    deleteEdge: bool = ...,
    endVertexOffset: Queryable[float] = ...,
    insertWithEdgeFlow: bool = ...,
    offset: float = ...,
    smoothingAngle: Queryable[float] = ...,
    splitType: Queryable[int] = ...,
    startVertexOffset: Queryable[float] = ...,
) -> Union[str, bool, int, float]: ...
def polyEditEdgeFlow(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    adjustEdgeFlow: float = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    edgeFlow: bool = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
) -> Union[str, bool, int]: ...
def polyEditUV(
    *args: str,
    query: bool = ...,
    angle: Queryable[float] = ...,
    pivotU: Queryable[float] = ...,
    pivotV: Queryable[float] = ...,
    relative: bool = ...,
    rotateRatio: Queryable[float] = ...,
    rotation: bool = ...,
    scale: bool = ...,
    scaleU: Queryable[float] = ...,
    scaleV: Queryable[float] = ...,
    uValue: Queryable[float] = ...,
    uvSetName: Queryable[str] = ...,
    vValue: Queryable[float] = ...,
) -> Union[bool, float, str]: ...
def polyEditUVShell(
    *args: str,
    query: bool = ...,
    angle: Queryable[float] = ...,
    pivotU: Queryable[float] = ...,
    pivotV: Queryable[float] = ...,
    relative: bool = ...,
    rotateRatio: Queryable[float] = ...,
    rotation: bool = ...,
    scale: bool = ...,
    scaleU: Queryable[float] = ...,
    scaleV: Queryable[float] = ...,
    uValue: Queryable[float] = ...,
    uvSetName: Queryable[str] = ...,
    vValue: Queryable[float] = ...,
) -> Union[bool, float, str]: ...
def polyEvaluate(
    *args: str,
    accurateEvaluation: bool = ...,
    activeShells: bool = ...,
    activeUVShells: bool = ...,
    area: bool = ...,
    boundingBox: bool = ...,
    boundingBox2d: bool = ...,
    boundingBoxComponent: bool = ...,
    boundingBoxComponent2d: bool = ...,
    displayStats: bool = ...,
    edge: bool = ...,
    edgeComponent: bool = ...,
    face: bool = ...,
    faceArea: bool = ...,
    faceComponent: bool = ...,
    format: bool = ...,
    shell: bool = ...,
    triangle: bool = ...,
    triangleComponent: bool = ...,
    uvArea: bool = ...,
    uvComponent: bool = ...,
    uvEdgePairs: bool = ...,
    uvFaceArea: bool = ...,
    uvSetName: str = ...,
    uvShell: bool = ...,
    uvShellIds: bool = ...,
    uvcoord: bool = ...,
    uvsInShell: int = ...,
    vertex: bool = ...,
    vertexComponent: bool = ...,
    worldArea: bool = ...,
    worldFaceArea: bool = ...,
) -> Any: ...
def polyExtrudeEdge(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    createCurve: bool = ...,
    divisions: Queryable[int] = ...,
    gain: Queryable[Multiuse[float]] = ...,
    inputCurve: str = ...,
    keepFacesTogether: bool = ...,
    localCenter: Queryable[int] = ...,
    localDirection: Queryable[Tuple[float, float, float]] = ...,
    localDirectionX: Queryable[float] = ...,
    localDirectionY: Queryable[float] = ...,
    localDirectionZ: Queryable[float] = ...,
    localRotate: Queryable[Tuple[float, float, float]] = ...,
    localRotateX: Queryable[float] = ...,
    localRotateY: Queryable[float] = ...,
    localRotateZ: Queryable[float] = ...,
    localScale: Queryable[Tuple[float, float, float]] = ...,
    localScaleX: Queryable[float] = ...,
    localScaleY: Queryable[float] = ...,
    localScaleZ: Queryable[float] = ...,
    localTranslate: Queryable[Tuple[float, float, float]] = ...,
    localTranslateX: Queryable[float] = ...,
    localTranslateY: Queryable[float] = ...,
    localTranslateZ: Queryable[float] = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
    offset: Queryable[float] = ...,
    pivot: Queryable[Tuple[float, float, float]] = ...,
    pivotX: Queryable[float] = ...,
    pivotY: Queryable[float] = ...,
    pivotZ: Queryable[float] = ...,
    random: Queryable[float] = ...,
    rotate: Queryable[Tuple[float, float, float]] = ...,
    rotateX: Queryable[float] = ...,
    rotateY: Queryable[float] = ...,
    rotateZ: Queryable[float] = ...,
    scale: Queryable[Tuple[float, float, float]] = ...,
    scaleX: Queryable[float] = ...,
    scaleY: Queryable[float] = ...,
    scaleZ: Queryable[float] = ...,
    smoothingAngle: Queryable[float] = ...,
    taper: Queryable[float] = ...,
    taperCurve_FloatValue: Queryable[float] = ...,
    taperCurve_Interp: Queryable[int] = ...,
    taperCurve_Position: Queryable[float] = ...,
    thickness: Queryable[float] = ...,
    translate: Queryable[Tuple[float, float, float]] = ...,
    translateX: Queryable[float] = ...,
    translateY: Queryable[float] = ...,
    translateZ: Queryable[float] = ...,
    twist: Queryable[float] = ...,
    worldSpace: bool = ...,
) -> Union[str, bool, int, Multiuse[float], Tuple[float, float, float], float]: ...
def polyExtrudeFacet(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    attraction: Queryable[float] = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    createCurve: bool = ...,
    divisions: Queryable[int] = ...,
    gain: Queryable[Multiuse[float]] = ...,
    gravity: Queryable[Tuple[float, float, float]] = ...,
    gravityX: Queryable[float] = ...,
    gravityY: Queryable[float] = ...,
    gravityZ: Queryable[float] = ...,
    inputCurve: str = ...,
    keepFacesTogether: bool = ...,
    keepFacetTogether: bool = ...,
    localCenter: Queryable[int] = ...,
    localDirection: Queryable[Tuple[float, float, float]] = ...,
    localDirectionX: Queryable[float] = ...,
    localDirectionY: Queryable[float] = ...,
    localDirectionZ: Queryable[float] = ...,
    localRotate: Queryable[Tuple[float, float, float]] = ...,
    localRotateX: Queryable[float] = ...,
    localRotateY: Queryable[float] = ...,
    localRotateZ: Queryable[float] = ...,
    localScale: Queryable[Tuple[float, float, float]] = ...,
    localScaleX: Queryable[float] = ...,
    localScaleY: Queryable[float] = ...,
    localScaleZ: Queryable[float] = ...,
    localTranslate: Queryable[Tuple[float, float, float]] = ...,
    localTranslateX: Queryable[float] = ...,
    localTranslateY: Queryable[float] = ...,
    localTranslateZ: Queryable[float] = ...,
    magnX: Queryable[float] = ...,
    magnY: Queryable[float] = ...,
    magnZ: Queryable[float] = ...,
    magnet: Queryable[Tuple[float, float, float]] = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
    offset: Queryable[float] = ...,
    pivot: Queryable[Tuple[float, float, float]] = ...,
    pivotX: Queryable[float] = ...,
    pivotY: Queryable[float] = ...,
    pivotZ: Queryable[float] = ...,
    random: Queryable[float] = ...,
    reverseAllFaces: bool = ...,
    rotate: Queryable[Tuple[float, float, float]] = ...,
    rotateX: Queryable[float] = ...,
    rotateY: Queryable[float] = ...,
    rotateZ: Queryable[float] = ...,
    scale: Queryable[Tuple[float, float, float]] = ...,
    scaleX: Queryable[float] = ...,
    scaleY: Queryable[float] = ...,
    scaleZ: Queryable[float] = ...,
    smoothingAngle: Queryable[float] = ...,
    taper: Queryable[float] = ...,
    taperCurve_FloatValue: Queryable[float] = ...,
    taperCurve_Interp: Queryable[int] = ...,
    taperCurve_Position: Queryable[float] = ...,
    thickness: Queryable[float] = ...,
    translate: Queryable[Tuple[float, float, float]] = ...,
    translateX: Queryable[float] = ...,
    translateY: Queryable[float] = ...,
    translateZ: Queryable[float] = ...,
    twist: Queryable[float] = ...,
    weight: Queryable[float] = ...,
    worldSpace: bool = ...,
) -> Union[str, float, bool, int, Multiuse[float], Tuple[float, float, float]]: ...
def polyExtrudeVertex(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    divisions: Queryable[int] = ...,
    length: Queryable[float] = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
    width: Queryable[float] = ...,
    worldSpace: bool = ...,
) -> Union[str, bool, int, float]: ...
def polyFlipEdge(*args: str) -> bool: ...
def polyFlipUV(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    createNewMap: bool = ...,
    cutUV: bool = ...,
    flipType: Queryable[int] = ...,
    insertBeforeDeformers: bool = ...,
    local: bool = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
    pivotU: Queryable[float] = ...,
    pivotV: Queryable[float] = ...,
    usePivot: bool = ...,
    uvSetName: str = ...,
    worldSpace: bool = ...,
) -> Union[str, bool, int, float]: ...
def polyForceUV(
    *args: str,
    cameraProjection: bool = ...,
    createNewMap: bool = ...,
    flipHorizontal: bool = ...,
    flipVertical: bool = ...,
    g: bool = ...,
    local: bool = ...,
    normalize: str = ...,
    numItems: int = ...,
    preserveAspectRatio: bool = ...,
    unitize: bool = ...,
    unshare: bool = ...,
    uvSetName: str = ...,
) -> bool: ...
def polyGeoSampler(
    *args: str,
    edit: bool = ...,
    alphaBlend: str = ...,
    averageColor: bool = ...,
    clampAlphaMax: float = ...,
    clampAlphaMin: float = ...,
    clampRGBMax: Tuple[float, float, float] = ...,
    clampRGBMin: Tuple[float, float, float] = ...,
    colorBlend: str = ...,
    colorDisplayOption: bool = ...,
    computeShadows: bool = ...,
    displaceGeometry: bool = ...,
    flatShading: bool = ...,
    ignoreDoubleSided: bool = ...,
    lightingOnly: bool = ...,
    reuseShadows: bool = ...,
    sampleByFace: bool = ...,
    scaleFactor: float = ...,
    shareUV: bool = ...,
    useLightShadows: bool = ...,
) -> bool: ...
def polyHelix(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    coils: Queryable[float] = ...,
    constructionHistory: bool = ...,
    createUVs: Queryable[int] = ...,
    direction: Queryable[int] = ...,
    height: Queryable[float] = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
    object: bool = ...,
    radius: Queryable[float] = ...,
    roundCap: bool = ...,
    subdivisionsAxis: Queryable[int] = ...,
    subdivisionsCaps: Queryable[int] = ...,
    subdivisionsCoil: Queryable[int] = ...,
    texture: Queryable[int] = ...,
    useOldInitBehaviour: bool = ...,
    width: Queryable[float] = ...,
) -> Union[List[str], bool, float, int]: ...
def polyHole(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    assignHole: bool = ...,
    createHistory: bool = ...,
) -> bool: ...
def polyInfo(
    *args: str,
    edgeToFace: bool = ...,
    edgeToVertex: bool = ...,
    faceNormals: bool = ...,
    faceToEdge: bool = ...,
    faceToVertex: bool = ...,
    invalidEdges: bool = ...,
    invalidVertices: bool = ...,
    laminaFaces: bool = ...,
    nonManifoldEdges: bool = ...,
    nonManifoldUVEdges: bool = ...,
    nonManifoldUVs: bool = ...,
    nonManifoldVertices: bool = ...,
    vertexToEdge: bool = ...,
    vertexToFace: bool = ...,
) -> str: ...
def polyInstallAction(
    arg0: str = ...,
    /,
    *,
    query: bool = ...,
    commandName: bool = ...,
    convertSelection: bool = ...,
    installConstraint: bool = ...,
    installDisplay: bool = ...,
    keepInstances: bool = ...,
    uninstallConstraint: bool = ...,
    uninstallDisplay: bool = ...,
) -> Union[List[str], bool]: ...
def polyIterOnPoly(*args: Any, **kwargs: Any) -> None: ...
def polyLayoutUV(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    flipReversed: bool = ...,
    layout: Queryable[int] = ...,
    layoutMethod: Queryable[int] = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
    percentageSpace: Queryable[float] = ...,
    rotateForBestFit: Queryable[int] = ...,
    scale: Queryable[int] = ...,
    separate: Queryable[int] = ...,
    uvSetName: str = ...,
    worldSpace: bool = ...,
) -> Union[str, bool, int, float]: ...
def polyListComponentConversion(
    *args: str,
    border: bool = ...,
    fromEdge: bool = ...,
    fromFace: bool = ...,
    fromUV: bool = ...,
    fromVertex: bool = ...,
    fromVertexFace: bool = ...,
    internal: bool = ...,
    toEdge: bool = ...,
    toFace: bool = ...,
    toUV: bool = ...,
    toVertex: bool = ...,
    toVertexFace: bool = ...,
    uvShell: bool = ...,
    vertexFaceAllEdges: bool = ...,
) -> List[str]: ...
def polyMapCut(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    moveratio: Queryable[float] = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
) -> Union[str, bool, float, int]: ...
def polyMapDel(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
) -> Union[str, bool, int]: ...
def polyMapSew(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
) -> Union[str, bool, int]: ...
def polyMapSewMove(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    limitPieceSize: bool = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
    numberFaces: Queryable[int] = ...,
    uvSetName: str = ...,
    worldSpace: bool = ...,
) -> Union[str, bool, int]: ...
def polyMergeEdge(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    firstEdge: Queryable[int] = ...,
    mergeMode: Queryable[int] = ...,
    mergeTexture: bool = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
    secondEdge: Queryable[int] = ...,
) -> Union[str, bool, int]: ...
def polyMergeEdgeCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    activeNodes: bool = ...,
    exists: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    immediate: bool = ...,
    name: str = ...,
    previous: bool = ...,
    reset: bool = ...,
    toolNode: bool = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    firstEdge: Queryable[int] = ...,
    mergeMode: Queryable[int] = ...,
    mergeTexture: bool = ...,
    nodeState: Queryable[int] = ...,
    secondEdge: Queryable[int] = ...,
) -> Union[str, bool, int]: ...
def polyMergeFacet(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    firstFacet: Queryable[int] = ...,
    mergeMode: Queryable[int] = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
    secondFacet: Queryable[int] = ...,
) -> Union[str, bool, int]: ...
def polyMergeFacetCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    activeNodes: bool = ...,
    exists: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    immediate: bool = ...,
    name: str = ...,
    previous: bool = ...,
    reset: bool = ...,
    toolNode: bool = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    firstFacet: Queryable[int] = ...,
    mergeMode: Queryable[int] = ...,
    nodeState: Queryable[int] = ...,
    secondFacet: Queryable[int] = ...,
) -> Union[str, bool, int]: ...
def polyMergeUV(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    distance: Queryable[float] = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
    uvSetName: str = ...,
    worldSpace: bool = ...,
) -> Union[str, bool, float, int]: ...
def polyMergeVertex(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    alwaysMergeTwoVertices: bool = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    distance: Queryable[float] = ...,
    mergeToComponents: Queryable[str] = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
    texture: bool = ...,
    worldSpace: bool = ...,
) -> Union[str, bool, float, int]: ...
def polyMirrorFace(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    axis: Queryable[int] = ...,
    axisDirection: Queryable[int] = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    direction: Queryable[int] = ...,
    mergeMode: Queryable[int] = ...,
    mergeThreshold: Queryable[float] = ...,
    mergeThresholdType: Queryable[int] = ...,
    mirrorAxis: Queryable[int] = ...,
    mirrorPosition: Queryable[float] = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
    pivot: Queryable[Tuple[float, float, float]] = ...,
    pivotX: Queryable[float] = ...,
    pivotY: Queryable[float] = ...,
    pivotZ: Queryable[float] = ...,
    worldSpace: bool = ...,
) -> Union[str, int, bool, float, Tuple[float, float, float]]: ...
def polyMoveEdge(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    gain: Queryable[Multiuse[float]] = ...,
    localCenter: Queryable[int] = ...,
    localDirection: Queryable[Tuple[float, float, float]] = ...,
    localDirectionX: Queryable[float] = ...,
    localDirectionY: Queryable[float] = ...,
    localDirectionZ: Queryable[float] = ...,
    localRotate: Queryable[Tuple[float, float, float]] = ...,
    localRotateX: Queryable[float] = ...,
    localRotateY: Queryable[float] = ...,
    localRotateZ: Queryable[float] = ...,
    localScale: Queryable[Tuple[float, float, float]] = ...,
    localScaleX: Queryable[float] = ...,
    localScaleY: Queryable[float] = ...,
    localScaleZ: Queryable[float] = ...,
    localTranslate: Queryable[Tuple[float, float, float]] = ...,
    localTranslateX: Queryable[float] = ...,
    localTranslateY: Queryable[float] = ...,
    localTranslateZ: Queryable[float] = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
    pivot: Queryable[Tuple[float, float, float]] = ...,
    pivotX: Queryable[float] = ...,
    pivotY: Queryable[float] = ...,
    pivotZ: Queryable[float] = ...,
    random: Queryable[float] = ...,
    rotate: Queryable[Tuple[float, float, float]] = ...,
    rotateX: Queryable[float] = ...,
    rotateY: Queryable[float] = ...,
    rotateZ: Queryable[float] = ...,
    scale: Queryable[Tuple[float, float, float]] = ...,
    scaleX: Queryable[float] = ...,
    scaleY: Queryable[float] = ...,
    scaleZ: Queryable[float] = ...,
    translate: Queryable[Tuple[float, float, float]] = ...,
    translateX: Queryable[float] = ...,
    translateY: Queryable[float] = ...,
    translateZ: Queryable[float] = ...,
    worldSpace: bool = ...,
) -> Union[str, bool, Multiuse[float], int, Tuple[float, float, float], float]: ...
def polyMoveFacet(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    attraction: Queryable[float] = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    gain: Queryable[Multiuse[float]] = ...,
    gravity: Queryable[Tuple[float, float, float]] = ...,
    gravityX: Queryable[float] = ...,
    gravityY: Queryable[float] = ...,
    gravityZ: Queryable[float] = ...,
    localCenter: Queryable[int] = ...,
    localDirection: Queryable[Tuple[float, float, float]] = ...,
    localDirectionX: Queryable[float] = ...,
    localDirectionY: Queryable[float] = ...,
    localDirectionZ: Queryable[float] = ...,
    localRotate: Queryable[Tuple[float, float, float]] = ...,
    localRotateX: Queryable[float] = ...,
    localRotateY: Queryable[float] = ...,
    localRotateZ: Queryable[float] = ...,
    localScale: Queryable[Tuple[float, float, float]] = ...,
    localScaleX: Queryable[float] = ...,
    localScaleY: Queryable[float] = ...,
    localScaleZ: Queryable[float] = ...,
    localTranslate: Queryable[Tuple[float, float, float]] = ...,
    localTranslateX: Queryable[float] = ...,
    localTranslateY: Queryable[float] = ...,
    localTranslateZ: Queryable[float] = ...,
    magnX: Queryable[float] = ...,
    magnY: Queryable[float] = ...,
    magnZ: Queryable[float] = ...,
    magnet: Queryable[Tuple[float, float, float]] = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
    offset: Queryable[float] = ...,
    pivot: Queryable[Tuple[float, float, float]] = ...,
    pivotX: Queryable[float] = ...,
    pivotY: Queryable[float] = ...,
    pivotZ: Queryable[float] = ...,
    random: Queryable[float] = ...,
    rotate: Queryable[Tuple[float, float, float]] = ...,
    rotateX: Queryable[float] = ...,
    rotateY: Queryable[float] = ...,
    rotateZ: Queryable[float] = ...,
    scale: Queryable[Tuple[float, float, float]] = ...,
    scaleX: Queryable[float] = ...,
    scaleY: Queryable[float] = ...,
    scaleZ: Queryable[float] = ...,
    translate: Queryable[Tuple[float, float, float]] = ...,
    translateX: Queryable[float] = ...,
    translateY: Queryable[float] = ...,
    translateZ: Queryable[float] = ...,
    weight: Queryable[float] = ...,
    worldSpace: bool = ...,
) -> Union[str, float, bool, Multiuse[float], Tuple[float, float, float], int]: ...
def polyMoveFacetUV(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    axisLen: Queryable[Tuple[float, float]] = ...,
    axisLenX: Queryable[float] = ...,
    axisLenY: Queryable[float] = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
    pivot: Queryable[Tuple[float, float]] = ...,
    pivotU: Queryable[float] = ...,
    pivotV: Queryable[float] = ...,
    random: Queryable[float] = ...,
    rotationAngle: Queryable[float] = ...,
    scale: Queryable[Tuple[float, float]] = ...,
    scaleU: Queryable[float] = ...,
    scaleV: Queryable[float] = ...,
    translate: Queryable[Tuple[float, float]] = ...,
    translateU: Queryable[float] = ...,
    translateV: Queryable[float] = ...,
) -> Union[str, Tuple[float, float], float, bool, int]: ...
def polyMoveUV(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    axisLen: Queryable[Tuple[float, float]] = ...,
    axisLenX: Queryable[float] = ...,
    axisLenY: Queryable[float] = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
    pivot: Queryable[Tuple[float, float]] = ...,
    pivotU: Queryable[float] = ...,
    pivotV: Queryable[float] = ...,
    random: Queryable[float] = ...,
    rotationAngle: Queryable[float] = ...,
    scale: Queryable[Tuple[float, float]] = ...,
    scaleU: Queryable[float] = ...,
    scaleV: Queryable[float] = ...,
    translate: Queryable[Tuple[float, float]] = ...,
    translateU: Queryable[float] = ...,
    translateV: Queryable[float] = ...,
) -> Union[str, Tuple[float, float], float, bool, int]: ...
def polyMoveVertex(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    gain: Queryable[Multiuse[float]] = ...,
    localDirection: Queryable[Tuple[float, float, float]] = ...,
    localDirectionX: Queryable[float] = ...,
    localDirectionY: Queryable[float] = ...,
    localDirectionZ: Queryable[float] = ...,
    localTranslate: Queryable[Tuple[float, float, float]] = ...,
    localTranslateX: Queryable[float] = ...,
    localTranslateY: Queryable[float] = ...,
    localTranslateZ: Queryable[float] = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
    pivot: Queryable[Tuple[float, float, float]] = ...,
    pivotX: Queryable[float] = ...,
    pivotY: Queryable[float] = ...,
    pivotZ: Queryable[float] = ...,
    random: Queryable[float] = ...,
    rotate: Queryable[Tuple[float, float, float]] = ...,
    rotateX: Queryable[float] = ...,
    rotateY: Queryable[float] = ...,
    rotateZ: Queryable[float] = ...,
    scale: Queryable[Tuple[float, float, float]] = ...,
    scaleX: Queryable[float] = ...,
    scaleY: Queryable[float] = ...,
    scaleZ: Queryable[float] = ...,
    translate: Queryable[Tuple[float, float, float]] = ...,
    translateX: Queryable[float] = ...,
    translateY: Queryable[float] = ...,
    translateZ: Queryable[float] = ...,
    worldSpace: bool = ...,
) -> Union[str, bool, Multiuse[float], Tuple[float, float, float], float, int]: ...
def polyMultiLayoutUV(
    *args: str,
    flipReversed: bool = ...,
    gridU: int = ...,
    gridV: int = ...,
    layout: int = ...,
    layoutMethod: int = ...,
    offsetU: float = ...,
    offsetV: float = ...,
    percentageSpace: float = ...,
    prescale: int = ...,
    rotateForBestFit: int = ...,
    scale: int = ...,
    sizeU: float = ...,
    sizeV: float = ...,
    uvSetName: str = ...,
) -> bool: ...
def polyNormal(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
    normalMode: Queryable[int] = ...,
    userNormalMode: bool = ...,
) -> Union[str, bool, int]: ...
def polyNormalPerVertex(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    allLocked: bool = ...,
    deformable: bool = ...,
    freezeNormal: bool = ...,
    normalX: Queryable[float] = ...,
    normalXYZ: Queryable[Multiuse[Tuple[float, float, float]]] = ...,
    normalY: Queryable[float] = ...,
    normalZ: Queryable[float] = ...,
    relative: bool = ...,
    unFreezeNormal: bool = ...,
) -> Union[bool, float, Multiuse[Tuple[float, float, float]]]: ...
def polyNormalizeUV(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    createNewMap: bool = ...,
    insertBeforeDeformers: bool = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
    uvSetName: str = ...,
    worldSpace: bool = ...,
    centerOnTile: bool = ...,
    normalizeDirection: Queryable[int] = ...,
    normalizeType: Queryable[int] = ...,
    preserveAspectRatio: bool = ...,
) -> Union[str, bool, int]: ...
def polyOptUvs(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    applyToShell: bool = ...,
    areaWeight: float = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    globalBlend: float = ...,
    globalMethodBlend: float = ...,
    iterations: int = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
    optimizeAxis: int = ...,
    pinSelected: bool = ...,
    pinUvBorder: bool = ...,
    scale: float = ...,
    stoppingThreshold: float = ...,
    useScale: bool = ...,
    uvSetName: str = ...,
    worldSpace: bool = ...,
) -> Union[str, bool, int]: ...
def polyOptions(
    *args: str,
    query: bool = ...,
    activeObjects: bool = ...,
    allEdges: bool = ...,
    backCullVertex: bool = ...,
    backCulling: bool = ...,
    colorMaterialChannel: Queryable[str] = ...,
    colorShadedDisplay: bool = ...,
    displayAlphaAsGreyScale: bool = ...,
    displayBlueChannel: bool = ...,
    displayBorder: bool = ...,
    displayCenter: bool = ...,
    displayColorAsGreyScale: bool = ...,
    displayCreaseEdge: bool = ...,
    displayCreaseVertex: bool = ...,
    displayGeometry: bool = ...,
    displayGreenChannel: bool = ...,
    displayInvisibleFaces: bool = ...,
    displayItemNumbers: Queryable[Tuple[bool, bool, bool, bool]] = ...,
    displayMapBorder: bool = ...,
    displayMetadata: Queryable[Tuple[bool, bool, bool]] = ...,
    displayNormal: bool = ...,
    displayRedChannel: bool = ...,
    displaySubdComps: bool = ...,
    displayTangent: bool = ...,
    displayTriangle: bool = ...,
    displayUVTopology: bool = ...,
    displayUVs: bool = ...,
    displayVertex: bool = ...,
    displayWarp: bool = ...,
    facet: bool = ...,
    fullBack: bool = ...,
    gl: bool = ...,
    hardBack: bool = ...,
    hardEdge: bool = ...,
    hardEdgeColor: bool = ...,
    materialBlend: Queryable[str] = ...,
    newPolymesh: bool = ...,
    point: bool = ...,
    pointFacet: bool = ...,
    relative: bool = ...,
    reuseTriangles: bool = ...,
    sizeBorder: Queryable[float] = ...,
    sizeNormal: Queryable[float] = ...,
    sizeUV: Queryable[float] = ...,
    sizeVertex: Queryable[float] = ...,
    smoothDrawType: Queryable[int] = ...,
    softEdge: bool = ...,
    vertexNormalMethod: Queryable[int] = ...,
    wireBackCulling: bool = ...,
) -> Union[
    bool, str, Tuple[bool, bool, bool, bool], Tuple[bool, bool, bool], float, int
]: ...
def polyOutput(
    *args: str,
    allValues: bool = ...,
    color: bool = ...,
    colorDesc: bool = ...,
    edge: bool = ...,
    edgeFace: bool = ...,
    face: bool = ...,
    faceNorm: bool = ...,
    force: bool = ...,
    group: bool = ...,
    noOutput: bool = ...,
    normDesc: bool = ...,
    outputFile: str = ...,
    triangle: bool = ...,
    uvDesc: bool = ...,
    uvValue: bool = ...,
    vert: bool = ...,
    vertEdge: bool = ...,
    vertNorm: bool = ...,
) -> bool: ...
def polyPinUV(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    createHistory: bool = ...,
    operation: Queryable[int] = ...,
    unpinned: bool = ...,
    uvSetName: Queryable[str] = ...,
    value: Queryable[Multiuse[float]] = ...,
) -> Union[bool, int, str, Multiuse[float]]: ...
def polyPipe(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    axis: Queryable[Tuple[float, float, float]] = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    createUVs: bool = ...,
    height: Queryable[float] = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
    object: bool = ...,
    radius: Queryable[float] = ...,
    roundCap: bool = ...,
    subdivisionsAxis: Queryable[int] = ...,
    subdivisionsCaps: Queryable[int] = ...,
    subdivisionsHeight: Queryable[int] = ...,
    texture: bool = ...,
    thickness: Queryable[float] = ...,
) -> Union[List[str], Tuple[float, float, float], bool, float, int]: ...
def polyPlanarProjection(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    createNewMap: bool = ...,
    imageCenter: Queryable[Tuple[float, float]] = ...,
    imageCenterX: Queryable[float] = ...,
    imageCenterY: Queryable[float] = ...,
    imageScale: Queryable[Tuple[float, float]] = ...,
    imageScaleU: Queryable[float] = ...,
    imageScaleV: Queryable[float] = ...,
    insertBeforeDeformers: bool = ...,
    keepImageRatio: bool = ...,
    mapDirection: str = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
    perInstance: bool = ...,
    projectionCenter: Queryable[Tuple[float, float, float]] = ...,
    projectionCenterX: Queryable[float] = ...,
    projectionCenterY: Queryable[float] = ...,
    projectionCenterZ: Queryable[float] = ...,
    projectionHeight: Queryable[float] = ...,
    projectionScale: Queryable[Tuple[float, float]] = ...,
    rotate: Queryable[Tuple[float, float, float]] = ...,
    rotateX: Queryable[float] = ...,
    rotateY: Queryable[float] = ...,
    rotateZ: Queryable[float] = ...,
    rotationAngle: Queryable[float] = ...,
    smartFit: bool = ...,
    worldSpace: bool = ...,
    projectionHorizontalSweep: Queryable[float] = ...,
    seamCorrect: bool = ...,
) -> Union[str, bool, Tuple[float, float], float, int, Tuple[float, float, float]]: ...
def polyPlane(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
    object: bool = ...,
    axis: Queryable[Tuple[float, float, float]] = ...,
    createUVs: Queryable[int] = ...,
    height: Queryable[float] = ...,
    subdivisionsHeight: Queryable[int] = ...,
    subdivisionsWidth: Queryable[int] = ...,
    subdivisionsX: Queryable[int] = ...,
    subdivisionsY: Queryable[int] = ...,
    texture: Queryable[int] = ...,
    width: Queryable[float] = ...,
) -> Union[List[str], bool, int, Tuple[float, float, float], float]: ...
def polyPlatonicSolid(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    axis: Queryable[Tuple[float, float, float]] = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    createUVs: int = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
    object: bool = ...,
    radius: Queryable[float] = ...,
    sideLength: Queryable[float] = ...,
    solidType: int = ...,
    texture: int = ...,
) -> Union[List[str], Tuple[float, float, float], bool, int, float]: ...
def polyPoke(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    localTranslate: Tuple[float, float, float] = ...,
    localTranslateX: float = ...,
    localTranslateY: float = ...,
    localTranslateZ: float = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
    translate: Tuple[float, float, float] = ...,
    translateX: float = ...,
    translateY: float = ...,
    translateZ: float = ...,
    worldSpace: bool = ...,
) -> Union[str, bool, int]: ...
def polyPrimitive(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
    object: bool = ...,
    axis: Queryable[Tuple[float, float, float]] = ...,
    createUVs: Queryable[int] = ...,
    polyType: int = ...,
    radius: Queryable[float] = ...,
    sideLength: Queryable[float] = ...,
    texture: Queryable[int] = ...,
) -> Union[List[str], bool, int, Tuple[float, float, float], float]: ...
def polyPrimitiveMisc(*args: Any, **kwargs: Any) -> None: ...
def polyPrism(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    axis: Queryable[Tuple[float, float, float]] = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    createUVs: int = ...,
    length: Queryable[float] = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
    numberOfSides: Queryable[int] = ...,
    numderOfSides: Queryable[int] = ...,
    object: bool = ...,
    sideLength: Queryable[float] = ...,
    subdivisionsCaps: Queryable[int] = ...,
    subdivisionsHeight: Queryable[int] = ...,
    texture: int = ...,
) -> Union[List[str], Tuple[float, float, float], bool, float, int]: ...
def polyProjectCurve(
    arg0: str = ...,
    arg1: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    addUnderTransform: bool = ...,
    caching: bool = ...,
    direction: Queryable[Tuple[float, float, float]] = ...,
    directionX: Queryable[float] = ...,
    directionY: Queryable[float] = ...,
    directionZ: Queryable[float] = ...,
    nodeState: Queryable[int] = ...,
    tolerance: Queryable[float] = ...,
) -> Union[List[str], bool, Tuple[float, float, float], float, int]: ...
def polyProjection(
    *args: str,
    constructionHistory: bool = ...,
    createNewMap: bool = ...,
    imageCenterX: float = ...,
    imageCenterY: float = ...,
    imageScaleU: float = ...,
    imageScaleV: float = ...,
    insertBeforeDeformers: bool = ...,
    keepImageRatio: bool = ...,
    mapDirection: str = ...,
    projectionCenterX: float = ...,
    projectionCenterY: float = ...,
    projectionCenterZ: float = ...,
    projectionScaleU: float = ...,
    projectionScaleV: float = ...,
    rotateX: float = ...,
    rotateY: float = ...,
    rotateZ: float = ...,
    rotationAngle: float = ...,
    seamCorrect: bool = ...,
    smartFit: bool = ...,
    type: str = ...,
    uvSetName: str = ...,
) -> str: ...
def polyPyramid(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    axis: Queryable[Tuple[float, float, float]] = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    createUVs: Queryable[int] = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
    numberOfSides: Queryable[int] = ...,
    numderOfSides: Queryable[int] = ...,
    object: bool = ...,
    sideLength: Queryable[float] = ...,
    subdivisionsCaps: Queryable[int] = ...,
    subdivisionsHeight: Queryable[int] = ...,
    texture: bool = ...,
) -> Union[List[str], Tuple[float, float, float], bool, int, float]: ...
def polyQuad(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    angle: Queryable[float] = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    keepGroupBorder: bool = ...,
    keepHardEdges: bool = ...,
    keepTextureBorders: bool = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
    worldSpace: bool = ...,
) -> Union[str, float, bool, int]: ...
def polyQueryBlindData(
    *args: str,
    associationType: str = ...,
    binaryData: str = ...,
    booleanData: bool = ...,
    doubleData: float = ...,
    intData: int = ...,
    longDataName: Multiuse[str] = ...,
    maxValue: float = ...,
    minValue: float = ...,
    shortDataName: Multiuse[str] = ...,
    showComp: bool = ...,
    stringData: str = ...,
    subString: str = ...,
    typeId: int = ...,
) -> str: ...
def polyReduce(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    cachingReduce: bool = ...,
    colorWeights: Queryable[float] = ...,
    compactness: Queryable[float] = ...,
    constructionHistory: bool = ...,
    geomWeights: Queryable[float] = ...,
    invertVertexWeights: bool = ...,
    keepBorder: bool = ...,
    keepBorderWeight: Queryable[float] = ...,
    keepColorBorder: bool = ...,
    keepColorBorderWeight: Queryable[float] = ...,
    keepCreaseEdge: bool = ...,
    keepCreaseEdgeWeight: Queryable[float] = ...,
    keepFaceGroupBorder: bool = ...,
    keepFaceGroupBorderWeight: Queryable[float] = ...,
    keepHardEdge: bool = ...,
    keepHardEdgeWeight: Queryable[float] = ...,
    keepMapBorder: bool = ...,
    keepMapBorderWeight: Queryable[float] = ...,
    keepOriginalVertices: bool = ...,
    keepQuadsWeight: Queryable[float] = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
    percentage: Queryable[float] = ...,
    preserveLocation: bool = ...,
    preserveTopology: bool = ...,
    replaceOriginal: bool = ...,
    sharpness: Queryable[float] = ...,
    symmetryPlaneW: Queryable[float] = ...,
    symmetryPlaneX: Queryable[float] = ...,
    symmetryPlaneY: Queryable[float] = ...,
    symmetryPlaneZ: Queryable[float] = ...,
    symmetryTolerance: Queryable[float] = ...,
    termination: Queryable[int] = ...,
    triangleCount: Queryable[int] = ...,
    triangulate: bool = ...,
    useVirtualSymmetry: Queryable[int] = ...,
    uvWeights: Queryable[float] = ...,
    version: Queryable[int] = ...,
    vertexCount: Queryable[int] = ...,
    vertexMapName: Queryable[str] = ...,
    vertexWeightCoefficient: Queryable[float] = ...,
    weightCoefficient: Queryable[float] = ...,
) -> Union[str, bool, float, int]: ...
def polyRemesh(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    collapseThreshold: Queryable[float] = ...,
    constructionHistory: bool = ...,
    interpolationType: Queryable[int] = ...,
    maxEdgeLength: Queryable[float] = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
    smoothStrength: Queryable[float] = ...,
    tessellateBorders: bool = ...,
    useRelativeValues: bool = ...,
) -> Union[str, bool, float, int]: ...
def polyRetopo(*args: str) -> str: ...
def polyRetopoCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    history: bool = ...,
    exists: bool = ...,
    image1: str = ...,
    image2: str = ...,
    image3: str = ...,
    name: str = ...,
) -> None: ...
def polySelect(
    *args: str,
    query: bool = ...,
    add: bool = ...,
    addFirst: bool = ...,
    asSelectString: bool = ...,
    deselect: bool = ...,
    edgeBorder: Multiuse[int] = ...,
    edgeBorderPath: Multiuse[Tuple[int, int]] = ...,
    edgeBorderPattern: Multiuse[Tuple[int, int]] = ...,
    edgeLoop: Multiuse[int] = ...,
    edgeLoopOrBorder: Multiuse[int] = ...,
    edgeLoopOrBorderPattern: Multiuse[Tuple[int, int]] = ...,
    edgeLoopPath: Multiuse[Tuple[int, int]] = ...,
    edgeLoopPattern: Multiuse[Tuple[int, int]] = ...,
    edgeRing: Multiuse[int] = ...,
    edgeRingPath: Multiuse[Tuple[int, int]] = ...,
    edgeRingPattern: Multiuse[Tuple[int, int]] = ...,
    edgeUVLoopOrBorder: Multiuse[int] = ...,
    everyN: int = ...,
    extendToShell: Multiuse[int] = ...,
    noSelection: bool = ...,
    replace: bool = ...,
    shortestEdgePath: Multiuse[Tuple[int, int]] = ...,
    shortestEdgePathUV: Multiuse[Tuple[int, int]] = ...,
    shortestFacePath: Multiuse[Tuple[int, int]] = ...,
    toggle: bool = ...,
) -> Union[List[int], bool]: ...
def polySelectConstraint(
    *,
    query: bool = ...,
    angle: Queryable[int] = ...,
    anglePropagation: bool = ...,
    angleTolerance: Queryable[float] = ...,
    anglebound: Queryable[Tuple[float, float]] = ...,
    border: bool = ...,
    borderPropagation: bool = ...,
    convexity: Queryable[int] = ...,
    crease: bool = ...,
    disable: bool = ...,
    dist: Queryable[int] = ...,
    distaxis: Queryable[Tuple[float, float, float]] = ...,
    distbound: Queryable[Tuple[float, float]] = ...,
    distpoint: Queryable[Tuple[float, float, float]] = ...,
    edgeDistance: int = ...,
    geometricarea: Queryable[int] = ...,
    geometricareabound: Queryable[Tuple[float, float]] = ...,
    holes: Queryable[int] = ...,
    length: Queryable[int] = ...,
    lengthbound: Queryable[Tuple[float, float]] = ...,
    loopPropagation: bool = ...,
    max2dAngle: float = ...,
    max3dAngle: float = ...,
    mode: Queryable[int] = ...,
    nonmanifold: Queryable[int] = ...,
    oppositeEdges: bool = ...,
    order: Queryable[int] = ...,
    orderbound: Queryable[Tuple[int, int]] = ...,
    orient: Queryable[int] = ...,
    orientaxis: Queryable[Tuple[float, float, float]] = ...,
    orientbound: Queryable[Tuple[float, float]] = ...,
    planarity: Queryable[int] = ...,
    propagate: Queryable[int] = ...,
    random: Queryable[int] = ...,
    randomratio: Queryable[float] = ...,
    returnSelection: bool = ...,
    ringPropagation: bool = ...,
    shell: bool = ...,
    size: Queryable[int] = ...,
    smoothness: Queryable[int] = ...,
    stateString: bool = ...,
    textured: Queryable[int] = ...,
    texturedarea: Queryable[int] = ...,
    texturedareabound: Queryable[Tuple[float, float]] = ...,
    textureshared: Queryable[int] = ...,
    topology: Queryable[int] = ...,
    type: Queryable[int] = ...,
    uvBorderSelection: bool = ...,
    uvConstraint: bool = ...,
    uvEdgeLoopPropagation: bool = ...,
    uvEdgeRingPropagation: bool = ...,
    uvFaceOrientation: Queryable[int] = ...,
    uvShell: bool = ...,
    visibility: Queryable[int] = ...,
    visibilityangle: Queryable[float] = ...,
    visibilitypoint: Queryable[Tuple[float, float, float]] = ...,
    where: Queryable[int] = ...,
    wholeSensitive: bool = ...,
) -> Union[
    bool, int, float, Tuple[float, float], Tuple[float, float, float], Tuple[int, int]
]: ...
def polySelectConstraintMonitor(
    *, changeCommand: Tuple[str, str] = ..., create: bool = ..., delete: bool = ...
) -> bool: ...
def polySelectCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    exists: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    mode: Queryable[int] = ...,
) -> Union[bool, str, int]: ...
def polySelectEditCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    adjustEdgeFlow: Queryable[float] = ...,
    divisions: Queryable[int] = ...,
    exists: bool = ...,
    fixQuads: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    insertWithEdgeFlow: bool = ...,
    smoothingAngle: Queryable[float] = ...,
    splitType: Queryable[int] = ...,
    useEqualMultiplier: bool = ...,
    absoluteOffset: bool = ...,
    autoComplete: bool = ...,
    deleteEdge: bool = ...,
    endVertexOffset: Queryable[float] = ...,
    mode: Queryable[int] = ...,
    startVertexOffset: Queryable[float] = ...,
) -> Union[str, float, int, bool]: ...
def polySelectEditCtxDataCmd(*args: Any, **kwargs: Any) -> None: ...
def polySelectSp(
    *args: str, query: bool = ..., loop: bool = ..., ring: bool = ...
) -> None: ...
def polySeparate(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    nodeState: Queryable[int] = ...,
    removeShells: bool = ...,
    separateSpecificShell: Multiuse[int] = ...,
) -> Union[List[str], bool, int]: ...
def polySetToFaceNormal(*args: str, setUserNormal: bool = ...) -> str: ...
def polySetVertices() -> None: ...
def polySewEdge(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
    texture: bool = ...,
    tolerance: Queryable[float] = ...,
    worldSpace: bool = ...,
) -> Union[str, bool, int, float]: ...
def polyShortestPathCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    exists: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
) -> Union[bool, str]: ...
def polySlideEdge(
    *args: str,
    absolute: bool = ...,
    direction: int = ...,
    edgeDirection: float = ...,
    symmetry: bool = ...,
) -> bool: ...
def polySlideEdgeCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    absolute: bool = ...,
    history: bool = ...,
    direction: int = ...,
    edgeDirection: float = ...,
    exists: bool = ...,
    image1: str = ...,
    image2: str = ...,
    image3: str = ...,
    name: str = ...,
    snappingPoints: int = ...,
    snappingTolerance: float = ...,
    useSnapping: bool = ...,
) -> None: ...
def polySmartBevel(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    depth: float = ...,
    filterAngle: float = ...,
    filterEdgesByAngle: bool = ...,
    filterEdgesBySelection: bool = ...,
    filterFromSmoothing: int = ...,
    filterHardEdges: bool = ...,
    filterEdgesByMaxAngle: bool = ...,
    frozen: bool = ...,
    inputComponentsConnection: str = ...,
    filterMaxAngle: float = ...,
    name: str = ...,
    nodeState: int = ...,
    segments: int = ...,
    setPerimeterHard: bool = ...,
    smoothingThreshold: float = ...,
    useInputComp: bool = ...,
    width: float = ...,
    worldSpace: bool = ...,
) -> None: ...
def polySmartExtrude(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    localCenter: Queryable[int] = ...,
    localDirection: Queryable[Tuple[float, float, float]] = ...,
    localDirectionX: Queryable[float] = ...,
    localDirectionY: Queryable[float] = ...,
    localDirectionZ: Queryable[float] = ...,
    localRotate: Queryable[Tuple[float, float, float]] = ...,
    localRotateX: Queryable[float] = ...,
    localRotateY: Queryable[float] = ...,
    localRotateZ: Queryable[float] = ...,
    localScale: Queryable[Tuple[float, float, float]] = ...,
    localScaleX: Queryable[float] = ...,
    localScaleY: Queryable[float] = ...,
    localScaleZ: Queryable[float] = ...,
    localTranslate: Queryable[Tuple[float, float, float]] = ...,
    localTranslateX: Queryable[float] = ...,
    localTranslateY: Queryable[float] = ...,
    localTranslateZ: Queryable[float] = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
    pivot: Queryable[Tuple[float, float, float]] = ...,
    pivotX: Queryable[float] = ...,
    pivotY: Queryable[float] = ...,
    pivotZ: Queryable[float] = ...,
    rotate: Queryable[Tuple[float, float, float]] = ...,
    rotateX: Queryable[float] = ...,
    rotateY: Queryable[float] = ...,
    rotateZ: Queryable[float] = ...,
    scale: Queryable[Tuple[float, float, float]] = ...,
    scaleX: Queryable[float] = ...,
    scaleY: Queryable[float] = ...,
    scaleZ: Queryable[float] = ...,
    translate: Queryable[Tuple[float, float, float]] = ...,
    translateX: Queryable[float] = ...,
    translateY: Queryable[float] = ...,
    translateZ: Queryable[float] = ...,
    worldSpace: bool = ...,
) -> Union[str, bool, int, Tuple[float, float, float], float]: ...
def polySmooth(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
    continuity: Queryable[float] = ...,
    degree: int = ...,
    divisions: Queryable[int] = ...,
    divisionsPerEdge: int = ...,
    keepBorder: bool = ...,
    keepHardEdge: bool = ...,
    keepMapBorders: int = ...,
    keepSelectionBorder: bool = ...,
    keepTesselation: bool = ...,
    keepTessellation: bool = ...,
    method: int = ...,
    osdCreaseMethod: Queryable[int] = ...,
    osdFvarBoundary: Queryable[int] = ...,
    osdFvarPropagateCorners: bool = ...,
    osdSmoothTriangles: bool = ...,
    osdVertBoundary: Queryable[int] = ...,
    propagateEdgeHardness: bool = ...,
    pushStrength: float = ...,
    roundness: float = ...,
    smoothUVs: bool = ...,
    subdivisionLevels: int = ...,
    subdivisionType: Queryable[int] = ...,
) -> Union[str, bool, int, float]: ...
def polySoftEdge(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    angle: Queryable[float] = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
    worldSpace: bool = ...,
) -> Union[str, float, bool, int]: ...
def polySphere(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
    object: bool = ...,
    axis: Queryable[Tuple[float, float, float]] = ...,
    createUVs: int = ...,
    radius: Queryable[float] = ...,
    subdivisionsAxis: Queryable[int] = ...,
    subdivisionsHeight: Queryable[int] = ...,
    subdivisionsX: Queryable[int] = ...,
    subdivisionsY: Queryable[int] = ...,
    texture: int = ...,
) -> Union[List[str], bool, int, Tuple[float, float, float], float]: ...
def polySphericalProjection(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    createNewMap: bool = ...,
    insertBeforeDeformers: bool = ...,
    keepImageRatio: bool = ...,
    mapDirection: str = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
    perInstance: bool = ...,
    smartFit: bool = ...,
    worldSpace: bool = ...,
    imageCenter: Queryable[Tuple[float, float]] = ...,
    imageCenterX: Queryable[float] = ...,
    imageCenterY: Queryable[float] = ...,
    imageScale: Queryable[Tuple[float, float]] = ...,
    imageScaleU: Queryable[float] = ...,
    imageScaleV: Queryable[float] = ...,
    projectionCenter: Queryable[Tuple[float, float, float]] = ...,
    projectionCenterX: Queryable[float] = ...,
    projectionCenterY: Queryable[float] = ...,
    projectionCenterZ: Queryable[float] = ...,
    projectionHorizontalSweep: Queryable[float] = ...,
    projectionScale: Queryable[Tuple[float, float]] = ...,
    projectionScaleU: Queryable[float] = ...,
    projectionScaleV: Queryable[float] = ...,
    radius: Queryable[float] = ...,
    rotate: Queryable[Tuple[float, float, float]] = ...,
    rotateX: Queryable[float] = ...,
    rotateY: Queryable[float] = ...,
    rotateZ: Queryable[float] = ...,
    rotationAngle: Queryable[float] = ...,
    seamCorrect: bool = ...,
) -> Union[str, bool, int, Tuple[float, float], float, Tuple[float, float, float]]: ...
def polySpinEdge(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    frozen: bool = ...,
    inputComponentsConnection: str = ...,
    name: str = ...,
    nodeState: int = ...,
    offset: int = ...,
    reverse: bool = ...,
    useInputComp: bool = ...,
) -> None: ...
def polySplit(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    constructionHistory: bool = ...,
    name: str = ...,
    adjustEdgeFlow: Queryable[float] = ...,
    detachEdges: bool = ...,
    edgepoint: Multiuse[Tuple[int, float]] = ...,
    facepoint: Multiuse[Tuple[int, float, float, float]] = ...,
    insertWithEdgeFlow: bool = ...,
    insertpoint: Multiuse[
        Union[Tuple[int, float], Tuple[int, float, float, float]]
    ] = ...,
    projectedCurve: Multiuse[str] = ...,
    projectedCurveTolerance: float = ...,
    smoothingangle: float = ...,
    subdivision: Queryable[int] = ...,
) -> Union[str, bool, float, int]: ...
def polySplitCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    enablesnap: bool = ...,
    exists: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    magnetsnap: Queryable[int] = ...,
    precsnap: Queryable[float] = ...,
    smoothingangle: Queryable[float] = ...,
    snaptoedge: bool = ...,
    subdivision: Queryable[int] = ...,
) -> Union[bool, str, int, float]: ...
def polySplitCtx2(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    exists: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    adjustEdgeFlow: Queryable[float] = ...,
    constrainToEdges: bool = ...,
    edgeMagnets: Queryable[int] = ...,
    insertWithEdgeFlow: bool = ...,
    snapTolerance: Queryable[float] = ...,
    snappedToEdgeColor: Queryable[Tuple[float, float, float]] = ...,
    snappedToFaceColor: Queryable[Tuple[float, float, float]] = ...,
    snappedToMagnetColor: Queryable[Tuple[float, float, float]] = ...,
    snappedToVertexColor: Queryable[Tuple[float, float, float]] = ...,
) -> Union[bool, str, float, int, Tuple[float, float, float]]: ...
def polySplitEdge(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
    operation: Queryable[int] = ...,
) -> Union[str, bool, int]: ...
def polySplitRing(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    adjustEdgeFlow: Queryable[float] = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    direction: bool = ...,
    divisions: Queryable[int] = ...,
    enableProfileCurve: bool = ...,
    fixQuads: bool = ...,
    insertWithEdgeFlow: bool = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
    profileCurveInputOffset: Queryable[float] = ...,
    profileCurveInputScale: Queryable[float] = ...,
    profileCurve_FloatValue: Queryable[float] = ...,
    profileCurve_Interp: Queryable[int] = ...,
    profileCurve_Position: Queryable[float] = ...,
    rootEdge: Queryable[int] = ...,
    smoothingAngle: Queryable[float] = ...,
    splitType: Queryable[int] = ...,
    useEqualMultiplier: bool = ...,
    useFaceNormalsAtEnds: bool = ...,
    weight: Queryable[float] = ...,
    worldSpace: bool = ...,
) -> Union[str, float, bool, int]: ...
def polySplitVertex(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
    worldSpace: bool = ...,
) -> Union[str, bool, int]: ...
def polyStraightenUVBorder(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    blendOriginal: Queryable[float] = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    curvature: Queryable[float] = ...,
    gapTolerance: Queryable[int] = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
    preserveLength: Queryable[float] = ...,
    uvSetName: str = ...,
    worldSpace: bool = ...,
) -> Union[str, float, bool, int]: ...
def polySubdivideEdge(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    divisions: Queryable[int] = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
    size: Queryable[float] = ...,
    worldSpace: bool = ...,
) -> Union[str, bool, int, float]: ...
def polySubdivideFacet(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
    divisions: Queryable[int] = ...,
    divisionsU: Queryable[int] = ...,
    divisionsV: Queryable[int] = ...,
    mode: Queryable[int] = ...,
    subdMethod: Queryable[int] = ...,
) -> Union[str, bool, int]: ...
def polySuperCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    attach: Multiuse[str] = ...,
    exists: bool = ...,
    image1: str = ...,
    image2: str = ...,
    image3: str = ...,
) -> None: ...
def polyTestPop(*args: Any, **kwargs: Any) -> None: ...
def polyToCurve(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    addUnderTransform: bool = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    degree: int = ...,
    displaySmoothMesh: int = ...,
    form: int = ...,
    frozen: bool = ...,
    name: str = ...,
    nodeState: int = ...,
    object: bool = ...,
    conformToSmoothMeshPreview: bool = ...,
) -> None: ...
def polyToSubdiv(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    absolutePosition: bool = ...,
    applyMatrixToResult: bool = ...,
    caching: bool = ...,
    maxEdgesPerVert: Queryable[int] = ...,
    maxPolyCount: Queryable[int] = ...,
    nodeState: Queryable[int] = ...,
    preserveVertexOrdering: bool = ...,
    quickConvert: bool = ...,
    uvPoints: Queryable[Multiuse[Tuple[float, float]]] = ...,
    uvPointsU: Queryable[float] = ...,
    uvPointsV: Queryable[float] = ...,
    uvTreatment: Queryable[int] = ...,
    addUnderTransform: bool = ...,
    constructionHistory: bool = ...,
    name: str = ...,
    object: bool = ...,
) -> Union[str, bool, int, Multiuse[Tuple[float, float]], float]: ...
def polyTorus(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    axis: Queryable[Tuple[float, float, float]] = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    createUVs: bool = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
    object: bool = ...,
    radius: Queryable[float] = ...,
    sectionRadius: Queryable[float] = ...,
    subdivisionsAxis: Queryable[int] = ...,
    subdivisionsHeight: Queryable[int] = ...,
    subdivisionsX: Queryable[int] = ...,
    subdivisionsY: Queryable[int] = ...,
    texture: bool = ...,
    twist: Queryable[float] = ...,
) -> Union[List[str], Tuple[float, float, float], bool, int, float]: ...
def polyTransfer(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    alternateObject: Queryable[str] = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
    uvSets: bool = ...,
    vertexColor: bool = ...,
    vertices: bool = ...,
) -> Union[str, bool, int]: ...
def polyTriangulate(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
) -> Union[str, bool, int]: ...
def polyUVCoverage(
    *args: str, uvRange: Tuple[float, float, float, float] = ...
) -> List[float]: ...
def polyUVOverlap(
    *args: str, nonOverlappingComponents: bool = ..., overlappingComponents: bool = ...
) -> List[str]: ...
def polyUVRectangle(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
) -> Union[str, bool, int]: ...
def polyUVSet(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    allUVSets: bool = ...,
    allUVSetsIndices: bool = ...,
    allUVSetsWithCount: bool = ...,
    copy: bool = ...,
    create: bool = ...,
    currentLastUVSet: bool = ...,
    currentPerInstanceUVSet: bool = ...,
    currentUVSet: bool = ...,
    delete: bool = ...,
    genNewUVSet: bool = ...,
    newUVSet: Queryable[str] = ...,
    perInstance: bool = ...,
    projections: bool = ...,
    rename: bool = ...,
    reorder: bool = ...,
    shareInstances: bool = ...,
    unshared: bool = ...,
    uvSet: str = ...,
) -> Union[bool, str]: ...
def polyUVStackSimilarShells(
    *args: str, onlyMatch: bool = ..., tolerance: float = ...
) -> List[str]: ...
def polyUVStackSimilarShellsCmd(*args: Any, **kwargs: Any) -> None: ...
def polyUnite(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    mergeUVSets: int = ...,
    nodeState: Queryable[int] = ...,
    centerPivot: bool = ...,
    objectPivot: bool = ...,
) -> Union[List[str], bool, int]: ...
def polyUniteSkinned(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    centerPivot: bool = ...,
    constructionHistory: bool = ...,
    mergeUVSets: Queryable[int] = ...,
    objectPivot: bool = ...,
) -> Union[bool, int]: ...
def polyUnsmooth(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    divisionLevels: Queryable[int] = ...,
    frozen: bool = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
    replaceOriginal: bool = ...,
) -> Union[str, bool, int]: ...
def polyVertexNormalCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    deformmode: bool = ...,
    exists: bool = ...,
    image1: str = ...,
    image2: str = ...,
    image3: str = ...,
    lockmode: int = ...,
    relativemode: int = ...,
    rotatemode: int = ...,
) -> None: ...
def polyWarpImage(
    *args: str,
    bilinear: bool = ...,
    background: Tuple[int, int, int] = ...,
    fileFormat: str = ...,
    inputName: str = ...,
    inputUvSetName: str = ...,
    noAlpha: bool = ...,
    overwrite: bool = ...,
    outputName: str = ...,
    outputUvSetName: str = ...,
    tiled: bool = ...,
    xResolution: int = ...,
    yResolution: int = ...,
) -> None: ...
def polyWedgeFace(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    axis: Tuple[float, float, float] = ...,
    caching: bool = ...,
    center: Tuple[float, float, float] = ...,
    constructionHistory: bool = ...,
    divisions: int = ...,
    edge: Multiuse[int] = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
    wedgeAngle: float = ...,
    worldSpace: bool = ...,
) -> Union[str, bool, int]: ...
def popListItem() -> None: ...
def popupMenu(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    allowOptionBoxes: bool = ...,
    altModifier: bool = ...,
    button: Queryable[int] = ...,
    ctrlModifier: bool = ...,
    defineTemplate: str = ...,
    deleteAllItems: bool = ...,
    exists: bool = ...,
    itemArray: bool = ...,
    markingMenu: bool = ...,
    numberOfItems: bool = ...,
    parent: str = ...,
    postMenuCommand: Callable[..., Any] = ...,
    postMenuCommandOnce: bool = ...,
    shiftModifier: bool = ...,
    useTemplate: str = ...,
) -> Union[str, bool, int]: ...
def pose(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    allPoses: bool = ...,
    apply: bool = ...,
    name: Queryable[str] = ...,
) -> Union[str, bool]: ...
def poseEditor(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    control: bool = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    exists: bool = ...,
    filter: Queryable[str] = ...,
    forceMainConnection: Queryable[str] = ...,
    highlightConnection: Queryable[str] = ...,
    lockMainConnection: bool = ...,
    mainListConnection: Queryable[str] = ...,
    panel: Queryable[str] = ...,
    parent: Queryable[str] = ...,
    selectionConnection: Queryable[str] = ...,
    stateString: bool = ...,
    unParent: bool = ...,
    unlockMainConnection: bool = ...,
    updateMainConnection: bool = ...,
    useTemplate: str = ...,
) -> Union[str, bool]: ...
def poseInterpolator(
    arg0: str = ...,
    /,
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    addPose: str = ...,
    drivers: bool = ...,
    deletePose: str = ...,
    exportPoses: str = ...,
    goToPose: str = ...,
    index: bool = ...,
    importPoses: str = ...,
    kernelWidth: str = ...,
    mirror: Multiuse[str] = ...,
    name: str = ...,
    pose: Multiuse[Tuple[str, str]] = ...,
    poseNames: bool = ...,
    rename: Tuple[str, str] = ...,
    searchAndReplace: Tuple[str, str] = ...,
    updatePose: str = ...,
) -> None: ...
def posePanel(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    control: bool = ...,
    copy: str = ...,
    createString: bool = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    editString: bool = ...,
    exists: bool = ...,
    init: bool = ...,
    isUnique: bool = ...,
    label: Queryable[str] = ...,
    menuBarRepeatLast: bool = ...,
    menuBarVisible: bool = ...,
    needsInit: bool = ...,
    parent: str = ...,
    popupMenuProcedure: Queryable[Callable[..., Any]] = ...,
    poseEditor: bool = ...,
    replacePanel: str = ...,
    tearOff: bool = ...,
    tearOffCopy: str = ...,
    tearOffRestore: bool = ...,
    unParent: bool = ...,
    useTemplate: str = ...,
) -> Union[str, bool, Callable[..., Any]]: ...
def preferredRenderer(
    arg0: str = ...,
    /,
    *,
    query: bool = ...,
    fallback: Queryable[str] = ...,
    makeCurrent: bool = ...,
) -> Union[bool, str]: ...
def preloadRefEd(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    control: bool = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    exists: bool = ...,
    filter: Queryable[str] = ...,
    forceMainConnection: Queryable[str] = ...,
    highlightConnection: Queryable[str] = ...,
    lockMainConnection: bool = ...,
    mainListConnection: Queryable[str] = ...,
    panel: Queryable[str] = ...,
    parent: Queryable[str] = ...,
    selectCommand: Queryable[Callable[..., Any]] = ...,
    selectFileNode: bool = ...,
    selectionConnection: Queryable[str] = ...,
    stateString: bool = ...,
    unParent: bool = ...,
    unlockMainConnection: bool = ...,
    updateMainConnection: bool = ...,
    useTemplate: str = ...,
) -> Union[str, bool, Callable[..., Any]]: ...
def prepareRender(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    defaultTraversalSet: Queryable[str] = ...,
    deregister: str = ...,
    invokePostRender: bool = ...,
    invokePostRenderFrame: bool = ...,
    invokePostRenderLayer: bool = ...,
    invokePreRender: bool = ...,
    invokePreRenderFrame: bool = ...,
    invokePreRenderLayer: bool = ...,
    invokeSettingsUI: bool = ...,
    label: Queryable[str] = ...,
    listTraversalSets: bool = ...,
    postRender: Queryable[Callable[..., Any]] = ...,
    postRenderFrame: Queryable[Callable[..., Any]] = ...,
    postRenderLayer: Queryable[Callable[..., Any]] = ...,
    preRender: Queryable[Callable[..., Any]] = ...,
    preRenderFrame: Queryable[Callable[..., Any]] = ...,
    preRenderLayer: Queryable[Callable[..., Any]] = ...,
    restore: bool = ...,
    saveAssemblyConfig: bool = ...,
    settingsUI: Queryable[Callable[..., Any]] = ...,
    setup: bool = ...,
    traversalSet: str = ...,
    traversalSetInit: Queryable[Callable[..., Any]] = ...,
) -> Union[bool, str, Callable[..., Any]]: ...
def prependListItem() -> None: ...
def profiler(
    *,
    query: bool = ...,
    addCategory: str = ...,
    allCategories: bool = ...,
    bufferSize: Queryable[int] = ...,
    categoryIndex: int = ...,
    categoryIndexToName: int = ...,
    categoryInfo: Queryable[str] = ...,
    categoryName: str = ...,
    categoryNameToIndex: str = ...,
    categoryRecording: bool = ...,
    clearAllMelInstrumentation: bool = ...,
    colorIndex: int = ...,
    eventCPUId: bool = ...,
    eventCategory: bool = ...,
    eventColor: bool = ...,
    eventCount: bool = ...,
    eventDescription: bool = ...,
    eventDuration: bool = ...,
    eventIndex: int = ...,
    eventName: bool = ...,
    eventStartTime: bool = ...,
    eventThreadId: bool = ...,
    instrumentMel: bool = ...,
    load: Queryable[str] = ...,
    output: Queryable[str] = ...,
    procedureDescription: str = ...,
    procedureName: str = ...,
    removeCategory: str = ...,
    reset: bool = ...,
    sampling: bool = ...,
    signalEvent: bool = ...,
    signalMelEvent: bool = ...,
) -> Union[bool, int, str]: ...
def profilerTool(
    *,
    edit: bool = ...,
    query: bool = ...,
    categoryView: bool = ...,
    collapseSelectedEvents: bool = ...,
    collapseSelectedEventsRepetition: bool = ...,
    cpuView: bool = ...,
    destroy: bool = ...,
    eventTypes: bool = ...,
    exists: bool = ...,
    expandSelectedEvents: bool = ...,
    expandSelectedEventsRepetition: bool = ...,
    findNext: bool = ...,
    findPrevious: bool = ...,
    frameAll: bool = ...,
    frameSelected: bool = ...,
    isolateSegment: int = ...,
    make: bool = ...,
    matchWholeWord: bool = ...,
    searchEvent: str = ...,
    segmentCount: bool = ...,
    showAllEvent: bool = ...,
    showCriticalPath: bool = ...,
    showHotspot: bool = ...,
    showSelectedEvents: bool = ...,
    showSelectedEventsRepetition: bool = ...,
    threadView: bool = ...,
    unisolateSegment: bool = ...,
) -> bool: ...
def progressBar(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    beginProgress: bool = ...,
    color: Tuple[float, float, float] = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    endProgress: bool = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    isCancelled: bool = ...,
    isInterruptable: bool = ...,
    isMainProgressBar: bool = ...,
    isObscured: bool = ...,
    manage: bool = ...,
    maxValue: Queryable[int] = ...,
    minValue: Queryable[int] = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    progress: Queryable[int] = ...,
    showPercentText: bool = ...,
    status: Queryable[str] = ...,
    statusBarMessage: str = ...,
    step: int = ...,
    useTemplate: str = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[str, Tuple[float, float, float], bool, int, Callable[..., Any]]: ...
def progressWindow(
    *,
    edit: bool = ...,
    query: bool = ...,
    endProgress: bool = ...,
    isCancelled: bool = ...,
    isInterruptable: bool = ...,
    maxValue: Queryable[int] = ...,
    minValue: Queryable[int] = ...,
    modal: bool = ...,
    progress: Queryable[int] = ...,
    showProgressPercentText: bool = ...,
    status: Queryable[str] = ...,
    step: int = ...,
    title: Queryable[str] = ...,
) -> Union[bool, int, str]: ...
def projectCurve(
    arg0: str = ...,
    arg1: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    direction: Queryable[Tuple[float, float, float]] = ...,
    directionX: Queryable[float] = ...,
    directionY: Queryable[float] = ...,
    directionZ: Queryable[float] = ...,
    nodeState: Queryable[int] = ...,
    tolerance: Queryable[float] = ...,
    useNormal: bool = ...,
    constructionHistory: bool = ...,
    name: str = ...,
    object: bool = ...,
    range: bool = ...,
) -> Union[List[str], bool, Tuple[float, float, float], float, int]: ...
def projectTangent(
    arg0: str = ...,
    arg1: str = ...,
    arg2: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    curvature: bool = ...,
    curvatureScale: Queryable[float] = ...,
    ignoreEdges: bool = ...,
    nodeState: Queryable[int] = ...,
    reverseTangent: bool = ...,
    rotate: Queryable[float] = ...,
    tangentDirection: Queryable[int] = ...,
    tangentScale: Queryable[float] = ...,
    constructionHistory: bool = ...,
    name: str = ...,
    object: bool = ...,
    replaceOriginal: bool = ...,
) -> Union[List[str], bool, float, int]: ...
def projectionContext(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    exists: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    name: str = ...,
) -> str: ...
def projectionManip(
    *,
    query: bool = ...,
    fitBBox: bool = ...,
    projType: int = ...,
    switchType: bool = ...,
) -> bool: ...
def promptDialog(
    *,
    query: bool = ...,
    backgroundColor: Tuple[float, float, float] = ...,
    button: Multiuse[str] = ...,
    cancelButton: str = ...,
    defaultButton: str = ...,
    dismissString: str = ...,
    message: str = ...,
    messageAlign: str = ...,
    parent: str = ...,
    scrollableField: bool = ...,
    style: str = ...,
    text: Queryable[str] = ...,
    title: str = ...,
) -> str: ...
def propModCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    animCurve: Queryable[str] = ...,
    animCurveFalloff: Queryable[Tuple[float, float]] = ...,
    animCurveParam: Queryable[str] = ...,
    direction: Queryable[Tuple[float, float, float]] = ...,
    exists: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    linear: Queryable[float] = ...,
    linearParam: Queryable[Tuple[float, float]] = ...,
    nurbsCurve: Queryable[str] = ...,
    powerCutoff: Queryable[float] = ...,
    powerCutoffParam: Queryable[Tuple[float, float]] = ...,
    powerDegree: Queryable[float] = ...,
    powerDegreeParam: Queryable[float] = ...,
    script: Queryable[str] = ...,
    scriptParam: Queryable[str] = ...,
    type: Queryable[int] = ...,
    worldspace: bool = ...,
) -> Union[str, Tuple[float, float], Tuple[float, float, float], float, int, bool]: ...
def propMove(
    arg0: float = ...,
    arg1: float = ...,
    arg2: float = ...,
    /,
    *args: str,
    percent: Multiuse[float] = ...,
    percentX: Multiuse[float] = ...,
    percentY: Multiuse[float] = ...,
    percentZ: Multiuse[float] = ...,
    pivot: Tuple[float, float, float] = ...,
    rotate: Tuple[float, float, float] = ...,
    scale: Tuple[float, float, float] = ...,
    translate: Tuple[float, float, float] = ...,
    worldSpace: bool = ...,
) -> bool: ...
def proximityWrap(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    addDrivers: Multiuse[str] = ...,
    applyUserDefaults: bool = ...,
    canBeAdded: Queryable[Multiuse[str]] = ...,
    driverIndices: bool = ...,
    dumpInfo: bool = ...,
    freeDriverIndex: bool = ...,
    removeDrivers: Multiuse[str] = ...,
) -> Union[List[str], Multiuse[str], bool]: ...
def psdChannelOutliner(
    *args: Any,
    edit: bool = ...,
    query: bool = ...,
    addChild: Multiuse[Tuple[str, str]] = ...,
    allItems: bool = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    doubleClickCommand: str = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    isObscured: bool = ...,
    manage: bool = ...,
    noBackground: bool = ...,
    numberOfItems: bool = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    psdParent: str = ...,
    removeAll: bool = ...,
    removeChild: Multiuse[str] = ...,
    select: str = ...,
    selectCommand: str = ...,
    selectItem: bool = ...,
    statusBarMessage: str = ...,
    useTemplate: str = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[str, bool, Tuple[float, float, float], int, Callable[..., Any]]: ...
def psdConvSolidTxOptions(*args: Any, **kwargs: Any) -> None: ...
def psdEditTextureFile(
    *args: Any,
    addChannel: Multiuse[str] = ...,
    addChannelColor: Multiuse[Tuple[str, float, float, float]] = ...,
    addChannelImage: Multiuse[Tuple[str, str]] = ...,
    deleteChannel: Multiuse[str] = ...,
    psdFileName: str = ...,
    snapShotImage: str = ...,
    uvSnapPostionTop: bool = ...,
) -> bool: ...
def psdExport(
    *args: Any,
    query: bool = ...,
    alphaChannelIdx: Queryable[int] = ...,
    bytesPerChannel: Queryable[int] = ...,
    emptyLayerSet: bool = ...,
    format: Queryable[str] = ...,
    layerName: Queryable[str] = ...,
    layerSetName: str = ...,
    outFileName: Queryable[str] = ...,
    preMultiplyAlpha: bool = ...,
    psdFileName: str = ...,
) -> Union[bool, int, str]: ...
def psdTextureFile(
    *args: Any,
    channelRGB: Multiuse[Tuple[str, int, int, int, int]] = ...,
    channels: Multiuse[Tuple[str, int, bool]] = ...,
    imageFileName: Multiuse[Tuple[str, str, int]] = ...,
    psdFileName: str = ...,
    snapShotImageName: str = ...,
    uvSnapPostionTop: bool = ...,
    xResolution: int = ...,
    yResolution: int = ...,
) -> bool: ...
def python(arg0: str = ..., /) -> None: ...
def querySubdiv(
    *args: Any, action: int = ..., level: int = ..., relative: bool = ...
) -> bool: ...
def quit(*, abort: bool = ..., exitCode: int = ..., force: bool = ...) -> bool: ...
def radial(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    attenuation: Queryable[float] = ...,
    magnitude: Queryable[float] = ...,
    maxDistance: Queryable[float] = ...,
    name: Queryable[str] = ...,
    perVertex: bool = ...,
    position: Queryable[Multiuse[Tuple[float, float, float]]] = ...,
    torusSectionRadius: Queryable[float] = ...,
    type: Queryable[float] = ...,
    volumeExclusion: bool = ...,
    volumeOffset: Queryable[Tuple[float, float, float]] = ...,
    volumeShape: Queryable[str] = ...,
    volumeSweep: Queryable[float] = ...,
) -> Union[
    str, float, bool, Multiuse[Tuple[float, float, float]], Tuple[float, float, float]
]: ...
def radioButton(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    align: Queryable[str] = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    changeCommand: Callable[..., Any] = ...,
    collection: str = ...,
    data: Queryable[int] = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    editable: bool = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    isObscured: bool = ...,
    label: Queryable[str] = ...,
    manage: bool = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    offCommand: Callable[..., Any] = ...,
    onCommand: Callable[..., Any] = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    recomputeSize: bool = ...,
    select: bool = ...,
    statusBarMessage: str = ...,
    useTemplate: str = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[str, Tuple[float, float, float], int, bool, Callable[..., Any]]: ...
def radioButtonGrp(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    adjustableColumn: int = ...,
    adjustableColumn2: int = ...,
    adjustableColumn3: int = ...,
    adjustableColumn4: int = ...,
    adjustableColumn5: int = ...,
    adjustableColumn6: int = ...,
    annotation: Queryable[str] = ...,
    annotation1: Queryable[str] = ...,
    annotation2: Queryable[str] = ...,
    annotation3: Queryable[str] = ...,
    annotation4: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    changeCommand: Callable[..., Any] = ...,
    changeCommand1: Callable[..., Any] = ...,
    changeCommand2: Callable[..., Any] = ...,
    changeCommand3: Callable[..., Any] = ...,
    changeCommand4: Callable[..., Any] = ...,
    columnAlign: Multiuse[Tuple[int, str]] = ...,
    columnAlign2: Tuple[str, str] = ...,
    columnAlign3: Tuple[str, str, str] = ...,
    columnAlign4: Tuple[str, str, str, str] = ...,
    columnAlign5: Tuple[str, str, str, str, str] = ...,
    columnAlign6: Tuple[str, str, str, str, str, str] = ...,
    columnAttach: Multiuse[Tuple[int, str, int]] = ...,
    columnAttach2: Tuple[str, str] = ...,
    columnAttach3: Tuple[str, str, str] = ...,
    columnAttach4: Tuple[str, str, str, str] = ...,
    columnAttach5: Tuple[str, str, str, str, str] = ...,
    columnAttach6: Tuple[str, str, str, str, str, str] = ...,
    columnOffset2: Tuple[int, int] = ...,
    columnOffset3: Tuple[int, int, int] = ...,
    columnOffset4: Tuple[int, int, int, int] = ...,
    columnOffset5: Tuple[int, int, int, int, int] = ...,
    columnOffset6: Tuple[int, int, int, int, int, int] = ...,
    columnWidth: Multiuse[Tuple[int, int]] = ...,
    columnWidth1: int = ...,
    columnWidth2: Tuple[int, int] = ...,
    columnWidth3: Tuple[int, int, int] = ...,
    columnWidth4: Tuple[int, int, int, int] = ...,
    columnWidth5: Tuple[int, int, int, int, int] = ...,
    columnWidth6: Tuple[int, int, int, int, int, int] = ...,
    data1: Queryable[int] = ...,
    data2: Queryable[int] = ...,
    data3: Queryable[int] = ...,
    data4: Queryable[int] = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    editable: bool = ...,
    enable: bool = ...,
    enable1: bool = ...,
    enable2: bool = ...,
    enable3: bool = ...,
    enable4: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    isObscured: bool = ...,
    label: Queryable[str] = ...,
    label1: Queryable[str] = ...,
    label2: Queryable[str] = ...,
    label3: Queryable[str] = ...,
    label4: Queryable[str] = ...,
    labelAnnotation: Queryable[str] = ...,
    labelArray2: Queryable[Tuple[str, str]] = ...,
    labelArray3: Queryable[Tuple[str, str, str]] = ...,
    labelArray4: Queryable[Tuple[str, str, str, str]] = ...,
    manage: bool = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    numberOfRadioButtons: Queryable[int] = ...,
    offCommand: Callable[..., Any] = ...,
    offCommand1: Callable[..., Any] = ...,
    offCommand2: Callable[..., Any] = ...,
    offCommand3: Callable[..., Any] = ...,
    offCommand4: Callable[..., Any] = ...,
    onCommand: Callable[..., Any] = ...,
    onCommand1: Callable[..., Any] = ...,
    onCommand2: Callable[..., Any] = ...,
    onCommand3: Callable[..., Any] = ...,
    onCommand4: Callable[..., Any] = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    rowAttach: Multiuse[Tuple[int, str, int]] = ...,
    select: Queryable[int] = ...,
    shareCollection: str = ...,
    statusBarMessage: str = ...,
    useTemplate: str = ...,
    vertical: bool = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[
    str,
    Tuple[float, float, float],
    int,
    bool,
    Tuple[str, str],
    Tuple[str, str, str],
    Tuple[str, str, str, str],
    Callable[..., Any],
]: ...
def radioCollection(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    collectionItemArray: bool = ...,
    defineTemplate: str = ...,
    exists: bool = ...,
    gl: bool = ...,
    numberOfCollectionItems: bool = ...,
    parent: str = ...,
    select: Queryable[str] = ...,
    useTemplate: str = ...,
) -> Union[str, bool]: ...
def radioMenuItemCollection(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    defineTemplate: str = ...,
    exists: bool = ...,
    gl: bool = ...,
    parent: str = ...,
    useTemplate: str = ...,
) -> Union[str, bool]: ...
def rampColorPort(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    isObscured: bool = ...,
    manage: bool = ...,
    noBackground: bool = ...,
    node: str = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    selectedColorControl: str = ...,
    selectedInterpControl: str = ...,
    selectedPositionControl: str = ...,
    statusBarMessage: str = ...,
    useTemplate: str = ...,
    verticalLayout: bool = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[str, Tuple[float, float, float], bool, int, Callable[..., Any]]: ...
def rampWidget(*args: Any, **kwargs: Any) -> None: ...
def rampWidgetAttrless(*args: Any, **kwargs: Any) -> None: ...
def rangeControl(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    changedCommand: Callable[..., Any] = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    isObscured: bool = ...,
    manage: bool = ...,
    maxRange: Queryable[int] = ...,
    minRange: Queryable[int] = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    statusBarMessage: str = ...,
    useTemplate: str = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
    widthHeight: Tuple[int, int] = ...,
) -> Union[str, Tuple[float, float, float], bool, int, Callable[..., Any]]: ...
def readPDC(*args: str, file: str = ..., test: bool = ...) -> None: ...
def readTake(
    *,
    angle: str = ...,
    device: str = ...,
    frequency: float = ...,
    linear: str = ...,
    noTime: bool = ...,
    take: str = ...,
) -> bool: ...
def rebuildCurve(
    arg0: str = ...,
    arg1: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    degree: Queryable[int] = ...,
    endKnots: Queryable[int] = ...,
    fitRebuild: bool = ...,
    keepControlPoints: bool = ...,
    keepEndPoints: bool = ...,
    keepRange: Queryable[int] = ...,
    keepTangents: bool = ...,
    nodeState: Queryable[int] = ...,
    rebuildType: Queryable[int] = ...,
    smartSurfaceCurveRebuild: bool = ...,
    spans: Queryable[int] = ...,
    tolerance: Queryable[float] = ...,
    constructionHistory: bool = ...,
    name: str = ...,
    object: bool = ...,
    range: bool = ...,
    replaceOriginal: bool = ...,
) -> Union[List[str], bool, int, float]: ...
def rebuildSurface(
    arg0: str = ...,
    arg1: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    degreeU: Queryable[int] = ...,
    degreeV: Queryable[int] = ...,
    direction: Queryable[int] = ...,
    endKnots: Queryable[int] = ...,
    fitRebuild: Queryable[int] = ...,
    keepControlPoints: bool = ...,
    keepCorners: bool = ...,
    keepRange: Queryable[int] = ...,
    nodeState: Queryable[int] = ...,
    rebuildType: Queryable[int] = ...,
    spansU: Queryable[int] = ...,
    spansV: Queryable[int] = ...,
    tolerance: Queryable[float] = ...,
    constructionHistory: bool = ...,
    name: str = ...,
    object: bool = ...,
    polygon: int = ...,
    replaceOriginal: bool = ...,
) -> Union[List[str], bool, int, float]: ...
def recordAttr(
    *args: str, query: bool = ..., attribute: Multiuse[str] = ..., delete: bool = ...
) -> bool: ...
def recordDevice(
    *,
    query: bool = ...,
    cleanup: bool = ...,
    data: bool = ...,
    device: Multiuse[str] = ...,
    duration: Queryable[int] = ...,
    playback: bool = ...,
    state: bool = ...,
    wait: bool = ...,
) -> Union[bool, int]: ...
def redo() -> bool: ...
def reference(*args: str) -> None: ...
def referenceEdit(
    *args: str,
    applyFailedEdits: bool = ...,
    changeEditTarget: Tuple[str, str] = ...,
    failedEdits: bool = ...,
    removeEdits: bool = ...,
    successfulEdits: bool = ...,
    editCommand: Queryable[Multiuse[str]] = ...,
    onReferenceNode: Queryable[Multiuse[str]] = ...,
) -> Union[bool, Multiuse[str]]: ...
def referenceQuery(
    *args: str,
    child: bool = ...,
    isExportEdits: bool = ...,
    isLoaded: bool = ...,
    liveEdits: bool = ...,
    dagPath: bool = ...,
    editAttrs: bool = ...,
    editNodes: bool = ...,
    editStrings: bool = ...,
    failedEdits: bool = ...,
    filename: bool = ...,
    isNodeReferenced: bool = ...,
    isPreviewOnly: bool = ...,
    namespace: bool = ...,
    nodes: bool = ...,
    parent: bool = ...,
    parentNamespace: bool = ...,
    referenceNode: bool = ...,
    shortName: bool = ...,
    showDagPath: bool = ...,
    showFullPath: bool = ...,
    showNamespace: bool = ...,
    successfulEdits: bool = ...,
    topReference: bool = ...,
    unresolvedName: bool = ...,
    withoutCopyNumber: bool = ...,
    editCommand: Queryable[Multiuse[str]] = ...,
    onReferenceNode: Queryable[Multiuse[str]] = ...,
) -> Union[List[str], Multiuse[str]]: ...
def refineSubdivSelectionList(*args: Any) -> bool: ...
def refresh(
    *,
    currentView: bool = ...,
    fileExtension: str = ...,
    filename: str = ...,
    force: bool = ...,
    suspend: bool = ...,
) -> bool: ...
def refreshEditorTemplates() -> bool: ...
def regionSelectKeyCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    bottomManip: Queryable[float] = ...,
    exists: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    leftManip: Queryable[float] = ...,
    name: str = ...,
    rightManip: Queryable[float] = ...,
    topManip: Queryable[float] = ...,
) -> Union[float, str]: ...
def rehash() -> None: ...
def relationship(
    arg0: str = ...,
    arg1: str = ...,
    /,
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    b: bool = ...,
    relationshipData: Queryable[Multiuse[str]] = ...,
) -> Union[bool, Multiuse[str]]: ...
def reloadImage(arg0: str = ..., arg1: str = ..., /) -> bool: ...
def rememberCtxSettings(arg0: str = ..., /) -> bool: ...
def removeJoint(*args: str) -> bool: ...
def removeListItem() -> None: ...
def removeMultiInstance(
    arg0: str = ..., /, *, allChildren: bool = ..., b: bool = ...
) -> bool: ...
def rename(
    arg0: str = ..., arg1: str = ..., /, *, ignoreShape: bool = ..., uuid: bool = ...
) -> str: ...
def renameAttr(*args: str) -> str: ...
def renameUI(arg0: str = ..., arg1: str = ..., /) -> str: ...
def render(
    arg0: str = ...,
    /,
    *args: str,
    abortMissingTexture: bool = ...,
    batch: bool = ...,
    keepPreImage: bool = ...,
    layer: str = ...,
    nglowpass: bool = ...,
    nshadows: bool = ...,
    replace: bool = ...,
    xresolution: int = ...,
    yresolution: int = ...,
) -> str: ...
def renderGlobalsNode(
    arg0: str = ...,
    /,
    *,
    name: str = ...,
    parent: str = ...,
    renderQuality: str = ...,
    renderResolution: str = ...,
    shared: bool = ...,
    skipSelect: bool = ...,
) -> str: ...
def renderInfo(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    castShadows: bool = ...,
    chordHeight: float = ...,
    chordHeightRatio: float = ...,
    doubleSided: bool = ...,
    edgeSwap: bool = ...,
    minScreen: float = ...,
    name: str = ...,
    opposite: bool = ...,
    smoothShading: bool = ...,
    unum: int = ...,
    useChordHeight: bool = ...,
    useChordHeightRatio: bool = ...,
    useDefaultLights: bool = ...,
    useMinScreen: bool = ...,
    utype: int = ...,
    vnum: int = ...,
    vtype: int = ...,
) -> bool: ...
def renderLayerMembers() -> None: ...
def renderLayerPostProcess(
    *, query: bool = ..., keepImages: bool = ..., sceneName: Queryable[str] = ...
) -> Union[bool, str]: ...
def renderManip(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    camera: Queryable[Tuple[bool, bool, bool, bool, bool]] = ...,
    light: Queryable[Tuple[bool, bool, bool]] = ...,
    spotLight: Queryable[Tuple[bool, bool, bool, bool, bool, bool, bool]] = ...,
    state: bool = ...,
) -> Union[
    bool,
    Tuple[bool, bool, bool, bool, bool],
    Tuple[bool, bool, bool],
    Tuple[bool, bool, bool, bool, bool, bool, bool],
]: ...
def renderPartition(arg0: str = ..., /) -> str: ...
def renderPassRegistry(
    *,
    channels: int = ...,
    isPassSupported: bool = ...,
    passID: str = ...,
    passName: bool = ...,
    renderer: str = ...,
    supportedChannelCounts: bool = ...,
    supportedDataTypes: bool = ...,
    supportedPassSemantics: bool = ...,
    supportedRenderPassNames: bool = ...,
    supportedRenderPasses: bool = ...,
) -> List[str]: ...
def renderQualityNode(
    arg0: str = ...,
    /,
    *,
    name: str = ...,
    parent: str = ...,
    shared: bool = ...,
    skipSelect: bool = ...,
) -> str: ...
def renderSettings(
    *,
    camera: str = ...,
    customTokenString: str = ...,
    firstImageName: bool = ...,
    fullPath: bool = ...,
    fullPathTemp: bool = ...,
    genericFrameImageName: str = ...,
    imageGenericName: bool = ...,
    lastImageName: bool = ...,
    layer: str = ...,
    leaveUnmatchedTokens: bool = ...,
) -> List[str]: ...
def renderSetup(*, query: bool = ..., renderLayers: bool = ...) -> None: ...
def renderSetupFind() -> None: ...
def renderSetupLegacyLayer(*args: str) -> None: ...
def renderSetupLocalOverride(*, query: bool = ..., state: bool = ...) -> None: ...
def renderSetupPostApply() -> None: ...
def renderSetupSwitchVisibleRenderLayer() -> None: ...
def renderThumbnailUpdate(
    arg0: bool = ..., /, *, query: bool = ..., forceUpdate: str = ...
) -> bool: ...
def renderWindowEditor(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    autoResize: bool = ...,
    blendMode: Queryable[int] = ...,
    caption: Queryable[str] = ...,
    changeCommand: Queryable[Tuple[str, str, str, str]] = ...,
    clear: Queryable[Tuple[int, int, float, float, float]] = ...,
    cmEnabled: bool = ...,
    colorManage: bool = ...,
    compDisplay: Queryable[int] = ...,
    compImageFile: Queryable[str] = ...,
    control: bool = ...,
    currentCamera: Queryable[str] = ...,
    currentCameraRig: Queryable[str] = ...,
    defineTemplate: str = ...,
    displayImage: Queryable[int] = ...,
    displayImageViewCount: Queryable[int] = ...,
    displayStyle: Queryable[str] = ...,
    docTag: Queryable[str] = ...,
    doubleBuffer: bool = ...,
    drawAxis: bool = ...,
    editorName: bool = ...,
    exists: bool = ...,
    exposure: Queryable[float] = ...,
    filter: Queryable[str] = ...,
    forceMainConnection: Queryable[str] = ...,
    frameImage: bool = ...,
    frameRegion: bool = ...,
    gamma: Queryable[float] = ...,
    highlightConnection: Queryable[str] = ...,
    loadImage: str = ...,
    lockMainConnection: bool = ...,
    mainListConnection: Queryable[str] = ...,
    marquee: Queryable[Tuple[float, float, float, float]] = ...,
    nbImages: bool = ...,
    nextViewImage: bool = ...,
    outputColorManage: bool = ...,
    panel: Queryable[str] = ...,
    parent: Queryable[str] = ...,
    pcaption: Queryable[str] = ...,
    realSize: bool = ...,
    refresh: bool = ...,
    removeAllImages: bool = ...,
    removeImage: bool = ...,
    resetRegion: bool = ...,
    resetViewImage: bool = ...,
    saveImage: bool = ...,
    scaleBlue: Queryable[float] = ...,
    scaleGreen: Queryable[float] = ...,
    scaleRed: Queryable[float] = ...,
    selectionConnection: Queryable[str] = ...,
    showRegion: Queryable[Tuple[int, int]] = ...,
    singleBuffer: bool = ...,
    snapshot: Queryable[Tuple[str, int, int]] = ...,
    snapshotMode: bool = ...,
    stateString: bool = ...,
    stereo: Queryable[int] = ...,
    stereoImageOrientation: Queryable[Tuple[str, str]] = ...,
    stereoMode: Queryable[str] = ...,
    toggle: bool = ...,
    unParent: bool = ...,
    unlockMainConnection: bool = ...,
    updateMainConnection: bool = ...,
    useTemplate: str = ...,
    viewImageCount: Queryable[int] = ...,
    viewTransformName: Queryable[str] = ...,
    writeImage: str = ...,
) -> Union[
    str,
    bool,
    int,
    Tuple[str, str, str, str],
    Tuple[int, int, float, float, float],
    float,
    Tuple[float, float, float, float],
    Tuple[int, int],
    Tuple[str, int, int],
    Tuple[str, str],
]: ...
def renderWindowSelectContext(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    exists: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
) -> str: ...
def renderer(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    addGlobalsNode: Queryable[str] = ...,
    addGlobalsTab: Tuple[str, str, str] = ...,
    batchRenderOptionsProcedure: Queryable[str] = ...,
    batchRenderOptionsStringProcedure: Queryable[str] = ...,
    batchRenderProcedure: Queryable[str] = ...,
    cancelBatchRenderProcedure: Queryable[str] = ...,
    changeIprRegionProcedure: Queryable[str] = ...,
    commandRenderProcedure: Queryable[str] = ...,
    exists: bool = ...,
    globalsNodes: bool = ...,
    globalsTabCreateProcNames: bool = ...,
    globalsTabLabels: bool = ...,
    globalsTabUpdateProcNames: bool = ...,
    iprOptionsMenuLabel: Queryable[str] = ...,
    iprOptionsProcedure: Queryable[str] = ...,
    iprOptionsSubMenuProcedure: Queryable[str] = ...,
    iprRenderProcedure: Queryable[str] = ...,
    iprRenderSubMenuProcedure: Queryable[str] = ...,
    isRunningIprProcedure: Queryable[str] = ...,
    logoCallbackProcedure: Queryable[str] = ...,
    logoImageName: Queryable[str] = ...,
    materialViewRendererList: bool = ...,
    materialViewRendererPause: bool = ...,
    materialViewRendererSuspend: bool = ...,
    namesOfAvailableRenderers: bool = ...,
    pauseIprRenderProcedure: Queryable[str] = ...,
    polyPrelightProcedure: Queryable[str] = ...,
    refreshIprRenderProcedure: Queryable[str] = ...,
    renderDiagnosticsProcedure: Queryable[str] = ...,
    renderGlobalsProcedure: Queryable[str] = ...,
    renderMenuProcedure: Queryable[str] = ...,
    renderOptionsProcedure: Queryable[str] = ...,
    renderProcedure: Queryable[str] = ...,
    renderRegionProcedure: Queryable[str] = ...,
    renderSequenceProcedure: Queryable[str] = ...,
    rendererUIName: Queryable[str] = ...,
    renderingEditorsSubMenuProcedure: Queryable[str] = ...,
    showBatchRenderLogProcedure: Queryable[str] = ...,
    showBatchRenderProcedure: Queryable[str] = ...,
    showRenderLogProcedure: Queryable[str] = ...,
    startIprRenderProcedure: Queryable[str] = ...,
    stopIprRenderProcedure: Queryable[str] = ...,
    supportColorManagement: bool = ...,
    supportUFECameras: bool = ...,
    textureBakingProcedure: Queryable[str] = ...,
    unregisterRenderer: bool = ...,
) -> Union[bool, str]: ...
def reorder(
    *args: str, back: bool = ..., front: bool = ..., relative: int = ...
) -> bool: ...
def reorderContainer(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    back: bool = ...,
    front: bool = ...,
    relative: Queryable[int] = ...,
) -> Union[bool, int]: ...
def reorderDeformers(
    arg0: str = ..., arg1: str = ..., /, *args: str, name: str = ...
) -> bool: ...
def repeatLast(
    *,
    edit: bool = ...,
    query: bool = ...,
    addCommand: str = ...,
    addCommandLabel: str = ...,
    commandList: int = ...,
    commandNameList: int = ...,
    historyLimit: int = ...,
    item: int = ...,
    numberOfHistoryItems: bool = ...,
    pythonCommand: bool = ...,
) -> None: ...
def replaceCacheFrames() -> None: ...
def replaceCacheFramesOpt() -> None: ...
def requires(
    arg0: str = ...,
    arg1: str = ...,
    /,
    *,
    dataType: Multiuse[str] = ...,
    nodeType: Multiuse[str] = ...,
) -> bool: ...
def reroot(arg0: str = ..., /) -> bool: ...
def resampleFluid(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    resampleDepth: Queryable[int] = ...,
    resampleHeight: Queryable[int] = ...,
    resampleWidth: Queryable[int] = ...,
) -> Union[bool, int]: ...
def resetTool(arg0: str = ..., /) -> bool: ...
def resolutionNode(
    arg0: str = ...,
    /,
    *,
    name: str = ...,
    parent: str = ...,
    shared: bool = ...,
    skipSelect: bool = ...,
) -> str: ...
def resourceManager(
    *, nameFilter: str = ..., saveAs: Tuple[str, str] = ...
) -> bool: ...
def retimeHelper(
    *,
    edit: bool = ...,
    query: bool = ...,
    deleteFrame: int = ...,
    frame: float = ...,
    lockBar: Tuple[int, int] = ...,
    locks: int = ...,
    moveFrame: Tuple[int, float] = ...,
    mouseOver: bool = ...,
) -> None: ...
def retimeKeyCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    exists: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    moveByFrame: int = ...,
    name: str = ...,
    snapOnFrame: bool = ...,
) -> Union[bool, str]: ...
def reverseCurve(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    nodeState: Queryable[int] = ...,
    constructionHistory: bool = ...,
    curveOnSurface: bool = ...,
    name: str = ...,
    object: bool = ...,
    range: bool = ...,
    replaceOriginal: bool = ...,
) -> Union[List[str], bool, int]: ...
def reverseSurface(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    direction: Queryable[int] = ...,
    nodeState: Queryable[int] = ...,
    constructionHistory: bool = ...,
    name: str = ...,
    object: bool = ...,
    replaceOriginal: bool = ...,
) -> Union[List[str], bool, int]: ...
def revolve(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    autoCorrectNormal: bool = ...,
    axis: Queryable[Tuple[float, float, float]] = ...,
    axisChoice: Queryable[int] = ...,
    axisX: Queryable[float] = ...,
    axisY: Queryable[float] = ...,
    axisZ: Queryable[float] = ...,
    bridge: bool = ...,
    caching: bool = ...,
    computePivotAndAxis: Queryable[int] = ...,
    degree: Queryable[int] = ...,
    endSweep: Queryable[float] = ...,
    nodeState: Queryable[int] = ...,
    pivot: Queryable[Tuple[float, float, float]] = ...,
    pivotX: Queryable[float] = ...,
    pivotY: Queryable[float] = ...,
    pivotZ: Queryable[float] = ...,
    radius: Queryable[float] = ...,
    radiusAnchor: Queryable[float] = ...,
    sections: Queryable[int] = ...,
    startSweep: Queryable[float] = ...,
    tolerance: Queryable[float] = ...,
    useTolerance: bool = ...,
    constructionHistory: bool = ...,
    name: str = ...,
    object: bool = ...,
    polygon: int = ...,
    range: bool = ...,
    rebuild: bool = ...,
    useLocalPivot: bool = ...,
) -> Union[List[str], bool, Tuple[float, float, float], int, float]: ...
def rigidBody(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    active: bool = ...,
    angularVelocity: bool = ...,
    applyForceAt: Queryable[str] = ...,
    bounciness: Queryable[float] = ...,
    cache: bool = ...,
    centerOfMass: Queryable[Tuple[float, float, float]] = ...,
    collisions: bool = ...,
    contactCount: bool = ...,
    contactName: bool = ...,
    contactPosition: bool = ...,
    damping: Queryable[float] = ...,
    deleteCache: bool = ...,
    dynamicFriction: Queryable[float] = ...,
    force: bool = ...,
    ignore: bool = ...,
    impulse: Tuple[float, float, float] = ...,
    impulsePosition: Tuple[float, float, float] = ...,
    initialAngularVelocity: Queryable[Tuple[float, float, float]] = ...,
    initialVelocity: Queryable[Tuple[float, float, float]] = ...,
    layer: Queryable[int] = ...,
    lockCenterOfMass: bool = ...,
    mass: Queryable[float] = ...,
    name: Queryable[str] = ...,
    orientation: Queryable[Tuple[float, float, float]] = ...,
    particleCollision: bool = ...,
    passive: bool = ...,
    position: Queryable[Tuple[float, float, float]] = ...,
    removeShape: Queryable[str] = ...,
    solver: Queryable[str] = ...,
    spinImpulse: Tuple[float, float, float] = ...,
    standInObject: Queryable[str] = ...,
    staticFriction: Queryable[float] = ...,
    tesselationFactor: Queryable[int] = ...,
    velocity: bool = ...,
) -> Union[str, bool, float, Tuple[float, float, float], int]: ...
def rigidSolver(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    autoTolerances: bool = ...,
    bounciness: bool = ...,
    cacheData: bool = ...,
    collide: bool = ...,
    collisionTolerance: Queryable[float] = ...,
    contactData: bool = ...,
    create: bool = ...,
    current: bool = ...,
    deleteCache: bool = ...,
    displayCenterOfMass: bool = ...,
    displayConstraint: bool = ...,
    displayVelocity: bool = ...,
    dynamics: bool = ...,
    friction: bool = ...,
    interpenetrate: bool = ...,
    interpenetrationCheck: bool = ...,
    name: Queryable[str] = ...,
    rigidBodies: bool = ...,
    rigidBodyCount: bool = ...,
    showCollision: bool = ...,
    showInterpenetration: bool = ...,
    solverMethod: Queryable[int] = ...,
    startTime: Queryable[float] = ...,
    state: bool = ...,
    statistics: bool = ...,
    stepSize: Queryable[float] = ...,
    velocityVectorScale: Queryable[float] = ...,
) -> Union[bool, float, str, int]: ...
def roll(
    arg0: str = ...,
    /,
    *,
    absolute: bool = ...,
    degree: float = ...,
    relative: bool = ...,
) -> bool: ...
def rollCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    alternateContext: bool = ...,
    exists: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    name: str = ...,
    rollScale: Queryable[float] = ...,
    toolName: Queryable[str] = ...,
) -> Union[str, bool, float]: ...
def rotate(
    arg0: float = ...,
    arg1: float = ...,
    arg2: float = ...,
    /,
    *args: str,
    absolute: bool = ...,
    centerPivot: bool = ...,
    componentSpace: bool = ...,
    constrainAlongNormal: bool = ...,
    deletePriorHistory: bool = ...,
    euler: bool = ...,
    forceOrderXYZ: bool = ...,
    objectCenterPivot: bool = ...,
    objectSpace: bool = ...,
    orientAxes: Tuple[float, float, float] = ...,
    pivot: Tuple[float, float, float] = ...,
    preserveChildPosition: bool = ...,
    preserveGeometryPosition: bool = ...,
    preserveUV: bool = ...,
    reflection: bool = ...,
    reflectionAboutBBox: bool = ...,
    reflectionAboutOrigin: bool = ...,
    reflectionAboutX: bool = ...,
    reflectionAboutY: bool = ...,
    reflectionAboutZ: bool = ...,
    reflectionTolerance: float = ...,
    relative: bool = ...,
    rotateX: bool = ...,
    rotateXY: bool = ...,
    rotateXYZ: bool = ...,
    rotateXZ: bool = ...,
    rotateY: bool = ...,
    rotateYZ: bool = ...,
    rotateZ: bool = ...,
    symNegative: bool = ...,
    translate: bool = ...,
    worldSpace: bool = ...,
    xformConstraint: str = ...,
) -> bool: ...
def rotationInterpolation(
    *args: str, query: bool = ..., convert: Queryable[str] = ...
) -> Union[bool, str]: ...
def roundCRCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    append: bool = ...,
    autoCreate: bool = ...,
    activeNodes: bool = ...,
    caching: bool = ...,
    currentEdge: bool = ...,
    currentEdgeRadius: bool = ...,
    constructionHistory: bool = ...,
    exists: bool = ...,
    frozen: bool = ...,
    image1: str = ...,
    image2: str = ...,
    image3: str = ...,
    immediate: bool = ...,
    name: str = ...,
    nodeState: int = ...,
    object: bool = ...,
    radius: Multiuse[float] = ...,
    reset: bool = ...,
    radiusToUse: float = ...,
    toolNode: bool = ...,
    tolerance: float = ...,
    useGlobalTolerance: bool = ...,
) -> None: ...
def roundConstantRadius(
    arg0: str = ...,
    /,
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    append: bool = ...,
    constructionHistory: bool = ...,
    name: str = ...,
    object: bool = ...,
    radiuss: Multiuse[float] = ...,
    side: Multiuse[Tuple[str, int]] = ...,
    sidea: Multiuse[int] = ...,
    sideb: Multiuse[int] = ...,
) -> List[str]: ...
def rowColumnLayout(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    adjustableColumn: int = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    childArray: bool = ...,
    columnAlign: Multiuse[Tuple[int, str]] = ...,
    columnAttach: Multiuse[Tuple[int, str, int]] = ...,
    columnOffset: Multiuse[Tuple[int, str, int]] = ...,
    columnSpacing: Multiuse[Tuple[int, int]] = ...,
    columnWidth: Multiuse[Tuple[int, int]] = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    generalSpacing: int = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    isObscured: bool = ...,
    manage: bool = ...,
    margins: int = ...,
    margins4: Tuple[int, int, int, int] = ...,
    noBackground: bool = ...,
    numberOfChildren: bool = ...,
    numberOfColumns: Queryable[int] = ...,
    numberOfPopupMenus: bool = ...,
    numberOfRows: Queryable[int] = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    rowAlign: Multiuse[Tuple[int, str]] = ...,
    rowAttach: Multiuse[Tuple[int, str, int]] = ...,
    rowHeight: Multiuse[Tuple[int, int]] = ...,
    rowOffset: Multiuse[Tuple[int, str, int]] = ...,
    rowSpacing: Multiuse[Tuple[int, int]] = ...,
    statusBarMessage: str = ...,
    useTemplate: str = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[str, Tuple[float, float, float], bool, int, Callable[..., Any]]: ...
def rowLayout(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    adjustableColumn: Multiuse[int] = ...,
    adjustableColumn1: int = ...,
    adjustableColumn2: int = ...,
    adjustableColumn3: int = ...,
    adjustableColumn4: int = ...,
    adjustableColumn5: int = ...,
    adjustableColumn6: int = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    childArray: bool = ...,
    columnAlign: Multiuse[Tuple[int, str]] = ...,
    columnAlign1: str = ...,
    columnAlign2: Tuple[str, str] = ...,
    columnAlign3: Tuple[str, str, str] = ...,
    columnAlign4: Tuple[str, str, str, str] = ...,
    columnAlign5: Tuple[str, str, str, str, str] = ...,
    columnAlign6: Tuple[str, str, str, str, str, str] = ...,
    columnAttach: Multiuse[Tuple[int, str, int]] = ...,
    columnAttach1: str = ...,
    columnAttach2: Tuple[str, str] = ...,
    columnAttach3: Tuple[str, str, str] = ...,
    columnAttach4: Tuple[str, str, str, str] = ...,
    columnAttach5: Tuple[str, str, str, str, str] = ...,
    columnAttach6: Tuple[str, str, str, str, str, str] = ...,
    columnOffset1: int = ...,
    columnOffset2: Tuple[int, int] = ...,
    columnOffset3: Tuple[int, int, int] = ...,
    columnOffset4: Tuple[int, int, int, int] = ...,
    columnOffset5: Tuple[int, int, int, int, int] = ...,
    columnOffset6: Tuple[int, int, int, int, int, int] = ...,
    columnWidth: Multiuse[Tuple[int, int]] = ...,
    columnWidth1: int = ...,
    columnWidth2: Tuple[int, int] = ...,
    columnWidth3: Tuple[int, int, int] = ...,
    columnWidth4: Tuple[int, int, int, int] = ...,
    columnWidth5: Tuple[int, int, int, int, int] = ...,
    columnWidth6: Tuple[int, int, int, int, int, int] = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    generalSpacing: int = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    isObscured: bool = ...,
    manage: bool = ...,
    margins: int = ...,
    margins4: Tuple[int, int, int, int] = ...,
    noBackground: bool = ...,
    numberOfChildren: bool = ...,
    numberOfColumns: Queryable[int] = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    rowAttach: Multiuse[Tuple[int, str, int]] = ...,
    statusBarMessage: str = ...,
    useTemplate: str = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[str, Tuple[float, float, float], bool, int, Callable[..., Any]]: ...
def runTimeCommand(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    addKeyword: Multiuse[str] = ...,
    addTag: Multiuse[str] = ...,
    annotation: Queryable[str] = ...,
    category: Queryable[str] = ...,
    categoryArray: bool = ...,
    command: Queryable[Callable[..., Any]] = ...,
    commandArray: bool = ...,
    commandLanguage: Queryable[str] = ...,
    default: bool = ...,
    defaultCommandArray: bool = ...,
    delete: bool = ...,
    exists: bool = ...,
    helpUrl: Queryable[str] = ...,
    hotkeyCtx: Queryable[str] = ...,
    image: Queryable[str] = ...,
    keywords: Queryable[str] = ...,
    label: Queryable[str] = ...,
    longAnnotation: Queryable[str] = ...,
    numberOfCommands: bool = ...,
    numberOfDefaultCommands: bool = ...,
    numberOfUserCommands: bool = ...,
    plugin: Queryable[str] = ...,
    save: bool = ...,
    showInHotkeyEditor: bool = ...,
    tags: Queryable[str] = ...,
    userCommandArray: bool = ...,
    version: Queryable[str] = ...,
) -> Union[str, bool, Callable[..., Any]]: ...
def runup(
    *,
    cache: bool = ...,
    fromPreviousFrame: bool = ...,
    fromStartFrame: bool = ...,
    maxFrame: int = ...,
    state: bool = ...,
) -> str: ...
def safemodecheckhash() -> None: ...
def sampleImage(
    *args: str, fastSample: bool = ..., resolution: Tuple[int, str] = ...
) -> bool: ...
def saveAllShelves() -> bool: ...
def saveFluid(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    currentTime: Queryable[int] = ...,
    endTime: Queryable[int] = ...,
    startTime: Queryable[int] = ...,
) -> Union[bool, int]: ...
def saveImage(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    currentView: bool = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    image: Queryable[str] = ...,
    isObscured: bool = ...,
    manage: bool = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    objectThumbnail: str = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    sceneFile: str = ...,
    statusBarMessage: str = ...,
    useTemplate: str = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[str, Tuple[float, float, float], bool, int, Callable[..., Any]]: ...
def saveInitialState(
    *args: str, attribute: Multiuse[str] = ..., saveall: bool = ...
) -> str: ...
def saveMenu(arg0: str = ..., arg1: str = ..., /) -> str: ...
def savePrefObjects() -> bool: ...
def saveShelf(arg0: str = ..., arg1: str = ..., /) -> bool: ...
def saveToolSettings() -> bool: ...
def saveViewportSettings() -> bool: ...
def scale(
    arg0: float = ...,
    arg1: float = ...,
    arg2: float = ...,
    /,
    *args: str,
    absolute: bool = ...,
    centerPivot: bool = ...,
    componentSpace: bool = ...,
    constrainAlongNormal: bool = ...,
    deletePriorHistory: bool = ...,
    distanceOnly: bool = ...,
    localSpace: bool = ...,
    objectCenterPivot: bool = ...,
    objectSpace: bool = ...,
    orientAxes: Tuple[float, float, float] = ...,
    pivot: Tuple[float, float, float] = ...,
    preserveChildPosition: bool = ...,
    preserveGeometryPosition: bool = ...,
    preserveUV: bool = ...,
    reflection: bool = ...,
    reflectionAboutBBox: bool = ...,
    reflectionAboutOrigin: bool = ...,
    reflectionAboutX: bool = ...,
    reflectionAboutY: bool = ...,
    reflectionAboutZ: bool = ...,
    reflectionTolerance: float = ...,
    relative: bool = ...,
    scaleX: bool = ...,
    scaleXY: bool = ...,
    scaleXYZ: bool = ...,
    scaleXZ: bool = ...,
    scaleY: bool = ...,
    scaleYZ: bool = ...,
    scaleZ: bool = ...,
    symNegative: bool = ...,
    worldSpace: bool = ...,
    xformConstraint: str = ...,
) -> bool: ...
def scaleComponents(
    arg0: float = ...,
    arg1: float = ...,
    arg2: float = ...,
    /,
    *args: str,
    pivot: Tuple[float, float, float] = ...,
    rotation: Tuple[float, float, float] = ...,
) -> bool: ...
def scaleConstraint(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    layer: str = ...,
    maintainOffset: bool = ...,
    name: Queryable[str] = ...,
    offset: Queryable[Tuple[float, float, float]] = ...,
    remove: bool = ...,
    scaleCompensate: bool = ...,
    skip: Multiuse[str] = ...,
    targetList: bool = ...,
    weight: Queryable[float] = ...,
    weightAliasList: bool = ...,
) -> Union[List[str], str, Tuple[float, float, float], bool, float]: ...
def scaleKey(
    *args: str,
    animation: str = ...,
    attribute: Multiuse[str] = ...,
    autoSnap: bool = ...,
    controlPoints: bool = ...,
    float: Multiuse[Range[float]] = ...,
    floatPivot: float = ...,
    floatScale: float = ...,
    hierarchy: str = ...,
    includeUpperBound: bool = ...,
    index: Multiuse[int] = ...,
    newEndFloat: float = ...,
    newEndTime: int = ...,
    newStartFloat: float = ...,
    newStartTime: int = ...,
    scaleSpecifiedKeys: bool = ...,
    shape: bool = ...,
    time: Multiuse[NullableRange[float]] = ...,
    timePivot: int = ...,
    timeScale: float = ...,
    valuePivot: float = ...,
    valueScale: float = ...,
) -> int: ...
def scaleKeyCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    exists: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    name: str = ...,
    scaleSpecifiedKeys: bool = ...,
    type: Queryable[str] = ...,
) -> Union[str, bool]: ...
def sceneEditor(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    control: bool = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    exists: bool = ...,
    filter: Queryable[str] = ...,
    forceMainConnection: Queryable[str] = ...,
    highlightConnection: Queryable[str] = ...,
    lockMainConnection: bool = ...,
    mainListConnection: Queryable[str] = ...,
    onlyParents: bool = ...,
    panel: Queryable[str] = ...,
    parent: Queryable[str] = ...,
    refreshReferences: bool = ...,
    selectCommand: Queryable[Callable[..., Any]] = ...,
    selectItem: Queryable[int] = ...,
    selectReference: Queryable[str] = ...,
    selectionConnection: Queryable[str] = ...,
    shortName: bool = ...,
    stateString: bool = ...,
    unParent: bool = ...,
    unlockMainConnection: bool = ...,
    unresolvedName: bool = ...,
    updateMainConnection: bool = ...,
    useTemplate: str = ...,
    withoutCopyNumber: bool = ...,
) -> Union[str, bool, Callable[..., Any], int]: ...
def sceneLint(
    *args: Any,
    query: bool = ...,
    issueType: Queryable[Multiuse[str]] = ...,
    verbose: bool = ...,
) -> Union[str, List[str], Multiuse[str], bool]: ...
def sceneUIReplacement(
    *,
    clear: bool = ...,
    deleteRemaining: bool = ...,
    getNextFilter: Tuple[str, str] = ...,
    getNextPanel: Tuple[str, str] = ...,
    getNextScriptedPanel: Tuple[str, str] = ...,
    update: str = ...,
) -> str: ...
def scmh(
    arg0: float = ...,
    arg1: float = ...,
    arg2: float = ...,
    arg3: float = ...,
    arg4: float = ...,
    arg5: float = ...,
    /,
    *args: str,
    absolute: bool = ...,
    ignore: Multiuse[int] = ...,
    quiet: bool = ...,
    relative: bool = ...,
) -> bool: ...
def scriptCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    allComponents: Queryable[Multiuse[bool]] = ...,
    allObjects: Queryable[Multiuse[bool]] = ...,
    animBreakdown: Queryable[Multiuse[bool]] = ...,
    animCurve: Queryable[Multiuse[bool]] = ...,
    animInTangent: Queryable[Multiuse[bool]] = ...,
    animKeyframe: Queryable[Multiuse[bool]] = ...,
    animOutTangent: Queryable[Multiuse[bool]] = ...,
    baseClassName: Queryable[str] = ...,
    camera: Queryable[Multiuse[bool]] = ...,
    cluster: Queryable[Multiuse[bool]] = ...,
    collisionModel: Queryable[Multiuse[bool]] = ...,
    controlVertex: Queryable[Multiuse[bool]] = ...,
    cumulativeLists: bool = ...,
    curve: Queryable[Multiuse[bool]] = ...,
    curveKnot: Queryable[Multiuse[bool]] = ...,
    curveOnSurface: Queryable[Multiuse[bool]] = ...,
    curveParameterPoint: Queryable[Multiuse[bool]] = ...,
    dimension: Queryable[Multiuse[bool]] = ...,
    dynamicConstraint: Queryable[Multiuse[bool]] = ...,
    edge: Queryable[Multiuse[bool]] = ...,
    editPoint: Queryable[Multiuse[bool]] = ...,
    emitter: Queryable[Multiuse[bool]] = ...,
    enableRootSelection: bool = ...,
    escToQuit: bool = ...,
    exists: bool = ...,
    exitUponCompletion: bool = ...,
    expandSelectionList: bool = ...,
    facet: Queryable[Multiuse[bool]] = ...,
    field: Queryable[Multiuse[bool]] = ...,
    finalCommandScript: Queryable[Callable[..., Any]] = ...,
    fluid: Queryable[Multiuse[bool]] = ...,
    follicle: Queryable[Multiuse[bool]] = ...,
    forceAddSelect: bool = ...,
    hairSystem: Queryable[Multiuse[bool]] = ...,
    handle: Queryable[Multiuse[bool]] = ...,
    history: bool = ...,
    hull: Queryable[Multiuse[bool]] = ...,
    ignoreInvalidItems: bool = ...,
    ikEndEffector: Queryable[Multiuse[bool]] = ...,
    ikHandle: Queryable[Multiuse[bool]] = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    imagePlane: Queryable[Multiuse[bool]] = ...,
    implicitGeometry: Queryable[Multiuse[bool]] = ...,
    isoparm: Queryable[Multiuse[bool]] = ...,
    joint: Queryable[Multiuse[bool]] = ...,
    jointPivot: Queryable[Multiuse[bool]] = ...,
    lastAutoComplete: bool = ...,
    lattice: Queryable[Multiuse[bool]] = ...,
    latticePoint: Queryable[Multiuse[bool]] = ...,
    light: Queryable[Multiuse[bool]] = ...,
    localRotationAxis: Queryable[Multiuse[bool]] = ...,
    locator: Queryable[Multiuse[bool]] = ...,
    locatorUV: Queryable[Multiuse[bool]] = ...,
    locatorXYZ: Queryable[Multiuse[bool]] = ...,
    nCloth: Queryable[Multiuse[bool]] = ...,
    nParticle: Queryable[Multiuse[bool]] = ...,
    nParticleShape: Queryable[Multiuse[bool]] = ...,
    nRigid: Queryable[Multiuse[bool]] = ...,
    name: str = ...,
    nonlinear: Queryable[Multiuse[bool]] = ...,
    nurbsCurve: Queryable[Multiuse[bool]] = ...,
    nurbsSurface: Queryable[Multiuse[bool]] = ...,
    objectComponent: bool = ...,
    orientationLocator: Queryable[Multiuse[bool]] = ...,
    particle: Queryable[Multiuse[bool]] = ...,
    particleShape: Queryable[Multiuse[bool]] = ...,
    plane: Queryable[Multiuse[bool]] = ...,
    polymesh: Queryable[Multiuse[bool]] = ...,
    polymeshEdge: Queryable[Multiuse[bool]] = ...,
    polymeshFace: Queryable[Multiuse[bool]] = ...,
    polymeshFreeEdge: Queryable[Multiuse[bool]] = ...,
    polymeshUV: Queryable[Multiuse[bool]] = ...,
    polymeshVertex: Queryable[Multiuse[bool]] = ...,
    polymeshVtxFace: Queryable[Multiuse[bool]] = ...,
    rigidBody: Queryable[Multiuse[bool]] = ...,
    rigidConstraint: Queryable[Multiuse[bool]] = ...,
    rotatePivot: Queryable[Multiuse[bool]] = ...,
    scalePivot: Queryable[Multiuse[bool]] = ...,
    sculpt: Queryable[Multiuse[bool]] = ...,
    selectHandle: Queryable[Multiuse[bool]] = ...,
    setAllowExcessCount: Multiuse[bool] = ...,
    setAutoComplete: Multiuse[bool] = ...,
    setAutoToggleSelection: Multiuse[bool] = ...,
    setDoneSelectionPrompt: Multiuse[str] = ...,
    setNoSelectionHeadsUp: Multiuse[str] = ...,
    setNoSelectionPrompt: Multiuse[str] = ...,
    setSelectionCount: Multiuse[int] = ...,
    setSelectionHeadsUp: Multiuse[str] = ...,
    setSelectionPrompt: Multiuse[str] = ...,
    showManipulators: bool = ...,
    spring: Queryable[Multiuse[bool]] = ...,
    springComponent: Queryable[Multiuse[bool]] = ...,
    stroke: Queryable[Multiuse[bool]] = ...,
    subdiv: Queryable[Multiuse[bool]] = ...,
    subdivMeshEdge: Queryable[Multiuse[bool]] = ...,
    subdivMeshFace: Queryable[Multiuse[bool]] = ...,
    subdivMeshPoint: Queryable[Multiuse[bool]] = ...,
    subdivMeshUV: Queryable[Multiuse[bool]] = ...,
    surfaceEdge: Queryable[Multiuse[bool]] = ...,
    surfaceFace: Queryable[Multiuse[bool]] = ...,
    surfaceKnot: Queryable[Multiuse[bool]] = ...,
    surfaceParameterPoint: Queryable[Multiuse[bool]] = ...,
    surfaceRange: Queryable[Multiuse[bool]] = ...,
    surfaceUV: Queryable[Multiuse[bool]] = ...,
    texture: Queryable[Multiuse[bool]] = ...,
    title: Queryable[str] = ...,
    toolCursorType: Queryable[str] = ...,
    toolFinish: Queryable[Callable[..., Any]] = ...,
    toolStart: Queryable[Callable[..., Any]] = ...,
    totalSelectionSets: Queryable[int] = ...,
    vertex: Queryable[Multiuse[bool]] = ...,
) -> Union[str, Multiuse[bool], bool, Callable[..., Any], int]: ...
def scriptEditorInfo(
    *,
    edit: bool = ...,
    query: bool = ...,
    clearHistory: bool = ...,
    clearHistoryFile: bool = ...,
    historyFilename: Queryable[str] = ...,
    input: str = ...,
    suppressErrors: bool = ...,
    suppressInfo: bool = ...,
    suppressResults: bool = ...,
    suppressStackWindow: bool = ...,
    suppressWarnings: bool = ...,
    writeHistory: bool = ...,
) -> Union[str, bool]: ...
def scriptJob(
    *,
    allChildren: bool = ...,
    attributeAdded: Tuple[str, Callable[..., Any]] = ...,
    attributeChange: Tuple[str, Callable[..., Any]] = ...,
    attributeDeleted: Tuple[str, Callable[..., Any]] = ...,
    compressUndo: bool = ...,
    conditionChange: Tuple[str, Callable[..., Any]] = ...,
    conditionFalse: Tuple[str, Callable[..., Any]] = ...,
    conditionTrue: Tuple[str, Callable[..., Any]] = ...,
    connectionChange: Tuple[str, Callable[..., Any]] = ...,
    disregardIndex: bool = ...,
    event: Tuple[str, Callable[..., Any]] = ...,
    exists: int = ...,
    force: bool = ...,
    idleEvent: Callable[..., Any] = ...,
    kill: Multiuse[int] = ...,
    killAll: bool = ...,
    killWithScene: bool = ...,
    listConditions: bool = ...,
    listEvents: bool = ...,
    listJobs: bool = ...,
    nodeDeleted: Tuple[str, Callable[..., Any]] = ...,
    nodeNameChanged: Tuple[str, Callable[..., Any]] = ...,
    optionVarChanged: Tuple[str, Callable[..., Any]] = ...,
    parent: str = ...,
    permanent: bool = ...,
    protected: bool = ...,
    replacePrevious: bool = ...,
    runOnce: bool = ...,
    timeChange: Callable[..., Any] = ...,
    uiDeleted: Tuple[str, Callable[..., Any]] = ...,
) -> Union[int, List[str], None, bool]: ...
def scriptNode(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    afterScript: Queryable[str] = ...,
    beforeScript: Queryable[str] = ...,
    executeAfter: bool = ...,
    executeBefore: bool = ...,
    ignoreReferenceEdits: bool = ...,
    name: str = ...,
    scriptType: Queryable[int] = ...,
    sourceType: Queryable[str] = ...,
) -> Union[bool, str, int]: ...
def scriptTable(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    afterCellChangedCmd: Callable[..., Any] = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    cellBackgroundColorCommand: Callable[..., Any] = ...,
    cellChangedCmd: Callable[..., Any] = ...,
    cellForegroundColorCommand: Callable[..., Any] = ...,
    cellIndex: Tuple[int, int] = ...,
    cellValue: Queryable[str] = ...,
    clearRow: int = ...,
    clearTable: bool = ...,
    columnFilter: Tuple[int, str] = ...,
    columnWidth: Multiuse[Tuple[int, int]] = ...,
    columns: Queryable[int] = ...,
    defineTemplate: str = ...,
    deleteRow: int = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    editable: bool = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    excludingHeaders: bool = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    getCellCmd: Callable[..., Any] = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    insertRow: int = ...,
    isObscured: bool = ...,
    label: Multiuse[Tuple[int, str]] = ...,
    manage: bool = ...,
    multiEditEnabled: bool = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    rowHeight: Queryable[int] = ...,
    rows: Queryable[int] = ...,
    rowsRemovedCmd: Callable[..., Any] = ...,
    rowsToBeRemovedCmd: Callable[..., Any] = ...,
    selectedCells: Queryable[List[int]] = ...,
    selectedColumns: Queryable[List[int]] = ...,
    selectedRow: bool = ...,
    selectedRows: Queryable[List[int]] = ...,
    selectionBehavior: Queryable[int] = ...,
    selectionChangedCmd: Callable[..., Any] = ...,
    selectionMode: Queryable[int] = ...,
    sortEnabled: bool = ...,
    statusBarMessage: str = ...,
    underPointerColumn: bool = ...,
    underPointerRow: bool = ...,
    useDoubleClickEdit: bool = ...,
    useTemplate: str = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[
    str, Tuple[float, float, float], int, bool, List[int], Callable[..., Any]
]: ...
def scriptedPanel(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    control: bool = ...,
    copy: str = ...,
    createString: bool = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    editString: bool = ...,
    exists: bool = ...,
    init: bool = ...,
    isUnique: bool = ...,
    label: Queryable[str] = ...,
    menuBarRepeatLast: bool = ...,
    menuBarVisible: bool = ...,
    needsInit: bool = ...,
    parent: str = ...,
    popupMenuProcedure: Queryable[Callable[..., Any]] = ...,
    replacePanel: str = ...,
    tearOff: bool = ...,
    tearOffCopy: str = ...,
    tearOffRestore: bool = ...,
    type: Queryable[str] = ...,
    unParent: bool = ...,
    useTemplate: str = ...,
) -> Union[str, bool, Callable[..., Any]]: ...
def scriptedPanelType(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    addCallback: Queryable[str] = ...,
    copyStateCallback: Queryable[str] = ...,
    createCallback: Queryable[str] = ...,
    customView: bool = ...,
    defineTemplate: str = ...,
    deleteCallback: Queryable[str] = ...,
    exists: bool = ...,
    hotkeyCtxClient: Queryable[str] = ...,
    initCallback: Queryable[str] = ...,
    label: Queryable[str] = ...,
    obsolete: bool = ...,
    removeCallback: Queryable[str] = ...,
    retainOnFileOpen: bool = ...,
    saveStateCallback: Queryable[str] = ...,
    unique: bool = ...,
    useTemplate: str = ...,
) -> Union[str, bool]: ...
def scrollField(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    changeCommand: Callable[..., Any] = ...,
    clear: bool = ...,
    command: str = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    editable: bool = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    enterCommand: Callable[..., Any] = ...,
    exists: bool = ...,
    font: Queryable[str] = ...,
    fontPointSize: Queryable[int] = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    insertText: str = ...,
    insertionPosition: Queryable[int] = ...,
    isObscured: bool = ...,
    keyPressCommand: Callable[..., Any] = ...,
    manage: bool = ...,
    noBackground: bool = ...,
    numberOfLines: Queryable[int] = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    selection: bool = ...,
    statusBarMessage: str = ...,
    text: Queryable[str] = ...,
    useTemplate: str = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
    wordWrap: bool = ...,
) -> Union[str, Tuple[float, float, float], bool, int, Callable[..., Any]]: ...
def scrollLayout(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    borderVisible: bool = ...,
    childArray: bool = ...,
    childResizable: bool = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    generalSpacing: int = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    horizontalScrollBarThickness: int = ...,
    isObscured: bool = ...,
    manage: bool = ...,
    margins: int = ...,
    margins4: Tuple[int, int, int, int] = ...,
    minChildWidth: Queryable[int] = ...,
    noBackground: bool = ...,
    numberOfChildren: bool = ...,
    numberOfPopupMenus: bool = ...,
    panEnabled: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    resizeCommand: Callable[..., Any] = ...,
    scrollAreaHeight: bool = ...,
    scrollAreaValue: bool = ...,
    scrollAreaWidth: bool = ...,
    scrollByPixel: Tuple[str, int] = ...,
    scrollPage: str = ...,
    statusBarMessage: str = ...,
    useTemplate: str = ...,
    verticalScrollBarAlwaysVisible: bool = ...,
    verticalScrollBarThickness: int = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[str, Tuple[float, float, float], bool, int, Callable[..., Any]]: ...
def sculpt(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    after: bool = ...,
    afterReference: bool = ...,
    before: bool = ...,
    components: bool = ...,
    deformerTools: bool = ...,
    dropoffDistance: Queryable[float] = ...,
    dropoffType: Queryable[str] = ...,
    dumpInfo: bool = ...,
    exclusive: Queryable[str] = ...,
    fixedSetupData: str = ...,
    frontOfChain: bool = ...,
    geometry: Queryable[Multiuse[str]] = ...,
    geometryIndices: bool = ...,
    groupWithLocator: bool = ...,
    ignoreSelected: bool = ...,
    includeHiddenSelections: bool = ...,
    insideMode: Queryable[str] = ...,
    maxDisplacement: Queryable[float] = ...,
    mode: Queryable[str] = ...,
    name: str = ...,
    objectCentered: bool = ...,
    parallel: bool = ...,
    prune: bool = ...,
    remove: Multiuse[bool] = ...,
    sculptTool: str = ...,
    selectedComponents: bool = ...,
    split: bool = ...,
    useComponentTags: bool = ...,
) -> Union[List[str], bool, float, str, Multiuse[str]]: ...
def sculptKeyCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    activeMode: Queryable[int] = ...,
    affectsTime: bool = ...,
    affectsTimeAll: Queryable[str] = ...,
    brushScaling: Queryable[int] = ...,
    editingRadius: bool = ...,
    editingStrength: bool = ...,
    exists: bool = ...,
    falloffCurve: Queryable[str] = ...,
    falloffCurveAll: Queryable[str] = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    minRadius: Queryable[float] = ...,
    minStrength: Queryable[float] = ...,
    minStrengthAll: Queryable[str] = ...,
    mode: Queryable[int] = ...,
    modeMinStrength: Multiuse[Tuple[int, float]] = ...,
    modeStrength: Multiuse[Tuple[int, float]] = ...,
    name: str = ...,
    radius: Queryable[float] = ...,
    reset: bool = ...,
    strength: Queryable[float] = ...,
    strengthAll: Queryable[str] = ...,
) -> Union[str, int, bool, float]: ...
def sculptMeshCacheChangeCloneSource(
    *,
    edit: bool = ...,
    query: bool = ...,
    blendShape: Queryable[str] = ...,
    target: Queryable[str] = ...,
) -> Union[bool, str]: ...
def sculptMeshCacheCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    adjustSize: bool = ...,
    adjustStrength: bool = ...,
    affectAllLayers: bool = ...,
    brushDirection: Queryable[int] = ...,
    brushSize: Queryable[float] = ...,
    brushStrength: Queryable[float] = ...,
    buildUpRate: Queryable[float] = ...,
    cloneHideSource: bool = ...,
    cloneMethod: Queryable[int] = ...,
    cloneShapeSource: Queryable[str] = ...,
    cloneTargetSource: Queryable[str] = ...,
    constrainToSurface: bool = ...,
    direction: Queryable[int] = ...,
    displayFrozen: bool = ...,
    displayMask: bool = ...,
    displayWireframe: bool = ...,
    falloffType: Queryable[int] = ...,
    flood: float = ...,
    floodFreeze: float = ...,
    frame: bool = ...,
    freezeSelection: bool = ...,
    grabFollowPath: bool = ...,
    grabSilhouette: bool = ...,
    grabTwist: bool = ...,
    inverted: bool = ...,
    lastMode: Queryable[str] = ...,
    lockShellBorder: bool = ...,
    makeStroke: Multiuse[Tuple[int, int, int, float, float]] = ...,
    minSize: Queryable[float] = ...,
    minStrength: Queryable[float] = ...,
    mirror: Queryable[int] = ...,
    mode: Queryable[str] = ...,
    orientToSurface: bool = ...,
    recordStroke: bool = ...,
    sculptFalloffCurve: Queryable[str] = ...,
    size: Queryable[float] = ...,
    stampDistance: Queryable[float] = ...,
    stampFile: Queryable[str] = ...,
    stampFlipX: bool = ...,
    stampFlipY: bool = ...,
    stampOrientToStroke: bool = ...,
    stampPlacement: Queryable[int] = ...,
    stampRandomization: bool = ...,
    stampRandomizationSeed: int = ...,
    stampRandomizeFlipX: bool = ...,
    stampRandomizeFlipY: bool = ...,
    stampRandomizePosX: Queryable[float] = ...,
    stampRandomizePosY: Queryable[float] = ...,
    stampRandomizeRotation: Queryable[float] = ...,
    stampRandomizeScale: Queryable[float] = ...,
    stampRandomizeStrength: Queryable[float] = ...,
    stampRotation: Queryable[float] = ...,
    steadyStrokeDistance: Queryable[float] = ...,
    strength: Queryable[float] = ...,
    updatePlane: bool = ...,
    useGlobalSize: bool = ...,
    useScreenSpace: bool = ...,
    useStampDistance: bool = ...,
    useStampImage: bool = ...,
    useSteadyStroke: bool = ...,
    wholeStroke: bool = ...,
    wireframeAlpha: Queryable[float] = ...,
    wireframeColor: Queryable[Tuple[float, float, float]] = ...,
) -> Union[bool, int, float, str, Tuple[float, float, float]]: ...
def sculptTarget(
    *args: str,
    edit: bool = ...,
    after: bool = ...,
    afterReference: bool = ...,
    before: bool = ...,
    components: bool = ...,
    deformerTools: bool = ...,
    dumpInfo: bool = ...,
    exclusive: str = ...,
    fixedSetupData: str = ...,
    frontOfChain: bool = ...,
    geometry: Multiuse[str] = ...,
    geometryIndices: bool = ...,
    ignoreSelected: bool = ...,
    inbetweenWeight: float = ...,
    includeHiddenSelections: bool = ...,
    name: str = ...,
    parallel: bool = ...,
    prune: bool = ...,
    regenerate: bool = ...,
    remove: Multiuse[bool] = ...,
    selectedComponents: bool = ...,
    snapshot: int = ...,
    split: bool = ...,
    target: int = ...,
    useComponentTags: bool = ...,
) -> bool: ...
def selLoadSettings(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    activeProxy: Queryable[str] = ...,
    deferReference: bool = ...,
    fileName: Queryable[str] = ...,
    numSettings: Queryable[int] = ...,
    proxyManager: Queryable[str] = ...,
    proxySetFiles: Queryable[str] = ...,
    proxySetTags: Queryable[str] = ...,
    proxyTag: Queryable[str] = ...,
    referenceNode: Queryable[str] = ...,
    shortName: bool = ...,
    unresolvedName: bool = ...,
) -> Union[str, bool, int]: ...
def select(
    *args: str,
    add: bool = ...,
    addFirst: bool = ...,
    all: bool = ...,
    allDagObjects: bool = ...,
    allDependencyNodes: bool = ...,
    clear: bool = ...,
    containerCentric: bool = ...,
    deselect: bool = ...,
    hierarchy: bool = ...,
    noExpand: bool = ...,
    replace: bool = ...,
    symmetry: bool = ...,
    symmetrySide: int = ...,
    toggle: bool = ...,
    visible: bool = ...,
) -> bool: ...
def selectContext(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    exists: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    name: str = ...,
) -> str: ...
def selectKey(
    *args: str,
    addTo: bool = ...,
    animation: str = ...,
    attribute: Multiuse[str] = ...,
    clear: bool = ...,
    controlPoints: bool = ...,
    float: Multiuse[Range[float]] = ...,
    hierarchy: str = ...,
    inTangent: bool = ...,
    includeUpperBound: bool = ...,
    index: Multiuse[int] = ...,
    keyframe: bool = ...,
    outTangent: bool = ...,
    remove: bool = ...,
    replace: bool = ...,
    shape: bool = ...,
    time: Multiuse[NullableRange[float]] = ...,
    toggle: bool = ...,
    unsnappedKeys: float = ...,
) -> int: ...
def selectKeyCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    exists: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    name: str = ...,
) -> Union[bool, str]: ...
def selectKeyframe(
    *args: str,
    animation: str = ...,
    attribute: Multiuse[str] = ...,
    controlPoints: bool = ...,
    float: Multiuse[Range[float]] = ...,
    hierarchy: str = ...,
    index: Multiuse[int] = ...,
    includeUpperBound: bool = ...,
    shape: bool = ...,
    selectionWindow: Tuple[float, float, float, float] = ...,
    time: Multiuse[NullableRange[float]] = ...,
) -> None: ...
def selectKeyframeRegionCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    exists: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    name: str = ...,
) -> Union[bool, str]: ...
def selectMode(
    *,
    query: bool = ...,
    component: bool = ...,
    hierarchical: bool = ...,
    leaf: bool = ...,
    object: bool = ...,
    preset: bool = ...,
    root: bool = ...,
    template: bool = ...,
) -> bool: ...
def selectPref(
    *,
    query: bool = ...,
    affectsActive: bool = ...,
    allowHiliteSelection: bool = ...,
    autoSelectContainer: bool = ...,
    autoSelectOutlinerSetMembers: bool = ...,
    autoUseDepth: bool = ...,
    clickBoxSize: Queryable[int] = ...,
    clickDrag: bool = ...,
    containerCentricSelection: bool = ...,
    disableComponentPopups: bool = ...,
    expandPopupList: bool = ...,
    ignoreSelectionPriority: bool = ...,
    manipClickBoxSize: Queryable[int] = ...,
    paintSelect: bool = ...,
    paintSelectWithDepth: bool = ...,
    popupMenuSelection: bool = ...,
    preSelectBackfacing: bool = ...,
    preSelectClosest: bool = ...,
    preSelectDeadSpace: Queryable[int] = ...,
    preSelectHilite: bool = ...,
    preSelectHiliteSize: Queryable[float] = ...,
    preSelectTweakDeadSpace: Queryable[int] = ...,
    selectTypeChangeAffectsActive: bool = ...,
    selectionChildHighlightMode: Queryable[int] = ...,
    singleBoxSelection: bool = ...,
    straightLineDistance: bool = ...,
    trackSelectionOrder: bool = ...,
    useDepth: bool = ...,
    xformNoSelect: bool = ...,
) -> Union[bool, int, float]: ...
def selectPriority(
    *,
    query: bool = ...,
    allComponents: Queryable[int] = ...,
    allObjects: Queryable[int] = ...,
    animBreakdown: Queryable[int] = ...,
    animCurve: Queryable[int] = ...,
    animInTangent: Queryable[int] = ...,
    animKeyframe: Queryable[int] = ...,
    animOutTangent: Queryable[int] = ...,
    byName: Multiuse[Tuple[str, bool]] = ...,
    camera: Queryable[int] = ...,
    cluster: Queryable[int] = ...,
    collisionModel: Queryable[int] = ...,
    controlVertex: Queryable[int] = ...,
    curve: Queryable[int] = ...,
    curveKnot: Queryable[int] = ...,
    curveOnSurface: Queryable[int] = ...,
    curveParameterPoint: Queryable[int] = ...,
    dimension: Queryable[int] = ...,
    dynamicConstraint: Queryable[int] = ...,
    edge: Queryable[int] = ...,
    editPoint: Queryable[int] = ...,
    emitter: Queryable[int] = ...,
    facet: Queryable[int] = ...,
    field: Queryable[int] = ...,
    fluid: Queryable[int] = ...,
    follicle: Queryable[int] = ...,
    hairSystem: Queryable[int] = ...,
    handle: Queryable[int] = ...,
    hull: Queryable[int] = ...,
    ikEndEffector: Queryable[int] = ...,
    ikHandle: Queryable[int] = ...,
    imagePlane: Queryable[int] = ...,
    implicitGeometry: Queryable[int] = ...,
    isoparm: Queryable[int] = ...,
    joint: Queryable[int] = ...,
    jointPivot: Queryable[int] = ...,
    lattice: Queryable[int] = ...,
    latticePoint: Queryable[int] = ...,
    light: Queryable[int] = ...,
    localRotationAxis: Queryable[int] = ...,
    locator: Queryable[int] = ...,
    locatorUV: Queryable[int] = ...,
    locatorXYZ: Queryable[int] = ...,
    meshUVShell: Queryable[int] = ...,
    motionTrailPoint: Queryable[int] = ...,
    motionTrailTangent: Queryable[int] = ...,
    nCloth: Queryable[int] = ...,
    nParticle: Queryable[int] = ...,
    nParticleShape: Queryable[int] = ...,
    nRigid: Queryable[int] = ...,
    nonlinear: Queryable[int] = ...,
    nurbsCurve: Queryable[int] = ...,
    nurbsSurface: Queryable[int] = ...,
    orientationLocator: Queryable[int] = ...,
    particle: Queryable[int] = ...,
    particleShape: Queryable[int] = ...,
    plane: Queryable[int] = ...,
    polymesh: Queryable[int] = ...,
    polymeshEdge: Queryable[int] = ...,
    polymeshFace: Queryable[int] = ...,
    polymeshFreeEdge: Queryable[int] = ...,
    polymeshUV: Queryable[int] = ...,
    polymeshVertex: Queryable[int] = ...,
    polymeshVtxFace: Queryable[int] = ...,
    queryByName: str = ...,
    rigidBody: Queryable[int] = ...,
    rigidConstraint: Queryable[int] = ...,
    rotatePivot: Queryable[int] = ...,
    scalePivot: Queryable[int] = ...,
    sculpt: Queryable[int] = ...,
    selectHandle: Queryable[int] = ...,
    spring: Queryable[int] = ...,
    springComponent: Queryable[int] = ...,
    stroke: Queryable[int] = ...,
    subdiv: Queryable[int] = ...,
    subdivMeshEdge: Queryable[int] = ...,
    subdivMeshFace: Queryable[int] = ...,
    subdivMeshPoint: Queryable[int] = ...,
    subdivMeshUV: Queryable[int] = ...,
    surfaceEdge: Queryable[int] = ...,
    surfaceFace: Queryable[int] = ...,
    surfaceKnot: Queryable[int] = ...,
    surfaceParameterPoint: Queryable[int] = ...,
    surfaceRange: Queryable[int] = ...,
    texture: Queryable[int] = ...,
    vertex: Queryable[int] = ...,
) -> int: ...
def selectType(
    *,
    query: bool = ...,
    allComponents: bool = ...,
    allObjects: bool = ...,
    animBreakdown: bool = ...,
    animCurve: bool = ...,
    animInTangent: bool = ...,
    animKeyframe: bool = ...,
    animOutTangent: bool = ...,
    byName: Multiuse[Tuple[str, bool]] = ...,
    camera: bool = ...,
    cluster: bool = ...,
    collisionModel: bool = ...,
    controlVertex: bool = ...,
    curve: bool = ...,
    curveKnot: bool = ...,
    curveOnSurface: bool = ...,
    curveParameterPoint: bool = ...,
    dimension: bool = ...,
    dynamicConstraint: bool = ...,
    edge: bool = ...,
    editPoint: bool = ...,
    emitter: bool = ...,
    facet: bool = ...,
    field: bool = ...,
    fluid: bool = ...,
    follicle: bool = ...,
    hairSystem: bool = ...,
    handle: bool = ...,
    hull: bool = ...,
    ikEndEffector: bool = ...,
    ikHandle: bool = ...,
    imagePlane: bool = ...,
    implicitGeometry: bool = ...,
    isoparm: bool = ...,
    joint: bool = ...,
    jointPivot: bool = ...,
    lattice: bool = ...,
    latticePoint: bool = ...,
    light: bool = ...,
    localRotationAxis: bool = ...,
    locator: bool = ...,
    locatorUV: bool = ...,
    locatorXYZ: bool = ...,
    meshUVShell: bool = ...,
    motionTrailPoint: bool = ...,
    motionTrailTangent: bool = ...,
    nCloth: bool = ...,
    nParticle: bool = ...,
    nParticleShape: bool = ...,
    nRigid: bool = ...,
    nonlinear: bool = ...,
    nurbsCurve: bool = ...,
    nurbsSurface: bool = ...,
    objectComponent: bool = ...,
    orientationLocator: bool = ...,
    particle: bool = ...,
    particleShape: bool = ...,
    plane: bool = ...,
    polymesh: bool = ...,
    polymeshEdge: bool = ...,
    polymeshFace: bool = ...,
    polymeshFreeEdge: bool = ...,
    polymeshUV: bool = ...,
    polymeshVertex: bool = ...,
    polymeshVtxFace: bool = ...,
    queryByName: str = ...,
    rigidBody: bool = ...,
    rigidConstraint: bool = ...,
    rotatePivot: bool = ...,
    scalePivot: bool = ...,
    sculpt: bool = ...,
    selectHandle: bool = ...,
    spring: bool = ...,
    springComponent: bool = ...,
    stroke: bool = ...,
    subdiv: bool = ...,
    subdivMeshEdge: bool = ...,
    subdivMeshFace: bool = ...,
    subdivMeshPoint: bool = ...,
    subdivMeshUV: bool = ...,
    surfaceEdge: bool = ...,
    surfaceFace: bool = ...,
    surfaceKnot: bool = ...,
    surfaceParameterPoint: bool = ...,
    surfaceRange: bool = ...,
    surfaceUV: bool = ...,
    texture: bool = ...,
    vertex: bool = ...,
) -> bool: ...
def selectedNodes() -> None: ...
def selectionConnection(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    activeCacheList: bool = ...,
    activeCharacterList: bool = ...,
    activeList: bool = ...,
    addScript: Queryable[Callable[..., Any]] = ...,
    addTo: str = ...,
    characterList: bool = ...,
    clear: bool = ...,
    connectionList: bool = ...,
    defineTemplate: str = ...,
    deselect: str = ...,
    editor: Queryable[str] = ...,
    exists: bool = ...,
    filter: Queryable[str] = ...,
    findObject: Queryable[str] = ...,
    g: bool = ...,
    highlightList: bool = ...,
    identify: bool = ...,
    keyframeList: bool = ...,
    lock: bool = ...,
    modelList: bool = ...,
    object: Queryable[str] = ...,
    parent: Queryable[str] = ...,
    remove: str = ...,
    removeScript: Queryable[Callable[..., Any]] = ...,
    select: str = ...,
    setList: bool = ...,
    switch: bool = ...,
    useTemplate: str = ...,
    worldList: bool = ...,
) -> Union[str, Callable[..., Any], bool]: ...
def separator(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    horizontal: bool = ...,
    isObscured: bool = ...,
    manage: bool = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    statusBarMessage: str = ...,
    style: Queryable[str] = ...,
    useTemplate: str = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[str, Tuple[float, float, float], bool, int, Callable[..., Any]]: ...
def sequenceManager(
    *,
    edit: bool = ...,
    query: bool = ...,
    addSequencerAudio: str = ...,
    attachSequencerAudio: str = ...,
    currentShot: Queryable[str] = ...,
    currentTime: Queryable[int] = ...,
    listSequencerAudio: str = ...,
    listShots: bool = ...,
    modelPanel: Queryable[str] = ...,
    node: Queryable[str] = ...,
    writableSequencer: Queryable[str] = ...,
) -> Union[bool, str, int]: ...
def setAttr(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    alteredValue: bool = ...,
    caching: bool = ...,
    capacityHint: int = ...,
    channelBox: bool = ...,
    clamp: bool = ...,
    keyable: bool = ...,
    lock: bool = ...,
    size: int = ...,
    type: str = ...,
) -> bool: ...
def setAttrMapping(
    *args: str,
    query: bool = ...,
    absolute: bool = ...,
    attribute: Multiuse[str] = ...,
    axis: str = ...,
    clutch: str = ...,
    device: str = ...,
    offset: float = ...,
    relative: bool = ...,
    scale: float = ...,
    selection: bool = ...,
) -> bool: ...
def setDefaultShadingGroup(arg0: str = ..., /) -> bool: ...
def setDrivenKeyframe(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    attribute: Multiuse[str] = ...,
    controlPoints: bool = ...,
    count: bool = ...,
    currentDriver: Queryable[str] = ...,
    driven: bool = ...,
    driver: bool = ...,
    driverValue: Multiuse[float] = ...,
    hierarchy: str = ...,
    inTangentType: str = ...,
    insert: bool = ...,
    insertBlend: bool = ...,
    outTangentType: str = ...,
    shape: bool = ...,
    value: float = ...,
) -> Union[int, bool, str]: ...
def setDynStartState() -> None: ...
def setDynamic(
    *args: str,
    allOnWhenRun: bool = ...,
    disableAllOnWhenRun: bool = ...,
    setAll: bool = ...,
    setOff: bool = ...,
    setOn: bool = ...,
) -> str: ...
def setEditCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    exists: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    name: str = ...,
) -> str: ...
def setFluidAttr(
    *args: str,
    addValue: bool = ...,
    attribute: str = ...,
    clear: bool = ...,
    floatRandom: float = ...,
    floatValue: float = ...,
    lowerFace: bool = ...,
    reset: bool = ...,
    vectorRandom: Tuple[float, float, float] = ...,
    vectorValue: Tuple[float, float, float] = ...,
    xIndex: int = ...,
    xvalue: bool = ...,
    yIndex: int = ...,
    yvalue: bool = ...,
    zIndex: int = ...,
    zvalue: bool = ...,
) -> bool: ...
def setFocus(arg0: str = ..., /) -> bool: ...
def setInfinity(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    attribute: Multiuse[str] = ...,
    controlPoints: bool = ...,
    hierarchy: str = ...,
    postInfinite: Queryable[str] = ...,
    preInfinite: Queryable[str] = ...,
    shape: bool = ...,
) -> Union[bool, str]: ...
def setInputDeviceMapping(
    *,
    absolute: bool = ...,
    axis: Multiuse[str] = ...,
    device: str = ...,
    offset: float = ...,
    relative: bool = ...,
    scale: float = ...,
    view: bool = ...,
    world: bool = ...,
) -> bool: ...
def setKeyCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    breakdown: bool = ...,
    exists: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    name: str = ...,
    preserveTangent: bool = ...,
) -> Union[bool, str]: ...
def setKeyPath(*args: str) -> List[str]: ...
def setKeyframe(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    adjustTangent: bool = ...,
    animLayer: str = ...,
    animated: bool = ...,
    attribute: Multiuse[str] = ...,
    breakdown: bool = ...,
    clip: str = ...,
    controlPoints: bool = ...,
    dirtyDG: bool = ...,
    float: Multiuse[float] = ...,
    hierarchy: str = ...,
    identity: bool = ...,
    inTangentType: str = ...,
    insert: bool = ...,
    insertBlend: bool = ...,
    minimizeRotation: bool = ...,
    noResolve: bool = ...,
    outTangentType: str = ...,
    preserveCurveShape: bool = ...,
    respectKeyable: bool = ...,
    shape: bool = ...,
    time: Multiuse[int] = ...,
    useCurrentLockedWeights: bool = ...,
    value: Multiuse[float] = ...,
) -> Union[int, bool]: ...
def setKeyframeBlendshapeTargetWts(*args: str) -> int: ...
def setMenuMode(arg0: str = ..., /) -> str: ...
def setNClothStartState() -> None: ...
def setNodeTypeFlag(
    arg0: str = ...,
    /,
    *,
    query: bool = ...,
    display: bool = ...,
    threadSafe: bool = ...,
) -> bool: ...
def setParent(
    arg0: str = ...,
    /,
    *,
    query: bool = ...,
    defineTemplate: str = ...,
    menu: bool = ...,
    topLevel: bool = ...,
    upLevel: bool = ...,
    useTemplate: str = ...,
) -> Union[str, bool]: ...
def setParticleAttr(
    *args: str,
    attribute: str = ...,
    floatValue: float = ...,
    object: str = ...,
    randomFloat: float = ...,
    randomVector: Tuple[float, float, float] = ...,
    relative: bool = ...,
    vectorValue: Tuple[float, float, float] = ...,
) -> bool: ...
def setRenderPassType(
    *args: str, defaultDataType: bool = ..., numChannels: int = ..., type: str = ...
) -> bool: ...
def setStartupMessage(arg0: str = ..., /) -> bool: ...
def setToolTo(arg0: str = ..., /) -> bool: ...
def setUITemplate(
    arg0: str = ...,
    /,
    *,
    query: bool = ...,
    popTemplate: bool = ...,
    pushTemplate: bool = ...,
) -> str: ...
def setXformManip(
    *args: Any,
    query: bool = ...,
    showUnits: bool = ...,
    suppress: bool = ...,
    useRotatePivot: bool = ...,
    worldSpace: bool = ...,
) -> bool: ...
def sets(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    addElement: str = ...,
    afterFilters: bool = ...,
    anyMember: str = ...,
    channelSetColor: Queryable[Tuple[float, float, float]] = ...,
    channelSetColorIndex: Queryable[int] = ...,
    clear: str = ...,
    color: Queryable[int] = ...,
    copy: str = ...,
    edges: bool = ...,
    editPoints: bool = ...,
    empty: bool = ...,
    facets: bool = ...,
    flatten: str = ...,
    forceElement: str = ...,
    include: str = ...,
    intersection: str = ...,
    isIntersecting: str = ...,
    isMember: str = ...,
    layer: bool = ...,
    name: str = ...,
    noIntermediate: bool = ...,
    noSurfaceShader: bool = ...,
    noWarnings: bool = ...,
    nodesOnly: bool = ...,
    ordered: bool = ...,
    remove: str = ...,
    renderable: bool = ...,
    size: bool = ...,
    split: str = ...,
    subtract: str = ...,
    text: Queryable[str] = ...,
    union: str = ...,
    vertices: bool = ...,
) -> Union[str, List[str], bool, Tuple[float, float, float], int]: ...
def shadingConnection(
    arg0: str = ...,
    /,
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    connectionState: bool = ...,
) -> bool: ...
def shadingGeometryRelCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    exists: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    name: str = ...,
    offCommand: Queryable[str] = ...,
    onCommand: Queryable[str] = ...,
    shadingCentric: bool = ...,
) -> Union[str, bool]: ...
def shadingLightRelCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    exists: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    name: str = ...,
    offCommand: Queryable[str] = ...,
    onCommand: Queryable[str] = ...,
    shadingCentric: bool = ...,
) -> Union[str, bool]: ...
def shadingNetworkCompare(
    *args: str,
    query: bool = ...,
    byName: bool = ...,
    byValue: bool = ...,
    delete: bool = ...,
    equivalent: bool = ...,
    network1: bool = ...,
    network2: bool = ...,
    upstreamOnly: bool = ...,
) -> Union[Union[List[str], str, int], bool]: ...
def shadingNode(
    arg0: str = ...,
    /,
    *,
    asLight: bool = ...,
    asPostProcess: bool = ...,
    asRendering: bool = ...,
    asShader: bool = ...,
    asTexture: bool = ...,
    asUtility: bool = ...,
    isColorManaged: bool = ...,
    name: str = ...,
    parent: str = ...,
    shared: bool = ...,
    skipSelect: bool = ...,
) -> str: ...
def shapeCompare(*args: str) -> int: ...
def shapeEditor(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    clearSelection: bool = ...,
    control: bool = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    exists: bool = ...,
    filter: Queryable[str] = ...,
    forceMainConnection: Queryable[str] = ...,
    highlightConnection: Queryable[str] = ...,
    lockMainConnection: bool = ...,
    lowestSelection: bool = ...,
    mainListConnection: Queryable[str] = ...,
    panel: Queryable[str] = ...,
    parent: Queryable[str] = ...,
    selectionConnection: Queryable[str] = ...,
    stateString: bool = ...,
    targetControlList: bool = ...,
    targetList: bool = ...,
    unParent: bool = ...,
    unlockMainConnection: bool = ...,
    updateMainConnection: bool = ...,
    useTemplate: str = ...,
    verticalSliders: bool = ...,
) -> Union[str, bool]: ...
def shapePanel(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    control: bool = ...,
    copy: str = ...,
    createString: bool = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    editString: bool = ...,
    exists: bool = ...,
    init: bool = ...,
    isUnique: bool = ...,
    label: Queryable[str] = ...,
    menuBarRepeatLast: bool = ...,
    menuBarVisible: bool = ...,
    needsInit: bool = ...,
    parent: str = ...,
    popupMenuProcedure: Queryable[Callable[..., Any]] = ...,
    replacePanel: str = ...,
    shapeEditor: bool = ...,
    tearOff: bool = ...,
    tearOffCopy: str = ...,
    tearOffRestore: bool = ...,
    unParent: bool = ...,
    useTemplate: str = ...,
) -> Union[str, bool, Callable[..., Any]]: ...
def shelfButton(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    align: Queryable[str] = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    command: Queryable[Callable[..., Any]] = ...,
    commandRepeatable: bool = ...,
    defineTemplate: str = ...,
    disabledImage: Queryable[str] = ...,
    docTag: Queryable[str] = ...,
    doubleClickCommand: Queryable[Callable[..., Any]] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableCommandRepeat: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    flat: bool = ...,
    flexibleWidthType: Queryable[int] = ...,
    flexibleWidthValue: Queryable[int] = ...,
    flipX: bool = ...,
    flipY: bool = ...,
    font: Queryable[str] = ...,
    fullPathName: bool = ...,
    handleNodeDropCallback: Callable[..., Any] = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    highlightImage: Queryable[str] = ...,
    image: Queryable[str] = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    imageOverlayLabel: Queryable[str] = ...,
    isObscured: bool = ...,
    label: Queryable[str] = ...,
    labelEditingCallback: Callable[..., Any] = ...,
    labelOffset: Queryable[int] = ...,
    manage: bool = ...,
    marginHeight: Queryable[int] = ...,
    marginWidth: Queryable[int] = ...,
    menuItem: Multiuse[Tuple[str, str]] = ...,
    menuItemPython: Multiuse[int] = ...,
    menuItemWithOptionBox: Multiuse[Tuple[str, str, str]] = ...,
    noBackground: bool = ...,
    noDefaultPopup: bool = ...,
    numberOfPopupMenus: bool = ...,
    overlayLabelBackColor: Queryable[Tuple[float, float, float, float]] = ...,
    overlayLabelColor: Queryable[Tuple[float, float, float]] = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    rotation: Queryable[float] = ...,
    runTimeCommand: str = ...,
    scaleIcon: bool = ...,
    selectionImage: Queryable[str] = ...,
    sourceType: Queryable[str] = ...,
    statusBarMessage: str = ...,
    style: Queryable[str] = ...,
    useAlpha: bool = ...,
    useTemplate: str = ...,
    version: Queryable[str] = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[
    str,
    Tuple[float, float, float],
    Callable[..., Any],
    bool,
    int,
    Tuple[float, float, float, float],
    float,
]: ...
def shelfLayout(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    alignment: Queryable[str] = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    cellHeight: Queryable[int] = ...,
    cellWidth: Queryable[int] = ...,
    cellWidthHeight: Queryable[Tuple[int, int]] = ...,
    childArray: bool = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    generalSpacing: int = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    horizontal: bool = ...,
    isObscured: bool = ...,
    manage: bool = ...,
    margins: int = ...,
    margins4: Tuple[int, int, int, int] = ...,
    noBackground: bool = ...,
    numberOfChildren: bool = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    position: Multiuse[Tuple[str, int]] = ...,
    preventOverride: bool = ...,
    spacing: Queryable[int] = ...,
    statusBarMessage: str = ...,
    style: Queryable[str] = ...,
    useTemplate: str = ...,
    version: Queryable[str] = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[
    str, Tuple[float, float, float], int, Tuple[int, int], bool, Callable[..., Any]
]: ...
def shelfTabLayout(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    borderStyle: Queryable[str] = ...,
    changeCommand: Callable[..., Any] = ...,
    childArray: bool = ...,
    childResizable: bool = ...,
    closeTab: int = ...,
    closeTabCommand: Callable[..., Any] = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    doubleClickCommand: Callable[..., Any] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    generalSpacing: int = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    horizontalScrollBarThickness: int = ...,
    image: Queryable[str] = ...,
    imageVisible: bool = ...,
    innerMarginHeight: Queryable[int] = ...,
    innerMarginWidth: Queryable[int] = ...,
    isObscured: bool = ...,
    manage: bool = ...,
    margins: int = ...,
    margins4: Tuple[int, int, int, int] = ...,
    minChildWidth: Queryable[int] = ...,
    moveTab: Tuple[int, int] = ...,
    newTabCommand: Callable[..., Any] = ...,
    noBackground: bool = ...,
    numberOfChildren: bool = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    postMenuCommand: Callable[..., Any] = ...,
    preSelectCommand: Callable[..., Any] = ...,
    preventOverride: bool = ...,
    scrollable: bool = ...,
    scrollableTabs: bool = ...,
    selectCommand: Queryable[Callable[..., Any]] = ...,
    selectTab: Queryable[str] = ...,
    selectTabIndex: Queryable[int] = ...,
    showNewTab: bool = ...,
    statusBarMessage: str = ...,
    tabIcon: Queryable[Multiuse[Tuple[str, str]]] = ...,
    tabIconIndex: Queryable[Multiuse[Tuple[int, str]]] = ...,
    tabLabel: Queryable[Multiuse[Tuple[str, str]]] = ...,
    tabLabelIndex: Queryable[Multiuse[Tuple[int, str]]] = ...,
    tabPosition: Queryable[str] = ...,
    tabTooltip: Queryable[Multiuse[Tuple[str, str]]] = ...,
    tabTooltipIndex: Queryable[Multiuse[Tuple[int, str]]] = ...,
    tabsClosable: bool = ...,
    tabsVisible: bool = ...,
    useTemplate: str = ...,
    verticalScrollBarThickness: int = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[
    str,
    Tuple[float, float, float],
    bool,
    int,
    Callable[..., Any],
    Multiuse[Tuple[str, str]],
    Multiuse[Tuple[int, str]],
]: ...
def shot(
    arg0: str = ...,
    arg1: str = ...,
    /,
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    audio: Queryable[str] = ...,
    clip: Queryable[str] = ...,
    clipDuration: Queryable[int] = ...,
    clipOpacity: Queryable[float] = ...,
    clipSyncState: bool = ...,
    clipZeroOffset: Queryable[int] = ...,
    copy: bool = ...,
    createCustomAnim: bool = ...,
    currentCamera: Queryable[str] = ...,
    customAnim: bool = ...,
    deleteCustomAnim: bool = ...,
    determineTrack: bool = ...,
    endTime: Queryable[int] = ...,
    favorite: bool = ...,
    flag1: bool = ...,
    flag10: bool = ...,
    flag11: bool = ...,
    flag12: bool = ...,
    flag2: bool = ...,
    flag3: bool = ...,
    flag4: bool = ...,
    flag5: bool = ...,
    flag6: bool = ...,
    flag7: bool = ...,
    flag8: bool = ...,
    flag9: bool = ...,
    hasCameraSet: bool = ...,
    hasStereoCamera: bool = ...,
    imagePlaneVisibility: bool = ...,
    linkAudio: Queryable[str] = ...,
    lock: bool = ...,
    mute: bool = ...,
    paste: bool = ...,
    pasteInstance: bool = ...,
    postHoldTime: Queryable[int] = ...,
    preHoldTime: Queryable[int] = ...,
    scale: Queryable[float] = ...,
    selfmute: bool = ...,
    sequenceDuration: Queryable[int] = ...,
    sequenceEndTime: Queryable[int] = ...,
    sequenceStartTime: Queryable[int] = ...,
    shotName: Queryable[str] = ...,
    sourceDuration: Queryable[int] = ...,
    startTime: Queryable[int] = ...,
    track: Queryable[int] = ...,
    transitionInLength: Queryable[int] = ...,
    transitionInType: Queryable[int] = ...,
    transitionOutLength: Queryable[int] = ...,
    transitionOutType: Queryable[int] = ...,
    unlinkAudio: bool = ...,
) -> Union[str, int, float, bool]: ...
def shotRipple(
    arg0: str = ...,
    /,
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    deleted: bool = ...,
    endDelta: Queryable[int] = ...,
    endTime: Queryable[int] = ...,
    startDelta: Queryable[int] = ...,
    startTime: Queryable[int] = ...,
) -> Union[bool, int]: ...
def shotTrack(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    insertTrack: int = ...,
    lock: bool = ...,
    mute: bool = ...,
    numTracks: Queryable[int] = ...,
    removeEmptyTracks: bool = ...,
    removeTrack: int = ...,
    selfmute: bool = ...,
    solo: bool = ...,
    swapTracks: Tuple[int, int] = ...,
    title: Queryable[str] = ...,
    track: int = ...,
    unsolo: bool = ...,
) -> Union[bool, int, str]: ...
def showHelp(
    arg0: str = ...,
    /,
    *,
    query: bool = ...,
    absolute: bool = ...,
    docs: bool = ...,
    helpTable: bool = ...,
    version: bool = ...,
) -> bool: ...
def showHidden(
    *args: str,
    above: bool = ...,
    allObjects: bool = ...,
    below: bool = ...,
    lastHidden: bool = ...,
) -> bool: ...
def showManipCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    addAttr: str = ...,
    currentNodeName: bool = ...,
    exists: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    incSnap: Queryable[Multiuse[Tuple[int, bool]]] = ...,
    incSnapRelative: Queryable[Multiuse[Tuple[int, bool]]] = ...,
    incSnapUI: bool = ...,
    incSnapValue: Queryable[Multiuse[Tuple[int, float]]] = ...,
    iveVisible: bool = ...,
    lockSelection: bool = ...,
    moveActiveAttrDown: bool = ...,
    moveActiveAttrToTop: bool = ...,
    moveActiveAttrUp: bool = ...,
    name: str = ...,
    removeAttr: str = ...,
    resetActiveAttr: bool = ...,
    selectedAttributes: bool = ...,
    setAttrActive: str = ...,
    setNextAttrActive: bool = ...,
    setPreviousAttrActive: bool = ...,
    toggleIncSnap: bool = ...,
    toolFinish: Queryable[Callable[..., Any]] = ...,
    toolStart: Queryable[Callable[..., Any]] = ...,
) -> Union[
    str,
    bool,
    Multiuse[Tuple[int, bool]],
    Multiuse[Tuple[int, float]],
    Callable[..., Any],
]: ...
def showMetadata(
    *args: str,
    query: bool = ...,
    auto: bool = ...,
    dataType: Queryable[str] = ...,
    interpolation: bool = ...,
    isActivated: bool = ...,
    listAllStreams: bool = ...,
    listMembers: bool = ...,
    listValidMethods: bool = ...,
    listVisibleStreams: bool = ...,
    member: Queryable[str] = ...,
    method: Queryable[str] = ...,
    off: bool = ...,
    range: Queryable[Tuple[float, float]] = ...,
    rayScale: Queryable[float] = ...,
    stream: Queryable[str] = ...,
) -> Union[str, bool, Tuple[float, float], float]: ...
def showSelectionInTitle(arg0: str = ..., /) -> bool: ...
def showShadingGroupAttrEditor(arg0: str = ..., arg1: str = ..., /) -> bool: ...
def showWindow(arg0: str = ..., /) -> bool: ...
def simplify(
    *args: str,
    animation: str = ...,
    attribute: Multiuse[str] = ...,
    controlPoints: bool = ...,
    float: Multiuse[Range[float]] = ...,
    floatTolerance: float = ...,
    hierarchy: str = ...,
    includeUpperBound: bool = ...,
    index: Multiuse[int] = ...,
    shape: bool = ...,
    time: Multiuse[NullableRange[float]] = ...,
    timeTolerance: int = ...,
    valueTolerance: float = ...,
) -> int: ...
def singleProfileBirailSurface(
    arg0: str = ...,
    arg1: str = ...,
    /,
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    nodeState: Queryable[int] = ...,
    tangentContinuityProfile1: bool = ...,
    transformMode: Queryable[int] = ...,
    constructionHistory: bool = ...,
    name: str = ...,
    object: bool = ...,
    polygon: int = ...,
) -> Union[List[str], bool, int]: ...
def skeletonEmbed(
    *args: str,
    query: bool = ...,
    mergedMesh: bool = ...,
    segmentationMethod: int = ...,
    segmentationResolution: int = ...,
) -> bool: ...
def skinBindCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    about: Queryable[str] = ...,
    axis: Queryable[str] = ...,
    colorRamp: Queryable[str] = ...,
    currentInfluence: Queryable[str] = ...,
    displayInactiveMode: Queryable[int] = ...,
    displayNormalized: bool = ...,
    exists: bool = ...,
    falloffCurve: Queryable[str] = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    name: str = ...,
    symmetry: bool = ...,
    tolerance: Queryable[float] = ...,
) -> Union[str, int, bool, float]: ...
def skinCluster(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    addInfluence: Multiuse[str] = ...,
    addToSelection: bool = ...,
    after: bool = ...,
    afterReference: bool = ...,
    baseShape: Multiuse[str] = ...,
    before: bool = ...,
    bindMethod: Queryable[int] = ...,
    components: bool = ...,
    deformerTools: bool = ...,
    dropoffRate: Queryable[float] = ...,
    dumpInfo: bool = ...,
    exclusive: Queryable[str] = ...,
    fixedSetupData: str = ...,
    forceNormalizeWeights: bool = ...,
    frontOfChain: bool = ...,
    geometry: Queryable[Multiuse[str]] = ...,
    geometryIndices: bool = ...,
    heatmapFalloff: float = ...,
    ignoreBindPose: bool = ...,
    ignoreHierarchy: bool = ...,
    ignoreSelected: bool = ...,
    includeHiddenSelections: bool = ...,
    influence: Queryable[str] = ...,
    lockWeights: bool = ...,
    maximumInfluences: Queryable[int] = ...,
    moveJointsMode: bool = ...,
    multi: bool = ...,
    name: str = ...,
    normalizeWeights: Queryable[int] = ...,
    nurbsSamples: int = ...,
    obeyMaxInfluences: bool = ...,
    parallel: bool = ...,
    polySmoothness: float = ...,
    prune: bool = ...,
    recacheBindMatrices: bool = ...,
    remove: Multiuse[bool] = ...,
    removeFromSelection: bool = ...,
    removeInfluence: Multiuse[str] = ...,
    removeUnusedInfluence: bool = ...,
    selectInfluenceVerts: str = ...,
    selectedComponents: bool = ...,
    skinMethod: Queryable[int] = ...,
    smoothWeights: float = ...,
    smoothWeightsMaxIterations: int = ...,
    split: bool = ...,
    toSelectedBones: bool = ...,
    toSkeletonAndTransforms: bool = ...,
    unbind: bool = ...,
    unbindKeepHistory: bool = ...,
    useComponentTags: bool = ...,
    useGeometry: bool = ...,
    volumeBind: float = ...,
    volumeType: int = ...,
    weight: float = ...,
    weightDistribution: Queryable[int] = ...,
    weightedInfluence: bool = ...,
) -> Union[str, int, bool, float, Multiuse[str]]: ...
def skinPercent(
    arg0: str = ...,
    /,
    *args: str,
    query: bool = ...,
    ignoreBelow: float = ...,
    normalize: bool = ...,
    pruneWeights: float = ...,
    relative: bool = ...,
    resetToDefault: bool = ...,
    transform: Queryable[str] = ...,
    transformMoveWeights: Multiuse[str] = ...,
    transformValue: Multiuse[Tuple[str, float]] = ...,
    value: bool = ...,
    zeroRemainingInfluences: bool = ...,
) -> Union[bool, str]: ...
def smoothCurve(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    nodeState: Queryable[int] = ...,
    smoothness: Queryable[float] = ...,
    constructionHistory: bool = ...,
    name: str = ...,
    object: bool = ...,
    replaceOriginal: bool = ...,
) -> Union[List[str], bool, int, float]: ...
def smoothTangentSurface(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    direction: Queryable[int] = ...,
    nodeState: Queryable[int] = ...,
    parameter: Queryable[Multiuse[float]] = ...,
    smoothness: Queryable[int] = ...,
    constructionHistory: bool = ...,
    name: str = ...,
    object: bool = ...,
    replaceOriginal: bool = ...,
) -> Union[List[str], bool, int, Multiuse[float]]: ...
def snapKey(
    *args: str,
    animation: str = ...,
    attribute: Multiuse[str] = ...,
    controlPoints: bool = ...,
    float: Multiuse[Range[float]] = ...,
    hierarchy: str = ...,
    includeUpperBound: bool = ...,
    index: Multiuse[int] = ...,
    mergeDuplicate: bool = ...,
    shape: bool = ...,
    time: Multiuse[NullableRange[float]] = ...,
    timeMultiple: float = ...,
    valueMultiple: float = ...,
) -> int: ...
def snapMode(
    *,
    query: bool = ...,
    curve: bool = ...,
    distanceIncrement: Queryable[float] = ...,
    edgeMagnet: Queryable[int] = ...,
    edgeMagnetTolerance: Queryable[float] = ...,
    grid: bool = ...,
    liveFaceCenter: bool = ...,
    livePoint: bool = ...,
    meshCenter: bool = ...,
    pixelCenter: bool = ...,
    pixelSnap: bool = ...,
    point: bool = ...,
    tolerance: Queryable[int] = ...,
    useTolerance: bool = ...,
    uvTolerance: Queryable[int] = ...,
    viewPlane: bool = ...,
) -> Union[bool, float, int]: ...
def snapTogetherCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    clearSelection: bool = ...,
    exists: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    name: str = ...,
    setOrientation: bool = ...,
    snapPolygonFace: bool = ...,
) -> Union[str, bool]: ...
def snapshot(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    anchorTransform: str = ...,
    constructionHistory: bool = ...,
    endTime: Queryable[int] = ...,
    increment: Queryable[int] = ...,
    motionTrail: bool = ...,
    name: Queryable[str] = ...,
    offsetParentMatrix: bool = ...,
    startTime: Queryable[int] = ...,
    update: Queryable[str] = ...,
) -> Union[List[str], bool, int, str]: ...
def snapshotBeadContext(*args: Any, **kwargs: Any) -> None: ...
def snapshotBeadCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    exists: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    inTangent: bool = ...,
    name: str = ...,
    outTangent: bool = ...,
) -> Union[str, bool]: ...
def snapshotModifyKeyCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    exists: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    name: str = ...,
) -> str: ...
def soft(
    *args: str,
    query: bool = ...,
    convert: bool = ...,
    duplicate: bool = ...,
    duplicateHistory: bool = ...,
    goal: float = ...,
    hideOriginal: bool = ...,
    name: str = ...,
) -> str: ...
def softMod(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    after: bool = ...,
    afterReference: bool = ...,
    before: bool = ...,
    bindState: bool = ...,
    components: bool = ...,
    curveInterpolation: Multiuse[int] = ...,
    curvePoint: Multiuse[float] = ...,
    curveValue: Multiuse[float] = ...,
    deformerTools: bool = ...,
    dumpInfo: bool = ...,
    envelope: Queryable[float] = ...,
    exclusive: Queryable[str] = ...,
    falloffAroundSelection: bool = ...,
    falloffBasedOnX: bool = ...,
    falloffBasedOnY: bool = ...,
    falloffBasedOnZ: bool = ...,
    falloffCenter: Tuple[float, float, float] = ...,
    falloffMasking: bool = ...,
    falloffMode: int = ...,
    falloffRadius: float = ...,
    fixedSetupData: str = ...,
    frontOfChain: bool = ...,
    geometry: Queryable[Multiuse[str]] = ...,
    geometryIndices: bool = ...,
    ignoreSelected: bool = ...,
    includeHiddenSelections: bool = ...,
    name: str = ...,
    parallel: bool = ...,
    prune: bool = ...,
    relative: bool = ...,
    remove: Multiuse[bool] = ...,
    resetGeometry: bool = ...,
    selectedComponents: bool = ...,
    split: bool = ...,
    useComponentTags: bool = ...,
    weightedNode: Queryable[Tuple[str, str]] = ...,
) -> Union[str, bool, float, Multiuse[str], Tuple[str, str]]: ...
def softModContext(*args: Any, **kwargs: Any) -> None: ...
def softModCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    dragSlider: str = ...,
    exists: bool = ...,
    falseColor: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    reset: bool = ...,
) -> Union[str, bool]: ...
def softSelect(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    compressUndo: Queryable[int] = ...,
    enableFalseColor: Queryable[int] = ...,
    softSelectColorCurve: Queryable[str] = ...,
    softSelectCurve: Queryable[str] = ...,
    softSelectDistance: Queryable[float] = ...,
    softSelectEnabled: Queryable[int] = ...,
    softSelectFalloff: Queryable[int] = ...,
    softSelectReset: bool = ...,
    softSelectUVDistance: Queryable[float] = ...,
) -> Union[bool, int, str, float]: ...
def softSelectOptionsCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    buttonDown: bool = ...,
    buttonUp: bool = ...,
    colorCurve: str = ...,
    condition: bool = ...,
    enableFalseColor: int = ...,
    enabled: bool = ...,
    exists: bool = ...,
    falloffCurve: str = ...,
    falloffMode: int = ...,
    image1: str = ...,
    image2: str = ...,
    image3: str = ...,
    size: float = ...,
    uvSize: float = ...,
) -> None: ...
def soloMaterial(
    *args: str,
    query: bool = ...,
    attr: Queryable[str] = ...,
    last: bool = ...,
    node: Queryable[str] = ...,
    unsolo: bool = ...,
) -> Union[bool, str]: ...
def sortCaseInsensitive(*args: str) -> List[str]: ...
def sortStringArray(
    *args: str,
    ignoreCase: bool = ...,
    indexArray: bool = ...,
    reverse: bool = ...,
    sortOrder: str = ...,
) -> List[str]: ...
def sound(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    endTime: Queryable[int] = ...,
    file: Queryable[str] = ...,
    length: bool = ...,
    mute: bool = ...,
    name: Queryable[str] = ...,
    offset: Queryable[int] = ...,
    sourceEnd: Queryable[int] = ...,
    sourceStart: Queryable[int] = ...,
) -> Union[str, int, bool]: ...
def soundControl(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    beginScrub: bool = ...,
    defineTemplate: str = ...,
    displaySound: bool = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    endScrub: bool = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    isObscured: bool = ...,
    manage: bool = ...,
    maxTime: Queryable[int] = ...,
    minTime: Queryable[int] = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    pressCommand: str = ...,
    preventOverride: bool = ...,
    releaseCommand: str = ...,
    repeatChunkSize: Queryable[float] = ...,
    repeatOnHold: bool = ...,
    resample: bool = ...,
    sound: Queryable[str] = ...,
    statusBarMessage: str = ...,
    useTemplate: str = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    waveform: Queryable[str] = ...,
    width: Queryable[int] = ...,
) -> Union[str, Tuple[float, float, float], bool, int, float, Callable[..., Any]]: ...
def soundPopup(
    arg0: str = ...,
    /,
    *,
    annotation: str = ...,
    backgroundColor: Tuple[float, float, float] = ...,
    defineTemplate: str = ...,
    docTag: str = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    height: int = ...,
    highlightColor: Tuple[float, float, float] = ...,
    isObscured: bool = ...,
    manage: bool = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    parent: str = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    statusBarMessage: str = ...,
    useTemplate: str = ...,
    visible: bool = ...,
    visibleChangeCommand: Callable[..., Any] = ...,
    width: int = ...,
) -> str: ...
def spBirailCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    autoCreate: bool = ...,
    activeNodes: bool = ...,
    bldProfiles: bool = ...,
    bldProfileFirst: bool = ...,
    bldProfileLast: bool = ...,
    bldRailOne: bool = ...,
    bldRailTwo: bool = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    exists: bool = ...,
    frozen: bool = ...,
    image1: str = ...,
    image2: str = ...,
    image3: str = ...,
    immediate: bool = ...,
    name: str = ...,
    nodeState: int = ...,
    object: bool = ...,
    polygon: int = ...,
    reset: bool = ...,
    transformMode: int = ...,
    toolNode: bool = ...,
    tangentContinuityProfile1: bool = ...,
) -> None: ...
def spaceLocator(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    absolute: bool = ...,
    name: str = ...,
    position: Queryable[Tuple[float, float, float]] = ...,
    relative: bool = ...,
) -> Union[List[str], Tuple[float, float, float]]: ...
def sphere(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    axis: Queryable[Tuple[float, float, float]] = ...,
    caching: bool = ...,
    degree: Queryable[int] = ...,
    endSweep: Queryable[float] = ...,
    heightRatio: Queryable[float] = ...,
    nodeState: Queryable[int] = ...,
    pivot: Queryable[Tuple[float, float, float]] = ...,
    radius: Queryable[float] = ...,
    sections: Queryable[int] = ...,
    spans: Queryable[int] = ...,
    startSweep: Queryable[float] = ...,
    tolerance: Queryable[float] = ...,
    useTolerance: bool = ...,
    constructionHistory: bool = ...,
    name: str = ...,
    object: bool = ...,
    polygon: int = ...,
) -> Union[List[str], Tuple[float, float, float], bool, int, float]: ...
def spotLight(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    barnDoors: bool = ...,
    bottomBarnDoorAngle: Queryable[float] = ...,
    coneAngle: Queryable[float] = ...,
    decayRate: int = ...,
    discRadius: Queryable[float] = ...,
    dropOff: Queryable[float] = ...,
    exclusive: bool = ...,
    intensity: Queryable[float] = ...,
    leftBarnDoorAngle: Queryable[float] = ...,
    name: Queryable[str] = ...,
    penumbra: Queryable[float] = ...,
    position: Queryable[Tuple[float, float, float]] = ...,
    rgb: Queryable[Tuple[float, float, float]] = ...,
    rightBarnDoorAngle: Queryable[float] = ...,
    rotation: Queryable[Tuple[float, float, float]] = ...,
    shadowColor: Queryable[Tuple[float, float, float]] = ...,
    shadowDither: Queryable[float] = ...,
    shadowSamples: Queryable[int] = ...,
    softShadow: bool = ...,
    topBarnDoorAngle: Queryable[float] = ...,
    useRayTraceShadows: bool = ...,
) -> Union[str, List[float], int, bool, float, Tuple[float, float, float]]: ...
def spotLightPreviewPort(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    isObscured: bool = ...,
    manage: bool = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    spotLight: str = ...,
    statusBarMessage: str = ...,
    useTemplate: str = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
    widthHeight: Tuple[int, int] = ...,
) -> Union[str, Tuple[float, float, float], bool, int, Callable[..., Any]]: ...
def spreadSheetEditor(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    allAttr: bool = ...,
    attrRegExp: Queryable[str] = ...,
    control: bool = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    execute: str = ...,
    exists: bool = ...,
    filter: Queryable[str] = ...,
    fixedAttrList: Queryable[List[str]] = ...,
    forceMainConnection: Queryable[str] = ...,
    highlightConnection: Queryable[str] = ...,
    keyableOnly: bool = ...,
    lockMainConnection: bool = ...,
    longNames: bool = ...,
    mainListConnection: Queryable[str] = ...,
    niceNames: bool = ...,
    panel: Queryable[str] = ...,
    parent: Queryable[str] = ...,
    precision: Queryable[int] = ...,
    selectedAttr: bool = ...,
    selectionConnection: Queryable[str] = ...,
    showShapes: bool = ...,
    stateString: bool = ...,
    unParent: bool = ...,
    unlockMainConnection: bool = ...,
    updateMainConnection: bool = ...,
    useTemplate: str = ...,
) -> Union[str, bool, List[str], int]: ...
def spring(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    addSprings: bool = ...,
    allPoints: bool = ...,
    count: bool = ...,
    damping: Queryable[float] = ...,
    dampingPS: Queryable[float] = ...,
    endForceWeight: Queryable[float] = ...,
    exclusive: bool = ...,
    length: Queryable[float] = ...,
    maxDistance: float = ...,
    minDistance: float = ...,
    minMax: bool = ...,
    name: Queryable[str] = ...,
    noDuplicate: bool = ...,
    restLength: Queryable[float] = ...,
    restLengthPS: Queryable[float] = ...,
    startForceWeight: Queryable[float] = ...,
    stiffness: Queryable[float] = ...,
    stiffnessPS: Queryable[float] = ...,
    useDampingPS: bool = ...,
    useRestLengthPS: bool = ...,
    useStiffnessPS: bool = ...,
    walkLength: int = ...,
    wireframe: bool = ...,
) -> Union[str, bool, float]: ...
def squareSurface(
    arg0: str = ...,
    arg1: str = ...,
    arg2: str = ...,
    arg3: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    continuityType1: Queryable[int] = ...,
    continuityType2: Queryable[int] = ...,
    continuityType3: Queryable[int] = ...,
    continuityType4: Queryable[int] = ...,
    curveFitCheckpoints: Queryable[int] = ...,
    endPointTolerance: Queryable[float] = ...,
    nodeState: Queryable[int] = ...,
    rebuildCurve1: bool = ...,
    rebuildCurve2: bool = ...,
    rebuildCurve3: bool = ...,
    rebuildCurve4: bool = ...,
    constructionHistory: bool = ...,
    name: str = ...,
    object: bool = ...,
    polygon: int = ...,
) -> Union[List[str], bool, int, float]: ...
def srtContext(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    exists: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    name: str = ...,
) -> str: ...
def stackTrace(
    *,
    query: bool = ...,
    dump: bool = ...,
    parameterCount: int = ...,
    parameterType: Tuple[int, int] = ...,
    parameterValue: Tuple[int, int] = ...,
    state: bool = ...,
) -> None: ...
def stitchSurface(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    bias: Queryable[float] = ...,
    caching: bool = ...,
    cvIthIndex: Queryable[Multiuse[int]] = ...,
    cvJthIndex: Queryable[Multiuse[int]] = ...,
    fixBoundary: bool = ...,
    nodeState: Queryable[int] = ...,
    parameterU: Queryable[Multiuse[float]] = ...,
    parameterV: Queryable[Multiuse[float]] = ...,
    positionalContinuity: Queryable[Multiuse[bool]] = ...,
    stepCount: Queryable[Multiuse[int]] = ...,
    tangentialContinuity: Queryable[Multiuse[bool]] = ...,
    togglePointNormals: bool = ...,
    togglePointPosition: bool = ...,
    toggleTolerance: Queryable[Multiuse[bool]] = ...,
    tolerance: Queryable[Multiuse[float]] = ...,
    cascade: bool = ...,
    constructionHistory: bool = ...,
    keepG0Continuity: bool = ...,
    keepG1Continuity: bool = ...,
    name: str = ...,
    numberOfSamples: int = ...,
    object: bool = ...,
    replaceOriginal: bool = ...,
    weight0: float = ...,
    weight1: float = ...,
) -> Union[
    List[str], float, bool, Multiuse[int], int, Multiuse[float], Multiuse[bool]
]: ...
def stitchSurfaceCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    autoCreate: bool = ...,
    activeNodes: bool = ...,
    bias: float = ...,
    cascade: bool = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    cvIthIndex: Multiuse[int] = ...,
    cvJthIndex: Multiuse[int] = ...,
    exists: bool = ...,
    fixBoundary: bool = ...,
    frozen: bool = ...,
    image1: str = ...,
    image2: str = ...,
    image3: str = ...,
    immediate: bool = ...,
    keepG0Continuity: bool = ...,
    keepG1Continuity: bool = ...,
    name: str = ...,
    nodeState: int = ...,
    numberOfSamples: int = ...,
    object: bool = ...,
    positionalContinuity: Multiuse[bool] = ...,
    replaceOriginal: bool = ...,
    reset: bool = ...,
    stepCount: Multiuse[int] = ...,
    tangentialContinuity: Multiuse[bool] = ...,
    toolNode: bool = ...,
    tolerance: Multiuse[float] = ...,
    togglePointNormals: bool = ...,
    togglePointPosition: bool = ...,
    toggleTolerance: Multiuse[bool] = ...,
    parameterU: Multiuse[float] = ...,
    parameterV: Multiuse[float] = ...,
    weight0: float = ...,
    weight1: float = ...,
) -> None: ...
def stitchSurfacePoints(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    bias: Queryable[float] = ...,
    caching: bool = ...,
    cvIthIndex: Queryable[Multiuse[int]] = ...,
    cvJthIndex: Queryable[Multiuse[int]] = ...,
    fixBoundary: bool = ...,
    nodeState: Queryable[int] = ...,
    parameterU: Queryable[Multiuse[float]] = ...,
    parameterV: Queryable[Multiuse[float]] = ...,
    positionalContinuity: Queryable[Multiuse[bool]] = ...,
    stepCount: Queryable[Multiuse[int]] = ...,
    tangentialContinuity: Queryable[Multiuse[bool]] = ...,
    togglePointNormals: bool = ...,
    togglePointPosition: bool = ...,
    toggleTolerance: Queryable[Multiuse[bool]] = ...,
    tolerance: Queryable[Multiuse[float]] = ...,
    cascade: bool = ...,
    constructionHistory: bool = ...,
    equalWeight: bool = ...,
    keepG0Continuity: bool = ...,
    keepG1Continuity: bool = ...,
    name: str = ...,
    object: bool = ...,
    replaceOriginal: bool = ...,
) -> Union[
    List[str], float, bool, Multiuse[int], int, Multiuse[float], Multiuse[bool]
]: ...
def stringArrayIntersector(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    allowDuplicates: bool = ...,
    defineTemplate: str = ...,
    exists: bool = ...,
    intersect: List[str] = ...,
    reset: bool = ...,
    useTemplate: str = ...,
) -> str: ...
def stroke(*, name: str = ..., pressure: bool = ..., seed: int = ...) -> str: ...
def subdAutoProjection(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    nodeState: Queryable[int] = ...,
    constructionHistory: bool = ...,
    layout: Queryable[int] = ...,
    layoutMethod: Queryable[int] = ...,
    name: str = ...,
    optimize: Queryable[int] = ...,
    percentageSpace: Queryable[float] = ...,
    planes: Queryable[int] = ...,
    scale: Queryable[int] = ...,
    skipIntersect: bool = ...,
    worldSpace: bool = ...,
) -> Union[str, bool, int, float]: ...
def subdCleanTopology(*args: str) -> bool: ...
def subdCollapse(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    level: Queryable[int] = ...,
    nodeState: Queryable[int] = ...,
    constructionHistory: bool = ...,
    name: str = ...,
    object: bool = ...,
) -> Union[List[str], bool, int]: ...
def subdDisplayMode(*args: Any, **kwargs: Any) -> None: ...
def subdDuplicateAndConnect(*args: str) -> bool: ...
def subdEditUV(
    *args: str,
    query: bool = ...,
    angle: Queryable[float] = ...,
    pivotU: Queryable[float] = ...,
    pivotV: Queryable[float] = ...,
    relative: bool = ...,
    rotateRatio: Queryable[float] = ...,
    rotation: bool = ...,
    scale: bool = ...,
    scaleU: Queryable[float] = ...,
    scaleV: Queryable[float] = ...,
    uValue: Queryable[float] = ...,
    uvSetName: Queryable[str] = ...,
    vValue: Queryable[float] = ...,
) -> Union[bool, float, str]: ...
def subdLayoutUV(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    nodeState: Queryable[int] = ...,
    constructionHistory: bool = ...,
    flipReversed: bool = ...,
    layout: Queryable[int] = ...,
    layoutMethod: Queryable[int] = ...,
    name: str = ...,
    percentageSpace: Queryable[float] = ...,
    rotateForBestFit: Queryable[int] = ...,
    scale: Queryable[int] = ...,
    separate: Queryable[int] = ...,
    worldSpace: bool = ...,
) -> Union[str, bool, int, float]: ...
def subdListComponentConversion(
    *args: Any,
    border: bool = ...,
    fromEdge: bool = ...,
    fromFace: bool = ...,
    fromUV: bool = ...,
    fromVertex: bool = ...,
    internal: bool = ...,
    toEdge: bool = ...,
    toFace: bool = ...,
    toUV: bool = ...,
    toVertex: bool = ...,
    uvShell: bool = ...,
    uvShellBorder: bool = ...,
) -> List[str]: ...
def subdMapCut(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    name: str = ...,
    nodeState: Queryable[int] = ...,
) -> Union[str, bool, int]: ...
def subdMapSewMove(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    nodeState: Queryable[int] = ...,
    constructionHistory: bool = ...,
    limitPieceSize: bool = ...,
    name: str = ...,
    numberFaces: Queryable[int] = ...,
    worldSpace: bool = ...,
) -> Union[str, bool, int]: ...
def subdMatchTopology(*args: str, frontOfChain: bool = ...) -> bool: ...
def subdMirror(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    nodeState: Queryable[int] = ...,
    xMirror: bool = ...,
    yMirror: bool = ...,
    zMirror: bool = ...,
    constructionHistory: bool = ...,
    name: str = ...,
    object: bool = ...,
) -> Union[List[str], bool, int]: ...
def subdPlanarProjection(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    nodeState: Queryable[int] = ...,
    constructionHistory: bool = ...,
    createNewMap: bool = ...,
    imageCenter: Queryable[Tuple[float, float]] = ...,
    imageCenterX: Queryable[float] = ...,
    imageCenterY: Queryable[float] = ...,
    imageScale: Queryable[Tuple[float, float]] = ...,
    imageScaleU: Queryable[float] = ...,
    imageScaleV: Queryable[float] = ...,
    insertBeforeDeformers: bool = ...,
    keepImageRatio: bool = ...,
    mapDirection: str = ...,
    name: str = ...,
    projectionCenter: Queryable[Tuple[float, float, float]] = ...,
    projectionCenterX: Queryable[float] = ...,
    projectionCenterY: Queryable[float] = ...,
    projectionCenterZ: Queryable[float] = ...,
    projectionHeight: Queryable[float] = ...,
    projectionScale: Queryable[Tuple[float, float]] = ...,
    projectionWidth: Queryable[float] = ...,
    rotate: Queryable[Tuple[float, float, float]] = ...,
    rotateX: Queryable[float] = ...,
    rotateY: Queryable[float] = ...,
    rotateZ: Queryable[float] = ...,
    rotationAngle: Queryable[float] = ...,
    smartFit: bool = ...,
    worldSpace: bool = ...,
) -> Union[str, bool, int, Tuple[float, float], float, Tuple[float, float, float]]: ...
def subdToBlind(
    *args: Any,
    absolutePosition: bool = ...,
    includeCreases: bool = ...,
    includeZeroOffsets: bool = ...,
) -> bool: ...
def subdToNurbs(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    applyMatrixToResult: bool = ...,
    addUnderTransform: bool = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    frozen: bool = ...,
    name: str = ...,
    nodeState: int = ...,
    object: bool = ...,
    outputType: int = ...,
) -> None: ...
def subdToPoly(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    applyMatrixToResult: bool = ...,
    caching: bool = ...,
    copyUVTopology: bool = ...,
    depth: Queryable[int] = ...,
    extractPointPosition: bool = ...,
    format: Queryable[int] = ...,
    inSubdCVId: Queryable[Multiuse[Tuple[int, int]]] = ...,
    inSubdCVIdLeft: Queryable[int] = ...,
    inSubdCVIdRight: Queryable[int] = ...,
    maxPolys: Queryable[int] = ...,
    nodeState: Queryable[int] = ...,
    outSubdCVId: Queryable[Multiuse[Tuple[int, int]]] = ...,
    outSubdCVIdLeft: Queryable[int] = ...,
    outSubdCVIdRight: Queryable[int] = ...,
    outv: Queryable[Multiuse[int]] = ...,
    preserveVertexOrdering: bool = ...,
    sampleCount: Queryable[int] = ...,
    shareUVs: bool = ...,
    subdNormals: bool = ...,
    addUnderTransform: bool = ...,
    connectShaders: bool = ...,
    constructionHistory: bool = ...,
    name: str = ...,
    object: bool = ...,
) -> Union[List[str], bool, int, Multiuse[Tuple[int, int]], Multiuse[int]]: ...
def subdTransferUVsToCache(*args: str) -> bool: ...
def subdiv(
    *args: Any,
    query: bool = ...,
    currentLevel: bool = ...,
    currentSubdLevel: bool = ...,
    deepestLevel: Queryable[int] = ...,
    displayLoad: bool = ...,
    edgeStats: bool = ...,
    faceStats: bool = ...,
    maxPossibleLevel: Queryable[int] = ...,
    proxyMode: Queryable[int] = ...,
    smallOffsets: bool = ...,
) -> Union[bool, int]: ...
def subdivCrease(*args: Any, sharpness: bool = ...) -> bool: ...
def subdivDisplaySmoothness(
    *args: Any, query: bool = ..., all: bool = ..., smoothness: Queryable[int] = ...
) -> Union[bool, int]: ...
def subgraph(*args: Any, **kwargs: Any) -> None: ...
def substituteGeometry(
    *args: str,
    disableNonSkinDeformers: bool = ...,
    newGeometryToLayer: bool = ...,
    oldGeometryToLayer: bool = ...,
    reWeightDistTolerance: float = ...,
    retainOldGeometry: bool = ...,
) -> str: ...
def suitePrefs(
    *,
    applyToSuite: str = ...,
    installedAsSuite: bool = ...,
    isCompleteSuite: bool = ...,
) -> bool: ...
def superCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    attach: Multiuse[str] = ...,
    exists: bool = ...,
    image1: str = ...,
    image2: str = ...,
    image3: str = ...,
) -> None: ...
def surface(
    *args: str,
    degreeU: int = ...,
    degreeV: int = ...,
    formU: str = ...,
    formV: str = ...,
    knotU: Multiuse[float] = ...,
    knotV: Multiuse[float] = ...,
    name: str = ...,
    objectSpace: bool = ...,
    point: Multiuse[Tuple[float, float, float]] = ...,
    pointWeight: Multiuse[Tuple[float, float, float, float]] = ...,
    worldSpace: bool = ...,
) -> str: ...
def surfaceSampler(
    *args: str,
    camera: str = ...,
    fileFormat: Multiuse[str] = ...,
    filename: Multiuse[str] = ...,
    filterSize: float = ...,
    filterType: int = ...,
    flipU: bool = ...,
    flipV: bool = ...,
    ignoreMirroredFaces: bool = ...,
    ignoreTransforms: bool = ...,
    mapHeight: Multiuse[int] = ...,
    mapMaterials: Multiuse[bool] = ...,
    mapOutput: Multiuse[str] = ...,
    mapSpace: Multiuse[str] = ...,
    mapWidth: Multiuse[int] = ...,
    maxSearchDistance: Multiuse[float] = ...,
    maximumValue: Multiuse[float] = ...,
    overscan: int = ...,
    searchCage: Multiuse[str] = ...,
    searchMethod: int = ...,
    searchOffset: Multiuse[float] = ...,
    shadows: Multiuse[bool] = ...,
    source: Multiuse[str] = ...,
    sourceUVSpace: Multiuse[str] = ...,
    superSampling: int = ...,
    target: Multiuse[str] = ...,
    targetUVSpace: Multiuse[str] = ...,
    useGeometryNormals: bool = ...,
    uvSet: Multiuse[str] = ...,
) -> bool: ...
def surfaceShaderList(
    *args: str, edit: bool = ..., query: bool = ..., add: str = ..., remove: str = ...
) -> bool: ...
def swatchDisplayPort(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    borderColor: Queryable[Tuple[float, float, float]] = ...,
    borderWidth: Queryable[int] = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    isObscured: bool = ...,
    manage: bool = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    pressCommand: Callable[..., Any] = ...,
    preventOverride: bool = ...,
    renderPriority: int = ...,
    renderSize: Queryable[int] = ...,
    shadingNode: Queryable[str] = ...,
    statusBarMessage: str = ...,
    useTemplate: str = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
    widthHeight: Tuple[int, int] = ...,
) -> Union[str, Tuple[float, float, float], int, bool, Callable[..., Any]]: ...
def swatchRefresh(*args: str) -> bool: ...
def switchTable(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    isObscured: bool = ...,
    label1: str = ...,
    label2: str = ...,
    manage: bool = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    selectedRow: bool = ...,
    statusBarMessage: str = ...,
    switchNode: Queryable[str] = ...,
    underPointerRow: bool = ...,
    useTemplate: str = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[str, Tuple[float, float, float], bool, int, Callable[..., Any]]: ...
def symbolButton(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    command: Queryable[Callable[..., Any]] = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    image: Queryable[str] = ...,
    isObscured: bool = ...,
    manage: bool = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    statusBarMessage: str = ...,
    useTemplate: str = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[str, Tuple[float, float, float], Callable[..., Any], bool, int]: ...
def symbolCheckBox(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    changeCommand: Callable[..., Any] = ...,
    defineTemplate: str = ...,
    disableOffImage: Queryable[str] = ...,
    disableOnImage: Queryable[str] = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    image: Queryable[str] = ...,
    innerMargin: bool = ...,
    isObscured: bool = ...,
    manage: bool = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    offCommand: Callable[..., Any] = ...,
    offImage: Queryable[str] = ...,
    onCommand: Callable[..., Any] = ...,
    onImage: Queryable[str] = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    statusBarMessage: str = ...,
    useTemplate: str = ...,
    value: bool = ...,
    version: Queryable[str] = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[str, Tuple[float, float, float], bool, int, Callable[..., Any]]: ...
def symmetricModelling(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    about: Queryable[str] = ...,
    allowPartial: bool = ...,
    axis: Queryable[str] = ...,
    preserveSeam: Queryable[int] = ...,
    reset: bool = ...,
    seamFalloffCurve: Queryable[str] = ...,
    seamTolerance: Queryable[float] = ...,
    symmetry: Queryable[int] = ...,
    tolerance: Queryable[float] = ...,
    topoSymmetry: bool = ...,
) -> Union[bool, str, int, float]: ...
def syncSculptCache() -> None: ...
def sysFile(
    arg0: str = ...,
    /,
    *,
    copy: str = ...,
    delete: bool = ...,
    makeDir: bool = ...,
    move: str = ...,
    removeEmptyDir: bool = ...,
    rename: str = ...,
) -> bool: ...
def tabLayout(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    borderStyle: Queryable[str] = ...,
    changeCommand: Callable[..., Any] = ...,
    childArray: bool = ...,
    childResizable: bool = ...,
    closeTab: int = ...,
    closeTabCommand: Callable[..., Any] = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    doubleClickCommand: Callable[..., Any] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    generalSpacing: int = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    horizontalScrollBarThickness: int = ...,
    image: Queryable[str] = ...,
    imageVisible: bool = ...,
    innerMarginHeight: Queryable[int] = ...,
    innerMarginWidth: Queryable[int] = ...,
    isObscured: bool = ...,
    manage: bool = ...,
    margins: int = ...,
    margins4: Tuple[int, int, int, int] = ...,
    minChildWidth: Queryable[int] = ...,
    moveTab: Tuple[int, int] = ...,
    newTabCommand: Callable[..., Any] = ...,
    noBackground: bool = ...,
    numberOfChildren: bool = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    postMenuCommand: Callable[..., Any] = ...,
    preSelectCommand: Callable[..., Any] = ...,
    preventOverride: bool = ...,
    scrollable: bool = ...,
    scrollableTabs: bool = ...,
    selectCommand: Queryable[Callable[..., Any]] = ...,
    selectTab: Queryable[str] = ...,
    selectTabIndex: Queryable[int] = ...,
    showNewTab: bool = ...,
    statusBarMessage: str = ...,
    tabIcon: Queryable[Multiuse[Tuple[str, str]]] = ...,
    tabIconIndex: Queryable[Multiuse[Tuple[int, str]]] = ...,
    tabLabel: Queryable[Multiuse[Tuple[str, str]]] = ...,
    tabLabelIndex: Queryable[Multiuse[Tuple[int, str]]] = ...,
    tabPosition: Queryable[str] = ...,
    tabTooltip: Queryable[Multiuse[Tuple[str, str]]] = ...,
    tabTooltipIndex: Queryable[Multiuse[Tuple[int, str]]] = ...,
    tabsClosable: bool = ...,
    tabsVisible: bool = ...,
    useTemplate: str = ...,
    verticalScrollBarThickness: int = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[
    str,
    Tuple[float, float, float],
    bool,
    int,
    Callable[..., Any],
    Multiuse[Tuple[str, str]],
    Multiuse[Tuple[int, str]],
]: ...
def tangentConstraint(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    aimVector: Queryable[Tuple[float, float, float]] = ...,
    layer: str = ...,
    name: Queryable[str] = ...,
    remove: bool = ...,
    targetList: bool = ...,
    upVector: Queryable[Tuple[float, float, float]] = ...,
    weight: Queryable[float] = ...,
    weightAliasList: bool = ...,
    worldUpObject: Queryable[str] = ...,
    worldUpType: Queryable[str] = ...,
    worldUpVector: Queryable[Tuple[float, float, float]] = ...,
) -> Union[List[str], Tuple[float, float, float], str, bool, float]: ...
def targetWeldCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    exists: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    mergeToCenter: bool = ...,
    preserveUV: bool = ...,
) -> Union[bool, str]: ...
def tension(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    after: bool = ...,
    afterReference: bool = ...,
    before: bool = ...,
    components: bool = ...,
    deformerTools: bool = ...,
    dumpInfo: bool = ...,
    envelope: Queryable[float] = ...,
    exclusive: Queryable[str] = ...,
    fixedSetupData: str = ...,
    frontOfChain: bool = ...,
    geometry: Queryable[Multiuse[str]] = ...,
    geometryIndices: bool = ...,
    ignoreSelected: bool = ...,
    includeHiddenSelections: bool = ...,
    inwardConstraint: Queryable[float] = ...,
    name: str = ...,
    outwardConstraint: Queryable[float] = ...,
    parallel: bool = ...,
    pinBorderVertices: bool = ...,
    prune: bool = ...,
    remove: Multiuse[bool] = ...,
    selectedComponents: bool = ...,
    smoothingIterations: Queryable[int] = ...,
    smoothingStep: Queryable[float] = ...,
    split: bool = ...,
    useComponentTags: bool = ...,
) -> Union[str, bool, float, Multiuse[str], int]: ...
def testPa(arg0: str = ..., /) -> None: ...
def testPassContribution(
    *args: str, renderLayer: str = ..., renderPass: str = ...
) -> None: ...
def texCutContext(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    adjustSize: bool = ...,
    displayShellBorders: bool = ...,
    edgeSelectSensitive: Queryable[float] = ...,
    exists: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    mode: Queryable[str] = ...,
    moveRatio: Queryable[float] = ...,
    name: str = ...,
    size: Queryable[float] = ...,
    steadyStroke: bool = ...,
    steadyStrokeDistance: Queryable[float] = ...,
    touchToSew: bool = ...,
) -> Union[float, bool, str]: ...
def texLatticeDeformContext(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    envelope: Queryable[float] = ...,
    exists: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    latticeColumns: Queryable[int] = ...,
    latticeRows: Queryable[int] = ...,
    name: str = ...,
    showMoveManipulator: bool = ...,
    snapPixelMode: bool = ...,
    useBoundingRect: bool = ...,
) -> Union[int, float, bool, str]: ...
def texManipContext(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    exists: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
) -> str: ...
def texMoveContext(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    editPivotMode: bool = ...,
    exists: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    position: bool = ...,
    snap: bool = ...,
    snapComponentsRelative: bool = ...,
    snapPixelMode: Queryable[int] = ...,
    snapValue: Queryable[float] = ...,
    tweakMode: bool = ...,
) -> Union[str, bool, int, float]: ...
def texMoveUVShellContext(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    exists: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    iterations: Queryable[int] = ...,
    mask: bool = ...,
    position: bool = ...,
    shellBorder: Queryable[float] = ...,
) -> Union[str, int, bool, float]: ...
def texRotateContext(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    editPivotMode: bool = ...,
    exists: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    position: bool = ...,
    snap: bool = ...,
    snapRelative: bool = ...,
    snapValue: Queryable[float] = ...,
    tweakMode: bool = ...,
) -> Union[str, bool, float]: ...
def texScaleContext(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    editPivotMode: bool = ...,
    exists: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    position: bool = ...,
    preventNegativeScale: bool = ...,
    snap: bool = ...,
    snapRelative: bool = ...,
    snapValue: Queryable[float] = ...,
    tweakMode: bool = ...,
) -> Union[str, bool, float]: ...
def texSculptCacheContext(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    adjustSize: bool = ...,
    adjustStrength: bool = ...,
    direction: Queryable[int] = ...,
    falloffType: Queryable[int] = ...,
    floodPin: float = ...,
    grabTwist: bool = ...,
    inverted: bool = ...,
    mode: Queryable[str] = ...,
    sculptFalloffCurve: Queryable[str] = ...,
    showBrushRingDuringStroke: bool = ...,
    size: Queryable[float] = ...,
    strength: Queryable[float] = ...,
) -> Union[bool, int, str, float]: ...
def texSculptCacheSync() -> None: ...
def texSelectContext(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    exists: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
) -> str: ...
def texSelectShortestPathCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    exists: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
) -> Union[bool, str]: ...
def texSmoothContext(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    history: bool = ...,
    exists: bool = ...,
    image1: str = ...,
    image2: str = ...,
    image3: str = ...,
    name: str = ...,
    pinBorder: bool = ...,
    space: int = ...,
) -> None: ...
def texSmudgeUVContext(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    dragSlider: Queryable[str] = ...,
    effectType: Queryable[str] = ...,
    exists: bool = ...,
    functionType: Queryable[str] = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    name: str = ...,
    pressure: Queryable[float] = ...,
    radius: Queryable[float] = ...,
    smudgeIsMiddle: bool = ...,
) -> Union[str, float, bool]: ...
def texTweakUVContext(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    exists: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    position: bool = ...,
    tolerance: Queryable[float] = ...,
) -> Union[str, bool, float]: ...
def texWinToolCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    alternateContext: bool = ...,
    boxzoom: bool = ...,
    dolly: bool = ...,
    exists: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    name: str = ...,
    toolName: Queryable[str] = ...,
    track: bool = ...,
) -> Union[str, bool]: ...
def text(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    align: Queryable[str] = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    dropRectCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    font: Queryable[str] = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    hyperlink: bool = ...,
    isObscured: bool = ...,
    label: Queryable[str] = ...,
    manage: bool = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    recomputeSize: bool = ...,
    statusBarMessage: str = ...,
    useTemplate: str = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
    wordWrap: bool = ...,
) -> Union[str, Tuple[float, float, float], bool, int, Callable[..., Any]]: ...
def textCurves(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    font: str = ...,
    name: str = ...,
    object: bool = ...,
    text: str = ...,
) -> List[str]: ...
def textField(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    alwaysInvokeEnterCommandOnReturn: bool = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    changeCommand: Callable[..., Any] = ...,
    defineTemplate: str = ...,
    disableButtons: bool = ...,
    disableClearButton: bool = ...,
    disableHistoryButton: bool = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    drawInactiveFrame: bool = ...,
    dropCallback: Callable[..., Any] = ...,
    editable: bool = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    enterCommand: Callable[..., Any] = ...,
    exists: bool = ...,
    fileName: Queryable[str] = ...,
    font: Queryable[str] = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    insertText: str = ...,
    insertionPosition: Queryable[int] = ...,
    isObscured: bool = ...,
    manage: bool = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    placeholderText: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    receiveFocusCommand: Callable[..., Any] = ...,
    searchField: bool = ...,
    statusBarMessage: str = ...,
    text: Queryable[str] = ...,
    textChangedCommand: Callable[..., Any] = ...,
    useTemplate: str = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[str, bool, Tuple[float, float, float], int, Callable[..., Any]]: ...
def textFieldButtonGrp(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    adjustableColumn: int = ...,
    adjustableColumn2: int = ...,
    adjustableColumn3: int = ...,
    adjustableColumn4: int = ...,
    adjustableColumn5: int = ...,
    adjustableColumn6: int = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    buttonCommand: Callable[..., Any] = ...,
    buttonLabel: Queryable[str] = ...,
    changeCommand: Callable[..., Any] = ...,
    columnAlign: Multiuse[Tuple[int, str]] = ...,
    columnAlign2: Tuple[str, str] = ...,
    columnAlign3: Tuple[str, str, str] = ...,
    columnAlign4: Tuple[str, str, str, str] = ...,
    columnAlign5: Tuple[str, str, str, str, str] = ...,
    columnAlign6: Tuple[str, str, str, str, str, str] = ...,
    columnAttach: Multiuse[Tuple[int, str, int]] = ...,
    columnAttach2: Tuple[str, str] = ...,
    columnAttach3: Tuple[str, str, str] = ...,
    columnAttach4: Tuple[str, str, str, str] = ...,
    columnAttach5: Tuple[str, str, str, str, str] = ...,
    columnAttach6: Tuple[str, str, str, str, str, str] = ...,
    columnOffset2: Tuple[int, int] = ...,
    columnOffset3: Tuple[int, int, int] = ...,
    columnOffset4: Tuple[int, int, int, int] = ...,
    columnOffset5: Tuple[int, int, int, int, int] = ...,
    columnOffset6: Tuple[int, int, int, int, int, int] = ...,
    columnWidth: Multiuse[Tuple[int, int]] = ...,
    columnWidth1: int = ...,
    columnWidth2: Tuple[int, int] = ...,
    columnWidth3: Tuple[int, int, int] = ...,
    columnWidth4: Tuple[int, int, int, int] = ...,
    columnWidth5: Tuple[int, int, int, int, int] = ...,
    columnWidth6: Tuple[int, int, int, int, int, int] = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    editable: bool = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableButton: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    fileName: Queryable[str] = ...,
    forceChangeCommand: bool = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    insertText: str = ...,
    insertionPosition: Queryable[int] = ...,
    isObscured: bool = ...,
    label: Queryable[str] = ...,
    manage: bool = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    placeholderText: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    rowAttach: Multiuse[Tuple[int, str, int]] = ...,
    statusBarMessage: str = ...,
    text: Queryable[str] = ...,
    textChangedCommand: Callable[..., Any] = ...,
    useTemplate: str = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[str, Tuple[float, float, float], bool, int, Callable[..., Any]]: ...
def textFieldGrp(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    adjustableColumn: int = ...,
    adjustableColumn2: int = ...,
    adjustableColumn3: int = ...,
    adjustableColumn4: int = ...,
    adjustableColumn5: int = ...,
    adjustableColumn6: int = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    changeCommand: Callable[..., Any] = ...,
    columnAlign: Multiuse[Tuple[int, str]] = ...,
    columnAlign2: Tuple[str, str] = ...,
    columnAlign3: Tuple[str, str, str] = ...,
    columnAlign4: Tuple[str, str, str, str] = ...,
    columnAlign5: Tuple[str, str, str, str, str] = ...,
    columnAlign6: Tuple[str, str, str, str, str, str] = ...,
    columnAttach: Multiuse[Tuple[int, str, int]] = ...,
    columnAttach2: Tuple[str, str] = ...,
    columnAttach3: Tuple[str, str, str] = ...,
    columnAttach4: Tuple[str, str, str, str] = ...,
    columnAttach5: Tuple[str, str, str, str, str] = ...,
    columnAttach6: Tuple[str, str, str, str, str, str] = ...,
    columnOffset2: Tuple[int, int] = ...,
    columnOffset3: Tuple[int, int, int] = ...,
    columnOffset4: Tuple[int, int, int, int] = ...,
    columnOffset5: Tuple[int, int, int, int, int] = ...,
    columnOffset6: Tuple[int, int, int, int, int, int] = ...,
    columnWidth: Multiuse[Tuple[int, int]] = ...,
    columnWidth1: int = ...,
    columnWidth2: Tuple[int, int] = ...,
    columnWidth3: Tuple[int, int, int] = ...,
    columnWidth4: Tuple[int, int, int, int] = ...,
    columnWidth5: Tuple[int, int, int, int, int] = ...,
    columnWidth6: Tuple[int, int, int, int, int, int] = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    editable: bool = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    fileName: Queryable[str] = ...,
    forceChangeCommand: bool = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    insertText: str = ...,
    insertionPosition: Queryable[int] = ...,
    isObscured: bool = ...,
    label: Queryable[str] = ...,
    manage: bool = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    placeholderText: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    rowAttach: Multiuse[Tuple[int, str, int]] = ...,
    statusBarMessage: str = ...,
    text: Queryable[str] = ...,
    textChangedCommand: Callable[..., Any] = ...,
    useTemplate: str = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[str, Tuple[float, float, float], bool, int, Callable[..., Any]]: ...
def textManip(*args: Any, query: bool = ..., visible: bool = ...) -> bool: ...
def textScrollList(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    allItems: bool = ...,
    allItemsUniqueTags: bool = ...,
    allowAutomaticSelection: bool = ...,
    allowMultiSelection: bool = ...,
    annotation: Queryable[str] = ...,
    append: Multiuse[str] = ...,
    appendPosition: Multiuse[Tuple[int, str]] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    defineTemplate: str = ...,
    deleteKeyCommand: Callable[..., Any] = ...,
    deselectAll: bool = ...,
    deselectIndexedItem: Multiuse[int] = ...,
    deselectItem: Multiuse[str] = ...,
    docTag: Queryable[str] = ...,
    doubleClickCommand: Callable[..., Any] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    emptyLabel: Queryable[str] = ...,
    enable: bool = ...,
    enableAll: bool = ...,
    enableBackground: bool = ...,
    enableIndexedItem: Multiuse[Tuple[int, bool]] = ...,
    enableItem: Multiuse[Tuple[str, bool]] = ...,
    enableKeyboardFocus: bool = ...,
    enableUniqueTagItem: Multiuse[Tuple[str, bool]] = ...,
    exists: bool = ...,
    font: Queryable[str] = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    isObscured: bool = ...,
    lineFont: Multiuse[Tuple[int, str]] = ...,
    manage: bool = ...,
    noBackground: bool = ...,
    numberOfItems: bool = ...,
    numberOfPopupMenus: bool = ...,
    numberOfRows: Queryable[int] = ...,
    numberOfSelectedItems: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    removeAll: bool = ...,
    removeIndexedItem: Multiuse[int] = ...,
    removeItem: Multiuse[str] = ...,
    selectCommand: Callable[..., Any] = ...,
    selectIndexedItem: Queryable[Multiuse[int]] = ...,
    selectItem: Queryable[Multiuse[str]] = ...,
    selectUniqueTagItem: Queryable[Multiuse[str]] = ...,
    showIndexedItem: int = ...,
    statusBarMessage: str = ...,
    uniqueTag: Multiuse[str] = ...,
    useTemplate: str = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[
    str,
    bool,
    Tuple[float, float, float],
    int,
    Multiuse[int],
    Multiuse[str],
    Callable[..., Any],
]: ...
def textureDeformer(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    after: bool = ...,
    afterReference: bool = ...,
    before: bool = ...,
    components: bool = ...,
    deformerTools: bool = ...,
    direction: str = ...,
    dumpInfo: bool = ...,
    envelope: float = ...,
    exclusive: Queryable[str] = ...,
    fixedSetupData: str = ...,
    frontOfChain: bool = ...,
    geometry: Queryable[Multiuse[str]] = ...,
    geometryIndices: bool = ...,
    ignoreSelected: bool = ...,
    includeHiddenSelections: bool = ...,
    name: str = ...,
    offset: float = ...,
    parallel: bool = ...,
    pointSpace: str = ...,
    prune: bool = ...,
    remove: Multiuse[bool] = ...,
    selectedComponents: bool = ...,
    split: bool = ...,
    strength: float = ...,
    useComponentTags: bool = ...,
    vectorOffset: Tuple[float, float, float] = ...,
    vectorSpace: str = ...,
    vectorStrength: Tuple[float, float, float] = ...,
) -> Union[str, bool, Multiuse[str]]: ...
def textureLassoContext(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    history: bool = ...,
    drawClosed: bool = ...,
    exists: bool = ...,
    image1: str = ...,
    image2: str = ...,
    image3: str = ...,
    name: str = ...,
) -> None: ...
def texturePlacementContext(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    exists: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    labelMapping: bool = ...,
    name: str = ...,
) -> Union[str, bool]: ...
def textureWindow(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    activeSelectionOnTop: bool = ...,
    axesColor: Queryable[Tuple[float, float, float]] = ...,
    backFacingColor: Queryable[Tuple[float, float, float, float]] = ...,
    capture: str = ...,
    captureSequenceNumber: int = ...,
    changeCommand: Queryable[Tuple[str, str, str, str]] = ...,
    checkerColor1: Queryable[Tuple[float, float, float]] = ...,
    checkerColor2: Queryable[Tuple[float, float, float]] = ...,
    checkerColorMode: Queryable[int] = ...,
    checkerDensity: Queryable[int] = ...,
    checkerDrawTileLabels: bool = ...,
    checkerGradient1: Queryable[Tuple[float, float, float]] = ...,
    checkerGradient2: Queryable[Tuple[float, float, float]] = ...,
    checkerGradientOverlay: bool = ...,
    checkerTileLabelColor: Queryable[Tuple[float, float, float]] = ...,
    clearImage: bool = ...,
    cmEnabled: bool = ...,
    control: bool = ...,
    defineTemplate: str = ...,
    displayAxes: bool = ...,
    displayCheckered: bool = ...,
    displayDistortion: bool = ...,
    displayDivisionLines: bool = ...,
    displayGridLines: bool = ...,
    displayImage: Queryable[int] = ...,
    displayIsolateSelectHUD: bool = ...,
    displayLabels: bool = ...,
    displayOverlappingUVCountHUD: bool = ...,
    displayPreselection: bool = ...,
    displayReversedUVCountHUD: bool = ...,
    displaySolidMap: bool = ...,
    displayStyle: Queryable[str] = ...,
    displayTextureBorder: bool = ...,
    displayUVPositionHUD: bool = ...,
    displayUVShellCountHUD: bool = ...,
    displayUVStatisticsHUD: bool = ...,
    displayUsedPercentageHUD: bool = ...,
    distortionAlpha: Queryable[float] = ...,
    distortionPerObject: bool = ...,
    divisions: Queryable[int] = ...,
    docTag: Queryable[str] = ...,
    doubleBuffer: bool = ...,
    drawAxis: bool = ...,
    drawSubregions: bool = ...,
    exists: bool = ...,
    exposure: Queryable[float] = ...,
    filter: Queryable[str] = ...,
    forceMainConnection: Queryable[str] = ...,
    forceRebake: bool = ...,
    frameAll: bool = ...,
    frameSelected: bool = ...,
    frontFacingColor: Queryable[Tuple[float, float, float, float]] = ...,
    gamma: Queryable[float] = ...,
    gridLinesColor: Queryable[Tuple[float, float, float]] = ...,
    gridNumbersColor: Queryable[Tuple[float, float, float]] = ...,
    highlightConnection: Queryable[str] = ...,
    imageBaseColor: Queryable[Tuple[float, float, float]] = ...,
    imageDim: bool = ...,
    imageDisplay: bool = ...,
    imageNames: bool = ...,
    imageNumber: Queryable[int] = ...,
    imagePixelSnap: bool = ...,
    imageRatio: bool = ...,
    imageRatioValue: Queryable[float] = ...,
    imageSize: bool = ...,
    imageTileRange: Queryable[Tuple[float, float, float, float]] = ...,
    imageUnfiltered: bool = ...,
    internalFaces: bool = ...,
    labelPosition: Queryable[str] = ...,
    loadImage: str = ...,
    lockMainConnection: bool = ...,
    mainListConnection: Queryable[str] = ...,
    maxResolution: Queryable[int] = ...,
    multiColorAlpha: Queryable[float] = ...,
    nbImages: bool = ...,
    nextView: bool = ...,
    numUvSets: bool = ...,
    numberOfImages: Queryable[int] = ...,
    numberOfTextures: Queryable[int] = ...,
    panel: Queryable[str] = ...,
    parent: Queryable[str] = ...,
    previousView: bool = ...,
    realSize: bool = ...,
    refresh: bool = ...,
    relatedFaces: bool = ...,
    removeAllImages: bool = ...,
    removeImage: bool = ...,
    rendererString: Queryable[str] = ...,
    reset: bool = ...,
    saveImage: bool = ...,
    scaleBlue: Queryable[float] = ...,
    scaleGreen: Queryable[float] = ...,
    scaleRed: Queryable[float] = ...,
    selectInternalFaces: bool = ...,
    selectRelatedFaces: bool = ...,
    selectionConnection: Queryable[str] = ...,
    setUvSet: int = ...,
    singleBuffer: bool = ...,
    size: Queryable[float] = ...,
    solidMap3dView: bool = ...,
    solidMapColorSeed: Queryable[int] = ...,
    solidMapPerShell: bool = ...,
    spacing: float = ...,
    stateString: bool = ...,
    style: Queryable[int] = ...,
    subdivisionLinesColor: Queryable[Tuple[float, float, float]] = ...,
    textureBorder3dView: bool = ...,
    textureBorderColor: Queryable[Tuple[float, float, float]] = ...,
    textureBorderWidth: Queryable[int] = ...,
    textureNames: bool = ...,
    textureNumber: Queryable[int] = ...,
    tileLabels: bool = ...,
    tileLinesColor: Queryable[Tuple[float, float, float]] = ...,
    toggle: bool = ...,
    toggleExposure: bool = ...,
    toggleGamma: bool = ...,
    unParent: bool = ...,
    unlockMainConnection: bool = ...,
    updateMainConnection: bool = ...,
    useFaceGroup: bool = ...,
    useTemplate: str = ...,
    usedPercentageHUDRange: Queryable[Tuple[float, float, float, float]] = ...,
    uvSets: bool = ...,
    viewPortImage: bool = ...,
    viewTransformName: Queryable[str] = ...,
    wireframeComponentColor: Queryable[Tuple[float, float, float, float]] = ...,
    wireframeObjectColor: Queryable[Tuple[float, float, float, float]] = ...,
    writeImage: str = ...,
) -> Union[
    str,
    bool,
    Tuple[float, float, float],
    Tuple[float, float, float, float],
    Tuple[str, str, str, str],
    int,
    float,
]: ...
def threadCount(
    *, query: bool = ..., numberOfThreads: Queryable[int] = ...
) -> Union[bool, int]: ...
def threePointArcCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    degree: Queryable[int] = ...,
    exists: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    name: str = ...,
    spans: Queryable[int] = ...,
) -> Union[str, int]: ...
def thumbnailCaptureComponent(
    *,
    query: bool = ...,
    capture: bool = ...,
    capturedFrameCount: bool = ...,
    closeCurrentSession: bool = ...,
    delete: bool = ...,
    endFrame: Queryable[int] = ...,
    fileDialogCallback: str = ...,
    isSessionOpened: bool = ...,
    launchedFromOptionsBox: bool = ...,
    previewPath: bool = ...,
    removeProjectThumbnail: str = ...,
    save: str = ...,
    startFrame: Queryable[int] = ...,
) -> Union[bool, int]: ...
def timeCode(
    *,
    edit: bool = ...,
    query: bool = ...,
    mayaStartFrame: Queryable[float] = ...,
    productionStartFrame: Queryable[float] = ...,
    productionStartHour: Queryable[float] = ...,
    productionStartMinute: Queryable[float] = ...,
    productionStartSecond: Queryable[float] = ...,
) -> Union[int, float]: ...
def timeControl(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    animCurveNames: bool = ...,
    animLayerFilterOptions: Queryable[str] = ...,
    animLayerShowWeight: bool = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    beginScrub: bool = ...,
    currentFrameColor: Tuple[float, float, float, float] = ...,
    defineTemplate: str = ...,
    displaySound: bool = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    endScrub: bool = ...,
    exists: bool = ...,
    forceRedraw: bool = ...,
    forceRefresh: bool = ...,
    foregroundColor: Tuple[float, float, float] = ...,
    fullPathName: bool = ...,
    globalTime: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    isObscured: bool = ...,
    mainListConnection: Queryable[str] = ...,
    manage: bool = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    pressCommand: Callable[..., Any] = ...,
    preventOverride: bool = ...,
    range: bool = ...,
    rangeArray: bool = ...,
    rangeVisible: bool = ...,
    releaseCommand: Callable[..., Any] = ...,
    repeatChunkSize: Queryable[float] = ...,
    repeatOnHold: bool = ...,
    resample: bool = ...,
    showKeys: Queryable[str] = ...,
    showKeysCombined: bool = ...,
    snap: bool = ...,
    sound: Queryable[str] = ...,
    statusBarMessage: str = ...,
    tickSize: Queryable[int] = ...,
    tickSpan: Queryable[int] = ...,
    useTemplate: str = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    waveform: Queryable[str] = ...,
    width: Queryable[int] = ...,
) -> Union[str, bool, Tuple[float, float, float], int, float, Callable[..., Any]]: ...
def timeEditor(
    *args: Any,
    query: bool = ...,
    allClips: str = ...,
    clipId: Multiuse[int] = ...,
    commonParentTrack: bool = ...,
    composition: str = ...,
    drivingClipsForAttr: str = ...,
    drivingClipsForObj: Tuple[str, int] = ...,
    includeParent: bool = ...,
    mute: bool = ...,
    selectedClips: str = ...,
    topLevelClips: str = ...,
) -> Union[str, bool]: ...
def timeEditorAnimSource(
    *args: Any,
    edit: bool = ...,
    query: bool = ...,
    addSource: str = ...,
    apply: bool = ...,
    bakeToAnimSource: str = ...,
    calculateTiming: bool = ...,
    copyAnimation: bool = ...,
    drivenClips: bool = ...,
    export: str = ...,
    isUnique: bool = ...,
    removeSource: str = ...,
    targetIndex: Queryable[str] = ...,
    targets: bool = ...,
    addObjects: Queryable[str] = ...,
    addRelatedKG: bool = ...,
    addSelectedObjects: bool = ...,
    attribute: Multiuse[str] = ...,
    exclusive: bool = ...,
    importAllFbxTakes: bool = ...,
    importFbx: str = ...,
    importFbxTakes: str = ...,
    importMayaFile: str = ...,
    importOption: str = ...,
    importPopulateOption: str = ...,
    importedContainerNames: str = ...,
    includeRoot: bool = ...,
    populateImportedAnimSources: str = ...,
    poseClip: bool = ...,
    recursively: bool = ...,
    removeSceneAnimation: bool = ...,
    showAnimSourceRemapping: bool = ...,
    takeList: str = ...,
    takesToImport: str = ...,
    type: Queryable[Multiuse[str]] = ...,
) -> Union[str, bool, Multiuse[str]]: ...
def timeEditorBakeClips(
    *args: Any,
    edit: bool = ...,
    query: bool = ...,
    bakeToAnimSource: str = ...,
    bakeToClip: str = ...,
    clipId: Multiuse[int] = ...,
    combineLayers: bool = ...,
    forceSampling: bool = ...,
    keepOriginalClip: bool = ...,
    path: Multiuse[str] = ...,
    sampleBy: int = ...,
    targetTrackIndex: int = ...,
    targetTracksNode: str = ...,
) -> int: ...
def timeEditorClip(
    *args: Any,
    edit: bool = ...,
    query: bool = ...,
    absolute: bool = ...,
    addAttribute: Multiuse[str] = ...,
    allowShrinking: bool = ...,
    animSource: Queryable[str] = ...,
    audio: str = ...,
    blendMode: Queryable[int] = ...,
    children: Queryable[int] = ...,
    clipAfter: bool = ...,
    clipBefore: bool = ...,
    clipDataType: bool = ...,
    clipId: Multiuse[int] = ...,
    clipIdFromNodeName: Queryable[int] = ...,
    clipIdFromPath: bool = ...,
    clipNode: bool = ...,
    clipPath: bool = ...,
    copyClip: bool = ...,
    crossfadeMode: Queryable[int] = ...,
    crossfadePlug: bool = ...,
    curveTime: Queryable[int] = ...,
    defaultGhostRoot: bool = ...,
    drivenAttributes: bool = ...,
    drivenClipsBySource: Queryable[str] = ...,
    drivenObjects: bool = ...,
    drivenRootObjects: bool = ...,
    drivingSources: Queryable[str] = ...,
    duplicateClip: bool = ...,
    duration: Queryable[int] = ...,
    emptySource: bool = ...,
    endTime: Queryable[int] = ...,
    existingOnly: bool = ...,
    exists: bool = ...,
    explode: int = ...,
    exportAllClips: bool = ...,
    exportFbx: str = ...,
    extend: bool = ...,
    extendParent: bool = ...,
    ghost: bool = ...,
    ghostRootAdd: Multiuse[str] = ...,
    ghostRootRemove: Multiuse[str] = ...,
    group: bool = ...,
    holdEnd: Queryable[int] = ...,
    holdStart: Queryable[int] = ...,
    importTakeDestination: int = ...,
    isContainer: bool = ...,
    listUserGhostRoot: bool = ...,
    loopEnd: Queryable[int] = ...,
    loopStart: Queryable[int] = ...,
    minClipDuration: bool = ...,
    modifyAnimSource: bool = ...,
    moveClip: int = ...,
    mute: bool = ...,
    name: Queryable[str] = ...,
    parent: int = ...,
    parentClipId: Queryable[int] = ...,
    parentGroupId: bool = ...,
    pasteClip: int = ...,
    path: Multiuse[str] = ...,
    preserveAnimationTiming: bool = ...,
    razorClip: int = ...,
    remap: Tuple[str, str] = ...,
    remapNamespace: Multiuse[Tuple[str, str]] = ...,
    remapSource: Tuple[str, str] = ...,
    remappedSourceAttrs: bool = ...,
    remappedTargetAttrs: bool = ...,
    removeAttribute: Multiuse[str] = ...,
    removeClip: bool = ...,
    removeCrossfade: bool = ...,
    removeWeightCurve: bool = ...,
    resetTiming: bool = ...,
    resetTransition: bool = ...,
    ripple: bool = ...,
    rootClipId: int = ...,
    rootPath: str = ...,
    scaleEnd: int = ...,
    scalePivot: int = ...,
    scaleStart: int = ...,
    setKeyframe: Multiuse[str] = ...,
    speedRamping: Queryable[int] = ...,
    startTime: Queryable[int] = ...,
    timeWarp: bool = ...,
    timeWarpCurve: bool = ...,
    timeWarpType: Queryable[int] = ...,
    track: Queryable[str] = ...,
    tracksNode: bool = ...,
    transition: bool = ...,
    trimEnd: int = ...,
    trimStart: int = ...,
    truncated: bool = ...,
    uniqueAnimSource: bool = ...,
    userGhostRoot: bool = ...,
    weightCurve: bool = ...,
    zeroKeying: bool = ...,
    addObjects: Queryable[str] = ...,
    addRelatedKG: bool = ...,
    addSelectedObjects: bool = ...,
    attribute: Multiuse[str] = ...,
    exclusive: bool = ...,
    importAllFbxTakes: bool = ...,
    importFbx: str = ...,
    importFbxTakes: str = ...,
    importMayaFile: str = ...,
    importOption: str = ...,
    importPopulateOption: str = ...,
    importedContainerNames: str = ...,
    includeRoot: bool = ...,
    populateImportedAnimSources: str = ...,
    poseClip: bool = ...,
    recursively: bool = ...,
    removeSceneAnimation: bool = ...,
    showAnimSourceRemapping: bool = ...,
    takeList: str = ...,
    takesToImport: str = ...,
    type: Queryable[Multiuse[str]] = ...,
) -> Union[str, bool, int, Multiuse[str]]: ...
def timeEditorClipLayer(
    *args: Any,
    edit: bool = ...,
    query: bool = ...,
    addAttribute: str = ...,
    addLayer: str = ...,
    addObject: str = ...,
    allLayers: bool = ...,
    attribute: Multiuse[str] = ...,
    attributeKeyable: Queryable[str] = ...,
    clipId: int = ...,
    index: int = ...,
    keySiblings: bool = ...,
    layerId: int = ...,
    layerName: Queryable[str] = ...,
    mode: int = ...,
    mute: bool = ...,
    name: bool = ...,
    path: str = ...,
    removeAttribute: str = ...,
    removeLayer: bool = ...,
    removeObject: str = ...,
    resetSolo: bool = ...,
    setKeyframe: bool = ...,
    solo: bool = ...,
    zeroKeying: bool = ...,
) -> Union[str, bool]: ...
def timeEditorClipOffset(
    *args: Any,
    edit: bool = ...,
    query: bool = ...,
    applyToAllRoots: bool = ...,
    clipId: Multiuse[int] = ...,
    matchClipId: int = ...,
    matchDstTime: int = ...,
    matchObj: str = ...,
    matchOffsetRot: bool = ...,
    matchOffsetTrans: bool = ...,
    matchPath: str = ...,
    matchRotOp: int = ...,
    matchSrcTime: int = ...,
    matchTransOp: int = ...,
    offsetTransform: bool = ...,
    path: Multiuse[str] = ...,
    resetMatch: int = ...,
    resetMatchPath: str = ...,
    rootObj: Queryable[Multiuse[str]] = ...,
    upVectorX: float = ...,
    upVectorY: float = ...,
    upVectorZ: float = ...,
) -> Union[bool, Multiuse[str]]: ...
def timeEditorComposition(
    *args: Any,
    edit: bool = ...,
    query: bool = ...,
    active: bool = ...,
    allCompositions: bool = ...,
    createTrack: bool = ...,
    delete: bool = ...,
    duplicateFrom: str = ...,
    rename: Tuple[str, str] = ...,
    tracksNode: bool = ...,
) -> Union[str, bool]: ...
def timeEditorPanel(
    *args: Any,
    edit: bool = ...,
    query: bool = ...,
    activeClipEditMode: Queryable[int] = ...,
    activeTabRootClipId: bool = ...,
    activeTabTime: bool = ...,
    activeTabView: Queryable[int] = ...,
    autoFit: Queryable[str] = ...,
    autoFitTime: Queryable[str] = ...,
    control: bool = ...,
    defineTemplate: str = ...,
    displayActiveKeyTangents: str = ...,
    displayActiveKeys: str = ...,
    displayInfinities: str = ...,
    displayKeys: str = ...,
    displayTangents: str = ...,
    displayValues: str = ...,
    docTag: Queryable[str] = ...,
    exists: bool = ...,
    filter: Queryable[str] = ...,
    forceMainConnection: Queryable[str] = ...,
    groupIdForTabView: int = ...,
    highlightConnection: Queryable[str] = ...,
    keyingTarget: Queryable[int] = ...,
    layerId: int = ...,
    lockMainConnection: bool = ...,
    lookAt: str = ...,
    mainListConnection: Queryable[str] = ...,
    menu: Callable[..., Any] = ...,
    minClipWidth: Queryable[int] = ...,
    panel: Queryable[str] = ...,
    parent: Queryable[str] = ...,
    selectionConnection: Queryable[str] = ...,
    setToPrevClipEditMode: bool = ...,
    snapTime: Queryable[str] = ...,
    snapToClip: bool = ...,
    snapToFrame: bool = ...,
    snapTolerance: Queryable[int] = ...,
    snapValue: Queryable[str] = ...,
    stateString: bool = ...,
    tabView: int = ...,
    timeCursor: bool = ...,
    unParent: bool = ...,
    unlockMainConnection: bool = ...,
    updateMainConnection: bool = ...,
    useTemplate: str = ...,
) -> Union[str, int, bool]: ...
def timeEditorTracks(
    *args: Any,
    edit: bool = ...,
    query: bool = ...,
    activeClipWeight: Queryable[int] = ...,
    activeClipWeightId: Queryable[int] = ...,
    addTrack: int = ...,
    allClips: bool = ...,
    allTracks: bool = ...,
    allTracksRecursive: bool = ...,
    composition: bool = ...,
    path: str = ...,
    plugIndex: Queryable[int] = ...,
    removeTrack: Multiuse[int] = ...,
    removeTrackByPath: Multiuse[str] = ...,
    reorderTrack: Tuple[int, int] = ...,
    resetMute: bool = ...,
    resetSolo: bool = ...,
    selectedTracks: bool = ...,
    trackGhost: bool = ...,
    trackIndex: Queryable[int] = ...,
    trackMuted: bool = ...,
    trackName: Queryable[str] = ...,
    trackSolo: bool = ...,
    trackType: Queryable[int] = ...,
) -> Union[int, bool, str]: ...
def timeField(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    annotation: Queryable[str] = ...,
    autoUnitWidth: Queryable[int] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    changeCommand: Callable[..., Any] = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dragCommand: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    editable: bool = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    enterCommand: Callable[..., Any] = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    isObscured: bool = ...,
    manage: bool = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    precision: Queryable[int] = ...,
    preventOverride: bool = ...,
    receiveFocusCommand: Callable[..., Any] = ...,
    statusBarMessage: str = ...,
    step: Queryable[int] = ...,
    useTemplate: str = ...,
    value: Queryable[int] = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[str, int, Tuple[float, float, float], bool, Callable[..., Any]]: ...
def timeFieldGrp(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    adjustableColumn: int = ...,
    adjustableColumn2: int = ...,
    adjustableColumn3: int = ...,
    adjustableColumn4: int = ...,
    adjustableColumn5: int = ...,
    adjustableColumn6: int = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    changeCommand: Callable[..., Any] = ...,
    columnAlign: Multiuse[Tuple[int, str]] = ...,
    columnAlign2: Tuple[str, str] = ...,
    columnAlign3: Tuple[str, str, str] = ...,
    columnAlign4: Tuple[str, str, str, str] = ...,
    columnAlign5: Tuple[str, str, str, str, str] = ...,
    columnAlign6: Tuple[str, str, str, str, str, str] = ...,
    columnAttach: Multiuse[Tuple[int, str, int]] = ...,
    columnAttach2: Tuple[str, str] = ...,
    columnAttach3: Tuple[str, str, str] = ...,
    columnAttach4: Tuple[str, str, str, str] = ...,
    columnAttach5: Tuple[str, str, str, str, str] = ...,
    columnAttach6: Tuple[str, str, str, str, str, str] = ...,
    columnOffset2: Tuple[int, int] = ...,
    columnOffset3: Tuple[int, int, int] = ...,
    columnOffset4: Tuple[int, int, int, int] = ...,
    columnOffset5: Tuple[int, int, int, int, int] = ...,
    columnOffset6: Tuple[int, int, int, int, int, int] = ...,
    columnWidth: Multiuse[Tuple[int, int]] = ...,
    columnWidth1: int = ...,
    columnWidth2: Tuple[int, int] = ...,
    columnWidth3: Tuple[int, int, int] = ...,
    columnWidth4: Tuple[int, int, int, int] = ...,
    columnWidth5: Tuple[int, int, int, int, int] = ...,
    columnWidth6: Tuple[int, int, int, int, int, int] = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dragCommand: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enable1: bool = ...,
    enable2: bool = ...,
    enable3: bool = ...,
    enable4: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    extraLabel: Queryable[str] = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    isObscured: bool = ...,
    label: Queryable[str] = ...,
    manage: bool = ...,
    noBackground: bool = ...,
    numberOfFields: int = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    precision: int = ...,
    preventOverride: bool = ...,
    rowAttach: Multiuse[Tuple[int, str, int]] = ...,
    statusBarMessage: str = ...,
    step: Queryable[int] = ...,
    useTemplate: str = ...,
    value: Queryable[Tuple[int, int, int, int]] = ...,
    value1: Queryable[int] = ...,
    value2: Queryable[int] = ...,
    value3: Queryable[int] = ...,
    value4: Queryable[int] = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[
    str,
    Tuple[float, float, float],
    bool,
    int,
    Tuple[int, int, int, int],
    Callable[..., Any],
]: ...
def timePort(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    globalTime: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    isObscured: bool = ...,
    manage: bool = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    snap: bool = ...,
    statusBarMessage: str = ...,
    useTemplate: str = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[str, Tuple[float, float, float], bool, int, Callable[..., Any]]: ...
def timeRangeInfo(*, time: Multiuse[NullableRange[float]] = ...) -> None: ...
def timeSliderCustomDraw(
    arg0: int = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    color: Tuple[float, float, float, float] = ...,
    clearPrimitives: bool = ...,
    deregister: int = ...,
    height: int = ...,
    layer: int = ...,
    location: int = ...,
    priority: int = ...,
    registerAbove: str = ...,
    registerBelow: str = ...,
    registerOn: Tuple[str, int] = ...,
    setPrimitives: Tuple[str, float, float] = ...,
    visible: bool = ...,
) -> None: ...
def timeWarp(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    deleteFrame: int = ...,
    frame: Queryable[Multiuse[float]] = ...,
    g: bool = ...,
    interpType: Queryable[Tuple[int, str]] = ...,
    moveFrame: Queryable[Tuple[int, float]] = ...,
) -> Union[str, Multiuse[float], bool, Tuple[int, str], Tuple[int, float]]: ...
def timer(
    *,
    endTimer: bool = ...,
    lapTime: bool = ...,
    name: str = ...,
    startTimer: bool = ...,
) -> bool: ...
def timerX(*, startTime: float = ...) -> float: ...
def toggle(
    *args: str,
    query: bool = ...,
    above: bool = ...,
    below: bool = ...,
    boundary: bool = ...,
    boundingBox: bool = ...,
    controlVertex: bool = ...,
    doNotWrite: bool = ...,
    editPoint: bool = ...,
    extent: bool = ...,
    facet: bool = ...,
    geometry: bool = ...,
    gl: bool = ...,
    highPrecisionNurbs: bool = ...,
    hull: bool = ...,
    latticePoint: bool = ...,
    latticeShape: bool = ...,
    localAxis: bool = ...,
    newCurve: bool = ...,
    newPolymesh: bool = ...,
    newSurface: bool = ...,
    normal: bool = ...,
    origin: bool = ...,
    point: bool = ...,
    pointDisplay: bool = ...,
    pointFacet: bool = ...,
    rotatePivot: bool = ...,
    scalePivot: bool = ...,
    selectHandle: bool = ...,
    state: bool = ...,
    surfaceFace: bool = ...,
    template: bool = ...,
    uvCoords: bool = ...,
    vertex: bool = ...,
) -> bool: ...
def toggleAxis(*, query: bool = ..., origin: bool = ..., view: bool = ...) -> bool: ...
def toggleDisplacement(*args: str) -> bool: ...
def toggleWindowVisibility(arg0: str = ..., /) -> bool: ...
def tolerance(
    *,
    query: bool = ...,
    angular: Queryable[float] = ...,
    linear: Queryable[float] = ...,
) -> Union[bool, float]: ...
def toolBar(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    allowedArea: Queryable[Multiuse[str]] = ...,
    annotation: Queryable[str] = ...,
    area: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    content: Queryable[str] = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    isObscured: bool = ...,
    label: Queryable[str] = ...,
    manage: bool = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    statusBarMessage: str = ...,
    useTemplate: str = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[
    str, Multiuse[str], Tuple[float, float, float], bool, int, Callable[..., Any]
]: ...
def toolButton(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    allowMultipleTools: bool = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    changeCommand: Callable[..., Any] = ...,
    collection: str = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    doubleClickCommand: Callable[..., Any] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    imageOverlayLabel: Queryable[str] = ...,
    isObscured: bool = ...,
    manage: bool = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    offCommand: Callable[..., Any] = ...,
    onCommand: Callable[..., Any] = ...,
    parent: Queryable[str] = ...,
    popupIndicatorVisible: bool = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    select: bool = ...,
    stateSelfManaged: bool = ...,
    statusBarMessage: str = ...,
    style: str = ...,
    tool: Queryable[Multiuse[str]] = ...,
    toolArray: bool = ...,
    toolCount: bool = ...,
    toolImage1: Queryable[Multiuse[Tuple[str, str]]] = ...,
    toolImage2: Queryable[Multiuse[Tuple[str, str]]] = ...,
    toolImage3: Queryable[Multiuse[Tuple[str, str]]] = ...,
    useTemplate: str = ...,
    version: Queryable[str] = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[
    str,
    bool,
    Tuple[float, float, float],
    int,
    Multiuse[str],
    Multiuse[Tuple[str, str]],
    Callable[..., Any],
]: ...
def toolCollection(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    clear: bool = ...,
    collectionItemArray: bool = ...,
    defineTemplate: str = ...,
    exists: bool = ...,
    gl: bool = ...,
    numberOfCollectionItems: bool = ...,
    parent: str = ...,
    select: Queryable[str] = ...,
    useTemplate: str = ...,
) -> Union[str, bool]: ...
def toolDropped(arg0: str = ..., /) -> bool: ...
def toolHasOptions(arg0: str = ..., /) -> bool: ...
def toolPropertyWindow(
    *,
    edit: bool = ...,
    query: bool = ...,
    field: Queryable[str] = ...,
    helpButton: Queryable[str] = ...,
    icon: Queryable[str] = ...,
    inMainWindow: bool = ...,
    location: Queryable[str] = ...,
    noviceMode: bool = ...,
    resetButton: Queryable[str] = ...,
    restore: bool = ...,
    selectCommand: Queryable[str] = ...,
    showCommand: Queryable[str] = ...,
) -> Union[bool, str]: ...
def torus(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    axis: Queryable[Tuple[float, float, float]] = ...,
    caching: bool = ...,
    degree: Queryable[int] = ...,
    endSweep: Queryable[float] = ...,
    heightRatio: Queryable[float] = ...,
    minorSweep: Queryable[float] = ...,
    nodeState: Queryable[int] = ...,
    pivot: Queryable[Tuple[float, float, float]] = ...,
    radius: Queryable[float] = ...,
    sections: Queryable[int] = ...,
    spans: Queryable[int] = ...,
    startSweep: Queryable[float] = ...,
    tolerance: Queryable[float] = ...,
    useTolerance: bool = ...,
    constructionHistory: bool = ...,
    name: str = ...,
    object: bool = ...,
    polygon: int = ...,
) -> Union[List[str], Tuple[float, float, float], bool, int, float]: ...
def track(
    arg0: str = ...,
    /,
    *,
    down: float = ...,
    left: float = ...,
    right: float = ...,
    upDistance01: float = ...,
    upDistance02: float = ...,
) -> bool: ...
def trackCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    alternateContext: bool = ...,
    exists: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    name: str = ...,
    toolName: Queryable[str] = ...,
    trackGeometry: bool = ...,
    trackScale: Queryable[float] = ...,
) -> Union[str, bool, float]: ...
def transferAttributes(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    after: bool = ...,
    afterReference: bool = ...,
    before: bool = ...,
    colorBorders: int = ...,
    components: bool = ...,
    deformerTools: bool = ...,
    dumpInfo: bool = ...,
    exclusive: Queryable[str] = ...,
    fixedSetupData: str = ...,
    flipUVs: int = ...,
    frontOfChain: bool = ...,
    geometry: Queryable[Multiuse[str]] = ...,
    geometryIndices: bool = ...,
    ignoreSelected: bool = ...,
    includeHiddenSelections: bool = ...,
    matchChoice: int = ...,
    name: str = ...,
    parallel: bool = ...,
    prune: bool = ...,
    remove: Multiuse[bool] = ...,
    sampleSpace: int = ...,
    searchMethod: int = ...,
    searchScaleX: float = ...,
    searchScaleY: float = ...,
    searchScaleZ: float = ...,
    selectedComponents: bool = ...,
    sourceColorSet: str = ...,
    sourceUvSet: str = ...,
    sourceUvSpace: str = ...,
    split: bool = ...,
    targetColorSet: str = ...,
    targetUvSet: str = ...,
    targetUvSpace: str = ...,
    transferColors: int = ...,
    transferNormals: int = ...,
    transferPositions: int = ...,
    transferUVs: int = ...,
    useComponentTags: bool = ...,
) -> Union[str, bool, Multiuse[str]]: ...
def transferShadingSets(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    sampleSpace: Queryable[int] = ...,
    searchMethod: Queryable[int] = ...,
) -> Union[bool, int]: ...
def transformCompare(*args: str, root: bool = ...) -> int: ...
def transformLimits(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    enableRotationX: Queryable[Tuple[bool, bool]] = ...,
    enableRotationY: Queryable[Tuple[bool, bool]] = ...,
    enableRotationZ: Queryable[Tuple[bool, bool]] = ...,
    enableScaleX: Queryable[Tuple[bool, bool]] = ...,
    enableScaleY: Queryable[Tuple[bool, bool]] = ...,
    enableScaleZ: Queryable[Tuple[bool, bool]] = ...,
    enableTranslationX: Queryable[Tuple[bool, bool]] = ...,
    enableTranslationY: Queryable[Tuple[bool, bool]] = ...,
    enableTranslationZ: Queryable[Tuple[bool, bool]] = ...,
    remove: bool = ...,
    rotationX: Queryable[Tuple[float, float]] = ...,
    rotationY: Queryable[Tuple[float, float]] = ...,
    rotationZ: Queryable[Tuple[float, float]] = ...,
    scaleX: Queryable[Tuple[float, float]] = ...,
    scaleY: Queryable[Tuple[float, float]] = ...,
    scaleZ: Queryable[Tuple[float, float]] = ...,
    translationX: Queryable[Tuple[float, float]] = ...,
    translationY: Queryable[Tuple[float, float]] = ...,
    translationZ: Queryable[Tuple[float, float]] = ...,
) -> Union[bool, Tuple[bool, bool], Tuple[float, float]]: ...
def translator(
    arg0: str = ...,
    /,
    *,
    query: bool = ...,
    defaultFileRule: bool = ...,
    defaultOptions: Queryable[str] = ...,
    extension: bool = ...,
    fileCompression: Queryable[str] = ...,
    filter: bool = ...,
    findTranslator: Tuple[str, int] = ...,
    list: bool = ...,
    loaded: bool = ...,
    objectType: bool = ...,
    optionsScript: bool = ...,
    readSupport: bool = ...,
    writeSupport: bool = ...,
) -> Union[bool, str]: ...
def treeLister(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    addFavorite: Multiuse[str] = ...,
    addItem: Multiuse[Tuple[str, str, Callable[..., Any]]] = ...,
    addVnnItem: Multiuse[Tuple[str, str, str, str]] = ...,
    annotation: Queryable[str] = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    clearContents: bool = ...,
    collapsePath: Multiuse[str] = ...,
    defineTemplate: str = ...,
    displayName: Queryable[str] = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    executeItem: str = ...,
    exists: bool = ...,
    expandPath: Multiuse[str] = ...,
    expandToDepth: int = ...,
    favoritesCallback: Callable[..., Any] = ...,
    favoritesList: bool = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    isObscured: bool = ...,
    itemScript: str = ...,
    manage: bool = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    refreshCommand: Queryable[Callable[..., Any]] = ...,
    removeFavorite: Multiuse[str] = ...,
    removeItem: Multiuse[str] = ...,
    resultsPathUnderCursor: bool = ...,
    selectPath: Multiuse[str] = ...,
    setDisplayName: Multiuse[Tuple[str, str]] = ...,
    statusBarMessage: str = ...,
    useTemplate: str = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    vnnString: bool = ...,
    width: Queryable[int] = ...,
) -> Union[str, Tuple[float, float, float], bool, int, Callable[..., Any]]: ...
def treeView(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    addItem: Multiuse[Tuple[str, str]] = ...,
    allowDragAndDrop: bool = ...,
    allowHiddenParents: bool = ...,
    allowMultiSelection: bool = ...,
    allowReparenting: bool = ...,
    annotation: Queryable[str] = ...,
    attachButtonRight: int = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    borderHighlite: Tuple[str, bool] = ...,
    borderHighliteColor: Tuple[str, float, float, float] = ...,
    buttonErase: Queryable[Multiuse[Tuple[str, bool]]] = ...,
    buttonState: Multiuse[Tuple[str, int, str]] = ...,
    buttonStyle: Multiuse[Tuple[str, int, str]] = ...,
    buttonTextIcon: Multiuse[Tuple[str, int, str]] = ...,
    buttonTooltip: Multiuse[Tuple[str, int, str]] = ...,
    buttonTransparencyColor: Multiuse[Tuple[str, int, float, float, float]] = ...,
    buttonTransparencyOverride: Multiuse[Tuple[str, int, bool]] = ...,
    buttonVisible: Multiuse[Tuple[str, int, bool]] = ...,
    children: str = ...,
    clearSelection: bool = ...,
    contextMenuCommand: Callable[..., Any] = ...,
    defineTemplate: str = ...,
    displayLabel: Multiuse[Tuple[str, str]] = ...,
    displayLabelSuffix: Multiuse[Tuple[str, str]] = ...,
    docTag: Queryable[str] = ...,
    dragAndDropCommand: Callable[..., Any] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    editLabelCommand: Callable[..., Any] = ...,
    emptyLabel: Queryable[str] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableButton: Multiuse[Tuple[str, int, int]] = ...,
    enableKeyboardFocus: bool = ...,
    enableKeys: bool = ...,
    enableLabel: Tuple[str, int] = ...,
    exists: bool = ...,
    expandCollapseCommand: Callable[..., Any] = ...,
    expandItem: Tuple[str, bool] = ...,
    flatButton: Queryable[int] = ...,
    font: Queryable[Tuple[str, str]] = ...,
    fontFace: Tuple[str, int] = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    hideButtons: bool = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    highlite: Tuple[str, bool] = ...,
    highliteColor: Tuple[str, float, float, float] = ...,
    ignoreButtonClick: Multiuse[Tuple[str, int, int]] = ...,
    image: Multiuse[Tuple[str, int, str]] = ...,
    insertItem: Multiuse[Tuple[str, str, int]] = ...,
    isItemExpanded: str = ...,
    isLeaf: str = ...,
    isObscured: bool = ...,
    item: str = ...,
    itemAnnotation: Queryable[Tuple[str, str]] = ...,
    itemDblClickCommand: Callable[..., Any] = ...,
    itemDblClickCommand2: Callable[..., Any] = ...,
    itemExists: str = ...,
    itemIndex: str = ...,
    itemParent: str = ...,
    itemRenamedCommand: Callable[..., Any] = ...,
    itemSelected: str = ...,
    itemVisible: Queryable[Tuple[str, bool]] = ...,
    labelBackgroundColor: Tuple[str, float, float, float] = ...,
    manage: bool = ...,
    noBackground: bool = ...,
    numberOfButtons: int = ...,
    numberOfPopupMenus: bool = ...,
    ornament: Tuple[str, int, int, int] = ...,
    ornamentColor: Tuple[str, float, float, float] = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    pressCommand: Multiuse[Tuple[int, Callable[..., Any]]] = ...,
    preventOverride: bool = ...,
    removeAll: bool = ...,
    removeItem: str = ...,
    reverseTreeOrder: bool = ...,
    rightPressCommand: Multiuse[Tuple[int, Callable[..., Any]]] = ...,
    select: Tuple[str, int] = ...,
    selectCommand: Callable[..., Any] = ...,
    selectItem: Queryable[Tuple[str, bool]] = ...,
    selectionChangedCommand: Callable[..., Any] = ...,
    selectionColor: Queryable[Tuple[str, float, float, float]] = ...,
    showItem: str = ...,
    statusBarMessage: str = ...,
    textColor: Tuple[str, float, float, float] = ...,
    useTemplate: str = ...,
    verticalScrollPosition: Queryable[int] = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
) -> Union[
    str,
    bool,
    Tuple[float, float, float],
    Multiuse[Tuple[str, bool]],
    int,
    Tuple[str, str],
    Tuple[str, bool],
    Tuple[str, float, float, float],
    Callable[..., Any],
]: ...
def trim(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    locatorU: Queryable[Multiuse[float]] = ...,
    locatorV: Queryable[Multiuse[float]] = ...,
    nodeState: Queryable[int] = ...,
    selected: Queryable[int] = ...,
    shrink: bool = ...,
    tolerance: Queryable[float] = ...,
    constructionHistory: bool = ...,
    name: str = ...,
    object: bool = ...,
) -> Union[List[str], bool, Multiuse[float], int, float]: ...
def trimCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    autoCreate: bool = ...,
    activeNodes: bool = ...,
    caching: bool = ...,
    constructionHistory: bool = ...,
    exists: bool = ...,
    frozen: bool = ...,
    image1: str = ...,
    image2: str = ...,
    image3: str = ...,
    immediate: bool = ...,
    locatorU: Multiuse[float] = ...,
    locatorV: Multiuse[float] = ...,
    name: str = ...,
    nodeState: int = ...,
    object: bool = ...,
    replaceOriginal: bool = ...,
    reset: bool = ...,
    shrink: bool = ...,
    selected: int = ...,
    toolNode: bool = ...,
    tolerance: float = ...,
) -> None: ...
def truncateFluidCache(*args: str) -> bool: ...
def truncateHairCache(*args: str) -> bool: ...
def tumble(
    arg0: str = ...,
    /,
    *,
    azimuthAngle: float = ...,
    elevationAngle: float = ...,
    localTumble: int = ...,
    pivotPoint: Tuple[float, float, float] = ...,
    rotationAngles: Tuple[float, float] = ...,
) -> bool: ...
def tumbleCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    alternateContext: bool = ...,
    autoOrthoConstrain: bool = ...,
    autoSetPivot: bool = ...,
    exists: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    localTumble: Queryable[int] = ...,
    name: str = ...,
    objectTumble: bool = ...,
    orthoLock: bool = ...,
    orthoStep: Queryable[float] = ...,
    toolName: Queryable[str] = ...,
    tumbleScale: Queryable[float] = ...,
) -> Union[str, bool, int, float]: ...
def turbulence(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    attenuation: Queryable[float] = ...,
    frequency: Queryable[float] = ...,
    magnitude: Queryable[float] = ...,
    maxDistance: Queryable[float] = ...,
    name: Queryable[str] = ...,
    noiseLevel: Queryable[int] = ...,
    noiseRatio: Queryable[float] = ...,
    perVertex: bool = ...,
    phase: Queryable[float] = ...,
    phaseX: Queryable[float] = ...,
    phaseY: Queryable[float] = ...,
    phaseZ: Queryable[float] = ...,
    position: Queryable[Multiuse[Tuple[float, float, float]]] = ...,
    torusSectionRadius: Queryable[float] = ...,
    volumeExclusion: bool = ...,
    volumeOffset: Queryable[Tuple[float, float, float]] = ...,
    volumeShape: Queryable[str] = ...,
    volumeSweep: Queryable[float] = ...,
) -> Union[
    str,
    float,
    int,
    bool,
    Multiuse[Tuple[float, float, float]],
    Tuple[float, float, float],
]: ...
def twoPointArcCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    degree: Queryable[int] = ...,
    exists: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    name: str = ...,
    spans: Queryable[int] = ...,
) -> Union[str, int]: ...
def ubercam(arg0: str = ..., /) -> str: ...
def uiTemplate(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    defineTemplate: str = ...,
    exists: bool = ...,
    useTemplate: str = ...,
) -> str: ...
def unapplyOverride() -> None: ...
def unassignInputDevice(
    *, query: bool = ..., clutch: str = ..., device: str = ...
) -> bool: ...
def undo() -> bool: ...
def undoInfo(
    *,
    query: bool = ...,
    chunkName: Queryable[str] = ...,
    closeChunk: bool = ...,
    infinity: bool = ...,
    length: Queryable[int] = ...,
    openChunk: bool = ...,
    printQueue: bool = ...,
    printRedoQueue: bool = ...,
    redoName: Queryable[str] = ...,
    redoQueueEmpty: bool = ...,
    state: bool = ...,
    stateWithoutFlush: bool = ...,
    undoName: Queryable[str] = ...,
    undoQueueEmpty: bool = ...,
) -> Union[str, int, bool]: ...
def unfold(
    *args: str,
    applyToShell: bool = ...,
    areaWeight: float = ...,
    globalBlend: float = ...,
    globalMethodBlend: float = ...,
    iterations: int = ...,
    optimizeAxis: int = ...,
    pinSelected: bool = ...,
    pinUvBorder: bool = ...,
    scale: float = ...,
    stoppingThreshold: float = ...,
    useScale: bool = ...,
) -> int: ...
def ungroup(
    *args: str,
    absolute: bool = ...,
    parent: str = ...,
    relative: bool = ...,
    world: bool = ...,
) -> bool: ...
def uniform(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    attenuation: Queryable[float] = ...,
    directionX: Queryable[float] = ...,
    directionY: Queryable[float] = ...,
    directionZ: Queryable[float] = ...,
    magnitude: Queryable[float] = ...,
    maxDistance: Queryable[float] = ...,
    name: Queryable[str] = ...,
    perVertex: bool = ...,
    position: Queryable[Multiuse[Tuple[float, float, float]]] = ...,
    torusSectionRadius: Queryable[float] = ...,
    volumeExclusion: bool = ...,
    volumeOffset: Queryable[Tuple[float, float, float]] = ...,
    volumeShape: Queryable[str] = ...,
    volumeSweep: Queryable[float] = ...,
) -> Union[
    str, float, bool, Multiuse[Tuple[float, float, float]], Tuple[float, float, float]
]: ...
def unknownNode(
    arg0: str = ...,
    /,
    *,
    query: bool = ...,
    plugin: bool = ...,
    realClassName: bool = ...,
    realClassTag: bool = ...,
) -> Union[List[str], bool]: ...
def unknownPlugin(
    arg0: str = ...,
    /,
    *,
    query: bool = ...,
    dataTypes: bool = ...,
    list: bool = ...,
    nodeTypes: bool = ...,
    remove: bool = ...,
    version: bool = ...,
) -> Union[List[str], bool]: ...
def unloadPlugin(
    *args: str,
    addCallback: Callable[..., Any] = ...,
    force: bool = ...,
    removeCallback: Callable[..., Any] = ...,
) -> List[str]: ...
def untangleUV(
    *args: str,
    mapBorder: str = ...,
    maxRelaxIterations: int = ...,
    pinBorder: bool = ...,
    pinSelected: bool = ...,
    pinUnselected: bool = ...,
    relax: str = ...,
    relaxTolerance: float = ...,
    shapeDetail: float = ...,
) -> int: ...
def untrim(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    caching: bool = ...,
    nodeState: Queryable[int] = ...,
    constructionHistory: bool = ...,
    curveOnSurface: bool = ...,
    name: str = ...,
    noChanges: bool = ...,
    object: bool = ...,
    replaceOriginal: bool = ...,
    untrimAll: bool = ...,
) -> Union[List[str], bool, int]: ...
def upAxis(
    *args: str, query: bool = ..., axis: Queryable[str] = ..., rotateView: bool = ...
) -> Union[bool, str]: ...
def userCtx(arg0: str = ..., /) -> None: ...
def uvLink(
    *,
    query: bool = ...,
    b: bool = ...,
    isValid: bool = ...,
    make: bool = ...,
    queryObject: str = ...,
    texture: str = ...,
    uvSet: str = ...,
) -> str: ...
def uvSnapshot(
    *args: str,
    antiAliased: bool = ...,
    blueColor: int = ...,
    entireUVRange: bool = ...,
    fileFormat: str = ...,
    greenColor: int = ...,
    name: str = ...,
    overwrite: bool = ...,
    redColor: int = ...,
    uMax: float = ...,
    uMin: float = ...,
    uvSetName: str = ...,
    vMax: float = ...,
    vMin: float = ...,
    xResolution: int = ...,
    yResolution: int = ...,
) -> bool: ...
def view2dToolCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    alternateContext: bool = ...,
    boxzoom: bool = ...,
    dolly: bool = ...,
    exists: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    name: str = ...,
    toolName: Queryable[str] = ...,
    track: bool = ...,
) -> Union[str, bool]: ...
def viewCamera(
    arg0: str = ..., /, *, move: str = ..., sideView: bool = ..., topView: bool = ...
) -> bool: ...
def viewClipPlane(
    arg0: str = ...,
    /,
    *,
    query: bool = ...,
    autoClipPlane: bool = ...,
    farClipPlane: Queryable[float] = ...,
    nearClipPlane: Queryable[float] = ...,
    surfacesOnly: bool = ...,
) -> Union[bool, float]: ...
def viewFit(
    *args: str,
    allObjects: bool = ...,
    animate: bool = ...,
    center: bool = ...,
    fitClipPlanes: bool = ...,
    fitFactor: float = ...,
    namespace: str = ...,
    noChildren: bool = ...,
) -> bool: ...
def viewHeadOn(arg0: str = ..., /) -> bool: ...
def viewLookAt(
    arg0: str = ..., /, *, position: Tuple[float, float, float] = ...
) -> bool: ...
def viewManip(
    *args: Any,
    query: bool = ...,
    bottomLeft: bool = ...,
    bottomRight: bool = ...,
    compassAngle: Queryable[float] = ...,
    dragSnap: bool = ...,
    drawCompass: bool = ...,
    fitToView: bool = ...,
    frontParameters: Queryable[str] = ...,
    goDefault: bool = ...,
    goHome: bool = ...,
    homeParameters: Queryable[str] = ...,
    levelCamera: bool = ...,
    minOpacity: Queryable[float] = ...,
    namespace: Queryable[str] = ...,
    postCommand: Queryable[str] = ...,
    preCommand: Queryable[str] = ...,
    preserveSceneUp: bool = ...,
    resetFront: bool = ...,
    resetHome: bool = ...,
    restoreCenter: bool = ...,
    selectionLockParameters: Queryable[str] = ...,
    setFront: bool = ...,
    setHome: bool = ...,
    size: Queryable[str] = ...,
    toggleSelectionLock: bool = ...,
    topLeft: bool = ...,
    topRight: bool = ...,
    visible: bool = ...,
    zoomToFitScene: bool = ...,
) -> Union[bool, float, str]: ...
def viewPlace(
    arg0: str = ...,
    /,
    *,
    animate: bool = ...,
    eyePoint: Tuple[float, float, float] = ...,
    fieldOfView: float = ...,
    lookAt: Tuple[float, float, float] = ...,
    ortho: bool = ...,
    perspective: bool = ...,
    upDirection: Tuple[float, float, float] = ...,
    viewDirection: Tuple[float, float, float] = ...,
) -> bool: ...
def viewSet(
    arg0: str = ...,
    /,
    *,
    query: bool = ...,
    animate: bool = ...,
    back: bool = ...,
    bottom: bool = ...,
    fit: bool = ...,
    fitFactor: float = ...,
    front: bool = ...,
    home: bool = ...,
    keepRenderSettings: bool = ...,
    leftSide: bool = ...,
    namespace: str = ...,
    nextView: bool = ...,
    persp: bool = ...,
    previousView: bool = ...,
    rightSide: bool = ...,
    side: bool = ...,
    top: bool = ...,
    viewNegativeX: bool = ...,
    viewNegativeY: bool = ...,
    viewNegativeZ: bool = ...,
    viewX: bool = ...,
    viewY: bool = ...,
    viewZ: bool = ...,
) -> bool: ...
def visor(
    arg0: str = ...,
    /,
    *,
    query: bool = ...,
    addFolder: bool = ...,
    addNodes: Queryable[str] = ...,
    allowPanningInX: bool = ...,
    allowPanningInY: bool = ...,
    allowZooming: bool = ...,
    command: Queryable[str] = ...,
    deleteFolder: Queryable[str] = ...,
    editFolder: Queryable[str] = ...,
    folderList: Queryable[str] = ...,
    menu: Queryable[str] = ...,
    name: Queryable[str] = ...,
    nodeType: Queryable[str] = ...,
    openDirectories: bool = ...,
    openFolder: bool = ...,
    parent: Queryable[str] = ...,
    path: Queryable[str] = ...,
    popupMenuScript: Queryable[str] = ...,
    rebuild: bool = ...,
    refreshAllSwatches: bool = ...,
    refreshSelectedSwatches: bool = ...,
    refreshSwatch: Queryable[str] = ...,
    reset: bool = ...,
    restrictPanAndZoom: bool = ...,
    saveSwatches: bool = ...,
    scrollBar: Queryable[str] = ...,
    scrollPercent: Queryable[float] = ...,
    selectedGadgets: Queryable[str] = ...,
    showDividers: bool = ...,
    showFiles: bool = ...,
    showFolders: bool = ...,
    showNodes: bool = ...,
    stateString: bool = ...,
    style: Queryable[str] = ...,
    transform: Queryable[str] = ...,
    type: Queryable[str] = ...,
) -> Union[str, bool, float]: ...
def volumeAxis(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    alongAxis: Queryable[float] = ...,
    aroundAxis: Queryable[float] = ...,
    attenuation: Queryable[float] = ...,
    awayFromAxis: Queryable[float] = ...,
    awayFromCenter: Queryable[float] = ...,
    detailTurbulence: Queryable[float] = ...,
    directionX: Queryable[float] = ...,
    directionY: Queryable[float] = ...,
    directionZ: Queryable[float] = ...,
    directionalSpeed: Queryable[float] = ...,
    invertAttenuation: bool = ...,
    magnitude: Queryable[float] = ...,
    maxDistance: Queryable[float] = ...,
    name: Queryable[str] = ...,
    perVertex: bool = ...,
    position: Queryable[Multiuse[Tuple[float, float, float]]] = ...,
    torusSectionRadius: Queryable[float] = ...,
    turbulence: Queryable[float] = ...,
    turbulenceFrequencyX: Queryable[float] = ...,
    turbulenceFrequencyY: Queryable[float] = ...,
    turbulenceFrequencyZ: Queryable[float] = ...,
    turbulenceOffsetX: Queryable[float] = ...,
    turbulenceOffsetY: Queryable[float] = ...,
    turbulenceOffsetZ: Queryable[float] = ...,
    turbulenceSpeed: Queryable[float] = ...,
    volumeExclusion: bool = ...,
    volumeOffset: Queryable[Tuple[float, float, float]] = ...,
    volumeShape: Queryable[str] = ...,
    volumeSweep: Queryable[float] = ...,
) -> Union[
    str, float, bool, Multiuse[Tuple[float, float, float]], Tuple[float, float, float]
]: ...
def volumeBind(
    *,
    edit: bool = ...,
    query: bool = ...,
    influence: Queryable[str] = ...,
    name: str = ...,
) -> Union[List[str], str]: ...
def vortex(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    attenuation: Queryable[float] = ...,
    axisX: Queryable[float] = ...,
    axisY: Queryable[float] = ...,
    axisZ: Queryable[float] = ...,
    magnitude: Queryable[float] = ...,
    maxDistance: Queryable[float] = ...,
    name: Queryable[str] = ...,
    perVertex: bool = ...,
    position: Queryable[Multiuse[Tuple[float, float, float]]] = ...,
    torusSectionRadius: Queryable[float] = ...,
    volumeExclusion: bool = ...,
    volumeOffset: Queryable[Tuple[float, float, float]] = ...,
    volumeShape: Queryable[str] = ...,
    volumeSweep: Queryable[float] = ...,
) -> Union[
    str, float, bool, Multiuse[Tuple[float, float, float]], Tuple[float, float, float]
]: ...
def waitCursor(*, query: bool = ..., state: bool = ...) -> bool: ...
def walkCtx(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    alternateContext: bool = ...,
    crouchCount: Queryable[float] = ...,
    exists: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    name: str = ...,
    toolName: Queryable[str] = ...,
    walkHeight: Queryable[float] = ...,
    walkSensitivity: Queryable[float] = ...,
    walkSpeed: Queryable[float] = ...,
    walkToolHud: bool = ...,
) -> Union[str, bool, float]: ...
def warnUserDialog(
    *, addInfo: Tuple[str, str] = ..., message: str = ..., title: str = ...
) -> None: ...
def warning(*args: str, noContext: bool = ..., showLineNumber: bool = ...) -> bool: ...
def webBrowser(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    annotation: Queryable[str] = ...,
    back: bool = ...,
    backgroundColor: Queryable[Tuple[float, float, float]] = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dragCallback: Callable[..., Any] = ...,
    dropCallback: Callable[..., Any] = ...,
    enable: bool = ...,
    enableBackground: bool = ...,
    enableKeyboardFocus: bool = ...,
    exists: bool = ...,
    find: str = ...,
    forward: bool = ...,
    fullPathName: bool = ...,
    height: Queryable[int] = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    home: bool = ...,
    isObscured: bool = ...,
    manage: bool = ...,
    matchCase: bool = ...,
    matchWholeWorld: bool = ...,
    noBackground: bool = ...,
    numberOfPopupMenus: bool = ...,
    openURL: Queryable[str] = ...,
    parent: Queryable[str] = ...,
    popupMenuArray: bool = ...,
    preventOverride: bool = ...,
    reload: bool = ...,
    searchForward: bool = ...,
    statusBarMessage: str = ...,
    stop: bool = ...,
    urlChangedCb: str = ...,
    useTemplate: str = ...,
    visible: bool = ...,
    visibleChangeCommand: Queryable[Callable[..., Any]] = ...,
    width: Queryable[int] = ...,
    wrap: bool = ...,
) -> Union[str, Tuple[float, float, float], bool, int, Callable[..., Any]]: ...
def webBrowserPrefs(arg0: str = ..., /) -> None: ...
def weightsColor(
    *args: str,
    query: bool = ...,
    colorRamp: Queryable[str] = ...,
    deformer: Queryable[str] = ...,
    falseColor: bool = ...,
    outOfRangeColor: Queryable[Tuple[float, float, float]] = ...,
    rampMaxColor: Queryable[Tuple[float, float, float]] = ...,
    rampMinColor: Queryable[Tuple[float, float, float]] = ...,
    useColorRamp: bool = ...,
    useMaxMinColor: bool = ...,
) -> Union[List[str], str, bool, Tuple[float, float, float]]: ...
def whatsNewHighlight(
    *,
    query: bool = ...,
    highlightColor: Queryable[Tuple[float, float, float]] = ...,
    highlightOn: bool = ...,
    showStartupDialog: bool = ...,
) -> Union[bool, Tuple[float, float, float]]: ...
def window(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    backgroundColor: Tuple[float, float, float] = ...,
    closeCommand: Callable[..., Any] = ...,
    defineTemplate: str = ...,
    docTag: Queryable[str] = ...,
    dockCorner: Multiuse[Tuple[str, str]] = ...,
    dockStation: bool = ...,
    dockingLayout: Queryable[str] = ...,
    exists: bool = ...,
    frontWindow: bool = ...,
    height: Queryable[int] = ...,
    iconName: Queryable[str] = ...,
    iconify: bool = ...,
    interactivePlacement: bool = ...,
    leftEdge: Queryable[int] = ...,
    mainMenuBar: bool = ...,
    mainWindow: bool = ...,
    maximizeButton: bool = ...,
    menuArray: bool = ...,
    menuBar: bool = ...,
    menuBarCornerWidget: Queryable[Tuple[str, str]] = ...,
    menuBarResize: bool = ...,
    menuBarVisible: bool = ...,
    menuIndex: Tuple[str, int] = ...,
    minimizeButton: bool = ...,
    minimizeCommand: Callable[..., Any] = ...,
    modal: bool = ...,
    nestedDockingEnabled: bool = ...,
    numberOfMenus: bool = ...,
    parent: str = ...,
    resizeToFitChildren: bool = ...,
    restoreCommand: Callable[..., Any] = ...,
    retain: bool = ...,
    sizeable: bool = ...,
    state: Queryable[str] = ...,
    title: Queryable[str] = ...,
    titleBar: bool = ...,
    titleBarMenu: bool = ...,
    toolbox: bool = ...,
    topEdge: Queryable[int] = ...,
    topLeftCorner: Queryable[Tuple[int, int]] = ...,
    useTemplate: str = ...,
    visible: bool = ...,
    width: Queryable[int] = ...,
    widthHeight: Queryable[Tuple[int, int]] = ...,
) -> Union[str, bool, int, Tuple[str, str], Tuple[int, int]]: ...
def windowPref(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    enableAll: bool = ...,
    exists: bool = ...,
    height: Queryable[int] = ...,
    leftEdge: Queryable[int] = ...,
    loadAll: bool = ...,
    maximized: bool = ...,
    parentMain: bool = ...,
    remove: bool = ...,
    removeAll: bool = ...,
    restoreMainWindowState: str = ...,
    saveAll: bool = ...,
    saveMainWindowState: str = ...,
    topEdge: Queryable[int] = ...,
    topLeftCorner: Queryable[Tuple[int, int]] = ...,
    width: Queryable[int] = ...,
    widthHeight: Queryable[Tuple[int, int]] = ...,
) -> Union[bool, int, Tuple[int, int]]: ...
def wire(
    *args: str,
    edit: bool = ...,
    query: bool = ...,
    after: bool = ...,
    afterReference: bool = ...,
    before: bool = ...,
    components: bool = ...,
    crossingEffect: Queryable[float] = ...,
    deformerTools: bool = ...,
    dropoffDistance: Queryable[Multiuse[Tuple[int, float]]] = ...,
    dumpInfo: bool = ...,
    envelope: Queryable[float] = ...,
    exclusive: Queryable[str] = ...,
    fixedSetupData: str = ...,
    frontOfChain: bool = ...,
    geometry: Queryable[Multiuse[str]] = ...,
    geometryIndices: bool = ...,
    groupWithBase: bool = ...,
    holder: Queryable[Multiuse[Tuple[int, str]]] = ...,
    ignoreSelected: bool = ...,
    includeHiddenSelections: bool = ...,
    localInfluence: Queryable[float] = ...,
    name: str = ...,
    parallel: bool = ...,
    prune: bool = ...,
    remove: Multiuse[bool] = ...,
    selectedComponents: bool = ...,
    split: bool = ...,
    useComponentTags: bool = ...,
    wire: Queryable[Multiuse[str]] = ...,
    wireCount: Queryable[int] = ...,
) -> Union[
    List[str],
    bool,
    float,
    Multiuse[Tuple[int, float]],
    str,
    Multiuse[str],
    Multiuse[Tuple[int, str]],
    int,
]: ...
def wireContext(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    crossingEffect: Queryable[float] = ...,
    deformationOrder: Queryable[str] = ...,
    dropoffDistance: Queryable[float] = ...,
    envelope: Queryable[float] = ...,
    exclusive: bool = ...,
    exclusivePartition: Queryable[str] = ...,
    exists: bool = ...,
    groupWithBase: bool = ...,
    history: bool = ...,
    holder: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    localInfluence: Queryable[float] = ...,
    name: str = ...,
) -> Union[str, float, bool]: ...
def workspace(
    arg0: str = ...,
    /,
    *,
    query: bool = ...,
    active: bool = ...,
    baseWorkspace: Queryable[str] = ...,
    create: str = ...,
    directory: Queryable[str] = ...,
    expandName: Queryable[str] = ...,
    fileRule: Queryable[Tuple[str, str]] = ...,
    fileRuleEntry: Queryable[str] = ...,
    fileRuleList: bool = ...,
    filter: bool = ...,
    fullName: bool = ...,
    list: bool = ...,
    listFullWorkspaces: bool = ...,
    listWorkspaces: bool = ...,
    newWorkspace: bool = ...,
    objectType: Queryable[Tuple[str, str]] = ...,
    objectTypeEntry: Queryable[str] = ...,
    objectTypeList: bool = ...,
    openWorkspace: bool = ...,
    projectPath: Queryable[str] = ...,
    removeFileRuleEntry: str = ...,
    removeVariableEntry: str = ...,
    renderType: Queryable[Tuple[str, str]] = ...,
    renderTypeEntry: Queryable[str] = ...,
    renderTypeList: bool = ...,
    rootDirectory: bool = ...,
    saveWorkspace: bool = ...,
    shortName: bool = ...,
    update: bool = ...,
    updateAll: bool = ...,
    variable: Queryable[Tuple[str, str]] = ...,
    variableEntry: Queryable[str] = ...,
    variableList: bool = ...,
) -> Union[None, str, List[str], bool, Tuple[str, str]]: ...
def workspaceControl(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    actLikeMayaUIElement: bool = ...,
    checksPlugins: bool = ...,
    close: bool = ...,
    closeCommand: Callable[..., Any] = ...,
    collapse: bool = ...,
    defineTemplate: str = ...,
    dockToControl: Tuple[str, str] = ...,
    dockToMainWindow: Tuple[str, bool] = ...,
    dockToPanel: Tuple[str, str, bool] = ...,
    duplicatable: bool = ...,
    exists: bool = ...,
    floating: bool = ...,
    height: bool = ...,
    heightProperty: Queryable[str] = ...,
    horizontal: bool = ...,
    initCallback: Queryable[str] = ...,
    initialHeight: int = ...,
    initialWidth: int = ...,
    label: Queryable[str] = ...,
    layoutDirectionCallback: Queryable[str] = ...,
    loadImmediately: bool = ...,
    maximumHeight: Queryable[int] = ...,
    maximumWidth: Queryable[int] = ...,
    minimumHeight: Queryable[int] = ...,
    minimumWidth: Queryable[int] = ...,
    r: bool = ...,
    requiredControl: Multiuse[str] = ...,
    requiredPlugin: Multiuse[str] = ...,
    resizeHeight: int = ...,
    resizeWidth: int = ...,
    restore: bool = ...,
    retain: bool = ...,
    stateString: Queryable[str] = ...,
    tabPosition: Queryable[Tuple[str, bool]] = ...,
    tabToControl: Tuple[str, int] = ...,
    uiScript: Callable[..., Any] = ...,
    useTemplate: str = ...,
    visible: bool = ...,
    visibleChangeCommand: Callable[..., Any] = ...,
    width: bool = ...,
    widthProperty: Queryable[str] = ...,
) -> Union[str, bool, int, Tuple[str, bool]]: ...
def workspaceControlState(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    defaultTopLeftCorner: Queryable[Tuple[int, int]] = ...,
    defaultWidthHeight: Queryable[Tuple[int, int]] = ...,
    exists: bool = ...,
    height: Queryable[int] = ...,
    leftEdge: Queryable[int] = ...,
    maximized: bool = ...,
    remove: bool = ...,
    topEdge: Queryable[int] = ...,
    topLeftCorner: Queryable[Tuple[int, int]] = ...,
    width: Queryable[int] = ...,
    widthHeight: Queryable[Tuple[int, int]] = ...,
) -> Union[bool, Tuple[int, int], int]: ...
def workspaceLayoutManager(
    *,
    edit: bool = ...,
    query: bool = ...,
    collapseMainWindowControls: Tuple[str, bool] = ...,
    current: bool = ...,
    delete: str = ...,
    i: str = ...,
    listLayouts: bool = ...,
    listModuleLayouts: bool = ...,
    listUserLayouts: bool = ...,
    modified: str = ...,
    parentWorkspaceControl: str = ...,
    reset: bool = ...,
    restoreMainWindowControls: bool = ...,
    save: bool = ...,
    saveAs: str = ...,
    setCurrent: str = ...,
    setCurrentCallback: str = ...,
    setModifiedCallback: str = ...,
    type: str = ...,
) -> Union[List[str], bool]: ...
def workspacePanel(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    defineTemplate: str = ...,
    exists: bool = ...,
    mainWindow: bool = ...,
    useTemplate: str = ...,
) -> None: ...
def wrinkle(
    *args: str,
    axis: Tuple[float, float, float] = ...,
    branchCount: int = ...,
    branchDepth: int = ...,
    center: Tuple[float, float, float] = ...,
    crease: Multiuse[str] = ...,
    dropoffDistance: float = ...,
    envelope: float = ...,
    randomness: float = ...,
    style: str = ...,
    thickness: float = ...,
    uvSpace: Tuple[float, float, float, float, float] = ...,
    wrinkleCount: int = ...,
    wrinkleIntensity: float = ...,
) -> List[str]: ...
def wrinkleContext(
    arg0: str = ...,
    /,
    *,
    edit: bool = ...,
    query: bool = ...,
    branchCount: Queryable[int] = ...,
    branchDepth: Queryable[int] = ...,
    exists: bool = ...,
    history: bool = ...,
    image1: Queryable[str] = ...,
    image2: Queryable[str] = ...,
    image3: Queryable[str] = ...,
    name: str = ...,
    randomness: Queryable[float] = ...,
    style: Queryable[str] = ...,
    thickness: Queryable[float] = ...,
    wrinkleCount: Queryable[int] = ...,
    wrinkleIntensity: Queryable[float] = ...,
) -> Union[str, int, float]: ...
def writeTake(
    *,
    angle: str = ...,
    device: str = ...,
    linear: str = ...,
    noTime: bool = ...,
    precision: int = ...,
    take: str = ...,
    virtualDevice: str = ...,
) -> bool: ...
def xform(
    *args: str,
    query: bool = ...,
    absolute: bool = ...,
    boundingBox: bool = ...,
    boundingBoxInvisible: bool = ...,
    centerPivots: bool = ...,
    centerPivotsOnComponents: bool = ...,
    deletePriorHistory: bool = ...,
    euler: bool = ...,
    matrix: Queryable[
        Tuple[
            float,
            float,
            float,
            float,
            float,
            float,
            float,
            float,
            float,
            float,
            float,
            float,
            float,
            float,
            float,
            float,
        ]
    ] = ...,
    objectSpace: bool = ...,
    parentSpace: bool = ...,
    pivots: Queryable[Tuple[float, float, float]] = ...,
    preserve: bool = ...,
    preserveUV: bool = ...,
    reflection: bool = ...,
    reflectionAboutBBox: bool = ...,
    reflectionAboutOrigin: bool = ...,
    reflectionAboutX: bool = ...,
    reflectionAboutY: bool = ...,
    reflectionAboutZ: bool = ...,
    reflectionTolerance: float = ...,
    relative: bool = ...,
    rotateAxis: Queryable[Tuple[float, float, float]] = ...,
    rotateOrder: Queryable[str] = ...,
    rotatePivot: Queryable[Tuple[float, float, float]] = ...,
    rotateTranslation: Queryable[Tuple[float, float, float]] = ...,
    rotation: Queryable[Tuple[float, float, float]] = ...,
    scale: Queryable[Tuple[float, float, float]] = ...,
    scalePivot: Queryable[Tuple[float, float, float]] = ...,
    scaleTranslation: Queryable[Tuple[float, float, float]] = ...,
    shear: Queryable[Tuple[float, float, float]] = ...,
    translation: Queryable[Tuple[float, float, float]] = ...,
    worldSpace: bool = ...,
    worldSpaceDistance: bool = ...,
    zeroTransformPivots: bool = ...,
) -> Union[
    bool,
    Tuple[
        float,
        float,
        float,
        float,
        float,
        float,
        float,
        float,
        float,
        float,
        float,
        float,
        float,
        float,
        float,
        float,
    ],
    Tuple[float, float, float],
    str,
]: ...
def xformConstraint(
    *,
    edit: bool = ...,
    query: bool = ...,
    alongNormal: Queryable[int] = ...,
    live: bool = ...,
    type: Queryable[str] = ...,
) -> Union[bool, int, str]: ...
