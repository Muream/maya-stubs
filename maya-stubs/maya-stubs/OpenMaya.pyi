from __future__ import annotations

from typing import *

Unknown = Any


class MAddRemoveAttrEdit(MEdit):
    """
    """
    def __init__(self, *args, **kwargs) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeName(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def isAttributeAdded(self, *args: Any, **kwargs: Any) -> Any: ...
    def node(self, *args: Any, **kwargs: Any) -> Any: ...
    def nodeName(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB158680>

def MAddRemoveAttrEdit_className(*args: Any, **kwargs: Any) -> Any: ...
class MAngle(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def asAngMinutes(self, *args: Any, **kwargs: Any) -> Any: ...
    def asAngSeconds(self, *args: Any, **kwargs: Any) -> Any: ...
    def asDegrees(self, *args: Any, **kwargs: Any) -> Any: ...
    def asRadians(self, *args: Any, **kwargs: Any) -> Any: ...
    def asUnits(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def internalToUI(self, *args: Any, **kwargs: Any) -> Any: ...
    def internalUnit(self, *args: Any, **kwargs: Any) -> Any: ...
    kAngMinutes: int = 3
    kAngSeconds: int = 4
    kDegrees: int = 2
    kInvalid: int = 0
    kLast: int = 5
    kRadians: int = 1
    def setInternalUnit(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUIUnit(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUnit(self, *args: Any, **kwargs: Any) -> Any: ...
    def setValue(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0B66D0>
    def uiToInternal(self, *args: Any, **kwargs: Any) -> Any: ...
    def uiUnit(self, *args: Any, **kwargs: Any) -> Any: ...
    def unit(self, *args: Any, **kwargs: Any) -> Any: ...
    def value(self, *args: Any, **kwargs: Any) -> Any: ...

def MAngle_className(*args: Any, **kwargs: Any) -> Any: ...
def MAngle_internalToUI(*args: Any, **kwargs: Any) -> Any: ...
def MAngle_internalUnit(*args: Any, **kwargs: Any) -> Any: ...
def MAngle_setInternalUnit(*args: Any, **kwargs: Any) -> Any: ...
def MAngle_setUIUnit(*args: Any, **kwargs: Any) -> Any: ...
def MAngle_uiToInternal(*args: Any, **kwargs: Any) -> Any: ...
def MAngle_uiUnit(*args: Any, **kwargs: Any) -> Any: ...
class MArgDatabase(MArgParser):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def getCommandArgument(self, *args: Any, **kwargs: Any) -> Any: ...
    def getFlagArgument(self, *args: Any, **kwargs: Any) -> Any: ...
    def getObjects(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0B95E0>

def MArgDatabase_className(*args: Any, **kwargs: Any) -> Any: ...
class MArgList(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addArg(self, *args: Any, **kwargs: Any) -> Any: ...
    def asAngle(self, *args: Any, **kwargs: Any) -> Any: ...
    def asBool(self, *args: Any, **kwargs: Any) -> Any: ...
    def asDistance(self, *args: Any, **kwargs: Any) -> Any: ...
    def asDouble(self, *args: Any, **kwargs: Any) -> Any: ...
    def asDoubleArray(self, *args: Any, **kwargs: Any) -> Any: ...
    def asInt(self, *args: Any, **kwargs: Any) -> Any: ...
    def asIntArray(self, *args: Any, **kwargs: Any) -> Any: ...
    def asMatrix(self, *args: Any, **kwargs: Any) -> Any: ...
    def asPoint(self, *args: Any, **kwargs: Any) -> Any: ...
    def asString(self, *args: Any, **kwargs: Any) -> Any: ...
    def asStringArray(self, *args: Any, **kwargs: Any) -> Any: ...
    def asTime(self, *args: Any, **kwargs: Any) -> Any: ...
    def asVector(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def flagIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    kInvalidArgIndex: int = 4294967295
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0B9860>

def MArgList_className(*args: Any, **kwargs: Any) -> Any: ...
class MArgParser(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def commandArgumentBool(self, *args: Any, **kwargs: Any) -> Any: ...
    def commandArgumentDouble(self, *args: Any, **kwargs: Any) -> Any: ...
    def commandArgumentInt(self, *args: Any, **kwargs: Any) -> Any: ...
    def commandArgumentMAngle(self, *args: Any, **kwargs: Any) -> Any: ...
    def commandArgumentMDistance(self, *args: Any, **kwargs: Any) -> Any: ...
    def commandArgumentMTime(self, *args: Any, **kwargs: Any) -> Any: ...
    def commandArgumentString(self, *args: Any, **kwargs: Any) -> Any: ...
    def flagArgumentBool(self, *args: Any, **kwargs: Any) -> Any: ...
    def flagArgumentDouble(self, *args: Any, **kwargs: Any) -> Any: ...
    def flagArgumentInt(self, *args: Any, **kwargs: Any) -> Any: ...
    def flagArgumentMAngle(self, *args: Any, **kwargs: Any) -> Any: ...
    def flagArgumentMDistance(self, *args: Any, **kwargs: Any) -> Any: ...
    def flagArgumentMTime(self, *args: Any, **kwargs: Any) -> Any: ...
    def flagArgumentString(self, *args: Any, **kwargs: Any) -> Any: ...
    def getFlagArgumentList(self, *args: Any, **kwargs: Any) -> Any: ...
    def getFlagArgumentPosition(self, *args: Any, **kwargs: Any) -> Any: ...
    def getObjects(self, *args: Any, **kwargs: Any) -> Any: ...
    def isEdit(self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self, *args: Any, **kwargs: Any) -> Any: ...
    def isQuery(self, *args: Any, **kwargs: Any) -> Any: ...
    def numberOfFlagUses(self, *args: Any, **kwargs: Any) -> Any: ...
    def numberOfFlagsUsed(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0B6D10>

def MArgParser_className(*args: Any, **kwargs: Any) -> Any: ...
class MArrayDataBuilder(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addElement(self, *args: Any, **kwargs: Any) -> Any: ...
    def addElementArray(self, *args: Any, **kwargs: Any) -> Any: ...
    def addLast(self, *args: Any, **kwargs: Any) -> Any: ...
    def addLastArray(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def elementCount(self, *args: Any, **kwargs: Any) -> Any: ...
    def growArray(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeElement(self, *args: Any, **kwargs: Any) -> Any: ...
    def setGrowSize(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0B9EF0>

def MArrayDataBuilder_className(*args: Any, **kwargs: Any) -> Any: ...
class MArrayDataHandle(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def builder(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def elementCount(self, *args: Any, **kwargs: Any) -> Any: ...
    def elementIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def inputArrayValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def inputValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def jumpToArrayElement(self, *args: Any, **kwargs: Any) -> Any: ...
    def jumpToElement(self, *args: Any, **kwargs: Any) -> Any: ...
    def next(self, *args: Any, **kwargs: Any) -> Any: ...
    def outputArrayValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def outputValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    def setAllClean(self, *args: Any, **kwargs: Any) -> Any: ...
    def setClean(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0BA360>

def MArrayDataHandle_className(*args: Any, **kwargs: Any) -> Any: ...
class MAttributeIndex(object):
    """
    """
    def __eq__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __ne__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def getLower(self, *args: Any, **kwargs: Any) -> Any: ...
    def getUpper(self, *args: Any, **kwargs: Any) -> Any: ...
    def getValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasLowerBound(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasRange(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUpperBound(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasValidRange(self, *args: Any, **kwargs: Any) -> Any: ...
    def isBounded(self, *args: Any, **kwargs: Any) -> Any: ...
    kFloat: int = 1
    kInteger: int = 0
    def setLower(self, *args: Any, **kwargs: Any) -> Any: ...
    def setType(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUpper(self, *args: Any, **kwargs: Any) -> Any: ...
    def setValue(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0BA900>
    def type(self, *args: Any, **kwargs: Any) -> Any: ...

def MAttributeIndex_className(*args: Any, **kwargs: Any) -> Any: ...
class MAttributePattern(object):
    """
    """
    def __eq__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addRootAttr(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def attrPattern(self, *args: Any, **kwargs: Any) -> Any: ...
    def attrPatternCount(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def findPattern(self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeRootAttr(self, *args: Any, **kwargs: Any) -> Any: ...
    def rootAttr(self, *args: Any, **kwargs: Any) -> Any: ...
    def rootAttrCount(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0BC810>

class MAttributePatternArray(object):
    """
    """
    def __getitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def append(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    def sizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0BCC70>

def MAttributePatternArray_className(*args: Any, **kwargs: Any) -> Any: ...
def MAttributePattern_attrPattern(*args: Any, **kwargs: Any) -> Any: ...
def MAttributePattern_attrPatternCount(*args: Any, **kwargs: Any) -> Any: ...
def MAttributePattern_className(*args: Any, **kwargs: Any) -> Any: ...
def MAttributePattern_findPattern(*args: Any, **kwargs: Any) -> Any: ...
class MAttributeSpec(object):
    """
    """
    def __eq__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __getitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def dimensions(self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDimensions(self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0BC4A0>

class MAttributeSpecArray(object):
    """
    """
    def __getitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def append(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    def sizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0BAF40>

def MAttributeSpecArray_className(*args: Any, **kwargs: Any) -> Any: ...
def MAttributeSpec_className(*args: Any, **kwargs: Any) -> Any: ...
class MBoundingBox(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def center(self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self, *args: Any, **kwargs: Any) -> Any: ...
    def contains(self, *args: Any, **kwargs: Any) -> Any: ...
    def depth(self, *args: Any, **kwargs: Any) -> Any: ...
    def expand(self, *args: Any, **kwargs: Any) -> Any: ...
    def height(self, *args: Any, **kwargs: Any) -> Any: ...
    def intersects(self, *args: Any, **kwargs: Any) -> Any: ...
    def max(self, *args: Any, **kwargs: Any) -> Any: ...
    def min(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0BE1D0>
    def transformUsing(self, *args: Any, **kwargs: Any) -> Any: ...
    def width(self, *args: Any, **kwargs: Any) -> Any: ...

class MCacheConfigRuleRegistry(object):
    """
    """
    def __init__(self, *args, **kwargs) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def registerFilter(self, *args: Any, **kwargs: Any) -> Any: ...
    def registeringCallableScript(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRegisteringCallableScript(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0BE680>
    def unregisterFilter(self, *args: Any, **kwargs: Any) -> Any: ...

def MCacheConfigRuleRegistry_className(*args: Any, **kwargs: Any) -> Any: ...
def MCacheConfigRuleRegistry_registerFilter(*args: Any, **kwargs: Any) -> Any: ...
def MCacheConfigRuleRegistry_registeringCallableScript(*args: Any, **kwargs: Any) -> Any: ...
def MCacheConfigRuleRegistry_setRegisteringCallableScript(*args: Any, **kwargs: Any) -> Any: ...
def MCacheConfigRuleRegistry_unregisterFilter(*args: Any, **kwargs: Any) -> Any: ...
class MCacheFormatDescription(object):
    """
    """
    def __init__(self, *args, **kwargs) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def addChannel(self, *args: Any, **kwargs: Any) -> Any: ...
    def addDescriptionInfo(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def getChannelDataType(self, *args: Any, **kwargs: Any) -> Any: ...
    def getChannelEndTime(self, *args: Any, **kwargs: Any) -> Any: ...
    def getChannelInterpretation(self, *args: Any, **kwargs: Any) -> Any: ...
    def getChannelName(self, *args: Any, **kwargs: Any) -> Any: ...
    def getChannelSamplingRate(self, *args: Any, **kwargs: Any) -> Any: ...
    def getChannelSamplingType(self, *args: Any, **kwargs: Any) -> Any: ...
    def getChannelStartTime(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDescriptionInfo(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDistribution(self, *args: Any, **kwargs: Any) -> Any: ...
    def getNumChannels(self, *args: Any, **kwargs: Any) -> Any: ...
    def getStartAndEndTimes(self, *args: Any, **kwargs: Any) -> Any: ...
    def getTimePerFrame(self, *args: Any, **kwargs: Any) -> Any: ...
    kDouble: int = 1
    kDoubleArray: int = 2
    kDoubleVectorArray: int = 3
    kFloatArray: int = 5
    kFloatVectorArray: int = 6
    kInt32Array: int = 4
    kIrregular: int = 1
    kNoFile: int = 0
    kOneFile: int = 1
    kOneFilePerFrame: int = 2
    kRegular: int = 0
    kUnknownData: int = 0
    def setDistribution(self, *args: Any, **kwargs: Any) -> Any: ...
    def setTimePerFrame(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0BE900>

def MCacheFormatDescription_className(*args: Any, **kwargs: Any) -> Any: ...
class MCacheSchema(object):
    """
    """
    def __init__(self, *args, **kwargs) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def add(self, *args: Any, **kwargs: Any) -> Any: ...
    def attributes(self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0C0450>

class MCacheSchemaAttributesIterator(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def advance(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def done(self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0C0090>

class MCacheSchemaAttributesIteratorSentinel(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0BEF40>

class MCacheSchemaAttributesRange(object):
    """
    """
    def __init__(self, *args, **kwargs) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def begin(self, *args: Any, **kwargs: Any) -> Any: ...
    def end(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0C02C0>

class MCallbackIdArray(object):
    """
    """
    def __getitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def append(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    def sizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0C0630>

def MCallbackIdArray_className(*args: Any, **kwargs: Any) -> Any: ...
class MCameraMessage(MMessage):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addBeginManipulationCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addEndManipulationCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0CE770>

def MCameraMessage_addBeginManipulationCallback(*args: Any, **kwargs: Any) -> Any: ...
def MCameraMessage_addEndManipulationCallback(*args: Any, **kwargs: Any) -> Any: ...
def MCameraMessage_className(*args: Any, **kwargs: Any) -> Any: ...
class MCameraSetMessage(MMessage):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addCameraChangedCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addCameraLayerCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0CE590>

def MCameraSetMessage_addCameraChangedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MCameraSetMessage_addCameraLayerCallback(*args: Any, **kwargs: Any) -> Any: ...
def MCameraSetMessage_className(*args: Any, **kwargs: Any) -> Any: ...
class MClosedTimeInterval(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def empty(self, *args: Any, **kwargs: Any) -> Any: ...
    max: property = <property object at 0x00000218AB1626D0>
    min: property = <property object at 0x00000218AB162680>
    thisown: property = <property object at 0x00000218AB162630>

class MColor(object):
    """
    """
    def __add__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __call__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __div__(self, *args) -> Any: ...
    def __eq__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __getitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __iadd__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __idiv__(self, *args) -> Any: ...
    def __imul__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __itruediv__(self, *args) -> Any: ...
    def __mul__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __ne__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __neg__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __sub__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __truediv__(self, *args) -> Any: ...
    a: property = <property object at 0x00000218AB0C3630>
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    b: property = <property object at 0x00000218AB0C35E0>
    g: property = <property object at 0x00000218AB0C3590>
    def get(self, *args: Any, **kwargs: Any) -> Any: ...
    kCMY: int = 2
    kCMYK: int = 3
    kHSV: int = 1
    def kOpaqueBlack(self, *args: Any, **kwargs: Any) -> Any: ...
    kRGB: int = 0
    r: property = <property object at 0x00000218AB0C3540>
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0C30E0>

class MColorArray(object):
    """
    """
    def __getitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def append(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    def sizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0C0B30>

def MColorArray_className(*args: Any, **kwargs: Any) -> Any: ...
class MCommandMessage(MMessage):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addCommandCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addCommandOutputCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addCommandOutputFilterCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addProcCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    kError: int = 4
    kResult: int = 5
    kStackTrace: int = 6
    kWarning: int = 3
    thisown: property = <property object at 0x00000218AB0C3EA0>

def MCommandMessage_addCommandCallback(*args: Any, **kwargs: Any) -> Any: ...
def MCommandMessage_addCommandOutputCallback(*args: Any, **kwargs: Any) -> Any: ...
def MCommandMessage_addCommandOutputFilterCallback(*args: Any, **kwargs: Any) -> Any: ...
def MCommandMessage_addProcCallback(*args: Any, **kwargs: Any) -> Any: ...
def MCommandMessage_className(*args: Any, **kwargs: Any) -> Any: ...
class MCommandResult(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def getResult(self, *args: Any, **kwargs: Any) -> Any: ...
    kDouble: int = 5
    kDoubleArray: int = 6
    kInt: int = 1
    kInt64: int = 2
    kInt64Array: int = 4
    kIntArray: int = 3
    kInvalid: int = 0
    kMatrix: int = 11
    kMatrixArray: int = 12
    kString: int = 7
    kStringArray: int = 8
    kVector: int = 9
    kVectorArray: int = 10
    def resultType(self, *args: Any, **kwargs: Any) -> Any: ...
    def stringResult(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0C4130>

def MCommandResult_className(*args: Any, **kwargs: Any) -> Any: ...
class MComputation(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def beginComputation(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def endComputation(self, *args: Any, **kwargs: Any) -> Any: ...
    def isInterruptRequested(self, *args: Any, **kwargs: Any) -> Any: ...
    def progress(self, *args: Any, **kwargs: Any) -> Any: ...
    def progressMax(self, *args: Any, **kwargs: Any) -> Any: ...
    def progressMin(self, *args: Any, **kwargs: Any) -> Any: ...
    def setProgress(self, *args: Any, **kwargs: Any) -> Any: ...
    def setProgressRange(self, *args: Any, **kwargs: Any) -> Any: ...
    def setProgressStatus(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0C4360>

def MComputation_className(*args: Any, **kwargs: Any) -> Any: ...
class MConditionMessage(MMessage):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addConditionCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def getConditionNames(self, *args: Any, **kwargs: Any) -> Any: ...
    def getConditionState(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0C4770>

def MConditionMessage_addConditionCallback(*args: Any, **kwargs: Any) -> Any: ...
def MConditionMessage_className(*args: Any, **kwargs: Any) -> Any: ...
def MConditionMessage_getConditionNames(*args: Any, **kwargs: Any) -> Any: ...
def MConditionMessage_getConditionState(*args: Any, **kwargs: Any) -> Any: ...
class MConnectDisconnectAttrEdit(MEdit):
    """
    """
    def __init__(self, *args, **kwargs) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def dstPlug(self, *args: Any, **kwargs: Any) -> Any: ...
    def dstPlugName(self, *args: Any, **kwargs: Any) -> Any: ...
    def isConnection(self, *args: Any, **kwargs: Any) -> Any: ...
    def srcPlug(self, *args: Any, **kwargs: Any) -> Any: ...
    def srcPlugName(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB158900>

def MConnectDisconnectAttrEdit_className(*args: Any, **kwargs: Any) -> Any: ...
class MContainerMessage(MMessage):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addBoundAttrCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addPublishAttrCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0C49A0>

def MContainerMessage_addBoundAttrCallback(*args: Any, **kwargs: Any) -> Any: ...
def MContainerMessage_addPublishAttrCallback(*args: Any, **kwargs: Any) -> Any: ...
def MContainerMessage_className(*args: Any, **kwargs: Any) -> Any: ...
class MCurveAttribute(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addEntries(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def createCurve(self, *args: Any, **kwargs: Any) -> Any: ...
    def createCurveAttr(self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteEntries(self, *args: Any, **kwargs: Any) -> Any: ...
    def getEntries(self, *args: Any, **kwargs: Any) -> Any: ...
    def getNumEntries(self, *args: Any, **kwargs: Any) -> Any: ...
    def getValueAtPosition(self, *args: Any, **kwargs: Any) -> Any: ...
    def getValuesAtPositions(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def pack(self, *args: Any, **kwargs: Any) -> Any: ...
    def sampleValueCurve(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCurve(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPositionAtIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def setValueAtIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def sort(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0C4B80>

def MCurveAttribute_className(*args: Any, **kwargs: Any) -> Any: ...
def MCurveAttribute_createCurve(*args: Any, **kwargs: Any) -> Any: ...
def MCurveAttribute_createCurveAttr(*args: Any, **kwargs: Any) -> Any: ...
class MDAGDrawOverrideInfo(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    fDisplayType: property = <property object at 0x00000218AB0C9A90>
    fEnableShading: property = <property object at 0x00000218AB0C9B30>
    fEnableTexturing: property = <property object at 0x00000218AB0C9B80>
    fEnableVisible: property = <property object at 0x00000218AB0C9BD0>
    fLOD: property = <property object at 0x00000218AB0C9AE0>
    fOverrideEnabled: property = <property object at 0x00000218AB0C9A40>
    fPlaybackVisible: property = <property object at 0x00000218AB0C9C20>
    kDisplayTypeNormal: int = 0
    kDisplayTypeReference: int = 1
    kDisplayTypeTemplate: int = 2
    kLODBoundingBox: int = 1
    kLODFull: int = 0
    thisown: property = <property object at 0x00000218AB0C99F0>

class MDGContext(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def current(self, *args: Any, **kwargs: Any) -> Any: ...
    fsNormal: property = <property object at 0x00000218AB0CDD60>
    def getTime(self, *args: Any, **kwargs: Any) -> Any: ...
    def isCurrent(self, *args: Any, **kwargs: Any) -> Any: ...
    def isNormal(self, *args: Any, **kwargs: Any) -> Any: ...
    def makeCurrent(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0CDD10>

class MDGContextGuard(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0CE0E0>

def MDGContext_className(*args: Any, **kwargs: Any) -> Any: ...
def MDGContext_current(*args: Any, **kwargs: Any) -> Any: ...
class MDGMessage(MMessage):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addConnectionCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addDelayedTimeChangeCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addDelayedTimeChangeRunupCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addForceUpdateCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addNodeAddedCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addNodeChangeUuidCheckCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addNodeRemovedCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addPreConnectionCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addTimeChangeCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0CE1D0>

def MDGMessage_addConnectionCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDGMessage_addDelayedTimeChangeCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDGMessage_addDelayedTimeChangeRunupCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDGMessage_addForceUpdateCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDGMessage_addNodeAddedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDGMessage_addNodeChangeUuidCheckCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDGMessage_addNodeRemovedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDGMessage_addPreConnectionCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDGMessage_addTimeChangeCallback(*args: Any, **kwargs: Any) -> Any: ...
class MDGModifier(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def addExtensionAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def commandToExecute(self, *args: Any, **kwargs: Any) -> Any: ...
    def connect(self, *args: Any, **kwargs: Any) -> Any: ...
    def createNode(self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteMetadata(self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteNode(self, *args: Any, **kwargs: Any) -> Any: ...
    def disconnect(self, *args: Any, **kwargs: Any) -> Any: ...
    def doIt(self, *args: Any, **kwargs: Any) -> Any: ...
    def linkExtensionAttributeToPlugin(self, *args: Any, **kwargs: Any) -> Any: ...
    def newPlugValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def newPlugValueBool(self, *args: Any, **kwargs: Any) -> Any: ...
    def newPlugValueChar(self, *args: Any, **kwargs: Any) -> Any: ...
    def newPlugValueDouble(self, *args: Any, **kwargs: Any) -> Any: ...
    def newPlugValueFloat(self, *args: Any, **kwargs: Any) -> Any: ...
    def newPlugValueInt(self, *args: Any, **kwargs: Any) -> Any: ...
    def newPlugValueInt64(self, *args: Any, **kwargs: Any) -> Any: ...
    def newPlugValueMAngle(self, *args: Any, **kwargs: Any) -> Any: ...
    def newPlugValueMDistance(self, *args: Any, **kwargs: Any) -> Any: ...
    def newPlugValueMTime(self, *args: Any, **kwargs: Any) -> Any: ...
    def newPlugValueShort(self, *args: Any, **kwargs: Any) -> Any: ...
    def newPlugValueString(self, *args: Any, **kwargs: Any) -> Any: ...
    def pythonCommandToExecute(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeExtensionAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeExtensionAttributeIfUnset(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeMultiInstance(self, *args: Any, **kwargs: Any) -> Any: ...
    def renameAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def renameNode(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMetadata(self, *args: Any, **kwargs: Any) -> Any: ...
    def setNodeLockState(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0C8720>
    def undoIt(self, *args: Any, **kwargs: Any) -> Any: ...
    def unlinkExtensionAttributeFromPlugin(self, *args: Any, **kwargs: Any) -> Any: ...

def MDGModifier_className(*args: Any, **kwargs: Any) -> Any: ...
class MDagMessage(MMessage):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addAllDagChangesCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addAllDagChangesDagPathCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addChildAddedCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addChildAddedDagPathCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addChildRemovedCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addChildRemovedDagPathCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addChildReorderedCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addChildReorderedDagPathCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addDagCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addDagDagPathCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addInstanceAddedCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addInstanceAddedDagPathCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addInstanceRemovedCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addInstanceRemovedDagPathCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addMatrixModifiedCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addParentAddedCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addParentAddedDagPathCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addParentRemovedCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addParentRemovedDagPathCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addWorldMatrixModifiedCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    kAll: int = 268435455
    kChildRemoved: int = 3
    kChildReordered: int = 4
    kInstanceAdded: int = 5
    kInstanceRemoved: int = 6
    kInvalidMsg: int = -1
    kLast: int = 7
    kRotateOrder: int = 134217728
    kRotateOrient: int = 117440512
    kRotateOrientX: int = 16777216
    kRotateOrientY: int = 33554432
    kRotateOrientZ: int = 67108864
    kRotatePivot: int = 229376
    kRotatePivotTrans: int = 14680064
    kRotatePivotX: int = 32768
    kRotatePivotY: int = 65536
    kRotatePivotZ: int = 131072
    kRotateTransX: int = 2097152
    kRotateTransY: int = 4194304
    kRotateTransZ: int = 8388608
    kRotateX: int = 64
    kRotateY: int = 128
    kRotateZ: int = 256
    kRotation: int = 448
    kScale: int = 7
    kScalePivot: int = 28672
    kScalePivotTrans: int = 1835008
    kScalePivotX: int = 4096
    kScalePivotY: int = 8192
    kScalePivotZ: int = 16384
    kScaleTransX: int = 262144
    kScaleTransY: int = 524288
    kScaleTransZ: int = 1048576
    kScaleZ: int = 4
    kShear: int = 56
    kShearXY: int = 8
    kShearXZ: int = 16
    kShearYZ: int = 32
    kTranslateX: int = 512
    kTranslateY: int = 1024
    kTranslateZ: int = 2048
    kTranslation: int = 3584
    thisown: property = <property object at 0x00000218AB0C7220>

def MDagMessage_addAllDagChangesCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDagMessage_addAllDagChangesDagPathCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDagMessage_addChildAddedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDagMessage_addChildAddedDagPathCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDagMessage_addChildRemovedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDagMessage_addChildRemovedDagPathCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDagMessage_addChildReorderedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDagMessage_addChildReorderedDagPathCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDagMessage_addDagCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDagMessage_addDagDagPathCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDagMessage_addInstanceAddedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDagMessage_addInstanceAddedDagPathCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDagMessage_addInstanceRemovedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDagMessage_addInstanceRemovedDagPathCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDagMessage_addMatrixModifiedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDagMessage_addParentAddedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDagMessage_addParentAddedDagPathCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDagMessage_addParentRemovedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDagMessage_addParentRemovedDagPathCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDagMessage_addWorldMatrixModifiedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDagMessage_className(*args: Any, **kwargs: Any) -> Any: ...
class MDagModifier(MDGModifier):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def createNode(self, *args: Any, **kwargs: Any) -> Any: ...
    def reparentNode(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0C9310>

def MDagModifier_className(*args: Any, **kwargs: Any) -> Any: ...
class MDagPath(object):
    """
    """
    def __eq__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def apiType(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self, *args: Any, **kwargs: Any) -> Any: ...
    def childCount(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def exclusiveMatrix(self, *args: Any, **kwargs: Any) -> Any: ...
    def exclusiveMatrixInverse(self, *args: Any, **kwargs: Any) -> Any: ...
    def extendToShape(self, *args: Any, **kwargs: Any) -> Any: ...
    def extendToShapeDirectlyBelow(self, *args: Any, **kwargs: Any) -> Any: ...
    def fullPathName(self, *args: Any, **kwargs: Any) -> Any: ...
    def getAPathTo(self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllPathsBelow(self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllPathsTo(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDisplayStatus(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDrawOverrideInfo(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPath(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasFn(self, *args: Any, **kwargs: Any) -> Any: ...
    def inclusiveMatrix(self, *args: Any, **kwargs: Any) -> Any: ...
    def inclusiveMatrixInverse(self, *args: Any, **kwargs: Any) -> Any: ...
    def instanceNumber(self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanced(self, *args: Any, **kwargs: Any) -> Any: ...
    def isTemplated(self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self, *args: Any, **kwargs: Any) -> Any: ...
    def isVisible(self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    def matchTransform(self, *args: Any, **kwargs: Any) -> Any: ...
    def node(self, *args: Any, **kwargs: Any) -> Any: ...
    def numberOfShapesDirectlyBelow(self, *args: Any, **kwargs: Any) -> Any: ...
    def partialPathName(self, *args: Any, **kwargs: Any) -> Any: ...
    def pathCount(self, *args: Any, **kwargs: Any) -> Any: ...
    def pop(self, *args: Any, **kwargs: Any) -> Any: ...
    def push(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0C9D10>
    def transform(self, *args: Any, **kwargs: Any) -> Any: ...

class MDagPathArray(object):
    """
    """
    def __getitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def append(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    def sizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0C94F0>

def MDagPathArray_className(*args: Any, **kwargs: Any) -> Any: ...
def MDagPath_className(*args: Any, **kwargs: Any) -> Any: ...
def MDagPath_getAPathTo(*args: Any, **kwargs: Any) -> Any: ...
def MDagPath_getAllPathsTo(*args: Any, **kwargs: Any) -> Any: ...
def MDagPath_matchTransform(*args: Any, **kwargs: Any) -> Any: ...
class MDataBlock(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def context(self, *args: Any, **kwargs: Any) -> Any: ...
    def inputArrayValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def inputValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def isClean(self, *args: Any, **kwargs: Any) -> Any: ...
    def outputArrayValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def outputValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def setClean(self, *args: Any, **kwargs: Any) -> Any: ...
    def setContext(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0CD950>

def MDataBlock_className(*args: Any, **kwargs: Any) -> Any: ...
class MDataHandle(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def acceptedTypeIds(self, *args: Any, **kwargs: Any) -> Any: ...
    def asAddr(self, *args: Any, **kwargs: Any) -> Any: ...
    def asAngle(self, *args: Any, **kwargs: Any) -> Any: ...
    def asBool(self, *args: Any, **kwargs: Any) -> Any: ...
    def asChar(self, *args: Any, **kwargs: Any) -> Any: ...
    def asDistance(self, *args: Any, **kwargs: Any) -> Any: ...
    def asDouble(self, *args: Any, **kwargs: Any) -> Any: ...
    def asDouble2(self, *args: Any, **kwargs: Any) -> Any: ...
    def asDouble3(self, *args: Any, **kwargs: Any) -> Any: ...
    def asDouble4(self, *args: Any, **kwargs: Any) -> Any: ...
    def asFalloffFunction(self, *args: Any, **kwargs: Any) -> Any: ...
    def asFloat(self, *args: Any, **kwargs: Any) -> Any: ...
    def asFloat2(self, *args: Any, **kwargs: Any) -> Any: ...
    def asFloat3(self, *args: Any, **kwargs: Any) -> Any: ...
    def asFloatMatrix(self, *args: Any, **kwargs: Any) -> Any: ...
    def asFloatVector(self, *args: Any, **kwargs: Any) -> Any: ...
    def asGenericBool(self, *args: Any, **kwargs: Any) -> Any: ...
    def asGenericChar(self, *args: Any, **kwargs: Any) -> Any: ...
    def asGenericDouble(self, *args: Any, **kwargs: Any) -> Any: ...
    def asGenericFloat(self, *args: Any, **kwargs: Any) -> Any: ...
    def asGenericInt(self, *args: Any, **kwargs: Any) -> Any: ...
    def asGenericInt64(self, *args: Any, **kwargs: Any) -> Any: ...
    def asGenericShort(self, *args: Any, **kwargs: Any) -> Any: ...
    def asInt(self, *args: Any, **kwargs: Any) -> Any: ...
    def asInt2(self, *args: Any, **kwargs: Any) -> Any: ...
    def asInt3(self, *args: Any, **kwargs: Any) -> Any: ...
    def asInt64(self, *args: Any, **kwargs: Any) -> Any: ...
    def asLong(self, *args: Any, **kwargs: Any) -> Any: ...
    def asLong2(self, *args: Any, **kwargs: Any) -> Any: ...
    def asLong3(self, *args: Any, **kwargs: Any) -> Any: ...
    def asMatrix(self, *args: Any, **kwargs: Any) -> Any: ...
    def asMesh(self, *args: Any, **kwargs: Any) -> Any: ...
    def asMeshTransformed(self, *args: Any, **kwargs: Any) -> Any: ...
    def asNurbsCurve(self, *args: Any, **kwargs: Any) -> Any: ...
    def asNurbsCurveTransformed(self, *args: Any, **kwargs: Any) -> Any: ...
    def asNurbsSurface(self, *args: Any, **kwargs: Any) -> Any: ...
    def asNurbsSurfaceTransformed(self, *args: Any, **kwargs: Any) -> Any: ...
    def asPluginData(self, *args: Any, **kwargs: Any) -> Any: ...
    def asShort(self, *args: Any, **kwargs: Any) -> Any: ...
    def asShort2(self, *args: Any, **kwargs: Any) -> Any: ...
    def asShort3(self, *args: Any, **kwargs: Any) -> Any: ...
    def asString(self, *args: Any, **kwargs: Any) -> Any: ...
    def asSubdSurface(self, *args: Any, **kwargs: Any) -> Any: ...
    def asSubdSurfaceTransformed(self, *args: Any, **kwargs: Any) -> Any: ...
    def asTime(self, *args: Any, **kwargs: Any) -> Any: ...
    def asUChar(self, *args: Any, **kwargs: Any) -> Any: ...
    def asVector(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self, *args: Any, **kwargs: Any) -> Any: ...
    def copyWritable(self, *args: Any, **kwargs: Any) -> Any: ...
    def data(self, *args: Any, **kwargs: Any) -> Any: ...
    def datablock(self, *args: Any, **kwargs: Any) -> Any: ...
    def geometryTransformMatrix(self, *args: Any, **kwargs: Any) -> Any: ...
    def isGeneric(self, *args: Any, **kwargs: Any) -> Any: ...
    def isNumeric(self, *args: Any, **kwargs: Any) -> Any: ...
    def numericType(self, *args: Any, **kwargs: Any) -> Any: ...
    def set2Double(self, *args: Any, **kwargs: Any) -> Any: ...
    def set2Float(self, *args: Any, **kwargs: Any) -> Any: ...
    def set2Int(self, *args: Any, **kwargs: Any) -> Any: ...
    def set2Short(self, *args: Any, **kwargs: Any) -> Any: ...
    def set3Double(self, *args: Any, **kwargs: Any) -> Any: ...
    def set3Float(self, *args: Any, **kwargs: Any) -> Any: ...
    def set3Int(self, *args: Any, **kwargs: Any) -> Any: ...
    def set3Short(self, *args: Any, **kwargs: Any) -> Any: ...
    def set4Double(self, *args: Any, **kwargs: Any) -> Any: ...
    def setBool(self, *args: Any, **kwargs: Any) -> Any: ...
    def setChar(self, *args: Any, **kwargs: Any) -> Any: ...
    def setClean(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDouble(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFloat(self, *args: Any, **kwargs: Any) -> Any: ...
    def setGenericBool(self, *args: Any, **kwargs: Any) -> Any: ...
    def setGenericChar(self, *args: Any, **kwargs: Any) -> Any: ...
    def setGenericDouble(self, *args: Any, **kwargs: Any) -> Any: ...
    def setGenericFloat(self, *args: Any, **kwargs: Any) -> Any: ...
    def setGenericInt(self, *args: Any, **kwargs: Any) -> Any: ...
    def setGenericInt64(self, *args: Any, **kwargs: Any) -> Any: ...
    def setGenericShort(self, *args: Any, **kwargs: Any) -> Any: ...
    def setInt(self, *args: Any, **kwargs: Any) -> Any: ...
    def setInt64(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMAngle(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMDistance(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMFloatMatrix(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMFloatVector(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMMatrix(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMObject(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMPxData(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMTime(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMVector(self, *args: Any, **kwargs: Any) -> Any: ...
    def setShort(self, *args: Any, **kwargs: Any) -> Any: ...
    def setString(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB16EA90>
    def type(self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self, *args: Any, **kwargs: Any) -> Any: ...

def MDataHandle_className(*args: Any, **kwargs: Any) -> Any: ...
class MDistance(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def asCentimeters(self, *args: Any, **kwargs: Any) -> Any: ...
    def asFeet(self, *args: Any, **kwargs: Any) -> Any: ...
    def asInches(self, *args: Any, **kwargs: Any) -> Any: ...
    def asKilometers(self, *args: Any, **kwargs: Any) -> Any: ...
    def asMeters(self, *args: Any, **kwargs: Any) -> Any: ...
    def asMiles(self, *args: Any, **kwargs: Any) -> Any: ...
    def asMillimeters(self, *args: Any, **kwargs: Any) -> Any: ...
    def asUnits(self, *args: Any, **kwargs: Any) -> Any: ...
    def asYards(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def internalToUI(self, *args: Any, **kwargs: Any) -> Any: ...
    def internalUnit(self, *args: Any, **kwargs: Any) -> Any: ...
    kCentimeters: int = 6
    kFeet: int = 2
    kInches: int = 1
    kInvalid: int = 0
    kKilometers: int = 7
    kLast: int = 9
    kMeters: int = 8
    kMiles: int = 4
    kMillimeters: int = 5
    kYards: int = 3
    def setInternalUnit(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUIUnit(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUnit(self, *args: Any, **kwargs: Any) -> Any: ...
    def setValue(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0CE950>
    def uiToInternal(self, *args: Any, **kwargs: Any) -> Any: ...
    def uiUnit(self, *args: Any, **kwargs: Any) -> Any: ...
    def unit(self, *args: Any, **kwargs: Any) -> Any: ...
    def value(self, *args: Any, **kwargs: Any) -> Any: ...

def MDistance_className(*args: Any, **kwargs: Any) -> Any: ...
def MDistance_internalToUI(*args: Any, **kwargs: Any) -> Any: ...
def MDistance_internalUnit(*args: Any, **kwargs: Any) -> Any: ...
def MDistance_setInternalUnit(*args: Any, **kwargs: Any) -> Any: ...
def MDistance_setUIUnit(*args: Any, **kwargs: Any) -> Any: ...
def MDistance_uiToInternal(*args: Any, **kwargs: Any) -> Any: ...
def MDistance_uiUnit(*args: Any, **kwargs: Any) -> Any: ...
class MDoubleArray(object):
    """
    """
    def __add__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __delitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __eq__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __getitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __iadd__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __len__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __ne__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __radd__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __setitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def append(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    def sizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0D1130>

def MDoubleArray_className(*args: Any, **kwargs: Any) -> Any: ...
class MEdit(object):
    """
    """
    def __init__(self, *args, **kwargs) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def editType(self, *args: Any, **kwargs: Any) -> Any: ...
    def getString(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasEditData(self, *args: Any, **kwargs: Any) -> Any: ...
    def isApplied(self, *args: Any, **kwargs: Any) -> Any: ...
    def isFailed(self, *args: Any, **kwargs: Any) -> Any: ...
    def isTopLevel(self, *args: Any, **kwargs: Any) -> Any: ...
    kAddRemoveAttrEdit: int = 3
    kConnectDisconnectEdit: int = 2
    kFcurveEdit: int = 5
    kNullEdit: int = 0
    kParentEdit: int = 4
    kSetAttrEdit: int = 1
    def matches(self, *args: Any, **kwargs: Any) -> Any: ...
    def setApplied(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFailed(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB158270>

def MEdit_className(*args: Any, **kwargs: Any) -> Any: ...
class MEulerRotation(object):
    """
    """
    def __add__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __eq__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __getitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __iadd__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __imul__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __isub__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __mul__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __ne__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __neg__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __sub__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def alternateSolution(self, *args: Any, **kwargs: Any) -> Any: ...
    def asMatrix(self, *args: Any, **kwargs: Any) -> Any: ...
    def asQuaternion(self, *args: Any, **kwargs: Any) -> Any: ...
    def asVector(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def bound(self, *args: Any, **kwargs: Any) -> Any: ...
    def boundIt(self, *args: Any, **kwargs: Any) -> Any: ...
    def closestCut(self, *args: Any, **kwargs: Any) -> Any: ...
    def closestSolution(self, *args: Any, **kwargs: Any) -> Any: ...
    def decompose(self, *args: Any, **kwargs: Any) -> Any: ...
    identity: MEulerRotation = <maya.OpenMaya.MEulerRotation; proxy of <Swig Object of type 'MEulerRotation *' at 0x00000218AAEA4510> >
    def incrementalRotateBy(self, *args: Any, **kwargs: Any) -> Any: ...
    def inverse(self, *args: Any, **kwargs: Any) -> Any: ...
    def invertIt(self, *args: Any, **kwargs: Any) -> Any: ...
    def isEquivalent(self, *args: Any, **kwargs: Any) -> Any: ...
    def isZero(self, *args: Any, **kwargs: Any) -> Any: ...
    kXYZ: int = 0
    kXZY: int = 3
    kYXZ: int = 4
    kYZX: int = 1
    kZXY: int = 2
    kZYX: int = 5
    order: property = <property object at 0x00000218AB0D2450>
    def reorder(self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderIt(self, *args: Any, **kwargs: Any) -> Any: ...
    def setToAlternateSolution(self, *args: Any, **kwargs: Any) -> Any: ...
    def setToClosestCut(self, *args: Any, **kwargs: Any) -> Any: ...
    def setToClosestSolution(self, *args: Any, **kwargs: Any) -> Any: ...
    def setValue(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0D1950>
    x: property = <property object at 0x00000218AB0D2360>
    y: property = <property object at 0x00000218AB0D23B0>
    z: property = <property object at 0x00000218AB0D2400>

def MEulerRotation_decompose(*args: Any, **kwargs: Any) -> Any: ...
class MEvaluationManager(object):
    """
    """
    def __init__(self, *args, **kwargs) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def evaluationInExecution(self, *args: Any, **kwargs: Any) -> Any: ...
    def evaluationManagerActive(self, *args: Any, **kwargs: Any) -> Any: ...
    def graphConstructionActive(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0D2720>

def MEvaluationManager_className(*args: Any, **kwargs: Any) -> Any: ...
def MEvaluationManager_evaluationInExecution(*args: Any, **kwargs: Any) -> Any: ...
def MEvaluationManager_evaluationManagerActive(*args: Any, **kwargs: Any) -> Any: ...
def MEvaluationManager_graphConstructionActive(*args: Any, **kwargs: Any) -> Any: ...
class MEvaluationNode(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self, *args: Any, **kwargs: Any) -> Any: ...
    def childCount(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def connect(self, *args: Any, **kwargs: Any) -> Any: ...
    def datablock(self, *args: Any, **kwargs: Any) -> Any: ...
    def dependencyNode(self, *args: Any, **kwargs: Any) -> Any: ...
    def dirtyPlug(self, *args: Any, **kwargs: Any) -> Any: ...
    def dirtyPlugExists(self, *args: Any, **kwargs: Any) -> Any: ...
    def iterator(self, *args: Any, **kwargs: Any) -> Any: ...
    def parent(self, *args: Any, **kwargs: Any) -> Any: ...
    def parentCount(self, *args: Any, **kwargs: Any) -> Any: ...
    def skipEvaluation(self, *args: Any, **kwargs: Any) -> Any: ...
    def skippingEvaluation(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0D2950>

class MEvaluationNodeIterator(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def isDone(self, *args: Any, **kwargs: Any) -> Any: ...
    def next(self, *args: Any, **kwargs: Any) -> Any: ...
    def plug(self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0D2E00>

def MEvaluationNodeIterator_className(*args: Any, **kwargs: Any) -> Any: ...
def MEvaluationNode_className(*args: Any, **kwargs: Any) -> Any: ...
class MEventMessage(MMessage):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addEventCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def getEventNames(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0D2540>

def MEventMessage_addEventCallback(*args: Any, **kwargs: Any) -> Any: ...
def MEventMessage_className(*args: Any, **kwargs: Any) -> Any: ...
def MEventMessage_getEventNames(*args: Any, **kwargs: Any) -> Any: ...
class MFcurveEdit(MEdit):
    """
    """
    def __init__(self, *args, **kwargs) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def fcurve(self, *args: Any, **kwargs: Any) -> Any: ...
    def fcurveName(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB158B80>

def MFcurveEdit_className(*args: Any, **kwargs: Any) -> Any: ...
class MFileIO(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def beforeExportFilename(self, *args: Any, **kwargs: Any) -> Any: ...
    def beforeExportUserFileTranslator(self, *args: Any, **kwargs: Any) -> Any: ...
    def beforeImportFilename(self, *args: Any, **kwargs: Any) -> Any: ...
    def beforeImportUserFileTranslator(self, *args: Any, **kwargs: Any) -> Any: ...
    def beforeOpenFilename(self, *args: Any, **kwargs: Any) -> Any: ...
    def beforeOpenUserFileTranslator(self, *args: Any, **kwargs: Any) -> Any: ...
    def beforeReferenceFilename(self, *args: Any, **kwargs: Any) -> Any: ...
    def beforeReferenceUserFileTranslator(self, *args: Any, **kwargs: Any) -> Any: ...
    def beforeSaveFilename(self, *args: Any, **kwargs: Any) -> Any: ...
    def beforeSaveUserFileTranslator(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def cleanReference(self, *args: Any, **kwargs: Any) -> Any: ...
    def currentFile(self, *args: Any, **kwargs: Any) -> Any: ...
    def currentlyReadingFileVersion(self, *args: Any, **kwargs: Any) -> Any: ...
    def exportAll(self, *args: Any, **kwargs: Any) -> Any: ...
    def exportAnim(self, *args: Any, **kwargs: Any) -> Any: ...
    def exportAnimFromReference(self, *args: Any, **kwargs: Any) -> Any: ...
    def exportAsReference(self, *args: Any, **kwargs: Any) -> Any: ...
    def exportSelected(self, *args: Any, **kwargs: Any) -> Any: ...
    def exportSelectedAnim(self, *args: Any, **kwargs: Any) -> Any: ...
    def exportSelectedAnimFromReference(self, *args: Any, **kwargs: Any) -> Any: ...
    def exportType(self, *args: Any, **kwargs: Any) -> Any: ...
    def fileCurrentlyLoading(self, *args: Any, **kwargs: Any) -> Any: ...
    def fileType(self, *args: Any, **kwargs: Any) -> Any: ...
    def getErrorStatus(self, *args: Any, **kwargs: Any) -> Any: ...
    def getFileTypes(self, *args: Any, **kwargs: Any) -> Any: ...
    def getFiles(self, *args: Any, **kwargs: Any) -> Any: ...
    def getLastTempFile(self, *args: Any, **kwargs: Any) -> Any: ...
    def getReferenceConnectionsBroken(self, *args: Any, **kwargs: Any) -> Any: ...
    def getReferenceConnectionsMade(self, *args: Any, **kwargs: Any) -> Any: ...
    def getReferenceFileByNode(self, *args: Any, **kwargs: Any) -> Any: ...
    def getReferenceNodes(self, *args: Any, **kwargs: Any) -> Any: ...
    def getReferences(self, *args: Any, **kwargs: Any) -> Any: ...
    def importFile(self, *args: Any, **kwargs: Any) -> Any: ...
    def isImportingFile(self, *args: Any, **kwargs: Any) -> Any: ...
    def isNewingFile(self, *args: Any, **kwargs: Any) -> Any: ...
    def isOpeningFile(self, *args: Any, **kwargs: Any) -> Any: ...
    def isReadingFile(self, *args: Any, **kwargs: Any) -> Any: ...
    def isReferencingFile(self, *args: Any, **kwargs: Any) -> Any: ...
    def isSavingReference(self, *args: Any, **kwargs: Any) -> Any: ...
    def isWritingFile(self, *args: Any, **kwargs: Any) -> Any: ...
    kExportTypeAll: int = 0
    kExportTypeAnim: int = 2
    kExportTypeAnimFromReference: int = 3
    kExportTypeAsReference: int = 4
    kExportTypeEdits: int = 5
    kExportTypePrefObjects: int = 6
    kExportTypeSelected: int = 1
    kForceDeleteNamespaceContent: int = 3
    kLoadAllReferences: int = 1
    kLoadDefault: int = 0
    kLoadNoReferences: int = 2
    kMergeNamespaceWithParentNamespace: int = 2
    kMergeNamespaceWithRootNamespace: int = 1
    kRemoveNamespaceIfEmpty: int = 0
    kVersion2008: int = 144
    kVersion2009: int = 147
    kVersion2010: int = 152
    kVersion2011: int = 156
    kVersion2012: int = 161
    kVersion2013: int = 167
    kVersion2014: int = 179
    kVersion2015: int = 184
    kVersion2016: int = 192
    kVersion2016R2: int = 198
    kVersion2017: int = 201
    kVersion2017Update3: int = 202
    kVersion2017Update4: int = 203
    kVersion2018: int = 210
    kVersion2018Update2: int = 211
    kVersion2018Update3: int = 212
    kVersion2018Update4: int = 213
    kVersion2019: int = 232
    kVersion2020: int = 254
    kVersion2022: int = 278
    kVersion2023: int = 304
    kVersion4_0: int = 74
    kVersion4_5: int = 83
    kVersion5_0: int = 90
    kVersion6_0: int = 105
    kVersion6_5: int = 117
    kVersion7_0: int = 128
    kVersion8_0: int = 133
    kVersion8_5: int = 139
    def latestMayaFileVersion(self, *args: Any, **kwargs: Any) -> Any: ...
    def loadReference(self, *args: Any, **kwargs: Any) -> Any: ...
    def loadReferenceByNode(self, *args: Any, **kwargs: Any) -> Any: ...
    def mustRenameToSave(self, *args: Any, **kwargs: Any) -> Any: ...
    def mustRenameToSaveMsg(self, *args: Any, **kwargs: Any) -> Any: ...
    def newFile(self, *args: Any, **kwargs: Any) -> Any: ...
    def open(self, *args: Any, **kwargs: Any) -> Any: ...
    def reference(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeReference(self, *args: Any, **kwargs: Any) -> Any: ...
    def resetError(self, *args: Any, **kwargs: Any) -> Any: ...
    def save(self, *args: Any, **kwargs: Any) -> Any: ...
    def saveAs(self, *args: Any, **kwargs: Any) -> Any: ...
    def saveReference(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCurrentFile(self, *args: Any, **kwargs: Any) -> Any: ...
    def setError(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMustRenameToSave(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMustRenameToSaveMsg(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0D3130>
    def unloadReference(self, *args: Any, **kwargs: Any) -> Any: ...
    def unloadReferenceByNode(self, *args: Any, **kwargs: Any) -> Any: ...

def MFileIO_beforeExportFilename(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_beforeExportUserFileTranslator(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_beforeImportFilename(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_beforeImportUserFileTranslator(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_beforeOpenFilename(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_beforeOpenUserFileTranslator(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_beforeReferenceFilename(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_beforeReferenceUserFileTranslator(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_beforeSaveFilename(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_beforeSaveUserFileTranslator(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_className(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_cleanReference(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_currentFile(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_currentlyReadingFileVersion(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_exportAll(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_exportAnim(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_exportAnimFromReference(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_exportAsReference(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_exportSelected(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_exportSelectedAnim(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_exportSelectedAnimFromReference(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_exportType(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_fileCurrentlyLoading(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_fileType(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_getErrorStatus(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_getFileTypes(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_getFiles(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_getLastTempFile(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_getReferenceConnectionsBroken(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_getReferenceConnectionsMade(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_getReferenceFileByNode(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_getReferenceNodes(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_getReferences(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_importFile(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_isImportingFile(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_isNewingFile(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_isOpeningFile(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_isReadingFile(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_isReferencingFile(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_isSavingReference(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_isWritingFile(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_latestMayaFileVersion(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_loadReference(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_loadReferenceByNode(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_mustRenameToSave(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_mustRenameToSaveMsg(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_newFile(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_open(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_reference(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_removeReference(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_resetError(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_save(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_saveAs(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_saveReference(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_setCurrentFile(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_setError(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_setMustRenameToSave(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_setMustRenameToSaveMsg(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_unloadReference(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_unloadReferenceByNode(*args: Any, **kwargs: Any) -> Any: ...
class MFileObject(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def exists(self, *args: Any, **kwargs: Any) -> Any: ...
    def expandedFullName(self, *args: Any, **kwargs: Any) -> Any: ...
    def expandedPath(self, *args: Any, **kwargs: Any) -> Any: ...
    def fullName(self, *args: Any, **kwargs: Any) -> Any: ...
    def getResolvedFullName(self, *args: Any, **kwargs: Any) -> Any: ...
    def isAbsolutePath(self, *args: Any, **kwargs: Any) -> Any: ...
    def isSet(self, *args: Any, **kwargs: Any) -> Any: ...
    def ithFullName(self, *args: Any, **kwargs: Any) -> Any: ...
    def ithPath(self, *args: Any, **kwargs: Any) -> Any: ...
    kBaseName: int = 32
    kDirMap: int = 4
    kExact: int = 2
    kInputFile: int = 54
    kInputReference: int = 62
    kNone: int = 1
    kReferenceMappings: int = 8
    kRelative: int = 16
    kStrict: int = 6
    def name(self, *args: Any, **kwargs: Any) -> Any: ...
    def overrideResolvedFullName(self, *args: Any, **kwargs: Any) -> Any: ...
    def path(self, *args: Any, **kwargs: Any) -> Any: ...
    def pathCount(self, *args: Any, **kwargs: Any) -> Any: ...
    def rawFullName(self, *args: Any, **kwargs: Any) -> Any: ...
    def rawName(self, *args: Any, **kwargs: Any) -> Any: ...
    def rawPath(self, *args: Any, **kwargs: Any) -> Any: ...
    def rawURI(self, *args: Any, **kwargs: Any) -> Any: ...
    def resolveMethod(self, *args: Any, **kwargs: Any) -> Any: ...
    def resolvedFullName(self, *args: Any, **kwargs: Any) -> Any: ...
    def resolvedName(self, *args: Any, **kwargs: Any) -> Any: ...
    def resolvedPath(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFullName(self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRawFullName(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRawName(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRawPath(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRawURI(self, *args: Any, **kwargs: Any) -> Any: ...
    def setResolveMethod(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0D30E0>

def MFileObject_getResolvedFullName(*args: Any, **kwargs: Any) -> Any: ...
def MFileObject_isAbsolutePath(*args: Any, **kwargs: Any) -> Any: ...
class MFloatArray(object):
    """
    """
    def __add__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __delitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __eq__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __getitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __iadd__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __len__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __ne__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __radd__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __setitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def append(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    def sizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0D4E50>

def MFloatArray_className(*args: Any, **kwargs: Any) -> Any: ...
class MFloatMatrix(object):
    """
    """
    def __add__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __call__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __eq__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __getitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __iadd__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __imul__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __isub__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __mul__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __ne__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __sub__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def adjoint(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def det3x3(self, *args: Any, **kwargs: Any) -> Any: ...
    def det4x4(self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self, *args: Any, **kwargs: Any) -> Any: ...
    def homogenize(self, *args: Any, **kwargs: Any) -> Any: ...
    def inverse(self, *args: Any, **kwargs: Any) -> Any: ...
    def isEquivalent(self, *args: Any, **kwargs: Any) -> Any: ...
    matrix: property = <property object at 0x00000218AB0D8D10>
    def setToIdentity(self, *args: Any, **kwargs: Any) -> Any: ...
    def setToProduct(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0D86D0>
    def transpose(self, *args: Any, **kwargs: Any) -> Any: ...

def MFloatMatrix_className(*args: Any, **kwargs: Any) -> Any: ...
class MFloatPoint(object):
    """
    """
    def __add__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __call__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __div__(self, *args) -> Any: ...
    def __eq__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __getitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __iadd__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __imul__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __isub__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __mul__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __ne__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __sub__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __truediv__(self, *args) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def cartesianize(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def distanceTo(self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self, *args: Any, **kwargs: Any) -> Any: ...
    def homogenize(self, *args: Any, **kwargs: Any) -> Any: ...
    def isEquivalent(self, *args: Any, **kwargs: Any) -> Any: ...
    def origin(self, *args: Any, **kwargs: Any) -> Any: ...
    def rationalize(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCast(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0D9400>
    w: property = <property object at 0x00000218AB0D9AE0>
    x: property = <property object at 0x00000218AB0D99F0>
    y: property = <property object at 0x00000218AB0D9A40>
    z: property = <property object at 0x00000218AB0D9A90>

class MFloatPointArray(object):
    """
    """
    def __getitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def append(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    def sizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0D8E50>

def MFloatPointArray_className(*args: Any, **kwargs: Any) -> Any: ...
def MFloatPoint_className(*args: Any, **kwargs: Any) -> Any: ...
class MFloatVector(object):
    """
    """
    def __add__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __call__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __div__(self, *args) -> Any: ...
    def __eq__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __getitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __iadd__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __idiv__(self, *args) -> Any: ...
    def __imul__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __isub__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __itruediv__(self, *args) -> Any: ...
    def __mul__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __ne__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __neg__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __sub__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __truediv__(self, *args) -> Any: ...
    def __xor__(self, *args: Any, **kwargs: Any) -> Any: ...
    def angle(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self, *args: Any, **kwargs: Any) -> Any: ...
    def isEquivalent(self, *args: Any, **kwargs: Any) -> Any: ...
    def isParallel(self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    def normal(self, *args: Any, **kwargs: Any) -> Any: ...
    def normalize(self, *args: Any, **kwargs: Any) -> Any: ...
    def one(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0DA1D0>
    x: property = <property object at 0x00000218AB0DA860>
    def xAxis(self, *args: Any, **kwargs: Any) -> Any: ...
    def xNegAxis(self, *args: Any, **kwargs: Any) -> Any: ...
    y: property = <property object at 0x00000218AB0DA8B0>
    def yAxis(self, *args: Any, **kwargs: Any) -> Any: ...
    def yNegAxis(self, *args: Any, **kwargs: Any) -> Any: ...
    z: property = <property object at 0x00000218AB0DA900>
    def zAxis(self, *args: Any, **kwargs: Any) -> Any: ...
    def zNegAxis(self, *args: Any, **kwargs: Any) -> Any: ...
    def zero(self, *args: Any, **kwargs: Any) -> Any: ...

class MFloatVectorArray(object):
    """
    """
    def __getitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def append(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    def sizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0D9C20>

def MFloatVectorArray_className(*args: Any, **kwargs: Any) -> Any: ...
class MFn(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    kAISEnvFacade: int = 977
    kAddDoubleLinear: int = 5
    kAdskMaterial: int = 1067
    kAffect: int = 6
    kAimConstraint: int = 111
    kAimMatrix: int = 1139
    kAir: int = 257
    kAlignCurve: int = 41
    kAlignManip: int = 912
    kAlignSurface: int = 42
    kAmbientLight: int = 303
    kAngle: int = 270
    kAngleBetween: int = 21
    kAnimBlend: int = 794
    kAnimBlendInOut: int = 795
    kAnimCurve: int = 7
    kAnimCurveTimeToAngular: int = 8
    kAnimCurveTimeToDistance: int = 9
    kAnimCurveTimeToTime: int = 10
    kAnimCurveTimeToUnitless: int = 11
    kAnimCurveUnitlessToAngular: int = 12
    kAnimCurveUnitlessToDistance: int = 13
    kAnimCurveUnitlessToTime: int = 14
    kAnimCurveUnitlessToUnitless: int = 15
    kAnimLayer: int = 1020
    kAnisotropy: int = 622
    kAnnotation: int = 271
    kAnyGeometryVarGroup: int = 115
    kArcLength: int = 273
    kAreaLight: int = 305
    kArrayMapper: int = 528
    kArrowManip: int = 123
    kArubaTesselate: int = 1132
    kAssembly: int = 1081
    kAsset: int = 1018
    kAttachCurve: int = 43
    kAttachSurface: int = 44
    kAttribute: int = 565
    kAttribute2Double: int = 747
    kAttribute2Float: int = 748
    kAttribute2Int: int = 750
    kAttribute2Long: int = 750
    kAttribute2Short: int = 749
    kAttribute3Double: int = 751
    kAttribute3Float: int = 752
    kAttribute3Int: int = 754
    kAttribute3Long: int = 754
    kAttribute3Short: int = 753
    kAttribute4Double: int = 880
    kAudio: int = 22
    kAverageCurveManip: int = 149
    kAvgCurves: int = 45
    kAvgNurbsSurfacePoints: int = 47
    kAvgSurfacePoints: int = 46
    kAxesActionManip: int = 124
    kBackground: int = 23
    kBallProjectionManip: int = 125
    kBarnDoorManip: int = 150
    kBase: int = 1
    kBaseLattice: int = 249
    kBendLattice: int = 335
    kBevel: int = 48
    kBevelManip: int = 151
    kBevelPlus: int = 899
    kBezierCurve: int = 1054
    kBezierCurveData: int = 1055
    kBezierCurveToNurbs: int = 1057
    kBinaryData: int = 746
    kBirailSrf: int = 49
    kBlend: int = 27
    kBlendColorSet: int = 739
    kBlendColors: int = 31
    kBlendDevice: int = 30
    kBlendFalloff: int = 1141
    kBlendManip: int = 152
    kBlendMatrix: int = 1137
    kBlendNodeAdditiveRotation: int = 1033
    kBlendNodeAdditiveScale: int = 1032
    kBlendNodeBase: int = 1021
    kBlendNodeBoolean: int = 1022
    kBlendNodeDouble: int = 1023
    kBlendNodeDoubleAngle: int = 1024
    kBlendNodeDoubleLinear: int = 1025
    kBlendNodeEnum: int = 1026
    kBlendNodeFloat: int = 1027
    kBlendNodeFloatAngle: int = 1028
    kBlendNodeFloatLinear: int = 1029
    kBlendNodeInt16: int = 1030
    kBlendNodeInt32: int = 1031
    kBlendNodeTime: int = 1052
    kBlendShape: int = 336
    kBlendTwoAttr: int = 28
    kBlendWeighted: int = 29
    kBlindData: int = 756
    kBlindDataTemplate: int = 757
    kBlinn: int = 373
    kBlinnMaterial: int = 389
    kBoundary: int = 53
    kBox: int = 867
    kBoxData: int = 866
    kBrownian: int = 508
    kBrush: int = 765
    kBulge: int = 497
    kBulgeLattice: int = 338
    kBump: int = 32
    kBump3d: int = 33
    kButtonManip: int = 153
    kCacheBase: int = 999
    kCacheBlend: int = 1000
    kCacheFile: int = 987
    kCacheTrack: int = 1001
    kCacheableNode: int = 996
    kCaddyManipBase: int = 1110
    kCamera: int = 250
    kCameraManip: int = 154
    kCameraPlaneManip: int = 143
    kCameraSet: int = 1011
    kCameraView: int = 34
    kCenterManip: int = 134
    kChainToSpline: int = 35
    kCharacter: int = 688
    kCharacterMap: int = 803
    kCharacterMappingData: int = 742
    kCharacterOffset: int = 689
    kChecker: int = 498
    kChoice: int = 36
    kChooser: int = 772
    kCircle: int = 54
    kCircleManip: int = 126
    kCirclePointManip: int = 231
    kCircleSweepManip: int = 128
    kClampColor: int = 39
    kClientDevice: int = 1077
    kClip: int = 809
    kClipGhostShape: int = 1082
    kClipLibrary: int = 780
    kClipScheduler: int = 779
    kClipToGhostData: int = 1083
    kCloseCurve: int = 55
    kCloseSurface: int = 57
    kClosestPointOnMesh: int = 989
    kClosestPointOnSurface: int = 56
    kCloth: int = 499
    kCloud: int = 509
    kCluster: int = 251
    kClusterFilter: int = 347
    kClusterFlexor: int = 300
    kCoiManip: int = 155
    kCollision: int = 253
    kColorBackground: int = 24
    kColorMgtGlobals: int = 1101
    kColorProfile: int = 1066
    kCombinationShape: int = 337
    kCommCornerManip: int = 613
    kCommCornerOperManip: int = 614
    kCommEdgeOperManip: int = 611
    kCommEdgePtManip: int = 610
    kCommEdgeSegmentManip: int = 612
    kComponent: int = 535
    kComponentFalloff: int = 1144
    kComponentListData: int = 583
    kComponentManip: int = 674
    kComponentMatch: int = 1149
    kComposeMatrix: int = 1136
    kCompoundAttribute: int = 575
    kConcentricProjectionManip: int = 129
    kCondition: int = 37
    kCone: int = 96
    kConstraint: int = 932
    kContainer: int = 1013
    kContainerBase: int = 1068
    kContourProjectionManip: int = 1115
    kContrast: int = 38
    kControl: int = 486
    kControllerTag: int = 1128
    kCopyColorSet: int = 738
    kCopyUVSet: int = 807
    kCpManip: int = 156
    kCrater: int = 510
    kCreaseSet: int = 1090
    kCreate: int = 40
    kCreateBPManip: int = 837
    kCreateBezierManip: int = 1053
    kCreateCVManip: int = 157
    kCreateColorSet: int = 736
    kCreateEPManip: int = 158
    kCreateSectionManip: int = 824
    kCreateUVSet: int = 808
    kCrossSectionEditManip: int = 825
    kCrossSectionManager: int = 823
    kCubicProjectionManip: int = 130
    kCurve: int = 266
    kCurveCVComponent: int = 536
    kCurveCurveIntersect: int = 641
    kCurveEPComponent: int = 537
    kCurveEdManip: int = 159
    kCurveFromMeshCoM: int = 934
    kCurveFromMeshEdge: int = 640
    kCurveFromSubdivEdge: int = 836
    kCurveFromSubdivFace: int = 842
    kCurveFromSurface: int = 58
    kCurveFromSurfaceBnd: int = 59
    kCurveFromSurfaceCoS: int = 60
    kCurveFromSurfaceIso: int = 61
    kCurveInfo: int = 62
    kCurveKnotComponent: int = 538
    kCurveNormalizerAngle: int = 1003
    kCurveNormalizerLinear: int = 1004
    kCurveParamComponent: int = 539
    kCurveSegmentManip: int = 160
    kCurveVarGroup: int = 116
    kCustomEvaluatorClusterNode: int = 1130
    kCylinder: int = 98
    kCylindricalProjectionManip: int = 131
    kDOF: int = 323
    kDPbirailSrf: int = 50
    kDagContainer: int = 1069
    kDagNode: int = 107
    kDagPose: int = 690
    kDagSelectionItem: int = 562
    kData: int = 582
    kData2Double: int = 593
    kData2Float: int = 594
    kData2Int: int = 595
    kData2Long: int = 595
    kData2Short: int = 596
    kData3Double: int = 597
    kData3Float: int = 598
    kData3Int: int = 599
    kData3Long: int = 599
    kData3Short: int = 600
    kData4Double: int = 881
    kDblTrsManip: int = 190
    kDecayRegionCapComponent: int = 548
    kDecayRegionComponent: int = 549
    kDecomposeMatrix: int = 1135
    kDefaultLightList: int = 317
    kDeformBend: int = 625
    kDeformBendManip: int = 631
    kDeformFlare: int = 628
    kDeformFlareManip: int = 634
    kDeformFunc: int = 624
    kDeformSine: int = 629
    kDeformSineManip: int = 635
    kDeformSquash: int = 627
    kDeformSquashManip: int = 633
    kDeformTwist: int = 626
    kDeformTwistManip: int = 632
    kDeformWave: int = 630
    kDeformWaveManip: int = 636
    kDeleteColorSet: int = 737
    kDeleteComponent: int = 318
    kDeleteUVSet: int = 800
    kDeltaMush: int = 350
    kDependencyNode: int = 4
    kDetachCurve: int = 63
    kDetachSurface: int = 64
    kDiffuseMaterial: int = 387
    kDimension: int = 269
    kDimensionManip: int = 232
    kDirectedDisc: int = 276
    kDirectionManip: int = 161
    kDirectionalLight: int = 308
    kDiscManip: int = 132
    kDiskCache: int = 863
    kDispatchCompute: int = 319
    kDisplacementShader: int = 321
    kDisplayLayer: int = 733
    kDisplayLayerManager: int = 734
    kDistance: int = 272
    kDistanceBetween: int = 322
    kDistanceManip: int = 638
    kDofManip: int = 162
    kDoubleAngleAttribute: int = 567
    kDoubleArrayData: int = 584
    kDoubleIndexedComponent: int = 714
    kDoubleLinearAttribute: int = 569
    kDoubleShadingSwitch: int = 619
    kDrag: int = 258
    kDropOffFunction: int = 826
    kDropoffLocator: int = 282
    kDropoffManip: int = 163
    kDummy: int = 254
    kDummyConnectable: int = 324
    kDynAirManip: int = 724
    kDynArrayAttrsData: int = 729
    kDynAttenuationManip: int = 728
    kDynBase: int = 720
    kDynBaseFieldManip: int = 723
    kDynEmitterManip: int = 721
    kDynFieldsManip: int = 722
    kDynGlobals: int = 769
    kDynNewtonManip: int = 725
    kDynParticleSetComponent: int = 560
    kDynSpreadManip: int = 727
    kDynSweptGeometryData: int = 743
    kDynTurbulenceManip: int = 726
    kDynamicConstraint: int = 993
    kDynamicsController: int = 325
    kEdgeComponent: int = 545
    kEditCurve: int = 821
    kEditCurveManip: int = 822
    kEditMetadata: int = 1089
    kEditsManager: int = 1097
    kEmitter: int = 255
    kEnableManip: int = 136
    kEnumAttribute: int = 572
    kEnvBall: int = 491
    kEnvChrome: int = 493
    kEnvCube: int = 492
    kEnvFacade: int = 976
    kEnvFogMaterial: int = 381
    kEnvFogShape: int = 278
    kEnvSky: int = 494
    kEnvSphere: int = 495
    kExplodeNurbsShell: int = 692
    kExpression: int = 327
    kExtendCurve: int = 65
    kExtendCurveDistanceManip: int = 164
    kExtendSurface: int = 66
    kExtendSurfaceDistanceManip: int = 716
    kExtract: int = 328
    kExtrude: int = 67
    kExtrudeManip: int = 165
    kFFD: int = 339
    kFFblendSrf: int = 68
    kFFfilletSrf: int = 69
    kFacade: int = 974
    kFalloffEval: int = 1148
    kFfdDualBase: int = 340
    kField: int = 256
    kFileBackground: int = 25
    kFileTexture: int = 500
    kFilletCurve: int = 70
    kFilter: int = 329
    kFilterClosestSample: int = 330
    kFilterEuler: int = 331
    kFilterSimplify: int = 332
    kFitBspline: int = 71
    kFixedLineManip: int = 233
    kFlexor: int = 299
    kFloatAngleAttribute: int = 568
    kFloatArrayData: int = 1037
    kFloatLinearAttribute: int = 570
    kFloatMatrixAttribute: int = 579
    kFloatVectorArrayData: int = 1014
    kFlow: int = 72
    kFluid: int = 914
    kFluidData: int = 916
    kFluidEmitter: int = 920
    kFluidGeom: int = 915
    kFluidTexture2D: int = 909
    kFluidTexture3D: int = 908
    kFollicle: int = 935
    kForceUpdateManip: int = 695
    kFosterParent: int = 1092
    kFourByFourMatrix: int = 775
    kFractal: int = 501
    kFreePointManip: int = 133
    kFreePointTriadManip: int = 137
    kGammaCorrect: int = 333
    kGenericAttribute: int = 576
    kGeoConnectable: int = 326
    kGeoConnector: int = 922
    kGeomBind: int = 1100
    kGeometric: int = 265
    kGeometryConstraint: int = 113
    kGeometryData: int = 712
    kGeometryFilt: int = 334
    kGeometryOnLineManip: int = 142
    kGeometryVarGroup: int = 114
    kGlobalCacheControls: int = 862
    kGlobalStitch: int = 701
    kGranite: int = 511
    kGravity: int = 259
    kGreasePencilSequence: int = 1088
    kGreasePlane: int = 1086
    kGreasePlaneRenderShape: int = 1087
    kGrid: int = 502
    kGroundPlane: int = 290
    kGroupId: int = 356
    kGroupParts: int = 357
    kGuide: int = 358
    kGuideLine: int = 301
    kHairConstraint: int = 940
    kHairSystem: int = 936
    kHairTubeShader: int = 947
    kHandleRotateManip: int = 216
    kHardenPointCurve: int = 73
    kHardwareReflectionMap: int = 886
    kHardwareRenderGlobals: int = 527
    kHardwareRenderingGlobals: int = 1071
    kHeightField: int = 921
    kHikEffector: int = 961
    kHikFKJoint: int = 963
    kHikFloorContactMarker: int = 983
    kHikGroundPlane: int = 984
    kHikHandle: int = 965
    kHikIKEffector: int = 962
    kHikSolver: int = 964
    kHistorySwitch: int = 988
    kHsvToRgb: int = 359
    kHwShaderNode: int = 889
    kHyperGraphInfo: int = 360
    kHyperLayout: int = 361
    kHyperLayoutDG: int = 1005
    kHyperView: int = 362
    kIkEffector: int = 119
    kIkHandle: int = 120
    kIkRPManip: int = 167
    kIkSolver: int = 363
    kIkSplineManip: int = 166
    kIkSystem: int = 369
    kIllustratorCurve: int = 74
    kImageAdd: int = 659
    kImageBlur: int = 665
    kImageColorCorrect: int = 664
    kImageData: int = 653
    kImageDepth: int = 667
    kImageDiff: int = 660
    kImageDisplay: int = 668
    kImageFilter: int = 666
    kImageLoad: int = 654
    kImageMotionBlur: int = 670
    kImageMultiply: int = 661
    kImageNetDest: int = 657
    kImageNetSrc: int = 656
    kImageOver: int = 662
    kImagePlane: int = 370
    kImageRender: int = 658
    kImageSave: int = 655
    kImageSource: int = 791
    kImageUnder: int = 663
    kImageView: int = 669
    kImplicitCone: int = 894
    kImplicitSphere: int = 895
    kInsertKnotCrv: int = 75
    kInsertKnotSrf: int = 76
    kInstancer: int = 762
    kInt64ArrayData: int = 814
    kIntArrayData: int = 585
    kIntersectSurface: int = 77
    kInvalid: int = 0
    kIsoparmComponent: int = 540
    kIsoparmManip: int = 146
    kItemList: int = 564
    kJiggleDeformer: int = 861
    kJoint: int = 121
    kJointCluster: int = 349
    kJointClusterManip: int = 168
    kJointTranslateManip: int = 229
    kKeyframeDelta: int = 949
    kKeyframeDeltaAddRemove: int = 952
    kKeyframeDeltaBlockAddRemove: int = 953
    kKeyframeDeltaBreakdown: int = 957
    kKeyframeDeltaInfType: int = 954
    kKeyframeDeltaMove: int = 950
    kKeyframeDeltaScale: int = 951
    kKeyframeDeltaTangent: int = 955
    kKeyframeDeltaWeighted: int = 956
    kKeyframeRegionManip: int = 1002
    kKeyingGroup: int = 687
    kLambert: int = 371
    kLambertMaterial: int = 388
    kLast: int = 1151
    kLattice: int = 279
    kLatticeComponent: int = 546
    kLatticeData: int = 587
    kLatticeGeom: int = 280
    kLayeredShader: int = 376
    kLayeredTexture: int = 804
    kLeastSquares: int = 379
    kLeather: int = 512
    kLight: int = 302
    kLightDataAttribute: int = 577
    kLightFogMaterial: int = 380
    kLightInfo: int = 378
    kLightLink: int = 768
    kLightList: int = 382
    kLightManip: int = 169
    kLightProjectionGeometry: int = 234
    kLightSource: int = 383
    kLightSourceMaterial: int = 391
    kLimitManip: int = 135
    kLineArrowManip: int = 235
    kLineManip: int = 147
    kLineModifier: int = 978
    kLinearLight: int = 306
    kLocator: int = 281
    kLodGroup: int = 773
    kLodThresholds: int = 771
    kLookAt: int = 112
    kLuminance: int = 384
    kMCsolver: int = 364
    kMPbirailSrf: int = 51
    kMakeGroup: int = 385
    kMandelbrot: int = 1084
    kMandelbrot3D: int = 1085
    kManip2DContainer: int = 192
    kManipContainer: int = 148
    kManipulator: int = 230
    kManipulator2D: int = 205
    kManipulator3D: int = 122
    kMarble: int = 513
    kMarker: int = 283
    kMarkerManip: int = 210
    kMaterial: int = 386
    kMaterialFacade: int = 975
    kMaterialInfo: int = 392
    kMaterialTemplate: int = 393
    kMatrixAdd: int = 394
    kMatrixArrayData: int = 603
    kMatrixAttribute: int = 578
    kMatrixData: int = 588
    kMatrixFloatData: int = 672
    kMatrixHold: int = 395
    kMatrixMult: int = 396
    kMatrixPass: int = 397
    kMatrixWtAdd: int = 398
    kMembrane: int = 1038
    kMentalRayTexture: int = 942
    kMergeVertsToolManip: int = 1039
    kMesh: int = 296
    kMeshComponent: int = 550
    kMeshData: int = 589
    kMeshEdgeComponent: int = 551
    kMeshFaceVertComponent: int = 555
    kMeshFrEdgeComponent: int = 553
    kMeshGeom: int = 297
    kMeshMapComponent: int = 817
    kMeshPolygonComponent: int = 552
    kMeshVarGroup: int = 117
    kMeshVertComponent: int = 554
    kMeshVtxFaceComponent: int = 745
    kMessageAttribute: int = 580
    kMidModifier: int = 399
    kMidModifierWithMatrix: int = 400
    kModel: int = 3
    kModifyEdgeBaseManip: int = 838
    kModifyEdgeCrvManip: int = 829
    kModifyEdgeManip: int = 830
    kMorph: int = 352
    kMotionPath: int = 445
    kMotionPathManip: int = 170
    kMountain: int = 503
    kMoveUVShellManip2D: int = 710
    kMoveVertexManip: int = 763
    kMultDoubleLinear: int = 774
    kMultiSubVertexComponent: int = 558
    kMultilisterLight: int = 447
    kMultiplyDivide: int = 448
    kMute: int = 931
    kNBase: int = 998
    kNCloth: int = 1007
    kNComponent: int = 994
    kNId: int = 1036
    kNIdData: int = 1035
    kNLE: int = 1095
    kNObject: int = 1016
    kNObjectData: int = 1015
    kNParticle: int = 1008
    kNRigid: int = 1009
    kNamedObject: int = 2
    kNearestPointOnCurve: int = 1065
    kNewton: int = 260
    kNodeGraphEditorBookmarkInfo: int = 1118
    kNodeGraphEditorBookmarks: int = 1117
    kNodeGraphEditorInfo: int = 1116
    kNoise: int = 879
    kNonAmbientLight: int = 304
    kNonDagSelectionItem: int = 563
    kNonExtendedLight: int = 307
    kNonLinear: int = 623
    kNormalConstraint: int = 238
    kNucleus: int = 997
    kNumericAttribute: int = 566
    kNumericData: int = 592
    kNurbsBoolean: int = 693
    kNurbsCircular2PtArc: int = 643
    kNurbsCircular3PtArc: int = 642
    kNurbsCube: int = 80
    kNurbsCurve: int = 267
    kNurbsCurveData: int = 591
    kNurbsCurveGeom: int = 268
    kNurbsCurveToBezier: int = 1056
    kNurbsPlane: int = 79
    kNurbsSquare: int = 621
    kNurbsSurface: int = 294
    kNurbsSurfaceData: int = 590
    kNurbsSurfaceGeom: int = 295
    kNurbsTesselate: int = 78
    kNurbsToSubdiv: int = 760
    kObjectAttrFilter: int = 680
    kObjectBinFilter: int = 943
    kObjectFilter: int = 676
    kObjectMultiFilter: int = 677
    kObjectNameFilter: int = 678
    kObjectRenderFilter: int = 681
    kObjectScriptFilter: int = 682
    kObjectTypeFilter: int = 679
    kOcean: int = 875
    kOceanDeformer: int = 1126
    kOceanShader: int = 898
    kOffsetCos: int = 81
    kOffsetCosManip: int = 171
    kOffsetCurve: int = 82
    kOffsetCurveManip: int = 172
    kOffsetSurface: int = 644
    kOffsetSurfaceManip: int = 652
    kOldGeometryConstraint: int = 449
    kOpaqueAttribute: int = 1150
    kOpticalFX: int = 450
    kOrientConstraint: int = 239
    kOrientationComponent: int = 556
    kOrientationLocator: int = 286
    kOrientationMarker: int = 284
    kOrthoGrid: int = 291
    kPASolver: int = 365
    kPairBlend: int = 927
    kParamDimension: int = 275
    kParentConstraint: int = 242
    kParticle: int = 311
    kParticleAgeMapper: int = 451
    kParticleCloud: int = 452
    kParticleColorMapper: int = 453
    kParticleIncandecenceMapper: int = 454
    kParticleSamplerInfo: int = 806
    kParticleTransparencyMapper: int = 455
    kPartition: int = 456
    kPassContributionMap: int = 787
    kPfxGeometry: int = 945
    kPfxHair: int = 946
    kPfxToon: int = 971
    kPhong: int = 374
    kPhongExplorer: int = 375
    kPhongMaterial: int = 390
    kPickMatrix: int = 1138
    kPivotComponent: int = 541
    kPivotManip2D: int = 191
    kPlace2dTexture: int = 457
    kPlace3dTexture: int = 458
    kPlanarProjectionManip: int = 207
    kPlanarTrimSrf: int = 83
    kPlane: int = 288
    kPlugin: int = 581
    kPluginBlendShape: int = 1121
    kPluginCameraSet: int = 1012
    kPluginClientDevice: int = 1078
    kPluginConstraintNode: int = 1017
    kPluginData: int = 601
    kPluginDeformerNode: int = 615
    kPluginDependNode: int = 459
    kPluginEmitterNode: int = 731
    kPluginFieldNode: int = 730
    kPluginGeometryData: int = 767
    kPluginGeometryFilter: int = 1120
    kPluginHardwareShader: int = 890
    kPluginHwShaderNode: int = 891
    kPluginIkSolver: int = 761
    kPluginImagePlaneNode: int = 1006
    kPluginLocatorNode: int = 460
    kPluginManipContainer: int = 696
    kPluginManipulatorNode: int = 1034
    kPluginMotionPathNode: int = 446
    kPluginObjectSet: int = 924
    kPluginParticleAttributeMapperNode: int = 1010
    kPluginShape: int = 711
    kPluginSkinCluster: int = 1119
    kPluginSpringNode: int = 732
    kPluginThreadedDevice: int = 1079
    kPluginTransformNode: int = 913
    kPlusMinusAverage: int = 461
    kPointArrayData: int = 602
    kPointConstraint: int = 240
    kPointLight: int = 309
    kPointManip: int = 236
    kPointMatrixMult: int = 462
    kPointOnCurveInfo: int = 84
    kPointOnCurveManip: int = 208
    kPointOnLineManip: int = 211
    kPointOnPolyConstraint: int = 1060
    kPointOnSurfaceInfo: int = 85
    kPointOnSurfaceManip: int = 212
    kPoleVectorConstraint: int = 243
    kPolyAppend: int = 403
    kPolyAppendVertex: int = 796
    kPolyArrow: int = 979
    kPolyAutoProj: int = 851
    kPolyAutoProjManip: int = 967
    kPolyAverageVertex: int = 850
    kPolyBevel: int = 401
    kPolyBevel2: int = 1098
    kPolyBevel3: int = 1102
    kPolyBlindData: int = 758
    kPolyBoolOp: int = 617
    kPolyBridgeEdge: int = 995
    kPolyCBoolOp: int = 1099
    kPolyCaddyManip: int = 1111
    kPolyChipOff: int = 404
    kPolyCircularize: int = 1131
    kPolyClean: int = 1124
    kPolyCloseBorder: int = 405
    kPolyCollapseEdge: int = 406
    kPolyCollapseF: int = 407
    kPolyColorDel: int = 741
    kPolyColorMod: int = 740
    kPolyColorPerVertex: int = 735
    kPolyComponentData: int = 985
    kPolyCone: int = 437
    kPolyConnectComponents: int = 1061
    kPolyContourProj: int = 1114
    kPolyCreaseEdge: int = 959
    kPolyCreateFacet: int = 443
    kPolyCreateToolManip: int = 140
    kPolyCreator: int = 435
    kPolyCube: int = 438
    kPolyCut: int = 901
    kPolyCutManip: int = 905
    kPolyCutManipContainer: int = 904
    kPolyCylProj: int = 408
    kPolyCylinder: int = 439
    kPolyDelEdge: int = 409
    kPolyDelFacet: int = 410
    kPolyDelVertex: int = 411
    kPolyDuplicateEdge: int = 973
    kPolyEdgeToCurve: int = 1019
    kPolyEditEdgeFlow: int = 1091
    kPolyExtrudeEdge: int = 793
    kPolyExtrudeFacet: int = 412
    kPolyExtrudeManip: int = 1074
    kPolyExtrudeManipContainer: int = 1075
    kPolyExtrudeVertex: int = 926
    kPolyFlipEdge: int = 792
    kPolyFlipUV: int = 888
    kPolyHelix: int = 986
    kPolyHoleFace: int = 1059
    kPolyLayoutUV: int = 852
    kPolyMapCut: int = 413
    kPolyMapDel: int = 414
    kPolyMapSew: int = 415
    kPolyMapSewMove: int = 853
    kPolyMappingManip: int = 194
    kPolyMergeEdge: int = 416
    kPolyMergeFacet: int = 417
    kPolyMergeUV: int = 910
    kPolyMergeVert: int = 698
    kPolyMesh: int = 440
    kPolyMirror: int = 958
    kPolyMirrorManipContainer: int = 906
    kPolyModifierManip: int = 195
    kPolyModifierManipContainer: int = 1112
    kPolyMoveEdge: int = 418
    kPolyMoveFacet: int = 419
    kPolyMoveFacetUV: int = 420
    kPolyMoveUV: int = 421
    kPolyMoveUVManip: int = 193
    kPolyMoveVertex: int = 422
    kPolyMoveVertexManip: int = 196
    kPolyMoveVertexUV: int = 423
    kPolyNormal: int = 424
    kPolyNormalPerVertex: int = 759
    kPolyNormalizeUV: int = 887
    kPolyPassThru: int = 1122
    kPolyPinUV: int = 960
    kPolyPipe: int = 982
    kPolyPlanProj: int = 425
    kPolyPlatonicSolid: int = 981
    kPolyPoke: int = 902
    kPolyPokeManip: int = 907
    kPolyPrimitive: int = 436
    kPolyPrimitiveMisc: int = 980
    kPolyPrism: int = 968
    kPolyProj: int = 426
    kPolyProjectCurve: int = 1072
    kPolyProjectionManip: int = 174
    kPolyPyramid: int = 969
    kPolyQuad: int = 427
    kPolyReduce: int = 770
    kPolyRemesh: int = 1113
    kPolySelectEditFeedbackManip: int = 1042
    kPolySeparate: int = 463
    kPolySewEdge: int = 697
    kPolySmooth: int = 428
    kPolySmoothFacet: int = 699
    kPolySmoothProxy: int = 944
    kPolySoftEdge: int = 429
    kPolySphProj: int = 430
    kPolySphere: int = 441
    kPolySpinEdge: int = 1058
    kPolySplit: int = 431
    kPolySplitEdge: int = 815
    kPolySplitRing: int = 970
    kPolySplitToolManip: int = 141
    kPolySplitVert: int = 810
    kPolyStraightenUVBorder: int = 911
    kPolySubdEdge: int = 432
    kPolySubdFacet: int = 433
    kPolyToSubdiv: int = 685
    kPolyToolFeedbackManip: int = 1041
    kPolyToolFeedbackShape: int = 312
    kPolyTorus: int = 442
    kPolyTransfer: int = 849
    kPolyTriangulate: int = 434
    kPolyTweak: int = 402
    kPolyTweakUV: int = 709
    kPolyUVRectangle: int = 1070
    kPolyUnite: int = 444
    kPolyVertexNormalManip: int = 197
    kPolyWedgeFace: int = 903
    kPoseInterpolatorManager: int = 1127
    kPositionMarker: int = 285
    kPostProcessList: int = 464
    kPrecompExport: int = 788
    kPrimitive: int = 86
    kPrimitiveFalloff: int = 1140
    kProjectCurve: int = 87
    kProjectTangent: int = 88
    kProjectTangentManip: int = 177
    kProjection: int = 465
    kProjectionManip: int = 173
    kProjectionMultiManip: int = 176
    kProjectionUVManip: int = 175
    kPropModManip: int = 178
    kPropMoveTriadManip: int = 138
    kProximityFalloff: int = 1145
    kProximityPin: int = 991
    kProximityWrap: int = 354
    kProxy: int = 108
    kProxyManager: int = 966
    kPsdFileTexture: int = 948
    kQuadPtOnLineManip: int = 179
    kQuadShadingSwitch: int = 925
    kRBFsurface: int = 89
    kRPsolver: int = 367
    kRadial: int = 261
    kRadius: int = 274
    kRamp: int = 504
    kRampBackground: int = 26
    kRampShader: int = 896
    kRbfSrfManip: int = 180
    kReForm: int = 1129
    kRebuildCurve: int = 90
    kRebuildSurface: int = 91
    kRecord: int = 466
    kReference: int = 755
    kReflect: int = 372
    kRemapColor: int = 938
    kRemapHsv: int = 939
    kRemapValue: int = 937
    kRenderBox: int = 868
    kRenderCone: int = 97
    kRenderGlobals: int = 523
    kRenderGlobalsList: int = 524
    kRenderLayer: int = 785
    kRenderLayerManager: int = 786
    kRenderPass: int = 783
    kRenderPassSet: int = 784
    kRenderQuality: int = 525
    kRenderRect: int = 277
    kRenderSetup: int = 522
    kRenderSphere: int = 298
    kRenderTarget: int = 789
    kRenderUtilityList: int = 467
    kRenderedImageSource: int = 790
    kRenderingList: int = 1073
    kReorderUVSet: int = 1133
    kResolution: int = 526
    kResultCurve: int = 16
    kResultCurveTimeToAngular: int = 17
    kResultCurveTimeToDistance: int = 18
    kResultCurveTimeToTime: int = 19
    kResultCurveTimeToUnitless: int = 20
    kReverse: int = 468
    kReverseCrvManip: int = 182
    kReverseCurve: int = 92
    kReverseCurveManip: int = 181
    kReverseSurface: int = 93
    kReverseSurfaceManip: int = 183
    kRevolve: int = 94
    kRevolveManip: int = 184
    kRevolvedPrimitive: int = 95
    kRevolvedPrimitiveManip: int = 185
    kRgbToHsv: int = 469
    kRigid: int = 314
    kRigidConstraint: int = 313
    kRigidDeform: int = 341
    kRigidSolver: int = 470
    kRock: int = 514
    kRotateBoxManip: int = 214
    kRotateLimitsManip: int = 217
    kRotateManip: int = 215
    kRotateUVManip2D: int = 707
    kRoundConstantRadius: int = 645
    kRoundConstantRadiusManip: int = 648
    kRoundRadiusCrvManip: int = 647
    kRoundRadiusManip: int = 646
    kSCsolver: int = 366
    kSPbirailSrf: int = 52
    kSamplerInfo: int = 478
    kScaleConstraint: int = 244
    kScaleLimitsManip: int = 218
    kScaleManip: int = 219
    kScalePointManip: int = 831
    kScaleUVManip2D: int = 708
    kScalingBoxManip: int = 220
    kScreenAlignedCircleManip: int = 127
    kScript: int = 639
    kScriptManip: int = 221
    kSculpt: int = 342
    kSectionManip: int = 818
    kSelectionItem: int = 561
    kSelectionList: int = 608
    kSelectionListData: int = 675
    kSelectionListOperator: int = 683
    kSequenceManager: int = 1049
    kSequencer: int = 1050
    kSet: int = 471
    kSetGroupComponent: int = 559
    kSetRange: int = 474
    kSfRevolveManip: int = 841
    kShaderGlow: int = 475
    kShaderList: int = 476
    kShadingEngine: int = 320
    kShadingMap: int = 477
    kShape: int = 248
    kShapeEditorManager: int = 1125
    kShapeFragment: int = 479
    kShot: int = 1051
    kShrinkWrapFilter: int = 1096
    kSimpleVolumeShader: int = 480
    kSingleIndexedComponent: int = 713
    kSingleShadingSwitch: int = 618
    kSketchPlane: int = 289
    kSkin: int = 100
    kSkinBinding: int = 1062
    kSkinClusterFilter: int = 686
    kSkinShader: int = 673
    kSl60: int = 481
    kSmear: int = 917
    kSmoothCurve: int = 700
    kSmoothTangentSrf: int = 782
    kSnapUVManip2D: int = 1093
    kSnapshot: int = 482
    kSnapshotPath: int = 923
    kSnapshotShape: int = 859
    kSnow: int = 515
    kSoftMod: int = 252
    kSoftModFilter: int = 348
    kSoftModManip: int = 637
    kSolidFractal: int = 516
    kSolidify: int = 353
    kSphere: int = 99
    kSphereData: int = 604
    kSphericalProjectionManip: int = 222
    kSplineSolver: int = 368
    kSpotCylinderManip: int = 187
    kSpotLight: int = 310
    kSpotManip: int = 186
    kSpring: int = 315
    kSprite: int = 292
    kSquareSrf: int = 717
    kSquareSrfManip: int = 718
    kStandardSurface: int = 377
    kStateManip: int = 145
    kStencil: int = 505
    kStereoCameraMaster: int = 1048
    kStitchAsNurbsShell: int = 691
    kStitchSrf: int = 101
    kStitchSrfManip: int = 694
    kStoryBoard: int = 483
    kStringArrayData: int = 606
    kStringData: int = 605
    kStringShadingSwitch: int = 918
    kStroke: int = 764
    kStrokeGlobals: int = 766
    kStucco: int = 517
    kStudioClearCoat: int = 919
    kStyleCurve: int = 900
    kSubCurve: int = 102
    kSubSurface: int = 781
    kSubVertexComponent: int = 557
    kSubdAddTopology: int = 892
    kSubdAutoProj: int = 877
    kSubdBlindData: int = 802
    kSubdBoolean: int = 827
    kSubdCleanTopology: int = 893
    kSubdCloseBorder: int = 864
    kSubdDelFace: int = 858
    kSubdExtrudeFace: int = 839
    kSubdHierBlind: int = 801
    kSubdLayoutUV: int = 873
    kSubdMapCut: int = 872
    kSubdMapSewMove: int = 874
    kSubdMappingManip: int = 885
    kSubdMergeVert: int = 865
    kSubdModifier: int = 854
    kSubdModifyEdge: int = 828
    kSubdMoveEdge: int = 856
    kSubdMoveFace: int = 857
    kSubdMoveVertex: int = 855
    kSubdPlanProj: int = 882
    kSubdProjectionManip: int = 884
    kSubdSplitFace: int = 869
    kSubdSubdivideFace: int = 878
    kSubdTweak: int = 883
    kSubdTweakUV: int = 871
    kSubdiv: int = 684
    kSubdivCVComponent: int = 702
    kSubdivCollapse: int = 805
    kSubdivCompId: int = 798
    kSubdivData: int = 811
    kSubdivEdgeComponent: int = 703
    kSubdivFaceComponent: int = 704
    kSubdivGeom: int = 812
    kSubdivMapComponent: int = 860
    kSubdivReverseFaces: int = 816
    kSubdivSurfaceVarGroup: int = 840
    kSubdivToNurbs: int = 820
    kSubdivToPoly: int = 719
    kSubsetFalloff: int = 1146
    kSummaryObject: int = 484
    kSuper: int = 485
    kSurface: int = 293
    kSurfaceCVComponent: int = 542
    kSurfaceEPComponent: int = 543
    kSurfaceEdManip: int = 777
    kSurfaceFaceComponent: int = 778
    kSurfaceInfo: int = 103
    kSurfaceKnotComponent: int = 544
    kSurfaceLuminance: int = 487
    kSurfaceRangeComponent: int = 547
    kSurfaceShader: int = 488
    kSurfaceVarGroup: int = 118
    kSymmetryConstraint: int = 241
    kSymmetryLocator: int = 833
    kSymmetryMapCurve: int = 835
    kSymmetryMapVector: int = 834
    kTangentConstraint: int = 245
    kTension: int = 351
    kTexLattice: int = 200
    kTexLatticeDeformManip: int = 199
    kTexSmoothManip: int = 201
    kTexSmudgeUVManip: int = 198
    kTextButtonManip: int = 651
    kTextCurves: int = 104
    kTextManip: int = 928
    kTexture2d: int = 496
    kTexture3d: int = 507
    kTextureBakeSet: int = 472
    kTextureDeformer: int = 343
    kTextureDeformerHandle: int = 344
    kTextureEnv: int = 490
    kTextureList: int = 489
    kTextureManip3D: int = 223
    kThreadedDevice: int = 1076
    kThreePointArcManip: int = 649
    kTime: int = 520
    kTimeAttribute: int = 571
    kTimeEditor: int = 1106
    kTimeEditorAnimSource: int = 1109
    kTimeEditorClip: int = 1105
    kTimeEditorClipBase: int = 1103
    kTimeEditorClipEvaluator: int = 1104
    kTimeEditorInterpolator: int = 1108
    kTimeEditorTracks: int = 1107
    kTimeFunction: int = 941
    kTimeToUnitConversion: int = 521
    kTimeWarp: int = 1080
    kToggleManip: int = 224
    kToggleOnLineManip: int = 144
    kToolContext: int = 1094
    kToonLineAttributes: int = 972
    kTorus: int = 616
    kTowPointManip: int = 139
    kTowPointOnCurveManip: int = 209
    kTowPointOnSurfaceManip: int = 776
    kTrackInfoManager: int = 1123
    kTransferAttributes: int = 992
    kTransferFalloff: int = 1143
    kTransform: int = 110
    kTransformBoxManip: int = 832
    kTransformGeometry: int = 609
    kTranslateBoxManip: int = 225
    kTranslateLimitsManip: int = 226
    kTranslateManip: int = 227
    kTranslateManip2D: int = 206
    kTranslateUVManip: int = 213
    kTranslateUVManip2D: int = 706
    kTriadManip: int = 237
    kTrim: int = 105
    kTrimLocator: int = 287
    kTrimManip: int = 228
    kTrimWithBoundaries: int = 933
    kTriplanarProjectionManip: int = 188
    kTripleIndexedComponent: int = 715
    kTripleShadingSwitch: int = 620
    kTrsInsertManip: int = 203
    kTrsManip: int = 189
    kTrsTransManip: int = 202
    kTrsXformManip: int = 204
    kTurbulence: int = 262
    kTweak: int = 345
    kTwoPointArcManip: int = 650
    kTxSl: int = 518
    kTypedAttribute: int = 574
    kUInt64ArrayData: int = 813
    kUVManip2D: int = 705
    kUVPin: int = 990
    kUfeProxyTransform: int = 1134
    kUint64SingleIndexedComponent: int = 1040
    kUintArrayData: int = 586
    kUnderWorld: int = 109
    kUniform: int = 263
    kUniformFalloff: int = 1142
    kUnitAttribute: int = 573
    kUnitConversion: int = 529
    kUnitToTimeConversion: int = 530
    kUnknown: int = 532
    kUnknownDag: int = 316
    kUnknownTransform: int = 246
    kUntrim: int = 106
    kUnused1: int = 843
    kUnused2: int = 844
    kUnused3: int = 845
    kUnused4: int = 846
    kUnused5: int = 847
    kUnused6: int = 848
    kUseBackground: int = 531
    kUvChooser: int = 797
    kVectorArrayData: int = 607
    kVectorProduct: int = 533
    kVertexBakeSet: int = 473
    kVertexWeightSet: int = 1064
    kViewColorManager: int = 671
    kViewManip: int = 929
    kVolumeAxis: int = 799
    kVolumeBindManip: int = 1063
    kVolumeFog: int = 870
    kVolumeLight: int = 897
    kVolumeNoise: int = 876
    kVolumeShader: int = 534
    kVortex: int = 264
    kWater: int = 506
    kWeightFunctionData: int = 1147
    kWeightGeometryFilt: int = 346
    kWire: int = 355
    kWood: int = 519
    kWorld: int = 247
    kWrapFilter: int = 744
    kWriteToColorBuffer: int = 1044
    kWriteToDepthBuffer: int = 1046
    kWriteToFrameBuffer: int = 1043
    kWriteToLabelBuffer: int = 1047
    kWriteToVectorBuffer: int = 1045
    kXformManip: int = 930
    kXsectionSubdivEdit: int = 819
    nodeType: property = <property object at 0x00000218A15012C0>
    thisown: property = <property object at 0x00000218AB0B6400>

class MFnAmbientLight(MFnLight):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def ambientShade(self, *args: Any, **kwargs: Any) -> Any: ...
    def castSoftShadows(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def setAmbientShade(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCastSoftShadows(self, *args: Any, **kwargs: Any) -> Any: ...
    def setShadowRadius(self, *args: Any, **kwargs: Any) -> Any: ...
    def shadowRadius(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0E6720>

def MFnAmbientLight_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnAnisotropyShader(MFnDependencyNode):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def anisotropicReflectivity(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def correlationX(self, *args: Any, **kwargs: Any) -> Any: ...
    def correlationY(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def refractiveIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateAngle(self, *args: Any, **kwargs: Any) -> Any: ...
    def roughness(self, *args: Any, **kwargs: Any) -> Any: ...
    def setAnisotropicReflectivity(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCorrelationX(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCorrelationY(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRefractiveIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotateAngle(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRoughness(self, *args: Any, **kwargs: Any) -> Any: ...
    def setTangentUCamera(self, *args: Any, **kwargs: Any) -> Any: ...
    def setTangentVCamera(self, *args: Any, **kwargs: Any) -> Any: ...
    def tangentUCamera(self, *args: Any, **kwargs: Any) -> Any: ...
    def tangentVCamera(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0E6A90>

def MFnAnisotropyShader_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnAreaLight(MFnNonExtendedLight):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0E79A0>

def MFnAreaLight_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnArrayAttrsData(MFnData):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def checkArrayExist(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self, *args: Any, **kwargs: Any) -> Any: ...
    def count(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def doubleArray(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDoubleData(self, *args: Any, **kwargs: Any) -> Any: ...
    def getIntData(self, *args: Any, **kwargs: Any) -> Any: ...
    def getStringData(self, *args: Any, **kwargs: Any) -> Any: ...
    def getVectorData(self, *args: Any, **kwargs: Any) -> Any: ...
    def intArray(self, *args: Any, **kwargs: Any) -> Any: ...
    def list(self, *args: Any, **kwargs: Any) -> Any: ...
    def stringArray(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0E7C20>
    def vectorArray(self, *args: Any, **kwargs: Any) -> Any: ...

def MFnArrayAttrsData_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnAssembly(MFnDagNode):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def activate(self, *args: Any, **kwargs: Any) -> Any: ...
    def activateNonRecursive(self, *args: Any, **kwargs: Any) -> Any: ...
    def canActivate(self, *args: Any, **kwargs: Any) -> Any: ...
    def canRepApplyEdits(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def createRepresentation(self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteAllRepresentations(self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteRepresentation(self, *args: Any, **kwargs: Any) -> Any: ...
    def getAbsoluteRepNamespace(self, *args: Any, **kwargs: Any) -> Any: ...
    def getActive(self, *args: Any, **kwargs: Any) -> Any: ...
    def getInitialRep(self, *args: Any, **kwargs: Any) -> Any: ...
    def getParentAssembly(self, *args: Any, **kwargs: Any) -> Any: ...
    def getRepLabel(self, *args: Any, **kwargs: Any) -> Any: ...
    def getRepNamespace(self, *args: Any, **kwargs: Any) -> Any: ...
    def getRepType(self, *args: Any, **kwargs: Any) -> Any: ...
    def getRepresentations(self, *args: Any, **kwargs: Any) -> Any: ...
    def getSubAssemblies(self, *args: Any, **kwargs: Any) -> Any: ...
    def getTopLevelAssemblies(self, *args: Any, **kwargs: Any) -> Any: ...
    def handlesAddEdits(self, *args: Any, **kwargs: Any) -> Any: ...
    def importFile(self, *args: Any, **kwargs: Any) -> Any: ...
    def isActive(self, *args: Any, **kwargs: Any) -> Any: ...
    def isTopLevel(self, *args: Any, **kwargs: Any) -> Any: ...
    def postLoad(self, *args: Any, **kwargs: Any) -> Any: ...
    def repTypes(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRepLabel(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRepName(self, *args: Any, **kwargs: Any) -> Any: ...
    def supportsEdits(self, *args: Any, **kwargs: Any) -> Any: ...
    def supportsMemberChanges(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0E2310>

def MFnAssembly_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnAssembly_getTopLevelAssemblies(*args: Any, **kwargs: Any) -> Any: ...
class MFnAttribute(MFnBase):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def accepts(self, *args: Any, **kwargs: Any) -> Any: ...
    def acceptsAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def addToCategory(self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAppearance(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def disconnectBehavior(self, *args: Any, **kwargs: Any) -> Any: ...
    def getAddAttrCmd(self, *args: Any, **kwargs: Any) -> Any: ...
    def getCategories(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasCategory(self, *args: Any, **kwargs: Any) -> Any: ...
    def indexMatters(self, *args: Any, **kwargs: Any) -> Any: ...
    def internal(self, *args: Any, **kwargs: Any) -> Any: ...
    def isAffectsWorldSpace(self, *args: Any, **kwargs: Any) -> Any: ...
    def isArray(self, *args: Any, **kwargs: Any) -> Any: ...
    def isCached(self, *args: Any, **kwargs: Any) -> Any: ...
    def isChannelBoxFlagSet(self, *args: Any, **kwargs: Any) -> Any: ...
    def isConnectable(self, *args: Any, **kwargs: Any) -> Any: ...
    def isDynamic(self, *args: Any, **kwargs: Any) -> Any: ...
    def isExtension(self, *args: Any, **kwargs: Any) -> Any: ...
    def isHidden(self, *args: Any, **kwargs: Any) -> Any: ...
    def isIndeterminant(self, *args: Any, **kwargs: Any) -> Any: ...
    def isKeyable(self, *args: Any, **kwargs: Any) -> Any: ...
    def isProxyAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def isReadable(self, *args: Any, **kwargs: Any) -> Any: ...
    def isRenderSource(self, *args: Any, **kwargs: Any) -> Any: ...
    def isStorable(self, *args: Any, **kwargs: Any) -> Any: ...
    def isUsedAsColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def isUsedAsFilename(self, *args: Any, **kwargs: Any) -> Any: ...
    def isWorldSpace(self, *args: Any, **kwargs: Any) -> Any: ...
    def isWritable(self, *args: Any, **kwargs: Any) -> Any: ...
    kDelete: int = 0
    kNothing: int = 2
    kReset: int = 1
    def name(self, *args: Any, **kwargs: Any) -> Any: ...
    def parent(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeFromCategory(self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAppearance(self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsWorldSpace(self, *args: Any, **kwargs: Any) -> Any: ...
    def setArray(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCached(self, *args: Any, **kwargs: Any) -> Any: ...
    def setChannelBox(self, *args: Any, **kwargs: Any) -> Any: ...
    def setConnectable(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDisconnectBehavior(self, *args: Any, **kwargs: Any) -> Any: ...
    def setHidden(self, *args: Any, **kwargs: Any) -> Any: ...
    def setIndeterminant(self, *args: Any, **kwargs: Any) -> Any: ...
    def setIndexMatters(self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternal(self, *args: Any, **kwargs: Any) -> Any: ...
    def setKeyable(self, *args: Any, **kwargs: Any) -> Any: ...
    def setNiceNameOverride(self, *args: Any, **kwargs: Any) -> Any: ...
    def setProxyAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def setReadable(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRenderSource(self, *args: Any, **kwargs: Any) -> Any: ...
    def setStorable(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUsedAsColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUsedAsFilename(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUsesArrayDataBuilder(self, *args: Any, **kwargs: Any) -> Any: ...
    def setWorldSpace(self, *args: Any, **kwargs: Any) -> Any: ...
    def setWritable(self, *args: Any, **kwargs: Any) -> Any: ...
    def shortName(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0EB1D0>
    def usesArrayDataBuilder(self, *args: Any, **kwargs: Any) -> Any: ...

def MFnAttribute_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnBase(object):
    """
    """
    def __init__(self, *args, **kwargs) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0DA9F0>
    def type(self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self, *args: Any, **kwargs: Any) -> Any: ...

def MFnBase_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnBase_isValid(*args: Any, **kwargs: Any) -> Any: ...
def MFnBase_typeString(*args: Any, **kwargs: Any) -> Any: ...
class MFnBlinnShader(MFnReflectShader):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def eccentricity(self, *args: Any, **kwargs: Any) -> Any: ...
    def setEccentricity(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSpecularRollOff(self, *args: Any, **kwargs: Any) -> Any: ...
    def specularRollOff(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0EE130>

def MFnBlinnShader_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnCamera(MFnDagNode):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def aspectRatio(self, *args: Any, **kwargs: Any) -> Any: ...
    def cameraScale(self, *args: Any, **kwargs: Any) -> Any: ...
    def centerOfInterest(self, *args: Any, **kwargs: Any) -> Any: ...
    def centerOfInterestPoint(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def computeDepthOfField(self, *args: Any, **kwargs: Any) -> Any: ...
    def copyViewFrom(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def eyePoint(self, *args: Any, **kwargs: Any) -> Any: ...
    def fStop(self, *args: Any, **kwargs: Any) -> Any: ...
    def farClippingPlane(self, *args: Any, **kwargs: Any) -> Any: ...
    def farFocusDistance(self, *args: Any, **kwargs: Any) -> Any: ...
    def filmFit(self, *args: Any, **kwargs: Any) -> Any: ...
    def filmFitOffset(self, *args: Any, **kwargs: Any) -> Any: ...
    def filmRollOrder(self, *args: Any, **kwargs: Any) -> Any: ...
    def filmRollValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def filmTranslateH(self, *args: Any, **kwargs: Any) -> Any: ...
    def filmTranslateV(self, *args: Any, **kwargs: Any) -> Any: ...
    def focalLength(self, *args: Any, **kwargs: Any) -> Any: ...
    def focusDistance(self, *args: Any, **kwargs: Any) -> Any: ...
    def getAspectRatioLimits(self, *args: Any, **kwargs: Any) -> Any: ...
    def getFilmApertureLimits(self, *args: Any, **kwargs: Any) -> Any: ...
    def getFilmFrustum(self, *args: Any, **kwargs: Any) -> Any: ...
    def getFocalLengthLimits(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPortFieldOfView(self, *args: Any, **kwargs: Any) -> Any: ...
    def getRenderingFrustum(self, *args: Any, **kwargs: Any) -> Any: ...
    def getViewParameters(self, *args: Any, **kwargs: Any) -> Any: ...
    def getViewingFrustum(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasSamePerspective(self, *args: Any, **kwargs: Any) -> Any: ...
    def horizontalFieldOfView(self, *args: Any, **kwargs: Any) -> Any: ...
    def horizontalFilmAperture(self, *args: Any, **kwargs: Any) -> Any: ...
    def horizontalFilmOffset(self, *args: Any, **kwargs: Any) -> Any: ...
    def horizontalPan(self, *args: Any, **kwargs: Any) -> Any: ...
    def horizontalRollPivot(self, *args: Any, **kwargs: Any) -> Any: ...
    def horizontalShake(self, *args: Any, **kwargs: Any) -> Any: ...
    def isClippingPlanes(self, *args: Any, **kwargs: Any) -> Any: ...
    def isDepthOfField(self, *args: Any, **kwargs: Any) -> Any: ...
    def isDisplayFilmGate(self, *args: Any, **kwargs: Any) -> Any: ...
    def isDisplayGateMask(self, *args: Any, **kwargs: Any) -> Any: ...
    def isMotionBlur(self, *args: Any, **kwargs: Any) -> Any: ...
    def isOrtho(self, *args: Any, **kwargs: Any) -> Any: ...
    def isVerticalLock(self, *args: Any, **kwargs: Any) -> Any: ...
    def lensSqueezeRatio(self, *args: Any, **kwargs: Any) -> Any: ...
    def nearClippingPlane(self, *args: Any, **kwargs: Any) -> Any: ...
    def nearFocusDistance(self, *args: Any, **kwargs: Any) -> Any: ...
    def orthoWidth(self, *args: Any, **kwargs: Any) -> Any: ...
    def overscan(self, *args: Any, **kwargs: Any) -> Any: ...
    def panZoomEnabled(self, *args: Any, **kwargs: Any) -> Any: ...
    def postProjectionMatrix(self, *args: Any, **kwargs: Any) -> Any: ...
    def postScale(self, *args: Any, **kwargs: Any) -> Any: ...
    def preScale(self, *args: Any, **kwargs: Any) -> Any: ...
    def projectionMatrix(self, *args: Any, **kwargs: Any) -> Any: ...
    def renderPanZoom(self, *args: Any, **kwargs: Any) -> Any: ...
    def rightDirection(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    def setAspectRatio(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCameraScale(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCenterOfInterest(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCenterOfInterestPoint(self, *args: Any, **kwargs: Any) -> Any: ...
    def setClippingPlanes(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDepthOfField(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDisplayFilmGate(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDisplayGateMask(self, *args: Any, **kwargs: Any) -> Any: ...
    def setEyePoint(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFStop(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFarClippingPlane(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFarFocusDistance(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFilmFit(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFilmFitOffset(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFilmRollOrder(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFilmRollValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFilmTranslateH(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFilmTranslateV(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFocalLength(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFocusDistance(self, *args: Any, **kwargs: Any) -> Any: ...
    def setHorizontalFieldOfView(self, *args: Any, **kwargs: Any) -> Any: ...
    def setHorizontalFilmAperture(self, *args: Any, **kwargs: Any) -> Any: ...
    def setHorizontalFilmOffset(self, *args: Any, **kwargs: Any) -> Any: ...
    def setHorizontalPan(self, *args: Any, **kwargs: Any) -> Any: ...
    def setHorizontalRollPivot(self, *args: Any, **kwargs: Any) -> Any: ...
    def setHorizontalShake(self, *args: Any, **kwargs: Any) -> Any: ...
    def setIsOrtho(self, *args: Any, **kwargs: Any) -> Any: ...
    def setLensSqueezeRatio(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMotionBlur(self, *args: Any, **kwargs: Any) -> Any: ...
    def setNearClippingPlane(self, *args: Any, **kwargs: Any) -> Any: ...
    def setNearFarClippingPlanes(self, *args: Any, **kwargs: Any) -> Any: ...
    def setNearFocusDistance(self, *args: Any, **kwargs: Any) -> Any: ...
    def setOrthoWidth(self, *args: Any, **kwargs: Any) -> Any: ...
    def setOverscan(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPanZoomEnabled(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPostScale(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPreScale(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRenderPanZoom(self, *args: Any, **kwargs: Any) -> Any: ...
    def setShakeEnabled(self, *args: Any, **kwargs: Any) -> Any: ...
    def setShakeOverscan(self, *args: Any, **kwargs: Any) -> Any: ...
    def setShakeOverscanEnabled(self, *args: Any, **kwargs: Any) -> Any: ...
    def setShutterAngle(self, *args: Any, **kwargs: Any) -> Any: ...
    def setStereoHIT(self, *args: Any, **kwargs: Any) -> Any: ...
    def setStereoHITEnabled(self, *args: Any, **kwargs: Any) -> Any: ...
    def setTumblePivot(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUsePivotAsLocalSpace(self, *args: Any, **kwargs: Any) -> Any: ...
    def setVerticalFieldOfView(self, *args: Any, **kwargs: Any) -> Any: ...
    def setVerticalFilmAperture(self, *args: Any, **kwargs: Any) -> Any: ...
    def setVerticalFilmOffset(self, *args: Any, **kwargs: Any) -> Any: ...
    def setVerticalLock(self, *args: Any, **kwargs: Any) -> Any: ...
    def setVerticalPan(self, *args: Any, **kwargs: Any) -> Any: ...
    def setVerticalRollPivot(self, *args: Any, **kwargs: Any) -> Any: ...
    def setVerticalShake(self, *args: Any, **kwargs: Any) -> Any: ...
    def setZoom(self, *args: Any, **kwargs: Any) -> Any: ...
    def shakeEnabled(self, *args: Any, **kwargs: Any) -> Any: ...
    def shakeOverscan(self, *args: Any, **kwargs: Any) -> Any: ...
    def shakeOverscanEnabled(self, *args: Any, **kwargs: Any) -> Any: ...
    def shutterAngle(self, *args: Any, **kwargs: Any) -> Any: ...
    def stereoHIT(self, *args: Any, **kwargs: Any) -> Any: ...
    def stereoHITEnabled(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0EE950>
    def tumblePivot(self, *args: Any, **kwargs: Any) -> Any: ...
    def unnormalizedFarClippingPlane(self, *args: Any, **kwargs: Any) -> Any: ...
    def unnormalizedNearClippingPlane(self, *args: Any, **kwargs: Any) -> Any: ...
    def upDirection(self, *args: Any, **kwargs: Any) -> Any: ...
    def usePivotAsLocalSpace(self, *args: Any, **kwargs: Any) -> Any: ...
    def verticalFieldOfView(self, *args: Any, **kwargs: Any) -> Any: ...
    def verticalFilmAperture(self, *args: Any, **kwargs: Any) -> Any: ...
    def verticalFilmOffset(self, *args: Any, **kwargs: Any) -> Any: ...
    def verticalPan(self, *args: Any, **kwargs: Any) -> Any: ...
    def verticalRollPivot(self, *args: Any, **kwargs: Any) -> Any: ...
    def verticalShake(self, *args: Any, **kwargs: Any) -> Any: ...
    def viewDirection(self, *args: Any, **kwargs: Any) -> Any: ...
    def zoom(self, *args: Any, **kwargs: Any) -> Any: ...

class MFnCameraSet(MFnDependencyNode):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def appendLayer(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteLayer(self, *args: Any, **kwargs: Any) -> Any: ...
    def getLayerCamera(self, *args: Any, **kwargs: Any) -> Any: ...
    def getLayerClearDepthValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def getLayerOrder(self, *args: Any, **kwargs: Any) -> Any: ...
    def getLayerSceneData(self, *args: Any, **kwargs: Any) -> Any: ...
    def getNumLayers(self, *args: Any, **kwargs: Any) -> Any: ...
    def getSortedIndices(self, *args: Any, **kwargs: Any) -> Any: ...
    def insertLayer(self, *args: Any, **kwargs: Any) -> Any: ...
    def isLayerActive(self, *args: Any, **kwargs: Any) -> Any: ...
    def setLayerActive(self, *args: Any, **kwargs: Any) -> Any: ...
    def setLayerCamera(self, *args: Any, **kwargs: Any) -> Any: ...
    def setLayerClearDepthValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def setLayerOrder(self, *args: Any, **kwargs: Any) -> Any: ...
    def setLayerSceneData(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0F4F90>

def MFnCameraSet_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnCamera_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnComponent(MFnBase):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def componentType(self, *args: Any, **kwargs: Any) -> Any: ...
    def elementCount(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasWeights(self, *args: Any, **kwargs: Any) -> Any: ...
    def isComplete(self, *args: Any, **kwargs: Any) -> Any: ...
    def isEmpty(self, *args: Any, **kwargs: Any) -> Any: ...
    def isEqual(self, *args: Any, **kwargs: Any) -> Any: ...
    def setComplete(self, *args: Any, **kwargs: Any) -> Any: ...
    def setWeight(self, *args: Any, **kwargs: Any) -> Any: ...
    def setWeights(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0F4220>
    def weight(self, *args: Any, **kwargs: Any) -> Any: ...

class MFnComponentListData(MFnData):
    """
    """
    def __getitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def add(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def has(self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0F4680>

def MFnComponentListData_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnComponent_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnCompoundAttribute(MFnAttribute):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addChild(self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def getAddAttrCmds(self, *args: Any, **kwargs: Any) -> Any: ...
    def numChildren(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChild(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0F49A0>

def MFnCompoundAttribute_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnContainerNode(MFnDependencyNode):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self, *args: Any, **kwargs: Any) -> Any: ...
    def getCurrentAsMObject(self, *args: Any, **kwargs: Any) -> Any: ...
    def getMembers(self, *args: Any, **kwargs: Any) -> Any: ...
    def getParentContainer(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPublishedNames(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPublishedNodes(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPublishedPlugs(self, *args: Any, **kwargs: Any) -> Any: ...
    def getRootTransform(self, *args: Any, **kwargs: Any) -> Any: ...
    def getSubcontainers(self, *args: Any, **kwargs: Any) -> Any: ...
    def isCurrent(self, *args: Any, **kwargs: Any) -> Any: ...
    def makeCurrent(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0E4A40>

def MFnContainerNode_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnContainerNode_getCurrentAsMObject(*args: Any, **kwargs: Any) -> Any: ...
class MFnDagNode(MFnDependencyNode):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def activeColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def addChild(self, *args: Any, **kwargs: Any) -> Any: ...
    def boundingBox(self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self, *args: Any, **kwargs: Any) -> Any: ...
    def childCount(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def dagPath(self, *args: Any, **kwargs: Any) -> Any: ...
    def dagRoot(self, *args: Any, **kwargs: Any) -> Any: ...
    def dormantColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideEnabled(self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsReference(self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsTemplate(self, *args: Any, **kwargs: Any) -> Any: ...
    def duplicate(self, *args: Any, **kwargs: Any) -> Any: ...
    def fullPathName(self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllPaths(self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedSetsAndMembers(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPath(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasChild(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasParent(self, *args: Any, **kwargs: Any) -> Any: ...
    def hiliteColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def inModel(self, *args: Any, **kwargs: Any) -> Any: ...
    def inUnderWorld(self, *args: Any, **kwargs: Any) -> Any: ...
    def instanceCount(self, *args: Any, **kwargs: Any) -> Any: ...
    def isChildOf(self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanceable(self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanced(self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstancedAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def isIntermediateObject(self, *args: Any, **kwargs: Any) -> Any: ...
    def isParentOf(self, *args: Any, **kwargs: Any) -> Any: ...
    kNextPos: int = 255
    def model(self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorRGB(self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorType(self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupComponent(self, *args: Any, **kwargs: Any) -> Any: ...
    def parent(self, *args: Any, **kwargs: Any) -> Any: ...
    def parentCount(self, *args: Any, **kwargs: Any) -> Any: ...
    def partialPathName(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChild(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChildAt(self, *args: Any, **kwargs: Any) -> Any: ...
    def setInstanceable(self, *args: Any, **kwargs: Any) -> Any: ...
    def setIntermediateObject(self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColorType(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseObjectColor(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0DF1D0>
    def transformationMatrix(self, *args: Any, **kwargs: Any) -> Any: ...
    def usingHiliteColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def usingObjectColor(self, *args: Any, **kwargs: Any) -> Any: ...

def MFnDagNode_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnData(MFnBase):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    kAny: int = 24
    kComponentList: int = 13
    kDoubleArray: int = 7
    kDynArrayAttrs: int = 19
    kDynSweptGeometry: int = 20
    kFalloffFunction: int = 25
    kFloatArray: int = 8
    kIntArray: int = 9
    kInvalid: int = 0
    kLast: int = 26
    kLattice: int = 15
    kMatrix: int = 5
    kMatrixArray: int = 12
    kMesh: int = 14
    kNId: int = 23
    kNObject: int = 22
    kNumeric: int = 1
    kNurbsCurve: int = 16
    kNurbsSurface: int = 17
    kPlugin: int = 2
    kPluginGeometry: int = 3
    kPointArray: int = 10
    kSphere: int = 18
    kString: int = 4
    kStringArray: int = 6
    kSubdSurface: int = 21
    kVectorArray: int = 11
    thisown: property = <property object at 0x00000218AB0E7B30>

def MFnData_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnDependencyNode(MFnBase):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def absoluteName(self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self, *args: Any, **kwargs: Any) -> Any: ...
    def enableDGTiming(self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedByAttributes(self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self, *args: Any, **kwargs: Any) -> Any: ...
    def icon(self, *args: Any, **kwargs: Any) -> Any: ...
    def isDefaultNode(self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self, *args: Any, **kwargs: Any) -> Any: ...
    def isFromReferencedFile(self, *args: Any, **kwargs: Any) -> Any: ...
    def isLocked(self, *args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def isShared(self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self, *args: Any, **kwargs: Any) -> Any: ...
    kExtensionAttr: int = 3
    kInvalidAttr: int = 4
    kLocalDynamicAttr: int = 1
    kNormalAttr: int = 2
    kTimerInvalidState: int = 3
    kTimerMetric_callback: int = 0
    kTimerMetric_callbackNotViaAPI: int = 6
    kTimerMetric_callbackViaAPI: int = 5
    kTimerMetric_compute: int = 1
    kTimerMetric_computeDuringCallback: int = 7
    kTimerMetric_computeNotDuringCallback: int = 8
    kTimerMetric_dirty: int = 2
    kTimerMetric_draw: int = 3
    kTimerMetric_fetch: int = 4
    kTimerMetrics: int = 9
    kTimerOff: int = 0
    kTimerOn: int = 1
    kTimerType_count: int = 2
    kTimerType_inclusive: int = 1
    kTimerType_self: int = 0
    kTimerTypes: int = 3
    kTimerUninitialized: int = 2
    def name(self, *args: Any, **kwargs: Any) -> Any: ...
    def parentNamespace(self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginName(self, *args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self, *args: Any, **kwargs: Any) -> Any: ...
    def setIcon(self, *args: Any, **kwargs: Any) -> Any: ...
    def setLocked(self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0DAD10>
    def typeId(self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self, *args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self, *args: Any, **kwargs: Any) -> Any: ...

def MFnDependencyNode_allocateFlag(*args: Any, **kwargs: Any) -> Any: ...
def MFnDependencyNode_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnDependencyNode_classification(*args: Any, **kwargs: Any) -> Any: ...
def MFnDependencyNode_deallocateAllFlags(*args: Any, **kwargs: Any) -> Any: ...
def MFnDependencyNode_deallocateFlag(*args: Any, **kwargs: Any) -> Any: ...
def MFnDependencyNode_enableDGTiming(*args: Any, **kwargs: Any) -> Any: ...
class MFnDirectionalLight(MFnNonExtendedLight):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def setShadowAngle(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseLightPosition(self, *args: Any, **kwargs: Any) -> Any: ...
    def shadowAngle(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0F4CC0>
    def useLightPosition(self, *args: Any, **kwargs: Any) -> Any: ...

def MFnDirectionalLight_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnDoubleArrayData(MFnData):
    """
    """
    def __getitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def array(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def copyTo(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0F7680>

def MFnDoubleArrayData_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnDoubleIndexedComponent(MFnComponent):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addElement(self, *args: Any, **kwargs: Any) -> Any: ...
    def addElements(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def getCompleteData(self, *args: Any, **kwargs: Any) -> Any: ...
    def getElement(self, *args: Any, **kwargs: Any) -> Any: ...
    def getElements(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCompleteData(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0F79A0>

def MFnDoubleIndexedComponent_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnEnumAttribute(MFnAttribute):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addField(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def defaultValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def fieldIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def fieldName(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDefault(self, *args: Any, **kwargs: Any) -> Any: ...
    def getMax(self, *args: Any, **kwargs: Any) -> Any: ...
    def getMin(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDefault(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0F7CC0>

def MFnEnumAttribute_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnExpression(MFnDependencyNode):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def evaluate(self, *args: Any, **kwargs: Any) -> Any: ...
    def expression(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDefaultObject(self, *args: Any, **kwargs: Any) -> Any: ...
    def isAnimated(self, *args: Any, **kwargs: Any) -> Any: ...
    def setAnimated(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDefaultObject(self, *args: Any, **kwargs: Any) -> Any: ...
    def setExpression(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUnitConversion(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0F9130>
    def unitConversion(self, *args: Any, **kwargs: Any) -> Any: ...

def MFnExpression_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnFloatArrayData(MFnData):
    """
    """
    def __getitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def array(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def copyTo(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0F95E0>

def MFnFloatArrayData_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnGenericAttribute(MFnAttribute):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addAccept(self, *args: Any, **kwargs: Any) -> Any: ...
    def addDataAccept(self, *args: Any, **kwargs: Any) -> Any: ...
    def addNumericDataAccept(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAccept(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeDataAccept(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeNumericDataAccept(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0F9900>

def MFnGenericAttribute_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnGeometryData(MFnData):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addComponentTag(self, *args: Any, **kwargs: Any) -> Any: ...
    def addObjectGroup(self, *args: Any, **kwargs: Any) -> Any: ...
    def addObjectGroupComponent(self, *args: Any, **kwargs: Any) -> Any: ...
    def changeObjectGroupId(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def componentTagCategory(self, *args: Any, **kwargs: Any) -> Any: ...
    def componentTagContents(self, *args: Any, **kwargs: Any) -> Any: ...
    def componentTagExpressionSubsetState(self, *args: Any, **kwargs: Any) -> Any: ...
    def componentTagType(self, *args: Any, **kwargs: Any) -> Any: ...
    def componentTags(self, *args: Any, **kwargs: Any) -> Any: ...
    def copyObjectGroups(self, *args: Any, **kwargs: Any) -> Any: ...
    def getMatrix(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasComponentTag(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObjectGroup(self, *args: Any, **kwargs: Any) -> Any: ...
    def matrixIsIdentity(self, *args: Any, **kwargs: Any) -> Any: ...
    def matrixIsNotIdentity(self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroup(self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupComponent(self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupCount(self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupSubsetState(self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupType(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeComponentTag(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeObjectGroup(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeObjectGroupComponent(self, *args: Any, **kwargs: Any) -> Any: ...
    def renameComponentTag(self, *args: Any, **kwargs: Any) -> Any: ...
    def resolveComponentTagExpression(self, *args: Any, **kwargs: Any) -> Any: ...
    def setComponentTagContents(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMatrix(self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectGroupComponent(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0F9CC0>

def MFnGeometryData_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnIntArrayData(MFnData):
    """
    """
    def __getitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def array(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def copyTo(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0FC770>

def MFnIntArrayData_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnLambertShader(MFnDependencyNode):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def ambientColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def color(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def diffuseCoeff(self, *args: Any, **kwargs: Any) -> Any: ...
    def glowIntensity(self, *args: Any, **kwargs: Any) -> Any: ...
    def hideSource(self, *args: Any, **kwargs: Any) -> Any: ...
    def incandescence(self, *args: Any, **kwargs: Any) -> Any: ...
    def refractedRayDepthLimit(self, *args: Any, **kwargs: Any) -> Any: ...
    def refractiveIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def rtRefractedColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def setAmbientColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def setColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDiffuseCoeff(self, *args: Any, **kwargs: Any) -> Any: ...
    def setGlowIntensity(self, *args: Any, **kwargs: Any) -> Any: ...
    def setHideSource(self, *args: Any, **kwargs: Any) -> Any: ...
    def setIncandescence(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRefractedRayDepthLimit(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRefractiveIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRtRefractedColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def setTranslucenceCoeff(self, *args: Any, **kwargs: Any) -> Any: ...
    def setTransparency(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0EC4A0>
    def translucenceCoeff(self, *args: Any, **kwargs: Any) -> Any: ...
    def transparency(self, *args: Any, **kwargs: Any) -> Any: ...

def MFnLambertShader_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnLatticeData(MFnGeometryData):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def lattice(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0FCAE0>

def MFnLatticeData_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnLayeredShader(MFnDependencyNode):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def color(self, *args: Any, **kwargs: Any) -> Any: ...
    def compositingFlag(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def glowColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def hardwareColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def hardwareShader(self, *args: Any, **kwargs: Any) -> Any: ...
    def setColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCompositingFlag(self, *args: Any, **kwargs: Any) -> Any: ...
    def setGlowColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def setHardwareColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def setHardwareShader(self, *args: Any, **kwargs: Any) -> Any: ...
    def setTransparency(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0FCCC0>
    def transparency(self, *args: Any, **kwargs: Any) -> Any: ...

def MFnLayeredShader_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnLight(MFnDagNode):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def centerOfIllumination(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def color(self, *args: Any, **kwargs: Any) -> Any: ...
    def intensity(self, *args: Any, **kwargs: Any) -> Any: ...
    def lightAmbient(self, *args: Any, **kwargs: Any) -> Any: ...
    def lightDiffuse(self, *args: Any, **kwargs: Any) -> Any: ...
    def lightDirection(self, *args: Any, **kwargs: Any) -> Any: ...
    def lightIntensity(self, *args: Any, **kwargs: Any) -> Any: ...
    def lightSpecular(self, *args: Any, **kwargs: Any) -> Any: ...
    def numShadowSamples(self, *args: Any, **kwargs: Any) -> Any: ...
    def opticalFXvisibility(self, *args: Any, **kwargs: Any) -> Any: ...
    def rayDepthLimit(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCenterOfIllumination(self, *args: Any, **kwargs: Any) -> Any: ...
    def setColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def setIntensity(self, *args: Any, **kwargs: Any) -> Any: ...
    def setNumShadowSamples(self, *args: Any, **kwargs: Any) -> Any: ...
    def setOpticalFXvisibility(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRayDepthLimit(self, *args: Any, **kwargs: Any) -> Any: ...
    def setShadowColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseRayTraceShadows(self, *args: Any, **kwargs: Any) -> Any: ...
    def shadowColor(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0E4EF0>
    def useRayTraceShadows(self, *args: Any, **kwargs: Any) -> Any: ...

class MFnLightDataAttribute(MFnAttribute):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDefault(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDefault(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0FF2C0>

def MFnLightDataAttribute_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnLight_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnMatrixArrayData(MFnData):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def array(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def copyTo(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0FF590>

def MFnMatrixArrayData_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnMatrixAttribute(MFnAttribute):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDefault(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDefault(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0FF8B0>

def MFnMatrixAttribute_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnMatrixData(MFnData):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def isTransformation(self, *args: Any, **kwargs: Any) -> Any: ...
    def matrix(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0FFB30>
    def transformation(self, *args: Any, **kwargs: Any) -> Any: ...

def MFnMatrixData_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnMesh(MFnDagNode):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addHoles(self, *args: Any, **kwargs: Any) -> Any: ...
    def addPolygon(self, *args: Any, **kwargs: Any) -> Any: ...
    def allIntersections(self, *args: Any, **kwargs: Any) -> Any: ...
    def anyIntersection(self, *args: Any, **kwargs: Any) -> Any: ...
    def assignColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def assignColors(self, *args: Any, **kwargs: Any) -> Any: ...
    def assignUV(self, *args: Any, **kwargs: Any) -> Any: ...
    def assignUVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def autoUniformGridParams(self, *args: Any, **kwargs: Any) -> Any: ...
    def binaryBlindDataComponentId(self, *args: Any, **kwargs: Any) -> Any: ...
    def booleanOp(self, *args: Any, **kwargs: Any) -> Any: ...
    def booleanOps(self, *args: Any, **kwargs: Any) -> Any: ...
    def cachedIntersectionAcceleratorInfo(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def cleanupEdgeSmoothing(self, *args: Any, **kwargs: Any) -> Any: ...
    def clearBlindData(self, *args: Any, **kwargs: Any) -> Any: ...
    def clearColors(self, *args: Any, **kwargs: Any) -> Any: ...
    def clearGlobalIntersectionAcceleratorInfo(self, *args: Any, **kwargs: Any) -> Any: ...
    def clearUVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def closestIntersection(self, *args: Any, **kwargs: Any) -> Any: ...
    def collapseEdges(self, *args: Any, **kwargs: Any) -> Any: ...
    def collapseFaces(self, *args: Any, **kwargs: Any) -> Any: ...
    def componentTypeFromName(self, *args: Any, **kwargs: Any) -> Any: ...
    def componentTypeName(self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self, *args: Any, **kwargs: Any) -> Any: ...
    def copyInPlace(self, *args: Any, **kwargs: Any) -> Any: ...
    def copyUVSetWithName(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def createBlindDataType(self, *args: Any, **kwargs: Any) -> Any: ...
    def createColorSetDataMesh(self, *args: Any, **kwargs: Any) -> Any: ...
    def createColorSetWithName(self, *args: Any, **kwargs: Any) -> Any: ...
    def createColorSetWithNameDataMesh(self, *args: Any, **kwargs: Any) -> Any: ...
    def createInPlace(self, *args: Any, **kwargs: Any) -> Any: ...
    def createUVSetDataMeshWithName(self, *args: Any, **kwargs: Any) -> Any: ...
    def createUVSetWithName(self, *args: Any, **kwargs: Any) -> Any: ...
    def currentColorSetName(self, *args: Any, **kwargs: Any) -> Any: ...
    def currentUVSetName(self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteColorSet(self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteEdge(self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteFace(self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteUVSet(self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteVertex(self, *args: Any, **kwargs: Any) -> Any: ...
    def displayColors(self, *args: Any, **kwargs: Any) -> Any: ...
    def duplicateFaces(self, *args: Any, **kwargs: Any) -> Any: ...
    def edgeBorderInfo(self, *args: Any, **kwargs: Any) -> Any: ...
    def extractFaces(self, *args: Any, **kwargs: Any) -> Any: ...
    def extrudeEdges(self, *args: Any, **kwargs: Any) -> Any: ...
    def extrudeFaces(self, *args: Any, **kwargs: Any) -> Any: ...
    def freeCachedIntersectionAccelerator(self, *args: Any, **kwargs: Any) -> Any: ...
    def generateSmoothMesh(self, *args: Any, **kwargs: Any) -> Any: ...
    def getAssignedUVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def getAssociatedColorSetInstances(self, *args: Any, **kwargs: Any) -> Any: ...
    def getAssociatedUVSetInstances(self, *args: Any, **kwargs: Any) -> Any: ...
    def getAssociatedUVSetTextures(self, *args: Any, **kwargs: Any) -> Any: ...
    def getAxisAtPoint(self, *args: Any, **kwargs: Any) -> Any: ...
    def getBinaryBlindData(self, *args: Any, **kwargs: Any) -> Any: ...
    def getBinormals(self, *args: Any, **kwargs: Any) -> Any: ...
    def getBlindDataAttrNames(self, *args: Any, **kwargs: Any) -> Any: ...
    def getBlindDataFaceVertexIndices(self, *args: Any, **kwargs: Any) -> Any: ...
    def getBlindDataTypes(self, *args: Any, **kwargs: Any) -> Any: ...
    def getBoolBlindData(self, *args: Any, **kwargs: Any) -> Any: ...
    def getCheckSamePointTwice(self, *args: Any, **kwargs: Any) -> Any: ...
    def getClosestNormal(self, *args: Any, **kwargs: Any) -> Any: ...
    def getClosestPoint(self, *args: Any, **kwargs: Any) -> Any: ...
    def getClosestPointAndNormal(self, *args: Any, **kwargs: Any) -> Any: ...
    def getClosestUVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def getColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def getColorIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def getColorRepresentation(self, *args: Any, **kwargs: Any) -> Any: ...
    def getColorSetFamilyNames(self, *args: Any, **kwargs: Any) -> Any: ...
    def getColorSetNames(self, *args: Any, **kwargs: Any) -> Any: ...
    def getColorSetsInFamily(self, *args: Any, **kwargs: Any) -> Any: ...
    def getColors(self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedShaders(self, *args: Any, **kwargs: Any) -> Any: ...
    def getCreaseEdges(self, *args: Any, **kwargs: Any) -> Any: ...
    def getCreaseVertices(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDoubleBlindData(self, *args: Any, **kwargs: Any) -> Any: ...
    def getEdgeVertices(self, *args: Any, **kwargs: Any) -> Any: ...
    def getFaceNormalIds(self, *args: Any, **kwargs: Any) -> Any: ...
    def getFaceUVSetNames(self, *args: Any, **kwargs: Any) -> Any: ...
    def getFaceVertexBinormal(self, *args: Any, **kwargs: Any) -> Any: ...
    def getFaceVertexBinormals(self, *args: Any, **kwargs: Any) -> Any: ...
    def getFaceVertexBlindDataIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def getFaceVertexColorIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def getFaceVertexColors(self, *args: Any, **kwargs: Any) -> Any: ...
    def getFaceVertexNormal(self, *args: Any, **kwargs: Any) -> Any: ...
    def getFaceVertexNormals(self, *args: Any, **kwargs: Any) -> Any: ...
    def getFaceVertexTangent(self, *args: Any, **kwargs: Any) -> Any: ...
    def getFaceVertexTangents(self, *args: Any, **kwargs: Any) -> Any: ...
    def getFloatBlindData(self, *args: Any, **kwargs: Any) -> Any: ...
    def getHoles(self, *args: Any, **kwargs: Any) -> Any: ...
    def getIntBlindData(self, *args: Any, **kwargs: Any) -> Any: ...
    def getInvisibleFaces(self, *args: Any, **kwargs: Any) -> Any: ...
    def getMeshShellsIds(self, *args: Any, **kwargs: Any) -> Any: ...
    def getNormalIds(self, *args: Any, **kwargs: Any) -> Any: ...
    def getNormals(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPinUVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPoint(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPointAtUV(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPoints(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPointsAtUV(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPolygonNormal(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPolygonTriangleVertices(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPolygonUV(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPolygonUVid(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPolygonVertices(self, *args: Any, **kwargs: Any) -> Any: ...
    def getRawDoublePoints(self, *args: Any, **kwargs: Any) -> Any: ...
    def getRawNormals(self, *args: Any, **kwargs: Any) -> Any: ...
    def getRawPoints(self, *args: Any, **kwargs: Any) -> Any: ...
    def getRawUVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def getSmoothMeshDisplayOptions(self, *args: Any, **kwargs: Any) -> Any: ...
    def getStringBlindData(self, *args: Any, **kwargs: Any) -> Any: ...
    def getTangentId(self, *args: Any, **kwargs: Any) -> Any: ...
    def getTangents(self, *args: Any, **kwargs: Any) -> Any: ...
    def getTriangleOffsets(self, *args: Any, **kwargs: Any) -> Any: ...
    def getTriangles(self, *args: Any, **kwargs: Any) -> Any: ...
    def getUV(self, *args: Any, **kwargs: Any) -> Any: ...
    def getUVAtPoint(self, *args: Any, **kwargs: Any) -> Any: ...
    def getUVBorderEdges(self, *args: Any, **kwargs: Any) -> Any: ...
    def getUVSetFamilyNames(self, *args: Any, **kwargs: Any) -> Any: ...
    def getUVSetNames(self, *args: Any, **kwargs: Any) -> Any: ...
    def getUVSetsInFamily(self, *args: Any, **kwargs: Any) -> Any: ...
    def getUVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def getUvShellsIds(self, *args: Any, **kwargs: Any) -> Any: ...
    def getVertexColors(self, *args: Any, **kwargs: Any) -> Any: ...
    def getVertexNormal(self, *args: Any, **kwargs: Any) -> Any: ...
    def getVertexNormals(self, *args: Any, **kwargs: Any) -> Any: ...
    def getVertices(self, *args: Any, **kwargs: Any) -> Any: ...
    def globalIntersectionAcceleratorsInfo(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAlphaChannels(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasBlindData(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasBlindDataComponentId(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasColorChannels(self, *args: Any, **kwargs: Any) -> Any: ...
    def intersect(self, *args: Any, **kwargs: Any) -> Any: ...
    def intersectFaceAtUV(self, *args: Any, **kwargs: Any) -> Any: ...
    def isBlindDataTypeUsed(self, *args: Any, **kwargs: Any) -> Any: ...
    def isColorClamped(self, *args: Any, **kwargs: Any) -> Any: ...
    def isColorSetPerInstance(self, *args: Any, **kwargs: Any) -> Any: ...
    def isEdgeSmooth(self, *args: Any, **kwargs: Any) -> Any: ...
    def isNormalLocked(self, *args: Any, **kwargs: Any) -> Any: ...
    def isPolygonConvex(self, *args: Any, **kwargs: Any) -> Any: ...
    def isPolygonUVReversed(self, *args: Any, **kwargs: Any) -> Any: ...
    def isRightHandedTangent(self, *args: Any, **kwargs: Any) -> Any: ...
    def isUVSetPerInstance(self, *args: Any, **kwargs: Any) -> Any: ...
    kGeomBorder: int = -2
    kUVBorder: int = -1
    def lockFaceVertexNormals(self, *args: Any, **kwargs: Any) -> Any: ...
    def lockVertexNormals(self, *args: Any, **kwargs: Any) -> Any: ...
    def numColorSets(self, *args: Any, **kwargs: Any) -> Any: ...
    def numColors(self, *args: Any, **kwargs: Any) -> Any: ...
    def numEdges(self, *args: Any, **kwargs: Any) -> Any: ...
    def numFaceVertices(self, *args: Any, **kwargs: Any) -> Any: ...
    def numNormals(self, *args: Any, **kwargs: Any) -> Any: ...
    def numPolygons(self, *args: Any, **kwargs: Any) -> Any: ...
    def numUVSets(self, *args: Any, **kwargs: Any) -> Any: ...
    def numUVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def numVertices(self, *args: Any, **kwargs: Any) -> Any: ...
    def onBoundary(self, *args: Any, **kwargs: Any) -> Any: ...
    def polyTriangulate(self, *args: Any, **kwargs: Any) -> Any: ...
    def polygonVertexCount(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeFaceColors(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeFaceVertexColors(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeVertexColors(self, *args: Any, **kwargs: Any) -> Any: ...
    def renameUVSet(self, *args: Any, **kwargs: Any) -> Any: ...
    def setBinaryBlindData(self, *args: Any, **kwargs: Any) -> Any: ...
    def setBoolBlindData(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCheckSamePointTwice(self, *args: Any, **kwargs: Any) -> Any: ...
    def setColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def setColors(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCreaseEdges(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCreaseVertices(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCurrentColorSetName(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCurrentUVSetName(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDisplayColors(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoubleBlindData(self, *args: Any, **kwargs: Any) -> Any: ...
    def setEdgeSmoothing(self, *args: Any, **kwargs: Any) -> Any: ...
    def setEdgeSmoothings(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFaceColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFaceColors(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFaceVertexColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFaceVertexColors(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFaceVertexNormal(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFaceVertexNormals(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFloatBlindData(self, *args: Any, **kwargs: Any) -> Any: ...
    def setIntBlindData(self, *args: Any, **kwargs: Any) -> Any: ...
    def setInvisibleFaces(self, *args: Any, **kwargs: Any) -> Any: ...
    def setIsColorClamped(self, *args: Any, **kwargs: Any) -> Any: ...
    def setNormals(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPinUVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPoint(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPoints(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSmoothMeshDisplayOptions(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSomeColors(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSomeUVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def setStringBlindData(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUV(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def setVertexColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def setVertexColors(self, *args: Any, **kwargs: Any) -> Any: ...
    def setVertexNormal(self, *args: Any, **kwargs: Any) -> Any: ...
    def setVertexNormals(self, *args: Any, **kwargs: Any) -> Any: ...
    def sortIntersectionFaceTriIds(self, *args: Any, **kwargs: Any) -> Any: ...
    def split(self, *args: Any, **kwargs: Any) -> Any: ...
    def stringBlindDataComponentId(self, *args: Any, **kwargs: Any) -> Any: ...
    def subdivideEdges(self, *args: Any, **kwargs: Any) -> Any: ...
    def subdivideFaces(self, *args: Any, **kwargs: Any) -> Any: ...
    def syncObject(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB104040>
    def uniformGridParams(self, *args: Any, **kwargs: Any) -> Any: ...
    def unlockFaceVertexNormals(self, *args: Any, **kwargs: Any) -> Any: ...
    def unlockVertexNormals(self, *args: Any, **kwargs: Any) -> Any: ...
    def updateSurface(self, *args: Any, **kwargs: Any) -> Any: ...

class MFnMeshData(MFnGeometryData):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0FFE50>

def MFnMeshData_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnMesh_autoUniformGridParams(*args: Any, **kwargs: Any) -> Any: ...
def MFnMesh_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnMesh_clearGlobalIntersectionAcceleratorInfo(*args: Any, **kwargs: Any) -> Any: ...
def MFnMesh_componentTypeFromName(*args: Any, **kwargs: Any) -> Any: ...
def MFnMesh_componentTypeName(*args: Any, **kwargs: Any) -> Any: ...
def MFnMesh_globalIntersectionAcceleratorsInfo(*args: Any, **kwargs: Any) -> Any: ...
def MFnMesh_polyTriangulate(*args: Any, **kwargs: Any) -> Any: ...
def MFnMesh_uniformGridParams(*args: Any, **kwargs: Any) -> Any: ...
class MFnMessageAttribute(MFnAttribute):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB10B2C0>

def MFnMessageAttribute_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnNonAmbientLight(MFnLight):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def decayRate(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDecayRate(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0E70E0>

def MFnNonAmbientLight_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnNonExtendedLight(MFnNonAmbientLight):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def castSoftShadows(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def depthMapBias(self, *args: Any, **kwargs: Any) -> Any: ...
    def depthMapFilterSize(self, *args: Any, **kwargs: Any) -> Any: ...
    def depthMapFocus(self, *args: Any, **kwargs: Any) -> Any: ...
    def depthMapResolution(self, *args: Any, **kwargs: Any) -> Any: ...
    def depthMapWidthFocus(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCastSoftShadows(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDepthMapBias(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDepthMapFilterSize(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDepthMapFocus(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDepthMapResolution(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDepthMapWidthFocus(self, *args: Any, **kwargs: Any) -> Any: ...
    def setShadowRadius(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseDepthMapAutoFocus(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseDepthMapShadows(self, *args: Any, **kwargs: Any) -> Any: ...
    def shadowRadius(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0E72C0>
    def useDepthMapAutoFocus(self, *args: Any, **kwargs: Any) -> Any: ...
    def useDepthMapShadows(self, *args: Any, **kwargs: Any) -> Any: ...

def MFnNonExtendedLight_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnNumericAttribute(MFnAttribute):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def createAddr(self, *args: Any, **kwargs: Any) -> Any: ...
    def createColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def createPoint(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDefault(self, *args: Any, **kwargs: Any) -> Any: ...
    def getMax(self, *args: Any, **kwargs: Any) -> Any: ...
    def getMin(self, *args: Any, **kwargs: Any) -> Any: ...
    def getSoftMax(self, *args: Any, **kwargs: Any) -> Any: ...
    def getSoftMin(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasMax(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasMin(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasSoftMax(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasSoftMin(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDefault(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMax(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMin(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSoftMax(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSoftMin(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB10B4A0>
    def unitType(self, *args: Any, **kwargs: Any) -> Any: ...

def MFnNumericAttribute_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnNumericData(MFnData):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def getData2Double(self, *args: Any, **kwargs: Any) -> Any: ...
    def getData2Float(self, *args: Any, **kwargs: Any) -> Any: ...
    def getData2Int(self, *args: Any, **kwargs: Any) -> Any: ...
    def getData2Short(self, *args: Any, **kwargs: Any) -> Any: ...
    def getData3Double(self, *args: Any, **kwargs: Any) -> Any: ...
    def getData3Float(self, *args: Any, **kwargs: Any) -> Any: ...
    def getData3Int(self, *args: Any, **kwargs: Any) -> Any: ...
    def getData3Short(self, *args: Any, **kwargs: Any) -> Any: ...
    def getData4Double(self, *args: Any, **kwargs: Any) -> Any: ...
    def numericType(self, *args: Any, **kwargs: Any) -> Any: ...
    def setData2Double(self, *args: Any, **kwargs: Any) -> Any: ...
    def setData2Float(self, *args: Any, **kwargs: Any) -> Any: ...
    def setData2Int(self, *args: Any, **kwargs: Any) -> Any: ...
    def setData2Short(self, *args: Any, **kwargs: Any) -> Any: ...
    def setData3Double(self, *args: Any, **kwargs: Any) -> Any: ...
    def setData3Float(self, *args: Any, **kwargs: Any) -> Any: ...
    def setData3Int(self, *args: Any, **kwargs: Any) -> Any: ...
    def setData3Short(self, *args: Any, **kwargs: Any) -> Any: ...
    def setData4Double(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB10BC70>

def MFnNumericData_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnNurbsCurve(MFnDagNode):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def area(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def closestPoint(self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def createWithEditPoints(self, *args: Any, **kwargs: Any) -> Any: ...
    def cv(self, *args: Any, **kwargs: Any) -> Any: ...
    def cvs(self, *args: Any, **kwargs: Any) -> Any: ...
    def degree(self, *args: Any, **kwargs: Any) -> Any: ...
    def distanceToPoint(self, *args: Any, **kwargs: Any) -> Any: ...
    def findLengthFromParam(self, *args: Any, **kwargs: Any) -> Any: ...
    def findParamFromLength(self, *args: Any, **kwargs: Any) -> Any: ...
    def form(self, *args: Any, **kwargs: Any) -> Any: ...
    def getCV(self, *args: Any, **kwargs: Any) -> Any: ...
    def getCVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDerivativesAtParm(self, *args: Any, **kwargs: Any) -> Any: ...
    def getKnotDomain(self, *args: Any, **kwargs: Any) -> Any: ...
    def getKnots(self, *args: Any, **kwargs: Any) -> Any: ...
    def getParamAtPoint(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPointAtParam(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasHistoryOnCreate(self, *args: Any, **kwargs: Any) -> Any: ...
    def isParamOnCurve(self, *args: Any, **kwargs: Any) -> Any: ...
    def isPlanar(self, *args: Any, **kwargs: Any) -> Any: ...
    def isPointOnCurve(self, *args: Any, **kwargs: Any) -> Any: ...
    def knot(self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    def makeMultipleEndKnots(self, *args: Any, **kwargs: Any) -> Any: ...
    def normal(self, *args: Any, **kwargs: Any) -> Any: ...
    def numCVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def numKnots(self, *args: Any, **kwargs: Any) -> Any: ...
    def numSpans(self, *args: Any, **kwargs: Any) -> Any: ...
    def rebuild(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeKnot(self, *args: Any, **kwargs: Any) -> Any: ...
    def reverse(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCV(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def setKnot(self, *args: Any, **kwargs: Any) -> Any: ...
    def setKnots(self, *args: Any, **kwargs: Any) -> Any: ...
    def tangent(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB10C4F0>
    def updateCurve(self, *args: Any, **kwargs: Any) -> Any: ...

class MFnNurbsCurveData(MFnGeometryData):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB10C360>

def MFnNurbsCurveData_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnNurbsCurve_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnNurbsSurface(MFnDagNode):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def area(self, *args: Any, **kwargs: Any) -> Any: ...
    def assignUV(self, *args: Any, **kwargs: Any) -> Any: ...
    def assignUVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def boundaryType(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def clearUVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def closestPoint(self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def cv(self, *args: Any, **kwargs: Any) -> Any: ...
    def cvsInU(self, *args: Any, **kwargs: Any) -> Any: ...
    def cvsInV(self, *args: Any, **kwargs: Any) -> Any: ...
    def degreeU(self, *args: Any, **kwargs: Any) -> Any: ...
    def degreeV(self, *args: Any, **kwargs: Any) -> Any: ...
    def distanceToPoint(self, *args: Any, **kwargs: Any) -> Any: ...
    def edge(self, *args: Any, **kwargs: Any) -> Any: ...
    def formInU(self, *args: Any, **kwargs: Any) -> Any: ...
    def formInV(self, *args: Any, **kwargs: Any) -> Any: ...
    def getAssignedUVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def getCV(self, *args: Any, **kwargs: Any) -> Any: ...
    def getCVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedShaders(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDataObject(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDerivativesAtParm(self, *args: Any, **kwargs: Any) -> Any: ...
    def getKnotDomain(self, *args: Any, **kwargs: Any) -> Any: ...
    def getKnotsInU(self, *args: Any, **kwargs: Any) -> Any: ...
    def getKnotsInV(self, *args: Any, **kwargs: Any) -> Any: ...
    def getParamAtPoint(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPatchUV(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPatchUVid(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPatchUVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPointAtParam(self, *args: Any, **kwargs: Any) -> Any: ...
    def getTangents(self, *args: Any, **kwargs: Any) -> Any: ...
    def getTrimBoundaries(self, *args: Any, **kwargs: Any) -> Any: ...
    def getUV(self, *args: Any, **kwargs: Any) -> Any: ...
    def getUVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasHistoryOnCreate(self, *args: Any, **kwargs: Any) -> Any: ...
    def intersect(self, *args: Any, **kwargs: Any) -> Any: ...
    def isBezier(self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlipNorm(self, *args: Any, **kwargs: Any) -> Any: ...
    def isFoldedOnBispan(self, *args: Any, **kwargs: Any) -> Any: ...
    def isKnotU(self, *args: Any, **kwargs: Any) -> Any: ...
    def isKnotV(self, *args: Any, **kwargs: Any) -> Any: ...
    def isParamOnSurface(self, *args: Any, **kwargs: Any) -> Any: ...
    def isPointInTrimmedRegion(self, *args: Any, **kwargs: Any) -> Any: ...
    def isPointOnSurface(self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrimmedSurface(self, *args: Any, **kwargs: Any) -> Any: ...
    def isUniform(self, *args: Any, **kwargs: Any) -> Any: ...
    def knotInU(self, *args: Any, **kwargs: Any) -> Any: ...
    def knotInV(self, *args: Any, **kwargs: Any) -> Any: ...
    def normal(self, *args: Any, **kwargs: Any) -> Any: ...
    def numBoundaries(self, *args: Any, **kwargs: Any) -> Any: ...
    def numCVsInU(self, *args: Any, **kwargs: Any) -> Any: ...
    def numCVsInV(self, *args: Any, **kwargs: Any) -> Any: ...
    def numEdges(self, *args: Any, **kwargs: Any) -> Any: ...
    def numKnotsInU(self, *args: Any, **kwargs: Any) -> Any: ...
    def numKnotsInV(self, *args: Any, **kwargs: Any) -> Any: ...
    def numNonZeroSpansInU(self, *args: Any, **kwargs: Any) -> Any: ...
    def numNonZeroSpansInV(self, *args: Any, **kwargs: Any) -> Any: ...
    def numPatches(self, *args: Any, **kwargs: Any) -> Any: ...
    def numPatchesInU(self, *args: Any, **kwargs: Any) -> Any: ...
    def numPatchesInV(self, *args: Any, **kwargs: Any) -> Any: ...
    def numRegions(self, *args: Any, **kwargs: Any) -> Any: ...
    def numSpansInU(self, *args: Any, **kwargs: Any) -> Any: ...
    def numSpansInV(self, *args: Any, **kwargs: Any) -> Any: ...
    def numUVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def projectCurve(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeKnotInU(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeKnotInV(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeOneKnotInU(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeOneKnotInV(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCV(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def setKnotInU(self, *args: Any, **kwargs: Any) -> Any: ...
    def setKnotInV(self, *args: Any, **kwargs: Any) -> Any: ...
    def setKnotsInU(self, *args: Any, **kwargs: Any) -> Any: ...
    def setKnotsInV(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUV(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def tesselate(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB10E400>
    def trim(self, *args: Any, **kwargs: Any) -> Any: ...
    def trimWithBoundaries(self, *args: Any, **kwargs: Any) -> Any: ...
    def updateSurface(self, *args: Any, **kwargs: Any) -> Any: ...

class MFnNurbsSurfaceData(MFnGeometryData):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB10E270>

def MFnNurbsSurfaceData_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnNurbsSurface_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnPartition(MFnDependencyNode):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addMember(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def isRenderPartition(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeMember(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB110EA0>

def MFnPartition_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnPhongEShader(MFnDependencyNode):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def highlightSize(self, *args: Any, **kwargs: Any) -> Any: ...
    def roughness(self, *args: Any, **kwargs: Any) -> Any: ...
    def setHighlightSize(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRoughness(self, *args: Any, **kwargs: Any) -> Any: ...
    def setWhiteness(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB1131D0>
    def whiteness(self, *args: Any, **kwargs: Any) -> Any: ...

def MFnPhongEShader_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnPhongShader(MFnReflectShader):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def cosPower(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCosPower(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB113540>

def MFnPhongShader_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnPluginData(MFnData):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def constData(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def data(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB113720>
    def typeId(self, *args: Any, **kwargs: Any) -> Any: ...

def MFnPluginData_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnPointArrayData(MFnData):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def array(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def copyTo(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB1139F0>

def MFnPointArrayData_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnPointLight(MFnNonExtendedLight):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB113D10>

def MFnPointLight_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnReference(MFnDependencyNode):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def associatedNamespace(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def containsNode(self, *args: Any, **kwargs: Any) -> Any: ...
    def containsNodeExactly(self, *args: Any, **kwargs: Any) -> Any: ...
    def fileName(self, *args: Any, **kwargs: Any) -> Any: ...
    def ignoreReferenceEdits(self, *args: Any, **kwargs: Any) -> Any: ...
    def isExportEditsFile(self, *args: Any, **kwargs: Any) -> Any: ...
    def isLoaded(self, *args: Any, **kwargs: Any) -> Any: ...
    def isLocked(self, *args: Any, **kwargs: Any) -> Any: ...
    def isValidReference(self, *args: Any, **kwargs: Any) -> Any: ...
    def nodes(self, *args: Any, **kwargs: Any) -> Any: ...
    def parentAssembly(self, *args: Any, **kwargs: Any) -> Any: ...
    def parentFileName(self, *args: Any, **kwargs: Any) -> Any: ...
    def parentReference(self, *args: Any, **kwargs: Any) -> Any: ...
    def setIgnoreReferenceEdits(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0EE400>

def MFnReference_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnReference_ignoreReferenceEdits(*args: Any, **kwargs: Any) -> Any: ...
def MFnReference_setIgnoreReferenceEdits(*args: Any, **kwargs: Any) -> Any: ...
class MFnReflectShader(MFnLambertShader):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def reflectedColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def reflectedRayDepthLimit(self, *args: Any, **kwargs: Any) -> Any: ...
    def reflectivity(self, *args: Any, **kwargs: Any) -> Any: ...
    def setReflectedColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def setReflectedRayDepthLimit(self, *args: Any, **kwargs: Any) -> Any: ...
    def setReflectivity(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSpecularColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def specularColor(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0ECD10>

def MFnReflectShader_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnSet(MFnDependencyNode):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addMember(self, *args: Any, **kwargs: Any) -> Any: ...
    def addMembers(self, *args: Any, **kwargs: Any) -> Any: ...
    def annotation(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def getIntersection(self, *args: Any, **kwargs: Any) -> Any: ...
    def getMemberPaths(self, *args: Any, **kwargs: Any) -> Any: ...
    def getMembers(self, *args: Any, **kwargs: Any) -> Any: ...
    def getUnion(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasRestrictions(self, *args: Any, **kwargs: Any) -> Any: ...
    def intersectsWith(self, *args: Any, **kwargs: Any) -> Any: ...
    def isMember(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeMember(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeMembers(self, *args: Any, **kwargs: Any) -> Any: ...
    def restriction(self, *args: Any, **kwargs: Any) -> Any: ...
    def setAnnotation(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB113EA0>

def MFnSet_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnSingleIndexedComponent(MFnComponent):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addElement(self, *args: Any, **kwargs: Any) -> Any: ...
    def addElements(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def element(self, *args: Any, **kwargs: Any) -> Any: ...
    def elementMax(self, *args: Any, **kwargs: Any) -> Any: ...
    def getCompleteData(self, *args: Any, **kwargs: Any) -> Any: ...
    def getElements(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCompleteData(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB114540>

def MFnSingleIndexedComponent_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnSphereData(MFnData):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def radius(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRadius(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB114900>

def MFnSphereData_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnSpotLight(MFnNonExtendedLight):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def barnDoorAngle(self, *args: Any, **kwargs: Any) -> Any: ...
    def barnDoors(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def coneAngle(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def dropOff(self, *args: Any, **kwargs: Any) -> Any: ...
    def endDistance(self, *args: Any, **kwargs: Any) -> Any: ...
    def penumbraAngle(self, *args: Any, **kwargs: Any) -> Any: ...
    def setBarnDoorAngle(self, *args: Any, **kwargs: Any) -> Any: ...
    def setBarnDoors(self, *args: Any, **kwargs: Any) -> Any: ...
    def setConeAngle(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDropOff(self, *args: Any, **kwargs: Any) -> Any: ...
    def setEndDistance(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPenumbraAngle(self, *args: Any, **kwargs: Any) -> Any: ...
    def setStartDistance(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseDecayRegions(self, *args: Any, **kwargs: Any) -> Any: ...
    def startDistance(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB114B80>
    def useDecayRegions(self, *args: Any, **kwargs: Any) -> Any: ...

def MFnSpotLight_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnStandardSurfaceShader(MFnDependencyNode):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def base(self, *args: Any, **kwargs: Any) -> Any: ...
    def baseColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def coat(self, *args: Any, **kwargs: Any) -> Any: ...
    def coatAffectColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def coatAffectRoughness(self, *args: Any, **kwargs: Any) -> Any: ...
    def coatAnisotropy(self, *args: Any, **kwargs: Any) -> Any: ...
    def coatColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def coatIOR(self, *args: Any, **kwargs: Any) -> Any: ...
    def coatRotation(self, *args: Any, **kwargs: Any) -> Any: ...
    def coatRoughness(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def diffuseRoughness(self, *args: Any, **kwargs: Any) -> Any: ...
    def emission(self, *args: Any, **kwargs: Any) -> Any: ...
    def emissionColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def metalness(self, *args: Any, **kwargs: Any) -> Any: ...
    def opacity(self, *args: Any, **kwargs: Any) -> Any: ...
    def setBase(self, *args: Any, **kwargs: Any) -> Any: ...
    def setBaseColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCoat(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCoatAffectColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCoatAffectRoughness(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCoatAnisotropy(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCoatColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCoatIOR(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCoatRotation(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCoatRoughness(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDiffuseRoughness(self, *args: Any, **kwargs: Any) -> Any: ...
    def setEmission(self, *args: Any, **kwargs: Any) -> Any: ...
    def setEmissionColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMetalness(self, *args: Any, **kwargs: Any) -> Any: ...
    def setOpacity(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSheen(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSheenColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSheenRoughness(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSpecular(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSpecularAnisotropy(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSpecularColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSpecularIOR(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSpecularRotation(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSpecularRoughness(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSubsurface(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSubsurfaceAnisotropy(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSubsurfaceColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSubsurfaceRadius(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSubsurfaceScale(self, *args: Any, **kwargs: Any) -> Any: ...
    def setThinFilmIOR(self, *args: Any, **kwargs: Any) -> Any: ...
    def setThinFilmThickness(self, *args: Any, **kwargs: Any) -> Any: ...
    def setThinWalled(self, *args: Any, **kwargs: Any) -> Any: ...
    def setTransmission(self, *args: Any, **kwargs: Any) -> Any: ...
    def setTransmissionColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def setTransmissionDepth(self, *args: Any, **kwargs: Any) -> Any: ...
    def setTransmissionDispersion(self, *args: Any, **kwargs: Any) -> Any: ...
    def setTransmissionExtraRoughness(self, *args: Any, **kwargs: Any) -> Any: ...
    def setTransmissionScatter(self, *args: Any, **kwargs: Any) -> Any: ...
    def setTransmissionScatterAnisotropy(self, *args: Any, **kwargs: Any) -> Any: ...
    def sheen(self, *args: Any, **kwargs: Any) -> Any: ...
    def sheenColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def sheenRoughness(self, *args: Any, **kwargs: Any) -> Any: ...
    def specular(self, *args: Any, **kwargs: Any) -> Any: ...
    def specularAnisotropy(self, *args: Any, **kwargs: Any) -> Any: ...
    def specularColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def specularIOR(self, *args: Any, **kwargs: Any) -> Any: ...
    def specularRotation(self, *args: Any, **kwargs: Any) -> Any: ...
    def specularRoughness(self, *args: Any, **kwargs: Any) -> Any: ...
    def subsurface(self, *args: Any, **kwargs: Any) -> Any: ...
    def subsurfaceAnisotropy(self, *args: Any, **kwargs: Any) -> Any: ...
    def subsurfaceColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def subsurfaceRadius(self, *args: Any, **kwargs: Any) -> Any: ...
    def subsurfaceScale(self, *args: Any, **kwargs: Any) -> Any: ...
    def thinFilmIOR(self, *args: Any, **kwargs: Any) -> Any: ...
    def thinFilmThickness(self, *args: Any, **kwargs: Any) -> Any: ...
    def thinWalled(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB118270>
    def transmission(self, *args: Any, **kwargs: Any) -> Any: ...
    def transmissionColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def transmissionDepth(self, *args: Any, **kwargs: Any) -> Any: ...
    def transmissionDispersion(self, *args: Any, **kwargs: Any) -> Any: ...
    def transmissionExtraRoughness(self, *args: Any, **kwargs: Any) -> Any: ...
    def transmissionScatter(self, *args: Any, **kwargs: Any) -> Any: ...
    def transmissionScatterAnisotropy(self, *args: Any, **kwargs: Any) -> Any: ...

def MFnStandardSurfaceShader_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnStringArrayData(MFnData):
    """
    """
    def __getitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def array(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def copyTo(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB119CC0>

def MFnStringArrayData_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnStringData(MFnData):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    def string(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB11B090>

def MFnStringData_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnSubd(MFnDagNode):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def collapse(self, *args: Any, **kwargs: Any) -> Any: ...
    def convertToNurbs(self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self, *args: Any, **kwargs: Any) -> Any: ...
    def creasesClearAll(self, *args: Any, **kwargs: Any) -> Any: ...
    def creasesGetAll(self, *args: Any, **kwargs: Any) -> Any: ...
    def creasesSetAll(self, *args: Any, **kwargs: Any) -> Any: ...
    def createBaseMesh(self, *args: Any, **kwargs: Any) -> Any: ...
    def edgeAdjacentPolygon(self, *args: Any, **kwargs: Any) -> Any: ...
    def edgeBetween(self, *args: Any, **kwargs: Any) -> Any: ...
    def edgeChildren(self, *args: Any, **kwargs: Any) -> Any: ...
    def edgeCount(self, *args: Any, **kwargs: Any) -> Any: ...
    def edgeCreaseRelevant(self, *args: Any, **kwargs: Any) -> Any: ...
    def edgeIsBoundary(self, *args: Any, **kwargs: Any) -> Any: ...
    def edgeIsCreased(self, *args: Any, **kwargs: Any) -> Any: ...
    def edgeIsValid(self, *args: Any, **kwargs: Any) -> Any: ...
    def edgeSetCrease(self, *args: Any, **kwargs: Any) -> Any: ...
    def edgeVertices(self, *args: Any, **kwargs: Any) -> Any: ...
    def editsPending(self, *args: Any, **kwargs: Any) -> Any: ...
    def editsUpdateAll(self, *args: Any, **kwargs: Any) -> Any: ...
    def evaluateNormal(self, *args: Any, **kwargs: Any) -> Any: ...
    def evaluatePosition(self, *args: Any, **kwargs: Any) -> Any: ...
    def evaluatePositionAndNormal(self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedShaders(self, *args: Any, **kwargs: Any) -> Any: ...
    def getCubicSpline(self, *args: Any, **kwargs: Any) -> Any: ...
    def levelFullySubdivideTo(self, *args: Any, **kwargs: Any) -> Any: ...
    def levelMaxAllowed(self, *args: Any, **kwargs: Any) -> Any: ...
    def levelMaxCurrent(self, *args: Any, **kwargs: Any) -> Any: ...
    def polygonBaseMeshAdd(self, *args: Any, **kwargs: Any) -> Any: ...
    def polygonBaseMeshAddWithUVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def polygonChildren(self, *args: Any, **kwargs: Any) -> Any: ...
    def polygonCount(self, *args: Any, **kwargs: Any) -> Any: ...
    def polygonCountMaxWithGivenBaseMesh(self, *args: Any, **kwargs: Any) -> Any: ...
    def polygonEdgeCount(self, *args: Any, **kwargs: Any) -> Any: ...
    def polygonEdges(self, *args: Any, **kwargs: Any) -> Any: ...
    def polygonGetCenterUV(self, *args: Any, **kwargs: Any) -> Any: ...
    def polygonGetVertexUVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def polygonHasChildren(self, *args: Any, **kwargs: Any) -> Any: ...
    def polygonHasVertexUVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def polygonIsValid(self, *args: Any, **kwargs: Any) -> Any: ...
    def polygonSetUseUVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def polygonSetVertexUVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def polygonSubdivide(self, *args: Any, **kwargs: Any) -> Any: ...
    def polygonVertexCount(self, *args: Any, **kwargs: Any) -> Any: ...
    def polygonVertices(self, *args: Any, **kwargs: Any) -> Any: ...
    def tesselate(self, *args: Any, **kwargs: Any) -> Any: ...
    def tessellateViaNurbs(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB11B4A0>
    def updateAllEditsAndCreases(self, *args: Any, **kwargs: Any) -> Any: ...
    def updateSubdSurface(self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexAdjacentVertices(self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexBaseIndexFromVertexId(self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexBaseMeshAdd(self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexBaseMeshAddWithIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexBaseMeshGet(self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexBaseMeshGetWithId(self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexBaseMeshSet(self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexBaseMeshSetWithId(self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexChildren(self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexCount(self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexCreaseRelevant(self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexEditGet(self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexEditSet(self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexEditsClearAllNonBase(self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexEditsGetAllNonBase(self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexEditsSetAllNonBase(self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexIdFromBaseVertexIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexIncidentEdges(self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexIncidentPolygons(self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexIsBoundary(self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexIsCreased(self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexIsValid(self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexNormal(self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexPositionGet(self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexPositionGetNoEdit(self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexPositionSet(self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexSetCrease(self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexValence(self, *args: Any, **kwargs: Any) -> Any: ...

class MFnSubdData(MFnGeometryData):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB11B310>

def MFnSubdData_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnSubdNames(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def base(self, *args: Any, **kwargs: Any) -> Any: ...
    def baseFaceId(self, *args: Any, **kwargs: Any) -> Any: ...
    def baseFaceIdFromIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def baseFaceIdFromLong(self, *args: Any, **kwargs: Any) -> Any: ...
    def baseFaceIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def baseFaceIndexFromId(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def corner(self, *args: Any, **kwargs: Any) -> Any: ...
    def first(self, *args: Any, **kwargs: Any) -> Any: ...
    def fromMUint64(self, *args: Any, **kwargs: Any) -> Any: ...
    def fromSelectionIndices(self, *args: Any, **kwargs: Any) -> Any: ...
    def level(self, *args: Any, **kwargs: Any) -> Any: ...
    def levelOneFaceAsLong(self, *args: Any, **kwargs: Any) -> Any: ...
    def levelOneFaceId(self, *args: Any, **kwargs: Any) -> Any: ...
    def levelOneFaceIdFromIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def levelOneFaceIdFromLong(self, *args: Any, **kwargs: Any) -> Any: ...
    def levelOneFaceIndexFromId(self, *args: Any, **kwargs: Any) -> Any: ...
    def nonBaseFaceEdges(self, *args: Any, **kwargs: Any) -> Any: ...
    def nonBaseFaceVertices(self, *args: Any, **kwargs: Any) -> Any: ...
    def parentFaceId(self, *args: Any, **kwargs: Any) -> Any: ...
    def path(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB11DD60>
    def toMUint64(self, *args: Any, **kwargs: Any) -> Any: ...
    def toSelectionIndices(self, *args: Any, **kwargs: Any) -> Any: ...

def MFnSubdNames_base(*args: Any, **kwargs: Any) -> Any: ...
def MFnSubdNames_baseFaceId(*args: Any, **kwargs: Any) -> Any: ...
def MFnSubdNames_baseFaceIdFromIndex(*args: Any, **kwargs: Any) -> Any: ...
def MFnSubdNames_baseFaceIdFromLong(*args: Any, **kwargs: Any) -> Any: ...
def MFnSubdNames_baseFaceIndex(*args: Any, **kwargs: Any) -> Any: ...
def MFnSubdNames_baseFaceIndexFromId(*args: Any, **kwargs: Any) -> Any: ...
def MFnSubdNames_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnSubdNames_corner(*args: Any, **kwargs: Any) -> Any: ...
def MFnSubdNames_first(*args: Any, **kwargs: Any) -> Any: ...
def MFnSubdNames_fromMUint64(*args: Any, **kwargs: Any) -> Any: ...
def MFnSubdNames_fromSelectionIndices(*args: Any, **kwargs: Any) -> Any: ...
def MFnSubdNames_level(*args: Any, **kwargs: Any) -> Any: ...
def MFnSubdNames_levelOneFaceAsLong(*args: Any, **kwargs: Any) -> Any: ...
def MFnSubdNames_levelOneFaceId(*args: Any, **kwargs: Any) -> Any: ...
def MFnSubdNames_levelOneFaceIdFromIndex(*args: Any, **kwargs: Any) -> Any: ...
def MFnSubdNames_levelOneFaceIdFromLong(*args: Any, **kwargs: Any) -> Any: ...
def MFnSubdNames_levelOneFaceIndexFromId(*args: Any, **kwargs: Any) -> Any: ...
def MFnSubdNames_nonBaseFaceEdges(*args: Any, **kwargs: Any) -> Any: ...
def MFnSubdNames_nonBaseFaceVertices(*args: Any, **kwargs: Any) -> Any: ...
def MFnSubdNames_parentFaceId(*args: Any, **kwargs: Any) -> Any: ...
def MFnSubdNames_path(*args: Any, **kwargs: Any) -> Any: ...
def MFnSubdNames_toMUint64(*args: Any, **kwargs: Any) -> Any: ...
def MFnSubdNames_toSelectionIndices(*args: Any, **kwargs: Any) -> Any: ...
def MFnSubd_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnTransform(MFnDagNode):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def clearRestPosition(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def enableLimit(self, *args: Any, **kwargs: Any) -> Any: ...
    def getRotation(self, *args: Any, **kwargs: Any) -> Any: ...
    def getRotationQuaternion(self, *args: Any, **kwargs: Any) -> Any: ...
    def getScale(self, *args: Any, **kwargs: Any) -> Any: ...
    def getShear(self, *args: Any, **kwargs: Any) -> Any: ...
    def getTranslation(self, *args: Any, **kwargs: Any) -> Any: ...
    def isLimited(self, *args: Any, **kwargs: Any) -> Any: ...
    kRotateMaxX: int = 13
    kRotateMaxY: int = 15
    kRotateMaxZ: int = 17
    kRotateMinX: int = 12
    kRotateMinY: int = 14
    kRotateMinZ: int = 16
    kShearMaxYZ: int = 11
    kShearMinYZ: int = 10
    kTranslateMaxX: int = 19
    kTranslateMaxY: int = 21
    kTranslateMaxZ: int = 23
    kTranslateMinX: int = 18
    kTranslateMinY: int = 20
    kTranslateMinZ: int = 22
    def limitValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def resetFromRestPosition(self, *args: Any, **kwargs: Any) -> Any: ...
    def restPosition(self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateBy(self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateByQuaternion(self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateOrientation(self, *args: Any, **kwargs: Any) -> Any: ...
    def rotatePivot(self, *args: Any, **kwargs: Any) -> Any: ...
    def rotatePivotTranslation(self, *args: Any, **kwargs: Any) -> Any: ...
    def rotationOrder(self, *args: Any, **kwargs: Any) -> Any: ...
    def scaleBy(self, *args: Any, **kwargs: Any) -> Any: ...
    def scalePivot(self, *args: Any, **kwargs: Any) -> Any: ...
    def scalePivotTranslation(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    def setLimit(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRestPosition(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotateOrientation(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotatePivot(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotatePivotTranslation(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotation(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotationOrder(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotationQuaternion(self, *args: Any, **kwargs: Any) -> Any: ...
    def setScale(self, *args: Any, **kwargs: Any) -> Any: ...
    def setScalePivot(self, *args: Any, **kwargs: Any) -> Any: ...
    def setScalePivotTranslation(self, *args: Any, **kwargs: Any) -> Any: ...
    def setShear(self, *args: Any, **kwargs: Any) -> Any: ...
    def setTranslation(self, *args: Any, **kwargs: Any) -> Any: ...
    def shearBy(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0E2CC0>
    def transformation(self, *args: Any, **kwargs: Any) -> Any: ...
    def translateBy(self, *args: Any, **kwargs: Any) -> Any: ...
    def translation(self, *args: Any, **kwargs: Any) -> Any: ...

def MFnTransform_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnTripleIndexedComponent(MFnComponent):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addElement(self, *args: Any, **kwargs: Any) -> Any: ...
    def addElements(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def getCompleteData(self, *args: Any, **kwargs: Any) -> Any: ...
    def getElement(self, *args: Any, **kwargs: Any) -> Any: ...
    def getElements(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCompleteData(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB11F540>

def MFnTripleIndexedComponent_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnTypedAttribute(MFnAttribute):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def attrType(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDefault(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDefault(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB11F900>

def MFnTypedAttribute_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnUInt64ArrayData(MFnData):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def array(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def copyTo(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB11FBD0>

def MFnUInt64ArrayData_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnUint64SingleIndexedComponent(MFnComponent):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addElement(self, *args: Any, **kwargs: Any) -> Any: ...
    def addElements(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def element(self, *args: Any, **kwargs: Any) -> Any: ...
    def getCompleteData(self, *args: Any, **kwargs: Any) -> Any: ...
    def getElements(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCompleteData(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB11FEA0>

def MFnUint64SingleIndexedComponent_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnUnitAttribute(MFnAttribute):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDefault(self, *args: Any, **kwargs: Any) -> Any: ...
    def getMax(self, *args: Any, **kwargs: Any) -> Any: ...
    def getMin(self, *args: Any, **kwargs: Any) -> Any: ...
    def getSoftMax(self, *args: Any, **kwargs: Any) -> Any: ...
    def getSoftMin(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasMax(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasMin(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasSoftMax(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasSoftMin(self, *args: Any, **kwargs: Any) -> Any: ...
    kLast: int = 4
    kTime: int = 3
    def setDefault(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMax(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMin(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSoftMax(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSoftMin(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB122270>
    def unitType(self, *args: Any, **kwargs: Any) -> Any: ...

def MFnUnitAttribute_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnVectorArrayData(MFnData):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def array(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def copyTo(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB122900>

def MFnVectorArrayData_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnVolumeLight(MFnPointLight):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def arc(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def colorRamp(self, *args: Any, **kwargs: Any) -> Any: ...
    def coneEndRadius(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def emitAmbient(self, *args: Any, **kwargs: Any) -> Any: ...
    def lightShape(self, *args: Any, **kwargs: Any) -> Any: ...
    def penumbraRamp(self, *args: Any, **kwargs: Any) -> Any: ...
    def setArc(self, *args: Any, **kwargs: Any) -> Any: ...
    def setConeEndRadius(self, *args: Any, **kwargs: Any) -> Any: ...
    def setEmitAmbient(self, *args: Any, **kwargs: Any) -> Any: ...
    def setLightShape(self, *args: Any, **kwargs: Any) -> Any: ...
    def setShadowAngle(self, *args: Any, **kwargs: Any) -> Any: ...
    def setVolumeLightDirection(self, *args: Any, **kwargs: Any) -> Any: ...
    def shadowAngle(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB122C20>
    def volumeLightDirection(self, *args: Any, **kwargs: Any) -> Any: ...

def MFnVolumeLight_className(*args: Any, **kwargs: Any) -> Any: ...
class MGlobal(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def addToModel(self, *args: Any, **kwargs: Any) -> Any: ...
    def addToModelAt(self, *args: Any, **kwargs: Any) -> Any: ...
    def animSelectionMask(self, *args: Any, **kwargs: Any) -> Any: ...
    def apiVersion(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def clearSelectionList(self, *args: Any, **kwargs: Any) -> Any: ...
    def closeErrorLog(self, *args: Any, **kwargs: Any) -> Any: ...
    def componentSelectionMask(self, *args: Any, **kwargs: Any) -> Any: ...
    def currentToolContext(self, *args: Any, **kwargs: Any) -> Any: ...
    def customVersion(self, *args: Any, **kwargs: Any) -> Any: ...
    def customVersionClient(self, *args: Any, **kwargs: Any) -> Any: ...
    def customVersionMajor(self, *args: Any, **kwargs: Any) -> Any: ...
    def customVersionMinor(self, *args: Any, **kwargs: Any) -> Any: ...
    def customVersionString(self, *args: Any, **kwargs: Any) -> Any: ...
    def defaultErrorLogPathName(self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteNode(self, *args: Any, **kwargs: Any) -> Any: ...
    def disableStow(self, *args: Any, **kwargs: Any) -> Any: ...
    def displayError(self, *args: Any, **kwargs: Any) -> Any: ...
    def displayInfo(self, *args: Any, **kwargs: Any) -> Any: ...
    def displayWarning(self, *args: Any, **kwargs: Any) -> Any: ...
    def doErrorLogEntry(self, *args: Any, **kwargs: Any) -> Any: ...
    def errorLogPathName(self, *args: Any, **kwargs: Any) -> Any: ...
    def errorLoggingIsOn(self, *args: Any, **kwargs: Any) -> Any: ...
    def executeCommand(self, *args: Any, **kwargs: Any) -> Any: ...
    def executeCommandOnIdle(self, *args: Any, **kwargs: Any) -> Any: ...
    def executeCommandStringResult(self, *args: Any, **kwargs: Any) -> Any: ...
    def executePythonCommand(self, *args: Any, **kwargs: Any) -> Any: ...
    def executePythonCommandOnIdle(self, *args: Any, **kwargs: Any) -> Any: ...
    def executePythonCommandStringResult(self, *args: Any, **kwargs: Any) -> Any: ...
    def getAbsolutePathToResources(self, *args: Any, **kwargs: Any) -> Any: ...
    def getActiveSelectionList(self, *args: Any, **kwargs: Any) -> Any: ...
    def getAssociatedSets(self, *args: Any, **kwargs: Any) -> Any: ...
    def getFunctionSetList(self, *args: Any, **kwargs: Any) -> Any: ...
    def getHiliteList(self, *args: Any, **kwargs: Any) -> Any: ...
    def getLiveList(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPreselectionHiliteList(self, *args: Any, **kwargs: Any) -> Any: ...
    def getRichSelection(self, *args: Any, **kwargs: Any) -> Any: ...
    def getSelectionListByName(self, *args: Any, **kwargs: Any) -> Any: ...
    def getUILanguage(self, *args: Any, **kwargs: Any) -> Any: ...
    def initOptionVar(self, *args: Any, **kwargs: Any) -> Any: ...
    def isCustomVersion(self, *args: Any, **kwargs: Any) -> Any: ...
    def isDefaultLanguage(self, *args: Any, **kwargs: Any) -> Any: ...
    def isInCrashHandler(self, *args: Any, **kwargs: Any) -> Any: ...
    def isRedoing(self, *args: Any, **kwargs: Any) -> Any: ...
    def isSelected(self, *args: Any, **kwargs: Any) -> Any: ...
    def isUndoing(self, *args: Any, **kwargs: Any) -> Any: ...
    def isYAxisUp(self, *args: Any, **kwargs: Any) -> Any: ...
    def isZAxisUp(self, *args: Any, **kwargs: Any) -> Any: ...
    kAddToHeadOfList: int = 4
    kAddToList: int = 2
    kBaseUIMode: int = 3
    kBatch: int = 1
    kComplete: int = 0
    kInteractive: int = 0
    kLibraryApp: int = 2
    kRemoveFromList: int = 3
    kReplaceList: int = 0
    kRestricted: int = 1
    kSelectComponentMode: int = 1
    kSelectLeafMode: int = 3
    kSelectObjectMode: int = 0
    kSelectRootMode: int = 2
    kSelectTemplateMode: int = 4
    kSurfaceSelectMethod: int = 0
    kWireframeSelectMethod: int = 1
    kXORWithList: int = 1
    def mayaFeatureSet(self, *args: Any, **kwargs: Any) -> Any: ...
    def mayaName(self, *args: Any, **kwargs: Any) -> Any: ...
    def mayaState(self, *args: Any, **kwargs: Any) -> Any: ...
    def mayaVersion(self, *args: Any, **kwargs: Any) -> Any: ...
    def miscSelectionMask(self, *args: Any, **kwargs: Any) -> Any: ...
    def objectSelectionMask(self, *args: Any, **kwargs: Any) -> Any: ...
    def optionVarDoubleValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def optionVarExists(self, *args: Any, **kwargs: Any) -> Any: ...
    def optionVarIntValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def optionVarStringValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeFromModel(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeOptionVar(self, *args: Any, **kwargs: Any) -> Any: ...
    def resetToDefaultErrorLogPathName(self, *args: Any, **kwargs: Any) -> Any: ...
    def select(self, *args: Any, **kwargs: Any) -> Any: ...
    def selectByName(self, *args: Any, **kwargs: Any) -> Any: ...
    def selectCommand(self, *args: Any, **kwargs: Any) -> Any: ...
    def selectFromScreen(self, *args: Any, **kwargs: Any) -> Any: ...
    def selectionMethod(self, *args: Any, **kwargs: Any) -> Any: ...
    def selectionMode(self, *args: Any, **kwargs: Any) -> Any: ...
    def setActiveSelectionList(self, *args: Any, **kwargs: Any) -> Any: ...
    def setAnimSelectionMask(self, *args: Any, **kwargs: Any) -> Any: ...
    def setComponentSelectionMask(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDisableStow(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDisplayCVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def setErrorLogPathName(self, *args: Any, **kwargs: Any) -> Any: ...
    def setHiliteList(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMiscSelectionMask(self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectSelectionMask(self, *args: Any, **kwargs: Any) -> Any: ...
    def setOptionVarValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPreselectionHiliteList(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRichSelection(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSelectionMode(self, *args: Any, **kwargs: Any) -> Any: ...
    def setTrackSelectionOrderEnabled(self, *args: Any, **kwargs: Any) -> Any: ...
    def setYAxisUp(self, *args: Any, **kwargs: Any) -> Any: ...
    def setZAxisUp(self, *args: Any, **kwargs: Any) -> Any: ...
    def sourceFile(self, *args: Any, **kwargs: Any) -> Any: ...
    def startErrorLogging(self, *args: Any, **kwargs: Any) -> Any: ...
    def stopErrorLogging(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB124270>
    def trackSelectionOrderEnabled(self, *args: Any, **kwargs: Any) -> Any: ...
    def unselect(self, *args: Any, **kwargs: Any) -> Any: ...
    def unselectByName(self, *args: Any, **kwargs: Any) -> Any: ...
    def upAxis(self, *args: Any, **kwargs: Any) -> Any: ...
    def viewFrame(self, *args: Any, **kwargs: Any) -> Any: ...

def MGlobal_addToModel(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_addToModelAt(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_animSelectionMask(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_apiVersion(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_className(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_clearSelectionList(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_closeErrorLog(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_componentSelectionMask(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_currentToolContext(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_customVersion(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_customVersionClient(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_customVersionMajor(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_customVersionMinor(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_customVersionString(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_defaultErrorLogPathName(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_deleteNode(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_disableStow(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_displayError(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_displayInfo(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_displayWarning(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_doErrorLogEntry(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_errorLogPathName(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_errorLoggingIsOn(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_executeCommand(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_executeCommandOnIdle(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_executeCommandStringResult(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_executePythonCommand(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_executePythonCommandOnIdle(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_executePythonCommandStringResult(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_getAbsolutePathToResources(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_getActiveSelectionList(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_getAssociatedSets(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_getFunctionSetList(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_getHiliteList(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_getLiveList(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_getPreselectionHiliteList(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_getRichSelection(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_getSelectionListByName(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_getUILanguage(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_initOptionVar(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_isCustomVersion(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_isDefaultLanguage(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_isInCrashHandler(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_isRedoing(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_isSelected(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_isUndoing(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_isYAxisUp(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_isZAxisUp(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_mayaFeatureSet(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_mayaName(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_mayaState(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_mayaVersion(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_miscSelectionMask(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_objectSelectionMask(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_optionVarDoubleValue(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_optionVarExists(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_optionVarIntValue(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_optionVarStringValue(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_removeFromModel(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_removeOptionVar(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_resetToDefaultErrorLogPathName(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_select(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_selectByName(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_selectCommand(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_selectFromScreen(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_selectionMethod(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_selectionMode(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_setActiveSelectionList(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_setAnimSelectionMask(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_setComponentSelectionMask(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_setDisableStow(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_setDisplayCVs(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_setErrorLogPathName(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_setHiliteList(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_setMiscSelectionMask(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_setObjectSelectionMask(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_setOptionVarValue(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_setPreselectionHiliteList(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_setRichSelection(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_setSelectionMode(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_setTrackSelectionOrderEnabled(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_setYAxisUp(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_setZAxisUp(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_sourceFile(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_startErrorLogging(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_stopErrorLogging(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_trackSelectionOrderEnabled(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_unselect(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_unselectByName(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_upAxis(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_viewFrame(*args: Any, **kwargs: Any) -> Any: ...
class MIffFile(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def beginGet(self, *args: Any, **kwargs: Any) -> Any: ...
    def beginReadGroup(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def close(self, *args: Any, **kwargs: Any) -> Any: ...
    def endGet(self, *args: Any, **kwargs: Any) -> Any: ...
    def endReadGroup(self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self, *args: Any, **kwargs: Any) -> Any: ...
    def getChunk(self, *args: Any, **kwargs: Any) -> Any: ...
    def iffGetFloat(self, *args: Any, **kwargs: Any) -> Any: ...
    def iffGetInt(self, *args: Any, **kwargs: Any) -> Any: ...
    def iffGetShort(self, *args: Any, **kwargs: Any) -> Any: ...
    def isActive(self, *args: Any, **kwargs: Any) -> Any: ...
    def open(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB126F40>

def MIffFile_className(*args: Any, **kwargs: Any) -> Any: ...
class MIffTag(object):
    """
    """
    def __eq__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    kCAT: MIffTag = <maya.OpenMaya.MIffTag; proxy of <Swig Object of type 'MIffTag *' at 0x00000218AB125CF0> >
    kCAT4: MIffTag = <maya.OpenMaya.MIffTag; proxy of <Swig Object of type 'MIffTag *' at 0x00000218AB125FC0> >
    kCAT8: MIffTag = <maya.OpenMaya.MIffTag; proxy of <Swig Object of type 'MIffTag *' at 0x00000218AB128090> >
    kFOR4: MIffTag = <maya.OpenMaya.MIffTag; proxy of <Swig Object of type 'MIffTag *' at 0x00000218AB125EA0> >
    kFOR8: MIffTag = <maya.OpenMaya.MIffTag; proxy of <Swig Object of type 'MIffTag *' at 0x00000218AB125F30> >
    kFORM: MIffTag = <maya.OpenMaya.MIffTag; proxy of <Swig Object of type 'MIffTag *' at 0x00000218AB125C60> >
    kLIS4: MIffTag = <maya.OpenMaya.MIffTag; proxy of <Swig Object of type 'MIffTag *' at 0x00000218AB128120> >
    kLIS8: MIffTag = <maya.OpenMaya.MIffTag; proxy of <Swig Object of type 'MIffTag *' at 0x00000218AB1281B0> >
    kLIST: MIffTag = <maya.OpenMaya.MIffTag; proxy of <Swig Object of type 'MIffTag *' at 0x00000218AB125D80> >
    kPRO4: MIffTag = <maya.OpenMaya.MIffTag; proxy of <Swig Object of type 'MIffTag *' at 0x00000218AB128240> >
    kPRO8: MIffTag = <maya.OpenMaya.MIffTag; proxy of <Swig Object of type 'MIffTag *' at 0x00000218AB1282D0> >
    kPROP: MIffTag = <maya.OpenMaya.MIffTag; proxy of <Swig Object of type 'MIffTag *' at 0x00000218AB125E10> >
    thisown: property = <property object at 0x00000218AB1274A0>

class MImage(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def convertPixelFormat(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def depth(self, *args: Any, **kwargs: Any) -> Any: ...
    def depthMap(self, *args: Any, **kwargs: Any) -> Any: ...
    def filter(self, *args: Any, **kwargs: Any) -> Any: ...
    def filterExists(self, *args: Any, **kwargs: Any) -> Any: ...
    def floatPixels(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDepthMapRange(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDepthMapSize(self, *args: Any, **kwargs: Any) -> Any: ...
    def getSize(self, *args: Any, **kwargs: Any) -> Any: ...
    def haveDepth(self, *args: Any, **kwargs: Any) -> Any: ...
    def isRGBA(self, *args: Any, **kwargs: Any) -> Any: ...
    kByte: int = 1
    kFloat: int = 2
    kHeightFieldBumpFormat: int = 1
    kNoFormat: int = 0
    kNormalMapBumpFormat: int = 2
    kUnknown: int = 0
    kUnknownFormat: int = 3
    def pixelType(self, *args: Any, **kwargs: Any) -> Any: ...
    def pixels(self, *args: Any, **kwargs: Any) -> Any: ...
    def readDepthMap(self, *args: Any, **kwargs: Any) -> Any: ...
    def readFromFile(self, *args: Any, **kwargs: Any) -> Any: ...
    def readFromTextureNode(self, *args: Any, **kwargs: Any) -> Any: ...
    def release(self, *args: Any, **kwargs: Any) -> Any: ...
    def resize(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDepthMap(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFloatPixels(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPixels(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRGBA(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB1279A0>
    def verticalFlip(self, *args: Any, **kwargs: Any) -> Any: ...
    def writeToFile(self, *args: Any, **kwargs: Any) -> Any: ...
    def writeToFileWithDepth(self, *args: Any, **kwargs: Any) -> Any: ...

class MImageFileInfo(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def channels(self, *args: Any, **kwargs: Any) -> Any: ...
    def hardwareType(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAlpha(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasMipMaps(self, *args: Any, **kwargs: Any) -> Any: ...
    def height(self, *args: Any, **kwargs: Any) -> Any: ...
    def imageType(self, *args: Any, **kwargs: Any) -> Any: ...
    kHwTexture1D: int = 1
    kHwTexture2D: int = 2
    kHwTexture3D: int = 3
    kHwTextureCubeMap: int = 5
    kHwTextureRectangle: int = 4
    kHwTextureUnknown: int = 0
    kImageTypeBump: int = 3
    kImageTypeColor: int = 1
    kImageTypeNormal: int = 2
    kImageTypeUnknown: int = 0
    def numberOfImages(self, *args: Any, **kwargs: Any) -> Any: ...
    def pixelType(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB1275E0>
    def width(self, *args: Any, **kwargs: Any) -> Any: ...

def MImage_className(*args: Any, **kwargs: Any) -> Any: ...
def MImage_filterExists(*args: Any, **kwargs: Any) -> Any: ...
class MInt64Array(object):
    """
    """
    def __add__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __delitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __eq__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __getitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __iadd__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __len__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __ne__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __radd__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __setitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def append(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    def sizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB12BB80>

def MInt64Array_className(*args: Any, **kwargs: Any) -> Any: ...
class MIntArray(object):
    """
    """
    def __add__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __delitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __eq__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __getitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __iadd__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __len__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __ne__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __radd__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __setitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def append(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    def sizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB12B360>

def MIntArray_className(*args: Any, **kwargs: Any) -> Any: ...
class MItCurveCV(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __next__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def currentItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def cv(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasHistoryOnCreate(self, *args: Any, **kwargs: Any) -> Any: ...
    def index(self, *args: Any, **kwargs: Any) -> Any: ...
    def isDone(self, *args: Any, **kwargs: Any) -> Any: ...
    def next(self, *args: Any, **kwargs: Any) -> Any: ...
    def position(self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPosition(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB12E310>
    def translateBy(self, *args: Any, **kwargs: Any) -> Any: ...
    def updateCurve(self, *args: Any, **kwargs: Any) -> Any: ...

def MItCurveCV_className(*args: Any, **kwargs: Any) -> Any: ...
class MItDag(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __next__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def currentItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def depth(self, *args: Any, **kwargs: Any) -> Any: ...
    def fullPathName(self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllPaths(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPath(self, *args: Any, **kwargs: Any) -> Any: ...
    def getType(self, *args: Any, **kwargs: Any) -> Any: ...
    def instanceCount(self, *args: Any, **kwargs: Any) -> Any: ...
    def isDone(self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanced(self, *args: Any, **kwargs: Any) -> Any: ...
    def item(self, *args: Any, **kwargs: Any) -> Any: ...
    kBreadthFirst: int = 2
    kDepthFirst: int = 1
    kInvalidType: int = 0
    def next(self, *args: Any, **kwargs: Any) -> Any: ...
    def partialPathName(self, *args: Any, **kwargs: Any) -> Any: ...
    def prune(self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self, *args: Any, **kwargs: Any) -> Any: ...
    def root(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB12E810>
    def traverseUnderWorld(self, *args: Any, **kwargs: Any) -> Any: ...
    def willTraverseUnderWorld(self, *args: Any, **kwargs: Any) -> Any: ...

def MItDag_className(*args: Any, **kwargs: Any) -> Any: ...
class MItDependencyGraph(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __next__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def atNodeLevel(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def currentDirection(self, *args: Any, **kwargs: Any) -> Any: ...
    def currentFilter(self, *args: Any, **kwargs: Any) -> Any: ...
    def currentItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def currentLevel(self, *args: Any, **kwargs: Any) -> Any: ...
    def currentRelationship(self, *args: Any, **kwargs: Any) -> Any: ...
    def currentTraversal(self, *args: Any, **kwargs: Any) -> Any: ...
    def disablePruningOnFilter(self, *args: Any, **kwargs: Any) -> Any: ...
    def enablePruningOnFilter(self, *args: Any, **kwargs: Any) -> Any: ...
    def getNodePath(self, *args: Any, **kwargs: Any) -> Any: ...
    def getNodesVisited(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPlugPath(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPlugsVisited(self, *args: Any, **kwargs: Any) -> Any: ...
    def isDirectionDownStream(self, *args: Any, **kwargs: Any) -> Any: ...
    def isDone(self, *args: Any, **kwargs: Any) -> Any: ...
    def isPruningOnFilter(self, *args: Any, **kwargs: Any) -> Any: ...
    def isTraversalDepthFirst(self, *args: Any, **kwargs: Any) -> Any: ...
    def isTraversingOverWorldSpaceDependents(self, *args: Any, **kwargs: Any) -> Any: ...
    kBreadthFirst: int = 1
    kConnectedTo: int = 1
    kDependsOn: int = 0
    kDepthFirst: int = 0
    kDownstream: int = 0
    kEvaluationGraph: int = 2
    kNodeLevel: int = 0
    kPlugLevel: int = 1
    kUpstream: int = 1
    def next(self, *args: Any, **kwargs: Any) -> Any: ...
    def nodeDepth(self, *args: Any, **kwargs: Any) -> Any: ...
    def previousPlug(self, *args: Any, **kwargs: Any) -> Any: ...
    def prune(self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self, *args: Any, **kwargs: Any) -> Any: ...
    def resetFilter(self, *args: Any, **kwargs: Any) -> Any: ...
    def resetTo(self, *args: Any, **kwargs: Any) -> Any: ...
    def rootNode(self, *args: Any, **kwargs: Any) -> Any: ...
    def rootPlug(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCurrentFilter(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCurrentRelationship(self, *args: Any, **kwargs: Any) -> Any: ...
    def setTraversalOverWorldSpaceDependents(self, *args: Any, **kwargs: Any) -> Any: ...
    def thisNode(self, *args: Any, **kwargs: Any) -> Any: ...
    def thisNodeHasUnknownType(self, *args: Any, **kwargs: Any) -> Any: ...
    def thisPlug(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB12EEF0>
    def toggleDirection(self, *args: Any, **kwargs: Any) -> Any: ...
    def toggleLevel(self, *args: Any, **kwargs: Any) -> Any: ...
    def toggleTraversal(self, *args: Any, **kwargs: Any) -> Any: ...

def MItDependencyGraph_className(*args: Any, **kwargs: Any) -> Any: ...
class MItDependencyNodes(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __next__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def isDone(self, *args: Any, **kwargs: Any) -> Any: ...
    def item(self, *args: Any, **kwargs: Any) -> Any: ...
    def next(self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self, *args: Any, **kwargs: Any) -> Any: ...
    def thisNode(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB12FBD0>

def MItDependencyNodes_className(*args: Any, **kwargs: Any) -> Any: ...
class MItEdits(object):
    """
    """
    ALL_EDITS: int = 1
    SUCCESSFUL_EDITS: int = 0
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __next__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addRemoveAttrEdit(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def connectDisconnectEdit(self, *args: Any, **kwargs: Any) -> Any: ...
    def currentEditString(self, *args: Any, **kwargs: Any) -> Any: ...
    def currentEditType(self, *args: Any, **kwargs: Any) -> Any: ...
    def edit(self, *args: Any, **kwargs: Any) -> Any: ...
    def fcurveEdit(self, *args: Any, **kwargs: Any) -> Any: ...
    def isDone(self, *args: Any, **kwargs: Any) -> Any: ...
    def isReverse(self, *args: Any, **kwargs: Any) -> Any: ...
    kForward: int = 0
    kReverse: int = 1
    def next(self, *args: Any, **kwargs: Any) -> Any: ...
    def parentingEdit(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCurrentEdit(self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self, *args: Any, **kwargs: Any) -> Any: ...
    def setAttrEdit(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB12FEF0>

def MItEdits_className(*args: Any, **kwargs: Any) -> Any: ...
class MItGeometry(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __next__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def allPositions(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def component(self, *args: Any, **kwargs: Any) -> Any: ...
    def count(self, *args: Any, **kwargs: Any) -> Any: ...
    def currentItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def exactCount(self, *args: Any, **kwargs: Any) -> Any: ...
    def index(self, *args: Any, **kwargs: Any) -> Any: ...
    def isDone(self, *args: Any, **kwargs: Any) -> Any: ...
    def next(self, *args: Any, **kwargs: Any) -> Any: ...
    def normal(self, *args: Any, **kwargs: Any) -> Any: ...
    def position(self, *args: Any, **kwargs: Any) -> Any: ...
    def positionIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self, *args: Any, **kwargs: Any) -> Any: ...
    def setAllPositions(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPosition(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB131810>
    def weight(self, *args: Any, **kwargs: Any) -> Any: ...

def MItGeometry_className(*args: Any, **kwargs: Any) -> Any: ...
class MItInstancer(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __next__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def instancer(self, *args: Any, **kwargs: Any) -> Any: ...
    def instancerId(self, *args: Any, **kwargs: Any) -> Any: ...
    def instancerPath(self, *args: Any, **kwargs: Any) -> Any: ...
    def isDone(self, *args: Any, **kwargs: Any) -> Any: ...
    def matrix(self, *args: Any, **kwargs: Any) -> Any: ...
    def next(self, *args: Any, **kwargs: Any) -> Any: ...
    def nextInstancer(self, *args: Any, **kwargs: Any) -> Any: ...
    def nextParticle(self, *args: Any, **kwargs: Any) -> Any: ...
    def particleId(self, *args: Any, **kwargs: Any) -> Any: ...
    def path(self, *args: Any, **kwargs: Any) -> Any: ...
    def pathId(self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB131E50>

def MItInstancer_className(*args: Any, **kwargs: Any) -> Any: ...
class MItMeshEdge(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __next__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def center(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def cleanupSmoothing(self, *args: Any, **kwargs: Any) -> Any: ...
    def connectedToEdge(self, *args: Any, **kwargs: Any) -> Any: ...
    def connectedToFace(self, *args: Any, **kwargs: Any) -> Any: ...
    def count(self, *args: Any, **kwargs: Any) -> Any: ...
    def currentItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def edge(self, *args: Any, **kwargs: Any) -> Any: ...
    def geomChanged(self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedEdges(self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedFaces(self, *args: Any, **kwargs: Any) -> Any: ...
    def getLength(self, *args: Any, **kwargs: Any) -> Any: ...
    def index(self, *args: Any, **kwargs: Any) -> Any: ...
    def isDone(self, *args: Any, **kwargs: Any) -> Any: ...
    def isSmooth(self, *args: Any, **kwargs: Any) -> Any: ...
    def next(self, *args: Any, **kwargs: Any) -> Any: ...
    def numConnectedEdges(self, *args: Any, **kwargs: Any) -> Any: ...
    def numConnectedFaces(self, *args: Any, **kwargs: Any) -> Any: ...
    def onBoundary(self, *args: Any, **kwargs: Any) -> Any: ...
    def point(self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self, *args: Any, **kwargs: Any) -> Any: ...
    def setIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPoint(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSmoothing(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB135400>
    def updateSurface(self, *args: Any, **kwargs: Any) -> Any: ...

def MItMeshEdge_className(*args: Any, **kwargs: Any) -> Any: ...
class MItMeshFaceVertex(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __next__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def currentItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def faceId(self, *args: Any, **kwargs: Any) -> Any: ...
    def faceVertId(self, *args: Any, **kwargs: Any) -> Any: ...
    def faceVertex(self, *args: Any, **kwargs: Any) -> Any: ...
    def geomChanged(self, *args: Any, **kwargs: Any) -> Any: ...
    def getBinormal(self, *args: Any, **kwargs: Any) -> Any: ...
    def getColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def getColorIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def getNormal(self, *args: Any, **kwargs: Any) -> Any: ...
    def getTangent(self, *args: Any, **kwargs: Any) -> Any: ...
    def getUV(self, *args: Any, **kwargs: Any) -> Any: ...
    def getUVIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def isDone(self, *args: Any, **kwargs: Any) -> Any: ...
    def next(self, *args: Any, **kwargs: Any) -> Any: ...
    def normalId(self, *args: Any, **kwargs: Any) -> Any: ...
    def position(self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self, *args: Any, **kwargs: Any) -> Any: ...
    def setIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def tangentId(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB135D10>
    def updateSurface(self, *args: Any, **kwargs: Any) -> Any: ...
    def vertId(self, *args: Any, **kwargs: Any) -> Any: ...

def MItMeshFaceVertex_className(*args: Any, **kwargs: Any) -> Any: ...
class MItMeshPolygon(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __next__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def center(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def count(self, *args: Any, **kwargs: Any) -> Any: ...
    def currentItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def geomChanged(self, *args: Any, **kwargs: Any) -> Any: ...
    def getArea(self, *args: Any, **kwargs: Any) -> Any: ...
    def getAxisAtUV(self, *args: Any, **kwargs: Any) -> Any: ...
    def getColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def getColorIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def getColorIndices(self, *args: Any, **kwargs: Any) -> Any: ...
    def getColors(self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedEdges(self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedFaces(self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedVertices(self, *args: Any, **kwargs: Any) -> Any: ...
    def getEdges(self, *args: Any, **kwargs: Any) -> Any: ...
    def getNormal(self, *args: Any, **kwargs: Any) -> Any: ...
    def getNormals(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPointAtUV(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPoints(self, *args: Any, **kwargs: Any) -> Any: ...
    def getTriangle(self, *args: Any, **kwargs: Any) -> Any: ...
    def getTriangles(self, *args: Any, **kwargs: Any) -> Any: ...
    def getUV(self, *args: Any, **kwargs: Any) -> Any: ...
    def getUVArea(self, *args: Any, **kwargs: Any) -> Any: ...
    def getUVAtPoint(self, *args: Any, **kwargs: Any) -> Any: ...
    def getUVIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def getUVSetNames(self, *args: Any, **kwargs: Any) -> Any: ...
    def getUVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def getVertices(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasValidTriangulation(self, *args: Any, **kwargs: Any) -> Any: ...
    def index(self, *args: Any, **kwargs: Any) -> Any: ...
    def isConnectedToEdge(self, *args: Any, **kwargs: Any) -> Any: ...
    def isConnectedToFace(self, *args: Any, **kwargs: Any) -> Any: ...
    def isConnectedToVertex(self, *args: Any, **kwargs: Any) -> Any: ...
    def isConvex(self, *args: Any, **kwargs: Any) -> Any: ...
    def isDone(self, *args: Any, **kwargs: Any) -> Any: ...
    def isHoled(self, *args: Any, **kwargs: Any) -> Any: ...
    def isLamina(self, *args: Any, **kwargs: Any) -> Any: ...
    def isPlanar(self, *args: Any, **kwargs: Any) -> Any: ...
    def isStarlike(self, *args: Any, **kwargs: Any) -> Any: ...
    def isUVReversed(self, *args: Any, **kwargs: Any) -> Any: ...
    def next(self, *args: Any, **kwargs: Any) -> Any: ...
    def normalIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def numColors(self, *args: Any, **kwargs: Any) -> Any: ...
    def numConnectedEdges(self, *args: Any, **kwargs: Any) -> Any: ...
    def numConnectedFaces(self, *args: Any, **kwargs: Any) -> Any: ...
    def numTriangles(self, *args: Any, **kwargs: Any) -> Any: ...
    def onBoundary(self, *args: Any, **kwargs: Any) -> Any: ...
    def point(self, *args: Any, **kwargs: Any) -> Any: ...
    def polygon(self, *args: Any, **kwargs: Any) -> Any: ...
    def polygonVertexCount(self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self, *args: Any, **kwargs: Any) -> Any: ...
    def setIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPoint(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPoints(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUV(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def tangentIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB137630>
    def updateSurface(self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def zeroArea(self, *args: Any, **kwargs: Any) -> Any: ...
    def zeroUVArea(self, *args: Any, **kwargs: Any) -> Any: ...

def MItMeshPolygon_className(*args: Any, **kwargs: Any) -> Any: ...
class MItMeshVertex(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __next__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def connectedToEdge(self, *args: Any, **kwargs: Any) -> Any: ...
    def connectedToFace(self, *args: Any, **kwargs: Any) -> Any: ...
    def count(self, *args: Any, **kwargs: Any) -> Any: ...
    def currentItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def geomChanged(self, *args: Any, **kwargs: Any) -> Any: ...
    def getColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def getColorIndices(self, *args: Any, **kwargs: Any) -> Any: ...
    def getColors(self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedEdges(self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedFaces(self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedVertices(self, *args: Any, **kwargs: Any) -> Any: ...
    def getNormal(self, *args: Any, **kwargs: Any) -> Any: ...
    def getNormalIndices(self, *args: Any, **kwargs: Any) -> Any: ...
    def getNormals(self, *args: Any, **kwargs: Any) -> Any: ...
    def getOppositeVertex(self, *args: Any, **kwargs: Any) -> Any: ...
    def getUV(self, *args: Any, **kwargs: Any) -> Any: ...
    def getUVIndices(self, *args: Any, **kwargs: Any) -> Any: ...
    def getUVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def index(self, *args: Any, **kwargs: Any) -> Any: ...
    def isDone(self, *args: Any, **kwargs: Any) -> Any: ...
    def next(self, *args: Any, **kwargs: Any) -> Any: ...
    def numConnectedEdges(self, *args: Any, **kwargs: Any) -> Any: ...
    def numConnectedFaces(self, *args: Any, **kwargs: Any) -> Any: ...
    def numUVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def onBoundary(self, *args: Any, **kwargs: Any) -> Any: ...
    def position(self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self, *args: Any, **kwargs: Any) -> Any: ...
    def setIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPosition(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUV(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUVs(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB138A90>
    def translateBy(self, *args: Any, **kwargs: Any) -> Any: ...
    def updateSurface(self, *args: Any, **kwargs: Any) -> Any: ...
    def vertex(self, *args: Any, **kwargs: Any) -> Any: ...

def MItMeshVertex_className(*args: Any, **kwargs: Any) -> Any: ...
class MItSelectionList(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __next__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDagPath(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDependNode(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPlug(self, *args: Any, **kwargs: Any) -> Any: ...
    def getStrings(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasComponents(self, *args: Any, **kwargs: Any) -> Any: ...
    def isDone(self, *args: Any, **kwargs: Any) -> Any: ...
    def itemType(self, *args: Any, **kwargs: Any) -> Any: ...
    kAnimSelectionItem: int = 1
    kDNselectionItem: int = 2
    kDagSelectionItem: int = 0
    kPlugSelectionItem: int = 3
    kUnknownItem: int = -1
    def next(self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFilter(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB13A720>

def MItSelectionList_className(*args: Any, **kwargs: Any) -> Any: ...
class MItSubdEdge(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __next__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def index(self, *args: Any, **kwargs: Any) -> Any: ...
    def isBoundary(self, *args: Any, **kwargs: Any) -> Any: ...
    def isDone(self, *args: Any, **kwargs: Any) -> Any: ...
    def isSharp(self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self, *args: Any, **kwargs: Any) -> Any: ...
    def level(self, *args: Any, **kwargs: Any) -> Any: ...
    def next(self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self, *args: Any, **kwargs: Any) -> Any: ...
    def setLevel(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSharpness(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB13AB80>

def MItSubdEdge_className(*args: Any, **kwargs: Any) -> Any: ...
class MItSubdFace(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __next__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def index(self, *args: Any, **kwargs: Any) -> Any: ...
    def isDone(self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self, *args: Any, **kwargs: Any) -> Any: ...
    def level(self, *args: Any, **kwargs: Any) -> Any: ...
    def next(self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self, *args: Any, **kwargs: Any) -> Any: ...
    def setLevel(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB13C090>

def MItSubdFace_className(*args: Any, **kwargs: Any) -> Any: ...
class MItSubdVertex(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __next__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def index(self, *args: Any, **kwargs: Any) -> Any: ...
    def isDone(self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self, *args: Any, **kwargs: Any) -> Any: ...
    def level(self, *args: Any, **kwargs: Any) -> Any: ...
    def next(self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self, *args: Any, **kwargs: Any) -> Any: ...
    def setLevel(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB13C450>

def MItSubdVertex_className(*args: Any, **kwargs: Any) -> Any: ...
class MItSurfaceCV(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __next__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def currentItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def cv(self, *args: Any, **kwargs: Any) -> Any: ...
    def getIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasHistoryOnCreate(self, *args: Any, **kwargs: Any) -> Any: ...
    def index(self, *args: Any, **kwargs: Any) -> Any: ...
    def isDone(self, *args: Any, **kwargs: Any) -> Any: ...
    def isRowDone(self, *args: Any, **kwargs: Any) -> Any: ...
    def next(self, *args: Any, **kwargs: Any) -> Any: ...
    def nextRow(self, *args: Any, **kwargs: Any) -> Any: ...
    def position(self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPosition(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB13C810>
    def translateBy(self, *args: Any, **kwargs: Any) -> Any: ...
    def updateSurface(self, *args: Any, **kwargs: Any) -> Any: ...

def MItSurfaceCV_className(*args: Any, **kwargs: Any) -> Any: ...
class MIteratorType(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def filterListEnabled(self, *args: Any, **kwargs: Any) -> Any: ...
    def getFilterList(self, *args: Any, **kwargs: Any) -> Any: ...
    def getFilterType(self, *args: Any, **kwargs: Any) -> Any: ...
    def getObjectType(self, *args: Any, **kwargs: Any) -> Any: ...
    kMDagPathObject: int = 1
    kMObject: int = 0
    kMPlugObject: int = 2
    def setFilterList(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFilterType(self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectType(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB1314F0>

class MLockMessage(MMessage):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    kAddAttr: int = 5
    kChildReorder: int = 4
    kCreateChildInstance: int = 6
    kCreateNodeInstance: int = 5
    kCreateParentInstance: int = 7
    kLast: int = 10
    kLastDAG: int = 8
    kLastPlug: int = 8
    kLockAttr: int = 9
    kLockNode: int = 3
    kPlugAttrValChange: int = 3
    kPlugConnect: int = 6
    kPlugDisconnect: int = 7
    kPlugRemoveAttr: int = 4
    kPlugRenameAttr: int = 5
    kRemoveAttr: int = 6
    kRenameAttr: int = 7
    kReparent: int = 3
    kUnlockAttr: int = 8
    kUnlockNode: int = 4
    def setNodeLockDAGQueryCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def setNodeLockQueryCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPlugLockQueryCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB13CE00>

def MLockMessage_className(*args: Any, **kwargs: Any) -> Any: ...
def MLockMessage_setNodeLockDAGQueryCallback(*args: Any, **kwargs: Any) -> Any: ...
def MLockMessage_setNodeLockQueryCallback(*args: Any, **kwargs: Any) -> Any: ...
def MLockMessage_setPlugLockQueryCallback(*args: Any, **kwargs: Any) -> Any: ...
class MMatrix(object):
    """
    """
    def __add__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __call__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __eq__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __getitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __iadd__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __imul__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __isub__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __mul__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __ne__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __sub__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def adjoint(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def det3x3(self, *args: Any, **kwargs: Any) -> Any: ...
    def det4x4(self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self, *args: Any, **kwargs: Any) -> Any: ...
    def homogenize(self, *args: Any, **kwargs: Any) -> Any: ...
    def identity(self, *args: Any, **kwargs: Any) -> Any: ...
    def inverse(self, *args: Any, **kwargs: Any) -> Any: ...
    def isEquivalent(self, *args: Any, **kwargs: Any) -> Any: ...
    def isSingular(self, *args: Any, **kwargs: Any) -> Any: ...
    matrix: property = <property object at 0x00000218AB140720>
    def setToIdentity(self, *args: Any, **kwargs: Any) -> Any: ...
    def setToProduct(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB13CF90>
    def transpose(self, *args: Any, **kwargs: Any) -> Any: ...

class MMatrixArray(object):
    """
    """
    def __getitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def append(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    def sizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB140860>

def MMatrixArray_className(*args: Any, **kwargs: Any) -> Any: ...
def MMatrix_className(*args: Any, **kwargs: Any) -> Any: ...
class MMeshIntersector(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def getClosestPoint(self, *args: Any, **kwargs: Any) -> Any: ...
    def isCreated(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0C7950>

def MMeshIntersector_className(*args: Any, **kwargs: Any) -> Any: ...
class MMeshIsectAccelParams(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB10B1D0>

class MMeshSmoothOptions(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def boundaryRule(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def divisions(self, *args: Any, **kwargs: Any) -> Any: ...
    kAlwaysSharp: int = 3
    kCatmullClark: int = 0
    kChaikin: int = 1
    kCreaseAll: int = 1
    kCreaseEdge: int = 2
    kInvalid: int = -1
    kInvalidBoundary: int = -1
    kInvalidCreaseMethod: int = -1
    kInvalidSubdivision: int = -1
    kLast: int = 3
    kLastBoundary: int = 4
    kLastCreaseMethod: int = 2
    kLastSubdivision: int = 4
    kLegacy: int = 0
    kNone: int = 0
    kNormal: int = 0
    kOpenSubdivCatmullClarkAdaptive: int = 3
    kOpenSubdivCatmullClarkUniform: int = 2
    kSharpEdges: int = 2
    kSharpEdgesAndCorners: int = 1
    def keepBorderEdge(self, *args: Any, **kwargs: Any) -> Any: ...
    def keepHardEdge(self, *args: Any, **kwargs: Any) -> Any: ...
    def openSubdivCreaseMethod(self, *args: Any, **kwargs: Any) -> Any: ...
    def openSubdivFaceVaryingBoundary(self, *args: Any, **kwargs: Any) -> Any: ...
    def openSubdivSmoothTriangles(self, *args: Any, **kwargs: Any) -> Any: ...
    def openSubdivVertexBoundary(self, *args: Any, **kwargs: Any) -> Any: ...
    def propEdgeHardness(self, *args: Any, **kwargs: Any) -> Any: ...
    def setBoundaryRule(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDivisions(self, *args: Any, **kwargs: Any) -> Any: ...
    def setKeepBorderEdge(self, *args: Any, **kwargs: Any) -> Any: ...
    def setKeepHardEdge(self, *args: Any, **kwargs: Any) -> Any: ...
    def setOpenSubdivCreaseMethod(self, *args: Any, **kwargs: Any) -> Any: ...
    def setOpenSubdivFaceVaryingBoundary(self, *args: Any, **kwargs: Any) -> Any: ...
    def setOpenSubdivSmoothTriangles(self, *args: Any, **kwargs: Any) -> Any: ...
    def setOpenSubdivVertexBoundary(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPropEdgeHardness(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSmoothUVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSmoothness(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSubdivisionType(self, *args: Any, **kwargs: Any) -> Any: ...
    def smoothUVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def smoothness(self, *args: Any, **kwargs: Any) -> Any: ...
    def subdivisionType(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0C7E00>

def MMeshSmoothOptions_className(*args: Any, **kwargs: Any) -> Any: ...
class MMessage(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def currentCallbackId(self, *args: Any, **kwargs: Any) -> Any: ...
    def getCallableInfo(self, *args: Any, **kwargs: Any) -> Any: ...
    kDefaultAction: int = 0
    kDoAction: int = 2
    kDoNotDoAction: int = 1
    def nodeCallbacks(self, *args: Any, **kwargs: Any) -> Any: ...
    def registeringCallableScript(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallbacks(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCallableInfo(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRegisteringCallableScript(self, *args: Any, **kwargs: Any) -> Any: ...
    def stealCallableInfo(self, *args: Any, **kwargs: Any) -> Any: ...
    def stopRegisteringCallableScript(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0C3A40>

class MMessageNode(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    fClientPtr: property = <property object at 0x00000218AB0C3770>
    fHeadNode: property = <property object at 0x00000218AB0C3900>
    fId: property = <property object at 0x00000218AB0C3860>
    fNextNode: property = <property object at 0x00000218AB0C38B0>
    fServerPtr: property = <property object at 0x00000218AB0C37C0>
    fSubClientPtr: property = <property object at 0x00000218AB0C3810>
    isValid: property = <property object at 0x00000218AB0C3950>
    thisown: property = <property object at 0x00000218AB0C3720>

def MMessage_className(*args: Any, **kwargs: Any) -> Any: ...
def MMessage_currentCallbackId(*args: Any, **kwargs: Any) -> Any: ...
def MMessage_getCallableInfo(*args: Any, **kwargs: Any) -> Any: ...
def MMessage_nodeCallbacks(*args: Any, **kwargs: Any) -> Any: ...
def MMessage_registeringCallableScript(*args: Any, **kwargs: Any) -> Any: ...
def MMessage_removeCallback(*args: Any, **kwargs: Any) -> Any: ...
def MMessage_removeCallbacks(*args: Any, **kwargs: Any) -> Any: ...
def MMessage_setCallableInfo(*args: Any, **kwargs: Any) -> Any: ...
def MMessage_setRegisteringCallableScript(*args: Any, **kwargs: Any) -> Any: ...
def MMessage_stealCallableInfo(*args: Any, **kwargs: Any) -> Any: ...
def MMessage_stopRegisteringCallableScript(*args: Any, **kwargs: Any) -> Any: ...
class MModelMessage(MMessage):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addAfterDuplicateCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addBeforeDuplicateCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addNodeAddedToModelCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addNodeRemovedFromModelCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB140D60>

def MModelMessage_addAfterDuplicateCallback(*args: Any, **kwargs: Any) -> Any: ...
def MModelMessage_addBeforeDuplicateCallback(*args: Any, **kwargs: Any) -> Any: ...
def MModelMessage_addCallback(*args: Any, **kwargs: Any) -> Any: ...
def MModelMessage_addNodeAddedToModelCallback(*args: Any, **kwargs: Any) -> Any: ...
def MModelMessage_addNodeRemovedFromModelCallback(*args: Any, **kwargs: Any) -> Any: ...
def MModelMessage_className(*args: Any, **kwargs: Any) -> Any: ...
class MNamespace(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addNamespace(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def currentNamespace(self, *args: Any, **kwargs: Any) -> Any: ...
    def getNamespaceFromName(self, *args: Any, **kwargs: Any) -> Any: ...
    def getNamespaceObjects(self, *args: Any, **kwargs: Any) -> Any: ...
    def getNamespaces(self, *args: Any, **kwargs: Any) -> Any: ...
    def makeNamepathAbsolute(self, *args: Any, **kwargs: Any) -> Any: ...
    def moveNamespace(self, *args: Any, **kwargs: Any) -> Any: ...
    def namespaceExists(self, *args: Any, **kwargs: Any) -> Any: ...
    def parentNamespace(self, *args: Any, **kwargs: Any) -> Any: ...
    def relativeNames(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeNamespace(self, *args: Any, **kwargs: Any) -> Any: ...
    def renameNamespace(self, *args: Any, **kwargs: Any) -> Any: ...
    def rootNamespace(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCurrentNamespace(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRelativeNames(self, *args: Any, **kwargs: Any) -> Any: ...
    def stripNamespaceFromName(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB142090>
    def validateName(self, *args: Any, **kwargs: Any) -> Any: ...

def MNamespace_addNamespace(*args: Any, **kwargs: Any) -> Any: ...
def MNamespace_className(*args: Any, **kwargs: Any) -> Any: ...
def MNamespace_currentNamespace(*args: Any, **kwargs: Any) -> Any: ...
def MNamespace_getNamespaceFromName(*args: Any, **kwargs: Any) -> Any: ...
def MNamespace_getNamespaceObjects(*args: Any, **kwargs: Any) -> Any: ...
def MNamespace_getNamespaces(*args: Any, **kwargs: Any) -> Any: ...
def MNamespace_makeNamepathAbsolute(*args: Any, **kwargs: Any) -> Any: ...
def MNamespace_moveNamespace(*args: Any, **kwargs: Any) -> Any: ...
def MNamespace_namespaceExists(*args: Any, **kwargs: Any) -> Any: ...
def MNamespace_parentNamespace(*args: Any, **kwargs: Any) -> Any: ...
def MNamespace_relativeNames(*args: Any, **kwargs: Any) -> Any: ...
def MNamespace_removeNamespace(*args: Any, **kwargs: Any) -> Any: ...
def MNamespace_renameNamespace(*args: Any, **kwargs: Any) -> Any: ...
def MNamespace_rootNamespace(*args: Any, **kwargs: Any) -> Any: ...
def MNamespace_setCurrentNamespace(*args: Any, **kwargs: Any) -> Any: ...
def MNamespace_setRelativeNames(*args: Any, **kwargs: Any) -> Any: ...
def MNamespace_stripNamespaceFromName(*args: Any, **kwargs: Any) -> Any: ...
def MNamespace_validateName(*args: Any, **kwargs: Any) -> Any: ...
class MNodeCacheDisablingInfo(object):
    """
    """
    def __init__(self, *args, **kwargs) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def getCacheDisabled(self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCacheDisabled(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMitigation(self, *args: Any, **kwargs: Any) -> Any: ...
    def setReason(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB142720>

class MNodeCacheDisablingInfoHelper(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    kLastConnectionTest: int = 3
    kTestDefaultValue: int = 0
    kTestDirtyPlug: int = 0
    kTestHierarchy: int = 1
    kTestPlug: int = 2
    def setUnsafeNode(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUnsafeValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def testAnimatedAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def testBooleanAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB1429A0>

def MNodeCacheDisablingInfoHelper_setUnsafeNode(*args: Any, **kwargs: Any) -> Any: ...
def MNodeCacheDisablingInfoHelper_setUnsafeValue(*args: Any, **kwargs: Any) -> Any: ...
def MNodeCacheDisablingInfoHelper_testAnimatedAttribute(*args: Any, **kwargs: Any) -> Any: ...
def MNodeCacheDisablingInfoHelper_testBooleanAttribute(*args: Any, **kwargs: Any) -> Any: ...
class MNodeCacheSetupInfo(object):
    """
    """
    def __init__(self, *args, **kwargs) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def getPreference(self, *args: Any, **kwargs: Any) -> Any: ...
    def getRequirement(self, *args: Any, **kwargs: Any) -> Any: ...
    kLastPreference: int = 1
    kLastRequirement: int = 1
    kSimulationSupport: int = 0
    kWantToCacheByDefault: int = 0
    def setPreference(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRequirement(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB142B80>

class MNodeClass(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addExtensionAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def addToClassification(self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self, *args: Any, **kwargs: Any) -> Any: ...
    def getAttributes(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginName(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeExtensionAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeExtensionAttributeIfUnset(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeFromClassification(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB142DB0>
    def typeId(self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self, *args: Any, **kwargs: Any) -> Any: ...

def MNodeClass_className(*args: Any, **kwargs: Any) -> Any: ...
class MNodeMessage(MMessage):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttributeAddedOrRemovedCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttributeChangedCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addKeyableChangeOverride(self, *args: Any, **kwargs: Any) -> Any: ...
    def addNameChangedCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addNodeAboutToDeleteCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addNodeDestroyedCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addNodeDirtyCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addNodeDirtyPlugCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addNodePreRemovalCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addUuidChangedCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    kAttributeAdded: int = 64
    kAttributeArrayAdded: int = 4096
    kAttributeArrayRemoved: int = 8192
    kAttributeEval: int = 4
    kAttributeKeyable: int = 512
    kAttributeLocked: int = 16
    kAttributeRemoved: int = 128
    kAttributeRenamed: int = 256
    kAttributeSet: int = 8
    kAttributeUnkeyable: int = 1024
    kAttributeUnlocked: int = 32
    kIncomingDirection: int = 2048
    kKeyChangeLast: int = 3
    kLast: int = 32768
    kOtherPlugSet: int = 16384
    thisown: property = <property object at 0x00000218AB144310>

def MNodeMessage_addAttributeAddedOrRemovedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MNodeMessage_addAttributeChangedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MNodeMessage_addKeyableChangeOverride(*args: Any, **kwargs: Any) -> Any: ...
def MNodeMessage_addNameChangedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MNodeMessage_addNodeAboutToDeleteCallback(*args: Any, **kwargs: Any) -> Any: ...
def MNodeMessage_addNodeDestroyedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MNodeMessage_addNodeDirtyCallback(*args: Any, **kwargs: Any) -> Any: ...
def MNodeMessage_addNodeDirtyPlugCallback(*args: Any, **kwargs: Any) -> Any: ...
def MNodeMessage_addNodePreRemovalCallback(*args: Any, **kwargs: Any) -> Any: ...
def MNodeMessage_addUuidChangedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MNodeMessage_className(*args: Any, **kwargs: Any) -> Any: ...
class MNurbsIntersector(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def getClosestPoint(self, *args: Any, **kwargs: Any) -> Any: ...
    def getIntersect(self, *args: Any, **kwargs: Any) -> Any: ...
    def getIntersects(self, *args: Any, **kwargs: Any) -> Any: ...
    def isCreated(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB144720>

def MNurbsIntersector_className(*args: Any, **kwargs: Any) -> Any: ...
class MObject(object):
    """
    """
    def __eq__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __ne__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def apiType(self, *args: Any, **kwargs: Any) -> Any: ...
    def apiTypeStr(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasFn(self, *args: Any, **kwargs: Any) -> Any: ...
    def isNull(self, *args: Any, **kwargs: Any) -> Any: ...
    kNullObj: property = <property object at 0x00000218AB0B65E0>
    thisown: property = <property object at 0x00000218A15A8810>

class MObjectArray(object):
    """
    """
    def __getitem__(*args) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def append(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    def sizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB144BD0>

def MObjectArray_className(*args: Any, **kwargs: Any) -> Any: ...
class MObjectHandle(object):
    """
    """
    def __eq__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __ne__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def hashCode(self, *args: Any, **kwargs: Any) -> Any: ...
    def isAlive(self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self, *args: Any, **kwargs: Any) -> Any: ...
    def objectHashCode(self, *args: Any, **kwargs: Any) -> Any: ...
    def objectRef(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB148090>

def MObjectHandle_objectHashCode(*args: Any, **kwargs: Any) -> Any: ...
class MObjectSetMessage(MMessage):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addSetMembersModifiedCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB148450>

def MObjectSetMessage_addSetMembersModifiedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MObjectSetMessage_className(*args: Any, **kwargs: Any) -> Any: ...
class MParentingEdit(MEdit):
    """
    """
    def __init__(self, *args, **kwargs) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def parent(self, *args: Any, **kwargs: Any) -> Any: ...
    def parentName(self, *args: Any, **kwargs: Any) -> Any: ...
    def parentedObject(self, *args: Any, **kwargs: Any) -> Any: ...
    def parentedObjectName(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB15ACC0>

def MParentingEdit_className(*args: Any, **kwargs: Any) -> Any: ...
class MPlane(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def directedDistance(self, *args: Any, **kwargs: Any) -> Any: ...
    def distance(self, *args: Any, **kwargs: Any) -> Any: ...
    def normal(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPlane(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB14C6D0>

def MPlane_className(*args: Any, **kwargs: Any) -> Any: ...
class MPlug(object):
    """
    """
    def __eq__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __getitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __ne__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def array(self, *args: Any, **kwargs: Any) -> Any: ...
    def asBool(self, *args: Any, **kwargs: Any) -> Any: ...
    def asChar(self, *args: Any, **kwargs: Any) -> Any: ...
    def asDouble(self, *args: Any, **kwargs: Any) -> Any: ...
    def asFloat(self, *args: Any, **kwargs: Any) -> Any: ...
    def asInt(self, *args: Any, **kwargs: Any) -> Any: ...
    def asInt64(self, *args: Any, **kwargs: Any) -> Any: ...
    def asMAngle(self, *args: Any, **kwargs: Any) -> Any: ...
    def asMDataHandle(self, *args: Any, **kwargs: Any) -> Any: ...
    def asMDistance(self, *args: Any, **kwargs: Any) -> Any: ...
    def asMObject(self, *args: Any, **kwargs: Any) -> Any: ...
    def asMTime(self, *args: Any, **kwargs: Any) -> Any: ...
    def asShort(self, *args: Any, **kwargs: Any) -> Any: ...
    def asString(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def connectedTo(self, *args: Any, **kwargs: Any) -> Any: ...
    def connectionByPhysicalIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def constructHandle(self, *args: Any, **kwargs: Any) -> Any: ...
    def destinations(self, *args: Any, **kwargs: Any) -> Any: ...
    def destinationsWithConversions(self, *args: Any, **kwargs: Any) -> Any: ...
    def destructHandle(self, *args: Any, **kwargs: Any) -> Any: ...
    def elementByLogicalIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def elementByPhysicalIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def evaluateNumElements(self, *args: Any, **kwargs: Any) -> Any: ...
    def getExistingArrayAttributeIndices(self, *args: Any, **kwargs: Any) -> Any: ...
    def getSetAttrCmds(self, *args: Any, **kwargs: Any) -> Any: ...
    def info(self, *args: Any, **kwargs: Any) -> Any: ...
    def isArray(self, *args: Any, **kwargs: Any) -> Any: ...
    def isCachingFlagSet(self, *args: Any, **kwargs: Any) -> Any: ...
    def isChannelBoxFlagSet(self, *args: Any, **kwargs: Any) -> Any: ...
    def isChild(self, *args: Any, **kwargs: Any) -> Any: ...
    def isCompound(self, *args: Any, **kwargs: Any) -> Any: ...
    def isConnected(self, *args: Any, **kwargs: Any) -> Any: ...
    def isDefaultValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def isDestination(self, *args: Any, **kwargs: Any) -> Any: ...
    def isDynamic(self, *args: Any, **kwargs: Any) -> Any: ...
    def isElement(self, *args: Any, **kwargs: Any) -> Any: ...
    def isFreeToChange(self, *args: Any, **kwargs: Any) -> Any: ...
    def isFromReferencedFile(self, *args: Any, **kwargs: Any) -> Any: ...
    def isIgnoredWhenRendering(self, *args: Any, **kwargs: Any) -> Any: ...
    def isKeyable(self, *args: Any, **kwargs: Any) -> Any: ...
    def isLocked(self, *args: Any, **kwargs: Any) -> Any: ...
    def isNetworked(self, *args: Any, **kwargs: Any) -> Any: ...
    def isNull(self, *args: Any, **kwargs: Any) -> Any: ...
    def isProcedural(self, *args: Any, **kwargs: Any) -> Any: ...
    def isProxy(self, *args: Any, **kwargs: Any) -> Any: ...
    def isSource(self, *args: Any, **kwargs: Any) -> Any: ...
    kAll: int = 0
    kChanged: int = 2
    kChildrenNotFreeToChange: int = 2
    kFreeToChange: int = 0
    kLastAttrSelector: int = 3
    kNonDefault: int = 1
    kNotFreeToChange: int = 1
    def logicalIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self, *args: Any, **kwargs: Any) -> Any: ...
    def node(self, *args: Any, **kwargs: Any) -> Any: ...
    def numChildren(self, *args: Any, **kwargs: Any) -> Any: ...
    def numConnectedChildren(self, *args: Any, **kwargs: Any) -> Any: ...
    def numConnectedElements(self, *args: Any, **kwargs: Any) -> Any: ...
    def numElements(self, *args: Any, **kwargs: Any) -> Any: ...
    def parent(self, *args: Any, **kwargs: Any) -> Any: ...
    def partialName(self, *args: Any, **kwargs: Any) -> Any: ...
    def proxied(self, *args: Any, **kwargs: Any) -> Any: ...
    def selectAncestorLogicalIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def setAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def setBool(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCaching(self, *args: Any, **kwargs: Any) -> Any: ...
    def setChannelBox(self, *args: Any, **kwargs: Any) -> Any: ...
    def setChar(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDouble(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFloat(self, *args: Any, **kwargs: Any) -> Any: ...
    def setInt(self, *args: Any, **kwargs: Any) -> Any: ...
    def setInt64(self, *args: Any, **kwargs: Any) -> Any: ...
    def setKeyable(self, *args: Any, **kwargs: Any) -> Any: ...
    def setLocked(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMAngle(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMDataHandle(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMDistance(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMObject(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMPxData(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMTime(self, *args: Any, **kwargs: Any) -> Any: ...
    def setNumElements(self, *args: Any, **kwargs: Any) -> Any: ...
    def setShort(self, *args: Any, **kwargs: Any) -> Any: ...
    def setString(self, *args: Any, **kwargs: Any) -> Any: ...
    def source(self, *args: Any, **kwargs: Any) -> Any: ...
    def sourceWithConversion(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB148AE0>

class MPlugArray(object):
    """
    """
    def __getitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def append(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    def sizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB1485E0>

def MPlugArray_className(*args: Any, **kwargs: Any) -> Any: ...
def MPlug_className(*args: Any, **kwargs: Any) -> Any: ...
class MPoint(object):
    """
    """
    def __add__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __call__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __div__(self, *args) -> Any: ...
    def __eq__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __getitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __iadd__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __imul__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __isub__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __mul__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __ne__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __sub__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __truediv__(self, *args) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def cartesianize(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def distanceTo(self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self, *args: Any, **kwargs: Any) -> Any: ...
    def homogenize(self, *args: Any, **kwargs: Any) -> Any: ...
    def isEquivalent(self, *args: Any, **kwargs: Any) -> Any: ...
    def origin(self, *args: Any, **kwargs: Any) -> Any: ...
    def rationalize(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB14CEA0>
    w: property = <property object at 0x00000218AB14E590>
    x: property = <property object at 0x00000218AB14E4A0>
    y: property = <property object at 0x00000218AB14E4F0>
    z: property = <property object at 0x00000218AB14E540>

class MPointArray(object):
    """
    """
    def __getitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def append(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    def sizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB14C950>

def MPointArray_className(*args: Any, **kwargs: Any) -> Any: ...
class MPointOnMesh(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def faceIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def getBarycentricCoords(self, *args: Any, **kwargs: Any) -> Any: ...
    def getNormal(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPoint(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0C7B80>
    def triangleIndex(self, *args: Any, **kwargs: Any) -> Any: ...

class MPointOnNurbs(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPoint(self, *args: Any, **kwargs: Any) -> Any: ...
    def getUV(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB1449F0>

def MPoint_className(*args: Any, **kwargs: Any) -> Any: ...
class MPolyMessage(MMessage):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addColorSetChangedCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addPolyComponentIdChangedCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addPolyTopologyChangedCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addUVSetChangedCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def deletedId(self, *args: Any, **kwargs: Any) -> Any: ...
    kLastErrorIndex: int = 3
    thisown: property = <property object at 0x00000218AB14E6D0>

def MPolyMessage_addColorSetChangedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MPolyMessage_addPolyComponentIdChangedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MPolyMessage_addPolyTopologyChangedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MPolyMessage_addUVSetChangedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MPolyMessage_className(*args: Any, **kwargs: Any) -> Any: ...
def MPolyMessage_deletedId(*args: Any, **kwargs: Any) -> Any: ...
class MProfiler(object):
    """
    """
    def __init__(self, *args, **kwargs) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def addCategory(self, *args: Any, **kwargs: Any) -> Any: ...
    def categoryRecording(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def eventBegin(self, *args: Any, **kwargs: Any) -> Any: ...
    def eventDataAvailable(self, *args: Any, **kwargs: Any) -> Any: ...
    def eventEnd(self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllCategories(self, *args: Any, **kwargs: Any) -> Any: ...
    def getBufferSize(self, *args: Any, **kwargs: Any) -> Any: ...
    def getCPUId(self, *args: Any, **kwargs: Any) -> Any: ...
    def getCategoryIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def getCategoryInfo(self, *args: Any, **kwargs: Any) -> Any: ...
    def getCategoryName(self, *args: Any, **kwargs: Any) -> Any: ...
    def getColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDescription(self, *args: Any, **kwargs: Any) -> Any: ...
    def getEventCategory(self, *args: Any, **kwargs: Any) -> Any: ...
    def getEventCount(self, *args: Any, **kwargs: Any) -> Any: ...
    def getEventDuration(self, *args: Any, **kwargs: Any) -> Any: ...
    def getEventName(self, *args: Any, **kwargs: Any) -> Any: ...
    def getEventTime(self, *args: Any, **kwargs: Any) -> Any: ...
    def getNumberOfCPUs(self, *args: Any, **kwargs: Any) -> Any: ...
    def getThreadDuration(self, *args: Any, **kwargs: Any) -> Any: ...
    def getThreadId(self, *args: Any, **kwargs: Any) -> Any: ...
    def isDataFromFile(self, *args: Any, **kwargs: Any) -> Any: ...
    def isSignalEvent(self, *args: Any, **kwargs: Any) -> Any: ...
    kColorA_L1: int = 0
    kColorA_L2: int = 1
    kColorA_L3: int = 2
    kColorB_L1: int = 3
    kColorB_L2: int = 4
    kColorB_L3: int = 5
    kColorC_L1: int = 6
    kColorC_L2: int = 7
    kColorC_L3: int = 8
    kColorCount: int = 18
    kColorD_L1: int = 9
    kColorD_L2: int = 10
    kColorD_L3: int = 11
    kColorE_L1: int = 12
    kColorE_L2: int = 13
    kColorE_L3: int = 14
    kColorG_L1: int = 15
    kColorG_L2: int = 16
    kColorG_L3: int = 17
    def loadRecording(self, *args: Any, **kwargs: Any) -> Any: ...
    def recordingActive(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCategory(self, *args: Any, **kwargs: Any) -> Any: ...
    def resetRecording(self, *args: Any, **kwargs: Any) -> Any: ...
    def saveRecording(self, *args: Any, **kwargs: Any) -> Any: ...
    def setBufferSize(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCategoryRecording(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRecordingActive(self, *args: Any, **kwargs: Any) -> Any: ...
    def signalEvent(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB173950>

def MProfiler_addCategory(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_categoryRecording(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_className(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_eventBegin(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_eventDataAvailable(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_eventEnd(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_getAllCategories(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_getBufferSize(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_getCPUId(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_getCategoryIndex(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_getCategoryInfo(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_getCategoryName(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_getColor(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_getDescription(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_getEventCategory(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_getEventCount(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_getEventDuration(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_getEventName(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_getEventTime(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_getNumberOfCPUs(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_getThreadDuration(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_getThreadId(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_isDataFromFile(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_isSignalEvent(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_loadRecording(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_recordingActive(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_removeCategory(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_resetRecording(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_saveRecording(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_setBufferSize(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_setCategoryRecording(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_setRecordingActive(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_signalEvent(*args: Any, **kwargs: Any) -> Any: ...
def MProfilingContextManager(categoryId, colorIndex, eventName, description=None = None, associatedNode=<maya.OpenMaya.MObject; proxy of <Swig Object of type 'MObject *' at 0x00000218AB1751B0> > = <maya.OpenMaya.MObject; proxy of <Swig Object of type 'MObject *' at 0x00000218AB1751B0> >) -> Any:
    """Context manager that defines a profiling scope around a block of code.

    Parameters
    ----------
    categoryId : int
            The index of the category which the event belongs to.
    colorIndex : MProfiler.ProfilingColor
            The color to draw the profiling result in Profiler Window.
    eventName : string
            The name of the event.
    description : string (optional)
            Description of the event.
    associatedNode : MObject (optional)
            The dependency node associated with the event.

    Example
    -------
    >>> import maya.OpenMaya as OM
    >>> categoryIndex = OM.MProfiler.addCategory("Python Scripts")
    >>> def Factorial(number):
    ...     # Instrument the following block of code:
    ...     with OM.MProfilingContextManager(categoryIndex, OM.MProfiler.kColorE_L1, "Factorial", "FactorialDesc"):
    ...             result = 1
    ...             for i in xrange(2, number+1):
    ...                     result *= i
    ...     return result
    ...
    >>> 
    """

class MProfilingScope(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB174450>

def MProfilingScope_className(*args: Any, **kwargs: Any) -> Any: ...
class MQuaternion(object):
    """
    """
    def __add__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __eq__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __getitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __imul__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __mul__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __ne__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __neg__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __sub__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def asEulerRotation(self, *args: Any, **kwargs: Any) -> Any: ...
    def asMatrix(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def conjugate(self, *args: Any, **kwargs: Any) -> Any: ...
    def conjugateIt(self, *args: Any, **kwargs: Any) -> Any: ...
    def exp(self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self, *args: Any, **kwargs: Any) -> Any: ...
    def getAxisAngle(self, *args: Any, **kwargs: Any) -> Any: ...
    identity: MQuaternion = <maya.OpenMaya.MQuaternion; proxy of <Swig Object of type 'MQuaternion *' at 0x00000218AB152A50> >
    def inverse(self, *args: Any, **kwargs: Any) -> Any: ...
    def invertIt(self, *args: Any, **kwargs: Any) -> Any: ...
    def isEquivalent(self, *args: Any, **kwargs: Any) -> Any: ...
    def log(self, *args: Any, **kwargs: Any) -> Any: ...
    def negateIt(self, *args: Any, **kwargs: Any) -> Any: ...
    def normal(self, *args: Any, **kwargs: Any) -> Any: ...
    def normalizeIt(self, *args: Any, **kwargs: Any) -> Any: ...
    def scaleIt(self, *args: Any, **kwargs: Any) -> Any: ...
    def setAxisAngle(self, *args: Any, **kwargs: Any) -> Any: ...
    def setToXAxis(self, *args: Any, **kwargs: Any) -> Any: ...
    def setToYAxis(self, *args: Any, **kwargs: Any) -> Any: ...
    def setToZAxis(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB1519A0>
    w: property = <property object at 0x00000218AB154400>
    x: property = <property object at 0x00000218AB154310>
    y: property = <property object at 0x00000218AB154360>
    z: property = <property object at 0x00000218AB1543B0>

class MRampAttribute(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addEntries(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def createColorRamp(self, *args: Any, **kwargs: Any) -> Any: ...
    def createCurveRamp(self, *args: Any, **kwargs: Any) -> Any: ...
    def createRamp(self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteEntries(self, *args: Any, **kwargs: Any) -> Any: ...
    def getColorAtPosition(self, *args: Any, **kwargs: Any) -> Any: ...
    def getEntries(self, *args: Any, **kwargs: Any) -> Any: ...
    def getNumEntries(self, *args: Any, **kwargs: Any) -> Any: ...
    def getValueAtPosition(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def isColorRamp(self, *args: Any, **kwargs: Any) -> Any: ...
    def isCurveRamp(self, *args: Any, **kwargs: Any) -> Any: ...
    kLinear: int = 1
    kNone: int = 0
    kSmooth: int = 2
    kSpline: int = 3
    def pack(self, *args: Any, **kwargs: Any) -> Any: ...
    def sampleColorRamp(self, *args: Any, **kwargs: Any) -> Any: ...
    def sampleValueRamp(self, *args: Any, **kwargs: Any) -> Any: ...
    def setColorAtIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def setInterpolationAtIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPositionAtIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRamp(self, *args: Any, **kwargs: Any) -> Any: ...
    def setValueAtIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def sort(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB1544F0>

def MRampAttribute_className(*args: Any, **kwargs: Any) -> Any: ...
def MRampAttribute_createColorRamp(*args: Any, **kwargs: Any) -> Any: ...
def MRampAttribute_createCurveRamp(*args: Any, **kwargs: Any) -> Any: ...
def MRampAttribute_createRamp(*args: Any, **kwargs: Any) -> Any: ...
class MRenderPassDef(object):
    """
    """
    def __init__(self, *args, **kwargs) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addDoubleParameter(self, *args: Any, **kwargs: Any) -> Any: ...
    def addFloatParameter(self, *args: Any, **kwargs: Any) -> Any: ...
    def addIntParameter(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def getAttributeType(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDescription(self, *args: Any, **kwargs: Any) -> Any: ...
    def getGroup(self, *args: Any, **kwargs: Any) -> Any: ...
    def getID(self, *args: Any, **kwargs: Any) -> Any: ...
    def getImplementation(self, *args: Any, **kwargs: Any) -> Any: ...
    def getName(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB154C20>

def MRenderPassDef_className(*args: Any, **kwargs: Any) -> Any: ...
class MRenderPassRegistry(object):
    """
    """
    def __init__(self, *args, **kwargs) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def getRenderPassDefinition(self, *args: Any, **kwargs: Any) -> Any: ...
    def registerRenderPassDefinition(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB158090>

def MRenderPassRegistry_className(*args: Any, **kwargs: Any) -> Any: ...
def MRenderPassRegistry_getRenderPassDefinition(*args: Any, **kwargs: Any) -> Any: ...
def MRenderPassRegistry_registerRenderPassDefinition(*args: Any, **kwargs: Any) -> Any: ...
class MRichSelection(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self, *args: Any, **kwargs: Any) -> Any: ...
    def getSelection(self, *args: Any, **kwargs: Any) -> Any: ...
    def getSymmetry(self, *args: Any, **kwargs: Any) -> Any: ...
    def getSymmetryMatrix(self, *args: Any, **kwargs: Any) -> Any: ...
    def getSymmetryPlane(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSelection(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB158D10>

def MRichSelection_className(*args: Any, **kwargs: Any) -> Any: ...
class MSceneMessage(MMessage):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addCheckCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addCheckFileCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addCheckReferenceCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addConnectionFailedCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addNamespaceRenamedCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addReferenceCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addStringArrayCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    kAfterCreateReference: int = 45
    kAfterCreateReferenceAndRecordEdits: int = 50
    kAfterExport: int = 11
    kAfterExportReference: int = 21
    kAfterFileRead: int = 8
    kAfterImport: int = 4
    kAfterImportReference: int = 19
    kAfterLoadReference: int = 37
    kAfterLoadReferenceAndRecordEdits: int = 48
    kAfterOpen: int = 6
    kAfterPluginLoad: int = 41
    kAfterPluginUnload: int = 43
    kAfterReference: int = 15
    kAfterRemoveReference: int = 17
    kAfterSave: int = 13
    kAfterSceneReadAndRecordEdits: int = 9
    kAfterSoftwareFrameRender: int = 27
    kAfterSoftwareRender: int = 25
    kAfterUnloadReference: int = 23
    kBeforeCreateReference: int = 44
    kBeforeCreateReferenceAndRecordEdits: int = 49
    kBeforeCreateReferenceCheck: int = 39
    kBeforeExport: int = 10
    kBeforeExportCheck: int = 35
    kBeforeExportReference: int = 20
    kBeforeFileRead: int = 7
    kBeforeImport: int = 3
    kBeforeImportCheck: int = 34
    kBeforeImportReference: int = 18
    kBeforeLoadReference: int = 36
    kBeforeLoadReferenceAndRecordEdits: int = 47
    kBeforeLoadReferenceCheck: int = 38
    kBeforeNewCheck: int = 31
    kBeforeOpen: int = 5
    kBeforeOpenCheck: int = 32
    kBeforePluginLoad: int = 40
    kBeforePluginUnload: int = 42
    kBeforeReference: int = 14
    kBeforeReferenceCheck: int = 39
    kBeforeRemoveReference: int = 16
    kBeforeSave: int = 12
    kBeforeSaveCheck: int = 33
    kBeforeSoftwareFrameRender: int = 26
    kBeforeSoftwareRender: int = 24
    kBeforeUnloadReference: int = 22
    kExportStarted: int = 46
    kLast: int = 51
    kMayaExiting: int = 30
    kMayaInitialized: int = 29
    kSoftwareRenderInterrupted: int = 28
    thisown: property = <property object at 0x00000218AB15A090>

def MSceneMessage_addCallback(*args: Any, **kwargs: Any) -> Any: ...
def MSceneMessage_addCheckCallback(*args: Any, **kwargs: Any) -> Any: ...
def MSceneMessage_addCheckFileCallback(*args: Any, **kwargs: Any) -> Any: ...
def MSceneMessage_addCheckReferenceCallback(*args: Any, **kwargs: Any) -> Any: ...
def MSceneMessage_addConnectionFailedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MSceneMessage_addNamespaceRenamedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MSceneMessage_addReferenceCallback(*args: Any, **kwargs: Any) -> Any: ...
def MSceneMessage_addStringArrayCallback(*args: Any, **kwargs: Any) -> Any: ...
def MSceneMessage_className(*args: Any, **kwargs: Any) -> Any: ...
class MScriptUtil(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def asBool(self, *args: Any, **kwargs: Any) -> Any: ...
    def asBoolPtr(self, *args: Any, **kwargs: Any) -> Any: ...
    def asCharPtr(self, *args: Any, **kwargs: Any) -> Any: ...
    def asDouble(self, *args: Any, **kwargs: Any) -> Any: ...
    def asDouble2Ptr(self, *args: Any, **kwargs: Any) -> Any: ...
    def asDouble3Ptr(self, *args: Any, **kwargs: Any) -> Any: ...
    def asDouble4Ptr(self, *args: Any, **kwargs: Any) -> Any: ...
    def asDoublePtr(self, *args: Any, **kwargs: Any) -> Any: ...
    def asFloat(self, *args: Any, **kwargs: Any) -> Any: ...
    def asFloat2Ptr(self, *args: Any, **kwargs: Any) -> Any: ...
    def asFloat3Ptr(self, *args: Any, **kwargs: Any) -> Any: ...
    def asFloat4Ptr(self, *args: Any, **kwargs: Any) -> Any: ...
    def asFloatPtr(self, *args: Any, **kwargs: Any) -> Any: ...
    def asInt(self, *args: Any, **kwargs: Any) -> Any: ...
    def asInt2Ptr(self, *args: Any, **kwargs: Any) -> Any: ...
    def asInt3Ptr(self, *args: Any, **kwargs: Any) -> Any: ...
    def asInt4Ptr(self, *args: Any, **kwargs: Any) -> Any: ...
    def asIntPtr(self, *args: Any, **kwargs: Any) -> Any: ...
    def asShort(self, *args: Any, **kwargs: Any) -> Any: ...
    def asShort2Ptr(self, *args: Any, **kwargs: Any) -> Any: ...
    def asShort3Ptr(self, *args: Any, **kwargs: Any) -> Any: ...
    def asShort4Ptr(self, *args: Any, **kwargs: Any) -> Any: ...
    def asShortPtr(self, *args: Any, **kwargs: Any) -> Any: ...
    def asUcharPtr(self, *args: Any, **kwargs: Any) -> Any: ...
    def asUint(self, *args: Any, **kwargs: Any) -> Any: ...
    def asUint2Ptr(self, *args: Any, **kwargs: Any) -> Any: ...
    def asUint3Ptr(self, *args: Any, **kwargs: Any) -> Any: ...
    def asUint4Ptr(self, *args: Any, **kwargs: Any) -> Any: ...
    def asUintPtr(self, *args: Any, **kwargs: Any) -> Any: ...
    def asUshortPtr(self, *args: Any, **kwargs: Any) -> Any: ...
    def createFloatArrayFromList(self, *args: Any, **kwargs: Any) -> Any: ...
    def createFloatMatrixFromList(self, *args: Any, **kwargs: Any) -> Any: ...
    def createFromDouble(self, *args: Any, **kwargs: Any) -> Any: ...
    def createFromInt(self, *args: Any, **kwargs: Any) -> Any: ...
    def createFromList(self, *args: Any, **kwargs: Any) -> Any: ...
    def createIntArrayFromList(self, *args: Any, **kwargs: Any) -> Any: ...
    def createMatrixFromList(self, *args: Any, **kwargs: Any) -> Any: ...
    def getBool(self, *args: Any, **kwargs: Any) -> Any: ...
    def getBoolArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def getChar(self, *args: Any, **kwargs: Any) -> Any: ...
    def getCharArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDouble(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDouble2ArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDouble3ArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDouble4ArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDoubleArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def getFloat(self, *args: Any, **kwargs: Any) -> Any: ...
    def getFloat2ArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def getFloat3ArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def getFloat4ArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def getFloatArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def getInt(self, *args: Any, **kwargs: Any) -> Any: ...
    def getInt2ArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def getInt3ArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def getInt4ArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def getIntArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def getShort(self, *args: Any, **kwargs: Any) -> Any: ...
    def getShort2ArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def getShort3ArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def getShort4ArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def getShortArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def getUchar(self, *args: Any, **kwargs: Any) -> Any: ...
    def getUcharArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def getUint(self, *args: Any, **kwargs: Any) -> Any: ...
    def getUint2ArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def getUint3ArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def getUint4ArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def getUintArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def getUshortArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def setBool(self, *args: Any, **kwargs: Any) -> Any: ...
    def setBoolArray(self, *args: Any, **kwargs: Any) -> Any: ...
    def setChar(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCharArray(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDouble(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDouble2ArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDouble3ArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDouble4ArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoubleArray(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFloat(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFloat2ArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFloat3ArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFloat4ArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFloatArray(self, *args: Any, **kwargs: Any) -> Any: ...
    def setInt(self, *args: Any, **kwargs: Any) -> Any: ...
    def setInt2ArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def setInt3ArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def setInt4ArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def setIntArray(self, *args: Any, **kwargs: Any) -> Any: ...
    def setShort(self, *args: Any, **kwargs: Any) -> Any: ...
    def setShort2ArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def setShort3ArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def setShort4ArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def setShortArray(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUchar(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUcharArray(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUint(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUint2ArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUint3ArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUint4ArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUintArray(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUshortArray(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB14E950>

def MScriptUtil_createFloatArrayFromList(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_createFloatMatrixFromList(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_createIntArrayFromList(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_createMatrixFromList(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getBool(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getBoolArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getChar(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getCharArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getDouble(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getDouble2ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getDouble3ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getDouble4ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getDoubleArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getFloat(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getFloat2ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getFloat3ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getFloat4ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getFloatArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getInt(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getInt2ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getInt3ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getInt4ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getIntArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getShort(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getShort2ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getShort3ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getShort4ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getShortArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getUchar(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getUcharArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getUint(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getUint2ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getUint3ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getUint4ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getUintArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getUshortArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setBool(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setBoolArray(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setChar(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setCharArray(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setDouble(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setDouble2ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setDouble3ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setDouble4ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setDoubleArray(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setFloat(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setFloat2ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setFloat3ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setFloat4ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setFloatArray(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setInt(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setInt2ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setInt3ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setInt4ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setIntArray(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setShort(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setShort2ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setShort3ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setShort4ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setShortArray(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setUchar(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setUcharArray(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setUint(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setUint2ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setUint3ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setUint4ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setUintArray(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setUshortArray(*args: Any, **kwargs: Any) -> Any: ...
class MSelectionList(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def add(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDagPath(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDependNode(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPlug(self, *args: Any, **kwargs: Any) -> Any: ...
    def getSelectionStrings(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasItemPartly(self, *args: Any, **kwargs: Any) -> Any: ...
    def intersect(self, *args: Any, **kwargs: Any) -> Any: ...
    def isEmpty(self, *args: Any, **kwargs: Any) -> Any: ...
    kMergeNormal: int = 0
    kRemoveFromList: int = 2
    kXORWithList: int = 1
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    def merge(self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self, *args: Any, **kwargs: Any) -> Any: ...
    def replace(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB15A360>
    def toggle(self, *args: Any, **kwargs: Any) -> Any: ...

def MSelectionList_className(*args: Any, **kwargs: Any) -> Any: ...
class MSelectionMask(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __or__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addMask(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterSelectionType(self, *args: Any, **kwargs: Any) -> Any: ...
    def getSelectionTypePriority(self, *args: Any, **kwargs: Any) -> Any: ...
    def intersects(self, *args: Any, **kwargs: Any) -> Any: ...
    kSelectAnimAny: int = 68
    kSelectAnimCurves: int = 63
    kSelectAnimInTangents: int = 65
    kSelectAnimKeyframes: int = 64
    kSelectAnimMask: int = 67
    kSelectAnimOutTangents: int = 66
    kSelectCVs: int = 30
    kSelectCameras: int = 6
    kSelectClusters: int = 8
    kSelectCollisionModels: int = 21
    kSelectComponentsMask: int = 62
    kSelectCurveKnots: int = 47
    kSelectCurveParmPoints: int = 46
    kSelectCurves: int = 26
    kSelectCurvesOnSurfaces: int = 53
    kSelectDynamicConstraints: int = 82
    kSelectEdges: int = 42
    kSelectEditPoints: int = 32
    kSelectEmitters: int = 16
    kSelectFacets: int = 43
    kSelectFields: int = 17
    kSelectFluids: int = 77
    kSelectFollicles: int = 79
    kSelectGuideLines: int = 71
    kSelectHairSystems: int = 78
    kSelectHandles: int = 0
    kSelectHulls: int = 31
    kSelectIkEndEffectors: int = 3
    kSelectIkHandles: int = 2
    kSelectIsoparms: int = 52
    kSelectJointPivots: int = 57
    kSelectJoints: int = 4
    kSelectLatticePoints: int = 55
    kSelectLattices: int = 7
    kSelectLights: int = 5
    kSelectLocalAxis: int = 1
    kSelectLocators: int = 28
    kSelectManipulators: int = 70
    kSelectMeshComponents: int = 45
    kSelectMeshEdges: int = 34
    kSelectMeshFaces: int = 36
    kSelectMeshFreeEdges: int = 35
    kSelectMeshLines: int = 44
    kSelectMeshUVs: int = 40
    kSelectMeshVerts: int = 33
    kSelectMeshes: int = 12
    kSelectNCloths: int = 80
    kSelectNParticles: int = 83
    kSelectNRigids: int = 81
    kSelectNurbsCurves: int = 10
    kSelectNurbsSurfaces: int = 11
    kSelectObjectGroups: int = 75
    kSelectObjectsMask: int = 29
    kSelectOrientationLocators: int = 23
    kSelectPPStrokes: int = 54
    kSelectParticleShapes: int = 15
    kSelectParticles: int = 56
    kSelectPivots: int = 60
    kSelectPointsForGravity: int = 72
    kSelectPointsOnCurvesForGravity: int = 73
    kSelectPointsOnSurfacesForGravity: int = 74
    kSelectRigidBodies: int = 19
    kSelectRigidConstraints: int = 20
    kSelectRotatePivots: int = 59
    kSelectScalePivots: int = 58
    kSelectSculpts: int = 9
    kSelectSelectHandles: int = 61
    kSelectSketchPlanes: int = 14
    kSelectSprings: int = 18
    kSelectSubdiv: int = 13
    kSelectSubdivMeshEdges: int = 38
    kSelectSubdivMeshFaces: int = 39
    kSelectSubdivMeshMaps: int = 76
    kSelectSubdivMeshPoints: int = 37
    kSelectSurfaceEdge: int = 51
    kSelectSurfaceKnots: int = 49
    kSelectSurfaceParmPoints: int = 48
    kSelectSurfaceRange: int = 50
    kSelectSurfaces: int = 27
    kSelectTemplates: int = 69
    kSelectTextures: int = 25
    kSelectUVLocators: int = 24
    kSelectVertices: int = 41
    kSelectXYZLocators: int = 22
    def registerSelectionType(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMask(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB15A9A0>

def MSelectionMask_deregisterSelectionType(*args: Any, **kwargs: Any) -> Any: ...
def MSelectionMask_getSelectionTypePriority(*args: Any, **kwargs: Any) -> Any: ...
def MSelectionMask_registerSelectionType(*args: Any, **kwargs: Any) -> Any: ...
class MSetAttrEdit(MEdit):
    """
    """
    def __init__(self, *args, **kwargs) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def plug(self, *args: Any, **kwargs: Any) -> Any: ...
    def plugName(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB15AF40>

def MSetAttrEdit_className(*args: Any, **kwargs: Any) -> Any: ...
class MSpace(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    kInvalid: int = 0
    kLast: int = 5
    kObject: int = 2
    kPostTransform: int = 3
    kPreTransform: int = 2
    kTransform: int = 1
    kWorld: int = 4
    thisown: property = <property object at 0x00000218A1328130>

class MStreamUtils(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def readChar(self, *args: Any, **kwargs: Any) -> Any: ...
    def readCharBuffer(self, *args: Any, **kwargs: Any) -> Any: ...
    def readDouble(self, *args: Any, **kwargs: Any) -> Any: ...
    def readFloat(self, *args: Any, **kwargs: Any) -> Any: ...
    def readInt(self, *args: Any, **kwargs: Any) -> Any: ...
    def stdErrorStream(self, *args: Any, **kwargs: Any) -> Any: ...
    def stdOutStream(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB15E180>
    def writeChar(self, *args: Any, **kwargs: Any) -> Any: ...
    def writeCharBuffer(self, *args: Any, **kwargs: Any) -> Any: ...
    def writeDouble(self, *args: Any, **kwargs: Any) -> Any: ...
    def writeFloat(self, *args: Any, **kwargs: Any) -> Any: ...
    def writeInt(self, *args: Any, **kwargs: Any) -> Any: ...

def MStreamUtils_readChar(*args: Any, **kwargs: Any) -> Any: ...
def MStreamUtils_readCharBuffer(*args: Any, **kwargs: Any) -> Any: ...
def MStreamUtils_readDouble(*args: Any, **kwargs: Any) -> Any: ...
def MStreamUtils_readFloat(*args: Any, **kwargs: Any) -> Any: ...
def MStreamUtils_readInt(*args: Any, **kwargs: Any) -> Any: ...
def MStreamUtils_stdErrorStream(*args: Any, **kwargs: Any) -> Any: ...
def MStreamUtils_stdOutStream(*args: Any, **kwargs: Any) -> Any: ...
def MStreamUtils_writeChar(*args: Any, **kwargs: Any) -> Any: ...
def MStreamUtils_writeCharBuffer(*args: Any, **kwargs: Any) -> Any: ...
def MStreamUtils_writeDouble(*args: Any, **kwargs: Any) -> Any: ...
def MStreamUtils_writeFloat(*args: Any, **kwargs: Any) -> Any: ...
def MStreamUtils_writeInt(*args: Any, **kwargs: Any) -> Any: ...
class MSyntax(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addArg(self, *args: Any, **kwargs: Any) -> Any: ...
    def addFlag(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def canEdit(self, *args: Any, **kwargs: Any) -> Any: ...
    def canQuery(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def enableEdit(self, *args: Any, **kwargs: Any) -> Any: ...
    def enableQuery(self, *args: Any, **kwargs: Any) -> Any: ...
    kAngle: int = 8
    kBoolean: int = 2
    kDistance: int = 7
    kDouble: int = 4
    kInvalidArgType: int = 0
    kInvalidObjectFormat: int = 0
    kLastArgType: int = 11
    kLastObjectFormat: int = 4
    kLong: int = 3
    kNoArg: int = 1
    kNone: int = 1
    kSelectionItem: int = 10
    kSelectionList: int = 3
    kString: int = 5
    kStringObjects: int = 2
    kTime: int = 9
    kUnsigned: int = 6
    def makeFlagMultiUse(self, *args: Any, **kwargs: Any) -> Any: ...
    def makeFlagQueryWithFullArgs(self, *args: Any, **kwargs: Any) -> Any: ...
    def maxObjects(self, *args: Any, **kwargs: Any) -> Any: ...
    def minObjects(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxObjects(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMinObjects(self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectType(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB15E630>
    def useSelectionAsDefault(self, *args: Any, **kwargs: Any) -> Any: ...

def MSyntax_className(*args: Any, **kwargs: Any) -> Any: ...
class MTesselationParams(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    fsDefaultTesselationParams: property = <property object at 0x00000218AB1604A0>
    kGeneralFormat: int = 2
    kLastFlag: int = 11
    kQuads: int = 1
    kSpanEquiSpaced: int = 3
    kStandardFitFormat: int = 1
    kSurface3DDistance: int = 0
    kSurface3DEquiSpaced: int = 1
    kSurfaceEquiSpaced: int = 2
    kTriangleCountFormat: int = 0
    kTriangles: int = 0
    kUseChordHeightRatio: int = 1
    kUseEdgeSmooth: int = 10
    kUseFractionalTolerance: int = 0
    kUseMaxEdgeLength: int = 3
    kUseMaxNumberPolys: int = 4
    kUseMaxSubdivisionLevel: int = 5
    kUseMaxUVRectangleSize: int = 7
    kUseMinEdgeLength: int = 2
    kUseMinScreenSize: int = 6
    kUseRelativeTolerance: int = 9
    kUseTriangleEdgeSwapping: int = 8
    def set3DDelta(self, *args: Any, **kwargs: Any) -> Any: ...
    def setBoundingBoxDiagonal(self, *args: Any, **kwargs: Any) -> Any: ...
    def setChordHeightRatio(self, *args: Any, **kwargs: Any) -> Any: ...
    def setEdgeSmoothFactor(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFitTolerance(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFormatType(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxEdgeLength(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxNumberPolys(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxSubdivisionLevel(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxUVRectangleSize(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMinEdgeLength(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMinScreenSize(self, *args: Any, **kwargs: Any) -> Any: ...
    def setOutputType(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRelativeFitTolerance(self, *args: Any, **kwargs: Any) -> Any: ...
    def setStdChordHeightRatio(self, *args: Any, **kwargs: Any) -> Any: ...
    def setStdFractionalTolerance(self, *args: Any, **kwargs: Any) -> Any: ...
    def setStdMinEdgeLength(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSubdivisionFlag(self, *args: Any, **kwargs: Any) -> Any: ...
    def setTriangleCount(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUDistanceFraction(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUIsoparmType(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUNumber(self, *args: Any, **kwargs: Any) -> Any: ...
    def setVDistanceFraction(self, *args: Any, **kwargs: Any) -> Any: ...
    def setVIsoparmType(self, *args: Any, **kwargs: Any) -> Any: ...
    def setVNumber(self, *args: Any, **kwargs: Any) -> Any: ...
    def setWorldspaceToScreenTransform(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB15EB80>

def MTesselationParams_className(*args: Any, **kwargs: Any) -> Any: ...
class MTime(object):
    """
    """
    def __add__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __div__(self, *args) -> Any: ...
    def __eq__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __ge__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __gt__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __iadd__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __idiv__(self, *args) -> Any: ...
    def __imul__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __isub__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __itruediv__(self, *args) -> Any: ...
    def __le__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __lt__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __mul__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __ne__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __sub__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __truediv__(self, *args) -> Any: ...
    def asUnits(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self, *args: Any, **kwargs: Any) -> Any: ...
    k100FPS: int = 25
    k10FPS: int = 18
    k1200FPS: int = 38
    k120FPS: int = 26
    k125FPS: int = 27
    k12FPS: int = 19
    k1500FPS: int = 39
    k150FPS: int = 28
    k15FPS: int = 5
    k16FPS: int = 20
    k2000FPS: int = 40
    k200FPS: int = 29
    k20FPS: int = 21
    k23_976FPS: int = 43
    k240FPS: int = 30
    k24FPS: int = 6
    k250FPS: int = 31
    k25FPS: int = 7
    k29_97DF: int = 45
    k29_97FPS: int = 44
    k2FPS: int = 12
    k3000FPS: int = 41
    k300FPS: int = 32
    k30FPS: int = 8
    k375FPS: int = 33
    k3FPS: int = 13
    k400FPS: int = 34
    k40FPS: int = 22
    k44100FPS: int = 48
    k47_952FPS: int = 46
    k48000FPS: int = 49
    k48FPS: int = 9
    k4FPS: int = 14
    k500FPS: int = 35
    k50FPS: int = 10
    k59_94FPS: int = 47
    k5FPS: int = 15
    k6000FPS: int = 42
    k600FPS: int = 36
    k60FPS: int = 11
    k6FPS: int = 16
    k750FPS: int = 37
    k75FPS: int = 23
    k80FPS: int = 24
    k8FPS: int = 17
    k90FPS: int = 50
    kFilm: int = 6
    kGames: int = 5
    kHours: int = 1
    kInvalid: int = 0
    kLast: int = 52
    kMilliseconds: int = 4
    kMinutes: int = 2
    kNTSCField: int = 11
    kNTSCFrame: int = 8
    kPALField: int = 10
    kPALFrame: int = 7
    kSeconds: int = 3
    kShowScan: int = 9
    kUserDef: int = 51
    def setUIUnit(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUnit(self, *args: Any, **kwargs: Any) -> Any: ...
    def setValue(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB160A90>
    def ticksPerSecond(self, *args: Any, **kwargs: Any) -> Any: ...
    def uiUnit(self, *args: Any, **kwargs: Any) -> Any: ...
    def unit(self, *args: Any, **kwargs: Any) -> Any: ...
    def value(self, *args: Any, **kwargs: Any) -> Any: ...

class MTimeArray(object):
    """
    """
    def __getitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def append(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    def sizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB160590>

def MTimeArray_className(*args: Any, **kwargs: Any) -> Any: ...
class MTimeRange(object):
    """
    """
    def __eq__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __ne__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __or__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def bounds(self, *args: Any, **kwargs: Any) -> Any: ...
    def contains(self, *args: Any, **kwargs: Any) -> Any: ...
    def empty(self, *args: Any, **kwargs: Any) -> Any: ...
    def intersects(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB162810>

def MTime_className(*args: Any, **kwargs: Any) -> Any: ...
def MTime_setUIUnit(*args: Any, **kwargs: Any) -> Any: ...
def MTime_ticksPerSecond(*args: Any, **kwargs: Any) -> Any: ...
def MTime_uiUnit(*args: Any, **kwargs: Any) -> Any: ...
class MTimer(object):
    """
    """
    def __eq__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __ne__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def beginTimer(self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self, *args: Any, **kwargs: Any) -> Any: ...
    def elapsedTime(self, *args: Any, **kwargs: Any) -> Any: ...
    def endTimer(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB162310>

class MTimerMessage(MMessage):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addTimerCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSleepCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def sleepCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB162B30>

def MTimerMessage_addTimerCallback(*args: Any, **kwargs: Any) -> Any: ...
def MTimerMessage_className(*args: Any, **kwargs: Any) -> Any: ...
def MTimerMessage_setSleepCallback(*args: Any, **kwargs: Any) -> Any: ...
def MTimerMessage_sleepCallback(*args: Any, **kwargs: Any) -> Any: ...
class MTransformationMatrix(object):
    """
    """
    def __eq__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __ne__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addRotation(self, *args: Any, **kwargs: Any) -> Any: ...
    def addRotationQuaternion(self, *args: Any, **kwargs: Any) -> Any: ...
    def addScale(self, *args: Any, **kwargs: Any) -> Any: ...
    def addShear(self, *args: Any, **kwargs: Any) -> Any: ...
    def addTranslation(self, *args: Any, **kwargs: Any) -> Any: ...
    def asMatrix(self, *args: Any, **kwargs: Any) -> Any: ...
    def asMatrixInverse(self, *args: Any, **kwargs: Any) -> Any: ...
    def asRotateMatrix(self, *args: Any, **kwargs: Any) -> Any: ...
    def asScaleMatrix(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def eulerRotation(self, *args: Any, **kwargs: Any) -> Any: ...
    def getRotation(self, *args: Any, **kwargs: Any) -> Any: ...
    def getRotationQuaternion(self, *args: Any, **kwargs: Any) -> Any: ...
    def getScale(self, *args: Any, **kwargs: Any) -> Any: ...
    def getShear(self, *args: Any, **kwargs: Any) -> Any: ...
    def getTranslation(self, *args: Any, **kwargs: Any) -> Any: ...
    identity: MTransformationMatrix = <maya.OpenMaya.MTransformationMatrix; proxy of <Swig Object of type 'MTransformationMatrix *' at 0x00000218AB167180> >
    def isEquivalent(self, *args: Any, **kwargs: Any) -> Any: ...
    kInvalid: int = 0
    kLast: int = 7
    kXYZ: int = 1
    kXZY: int = 4
    kYXZ: int = 5
    kYZX: int = 2
    kZXY: int = 3
    kZYX: int = 6
    def reorderRotation(self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateBy(self, *args: Any, **kwargs: Any) -> Any: ...
    def rotatePivot(self, *args: Any, **kwargs: Any) -> Any: ...
    def rotatePivotTranslation(self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateTo(self, *args: Any, **kwargs: Any) -> Any: ...
    def rotation(self, *args: Any, **kwargs: Any) -> Any: ...
    def rotationOrder(self, *args: Any, **kwargs: Any) -> Any: ...
    def rotationOrientation(self, *args: Any, **kwargs: Any) -> Any: ...
    def scalePivot(self, *args: Any, **kwargs: Any) -> Any: ...
    def scalePivotTranslation(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotatePivot(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotatePivotTranslation(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotation(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotationOrientation(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotationQuaternion(self, *args: Any, **kwargs: Any) -> Any: ...
    def setScale(self, *args: Any, **kwargs: Any) -> Any: ...
    def setScalePivot(self, *args: Any, **kwargs: Any) -> Any: ...
    def setScalePivotTranslation(self, *args: Any, **kwargs: Any) -> Any: ...
    def setShear(self, *args: Any, **kwargs: Any) -> Any: ...
    def setToRotationAxis(self, *args: Any, **kwargs: Any) -> Any: ...
    def setTranslation(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB162CC0>
    def translation(self, *args: Any, **kwargs: Any) -> Any: ...

def MTransformationMatrix_className(*args: Any, **kwargs: Any) -> Any: ...
class MTrimBoundaryArray(object):
    """
    """
    def __getitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def append(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self, *args: Any, **kwargs: Any) -> Any: ...
    def getMergedBoundary(self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self, *args: Any, **kwargs: Any) -> Any: ...
    def reserve(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    def size(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB166A90>

def MTrimBoundaryArray_className(*args: Any, **kwargs: Any) -> Any: ...
class MTypeId(object):
    """
    """
    def __eq__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __ne__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def id(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB166F40>

def MTypeId_className(*args: Any, **kwargs: Any) -> Any: ...
class MURI(object):
    """
    """
    def __eq__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __ne__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addQueryItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def asString(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllQueryItemKeys(self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllQueryItemValues(self, *args: Any, **kwargs: Any) -> Any: ...
    def getAuthority(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDirectory(self, *args: Any, **kwargs: Any) -> Any: ...
    def getFileName(self, *args: Any, **kwargs: Any) -> Any: ...
    def getFragment(self, *args: Any, **kwargs: Any) -> Any: ...
    def getHost(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPassword(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPath(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPort(self, *args: Any, **kwargs: Any) -> Any: ...
    def getQueryItemValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def getQueryPairDelimiter(self, *args: Any, **kwargs: Any) -> Any: ...
    def getQueryValueDelimiter(self, *args: Any, **kwargs: Any) -> Any: ...
    def getScheme(self, *args: Any, **kwargs: Any) -> Any: ...
    def getUserInfo(self, *args: Any, **kwargs: Any) -> Any: ...
    def getUserName(self, *args: Any, **kwargs: Any) -> Any: ...
    def isEmpty(self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self, *args: Any, **kwargs: Any) -> Any: ...
    def isValidURI(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAllQueryItems(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeQueryItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def setAuthority(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDirectory(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFileName(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFragment(self, *args: Any, **kwargs: Any) -> Any: ...
    def setHost(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPassword(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPath(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPort(self, *args: Any, **kwargs: Any) -> Any: ...
    def setQueryDelimiters(self, *args: Any, **kwargs: Any) -> Any: ...
    def setScheme(self, *args: Any, **kwargs: Any) -> Any: ...
    def setURI(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUserInfo(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUserName(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB1692C0>

def MURI_className(*args: Any, **kwargs: Any) -> Any: ...
def MURI_isValidURI(*args: Any, **kwargs: Any) -> Any: ...
class MUint64Array(object):
    """
    """
    def __add__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __delitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __eq__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __getitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __iadd__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __len__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __ne__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __radd__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __setitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def append(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    def sizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB168220>

def MUint64Array_className(*args: Any, **kwargs: Any) -> Any: ...
class MUintArray(object):
    """
    """
    def __add__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __delitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __eq__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __getitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __iadd__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __len__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __ne__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __radd__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __setitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def append(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    def sizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB168A40>

def MUintArray_className(*args: Any, **kwargs: Any) -> Any: ...
class MUserData(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteAfterUse(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDeleteAfterUse(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB16B090>

def MUserData_className(*args: Any, **kwargs: Any) -> Any: ...
class MUserEventMessage(MMessage):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addUserEventCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterUserEvent(self, *args: Any, **kwargs: Any) -> Any: ...
    def isUserEvent(self, *args: Any, **kwargs: Any) -> Any: ...
    def postUserEvent(self, *args: Any, **kwargs: Any) -> Any: ...
    def registerUserEvent(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB16B270>

def MUserEventMessage_addUserEventCallback(*args: Any, **kwargs: Any) -> Any: ...
def MUserEventMessage_className(*args: Any, **kwargs: Any) -> Any: ...
def MUserEventMessage_deregisterUserEvent(*args: Any, **kwargs: Any) -> Any: ...
def MUserEventMessage_isUserEvent(*args: Any, **kwargs: Any) -> Any: ...
def MUserEventMessage_postUserEvent(*args: Any, **kwargs: Any) -> Any: ...
def MUserEventMessage_registerUserEvent(*args: Any, **kwargs: Any) -> Any: ...
class MUuid(object):
    """
    """
    def __eq__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __ne__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def asString(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self, *args: Any, **kwargs: Any) -> Any: ...
    def generate(self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB16B540>
    def valid(self, *args: Any, **kwargs: Any) -> Any: ...

def MUuid_className(*args: Any, **kwargs: Any) -> Any: ...
class MVector(object):
    """
    """
    def __add__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __call__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __div__(self, *args) -> Any: ...
    def __eq__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __getitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __iadd__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __idiv__(self, *args) -> Any: ...
    def __imul__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __isub__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __itruediv__(self, *args) -> Any: ...
    def __mul__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __ne__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __neg__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __sub__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __truediv__(self, *args) -> Any: ...
    def __xor__(self, *args: Any, **kwargs: Any) -> Any: ...
    def angle(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self, *args: Any, **kwargs: Any) -> Any: ...
    def isEquivalent(self, *args: Any, **kwargs: Any) -> Any: ...
    def isParallel(self, *args: Any, **kwargs: Any) -> Any: ...
    kWaxis: int = 3
    kXaxis: int = 0
    kYaxis: int = 1
    kZaxis: int = 2
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    def normal(self, *args: Any, **kwargs: Any) -> Any: ...
    def normalize(self, *args: Any, **kwargs: Any) -> Any: ...
    def one(self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateBy(self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateTo(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB16BE50>
    def transformAsNormal(self, *args: Any, **kwargs: Any) -> Any: ...
    x: property = <property object at 0x00000218AB16E630>
    def xAxis(self, *args: Any, **kwargs: Any) -> Any: ...
    def xNegAxis(self, *args: Any, **kwargs: Any) -> Any: ...
    y: property = <property object at 0x00000218AB16E680>
    def yAxis(self, *args: Any, **kwargs: Any) -> Any: ...
    def yNegAxis(self, *args: Any, **kwargs: Any) -> Any: ...
    z: property = <property object at 0x00000218AB16E6D0>
    def zAxis(self, *args: Any, **kwargs: Any) -> Any: ...
    def zNegAxis(self, *args: Any, **kwargs: Any) -> Any: ...
    def zero(self, *args: Any, **kwargs: Any) -> Any: ...

class MVectorArray(object):
    """
    """
    def __getitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def append(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    def sizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB16B900>

def MVectorArray_className(*args: Any, **kwargs: Any) -> Any: ...
class MWeight(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def influence(self, *args: Any, **kwargs: Any) -> Any: ...
    def seam(self, *args: Any, **kwargs: Any) -> Any: ...
    def setInfluence(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSeam(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB16E7C0>

def MWeight_className(*args: Any, **kwargs: Any) -> Any: ...
class array2dDouble(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self, *args: Any, **kwargs: Any) -> Any: ...
    def getptr(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0B3E00>

class array2dFloat(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self, *args: Any, **kwargs: Any) -> Any: ...
    def getptr(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0B3860>

class array3dDouble(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self, *args: Any, **kwargs: Any) -> Any: ...
    def getptr(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0B6040>

class array3dFloat(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self, *args: Any, **kwargs: Any) -> Any: ...
    def getptr(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0B3A40>

class array3dInt(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self, *args: Any, **kwargs: Any) -> Any: ...
    def getptr(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0B34A0>

class array4dDouble(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self, *args: Any, **kwargs: Any) -> Any: ...
    def getptr(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0B6220>

class array4dFloat(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self, *args: Any, **kwargs: Any) -> Any: ...
    def getptr(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0B3C20>

class array4dInt(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self, *args: Any, **kwargs: Any) -> Any: ...
    def getptr(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0B3680>

class boolPtr(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0A6130>
    def value(self, *args: Any, **kwargs: Any) -> Any: ...

def boolPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
def boolRefValue(ptr) -> Any: ...
class charPtr(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0941D0>
    def value(self, *args: Any, **kwargs: Any) -> Any: ...

def charPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
def charRefValue(ptr) -> Any: ...
def createBoolRef() -> Any: ...
def createCharRef() -> Any: ...
def createDoubleRef() -> Any: ...
def createFloatRef() -> Any: ...
def createIntRef() -> Any: ...
def createShortRef() -> Any: ...
def createUCharRef() -> Any: ...
def createUIntRef() -> Any: ...
class doublePtr(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0A3EF0>
    def value(self, *args: Any, **kwargs: Any) -> Any: ...

def doublePtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
def doubleRefValue(ptr) -> Any: ...
class floatPtr(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0A3CC0>
    def value(self, *args: Any, **kwargs: Any) -> Any: ...

def floatPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
def floatRefValue(ptr) -> Any: ...
class intPtr(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0A3860>
    def value(self, *args: Any, **kwargs: Any) -> Any: ...

def intPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
def intRefValue(ptr) -> Any: ...
def setRefValue(refObject, value) -> Any: ...
class shortPtr(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0A3A90>
    def value(self, *args: Any, **kwargs: Any) -> Any: ...

def shortPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
def shortRefValue(ptr) -> Any: ...
class uCharPtr(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0B3270>
    def value(self, *args: Any, **kwargs: Any) -> Any: ...

def uCharPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
def uCharRefValue(ptr) -> Any: ...
class uIntPtr(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x00000218AB0B3040>
    def value(self, *args: Any, **kwargs: Any) -> Any: ...

def uIntPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
def uIntRefValue(ptr) -> Any: ...
