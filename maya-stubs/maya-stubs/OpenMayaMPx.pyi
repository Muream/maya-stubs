from __future__ import annotations

from typing import *


class MExternalContentInfoTable(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addResolvedEntry(self, *args: Any, **kwargs: Any) -> Any: ...
    def addUnresolvedEntry(self, *args: Any, **kwargs: Any) -> Any: ...
    def getEntryByIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def getInfoByKey(self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x000001840C4C4F40>

class MExternalContentLocationTable(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addEntry(self, *args: Any, **kwargs: Any) -> Any: ...
    def getEntryByIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def getLocationByKey(self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x000001840C4F9220>

class MFnPlugin(MFnBase):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addMenuItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def apiVersion(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterAnimCurveInterpolator(self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterAttributePatternFactory(self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterCacheFormat(self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterCommand(self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterConstraintCommand(self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterContextCommand(self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterControlCommand(self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterData(self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterDevice(self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterDisplayFilter(self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterDragAndDropBehavior(self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterEvaluator(self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterFileTranslator(self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterIkSolver(self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterImageFile(self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterModelEditorCommand(self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterNode(self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterRenderPassImpl(self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterRenderer(self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterTopologyEvaluator(self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterURIFileResolver(self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlugin(self, *args: Any, **kwargs: Any) -> Any: ...
    def getCallableInfo(self, *args: Any, **kwargs: Any) -> Any: ...
    def isNodeRegistered(self, *args: Any, **kwargs: Any) -> Any: ...
    kDefaultDataLocation: SwigPyObject = <Swig Object of type 'MString *' at 0x000001840C4D7900>
    kImageFilePriorityDefault: int = 10
    kImageFilePriorityHigh: int = 10
    kImageFilePriorityHighest: int = 0
    kImageFilePriorityLow: int = 20
    kImageFilePriorityLowest: int = 30
    def loadPath(self, *args: Any, **kwargs: Any) -> Any: ...
    def matrixTypeIdFromXformId(self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self, *args: Any, **kwargs: Any) -> Any: ...
    def registerAnimCurveInterpolator(self, *args: Any, **kwargs: Any) -> Any: ...
    def registerAttributePatternFactory(self, *args: Any, **kwargs: Any) -> Any: ...
    def registerBakeEngine(self, *args: Any, **kwargs: Any) -> Any: ...
    def registerCacheFormat(self, *args: Any, **kwargs: Any) -> Any: ...
    def registerCommand(self, *args: Any, **kwargs: Any) -> Any: ...
    def registerConstraintCommand(self, *args: Any, **kwargs: Any) -> Any: ...
    def registerContextCommand(self, *args: Any, **kwargs: Any) -> Any: ...
    def registerControlCommand(self, *args: Any, **kwargs: Any) -> Any: ...
    def registerData(self, *args: Any, **kwargs: Any) -> Any: ...
    def registerDevice(self, *args: Any, **kwargs: Any) -> Any: ...
    def registerDisplayFilter(self, *args: Any, **kwargs: Any) -> Any: ...
    def registerDragAndDropBehavior(self, *args: Any, **kwargs: Any) -> Any: ...
    def registerEvaluator(self, *args: Any, **kwargs: Any) -> Any: ...
    def registerFileTranslator(self, *args: Any, **kwargs: Any) -> Any: ...
    def registerIkSolver(self, *args: Any, **kwargs: Any) -> Any: ...
    def registerImageFile(self, *args: Any, **kwargs: Any) -> Any: ...
    def registerMaterialInfo(self, *args: Any, **kwargs: Any) -> Any: ...
    def registerModelEditorCommand(self, *args: Any, **kwargs: Any) -> Any: ...
    def registerNode(self, *args: Any, **kwargs: Any) -> Any: ...
    def registerRenderPassImpl(self, *args: Any, **kwargs: Any) -> Any: ...
    def registerRenderer(self, *args: Any, **kwargs: Any) -> Any: ...
    def registerShape(self, *args: Any, **kwargs: Any) -> Any: ...
    def registerTopologyEvaluator(self, *args: Any, **kwargs: Any) -> Any: ...
    def registerTransform(self, *args: Any, **kwargs: Any) -> Any: ...
    def registerUI(self, *args: Any, **kwargs: Any) -> Any: ...
    def registerUIStrings(self, *args: Any, **kwargs: Any) -> Any: ...
    def registerURIFileResolver(self, *args: Any, **kwargs: Any) -> Any: ...
    def registeringCallableScript(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeMenuItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCallableInfo(self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRegisteringCallableScript(self, *args: Any, **kwargs: Any) -> Any: ...
    def setVersion(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x000001840C44FEA0>
    def unregisterBakeEngine(self, *args: Any, **kwargs: Any) -> Any: ...
    def unregisterMaterialInfo(self, *args: Any, **kwargs: Any) -> Any: ...
    def vendor(self, *args: Any, **kwargs: Any) -> Any: ...
    def version(self, *args: Any, **kwargs: Any) -> Any: ...

def MFnPlugin_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnPlugin_findPlugin(*args: Any, **kwargs: Any) -> Any: ...
def MFnPlugin_isNodeRegistered(*args: Any, **kwargs: Any) -> Any: ...
def MFnPlugin_registeringCallableScript(*args: Any, **kwargs: Any) -> Any: ...
def MFnPlugin_setRegisteringCallableScript(*args: Any, **kwargs: Any) -> Any: ...
class MPx3dModelView(object):
    """
    """
    def __disown__(self) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def backgroundColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def backgroundColorBottom(self, *args: Any, **kwargs: Any) -> Any: ...
    def backgroundColorTop(self, *args: Any, **kwargs: Any) -> Any: ...
    def beginGL(self, *args: Any, **kwargs: Any) -> Any: ...
    def beginXorDrawing(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def colorAtIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def customDraw(self, *args: Any, **kwargs: Any) -> Any: ...
    def customDrawEnabled(self, *args: Any, **kwargs: Any) -> Any: ...
    def destroyOnPanelDestruction(self, *args: Any, **kwargs: Any) -> Any: ...
    def displayAxisAtOriginOn(self, *args: Any, **kwargs: Any) -> Any: ...
    def displayAxisOn(self, *args: Any, **kwargs: Any) -> Any: ...
    def displayCameraAnnotationOn(self, *args: Any, **kwargs: Any) -> Any: ...
    def displayHUD(self, *args: Any, **kwargs: Any) -> Any: ...
    def displayStyle(self, *args: Any, **kwargs: Any) -> Any: ...
    def doUpdateOnMove(self, *args: Any, **kwargs: Any) -> Any: ...
    def drawAdornments(self, *args: Any, **kwargs: Any) -> Any: ...
    def drawAdornmentsNow(self, *args: Any, **kwargs: Any) -> Any: ...
    def drawHUDNow(self, *args: Any, **kwargs: Any) -> Any: ...
    def drawInterrupt(self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOnePass(self, *args: Any, **kwargs: Any) -> Any: ...
    def drawText(self, *args: Any, **kwargs: Any) -> Any: ...
    def endGL(self, *args: Any, **kwargs: Any) -> Any: ...
    def endXorDrawing(self, *args: Any, **kwargs: Any) -> Any: ...
    def filteredObjectList(self, *args: Any, **kwargs: Any) -> Any: ...
    def fogColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def fogDensity(self, *args: Any, **kwargs: Any) -> Any: ...
    def fogEnd(self, *args: Any, **kwargs: Any) -> Any: ...
    def fogMode(self, *args: Any, **kwargs: Any) -> Any: ...
    def fogSource(self, *args: Any, **kwargs: Any) -> Any: ...
    def fogStart(self, *args: Any, **kwargs: Any) -> Any: ...
    def getAsM3dView(self, *args: Any, **kwargs: Any) -> Any: ...
    def getCamera(self, *args: Any, **kwargs: Any) -> Any: ...
    def getCameraHUDName(self, *args: Any, **kwargs: Any) -> Any: ...
    def getCameraSet(self, *args: Any, **kwargs: Any) -> Any: ...
    def getColorIndexAndTable(self, *args: Any, **kwargs: Any) -> Any: ...
    def getCurrentCameraSetCamera(self, *args: Any, **kwargs: Any) -> Any: ...
    def getModelView(self, *args: Any, **kwargs: Any) -> Any: ...
    def getObjectsToView(self, *args: Any, **kwargs: Any) -> Any: ...
    def handleDraw(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasStereoBufferSupport(self, *args: Any, **kwargs: Any) -> Any: ...
    def includeInvisible(self, *args: Any, **kwargs: Any) -> Any: ...
    def isBackfaceCulling(self, *args: Any, **kwargs: Any) -> Any: ...
    def isBackgroundFogEnabled(self, *args: Any, **kwargs: Any) -> Any: ...
    def isBackgroundGradient(self, *args: Any, **kwargs: Any) -> Any: ...
    def isFogEnabled(self, *args: Any, **kwargs: Any) -> Any: ...
    def isShadeActiveOnly(self, *args: Any, **kwargs: Any) -> Any: ...
    def isTextureDisplayEnabled(self, *args: Any, **kwargs: Any) -> Any: ...
    def isTwoSidedLighting(self, *args: Any, **kwargs: Any) -> Any: ...
    def isVisible(self, *args: Any, **kwargs: Any) -> Any: ...
    def isWireframeOnShaded(self, *args: Any, **kwargs: Any) -> Any: ...
    def isXrayEnabled(self, *args: Any, **kwargs: Any) -> Any: ...
    kFogCoordinate: int = 1
    kFogExponential: int = 1
    kFogExponentialSquared: int = 2
    kFogFragment: int = 0
    kFogLinear: int = 0
    kLightActive: int = 2
    kLightAll: int = 0
    kLightDefault: int = 3
    kLightNone: int = 4
    kLightQuality: int = 5
    kLightSelected: int = 1
    def lightingMode(self, *args: Any, **kwargs: Any) -> Any: ...
    def multipleDrawEnabled(self, *args: Any, **kwargs: Any) -> Any: ...
    def multipleDrawPassCount(self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self, *args: Any, **kwargs: Any) -> Any: ...
    def numActiveColors(self, *args: Any, **kwargs: Any) -> Any: ...
    def numDormantColors(self, *args: Any, **kwargs: Any) -> Any: ...
    def numUserDefinedColors(self, *args: Any, **kwargs: Any) -> Any: ...
    def objectDisplay(self, *args: Any, **kwargs: Any) -> Any: ...
    def okForMultipleDraw(self, *args: Any, **kwargs: Any) -> Any: ...
    def portHeight(self, *args: Any, **kwargs: Any) -> Any: ...
    def portWidth(self, *args: Any, **kwargs: Any) -> Any: ...
    def postMultipleDraw(self, *args: Any, **kwargs: Any) -> Any: ...
    def postMultipleDrawPass(self, *args: Any, **kwargs: Any) -> Any: ...
    def preMultipleDraw(self, *args: Any, **kwargs: Any) -> Any: ...
    def preMultipleDrawPass(self, *args: Any, **kwargs: Any) -> Any: ...
    def processDraw(self, *args: Any, **kwargs: Any) -> Any: ...
    def refresh(self, *args: Any, **kwargs: Any) -> Any: ...
    def removingCamera(self, *args: Any, **kwargs: Any) -> Any: ...
    def requestOkForDraw(self, *args: Any, **kwargs: Any) -> Any: ...
    def setBackfaceCulling(self, *args: Any, **kwargs: Any) -> Any: ...
    def setBackgroundFogEnabled(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCamera(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCameraInDraw(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCameraSet(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCurrentCameraSetCamera(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCustomDrawEnable(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDestroyOnPanelDestruction(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDisplayAxis(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDisplayAxisAtOrigin(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDisplayCameraAnnotation(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDisplayHUD(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDisplayStyle(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoUpdateOnMove(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDrawAdornments(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDrawCameraOverride(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDrawColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDrawInterrupt(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFogColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFogDensity(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFogEnabled(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFogEnd(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFogMode(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFogSource(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFogStart(self, *args: Any, **kwargs: Any) -> Any: ...
    def setInStereoDrawMode(self, *args: Any, **kwargs: Any) -> Any: ...
    def setIncludeInvisible(self, *args: Any, **kwargs: Any) -> Any: ...
    def setLightingMode(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMultipleDrawEnable(self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectDisplay(self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectsToView(self, *args: Any, **kwargs: Any) -> Any: ...
    def setTextureDisplayEnabled(self, *args: Any, **kwargs: Any) -> Any: ...
    def setTwoSidedLighting(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUserDefinedColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def setViewSelected(self, *args: Any, **kwargs: Any) -> Any: ...
    def setViewSelectedPrefix(self, *args: Any, **kwargs: Any) -> Any: ...
    def setViewSelectedSet(self, *args: Any, **kwargs: Any) -> Any: ...
    def setWireframeOnShaded(self, *args: Any, **kwargs: Any) -> Any: ...
    def setXrayEnabled(self, *args: Any, **kwargs: Any) -> Any: ...
    def templateColor(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x000001840C526450>
    def updateViewingParameters(self, *args: Any, **kwargs: Any) -> Any: ...
    def userDefinedColorIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def viewIsFiltered(self, *args: Any, **kwargs: Any) -> Any: ...
    def viewSelected(self, *args: Any, **kwargs: Any) -> Any: ...
    def viewSelectedPrefix(self, *args: Any, **kwargs: Any) -> Any: ...
    def viewSelectedSet(self, *args: Any, **kwargs: Any) -> Any: ...
    def viewToObjectSpace(self, *args: Any, **kwargs: Any) -> Any: ...
    def viewToWorld(self, *args: Any, **kwargs: Any) -> Any: ...
    def viewType(self, *args: Any, **kwargs: Any) -> Any: ...
    def wantStereoGLBuffer(self, *args: Any, **kwargs: Any) -> Any: ...
    def worldToView(self, *args: Any, **kwargs: Any) -> Any: ...

def MPx3dModelView_className(*args: Any, **kwargs: Any) -> Any: ...
def MPx3dModelView_getModelView(*args: Any, **kwargs: Any) -> Any: ...
class MPxAnimCurveInterpolator(object):
    """
    """
    def __disown__(self) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def evaluate(self, *args: Any, **kwargs: Any) -> Any: ...
    def initialize(self, *args: Any, **kwargs: Any) -> Any: ...
    kEvaluateAtKey: int = 1
    kLockType: int = 2
    thisown: property = <property object at 0x000001840C5244A0>
    def typeId(self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self, *args: Any, **kwargs: Any) -> Any: ...

class MPxAssembly(MPxNode):
    """
    """
    def __disown__(self) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def activate(self, *args: Any, **kwargs: Any) -> Any: ...
    def activateRep(self, *args: Any, **kwargs: Any) -> Any: ...
    def activating(self, *args: Any, **kwargs: Any) -> Any: ...
    def addAddAttrEdit(self, *args: Any, **kwargs: Any) -> Any: ...
    def addConnectAttrEdit(self, *args: Any, **kwargs: Any) -> Any: ...
    def addDeleteAttrEdit(self, *args: Any, **kwargs: Any) -> Any: ...
    def addDisconnectAttrEdit(self, *args: Any, **kwargs: Any) -> Any: ...
    def addEdits(self, *args: Any, **kwargs: Any) -> Any: ...
    def addParentEdit(self, *args: Any, **kwargs: Any) -> Any: ...
    def addSetAttrEdit(self, *args: Any, **kwargs: Any) -> Any: ...
    def beforeSave(self, *args: Any, **kwargs: Any) -> Any: ...
    def canRepApplyEdits(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def createRepresentation(self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteAllRepresentations(self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteRepresentation(self, *args: Any, **kwargs: Any) -> Any: ...
    def getActive(self, *args: Any, **kwargs: Any) -> Any: ...
    def getInitialRep(self, *args: Any, **kwargs: Any) -> Any: ...
    def getInstancePtr(self, *args: Any, **kwargs: Any) -> Any: ...
    def getRepLabel(self, *args: Any, **kwargs: Any) -> Any: ...
    def getRepNamespace(self, *args: Any, **kwargs: Any) -> Any: ...
    def getRepType(self, *args: Any, **kwargs: Any) -> Any: ...
    def getRepresentations(self, *args: Any, **kwargs: Any) -> Any: ...
    def handlesAddEdits(self, *args: Any, **kwargs: Any) -> Any: ...
    def inactivateRep(self, *args: Any, **kwargs: Any) -> Any: ...
    def isActive(self, *args: Any, **kwargs: Any) -> Any: ...
    def memberAdded(self, *args: Any, **kwargs: Any) -> Any: ...
    def memberRemoved(self, *args: Any, **kwargs: Any) -> Any: ...
    def performActivate(self, *args: Any, **kwargs: Any) -> Any: ...
    def performInactivate(self, *args: Any, **kwargs: Any) -> Any: ...
    def postActivateRep(self, *args: Any, **kwargs: Any) -> Any: ...
    def postApplyEdits(self, *args: Any, **kwargs: Any) -> Any: ...
    def postLoad(self, *args: Any, **kwargs: Any) -> Any: ...
    def postUnapplyEdits(self, *args: Any, **kwargs: Any) -> Any: ...
    def preApplyEdits(self, *args: Any, **kwargs: Any) -> Any: ...
    def preUnapplyEdits(self, *args: Any, **kwargs: Any) -> Any: ...
    def repTypes(self, *args: Any, **kwargs: Any) -> Any: ...
    def setInstancePtr(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRepLabel(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRepName(self, *args: Any, **kwargs: Any) -> Any: ...
    def supportsEdits(self, *args: Any, **kwargs: Any) -> Any: ...
    def supportsMemberChanges(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x000001840C510DB0>
    def type(self, *args: Any, **kwargs: Any) -> Any: ...
    def updateRepNamespace(self, *args: Any, **kwargs: Any) -> Any: ...

def MPxAssembly_className(*args: Any, **kwargs: Any) -> Any: ...
class MPxAttributePatternFactory(object):
    """
    """
    def __disown__(self) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def createPatternsFromFile(self, *args: Any, **kwargs: Any) -> Any: ...
    def createPatternsFromString(self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x000001840C4F35E0>

def MPxAttributePatternFactory_className(*args: Any, **kwargs: Any) -> Any: ...
class MPxBakeEngine(object):
    """
    """
    def __disown__(self) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def bake(self, *args: Any, **kwargs: Any) -> Any: ...
    def getUVRange(self, *args: Any, **kwargs: Any) -> Any: ...
    def setNeedTransparency(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x000001840C4F3810>

class MPxBlendShape(MPxGeometryFilter):
    """
    """
    def __disown__(self) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def deformData(self, *args: Any, **kwargs: Any) -> Any: ...
    inputComponentsTarget: property = <property object at 0x000001840C520720>
    inputGeomTarget: property = <property object at 0x000001840C520680>
    inputPointsTarget: property = <property object at 0x000001840C5206D0>
    inputTarget: property = <property object at 0x000001840C520590>
    inputTargetGroup: property = <property object at 0x000001840C5205E0>
    inputTargetItem: property = <property object at 0x000001840C520630>
    targetWeights: property = <property object at 0x000001840C520770>
    thisown: property = <property object at 0x000001840C520450>
    def type(self, *args: Any, **kwargs: Any) -> Any: ...
    weight: property = <property object at 0x000001840C520540>

def MPxBlendShape_className(*args: Any, **kwargs: Any) -> Any: ...
class MPxCacheConfigRuleFilter(object):
    """
    """
    def __disown__(self) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def isMatch(self, *args: Any, **kwargs: Any) -> Any: ...
    def postRulesExecution(self, *args: Any, **kwargs: Any) -> Any: ...
    def preRulesExecution(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x000001840C51F4A0>

class MPxCacheFormat(object):
    """
    """
    def __disown__(self) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def beginReadChunk(self, *args: Any, **kwargs: Any) -> Any: ...
    def beginWriteChunk(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def close(self, *args: Any, **kwargs: Any) -> Any: ...
    def endReadChunk(self, *args: Any, **kwargs: Any) -> Any: ...
    def endWriteChunk(self, *args: Any, **kwargs: Any) -> Any: ...
    def extension(self, *args: Any, **kwargs: Any) -> Any: ...
    def findChannelName(self, *args: Any, **kwargs: Any) -> Any: ...
    def findTime(self, *args: Any, **kwargs: Any) -> Any: ...
    def handlesDescription(self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self, *args: Any, **kwargs: Any) -> Any: ...
    kRead: int = 0
    kReadWrite: int = 2
    kWrite: int = 1
    def open(self, *args: Any, **kwargs: Any) -> Any: ...
    def readArraySize(self, *args: Any, **kwargs: Any) -> Any: ...
    def readChannelName(self, *args: Any, **kwargs: Any) -> Any: ...
    def readDescription(self, *args: Any, **kwargs: Any) -> Any: ...
    def readDoubleArray(self, *args: Any, **kwargs: Any) -> Any: ...
    def readDoubleVectorArray(self, *args: Any, **kwargs: Any) -> Any: ...
    def readFloatArray(self, *args: Any, **kwargs: Any) -> Any: ...
    def readFloatVectorArray(self, *args: Any, **kwargs: Any) -> Any: ...
    def readHeader(self, *args: Any, **kwargs: Any) -> Any: ...
    def readInt32(self, *args: Any, **kwargs: Any) -> Any: ...
    def readIntArray(self, *args: Any, **kwargs: Any) -> Any: ...
    def readNextTime(self, *args: Any, **kwargs: Any) -> Any: ...
    def readTime(self, *args: Any, **kwargs: Any) -> Any: ...
    def rewind(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x000001840C51C8B0>
    def writeChannelName(self, *args: Any, **kwargs: Any) -> Any: ...
    def writeDescription(self, *args: Any, **kwargs: Any) -> Any: ...
    def writeDoubleArray(self, *args: Any, **kwargs: Any) -> Any: ...
    def writeDoubleVectorArray(self, *args: Any, **kwargs: Any) -> Any: ...
    def writeFloatArray(self, *args: Any, **kwargs: Any) -> Any: ...
    def writeFloatVectorArray(self, *args: Any, **kwargs: Any) -> Any: ...
    def writeHeader(self, *args: Any, **kwargs: Any) -> Any: ...
    def writeInt32(self, *args: Any, **kwargs: Any) -> Any: ...
    def writeIntArray(self, *args: Any, **kwargs: Any) -> Any: ...
    def writeTime(self, *args: Any, **kwargs: Any) -> Any: ...

def MPxCacheFormat_className(*args: Any, **kwargs: Any) -> Any: ...
class MPxCameraSet(MPxNode):
    """
    """
    def __disown__(self) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    active: property = <property object at 0x000001840C4C49F0>
    camera: property = <property object at 0x000001840C4C4950>
    cameraLayer: property = <property object at 0x000001840C4C4900>
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    order: property = <property object at 0x000001840C4C4A40>
    sceneData: property = <property object at 0x000001840C4C49A0>
    thisown: property = <property object at 0x000001840C4C4860>
    def type(self, *args: Any, **kwargs: Any) -> Any: ...

def MPxCameraSet_className(*args: Any, **kwargs: Any) -> Any: ...
class MPxCommand(object):
    """
    """
    def __disown__(self) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def appendToResult(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def clearResult(self, *args: Any, **kwargs: Any) -> Any: ...
    def commandString(self, *args: Any, **kwargs: Any) -> Any: ...
    def currentDoubleResult(self, *args: Any, **kwargs: Any) -> Any: ...
    def currentIntResult(self, *args: Any, **kwargs: Any) -> Any: ...
    def currentResultType(self, *args: Any, **kwargs: Any) -> Any: ...
    def currentStringResult(self, *args: Any, **kwargs: Any) -> Any: ...
    def displayError(self, *args: Any, **kwargs: Any) -> Any: ...
    def displayInfo(self, *args: Any, **kwargs: Any) -> Any: ...
    def displayWarning(self, *args: Any, **kwargs: Any) -> Any: ...
    def doIt(self, *args: Any, **kwargs: Any) -> Any: ...
    def getCurrentResult(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasSyntax(self, *args: Any, **kwargs: Any) -> Any: ...
    def isCurrentResultArray(self, *args: Any, **kwargs: Any) -> Any: ...
    def isHistoryOn(self, *args: Any, **kwargs: Any) -> Any: ...
    def isUndoable(self, *args: Any, **kwargs: Any) -> Any: ...
    kDouble: int = 1
    kLong: int = 0
    kNoArg: int = 3
    kString: int = 2
    def redoIt(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCommandString(self, *args: Any, **kwargs: Any) -> Any: ...
    def setHistoryOn(self, *args: Any, **kwargs: Any) -> Any: ...
    def setResult(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUndoable(self, *args: Any, **kwargs: Any) -> Any: ...
    def syntax(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x000001840C4E5D60>
    def undoIt(self, *args: Any, **kwargs: Any) -> Any: ...

def MPxCommand_appendToResult(*args: Any, **kwargs: Any) -> Any: ...
def MPxCommand_className(*args: Any, **kwargs: Any) -> Any: ...
def MPxCommand_clearResult(*args: Any, **kwargs: Any) -> Any: ...
def MPxCommand_currentDoubleResult(*args: Any, **kwargs: Any) -> Any: ...
def MPxCommand_currentIntResult(*args: Any, **kwargs: Any) -> Any: ...
def MPxCommand_currentResultType(*args: Any, **kwargs: Any) -> Any: ...
def MPxCommand_currentStringResult(*args: Any, **kwargs: Any) -> Any: ...
def MPxCommand_displayError(*args: Any, **kwargs: Any) -> Any: ...
def MPxCommand_displayInfo(*args: Any, **kwargs: Any) -> Any: ...
def MPxCommand_displayWarning(*args: Any, **kwargs: Any) -> Any: ...
def MPxCommand_getCurrentResult(*args: Any, **kwargs: Any) -> Any: ...
def MPxCommand_isCurrentResultArray(*args: Any, **kwargs: Any) -> Any: ...
def MPxCommand_setResult(*args: Any, **kwargs: Any) -> Any: ...
class MPxComponentShape(MPxSurfaceShape):
    """
    """
    def __disown__(self) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def componentToPlugs(self, *args: Any, **kwargs: Any) -> Any: ...
    def createFullVertexGroup(self, *args: Any, **kwargs: Any) -> Any: ...
    def getControlPoints(self, *args: Any, **kwargs: Any) -> Any: ...
    def localShapeInAttr(self, *args: Any, **kwargs: Any) -> Any: ...
    def match(self, *args: Any, **kwargs: Any) -> Any: ...
    def setControlPoints(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x000001840C4C4220>
    def transformUsing(self, *args: Any, **kwargs: Any) -> Any: ...

class MPxConstraint(MPxNode):
    """
    """
    def __disown__(self) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def constraintRotateOrderAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    enableRestPosition: property = <property object at 0x000001840C524810>
    def getOutputAttributes(self, *args: Any, **kwargs: Any) -> Any: ...
    lockOutput: property = <property object at 0x000001840C524860>
    def passiveOutputAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def targetAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x000001840C5246D0>
    def weightAttribute(self, *args: Any, **kwargs: Any) -> Any: ...

class MPxConstraintCommand(MPxCommand):
    """
    """
    def __disown__(self) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def _syntax(self, *args: Any, **kwargs: Any) -> Any: ...
    def aimVectorAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def appendSyntax(self, *args: Any, **kwargs: Any) -> Any: ...
    def connectObjectAndConstraint(self, *args: Any, **kwargs: Any) -> Any: ...
    def connectTarget(self, *args: Any, **kwargs: Any) -> Any: ...
    def constraintEnableRestAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def constraintInstancedAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def constraintNode(self, *args: Any, **kwargs: Any) -> Any: ...
    def constraintOutputAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def constraintRestAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def constraintTargetAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def constraintTargetInstancedAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def constraintTargetWeightAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def constraintTypeId(self, *args: Any, **kwargs: Any) -> Any: ...
    def createdConstraint(self, *args: Any, **kwargs: Any) -> Any: ...
    def doCreate(self, *args: Any, **kwargs: Any) -> Any: ...
    def doEdit(self, *args: Any, **kwargs: Any) -> Any: ...
    def doIt(self, *args: Any, **kwargs: Any) -> Any: ...
    def doQuery(self, *args: Any, **kwargs: Any) -> Any: ...
    def getObjectAttributesArray(self, *args: Any, **kwargs: Any) -> Any: ...
    def handleNewTargets(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasVectorFlags(self, *args: Any, **kwargs: Any) -> Any: ...
    def objectAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def offsetAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def parseArgs(self, *args: Any, **kwargs: Any) -> Any: ...
    def redoIt(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRestPosition(self, *args: Any, **kwargs: Any) -> Any: ...
    def supportsOffset(self, *args: Any, **kwargs: Any) -> Any: ...
    def targetType(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x000001840C524A40>
    def undoIt(self, *args: Any, **kwargs: Any) -> Any: ...
    def upVectorAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def worldUpMatrixAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def worldUpTypeAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def worldUpVectorAttribute(self, *args: Any, **kwargs: Any) -> Any: ...

def MPxConstraint_className(*args: Any, **kwargs: Any) -> Any: ...
class MPxContext(object):
    """
    """
    def __disown__(self) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def _beginMarquee(self, *args: Any, **kwargs: Any) -> Any: ...
    def _dragMarquee(self, *args: Any, **kwargs: Any) -> Any: ...
    def _ignoreEntry(self, *args: Any, **kwargs: Any) -> Any: ...
    def _newToolCommand(self, *args: Any, **kwargs: Any) -> Any: ...
    def _releaseMarquee(self, *args: Any, **kwargs: Any) -> Any: ...
    def _setCursor(self, *args: Any, **kwargs: Any) -> Any: ...
    def _setHelpString(self, *args: Any, **kwargs: Any) -> Any: ...
    def _setTitleString(self, *args: Any, **kwargs: Any) -> Any: ...
    def abortAction(self, *args: Any, **kwargs: Any) -> Any: ...
    def addManipulator(self, *args: Any, **kwargs: Any) -> Any: ...
    def argTypeNumericalInput(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def completeAction(self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteAction(self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteManipulators(self, *args: Any, **kwargs: Any) -> Any: ...
    def doDrag(self, *args: Any, **kwargs: Any) -> Any: ...
    def doEnterRegion(self, *args: Any, **kwargs: Any) -> Any: ...
    def doHold(self, *args: Any, **kwargs: Any) -> Any: ...
    def doPress(self, *args: Any, **kwargs: Any) -> Any: ...
    def doPtrMoved(self, *args: Any, **kwargs: Any) -> Any: ...
    def doRelease(self, *args: Any, **kwargs: Any) -> Any: ...
    def feedbackNumericalInput(self, *args: Any, **kwargs: Any) -> Any: ...
    def helpStateHasChanged(self, *args: Any, **kwargs: Any) -> Any: ...
    def image(self, *args: Any, **kwargs: Any) -> Any: ...
    def inAlternateContext(self, *args: Any, **kwargs: Any) -> Any: ...
    kImage1: int = 0
    kImage2: int = 1
    kImage3: int = 2
    def newToolCommand(self, *args: Any, **kwargs: Any) -> Any: ...
    def processNumericalInput(self, *args: Any, **kwargs: Any) -> Any: ...
    def setImage(self, *args: Any, **kwargs: Any) -> Any: ...
    def stringClassName(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x000001840C52BB80>
    def toolOffCleanup(self, *args: Any, **kwargs: Any) -> Any: ...
    def toolOnSetup(self, *args: Any, **kwargs: Any) -> Any: ...

class MPxContextCommand(object):
    """
    """
    def __disown__(self) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def _parser(self, *args: Any, **kwargs: Any) -> Any: ...
    def _syntax(self, *args: Any, **kwargs: Any) -> Any: ...
    def appendSyntax(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def doEditFlags(self, *args: Any, **kwargs: Any) -> Any: ...
    def doQueryFlags(self, *args: Any, **kwargs: Any) -> Any: ...
    def makeObj(self, *args: Any, **kwargs: Any) -> Any: ...
    def setResult(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x000001840C52D720>

def MPxContextCommand_className(*args: Any, **kwargs: Any) -> Any: ...
class MPxContextExitRegion(MPxContext):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def doExitRegion(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x000001840C52D630>

def MPxContext__ignoreEntry(*args: Any, **kwargs: Any) -> Any: ...
def MPxContext_className(*args: Any, **kwargs: Any) -> Any: ...
class MPxControlCommand(object):
    """
    """
    def __disown__(self) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def _control(self, *args: Any, **kwargs: Any) -> Any: ...
    def _parser(self, *args: Any, **kwargs: Any) -> Any: ...
    def _syntax(self, *args: Any, **kwargs: Any) -> Any: ...
    def appendSyntax(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def clearResult(self, *args: Any, **kwargs: Any) -> Any: ...
    def doEditFlags(self, *args: Any, **kwargs: Any) -> Any: ...
    def doQueryFlags(self, *args: Any, **kwargs: Any) -> Any: ...
    def makeControl(self, *args: Any, **kwargs: Any) -> Any: ...
    def setResult(self, *args: Any, **kwargs: Any) -> Any: ...
    def skipFlagForCreate(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x000001840C52DA90>

def MPxControlCommand_className(*args: Any, **kwargs: Any) -> Any: ...
class MPxData(object):
    """
    """
    def __disown__(self) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self, *args: Any, **kwargs: Any) -> Any: ...
    kData: int = 0
    kGeometryData: int = 1
    kLast: int = 2
    def name(self, *args: Any, **kwargs: Any) -> Any: ...
    def readASCII(self, *args: Any, **kwargs: Any) -> Any: ...
    def readBinary(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x000001840C4C4590>
    def typeId(self, *args: Any, **kwargs: Any) -> Any: ...
    def writeASCII(self, *args: Any, **kwargs: Any) -> Any: ...
    def writeBinary(self, *args: Any, **kwargs: Any) -> Any: ...

class MPxDeformerNode(MPxGeometryFilter):
    """
    """
    def __disown__(self) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDeformationDetails(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDeformationDetails(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseExistingConnectionWhenSetEditing(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x000001840C51FCC0>
    def type(self, *args: Any, **kwargs: Any) -> Any: ...
    weightList: property = <property object at 0x000001840C51FEA0>
    def weightValue(self, *args: Any, **kwargs: Any) -> Any: ...
    weights: property = <property object at 0x000001840C51FEF0>

def MPxDeformerNode_className(*args: Any, **kwargs: Any) -> Any: ...
class MPxDragAndDropBehavior(object):
    """
    """
    def __disown__(self) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def connectAttrToAttr(self, *args: Any, **kwargs: Any) -> Any: ...
    def connectAttrToNode(self, *args: Any, **kwargs: Any) -> Any: ...
    def connectNodeToAttr(self, *args: Any, **kwargs: Any) -> Any: ...
    def connectNodeToNode(self, *args: Any, **kwargs: Any) -> Any: ...
    def shouldBeUsedFor(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x000001840C52DEF0>

def MPxDragAndDropBehavior_className(*args: Any, **kwargs: Any) -> Any: ...
class MPxEditData(object):
    """
    """
    def __disown__(self) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    _dataStringValue: property = <property object at 0x000001840C4C4DB0>
    _dataValue: property = <property object at 0x000001840C4C4D60>
    def _getStringValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def _getValue(self) -> Any: ...
    def _setStringValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def _setValue(self, value) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def isEqual(self, *args: Any, **kwargs: Any) -> Any: ...
    def isLessThan(self, *args: Any, **kwargs: Any) -> Any: ...
    def performIsEqual(self, *args: Any, **kwargs: Any) -> Any: ...
    def performIsLessThan(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x000001840C4C4B80>

def MPxEditData_className(*args: Any, **kwargs: Any) -> Any: ...
class MPxEmitterNode(MPxNode):
    """
    """
    def __disown__(self) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def compute(self, *args: Any, **kwargs: Any) -> Any: ...
    def draw(self, *args: Any, **kwargs: Any) -> Any: ...
    def evalEmission2dTexture(self, *args: Any, **kwargs: Any) -> Any: ...
    def getCurrentTime(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDeltaTime(self, *args: Any, **kwargs: Any) -> Any: ...
    def getEmitterType(self, *args: Any, **kwargs: Any) -> Any: ...
    def getMaxDistance(self, *args: Any, **kwargs: Any) -> Any: ...
    def getMinDistance(self, *args: Any, **kwargs: Any) -> Any: ...
    def getOwnerShape(self, *args: Any, **kwargs: Any) -> Any: ...
    def getRandomSeed(self, *args: Any, **kwargs: Any) -> Any: ...
    def getRandomState(self, *args: Any, **kwargs: Any) -> Any: ...
    def getRate(self, *args: Any, **kwargs: Any) -> Any: ...
    def getStartTime(self, *args: Any, **kwargs: Any) -> Any: ...
    def getWorldMatrix(self, *args: Any, **kwargs: Any) -> Any: ...
    def getWorldPosition(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasValidEmission2dTexture(self, *args: Any, **kwargs: Any) -> Any: ...
    mCurrentTime: property = <property object at 0x000001840C53F5E0>
    mDeltaTime: property = <property object at 0x000001840C53F400>
    mDirection: property = <property object at 0x000001840C53CF90>
    mDirectionX: property = <property object at 0x000001840C53F040>
    mDirectionY: property = <property object at 0x000001840C53F090>
    mDirectionZ: property = <property object at 0x000001840C53F0E0>
    mEmitterType: property = <property object at 0x000001840C53CEA0>
    mInheritFactor: property = <property object at 0x000001840C53F450>
    mIsFull: property = <property object at 0x000001840C4EE720>
    mMaxDistance: property = <property object at 0x000001840C53F6D0>
    mMinDistance: property = <property object at 0x000001840C53F680>
    mOutput: property = <property object at 0x000001840C53F630>
    mOwnerCentroid: property = <property object at 0x000001840C53F1D0>
    mOwnerCentroidX: property = <property object at 0x000001840C53F220>
    mOwnerCentroidY: property = <property object at 0x000001840C53F270>
    mOwnerCentroidZ: property = <property object at 0x000001840C53F2C0>
    mOwnerPosData: property = <property object at 0x000001840C53F130>
    mOwnerVelData: property = <property object at 0x000001840C53F180>
    mRandState: property = <property object at 0x000001840C53F4F0>
    mRandStateX: property = <property object at 0x000001840C53F540>
    mRandStateY: property = <property object at 0x000001840C53F590>
    mRandStateZ: property = <property object at 0x000001840C524450>
    mRate: property = <property object at 0x000001840C53CEF0>
    mSeed: property = <property object at 0x000001840C53F4A0>
    mSpeed: property = <property object at 0x000001840C53CF40>
    mStartTime: property = <property object at 0x000001840C53F3B0>
    mSweptGeometry: property = <property object at 0x000001840C53F310>
    mWorldMatrix: property = <property object at 0x000001840C53F360>
    def randgen(self, *args: Any, **kwargs: Any) -> Any: ...
    def resetRandomState(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRandomState(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x000001840C53CD60>
    def type(self, *args: Any, **kwargs: Any) -> Any: ...
    def volumePrimitiveBoundingBox(self, *args: Any, **kwargs: Any) -> Any: ...
    def volumePrimitiveDistanceFromAxis(self, *args: Any, **kwargs: Any) -> Any: ...
    def volumePrimitivePointInside(self, *args: Any, **kwargs: Any) -> Any: ...

def MPxEmitterNode_className(*args: Any, **kwargs: Any) -> Any: ...
class MPxFieldNode(MPxNode):
    """
    """
    def __disown__(self) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def compute(self, *args: Any, **kwargs: Any) -> Any: ...
    def draw(self, *args: Any, **kwargs: Any) -> Any: ...
    def falloffCurve(self, *args: Any, **kwargs: Any) -> Any: ...
    def getForceAtPoint(self, *args: Any, **kwargs: Any) -> Any: ...
    def iconBitmap(self, *args: Any, **kwargs: Any) -> Any: ...
    def iconSizeAndOrigin(self, *args: Any, **kwargs: Any) -> Any: ...
    def isFalloffCurveConstantOne(self, *args: Any, **kwargs: Any) -> Any: ...
    mApplyPerVertex: property = <property object at 0x000001840C541220>
    mAttenuation: property = <property object at 0x000001840C541130>
    mDeltaTime: property = <property object at 0x000001840C5413B0>
    mInputData: property = <property object at 0x000001840C541270>
    mInputForce: property = <property object at 0x000001840C541400>
    mInputMass: property = <property object at 0x000001840C541360>
    mInputPPData: property = <property object at 0x000001840C5416D0>
    mInputPositions: property = <property object at 0x000001840C5412C0>
    mInputVelocities: property = <property object at 0x000001840C541310>
    mMagnitude: property = <property object at 0x000001840C5410E0>
    mMaxDistance: property = <property object at 0x000001840C541180>
    mOutputForce: property = <property object at 0x000001840C541450>
    mOwnerCentroid: property = <property object at 0x000001840C541590>
    mOwnerCentroidX: property = <property object at 0x000001840C5414A0>
    mOwnerCentroidY: property = <property object at 0x000001840C5414F0>
    mOwnerCentroidZ: property = <property object at 0x000001840C541540>
    mOwnerPPData: property = <property object at 0x000001840C4D5860>
    mOwnerPosData: property = <property object at 0x000001840C5415E0>
    mOwnerVelData: property = <property object at 0x000001840C541630>
    mUseMaxDistance: property = <property object at 0x000001840C5411D0>
    mWorldMatrix: property = <property object at 0x000001840C541680>
    thisown: property = <property object at 0x000001840C53FDB0>
    def type(self, *args: Any, **kwargs: Any) -> Any: ...

def MPxFieldNode_className(*args: Any, **kwargs: Any) -> Any: ...
class MPxFileResolver(object):
    """
    """
    def __disown__(self) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def findURIResolverByName(self, *args: Any, **kwargs: Any) -> Any: ...
    def findURIResolverByScheme(self, *args: Any, **kwargs: Any) -> Any: ...
    def getURIResolversByName(self, *args: Any, **kwargs: Any) -> Any: ...
    def getURIResolversByScheme(self, *args: Any, **kwargs: Any) -> Any: ...
    kInput: int = 2
    kNone: int = 1
    def numURIResolvers(self, *args: Any, **kwargs: Any) -> Any: ...
    def performAfterSaveURI(self, *args: Any, **kwargs: Any) -> Any: ...
    def resolveURI(self, *args: Any, **kwargs: Any) -> Any: ...
    def resolveURIWithContext(self, *args: Any, **kwargs: Any) -> Any: ...
    def resolverName(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x000001840C4F9450>
    def uriScheme(self, *args: Any, **kwargs: Any) -> Any: ...

def MPxFileResolver_className(*args: Any, **kwargs: Any) -> Any: ...
def MPxFileResolver_findURIResolverByName(*args: Any, **kwargs: Any) -> Any: ...
def MPxFileResolver_findURIResolverByScheme(*args: Any, **kwargs: Any) -> Any: ...
def MPxFileResolver_getURIResolversByName(*args: Any, **kwargs: Any) -> Any: ...
def MPxFileResolver_getURIResolversByScheme(*args: Any, **kwargs: Any) -> Any: ...
def MPxFileResolver_numURIResolvers(*args: Any, **kwargs: Any) -> Any: ...
class MPxFileTranslator(object):
    """
    """
    def __disown__(self) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def allowMultipleFileOptimization(self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeOpened(self, *args: Any, **kwargs: Any) -> Any: ...
    def defaultExtension(self, *args: Any, **kwargs: Any) -> Any: ...
    def fileAccessMode(self, *args: Any, **kwargs: Any) -> Any: ...
    def filter(self, *args: Any, **kwargs: Any) -> Any: ...
    def haveNamespaceSupport(self, *args: Any, **kwargs: Any) -> Any: ...
    def haveReadMethod(self, *args: Any, **kwargs: Any) -> Any: ...
    def haveReferenceMethod(self, *args: Any, **kwargs: Any) -> Any: ...
    def haveWriteMethod(self, *args: Any, **kwargs: Any) -> Any: ...
    def identifyFile(self, *args: Any, **kwargs: Any) -> Any: ...
    kCouldBeMyFileType: int = 1
    kExportAccessMode: int = 5
    kExportActiveAccessMode: int = 6
    kImportAccessMode: int = 3
    kIsMyFileType: int = 0
    kNotMyFileType: int = 2
    kOpenAccessMode: int = 1
    kReferenceAccessMode: int = 2
    kSaveAccessMode: int = 4
    kUnknownAccessMode: int = 0
    def reader(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x000001840C4F98B0>
    def writer(self, *args: Any, **kwargs: Any) -> Any: ...

def MPxFileTranslator_fileAccessMode(*args: Any, **kwargs: Any) -> Any: ...
class MPxFluidEmitterNode(MPxEmitterNode):
    """
    """
    def __disown__(self) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def compute(self, *args: Any, **kwargs: Any) -> Any: ...
    def fluidColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def fluidDensityEmission(self, *args: Any, **kwargs: Any) -> Any: ...
    def fluidDropoff(self, *args: Any, **kwargs: Any) -> Any: ...
    def fluidEmitColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def fluidEmitter(self, *args: Any, **kwargs: Any) -> Any: ...
    def fluidFuelEmission(self, *args: Any, **kwargs: Any) -> Any: ...
    def fluidHeatEmission(self, *args: Any, **kwargs: Any) -> Any: ...
    def fluidJitter(self, *args: Any, **kwargs: Any) -> Any: ...
    mEmissionFunction: property = <property object at 0x000001840C541C70>
    mEmitFluidColor: property = <property object at 0x000001840C5419F0>
    mFluidColor: property = <property object at 0x000001840C541A40>
    mFluidColorB: property = <property object at 0x000001840C541B30>
    mFluidColorG: property = <property object at 0x000001840C541AE0>
    mFluidColorR: property = <property object at 0x000001840C541A90>
    mFluidDensityEmission: property = <property object at 0x000001840C541950>
    mFluidDropoff: property = <property object at 0x000001840C541B80>
    mFluidFuelEmission: property = <property object at 0x000001840C487BD0>
    mFluidHeatEmission: property = <property object at 0x000001840C5419A0>
    mFluidJitter: property = <property object at 0x000001840C541C20>
    mTurbulence: property = <property object at 0x000001840C541BD0>
    thisown: property = <property object at 0x000001840C541810>
    def turbulence(self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self, *args: Any, **kwargs: Any) -> Any: ...

def MPxFluidEmitterNode_className(*args: Any, **kwargs: Any) -> Any: ...
class MPxGeometryData(MPxData):
    """
    """
    def __disown__(self) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteComponent(self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteComponentsFromGroups(self, *args: Any, **kwargs: Any) -> Any: ...
    def iterator(self, *args: Any, **kwargs: Any) -> Any: ...
    def matrix(self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMatrix(self, *args: Any, **kwargs: Any) -> Any: ...
    def smartCopy(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x000001840C4F9D60>
    def typeId(self, *args: Any, **kwargs: Any) -> Any: ...
    def updateCompleteVertexGroup(self, *args: Any, **kwargs: Any) -> Any: ...

class MPxGeometryFilter(MPxNode):
    """
    """
    def __disown__(self) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def accessoryAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def accessoryNodeSetup(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    componentTagExpression: property = <property object at 0x000001840C51FAE0>
    def deform(self, *args: Any, **kwargs: Any) -> Any: ...
    envelope: property = <property object at 0x000001840C51FB80>
    def getDeformationDetails(self, *args: Any, **kwargs: Any) -> Any: ...
    def getFixedSetupData(self, *args: Any, **kwargs: Any) -> Any: ...
    def getGeometryIterator(self, *args: Any, **kwargs: Any) -> Any: ...
    groupId: property = <property object at 0x000001840C51FA90>
    input: property = <property object at 0x000001840C51F9F0>
    inputGeom: property = <property object at 0x000001840C51FA40>
    outputGeom: property = <property object at 0x000001840C51FB30>
    def setDeformationDetails(self, *args: Any, **kwargs: Any) -> Any: ...
    def setModifiedCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseExistingConnectionWhenSetEditing(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x000001840C51F680>
    def type(self, *args: Any, **kwargs: Any) -> Any: ...

def MPxGeometryFilter_className(*args: Any, **kwargs: Any) -> Any: ...
class MPxGeometryIterator(object):
    """
    """
    def __disown__(self) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __next__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def component(self, *args: Any, **kwargs: Any) -> Any: ...
    def currentPoint(self, *args: Any, **kwargs: Any) -> Any: ...
    def geometry(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasNormals(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasPoints(self, *args: Any, **kwargs: Any) -> Any: ...
    def index(self, *args: Any, **kwargs: Any) -> Any: ...
    def indexUnsimplified(self, *args: Any, **kwargs: Any) -> Any: ...
    def isDone(self, *args: Any, **kwargs: Any) -> Any: ...
    def iteratorCount(self, *args: Any, **kwargs: Any) -> Any: ...
    def maxPoints(self, *args: Any, **kwargs: Any) -> Any: ...
    def next(self, *args: Any, **kwargs: Any) -> Any: ...
    def point(self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCurrentPoint(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxPoints(self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPoint(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPointGetNext(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x000001840C4FB180>

def MPxGeometryIterator_className(*args: Any, **kwargs: Any) -> Any: ...
class MPxGlBuffer(object):
    """
    """
    def __disown__(self) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def beginBufferNotify(self, *args: Any, **kwargs: Any) -> Any: ...
    def bindFbo(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def closeFbo(self, *args: Any, **kwargs: Any) -> Any: ...
    def endBufferNotify(self, *args: Any, **kwargs: Any) -> Any: ...
    def openFbo(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x000001840C5301D0>
    def unbindFbo(self, *args: Any, **kwargs: Any) -> Any: ...

def MPxGlBuffer_className(*args: Any, **kwargs: Any) -> Any: ...
class MPxHardwareShader(MPxNode):
    """
    """
    def __disown__(self) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def findResource(self, *args: Any, **kwargs: Any) -> Any: ...
    def getHardwareShaderPtr(self, *args: Any, **kwargs: Any) -> Any: ...
    outColor: property = <property object at 0x000001840C53BB80>
    outColorB: property = <property object at 0x000001840C53BC70>
    outColorG: property = <property object at 0x000001840C53BC20>
    outColorR: property = <property object at 0x000001840C53BBD0>
    def profile(self, *args: Any, **kwargs: Any) -> Any: ...
    def render(self, *args: Any, **kwargs: Any) -> Any: ...
    def renderSwatchImage(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUniformParameters(self, *args: Any, **kwargs: Any) -> Any: ...
    def setVaryingParameters(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x000001840C53B8B0>
    def transparencyOptions(self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self, *args: Any, **kwargs: Any) -> Any: ...

def MPxHardwareShader_className(*args: Any, **kwargs: Any) -> Any: ...
def MPxHardwareShader_findResource(*args: Any, **kwargs: Any) -> Any: ...
def MPxHardwareShader_getHardwareShaderPtr(*args: Any, **kwargs: Any) -> Any: ...
class MPxHwShaderNode(MPxNode):
    """
    """
    def __disown__(self) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def bind(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def colorsPerVertex(self, *args: Any, **kwargs: Any) -> Any: ...
    def currentPath(self, *args: Any, **kwargs: Any) -> Any: ...
    def currentShadingEngine(self, *args: Any, **kwargs: Any) -> Any: ...
    def dirtyMask(self, *args: Any, **kwargs: Any) -> Any: ...
    def geometry(self, *args: Any, **kwargs: Any) -> Any: ...
    def getHwShaderNodePtr(self, *args: Any, **kwargs: Any) -> Any: ...
    def glBind(self, *args: Any, **kwargs: Any) -> Any: ...
    def glGeometry(self, *args: Any, **kwargs: Any) -> Any: ...
    def glUnbind(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasTransparency(self, *args: Any, **kwargs: Any) -> Any: ...
    def invertTexCoords(self, *args: Any, **kwargs: Any) -> Any: ...
    def normalsPerVertex(self, *args: Any, **kwargs: Any) -> Any: ...
    outColor: property = <property object at 0x000001840C53B2C0>
    outColorB: property = <property object at 0x000001840C53B3B0>
    outColorG: property = <property object at 0x000001840C53B360>
    outColorR: property = <property object at 0x000001840C53B310>
    outGlowColor: property = <property object at 0x000001840C53B680>
    outGlowColorB: property = <property object at 0x000001840C53B770>
    outGlowColorG: property = <property object at 0x000001840C53B720>
    outGlowColorR: property = <property object at 0x000001840C53B6D0>
    outMatteOpacity: property = <property object at 0x000001840C53B540>
    outMatteOpacityB: property = <property object at 0x000001840C53B630>
    outMatteOpacityG: property = <property object at 0x000001840C53B5E0>
    outMatteOpacityR: property = <property object at 0x000001840C53B590>
    outTransparency: property = <property object at 0x000001840C53B400>
    outTransparencyB: property = <property object at 0x000001840C53B4F0>
    outTransparencyG: property = <property object at 0x000001840C53B4A0>
    outTransparencyR: property = <property object at 0x000001840C53B450>
    def provideFaceIDs(self, *args: Any, **kwargs: Any) -> Any: ...
    def provideLocalUVCoord(self, *args: Any, **kwargs: Any) -> Any: ...
    def provideVertexIDs(self, *args: Any, **kwargs: Any) -> Any: ...
    def renderSwatchImage(self, *args: Any, **kwargs: Any) -> Any: ...
    def supportsBatching(self, *args: Any, **kwargs: Any) -> Any: ...
    def texCoordsPerVertex(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x000001840C538B30>
    def transparencyOptions(self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self, *args: Any, **kwargs: Any) -> Any: ...
    def unbind(self, *args: Any, **kwargs: Any) -> Any: ...

def MPxHwShaderNode_className(*args: Any, **kwargs: Any) -> Any: ...
def MPxHwShaderNode_getHwShaderNodePtr(*args: Any, **kwargs: Any) -> Any: ...
class MPxIkSolverNode(MPxNode):
    """
    """
    def __disown__(self) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def _getJointAngles(self, *args: Any, **kwargs: Any) -> Any: ...
    def _setJointAngles(self, *args: Any, **kwargs: Any) -> Any: ...
    def _setToRestAngles(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def doSolve(self, *args: Any, **kwargs: Any) -> Any: ...
    def funcValueTolerance(self, *args: Any, **kwargs: Any) -> Any: ...
    def groupHandlesByTopology(self, *args: Any, **kwargs: Any) -> Any: ...
    def handleGroup(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasJointLimitSupport(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueSolution(self, *args: Any, **kwargs: Any) -> Any: ...
    def isAttributeCreatedBySolver(self, *args: Any, **kwargs: Any) -> Any: ...
    def isPositionOnly(self, *args: Any, **kwargs: Any) -> Any: ...
    def isSingleChainOnly(self, *args: Any, **kwargs: Any) -> Any: ...
    def maxIterations(self, *args: Any, **kwargs: Any) -> Any: ...
    def positionOnly(self, *args: Any, **kwargs: Any) -> Any: ...
    def postSolve(self, *args: Any, **kwargs: Any) -> Any: ...
    def preSolve(self, *args: Any, **kwargs: Any) -> Any: ...
    def rotatePlane(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFuncValueTolerance(self, *args: Any, **kwargs: Any) -> Any: ...
    def setHandleGroup(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxIterations(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPositionOnly(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotatePlane(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSingleChainOnly(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSupportJointLimits(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUniqueSolution(self, *args: Any, **kwargs: Any) -> Any: ...
    def singleChainOnly(self, *args: Any, **kwargs: Any) -> Any: ...
    def snapHandle(self, *args: Any, **kwargs: Any) -> Any: ...
    def solverTypeName(self, *args: Any, **kwargs: Any) -> Any: ...
    def supportJointLimits(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x000001840C520900>
    def toSolverSpace(self, *args: Any, **kwargs: Any) -> Any: ...
    def toWorldSpace(self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self, *args: Any, **kwargs: Any) -> Any: ...
    def uniqueSolution(self, *args: Any, **kwargs: Any) -> Any: ...

def MPxIkSolverNode_className(*args: Any, **kwargs: Any) -> Any: ...
class MPxImageFile(object):
    """
    """
    def __disown__(self) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def close(self, *args: Any, **kwargs: Any) -> Any: ...
    def glLoad(self, *args: Any, **kwargs: Any) -> Any: ...
    def load(self, *args: Any, **kwargs: Any) -> Any: ...
    def open(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x000001840C4FB8B0>

class MPxImagePlane(MPxNode):
    """
    """
    def __disown__(self) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    alphaGain: property = <property object at 0x000001840C4FF450>
    alreadyPremult: property = <property object at 0x000001840C4FFB30>
    center: property = <property object at 0x000001840C4FF860>
    centerX: property = <property object at 0x000001840C4FF8B0>
    centerY: property = <property object at 0x000001840C4FF900>
    centerZ: property = <property object at 0x000001840C4FF950>
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    colorGain: property = <property object at 0x000001840C4FF1D0>
    colorGainB: property = <property object at 0x000001840C4FF2C0>
    colorGainG: property = <property object at 0x000001840C4FF270>
    colorGainR: property = <property object at 0x000001840C4FF220>
    colorOffset: property = <property object at 0x000001840C4FF310>
    colorOffsetB: property = <property object at 0x000001840C4FF400>
    colorOffsetG: property = <property object at 0x000001840C4FF3B0>
    colorOffsetR: property = <property object at 0x000001840C4FF360>
    composite: property = <property object at 0x000001840C4FFBD0>
    coverage: property = <property object at 0x000001840C4FBE50>
    coverageOrigin: property = <property object at 0x000001840C4FBF40>
    coverageOriginX: property = <property object at 0x000001840C4FBF90>
    coverageOriginY: property = <property object at 0x000001840C4FF040>
    coverageX: property = <property object at 0x000001840C4FBEA0>
    coverageY: property = <property object at 0x000001840C4FBEF0>
    depth: property = <property object at 0x000001840C4FF5E0>
    depthBias: property = <property object at 0x000001840C4D4F90>
    depthFile: property = <property object at 0x000001840C4FFCC0>
    depthOversample: property = <property object at 0x000001840C4FFC20>
    depthScale: property = <property object at 0x000001840C4FFD10>
    displayMode: property = <property object at 0x000001840C4FF130>
    displayOnlyIfCurrent: property = <property object at 0x000001840C4FF180>
    def exactImageFile(self, *args: Any, **kwargs: Any) -> Any: ...
    fit: property = <property object at 0x000001840C4FF0E0>
    frameExtension: property = <property object at 0x000001840C4FBDB0>
    frameOffset: property = <property object at 0x000001840C4FBE00>
    height: property = <property object at 0x000001840C4FF9F0>
    imageName: property = <property object at 0x000001840C4FBD10>
    imageType: property = <property object at 0x000001840C4FBCC0>
    def loadImageMap(self, *args: Any, **kwargs: Any) -> Any: ...
    lockedToCamera: property = <property object at 0x000001840C4FF590>
    maxShadingSamples: property = <property object at 0x000001840C4FF540>
    offset: property = <property object at 0x000001840C4FF770>
    offsetX: property = <property object at 0x000001840C4FF7C0>
    offsetY: property = <property object at 0x000001840C4FF810>
    def refreshImage(self, *args: Any, **kwargs: Any) -> Any: ...
    rotate: property = <property object at 0x000001840C4FFAE0>
    separateDepth: property = <property object at 0x000001840C4FFC70>
    def setImageDirty(self, *args: Any, **kwargs: Any) -> Any: ...
    shadingSamples: property = <property object at 0x000001840C4FF4F0>
    shadingSamplesOverride: property = <property object at 0x000001840C4FF4A0>
    size: property = <property object at 0x000001840C4FF680>
    sizeX: property = <property object at 0x000001840C4FF6D0>
    sizeY: property = <property object at 0x000001840C4FF720>
    sourceTexture: property = <property object at 0x000001840C4FF090>
    squeezeCorrection: property = <property object at 0x000001840C4FF630>
    thisown: property = <property object at 0x000001840C4FBAE0>
    def type(self, *args: Any, **kwargs: Any) -> Any: ...
    useDepthMap: property = <property object at 0x000001840C4FFB80>
    useFrameExtension: property = <property object at 0x000001840C4FBD60>
    visibleInReflections: property = <property object at 0x000001840C4FFA40>
    visibleInRefractions: property = <property object at 0x000001840C4FFA90>
    width: property = <property object at 0x000001840C4FF9A0>

def MPxImagePlane_className(*args: Any, **kwargs: Any) -> Any: ...
class MPxLocatorNode(MPxNode):
    """
    """
    def __disown__(self) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def boundingBox(self, *args: Any, **kwargs: Any) -> Any: ...
    boundingBoxCenterX: property = <property object at 0x000001840C5311D0>
    boundingBoxCenterY: property = <property object at 0x000001840C531220>
    boundingBoxCenterZ: property = <property object at 0x000001840C531270>
    center: property = <property object at 0x000001840C531180>
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def closestPoint(self, *args: Any, **kwargs: Any) -> Any: ...
    def color(self, *args: Any, **kwargs: Any) -> Any: ...
    def colorRGB(self, *args: Any, **kwargs: Any) -> Any: ...
    def draw(self, *args: Any, **kwargs: Any) -> Any: ...
    def drawLast(self, *args: Any, **kwargs: Any) -> Any: ...
    def excludeAsLocator(self, *args: Any, **kwargs: Any) -> Any: ...
    def getCacheSetup(self, *args: Any, **kwargs: Any) -> Any: ...
    def getShapeSelectionMask(self, *args: Any, **kwargs: Any) -> Any: ...
    instObjGroups: property = <property object at 0x000001840C531540>
    intermediateObject: property = <property object at 0x000001840C5314A0>
    inverseMatrix: property = <property object at 0x000001840C531310>
    def isBounded(self, *args: Any, **kwargs: Any) -> Any: ...
    isTemplated: property = <property object at 0x000001840C5314F0>
    def isTransparent(self, *args: Any, **kwargs: Any) -> Any: ...
    localPosition: property = <property object at 0x000001840C5309A0>
    localPositionX: property = <property object at 0x000001840C5309F0>
    localPositionY: property = <property object at 0x000001840C530A40>
    localPositionZ: property = <property object at 0x000001840C530A90>
    localScale: property = <property object at 0x000001840C530C20>
    localScaleX: property = <property object at 0x000001840C530C70>
    localScaleY: property = <property object at 0x000001840C530CC0>
    localScaleZ: property = <property object at 0x000001840C530D10>
    matrix: property = <property object at 0x000001840C5312C0>
    nodeBoundingBox: property = <property object at 0x000001840C530D60>
    nodeBoundingBoxMax: property = <property object at 0x000001840C530EA0>
    nodeBoundingBoxMaxX: property = <property object at 0x000001840C530EF0>
    nodeBoundingBoxMaxY: property = <property object at 0x000001840C530F40>
    nodeBoundingBoxMaxZ: property = <property object at 0x000001840C530F90>
    nodeBoundingBoxMin: property = <property object at 0x000001840C530DB0>
    nodeBoundingBoxMinX: property = <property object at 0x000001840C49BF40>
    nodeBoundingBoxMinY: property = <property object at 0x000001840C530E00>
    nodeBoundingBoxMinZ: property = <property object at 0x000001840C530E50>
    nodeBoundingBoxSize: property = <property object at 0x000001840C531040>
    nodeBoundingBoxSizeX: property = <property object at 0x000001840C531090>
    nodeBoundingBoxSizeY: property = <property object at 0x000001840C5310E0>
    nodeBoundingBoxSizeZ: property = <property object at 0x000001840C531130>
    objectColor: property = <property object at 0x000001840C531720>
    objectGroupColor: property = <property object at 0x000001840C531680>
    objectGroupId: property = <property object at 0x000001840C531630>
    objectGroups: property = <property object at 0x000001840C531590>
    objectGrpCompList: property = <property object at 0x000001840C5315E0>
    parentInverseMatrix: property = <property object at 0x000001840C4F9860>
    parentMatrix: property = <property object at 0x000001840C531400>
    thisown: property = <property object at 0x000001840C5304F0>
    def type(self, *args: Any, **kwargs: Any) -> Any: ...
    underWorldObject: property = <property object at 0x000001840C530950>
    def useClosestPointForSelection(self, *args: Any, **kwargs: Any) -> Any: ...
    useObjectColor: property = <property object at 0x000001840C5316D0>
    visibility: property = <property object at 0x000001840C531450>
    worldInverseMatrix: property = <property object at 0x000001840C5313B0>
    worldMatrix: property = <property object at 0x000001840C531360>
    worldPosition: property = <property object at 0x000001840C530AE0>
    worldPositionX: property = <property object at 0x000001840C530B30>
    worldPositionY: property = <property object at 0x000001840C530B80>
    worldPositionZ: property = <property object at 0x000001840C530BD0>

def MPxLocatorNode_className(*args: Any, **kwargs: Any) -> Any: ...
class MPxManipContainer(MPxNode):
    """
    """
    def __disown__(self) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addCircleSweepManip(self, *args: Any, **kwargs: Any) -> Any: ...
    def addCurveSegmentManip(self, *args: Any, **kwargs: Any) -> Any: ...
    def addDirectionManip(self, *args: Any, **kwargs: Any) -> Any: ...
    def addDiscManip(self, *args: Any, **kwargs: Any) -> Any: ...
    def addDistanceManip(self, *args: Any, **kwargs: Any) -> Any: ...
    def addFreePointTriadManip(self, *args: Any, **kwargs: Any) -> Any: ...
    def addMPxManipulatorNode(self, *args: Any, **kwargs: Any) -> Any: ...
    def addManipToPlugConversion(self, *args: Any, **kwargs: Any) -> Any: ...
    def addPlugToInViewEditor(self, *args: Any, **kwargs: Any) -> Any: ...
    def addPlugToManipConversion(self, *args: Any, **kwargs: Any) -> Any: ...
    def addPointOnCurveManip(self, *args: Any, **kwargs: Any) -> Any: ...
    def addPointOnSurfaceManip(self, *args: Any, **kwargs: Any) -> Any: ...
    def addRotateManip(self, *args: Any, **kwargs: Any) -> Any: ...
    def addScaleManip(self, *args: Any, **kwargs: Any) -> Any: ...
    def addStateManip(self, *args: Any, **kwargs: Any) -> Any: ...
    def addToManipConnectTable(self, *args: Any, **kwargs: Any) -> Any: ...
    def addToggleManip(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def connectToDependNode(self, *args: Any, **kwargs: Any) -> Any: ...
    def createChildren(self, *args: Any, **kwargs: Any) -> Any: ...
    def doDrag(self, *args: Any, **kwargs: Any) -> Any: ...
    def doPress(self, *args: Any, **kwargs: Any) -> Any: ...
    def doRelease(self, *args: Any, **kwargs: Any) -> Any: ...
    def draw(self, *args: Any, **kwargs: Any) -> Any: ...
    def finishAddingManips(self, *args: Any, **kwargs: Any) -> Any: ...
    def getConverterManipValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def getConverterPlugValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def initialize(self, *args: Any, **kwargs: Any) -> Any: ...
    def isManipActive(self, *args: Any, **kwargs: Any) -> Any: ...
    def manipToPlugConversion(self, *args: Any, **kwargs: Any) -> Any: ...
    def newManipulator(self, *args: Any, **kwargs: Any) -> Any: ...
    def plugToManipConversion(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeFromManipConnectTable(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x000001840C531860>
    def type(self, *args: Any, **kwargs: Any) -> Any: ...

def MPxManipContainer_addToManipConnectTable(*args: Any, **kwargs: Any) -> Any: ...
def MPxManipContainer_className(*args: Any, **kwargs: Any) -> Any: ...
def MPxManipContainer_initialize(*args: Any, **kwargs: Any) -> Any: ...
def MPxManipContainer_newManipulator(*args: Any, **kwargs: Any) -> Any: ...
def MPxManipContainer_removeFromManipConnectTable(*args: Any, **kwargs: Any) -> Any: ...
class MPxManipulatorNode(MPxNode):
    """
    """
    def __disown__(self) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addDependentPlug(self, *args: Any, **kwargs: Any) -> Any: ...
    def addDoubleValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def addPointValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def addVectorValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def colorAndName(self, *args: Any, **kwargs: Any) -> Any: ...
    def connectPlugToValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def connectToDependNode(self, *args: Any, **kwargs: Any) -> Any: ...
    connectedNodes: property = <property object at 0x000001840C53CB80>
    def dependentPlugsReset(self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterForMouseMove(self, *args: Any, **kwargs: Any) -> Any: ...
    def dimmedColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def doDrag(self, *args: Any, **kwargs: Any) -> Any: ...
    def doMove(self, *args: Any, **kwargs: Any) -> Any: ...
    def doPress(self, *args: Any, **kwargs: Any) -> Any: ...
    def doRelease(self, *args: Any, **kwargs: Any) -> Any: ...
    def draw(self, *args: Any, **kwargs: Any) -> Any: ...
    def finishAddingManips(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDoubleValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def getInstancePtr(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPointValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def getVectorValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def glActiveName(self, *args: Any, **kwargs: Any) -> Any: ...
    def glFirstHandle(self, *args: Any, **kwargs: Any) -> Any: ...
    def labelBackgroundColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def labelColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def lineColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def mainColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def mouseDown(self, *args: Any, **kwargs: Any) -> Any: ...
    def mousePosition(self, *args: Any, **kwargs: Any) -> Any: ...
    def mouseRay(self, *args: Any, **kwargs: Any) -> Any: ...
    def mouseRayWorld(self, *args: Any, **kwargs: Any) -> Any: ...
    def mouseUp(self, *args: Any, **kwargs: Any) -> Any: ...
    def newManipulator(self, *args: Any, **kwargs: Any) -> Any: ...
    def prevColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def registerForMouseMove(self, *args: Any, **kwargs: Any) -> Any: ...
    def selectedColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoubleValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def setHandleColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def setInstancePtr(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPointValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def setVectorValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def shouldDrawHandleAsSelected(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x000001840C53BDB0>
    def xColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def yColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def zColor(self, *args: Any, **kwargs: Any) -> Any: ...

def MPxManipulatorNode_className(*args: Any, **kwargs: Any) -> Any: ...
def MPxManipulatorNode_newManipulator(*args: Any, **kwargs: Any) -> Any: ...
class MPxMaterialInformation(object):
    """
    """
    def __disown__(self) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def computeMaterial(self, *args: Any, **kwargs: Any) -> Any: ...
    def connectAsTexture(self, *args: Any, **kwargs: Any) -> Any: ...
    kOverrideDraw: int = 2
    kSimpleMaterial: int = 0
    kTexture: int = 1
    def materialInfoIsDirty(self, *args: Any, **kwargs: Any) -> Any: ...
    def textureDisconnected(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x000001840C51C630>
    def useMaterialAsTexture(self, *args: Any, **kwargs: Any) -> Any: ...

class MPxMayaAsciiFilter(MPxFileTranslator):
    """
    """
    def __disown__(self) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def haveReadMethod(self, *args: Any, **kwargs: Any) -> Any: ...
    def haveWriteMethod(self, *args: Any, **kwargs: Any) -> Any: ...
    def processReadOptions(self, *args: Any, **kwargs: Any) -> Any: ...
    def processWriteOptions(self, *args: Any, **kwargs: Any) -> Any: ...
    def reader(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x000001840C4FFF90>
    def writePostConnectAttrsBlock(self, *args: Any, **kwargs: Any) -> Any: ...
    def writePostCreateNodesBlock(self, *args: Any, **kwargs: Any) -> Any: ...
    def writePostHeader(self, *args: Any, **kwargs: Any) -> Any: ...
    def writePostRequires(self, *args: Any, **kwargs: Any) -> Any: ...
    def writePreConnectAttrsBlock(self, *args: Any, **kwargs: Any) -> Any: ...
    def writePreCreateNodesBlock(self, *args: Any, **kwargs: Any) -> Any: ...
    def writePreTrailer(self, *args: Any, **kwargs: Any) -> Any: ...
    def writer(self, *args: Any, **kwargs: Any) -> Any: ...
    def writesConnectAttr(self, *args: Any, **kwargs: Any) -> Any: ...
    def writesCreateNode(self, *args: Any, **kwargs: Any) -> Any: ...
    def writesDisconnectAttr(self, *args: Any, **kwargs: Any) -> Any: ...
    def writesFileReference(self, *args: Any, **kwargs: Any) -> Any: ...
    def writesMetadata(self, *args: Any, **kwargs: Any) -> Any: ...
    def writesParentNode(self, *args: Any, **kwargs: Any) -> Any: ...
    def writesRequirements(self, *args: Any, **kwargs: Any) -> Any: ...
    def writesSelectNode(self, *args: Any, **kwargs: Any) -> Any: ...
    def writesSetAttr(self, *args: Any, **kwargs: Any) -> Any: ...

class MPxMayaAsciiFilterOutput(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __lshift__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x000001840C4FFE50>

class MPxMidiInputDevice(object):
    """
    """
    def __disown__(self) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def closeDevice(self, *args: Any, **kwargs: Any) -> Any: ...
    def deviceState(self, *args: Any, **kwargs: Any) -> Any: ...
    def doButtonEvents(self, *args: Any, **kwargs: Any) -> Any: ...
    def doMovementEvents(self, *args: Any, **kwargs: Any) -> Any: ...
    def getMessage(self, *args: Any, **kwargs: Any) -> Any: ...
    def nameAxes(self, *args: Any, **kwargs: Any) -> Any: ...
    def nameButtons(self, *args: Any, **kwargs: Any) -> Any: ...
    def openDevice(self, *args: Any, **kwargs: Any) -> Any: ...
    def sendMessage(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x000001840C533450>

def MPxMidiInputDevice_className(*args: Any, **kwargs: Any) -> Any: ...
class MPxModelEditorCommand(object):
    """
    """
    def __disown__(self) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def _parser(self, *args: Any, **kwargs: Any) -> Any: ...
    def _syntax(self, *args: Any, **kwargs: Any) -> Any: ...
    def appendSyntax(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def doEditFlags(self, *args: Any, **kwargs: Any) -> Any: ...
    def doQueryFlags(self, *args: Any, **kwargs: Any) -> Any: ...
    def editorCommandName(self, *args: Any, **kwargs: Any) -> Any: ...
    def editorMenuScriptName(self, *args: Any, **kwargs: Any) -> Any: ...
    def makeModelView(self, *args: Any, **kwargs: Any) -> Any: ...
    def modelView(self, *args: Any, **kwargs: Any) -> Any: ...
    def setResult(self, *args: Any, **kwargs: Any) -> Any: ...
    def skipFlagForCreate(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x000001840C533860>

def MPxModelEditorCommand_className(*args: Any, **kwargs: Any) -> Any: ...
class MPxMotionPathNode(MPxNode):
    """
    """
    def __disown__(self) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    allCoordinates: property = <property object at 0x000001840C525DB0>
    bank: property = <property object at 0x000001840C525C20>
    bankScale: property = <property object at 0x000001840C525C70>
    bankThreshold: property = <property object at 0x000001840C525CC0>
    def banking(self, *args: Any, **kwargs: Any) -> Any: ...
    def evaluatePath(self, *args: Any, **kwargs: Any) -> Any: ...
    flowNode: property = <property object at 0x000001840C525770>
    follow: property = <property object at 0x000001840C5258B0>
    fractionMode: property = <property object at 0x000001840C525D10>
    def fractionalToParametric(self, *args: Any, **kwargs: Any) -> Any: ...
    frontAxis: property = <property object at 0x000001840C5259F0>
    frontTwist: property = <property object at 0x000001840C525680>
    def getVectors(self, *args: Any, **kwargs: Any) -> Any: ...
    inverseFront: property = <property object at 0x000001840C5259A0>
    inverseUp: property = <property object at 0x000001840C525950>
    def matrix(self, *args: Any, **kwargs: Any) -> Any: ...
    normal: property = <property object at 0x000001840C525900>
    orientMatrix: property = <property object at 0x000001840C525EF0>
    orientationMarkerTime: property = <property object at 0x000001840C525860>
    def parametricToFractional(self, *args: Any, **kwargs: Any) -> Any: ...
    pathGeometry: property = <property object at 0x000001840C5257C0>
    def position(self, *args: Any, **kwargs: Any) -> Any: ...
    positionMarkerTime: property = <property object at 0x000001840C525810>
    rotate: property = <property object at 0x000001840C525F40>
    rotateOrder: property = <property object at 0x000001840C5260E0>
    rotateX: property = <property object at 0x000001840C525F90>
    rotateY: property = <property object at 0x000001840C526040>
    rotateZ: property = <property object at 0x000001840C526090>
    sideTwist: property = <property object at 0x000001840C525720>
    thisown: property = <property object at 0x000001840C525590>
    def type(self, *args: Any, **kwargs: Any) -> Any: ...
    uValue: property = <property object at 0x000001840C525630>
    upAxis: property = <property object at 0x000001840C525A40>
    upTwist: property = <property object at 0x000001840C5256D0>
    updateOrientationMarkers: property = <property object at 0x000001840C525D60>
    worldUpMatrix: property = <property object at 0x000001840C5208B0>
    worldUpType: property = <property object at 0x000001840C525A90>
    worldUpVector: property = <property object at 0x000001840C525AE0>
    worldUpVectorX: property = <property object at 0x000001840C525B30>
    worldUpVectorY: property = <property object at 0x000001840C525B80>
    worldUpVectorZ: property = <property object at 0x000001840C525BD0>
    def wraparoundFractionalValue(self, *args: Any, **kwargs: Any) -> Any: ...
    xCoordinate: property = <property object at 0x000001840C525E00>
    yCoordinate: property = <property object at 0x000001840C525E50>
    zCoordinate: property = <property object at 0x000001840C525EA0>

class MPxMultiPolyTweakUVCommand(MPxCommand):
    """
    """
    def __disown__(self) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def getTweakedUVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def newSyntax(self, *args: Any, **kwargs: Any) -> Any: ...
    def parseSyntax(self, *args: Any, **kwargs: Any) -> Any: ...
    def preProcessUVs(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x000001840C51C180>

def MPxMultiPolyTweakUVCommand_newSyntax(*args: Any, **kwargs: Any) -> Any: ...
class MPxNode(object):
    """
    """
    def __disown__(self) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def _doNotWrite(self, *args: Any, **kwargs: Any) -> Any: ...
    def _forceCache(self, *args: Any, **kwargs: Any) -> Any: ...
    def _setDoNotWrite(self, *args: Any, **kwargs: Any) -> Any: ...
    def _setMPSafe(self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeAffects(self, *args: Any, **kwargs: Any) -> Any: ...
    caching: property = <property object at 0x000001840C4E5770>
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def compute(self, *args: Any, **kwargs: Any) -> Any: ...
    def configCache(self, *args: Any, **kwargs: Any) -> Any: ...
    def connectionBroken(self, *args: Any, **kwargs: Any) -> Any: ...
    def connectionMade(self, *args: Any, **kwargs: Any) -> Any: ...
    def copyInternalData(self, *args: Any, **kwargs: Any) -> Any: ...
    def dependsOn(self, *args: Any, **kwargs: Any) -> Any: ...
    def existWithoutInConnections(self, *args: Any, **kwargs: Any) -> Any: ...
    def existWithoutOutConnections(self, *args: Any, **kwargs: Any) -> Any: ...
    frozen: property = <property object at 0x000001840C4E5810>
    def getCacheSetup(self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self, *args: Any, **kwargs: Any) -> Any: ...
    def getFilesToArchive(self, *args: Any, **kwargs: Any) -> Any: ...
    def getInternalValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def getInternalValueInContext(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasInvalidationRangeTransformation(self, *args: Any, **kwargs: Any) -> Any: ...
    def inheritAttributesFrom(self, *args: Any, **kwargs: Any) -> Any: ...
    def internalArrayCount(self, *args: Any, **kwargs: Any) -> Any: ...
    def isAbstractClass(self, *args: Any, **kwargs: Any) -> Any: ...
    isHistoricallyInteresting: property = <property object at 0x000001840C4E5720>
    def isPassiveOutput(self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingTopology(self, *args: Any, **kwargs: Any) -> Any: ...
    kAssembly: int = 22
    kBlendShape: int = 25
    kCameraSetNode: int = 16
    kClientDeviceNode: int = 20
    kConstraintNode: int = 17
    kDefaultScheduling: int = 1
    kDeformerNode: int = 2
    kDependNode: int = 0
    kEmitterNode: int = 6
    kEvaluatedDirectly: int = 1
    kEvaluatedIndirectly: int = 0
    kFieldNode: int = 5
    kFluidEmitterNode: int = 13
    kGeometryFilter: int = 24
    kGloballySerial: int = 2
    kGloballySerialize: int = 2
    kHardwareShader: int = 9
    kHwShaderNode: int = 10
    kIkSolverNode: int = 8
    kImagePlaneNode: int = 14
    kLast: int = 26
    kLeaveDirty: int = 2
    kLocatorNode: int = 1
    kManipContainer: int = 3
    kManipulatorNode: int = 18
    kMotionPathNode: int = 19
    kObjectSet: int = 12
    kParallel: int = 0
    kParticleAttributeMapperNode: int = 15
    kPostEvaluationTypeLast: int = 3
    kSchedulingTypeLast: int = 4
    kSerial: int = 1
    kSerialize: int = 1
    kSkinCluster: int = 23
    kSpringNode: int = 7
    kSurfaceShape: int = 4
    kThreadedDeviceNode: int = 21
    kTransformNode: int = 11
    kUntrusted: int = 3
    def legalConnection(self, *args: Any, **kwargs: Any) -> Any: ...
    def legalDisconnection(self, *args: Any, **kwargs: Any) -> Any: ...
    message: property = <property object at 0x000001840C4E56D0>
    def name(self, *args: Any, **kwargs: Any) -> Any: ...
    def passThroughToMany(self, *args: Any, **kwargs: Any) -> Any: ...
    def passThroughToOne(self, *args: Any, **kwargs: Any) -> Any: ...
    def postConstructor(self, *args: Any, **kwargs: Any) -> Any: ...
    def postEvaluation(self, *args: Any, **kwargs: Any) -> Any: ...
    def preEvaluation(self, *args: Any, **kwargs: Any) -> Any: ...
    def schedulingType(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDependentsDirty(self, *args: Any, **kwargs: Any) -> Any: ...
    def setExistWithoutInConnections(self, *args: Any, **kwargs: Any) -> Any: ...
    def setExistWithoutOutConnections(self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternalValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternalValueInContext(self, *args: Any, **kwargs: Any) -> Any: ...
    def shouldSave(self, *args: Any, **kwargs: Any) -> Any: ...
    state: property = <property object at 0x000001840C4E57C0>
    def thisMObject(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x000001840C4DDC20>
    def transformInvalidationRange(self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self, *args: Any, **kwargs: Any) -> Any: ...

def MPxNode_addAttribute(*args: Any, **kwargs: Any) -> Any: ...
def MPxNode_attributeAffects(*args: Any, **kwargs: Any) -> Any: ...
def MPxNode_className(*args: Any, **kwargs: Any) -> Any: ...
def MPxNode_inheritAttributesFrom(*args: Any, **kwargs: Any) -> Any: ...
class MPxObjectSet(MPxNode):
    """
    """
    DNSetMembers: property = <property object at 0x000001840C510900>
    def __disown__(self) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    annotation: property = <property object at 0x000001840C5109A0>
    def canBeDeleted(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    dagSetMembers: property = <property object at 0x000001840C5108B0>
    edgesOnlySet: property = <property object at 0x000001840C510A90>
    editPointsOnlySet: property = <property object at 0x000001840C510B30>
    facetsOnlySet: property = <property object at 0x000001840C510AE0>
    groupNodes: property = <property object at 0x000001840C510C20>
    isLayer: property = <property object at 0x000001840C5109F0>
    memberWireframeColor: property = <property object at 0x000001840C510950>
    partition: property = <property object at 0x000001840C510BD0>
    renderableOnlySet: property = <property object at 0x000001840C510B80>
    thisown: property = <property object at 0x000001840C5107C0>
    def type(self, *args: Any, **kwargs: Any) -> Any: ...
    usedByNodes: property = <property object at 0x000001840C510C70>
    verticesOnlySet: property = <property object at 0x000001840C510A40>

def MPxObjectSet_className(*args: Any, **kwargs: Any) -> Any: ...
class MPxParticleAttributeMapperNode(MPxNode):
    """
    """
    def __disown__(self) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def compute(self, *args: Any, **kwargs: Any) -> Any: ...
    computeNode: property = <property object at 0x000001840C542450>
    computeNodeColor: property = <property object at 0x000001840C5425E0>
    computeNodeColorB: property = <property object at 0x000001840C5426D0>
    computeNodeColorG: property = <property object at 0x000001840C542680>
    computeNodeColorR: property = <property object at 0x000001840C542630>
    outColorPP: property = <property object at 0x000001840C542770>
    outMaxValue: property = <property object at 0x000001840C542590>
    outMinValue: property = <property object at 0x000001840C542540>
    outValuePP: property = <property object at 0x000001840C5427C0>
    thisown: property = <property object at 0x000001840C542360>
    time: property = <property object at 0x000001840C542720>
    def type(self, *args: Any, **kwargs: Any) -> Any: ...
    uCoordPP: property = <property object at 0x000001840C5424A0>
    vCoordPP: property = <property object at 0x000001840C5424F0>

def MPxParticleAttributeMapperNode_className(*args: Any, **kwargs: Any) -> Any: ...
class MPxPolyTrg(MPxNode):
    """
    """
    def __disown__(self) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def compute(self, *args: Any, **kwargs: Any) -> Any: ...
    def isAbstractClass(self, *args: Any, **kwargs: Any) -> Any: ...
    def postConstructor(self, *args: Any, **kwargs: Any) -> Any: ...
    def registerTrgFunction(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x000001840C514040>
    def unregisterTrgFunction(self, *args: Any, **kwargs: Any) -> Any: ...

class MPxPolyTweakUVCommand(MPxCommand):
    """
    """
    def __disown__(self) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def getTweakedUVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def newSyntax(self, *args: Any, **kwargs: Any) -> Any: ...
    def parseSyntax(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x000001840C51AF40>

def MPxPolyTweakUVCommand_newSyntax(*args: Any, **kwargs: Any) -> Any: ...
class MPxPolyTweakUVInteractiveCommand(MPxToolCommand):
    """
    """
    def __disown__(self) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def cancel(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def doIt(self, *args: Any, **kwargs: Any) -> Any: ...
    def finalize(self, *args: Any, **kwargs: Any) -> Any: ...
    def isUndoable(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUVs(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x000001840C538040>

def MPxPolyTweakUVInteractiveCommand_className(*args: Any, **kwargs: Any) -> Any: ...
class MPxRenderPassImpl(object):
    """
    """
    def __disown__(self) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def frameBufferSemantic(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDefaultType(self, *args: Any, **kwargs: Any) -> Any: ...
    def getNumChannels(self, *args: Any, **kwargs: Any) -> Any: ...
    def isCompatible(self, *args: Any, **kwargs: Any) -> Any: ...
    kBit: int = 2048
    kColorSemantic: int = 1
    kDepthSemantic: int = 4
    kDirectionVectorSemantic: int = 3
    kFloat16: int = 256
    kFloat32: int = 512
    kFloat64: int = 1024
    kInt16: int = 32
    kInt32: int = 64
    kInt64: int = 128
    kInt8: int = 16
    kInvalidSemantic: int = 0
    kLabelSemantic: int = 5
    kMaskSemantic: int = 6
    kOther: int = 4096
    kOtherSemantic: int = 7
    kUInt16: int = 2
    kUInt32: int = 4
    kUInt64: int = 8
    kUInt8: int = 1
    kVectorSemantic: int = 2
    def perLightPassContributionSupported(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x000001840C542900>
    def typesSupported(self, *args: Any, **kwargs: Any) -> Any: ...

class MPxRepresentation(object):
    """
    """
    def __disown__(self) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def _getAssembly(self, *args: Any, **kwargs: Any) -> Any: ...
    def activate(self, *args: Any, **kwargs: Any) -> Any: ...
    def canApplyEdits(self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self, *args: Any, **kwargs: Any) -> Any: ...
    def getName(self, *args: Any, **kwargs: Any) -> Any: ...
    def getType(self, *args: Any, **kwargs: Any) -> Any: ...
    def inactivate(self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x000001840C512C70>

class MPxSelectionContext(MPxContext):
    """
    """
    def __disown__(self) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def _isSelecting(self, *args: Any, **kwargs: Any) -> Any: ...
    def _lastDragPoint(self, *args: Any, **kwargs: Any) -> Any: ...
    def _newToolCommand(self, *args: Any, **kwargs: Any) -> Any: ...
    def _startPoint(self, *args: Any, **kwargs: Any) -> Any: ...
    def abortAction(self, *args: Any, **kwargs: Any) -> Any: ...
    def addManipulator(self, *args: Any, **kwargs: Any) -> Any: ...
    def argTypeNumericalInput(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteManipulators(self, *args: Any, **kwargs: Any) -> Any: ...
    def doDrag(self, *args: Any, **kwargs: Any) -> Any: ...
    def doHold(self, *args: Any, **kwargs: Any) -> Any: ...
    def doPress(self, *args: Any, **kwargs: Any) -> Any: ...
    def doRelease(self, *args: Any, **kwargs: Any) -> Any: ...
    def feedbackNumericalInput(self, *args: Any, **kwargs: Any) -> Any: ...
    def helpStateHasChanged(self, *args: Any, **kwargs: Any) -> Any: ...
    def image(self, *args: Any, **kwargs: Any) -> Any: ...
    def newToolCommand(self, *args: Any, **kwargs: Any) -> Any: ...
    def processNumericalInput(self, *args: Any, **kwargs: Any) -> Any: ...
    def setAllowDoubleClickAction(self, *args: Any, **kwargs: Any) -> Any: ...
    def setAllowPaintSelect(self, *args: Any, **kwargs: Any) -> Any: ...
    def setAllowPreSelectHilight(self, *args: Any, **kwargs: Any) -> Any: ...
    def setAllowSoftSelect(self, *args: Any, **kwargs: Any) -> Any: ...
    def setAllowSymmetry(self, *args: Any, **kwargs: Any) -> Any: ...
    def setImage(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x000001840C533D10>

def MPxSelectionContext_className(*args: Any, **kwargs: Any) -> Any: ...
class MPxSkinCluster(MPxGeometryFilter):
    """
    """
    def __disown__(self) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    bindPreMatrix: property = <property object at 0x000001840C5202C0>
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    matrix: property = <property object at 0x000001840C520270>
    thisown: property = <property object at 0x000001840C5200E0>
    def type(self, *args: Any, **kwargs: Any) -> Any: ...
    weightList: property = <property object at 0x000001840C5201D0>
    def weightValue(self, *args: Any, **kwargs: Any) -> Any: ...
    weights: property = <property object at 0x000001840C520220>

def MPxSkinCluster_className(*args: Any, **kwargs: Any) -> Any: ...
class MPxSpringNode(MPxNode):
    """
    """
    def __disown__(self) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def applySpringLaw(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    mDeltaTime: property = <property object at 0x000001840C542270>
    mEnd1Weight: property = <property object at 0x000001840C5421D0>
    mEnd2Weight: property = <property object at 0x000001840C542220>
    thisown: property = <property object at 0x000001840C5420E0>
    def type(self, *args: Any, **kwargs: Any) -> Any: ...

def MPxSpringNode_className(*args: Any, **kwargs: Any) -> Any: ...
class MPxSurfaceShape(MPxNode):
    """
    """
    def __disown__(self) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def acceptsGeometryIterator(self, *args: Any, **kwargs: Any) -> Any: ...
    def activeComponents(self, *args: Any, **kwargs: Any) -> Any: ...
    def boundingBox(self, *args: Any, **kwargs: Any) -> Any: ...
    boundingBoxCenterX: property = <property object at 0x000001840C4C3B80>
    boundingBoxCenterY: property = <property object at 0x000001840C4C3BD0>
    boundingBoxCenterZ: property = <property object at 0x000001840C4C3C20>
    def cachedShapeAttr(self, *args: Any, **kwargs: Any) -> Any: ...
    def canMakeLive(self, *args: Any, **kwargs: Any) -> Any: ...
    center: property = <property object at 0x000001840C4C3B30>
    def childChanged(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def closestPoint(self, *args: Any, **kwargs: Any) -> Any: ...
    def componentToPlugs(self, *args: Any, **kwargs: Any) -> Any: ...
    def convertToTweakNodePlug(self, *args: Any, **kwargs: Any) -> Any: ...
    def createFullRenderGroup(self, *args: Any, **kwargs: Any) -> Any: ...
    def createFullVertexGroup(self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteComponents(self, *args: Any, **kwargs: Any) -> Any: ...
    def evalNodeAffectsDrawDb(self, *args: Any, **kwargs: Any) -> Any: ...
    def excludeAsPluginShape(self, *args: Any, **kwargs: Any) -> Any: ...
    def geometryData(self, *args: Any, **kwargs: Any) -> Any: ...
    def geometryIteratorSetup(self, *args: Any, **kwargs: Any) -> Any: ...
    def getComponentSelectionMask(self, *args: Any, **kwargs: Any) -> Any: ...
    def getShapeSelectionMask(self, *args: Any, **kwargs: Any) -> Any: ...
    def getWorldMatrix(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasActiveComponents(self, *args: Any, **kwargs: Any) -> Any: ...
    instObjGroups: property = <property object at 0x000001840C4C3EA0>
    intermediateObject: property = <property object at 0x000001840C4C3E00>
    inverseMatrix: property = <property object at 0x000001840C443C70>
    def isBounded(self, *args: Any, **kwargs: Any) -> Any: ...
    def isRenderable(self, *args: Any, **kwargs: Any) -> Any: ...
    isTemplated: property = <property object at 0x000001840C4C3E50>
    def localShapeInAttr(self, *args: Any, **kwargs: Any) -> Any: ...
    def localShapeOutAttr(self, *args: Any, **kwargs: Any) -> Any: ...
    mControlPoints: property = <property object at 0x000001840C4C3630>
    mControlValueX: property = <property object at 0x000001840C4C3680>
    mControlValueY: property = <property object at 0x000001840C4F5220>
    mControlValueZ: property = <property object at 0x000001840C4C36D0>
    mHasHistoryOnCreate: property = <property object at 0x000001840C4C35E0>
    def match(self, *args: Any, **kwargs: Any) -> Any: ...
    def matchComponent(self, *args: Any, **kwargs: Any) -> Any: ...
    matrix: property = <property object at 0x000001840C4C3C70>
    def newControlPointComponent(self, *args: Any, **kwargs: Any) -> Any: ...
    nodeBoundingBox: property = <property object at 0x000001840C4C3720>
    nodeBoundingBoxMax: property = <property object at 0x000001840C4C38B0>
    nodeBoundingBoxMaxX: property = <property object at 0x000001840C4C3900>
    nodeBoundingBoxMaxY: property = <property object at 0x000001840C4C3950>
    nodeBoundingBoxMaxZ: property = <property object at 0x000001840C4C39A0>
    nodeBoundingBoxMin: property = <property object at 0x000001840C4C3770>
    nodeBoundingBoxMinX: property = <property object at 0x000001840C4C37C0>
    nodeBoundingBoxMinY: property = <property object at 0x000001840C4C3810>
    nodeBoundingBoxMinZ: property = <property object at 0x000001840C4C3860>
    nodeBoundingBoxSize: property = <property object at 0x000001840C4C39F0>
    nodeBoundingBoxSizeX: property = <property object at 0x000001840C4C3A40>
    nodeBoundingBoxSizeY: property = <property object at 0x000001840C4C3A90>
    nodeBoundingBoxSizeZ: property = <property object at 0x000001840C4C3AE0>
    objectColor: property = <property object at 0x000001840C4C40E0>
    objectGroupColor: property = <property object at 0x000001840C4C4040>
    objectGroupId: property = <property object at 0x000001840C4C3F90>
    objectGroups: property = <property object at 0x000001840C4C3EF0>
    objectGrpCompList: property = <property object at 0x000001840C4C3F40>
    parentInverseMatrix: property = <property object at 0x000001840C4C3D60>
    parentMatrix: property = <property object at 0x000001840C4C3D10>
    def pointAtParm(self, *args: Any, **kwargs: Any) -> Any: ...
    def renderGroupComponentType(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRenderable(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x000001840C4F39F0>
    def transformUsing(self, *args: Any, **kwargs: Any) -> Any: ...
    def tweakUsing(self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self, *args: Any, **kwargs: Any) -> Any: ...
    def undeleteComponents(self, *args: Any, **kwargs: Any) -> Any: ...
    useObjectColor: property = <property object at 0x000001840C4C4090>
    def vertexOffsetDirection(self, *args: Any, **kwargs: Any) -> Any: ...
    visibility: property = <property object at 0x000001840C4C3DB0>
    def weightedTransformUsing(self, *args: Any, **kwargs: Any) -> Any: ...
    def weightedTweakUsing(self, *args: Any, **kwargs: Any) -> Any: ...
    worldInverseMatrix: property = <property object at 0x000001840C4C3CC0>
    worldMatrix: property = <property object at 0x000001840C4F3590>
    def worldShapeOutAttr(self, *args: Any, **kwargs: Any) -> Any: ...

class MPxSurfaceShapeUI(object):
    """
    """
    def __disown__(self) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def canDrawUV(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def draw(self, *args: Any, **kwargs: Any) -> Any: ...
    def drawUV(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDrawData(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDrawRequests(self, *args: Any, **kwargs: Any) -> Any: ...
    kSelectMeshEdges: int = 3
    kSelectMeshFaces: int = 2
    kSelectMeshUVs: int = 0
    kSelectMeshVerts: int = 1
    def material(self, *args: Any, **kwargs: Any) -> Any: ...
    def materials(self, *args: Any, **kwargs: Any) -> Any: ...
    def select(self, *args: Any, **kwargs: Any) -> Any: ...
    def selectUV(self, *args: Any, **kwargs: Any) -> Any: ...
    def snap(self, *args: Any, **kwargs: Any) -> Any: ...
    def surfaceShape(self, *args: Any, **kwargs: Any) -> Any: ...
    def surfaceShapeUI(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x000001840C535590>

def MPxSurfaceShapeUI_className(*args: Any, **kwargs: Any) -> Any: ...
def MPxSurfaceShapeUI_surfaceShapeUI(*args: Any, **kwargs: Any) -> Any: ...
def MPxSurfaceShape_className(*args: Any, **kwargs: Any) -> Any: ...
class MPxTexContext(MPxContext):
    """
    """
    def __disown__(self) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def getMarqueeSelection(self, *args: Any, **kwargs: Any) -> Any: ...
    def newToolCommand(self, *args: Any, **kwargs: Any) -> Any: ...
    def portSize(self, *args: Any, **kwargs: Any) -> Any: ...
    def portToView(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x000001840C535A40>
    def viewRect(self, *args: Any, **kwargs: Any) -> Any: ...
    def viewToPort(self, *args: Any, **kwargs: Any) -> Any: ...

def MPxTexContext_className(*args: Any, **kwargs: Any) -> Any: ...
def MPxTexContext_getMarqueeSelection(*args: Any, **kwargs: Any) -> Any: ...
class MPxToolCommand(MPxCommand):
    """
    """
    def __disown__(self) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def _doFinalize(self, *args: Any, **kwargs: Any) -> Any: ...
    def cancel(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def doIt(self, *args: Any, **kwargs: Any) -> Any: ...
    def finalize(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x000001840C535D60>

def MPxToolCommand_className(*args: Any, **kwargs: Any) -> Any: ...
class MPxTransform(MPxNode):
    """
    """
    def __disown__(self) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def _dirtyMatrix(self, *args: Any, **kwargs: Any) -> Any: ...
    def _dirtyRotateOrientation(self, *args: Any, **kwargs: Any) -> Any: ...
    def _dirtyRotatePivot(self, *args: Any, **kwargs: Any) -> Any: ...
    def _dirtyRotatePivotTranslation(self, *args: Any, **kwargs: Any) -> Any: ...
    def _dirtyRotation(self, *args: Any, **kwargs: Any) -> Any: ...
    def _dirtyScale(self, *args: Any, **kwargs: Any) -> Any: ...
    def _dirtyScalePivot(self, *args: Any, **kwargs: Any) -> Any: ...
    def _dirtyScalePivotTranslation(self, *args: Any, **kwargs: Any) -> Any: ...
    def _dirtyShear(self, *args: Any, **kwargs: Any) -> Any: ...
    def _dirtyTranslation(self, *args: Any, **kwargs: Any) -> Any: ...
    def applyRotateOrientationLocks(self, *args: Any, **kwargs: Any) -> Any: ...
    def applyRotatePivotLocks(self, *args: Any, **kwargs: Any) -> Any: ...
    def applyRotatePivotLocksTranslate(self, *args: Any, **kwargs: Any) -> Any: ...
    def applyRotationLimits(self, *args: Any, **kwargs: Any) -> Any: ...
    def applyRotationLocks(self, *args: Any, **kwargs: Any) -> Any: ...
    def applyScaleLimits(self, *args: Any, **kwargs: Any) -> Any: ...
    def applyScaleLocks(self, *args: Any, **kwargs: Any) -> Any: ...
    def applyScaleLocksPivot(self, *args: Any, **kwargs: Any) -> Any: ...
    def applyScaleLocksPivotTranslate(self, *args: Any, **kwargs: Any) -> Any: ...
    def applyShearLocks(self, *args: Any, **kwargs: Any) -> Any: ...
    def applyTranslationLimits(self, *args: Any, **kwargs: Any) -> Any: ...
    def applyTranslationLocks(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    baseTransformationMatrix: property = <property object at 0x000001840C51A590>
    def boundingBox(self, *args: Any, **kwargs: Any) -> Any: ...
    boundingBoxCenterX: property = <property object at 0x000001840C5178B0>
    boundingBoxCenterY: property = <property object at 0x000001840C517900>
    boundingBoxCenterZ: property = <property object at 0x000001840C517950>
    center: property = <property object at 0x000001840C517860>
    def checkAndSetRotateOrientation(self, *args: Any, **kwargs: Any) -> Any: ...
    def checkAndSetRotatePivot(self, *args: Any, **kwargs: Any) -> Any: ...
    def checkAndSetRotatePivotTranslation(self, *args: Any, **kwargs: Any) -> Any: ...
    def checkAndSetRotation(self, *args: Any, **kwargs: Any) -> Any: ...
    def checkAndSetScale(self, *args: Any, **kwargs: Any) -> Any: ...
    def checkAndSetScalePivot(self, *args: Any, **kwargs: Any) -> Any: ...
    def checkAndSetScalePivotTranslation(self, *args: Any, **kwargs: Any) -> Any: ...
    def checkAndSetShear(self, *args: Any, **kwargs: Any) -> Any: ...
    def checkAndSetTranslation(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def clearLimits(self, *args: Any, **kwargs: Any) -> Any: ...
    def compute(self, *args: Any, **kwargs: Any) -> Any: ...
    def computeLocalTransformation(self, *args: Any, **kwargs: Any) -> Any: ...
    def copyInternalData(self, *args: Any, **kwargs: Any) -> Any: ...
    def createTransformationMatrix(self, *args: Any, **kwargs: Any) -> Any: ...
    displayHandle: property = <property object at 0x000001840C51A0E0>
    displayLocalAxis: property = <property object at 0x000001840C51A1D0>
    displayRotatePivot: property = <property object at 0x000001840C51A180>
    displayScalePivot: property = <property object at 0x000001840C51A130>
    drawOverride: property = <property object at 0x000001840C517EF0>
    dynamics: property = <property object at 0x000001840C51A220>
    def enableLimit(self, *args: Any, **kwargs: Any) -> Any: ...
    geometry: property = <property object at 0x000001840C519E50>
    def getEulerRotation(self, *args: Any, **kwargs: Any) -> Any: ...
    def getMatrix(self, *args: Any, **kwargs: Any) -> Any: ...
    def getMatrixInverse(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPreRotation(self, *args: Any, **kwargs: Any) -> Any: ...
    def getRotateOrientation(self, *args: Any, **kwargs: Any) -> Any: ...
    def getRotatePivot(self, *args: Any, **kwargs: Any) -> Any: ...
    def getRotatePivotTranslation(self, *args: Any, **kwargs: Any) -> Any: ...
    def getRotation(self, *args: Any, **kwargs: Any) -> Any: ...
    def getRotationOrder(self, *args: Any, **kwargs: Any) -> Any: ...
    def getScale(self, *args: Any, **kwargs: Any) -> Any: ...
    def getScalePivot(self, *args: Any, **kwargs: Any) -> Any: ...
    def getScalePivotTranslation(self, *args: Any, **kwargs: Any) -> Any: ...
    def getShear(self, *args: Any, **kwargs: Any) -> Any: ...
    def getTranslation(self, *args: Any, **kwargs: Any) -> Any: ...
    ghosting: property = <property object at 0x000001840C517C70>
    identification: property = <property object at 0x000001840C5182C0>
    inheritsTransform: property = <property object at 0x000001840C51A090>
    instObjGroups: property = <property object at 0x000001840C517CC0>
    intermediateObject: property = <property object at 0x000001840C517BD0>
    inverseMatrix: property = <property object at 0x000001840C5179F0>
    def isBounded(self, *args: Any, **kwargs: Any) -> Any: ...
    def isLimited(self, *args: Any, **kwargs: Any) -> Any: ...
    def isNonAffineMatricesEnabled(self, *args: Any, **kwargs: Any) -> Any: ...
    isTemplated: property = <property object at 0x000001840C517C20>
    layerOverrideColor: property = <property object at 0x000001840C518360>
    layerRenderable: property = <property object at 0x000001840C518310>
    def limitValue(self, *args: Any, **kwargs: Any) -> Any: ...
    lodVisibility: property = <property object at 0x000001840C518220>
    matrix: property = <property object at 0x000001840C5179A0>
    maxRotLimit: property = <property object at 0x000001840C5196D0>
    maxRotLimitEnable: property = <property object at 0x000001840C519900>
    maxRotXLimit: property = <property object at 0x000001840C491540>
    maxRotXLimitEnable: property = <property object at 0x000001840C519950>
    maxRotYLimit: property = <property object at 0x000001840C519720>
    maxRotYLimitEnable: property = <property object at 0x000001840C5199A0>
    maxRotZLimit: property = <property object at 0x000001840C519770>
    maxRotZLimitEnable: property = <property object at 0x000001840C5199F0>
    maxScaleLimit: property = <property object at 0x000001840C519AE0>
    maxScaleLimitEnable: property = <property object at 0x000001840C519D10>
    maxScaleXLimit: property = <property object at 0x000001840C519B30>
    maxScaleXLimitEnable: property = <property object at 0x000001840C519D60>
    maxScaleYLimit: property = <property object at 0x000001840C519B80>
    maxScaleYLimitEnable: property = <property object at 0x000001840C519DB0>
    maxScaleZLimit: property = <property object at 0x000001840C48A8B0>
    maxScaleZLimitEnable: property = <property object at 0x000001840C519E00>
    maxTransLimit: property = <property object at 0x000001840C4DB3B0>
    maxTransLimitEnable: property = <property object at 0x000001840C5194A0>
    maxTransXLimit: property = <property object at 0x000001840C519270>
    maxTransXLimitEnable: property = <property object at 0x000001840C5194F0>
    maxTransYLimit: property = <property object at 0x000001840C5192C0>
    maxTransYLimitEnable: property = <property object at 0x000001840C519540>
    maxTransZLimit: property = <property object at 0x000001840C519310>
    maxTransZLimitEnable: property = <property object at 0x000001840C519590>
    minRotLimit: property = <property object at 0x000001840C5195E0>
    minRotLimitEnable: property = <property object at 0x000001840C5197C0>
    minRotXLimit: property = <property object at 0x000001840C4F37C0>
    minRotXLimitEnable: property = <property object at 0x000001840C519810>
    minRotYLimit: property = <property object at 0x000001840C519630>
    minRotYLimitEnable: property = <property object at 0x000001840C519860>
    minRotZLimit: property = <property object at 0x000001840C519680>
    minRotZLimitEnable: property = <property object at 0x000001840C5198B0>
    minScaleLimit: property = <property object at 0x000001840C4C4EF0>
    minScaleLimitEnable: property = <property object at 0x000001840C519BD0>
    minScaleXLimit: property = <property object at 0x000001840C519A40>
    minScaleXLimitEnable: property = <property object at 0x000001840C519C20>
    minScaleYLimit: property = <property object at 0x000001840C519A90>
    minScaleYLimitEnable: property = <property object at 0x000001840C519C70>
    minScaleZLimit: property = <property object at 0x000001840C510770>
    minScaleZLimitEnable: property = <property object at 0x000001840C519CC0>
    minTransLimit: property = <property object at 0x000001840C519180>
    minTransLimitEnable: property = <property object at 0x000001840C519360>
    minTransXLimit: property = <property object at 0x000001840C5191D0>
    minTransXLimitEnable: property = <property object at 0x000001840C5193B0>
    minTransYLimit: property = <property object at 0x000001840C519220>
    minTransYLimitEnable: property = <property object at 0x000001840C519400>
    minTransZLimit: property = <property object at 0x000001840C4433B0>
    minTransZLimitEnable: property = <property object at 0x000001840C519450>
    def mustCallValidateAndSet(self, *args: Any, **kwargs: Any) -> Any: ...
    nodeBoundingBox: property = <property object at 0x000001840C517450>
    nodeBoundingBoxMax: property = <property object at 0x000001840C5175E0>
    nodeBoundingBoxMaxX: property = <property object at 0x000001840C517630>
    nodeBoundingBoxMaxY: property = <property object at 0x000001840C517680>
    nodeBoundingBoxMaxZ: property = <property object at 0x000001840C5176D0>
    nodeBoundingBoxMin: property = <property object at 0x000001840C5174A0>
    nodeBoundingBoxMinX: property = <property object at 0x000001840C5174F0>
    nodeBoundingBoxMinY: property = <property object at 0x000001840C517540>
    nodeBoundingBoxMinZ: property = <property object at 0x000001840C517590>
    nodeBoundingBoxSize: property = <property object at 0x000001840C517720>
    nodeBoundingBoxSizeX: property = <property object at 0x000001840C517770>
    nodeBoundingBoxSizeY: property = <property object at 0x000001840C5177C0>
    nodeBoundingBoxSizeZ: property = <property object at 0x000001840C517810>
    objectColor: property = <property object at 0x000001840C517EA0>
    objectGroupColor: property = <property object at 0x000001840C517E00>
    objectGroupId: property = <property object at 0x000001840C517DB0>
    objectGroups: property = <property object at 0x000001840C517D10>
    objectGrpCompList: property = <property object at 0x000001840C517D60>
    offsetParentMatrix: property = <property object at 0x000001840C51A4F0>
    overrideColor: property = <property object at 0x000001840C5181D0>
    overrideDisplayType: property = <property object at 0x000001840C517F40>
    overrideEnabled: property = <property object at 0x000001840C518130>
    overrideLevelOfDetail: property = <property object at 0x000001840C517F90>
    overridePlayback: property = <property object at 0x000001840C5180E0>
    overrideShading: property = <property object at 0x000001840C518040>
    overrideTexturing: property = <property object at 0x000001840C518090>
    overrideVisibility: property = <property object at 0x000001840C518180>
    parentInverseMatrix: property = <property object at 0x000001840C517B30>
    parentMatrix: property = <property object at 0x000001840C517AE0>
    def postConstructor(self, *args: Any, **kwargs: Any) -> Any: ...
    renderInfo: property = <property object at 0x000001840C518270>
    renderLayerColor: property = <property object at 0x000001840C5184A0>
    renderLayerId: property = <property object at 0x000001840C518400>
    renderLayerInfo: property = <property object at 0x000001840C5183B0>
    renderLayerRenderable: property = <property object at 0x000001840C518450>
    def resetTransformation(self, *args: Any, **kwargs: Any) -> Any: ...
    rotate: property = <property object at 0x000001840C518630>
    rotateAxis: property = <property object at 0x000001840C518EF0>
    rotateAxisX: property = <property object at 0x000001840C518F40>
    rotateAxisY: property = <property object at 0x000001840C518F90>
    rotateAxisZ: property = <property object at 0x000001840C519040>
    def rotateBy(self, *args: Any, **kwargs: Any) -> Any: ...
    rotateOrder: property = <property object at 0x000001840C518720>
    rotatePivot: property = <property object at 0x000001840C5189F0>
    rotatePivotTranslate: property = <property object at 0x000001840C518B30>
    rotatePivotTranslateX: property = <property object at 0x000001840C518B80>
    rotatePivotTranslateY: property = <property object at 0x000001840C518BD0>
    rotatePivotTranslateZ: property = <property object at 0x000001840C518C20>
    rotatePivotX: property = <property object at 0x000001840C518A40>
    rotatePivotY: property = <property object at 0x000001840C518A90>
    rotatePivotZ: property = <property object at 0x000001840C518AE0>
    rotateQuaternion: property = <property object at 0x000001840C51A310>
    rotateQuaternionW: property = <property object at 0x000001840C51A450>
    rotateQuaternionX: property = <property object at 0x000001840C51A360>
    rotateQuaternionY: property = <property object at 0x000001840C51A3B0>
    rotateQuaternionZ: property = <property object at 0x000001840C51A400>
    def rotateTo(self, *args: Any, **kwargs: Any) -> Any: ...
    rotateX: property = <property object at 0x000001840C518680>
    rotateY: property = <property object at 0x000001840C5186D0>
    rotateZ: property = <property object at 0x000001840C4D9180>
    rotationInterpolation: property = <property object at 0x000001840C51A4A0>
    scale: property = <property object at 0x000001840C518770>
    def scaleBy(self, *args: Any, **kwargs: Any) -> Any: ...
    scalePivot: property = <property object at 0x000001840C518C70>
    scalePivotTranslate: property = <property object at 0x000001840C518DB0>
    scalePivotTranslateX: property = <property object at 0x000001840C518E00>
    scalePivotTranslateY: property = <property object at 0x000001840C518E50>
    scalePivotTranslateZ: property = <property object at 0x000001840C518EA0>
    scalePivotX: property = <property object at 0x000001840C518CC0>
    scalePivotY: property = <property object at 0x000001840C518D10>
    scalePivotZ: property = <property object at 0x000001840C518D60>
    def scaleTo(self, *args: Any, **kwargs: Any) -> Any: ...
    scaleX: property = <property object at 0x000001840C5187C0>
    scaleY: property = <property object at 0x000001840C518810>
    scaleZ: property = <property object at 0x000001840C518860>
    selectHandle: property = <property object at 0x000001840C519EF0>
    selectHandleX: property = <property object at 0x000001840C519F40>
    selectHandleY: property = <property object at 0x000001840C519F90>
    selectHandleZ: property = <property object at 0x000001840C51A040>
    def setLimit(self, *args: Any, **kwargs: Any) -> Any: ...
    def setNonAffineMatricesEnabled(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotateOrientation(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotatePivot(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotatePivotTranslation(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotationOrder(self, *args: Any, **kwargs: Any) -> Any: ...
    def setScalePivot(self, *args: Any, **kwargs: Any) -> Any: ...
    def setScalePivotTranslation(self, *args: Any, **kwargs: Any) -> Any: ...
    shear: property = <property object at 0x000001840C5188B0>
    def shearBy(self, *args: Any, **kwargs: Any) -> Any: ...
    def shearTo(self, *args: Any, **kwargs: Any) -> Any: ...
    shearXY: property = <property object at 0x000001840C518900>
    shearXZ: property = <property object at 0x000001840C518950>
    shearYZ: property = <property object at 0x000001840C5189A0>
    showManipDefault: property = <property object at 0x000001840C51A270>
    specifiedManipLocation: property = <property object at 0x000001840C51A2C0>
    thisown: property = <property object at 0x000001840C515310>
    transMinusRotatePivot: property = <property object at 0x000001840C488130>
    transMinusRotatePivotX: property = <property object at 0x000001840C519090>
    transMinusRotatePivotY: property = <property object at 0x000001840C5190E0>
    transMinusRotatePivotZ: property = <property object at 0x000001840C519130>
    def transformationMatrix(self, *args: Any, **kwargs: Any) -> Any: ...
    def transformationMatrixPtr(self, *args: Any, **kwargs: Any) -> Any: ...
    translate: property = <property object at 0x000001840C5184F0>
    def translateBy(self, *args: Any, **kwargs: Any) -> Any: ...
    def translateTo(self, *args: Any, **kwargs: Any) -> Any: ...
    translateX: property = <property object at 0x000001840C518540>
    translateY: property = <property object at 0x000001840C518590>
    translateZ: property = <property object at 0x000001840C5185E0>
    def treatAsTransform(self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self, *args: Any, **kwargs: Any) -> Any: ...
    def updateMatrixAttrs(self, *args: Any, **kwargs: Any) -> Any: ...
    useObjectColor: property = <property object at 0x000001840C517E50>
    def validateAndSetValue(self, *args: Any, **kwargs: Any) -> Any: ...
    visibility: property = <property object at 0x000001840C517B80>
    worldInverseMatrix: property = <property object at 0x000001840C517A90>
    worldMatrix: property = <property object at 0x000001840C517A40>
    xformMatrix: property = <property object at 0x000001840C519EA0>

def MPxTransform_className(*args: Any, **kwargs: Any) -> Any: ...
def MPxTransform_isNonAffineMatricesEnabled(*args: Any, **kwargs: Any) -> Any: ...
def MPxTransform_mustCallValidateAndSet(*args: Any, **kwargs: Any) -> Any: ...
def MPxTransform_setNonAffineMatricesEnabled(*args: Any, **kwargs: Any) -> Any: ...
class MPxTransformationMatrix(object):
    """
    """
    def __disown__(self) -> Any: ...
    def __eq__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __ne__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def asInterpolationMatrix(self, *args: Any, **kwargs: Any) -> Any: ...
    def asMatrix(self, *args: Any, **kwargs: Any) -> Any: ...
    def asMatrixInverse(self, *args: Any, **kwargs: Any) -> Any: ...
    def asRotateMatrix(self, *args: Any, **kwargs: Any) -> Any: ...
    def asRotateMatrixInverse(self, *args: Any, **kwargs: Any) -> Any: ...
    def asScaleMatrix(self, *args: Any, **kwargs: Any) -> Any: ...
    def asScaleMatrixInverse(self, *args: Any, **kwargs: Any) -> Any: ...
    def asTransformationMatrix(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    baseTransformationMatrixId: property = <property object at 0x000001840C5151D0>
    def convertEulerRotationOrder(self, *args: Any, **kwargs: Any) -> Any: ...
    def convertTransformationRotationOrder(self, *args: Any, **kwargs: Any) -> Any: ...
    def copyValues(self, *args: Any, **kwargs: Any) -> Any: ...
    def creator(self, *args: Any, **kwargs: Any) -> Any: ...
    def decomposeMatrix(self, *args: Any, **kwargs: Any) -> Any: ...
    def eulerRotateOrientation(self, *args: Any, **kwargs: Any) -> Any: ...
    def eulerRotation(self, *args: Any, **kwargs: Any) -> Any: ...
    identity: MPxTransformationMatrix = <maya.OpenMayaMPx.MPxTransformationMatrix; proxy of <Swig Object of type 'MPxTransformationMatrix *' at 0x000001840C513F00> >
    def isEquivalent(self, *args: Any, **kwargs: Any) -> Any: ...
    def preRotation(self, *args: Any, **kwargs: Any) -> Any: ...
    def reverse(self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateBy(self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateOrientation(self, *args: Any, **kwargs: Any) -> Any: ...
    def rotatePivot(self, *args: Any, **kwargs: Any) -> Any: ...
    def rotatePivotTranslation(self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateTo(self, *args: Any, **kwargs: Any) -> Any: ...
    def rotation(self, *args: Any, **kwargs: Any) -> Any: ...
    def rotationOrder(self, *args: Any, **kwargs: Any) -> Any: ...
    def scale(self, *args: Any, **kwargs: Any) -> Any: ...
    def scaleBy(self, *args: Any, **kwargs: Any) -> Any: ...
    def scalePivot(self, *args: Any, **kwargs: Any) -> Any: ...
    def scalePivotTranslation(self, *args: Any, **kwargs: Any) -> Any: ...
    def scaleTo(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotateOrientation(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotatePivot(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotatePivotTranslation(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotationOrder(self, *args: Any, **kwargs: Any) -> Any: ...
    def setScalePivot(self, *args: Any, **kwargs: Any) -> Any: ...
    def setScalePivotTranslation(self, *args: Any, **kwargs: Any) -> Any: ...
    def shear(self, *args: Any, **kwargs: Any) -> Any: ...
    def shearBy(self, *args: Any, **kwargs: Any) -> Any: ...
    def shearTo(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x000001840C5142C0>
    def transformBy(self, *args: Any, **kwargs: Any) -> Any: ...
    def translateBy(self, *args: Any, **kwargs: Any) -> Any: ...
    def translateTo(self, *args: Any, **kwargs: Any) -> Any: ...
    def translation(self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self, *args: Any, **kwargs: Any) -> Any: ...
    def unSquishIt(self, *args: Any, **kwargs: Any) -> Any: ...
    def unSquishMatrix(self, *args: Any, **kwargs: Any) -> Any: ...

def MPxTransformationMatrix_convertEulerRotationOrder(*args: Any, **kwargs: Any) -> Any: ...
def MPxTransformationMatrix_convertTransformationRotationOrder(*args: Any, **kwargs: Any) -> Any: ...
def MPxTransformationMatrix_creator(*args: Any, **kwargs: Any) -> Any: ...
class MPxUIControl(object):
    """
    """
    def __disown__(self) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x000001840C538360>

def MPxUIControl_className(*args: Any, **kwargs: Any) -> Any: ...
class MPxUITableControl(MPxUIControl):
    """
    """
    def __disown__(self) -> Any: ...
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addToSelection(self, *args: Any, **kwargs: Any) -> Any: ...
    def allowEdit(self, *args: Any, **kwargs: Any) -> Any: ...
    def allowSelection(self, *args: Any, **kwargs: Any) -> Any: ...
    def cellString(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def clearSelection(self, *args: Any, **kwargs: Any) -> Any: ...
    def collapseOrExpandRow(self, *args: Any, **kwargs: Any) -> Any: ...
    def getCellColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def isSelected(self, *args: Any, **kwargs: Any) -> Any: ...
    kAllLabels: int = 3
    kColumnLabel: int = 2
    kNoLabel: int = 0
    kRowLabel: int = 1
    def labelString(self, *args: Any, **kwargs: Any) -> Any: ...
    def numberOfColumns(self, *args: Any, **kwargs: Any) -> Any: ...
    def numberOfRows(self, *args: Any, **kwargs: Any) -> Any: ...
    def redrawCells(self, *args: Any, **kwargs: Any) -> Any: ...
    def redrawLabels(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeFromSelection(self, *args: Any, **kwargs: Any) -> Any: ...
    def setNumberOfColumns(self, *args: Any, **kwargs: Any) -> Any: ...
    def setNumberOfRows(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSelection(self, *args: Any, **kwargs: Any) -> Any: ...
    def suspendUpdates(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x000001840C5384A0>

def MPxUITableControl_className(*args: Any, **kwargs: Any) -> Any: ...
class MaterialInputData(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    ambient: property = <property object at 0x000001840C51C450>
    diffuse: property = <property object at 0x000001840C4E46D0>
    emission: property = <property object at 0x000001840C51C4A0>
    hasTransparency: property = <property object at 0x000001840C51C540>
    shininess: property = <property object at 0x000001840C51C400>
    specular: property = <property object at 0x000001840C51C4F0>
    thisown: property = <property object at 0x000001840C51C3B0>

def asHashable(mpxObj) -> Any: ...
def asMPxPtr(mpxObj) -> Any: ...
class boolPtr(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x000001840C443A90>
    def value(self, *args: Any, **kwargs: Any) -> Any: ...

def boolPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
class charPtr(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x000001840C442F90>
    def value(self, *args: Any, **kwargs: Any) -> Any: ...

def charPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
class doublePtr(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x000001840C443860>
    def value(self, *args: Any, **kwargs: Any) -> Any: ...

def doublePtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
class floatPtr(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x000001840C443630>
    def value(self, *args: Any, **kwargs: Any) -> Any: ...

def floatPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
def getLockCaptureCount(*args: Any, **kwargs: Any) -> Any: ...
class intPtr(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x000001840C4431D0>
    def value(self, *args: Any, **kwargs: Any) -> Any: ...

def intPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
class shortPtr(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x000001840C443400>
    def value(self, *args: Any, **kwargs: Any) -> Any: ...

def shortPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
class uCharPtr(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x000001840C443EF0>
    def value(self, *args: Any, **kwargs: Any) -> Any: ...

def uCharPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
class uIntPtr(object):
    """
    """
    def __init__(self, *args) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""

    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = <property object at 0x000001840C443CC0>
    def value(self, *args: Any, **kwargs: Any) -> Any: ...

def uIntPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
