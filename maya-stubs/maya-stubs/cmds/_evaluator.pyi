from __future__ import annotations

from typing import *


Unknown = Any

_T = TypeVar("_T")

Queryable = Union[bool, _T]
Multiuse = Union[_T, List[_T]]
Range = Union[Tuple[_T], Tuple[_T, _T]]
NullableRange = Range[Optional[_T]]

def evaluator(*args: str, query: bool = ..., clusters: bool = ..., configuration: Queryable[Multiuse[str]] = ..., enable: bool = ..., info: bool = ..., name: Queryable[str] = ..., nodeType: Queryable[Multiuse[str]] = ..., nodeTypeChildren: bool = ..., priority: Queryable[int] = ..., valueName: Queryable[str] = ...) -> Union[List[str], bool, str, int, Multiuse[str]]:
    """Handles turning on and off custom evaluation overrides used by the evaluation
    manager.
    Query no flag to see all available custom evaluators.
    Query the 'enable' flag to check if an evaluator is currently enabled.
    If the 'name' flag isn't used then return all modes and their current
    active state.evaluation, manager, DG, runtime
    Args:
        clusters (bool?): This flag queries the list of clusters currently assigned to the named custom evaluator.  
                The return value will be an array of strings where the array consists of a  
                set of (number, string[]) groups. e.g. If an evaluator has 2 clusters with  
                2 and 3 nodes in them respectively the output would be something like:  
                (2, 'transform2', 'transform3', 3, 'joint1', 'joint2', 'joint3')  
                Properties: query
        configuration (Queryable[Multiuse[str]]?): Sends configuration information to a custom evaluator. It's up to the evaluator  
                to understand what they mean.  
                Multiple configuration messages can be sent in a single command.  
                Query this flag for a given evaluator to find out what configuration  
                messages it accepts.  
                Properties: create, query, multiuse
        enable (bool?): Enables or disables a specific graph evaluation runtime, depending on the  
                state of the flag.  In order to use this flag you must also specify the  
                name in the 'name' argument.  
                When the 'enable' flag is used in conjunction with the 'nodeType' flag then  
                it is used to selectively turn on or off the ability of the given evaluator  
                to handle nodes of the given type (i.e. it no longer toggles the evaluator  
                enabled state).  
                When the 'enable' flag is used in conjunction with the 'configuration' flag then  
                it is passed along with the configuration message interpreted by the custom  
                evaluator.  
                Properties: create, query
        info (bool?): Queries the evaluator information. Only valid in query mode since the  
                information is generated by the evaluator's internal state and cannot be  
                changed.  
                In order to use this flag, the 'name' argument must also be specified.  
                Properties: query
        name (Queryable[str]?): Names a particular DG evaluation override evaluator. Evaluators are registered  
                automatically by name. Query this flag to get a list of available runtimes.  
                When a runtime is registered it is enabled by default. Use the 'enable'  
                flag to change its enabled state.  
                			In query mode, this flag can accept a value.  
                Properties: create, query
        nodeType (Queryable[Multiuse[str]]?): Names a particular node type to be passed to the evaluator request.  
                Evaluators can either use or ignore the node type information as passed.  
                			In query mode, this flag can accept a value.  
                Properties: create, query, multiuse
        nodeTypeChildren (bool?): If enabled when using the 'nodeType' flag then handle all of the node types  
                derived from the given one as well. Default is to only handle the named  
                node type.  
                Properties: create, query
        priority (Queryable[int]?): Query or set the evaluator priority. Custom evaluator with highest priority  
                order will get the chance to claim the nodes first.  Evaluators must have  
                unique priority values.  
                In order to use this flag you must also specify the name in the 'name' argument.  
                Properties: create, query
        valueName (Queryable[str]?): Queries a value from a given evaluator.  Evaluators can define a set of  
                values for which they answer.  
                			In query mode, this flag can accept a value.  
                Properties: query

    Returns:
        List[str]: the list of available evaluators (querying with no evaluator flag or invalid evaluator name)
        bool: the previous active state of the named evaluator (with 'name' and 'enable' flags)
        bool: the active state of the named evaluator (query with 'name' and 'enable' flags)
        List[str]: the list of evaluators in the requested active state (query 'enable' flag alone)
        List[str]: the list of nodes for which the evaluator was activated or deactivated (with 'nodeType' or 'nodeTypeChildren' flags)
        str: the queried value for the evaluator (with 'name' and 'valueName' flags)
        bool: true if the configuration request was accepted by the evaluator (with 'name' flag and 'configuration' flag)
        List[str]: the list of configuration parameters accepted by the evaluator (query mode with 'name' flag and 'configuration' flag)
        List[str]: the list of clusters currently assigned to the evaluator with intervening sublist sizes (query mode with 'name' flag and 'clusters' flag)
        str: the help information supplied by the evaluator (query mode with 'name' flag and 'info' flag)
        int: the priority value of the evaluator (query mode with 'name' flag and 'priority' flag)

    Example:
    """

