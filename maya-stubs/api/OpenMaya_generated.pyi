# fmt: off
from typing import *
from typing_extensions import Self
from _typeshed import Incomplete


class MAngle(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asAngMinutes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asAngSeconds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asDegrees(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asRadians(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asUnits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def internalToUI(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def internalUnit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAngMinutes: int = ...
    kAngSeconds: int = ...
    kDegrees: int = ...
    kInvalid: int = ...
    kLast: int = ...
    kRadians: int = ...
    def setUIUnit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uiToInternal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uiUnit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def unit(*args: Any, **kwargs: Any) -> Any: ...
    @unit.setter
    def unit(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def value(*args: Any, **kwargs: Any) -> Any: ...
    @value.setter
    def value(*args: Any, **kwargs: Any) -> Any: ...

class MArgDatabase(MArgParser):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def commandArgumentBool(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def commandArgumentDouble(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def commandArgumentFloat(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def commandArgumentInt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def commandArgumentMAngle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def commandArgumentMDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def commandArgumentMSelectionList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def commandArgumentMTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def commandArgumentString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def flagArgumentBool(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def flagArgumentDouble(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def flagArgumentFloat(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def flagArgumentInt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def flagArgumentMAngle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def flagArgumentMDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def flagArgumentMSelectionList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def flagArgumentMTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def flagArgumentString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFlagArgumentList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFlagArgumentPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getObjectList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getObjectStrings(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isEdit(*args: Any, **kwargs: Any) -> Any: ...
    @isEdit.setter
    def isEdit(*args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isQuery(*args: Any, **kwargs: Any) -> Any: ...
    @isQuery.setter
    def isQuery(*args: Any, **kwargs: Any) -> Any: ...
    def numberOfFlagUses(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def numberOfFlagsUsed(*args: Any, **kwargs: Any) -> Any: ...
    @numberOfFlagsUsed.setter
    def numberOfFlagsUsed(*args: Any, **kwargs: Any) -> Any: ...

class MArgList(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __len__(self: Self) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addArg(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asAngle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asBool(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asDouble(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asDoubleArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asFloat(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asInt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asIntArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asStringArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asVector(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def flagIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kInvalidArgIndex: int = ...
    def lastArgUsed(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MArgParser(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def commandArgumentBool(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def commandArgumentDouble(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def commandArgumentFloat(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def commandArgumentInt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def commandArgumentMAngle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def commandArgumentMDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def commandArgumentMTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def commandArgumentString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def flagArgumentBool(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def flagArgumentDouble(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def flagArgumentFloat(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def flagArgumentInt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def flagArgumentMAngle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def flagArgumentMDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def flagArgumentMTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def flagArgumentString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFlagArgumentList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFlagArgumentPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getObjectStrings(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isEdit(*args: Any, **kwargs: Any) -> Any: ...
    @isEdit.setter
    def isEdit(*args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isQuery(*args: Any, **kwargs: Any) -> Any: ...
    @isQuery.setter
    def isQuery(*args: Any, **kwargs: Any) -> Any: ...
    def numberOfFlagUses(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def numberOfFlagsUsed(*args: Any, **kwargs: Any) -> Any: ...
    @numberOfFlagsUsed.setter
    def numberOfFlagsUsed(*args: Any, **kwargs: Any) -> Any: ...

class MArrayDataBuilder(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __len__(self: Self) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addElement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addElementArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addLast(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addLastArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def growArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeElement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setGrowSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MArrayDataHandle(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __len__(self: Self) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def builder(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def elementLogicalIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inputArrayValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inputValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDone(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def jumpToLogicalElement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def jumpToPhysicalElement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def next(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def outputArrayValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def outputValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAllClean(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setClean(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MAttributeIndex(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    __hash__: NoneType = ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getLower(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getUpper(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasLowerBound(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasRange(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUpperBound(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasValidRange(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isBounded(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kFloat: int = ...
    kInteger: int = ...
    def setLower(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUpper(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MAttributePattern(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addRootAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attrPattern(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attrPatternCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPattern(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeRootAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rootAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rootAttrCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MAttributeSpec(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __getitem__(self: Self, key: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    __hash__: NoneType = ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __len__(self: Self) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def dimensions(*args: Any, **kwargs: Any) -> Any: ...
    @dimensions.setter
    def dimensions(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def name(*args: Any, **kwargs: Any) -> Any: ...
    @name.setter
    def name(*args: Any, **kwargs: Any) -> Any: ...

class MAttributeSpecArray(object):
    def __add__(self: Self, value: Any) -> Any: ...
    def __contains__(self: Self, key: Any) -> Any: ...
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __delitem__(self: Self, key: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __getitem__(self: Self, key: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __iadd__(self: Self, value: Any) -> Any: ...
    def __imul__(self: Self, value: Any) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __len__(self: Self) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __mul__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __rmul__(self: Self, value: Any) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __setitem__(self: Self, key: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def append(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def sizeIncrement(*args: Any, **kwargs: Any) -> Any: ...
    @sizeIncrement.setter
    def sizeIncrement(*args: Any, **kwargs: Any) -> Any: ...

class MBoundingBox(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def center(*args: Any, **kwargs: Any) -> Any: ...
    @center.setter
    def center(*args: Any, **kwargs: Any) -> Any: ...
    def clear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def contains(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def depth(*args: Any, **kwargs: Any) -> Any: ...
    @depth.setter
    def depth(*args: Any, **kwargs: Any) -> Any: ...
    def expand(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def height(*args: Any, **kwargs: Any) -> Any: ...
    @height.setter
    def height(*args: Any, **kwargs: Any) -> Any: ...
    def intersects(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def max(*args: Any, **kwargs: Any) -> Any: ...
    @max.setter
    def max(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def min(*args: Any, **kwargs: Any) -> Any: ...
    @min.setter
    def min(*args: Any, **kwargs: Any) -> Any: ...
    def transformUsing(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def width(*args: Any, **kwargs: Any) -> Any: ...
    @width.setter
    def width(*args: Any, **kwargs: Any) -> Any: ...

class MCacheSchema(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def add(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MCallbackIdArray(object):
    def __add__(self: Self, value: Any) -> Any: ...
    def __contains__(self: Self, key: Any) -> Any: ...
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __delitem__(self: Self, key: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __getitem__(self: Self, key: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __iadd__(self: Self, value: Any) -> Any: ...
    def __imul__(self: Self, value: Any) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __len__(self: Self) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __mul__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __rmul__(self: Self, value: Any) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __setitem__(self: Self, key: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def append(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def sizeIncrement(*args: Any, **kwargs: Any) -> Any: ...
    @sizeIncrement.setter
    def sizeIncrement(*args: Any, **kwargs: Any) -> Any: ...

class MCameraMessage(MMessage):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addBeginManipulationCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addEndManipulationCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentCallbackId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kDefaultAction: int = ...
    kDoAction: int = ...
    kDoNotDoAction: int = ...
    def nodeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MColor(object):
    def __add__(self: Self, value: Any) -> Any: ...
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __delitem__(self: Self, key: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __getitem__(self: Self, key: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    __hash__: NoneType = ...
    def __iadd__(self: Self, value: Any) -> Any: ...
    def __imul__(self: Self, value: Any) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __itruediv__(self: Self, value: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __len__(self: Self) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __mul__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __radd__(self: Self, value: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __rmul__(self: Self, value: Any) -> Any: ...
    def __rtruediv__(self: Self, value: Any) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __setitem__(self: Self, key: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __truediv__(self: Self, value: Any) -> Any: ...
    @property
    def a(*args: Any, **kwargs: Any) -> Any: ...
    @a.setter
    def a(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def b(*args: Any, **kwargs: Any) -> Any: ...
    @b.setter
    def b(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def g(*args: Any, **kwargs: Any) -> Any: ...
    @g.setter
    def g(*args: Any, **kwargs: Any) -> Any: ...
    def getColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kByte: int = ...
    kCMY: int = ...
    kCMYK: int = ...
    kFloat: int = ...
    kHSV: int = ...
    kOpaqueBlack: MColor = ...
    kRGB: int = ...
    kShort: int = ...
    @property
    def r(*args: Any, **kwargs: Any) -> Any: ...
    @r.setter
    def r(*args: Any, **kwargs: Any) -> Any: ...
    def setColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MColorArray(object):
    def __add__(self: Self, value: Any) -> Any: ...
    def __contains__(self: Self, key: Any) -> Any: ...
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __delitem__(self: Self, key: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __getitem__(self: Self, key: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __iadd__(self: Self, value: Any) -> Any: ...
    def __imul__(self: Self, value: Any) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __len__(self: Self) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __mul__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __rmul__(self: Self, value: Any) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __setitem__(self: Self, key: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def append(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def sizeIncrement(*args: Any, **kwargs: Any) -> Any: ...
    @sizeIncrement.setter
    def sizeIncrement(*args: Any, **kwargs: Any) -> Any: ...

class MCommandMessage(MMessage):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addCommandCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addCommandOutputCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addCommandOutputFilterCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addProcCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentCallbackId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kDefaultAction: int = ...
    kDisplay: int = ...
    kDoAction: int = ...
    kDoNotDoAction: int = ...
    kError: int = ...
    kHistory: int = ...
    kInfo: int = ...
    kMELCommand: int = ...
    kMELProc: int = ...
    kResult: int = ...
    kStackTrace: int = ...
    kWarning: int = ...
    def nodeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MConditionMessage(MMessage):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addConditionCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentCallbackId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConditionNames(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConditionState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kDefaultAction: int = ...
    kDoAction: int = ...
    kDoNotDoAction: int = ...
    def nodeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MContainerMessage(MMessage):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addBoundAttrCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addPublishAttrCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentCallbackId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kDefaultAction: int = ...
    kDoAction: int = ...
    kDoNotDoAction: int = ...
    def nodeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MDAGDrawOverrideInfo(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def displayType(*args: Any, **kwargs: Any) -> Any: ...
    @displayType.setter
    def displayType(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def enableShading(*args: Any, **kwargs: Any) -> Any: ...
    @enableShading.setter
    def enableShading(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def enableTexturing(*args: Any, **kwargs: Any) -> Any: ...
    @enableTexturing.setter
    def enableTexturing(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def enableVisible(*args: Any, **kwargs: Any) -> Any: ...
    @enableVisible.setter
    def enableVisible(*args: Any, **kwargs: Any) -> Any: ...
    kDisplayTypeNormal: int = ...
    kDisplayTypeReference: int = ...
    kDisplayTypeTemplate: int = ...
    kLODBoundingBox: int = ...
    kLODFull: int = ...
    @property
    def lod(*args: Any, **kwargs: Any) -> Any: ...
    @lod.setter
    def lod(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def overrideEnabled(*args: Any, **kwargs: Any) -> Any: ...
    @overrideEnabled.setter
    def overrideEnabled(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def playbackVisible(*args: Any, **kwargs: Any) -> Any: ...
    @playbackVisible.setter
    def playbackVisible(*args: Any, **kwargs: Any) -> Any: ...

class MDGContext(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def current(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isCurrent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNormal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kNormal: MDGContext = ...
    def makeCurrent(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MDGMessage(MMessage):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addConnectionCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addDelayedTimeChangeCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addDelayedTimeChangeRunupCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addForceUpdateCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addNodeAddedCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addNodeChangeUuidCheckCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addNodeRemovedCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addPreConnectionCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addTimeChangeCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentCallbackId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kDefaultAction: int = ...
    kDoAction: int = ...
    kDoNotDoAction: int = ...
    def nodeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MDGModifier(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExtensionAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def commandToExecute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connect(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def disconnect(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doIt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def linkExtensionAttributeToPlugin(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def newPlugValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def newPlugValueBool(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def newPlugValueChar(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def newPlugValueDouble(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def newPlugValueFloat(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def newPlugValueInt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def newPlugValueMAngle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def newPlugValueMDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def newPlugValueMTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def newPlugValueShort(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def newPlugValueString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pythonCommandToExecute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeExtensionAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeExtensionAttributeIfUnset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeMultiInstance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def renameAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def renameNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setNodeLockState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def undoIt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def unlinkExtensionAttributeFromPlugin(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MDagMessage(MMessage):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAllDagChangesCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAllDagChangesDagPathCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addChildAddedCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addChildAddedDagPathCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addChildRemovedCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addChildRemovedDagPathCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addChildReorderedCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addChildReorderedDagPathCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addDagCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addDagDagPathCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addInstanceAddedCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addInstanceAddedDagPathCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addInstanceRemovedCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addInstanceRemovedDagPathCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addMatrixModifiedCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addParentAddedCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addParentAddedDagPathCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addParentRemovedCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addParentRemovedDagPathCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addWorldMatrixModifiedCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentCallbackId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAll: int = ...
    kChildAdded: int = ...
    kChildRemoved: int = ...
    kChildReordered: int = ...
    kDefaultAction: int = ...
    kDoAction: int = ...
    kDoNotDoAction: int = ...
    kInstanceAdded: int = ...
    kInstanceRemoved: int = ...
    kInvalidMsg: int = ...
    kLast: int = ...
    kParentAdded: int = ...
    kParentRemoved: int = ...
    kRotateOrder: int = ...
    kRotateOrient: int = ...
    kRotateOrientX: int = ...
    kRotateOrientY: int = ...
    kRotateOrientZ: int = ...
    kRotatePivot: int = ...
    kRotatePivotTrans: int = ...
    kRotatePivotX: int = ...
    kRotatePivotY: int = ...
    kRotatePivotZ: int = ...
    kRotateTransX: int = ...
    kRotateTransY: int = ...
    kRotateTransZ: int = ...
    kRotateX: int = ...
    kRotateY: int = ...
    kRotateZ: int = ...
    kRotation: int = ...
    kScale: int = ...
    kScalePivot: int = ...
    kScalePivotTrans: int = ...
    kScalePivotX: int = ...
    kScalePivotY: int = ...
    kScalePivotZ: int = ...
    kScaleTransX: int = ...
    kScaleTransY: int = ...
    kScaleTransZ: int = ...
    kScaleX: int = ...
    kScaleY: int = ...
    kScaleZ: int = ...
    kShear: int = ...
    kShearXY: int = ...
    kShearXZ: int = ...
    kShearYZ: int = ...
    kTranslateX: int = ...
    kTranslateY: int = ...
    kTranslateZ: int = ...
    kTranslation: int = ...
    def nodeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MDagModifier(MDGModifier):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExtensionAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def commandToExecute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connect(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def disconnect(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doIt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def linkExtensionAttributeToPlugin(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def newPlugValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def newPlugValueBool(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def newPlugValueChar(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def newPlugValueDouble(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def newPlugValueFloat(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def newPlugValueInt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def newPlugValueMAngle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def newPlugValueMDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def newPlugValueMTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def newPlugValueShort(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def newPlugValueString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pythonCommandToExecute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeExtensionAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeExtensionAttributeIfUnset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeMultiInstance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def renameAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def renameNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reparentNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setNodeLockState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def undoIt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def unlinkExtensionAttributeFromPlugin(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MDagPath(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    __hash__: NoneType = ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def apiType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def childCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def exclusiveMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def exclusiveMatrixInverse(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def extendToShape(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fullPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAPathTo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllPathsTo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDisplayStatus(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDrawOverrideInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasFn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inclusiveMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inclusiveMatrixInverse(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def instanceNumber(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanced(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTemplated(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isVisible(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def matchTransform(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def node(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numberOfShapesDirectlyBelow(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def partialPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pathCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pop(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def push(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def transform(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MDagPathArray(object):
    def __add__(self: Self, value: Any) -> Any: ...
    def __contains__(self: Self, key: Any) -> Any: ...
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __delitem__(self: Self, key: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __getitem__(self: Self, key: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __iadd__(self: Self, value: Any) -> Any: ...
    def __imul__(self: Self, value: Any) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __len__(self: Self) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __mul__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __rmul__(self: Self, value: Any) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __setitem__(self: Self, key: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def append(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def sizeIncrement(*args: Any, **kwargs: Any) -> Any: ...
    @sizeIncrement.setter
    def sizeIncrement(*args: Any, **kwargs: Any) -> Any: ...

class MDataBlock(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def context(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inputArrayValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inputValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isClean(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def outputArrayValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def outputValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setClean(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MDataHandle(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def acceptedTypeIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asAddr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asAngle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asBool(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asChar(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asDouble(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asDouble2(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asDouble3(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asDouble4(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asFloat(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asFloat2(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asFloat3(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asFloatMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asFloatVector(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asGenericBool(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asGenericChar(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asGenericDouble(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asGenericFloat(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asGenericInt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asGenericShort(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asInt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asInt2(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asInt3(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asMesh(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asMeshTransformed(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asNurbsCurve(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asNurbsCurveTransformed(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asNurbsSurface(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asNurbsSurfaceTransformed(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asPluginData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asShort(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asShort2(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asShort3(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asSubdSurface(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asSubdSurfaceTransformed(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asUChar(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asVector(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copyWritable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def data(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def datablock(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def geometryTransformMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isGeneric(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNumeric(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numericType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set2Double(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set2Float(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set2Int(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set2Short(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set3Double(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set3Float(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set3Int(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set3Short(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set4Double(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setBool(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setChar(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setClean(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDouble(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFloat(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setGenericBool(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setGenericChar(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setGenericDouble(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setGenericFloat(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setGenericInt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setGenericShort(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMAngle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMFloatMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMFloatVector(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMPxData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMVector(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setShort(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MDistance(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asCentimeters(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asFeet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asInches(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asKilometers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asMeters(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asMiles(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asMillimeters(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asUnits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asYards(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def internalToUI(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def internalUnit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kCentimeters: int = ...
    kFeet: int = ...
    kInches: int = ...
    kInvalid: int = ...
    kKilometers: int = ...
    kLast: int = ...
    kMeters: int = ...
    kMiles: int = ...
    kMillimeters: int = ...
    kYards: int = ...
    def setUIUnit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uiToInternal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uiUnit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def unit(*args: Any, **kwargs: Any) -> Any: ...
    @unit.setter
    def unit(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def value(*args: Any, **kwargs: Any) -> Any: ...
    @value.setter
    def value(*args: Any, **kwargs: Any) -> Any: ...

class MDoubleArray(object):
    def __add__(self: Self, value: Any) -> Any: ...
    def __contains__(self: Self, key: Any) -> Any: ...
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __delitem__(self: Self, key: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __getitem__(self: Self, key: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __iadd__(self: Self, value: Any) -> Any: ...
    def __imul__(self: Self, value: Any) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __len__(self: Self) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __mul__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __rmul__(self: Self, value: Any) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __setitem__(self: Self, key: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def append(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def sizeIncrement(*args: Any, **kwargs: Any) -> Any: ...
    @sizeIncrement.setter
    def sizeIncrement(*args: Any, **kwargs: Any) -> Any: ...

class MEulerRotation(object):
    def __add__(self: Self, value: Any) -> Any: ...
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __delitem__(self: Self, key: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __getitem__(self: Self, key: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    __hash__: NoneType = ...
    def __iadd__(self: Self, value: Any) -> Any: ...
    def __imul__(self: Self, value: Any) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __isub__(self: Self, value: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __len__(self: Self) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __mul__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __neg__(self: Self) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __radd__(self: Self, value: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __rmul__(self: Self, value: Any) -> Any: ...
    def __rsub__(self: Self, value: Any) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __setitem__(self: Self, key: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __sub__(self: Self, value: Any) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def alternateSolution(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asQuaternion(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asVector(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def bound(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def boundIt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def closestCut(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def closestSolution(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def computeAlternateSolution(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def computeBound(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def computeClosestCut(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def computeClosestSolution(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def decompose(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def incrementalRotateBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inverse(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def invertIt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isEquivalent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isZero(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kIdentity: MEulerRotation = ...
    kTolerance: float = ...
    kXYZ: int = ...
    kXZY: int = ...
    kYXZ: int = ...
    kYZX: int = ...
    kZXY: int = ...
    kZYX: int = ...
    @property
    def order(*args: Any, **kwargs: Any) -> Any: ...
    @order.setter
    def order(*args: Any, **kwargs: Any) -> Any: ...
    def reorder(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderIt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setToAlternateSolution(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setToClosestCut(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setToClosestSolution(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def x(*args: Any, **kwargs: Any) -> Any: ...
    @x.setter
    def x(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def y(*args: Any, **kwargs: Any) -> Any: ...
    @y.setter
    def y(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def z(*args: Any, **kwargs: Any) -> Any: ...
    @z.setter
    def z(*args: Any, **kwargs: Any) -> Any: ...

class MEvaluationNode(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def datablock(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dependencyNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dirtyPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dirtyPlugExists(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def iterator(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MEvaluationNodeIterator(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDone(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def next(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def plug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MEventMessage(MMessage):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addEventCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentCallbackId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getEventNames(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kDefaultAction: int = ...
    kDoAction: int = ...
    kDoNotDoAction: int = ...
    def nodeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MExternalContentInfoTable(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __getitem__(self: Self, key: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __len__(self: Self) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addResolvedEntry(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addUnresolvedEntry(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getEntry(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MExternalContentLocationTable(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __getitem__(self: Self, key: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __len__(self: Self) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addEntry(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getEntry(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getLocation(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFileObject(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def exists(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def expandedFullName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def expandedPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fullName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getResolvedFullName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getResolvedFullNameAndExistsStatus(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isAbsolutePath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kBaseName: int = ...
    kDirMap: int = ...
    kExact: int = ...
    kInputFile: int = ...
    kInputReference: int = ...
    kNone: int = ...
    kReferenceMappings: int = ...
    kRelative: int = ...
    kStrict: int = ...
    def overrideResolvedFullName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def path(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pathCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rawFullName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rawName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rawPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rawURI(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def resolveMethod(*args: Any, **kwargs: Any) -> Any: ...
    @resolveMethod.setter
    def resolveMethod(*args: Any, **kwargs: Any) -> Any: ...
    def resolvedFullName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def resolvedName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def resolvedPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRawFullName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRawName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRawPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRawURI(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFloatArray(object):
    def __add__(self: Self, value: Any) -> Any: ...
    def __contains__(self: Self, key: Any) -> Any: ...
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __delitem__(self: Self, key: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __getitem__(self: Self, key: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __iadd__(self: Self, value: Any) -> Any: ...
    def __imul__(self: Self, value: Any) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __len__(self: Self) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __mul__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __rmul__(self: Self, value: Any) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __setitem__(self: Self, key: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def append(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def sizeIncrement(*args: Any, **kwargs: Any) -> Any: ...
    @sizeIncrement.setter
    def sizeIncrement(*args: Any, **kwargs: Any) -> Any: ...

class MFloatMatrix(object):
    def __add__(self: Self, value: Any) -> Any: ...
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __delitem__(self: Self, key: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __getitem__(self: Self, key: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    __hash__: NoneType = ...
    def __iadd__(self: Self, value: Any) -> Any: ...
    def __imul__(self: Self, value: Any) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __isub__(self: Self, value: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __len__(self: Self) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __mul__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __radd__(self: Self, value: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __rmul__(self: Self, value: Any) -> Any: ...
    def __rsub__(self: Self, value: Any) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __setitem__(self: Self, key: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __sub__(self: Self, value: Any) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def adjoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def det3x3(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def det4x4(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getElement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def homogenize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inverse(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isEquivalent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kTolerance: float = ...
    def setElement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setToIdentity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setToProduct(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def transpose(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFloatPoint(object):
    def __add__(self: Self, value: Any) -> Any: ...
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __delitem__(self: Self, key: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __getitem__(self: Self, key: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    __hash__: NoneType = ...
    def __iadd__(self: Self, value: Any) -> Any: ...
    def __imul__(self: Self, value: Any) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __isub__(self: Self, value: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __len__(self: Self) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __mul__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __radd__(self: Self, value: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __rmul__(self: Self, value: Any) -> Any: ...
    def __rsub__(self: Self, value: Any) -> Any: ...
    def __rtruediv__(self: Self, value: Any) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __setitem__(self: Self, key: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __sub__(self: Self, value: Any) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __truediv__(self: Self, value: Any) -> Any: ...
    def cartesianize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def distanceTo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def homogenize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isEquivalent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kOrigin: MFloatPoint = ...
    kTolerance: float = ...
    def rationalize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def w(*args: Any, **kwargs: Any) -> Any: ...
    @w.setter
    def w(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def x(*args: Any, **kwargs: Any) -> Any: ...
    @x.setter
    def x(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def y(*args: Any, **kwargs: Any) -> Any: ...
    @y.setter
    def y(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def z(*args: Any, **kwargs: Any) -> Any: ...
    @z.setter
    def z(*args: Any, **kwargs: Any) -> Any: ...

class MFloatPointArray(object):
    def __add__(self: Self, value: Any) -> Any: ...
    def __contains__(self: Self, key: Any) -> Any: ...
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __delitem__(self: Self, key: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __getitem__(self: Self, key: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __iadd__(self: Self, value: Any) -> Any: ...
    def __imul__(self: Self, value: Any) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __len__(self: Self) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __mul__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __rmul__(self: Self, value: Any) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __setitem__(self: Self, key: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def append(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def sizeIncrement(*args: Any, **kwargs: Any) -> Any: ...
    @sizeIncrement.setter
    def sizeIncrement(*args: Any, **kwargs: Any) -> Any: ...

class MFloatVector(object):
    def __add__(self: Self, value: Any) -> Any: ...
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __delitem__(self: Self, key: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __getitem__(self: Self, key: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    __hash__: NoneType = ...
    def __iadd__(self: Self, value: Any) -> Any: ...
    def __imul__(self: Self, value: Any) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __isub__(self: Self, value: Any) -> Any: ...
    def __itruediv__(self: Self, value: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __len__(self: Self) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __mul__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __neg__(self: Self) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __radd__(self: Self, value: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __rmul__(self: Self, value: Any) -> Any: ...
    def __rsub__(self: Self, value: Any) -> Any: ...
    def __rtruediv__(self: Self, value: Any) -> Any: ...
    def __rxor__(self: Self, value: Any) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __setitem__(self: Self, key: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __sub__(self: Self, value: Any) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __truediv__(self: Self, value: Any) -> Any: ...
    def __xor__(self: Self, value: Any) -> Any: ...
    def angle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isEquivalent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isParallel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kOneVector: MFloatVector = ...
    kTolerance: float = ...
    kXaxisVector: MFloatVector = ...
    kXnegAxisVector: MFloatVector = ...
    kYaxisVector: MFloatVector = ...
    kYnegAxisVector: MFloatVector = ...
    kZaxisVector: MFloatVector = ...
    kZeroVector: MFloatVector = ...
    kZnegAxisVector: MFloatVector = ...
    def length(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def normal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def normalize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def transformAsNormal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def x(*args: Any, **kwargs: Any) -> Any: ...
    @x.setter
    def x(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def y(*args: Any, **kwargs: Any) -> Any: ...
    @y.setter
    def y(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def z(*args: Any, **kwargs: Any) -> Any: ...
    @z.setter
    def z(*args: Any, **kwargs: Any) -> Any: ...

class MFloatVectorArray(object):
    def __add__(self: Self, value: Any) -> Any: ...
    def __contains__(self: Self, key: Any) -> Any: ...
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __delitem__(self: Self, key: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __getitem__(self: Self, key: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __iadd__(self: Self, value: Any) -> Any: ...
    def __imul__(self: Self, value: Any) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __len__(self: Self) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __mul__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __rmul__(self: Self, value: Any) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __setitem__(self: Self, key: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def append(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def sizeIncrement(*args: Any, **kwargs: Any) -> Any: ...
    @sizeIncrement.setter
    def sizeIncrement(*args: Any, **kwargs: Any) -> Any: ...

class MFn(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAISEnvFacade: int = ...
    kAddDoubleLinear: int = ...
    kAdskMaterial: int = ...
    kAffect: int = ...
    kAimConstraint: int = ...
    kAimMatrix: int = ...
    kAir: int = ...
    kAlignCurve: int = ...
    kAlignManip: int = ...
    kAlignSurface: int = ...
    kAmbientLight: int = ...
    kAngle: int = ...
    kAngleBetween: int = ...
    kAnimBlend: int = ...
    kAnimBlendInOut: int = ...
    kAnimCurve: int = ...
    kAnimCurveTimeToAngular: int = ...
    kAnimCurveTimeToDistance: int = ...
    kAnimCurveTimeToTime: int = ...
    kAnimCurveTimeToUnitless: int = ...
    kAnimCurveUnitlessToAngular: int = ...
    kAnimCurveUnitlessToDistance: int = ...
    kAnimCurveUnitlessToTime: int = ...
    kAnimCurveUnitlessToUnitless: int = ...
    kAnimLayer: int = ...
    kAnisotropy: int = ...
    kAnnotation: int = ...
    kAnyGeometryVarGroup: int = ...
    kArcLength: int = ...
    kAreaLight: int = ...
    kArrayMapper: int = ...
    kArrowManip: int = ...
    kArubaTesselate: int = ...
    kAssembly: int = ...
    kAsset: int = ...
    kAttachCurve: int = ...
    kAttachSurface: int = ...
    kAttribute: int = ...
    kAttribute2Double: int = ...
    kAttribute2Float: int = ...
    kAttribute2Int: int = ...
    kAttribute2Short: int = ...
    kAttribute3Double: int = ...
    kAttribute3Float: int = ...
    kAttribute3Int: int = ...
    kAttribute3Short: int = ...
    kAttribute4Double: int = ...
    kAudio: int = ...
    kAverageCurveManip: int = ...
    kAvgCurves: int = ...
    kAvgNurbsSurfacePoints: int = ...
    kAvgSurfacePoints: int = ...
    kAxesActionManip: int = ...
    kBackground: int = ...
    kBallProjectionManip: int = ...
    kBarnDoorManip: int = ...
    kBase: int = ...
    kBaseLattice: int = ...
    kBendLattice: int = ...
    kBevel: int = ...
    kBevelManip: int = ...
    kBevelPlus: int = ...
    kBezierCurve: int = ...
    kBezierCurveData: int = ...
    kBezierCurveToNurbs: int = ...
    kBinaryData: int = ...
    kBirailSrf: int = ...
    kBlend: int = ...
    kBlendColorSet: int = ...
    kBlendColors: int = ...
    kBlendDevice: int = ...
    kBlendFalloff: int = ...
    kBlendManip: int = ...
    kBlendMatrix: int = ...
    kBlendNodeAdditiveRotation: int = ...
    kBlendNodeAdditiveScale: int = ...
    kBlendNodeBase: int = ...
    kBlendNodeBoolean: int = ...
    kBlendNodeDouble: int = ...
    kBlendNodeDoubleAngle: int = ...
    kBlendNodeDoubleLinear: int = ...
    kBlendNodeEnum: int = ...
    kBlendNodeFloat: int = ...
    kBlendNodeFloatAngle: int = ...
    kBlendNodeFloatLinear: int = ...
    kBlendNodeInt16: int = ...
    kBlendNodeInt32: int = ...
    kBlendNodeTime: int = ...
    kBlendShape: int = ...
    kBlendTwoAttr: int = ...
    kBlendWeighted: int = ...
    kBlindData: int = ...
    kBlindDataTemplate: int = ...
    kBlinn: int = ...
    kBlinnMaterial: int = ...
    kBoundary: int = ...
    kBox: int = ...
    kBoxData: int = ...
    kBrownian: int = ...
    kBrush: int = ...
    kBulge: int = ...
    kBulgeLattice: int = ...
    kBump: int = ...
    kBump3d: int = ...
    kButtonManip: int = ...
    kCacheBase: int = ...
    kCacheBlend: int = ...
    kCacheFile: int = ...
    kCacheTrack: int = ...
    kCacheableNode: int = ...
    kCaddyManipBase: int = ...
    kCamera: int = ...
    kCameraManip: int = ...
    kCameraPlaneManip: int = ...
    kCameraSet: int = ...
    kCameraView: int = ...
    kCenterManip: int = ...
    kChainToSpline: int = ...
    kCharacter: int = ...
    kCharacterMap: int = ...
    kCharacterMappingData: int = ...
    kCharacterOffset: int = ...
    kChecker: int = ...
    kChoice: int = ...
    kChooser: int = ...
    kCircle: int = ...
    kCircleManip: int = ...
    kCirclePointManip: int = ...
    kCircleSweepManip: int = ...
    kClampColor: int = ...
    kClientDevice: int = ...
    kClip: int = ...
    kClipGhostShape: int = ...
    kClipLibrary: int = ...
    kClipScheduler: int = ...
    kClipToGhostData: int = ...
    kCloseCurve: int = ...
    kCloseSurface: int = ...
    kClosestPointOnMesh: int = ...
    kClosestPointOnSurface: int = ...
    kCloth: int = ...
    kCloud: int = ...
    kCluster: int = ...
    kClusterFilter: int = ...
    kClusterFlexor: int = ...
    kCoiManip: int = ...
    kCollision: int = ...
    kColorBackground: int = ...
    kColorMgtGlobals: int = ...
    kColorProfile: int = ...
    kCombinationShape: int = ...
    kCommCornerManip: int = ...
    kCommCornerOperManip: int = ...
    kCommEdgeOperManip: int = ...
    kCommEdgePtManip: int = ...
    kCommEdgeSegmentManip: int = ...
    kComponent: int = ...
    kComponentFalloff: int = ...
    kComponentListData: int = ...
    kComponentManip: int = ...
    kComponentMatch: int = ...
    kComposeMatrix: int = ...
    kCompoundAttribute: int = ...
    kConcentricProjectionManip: int = ...
    kCondition: int = ...
    kCone: int = ...
    kConstraint: int = ...
    kContainer: int = ...
    kContainerBase: int = ...
    kContourProjectionManip: int = ...
    kContrast: int = ...
    kControl: int = ...
    kControllerTag: int = ...
    kCopyColorSet: int = ...
    kCopyUVSet: int = ...
    kCpManip: int = ...
    kCrater: int = ...
    kCreaseSet: int = ...
    kCreate: int = ...
    kCreateBPManip: int = ...
    kCreateBezierManip: int = ...
    kCreateCVManip: int = ...
    kCreateColorSet: int = ...
    kCreateEPManip: int = ...
    kCreateSectionManip: int = ...
    kCreateUVSet: int = ...
    kCrossSectionEditManip: int = ...
    kCrossSectionManager: int = ...
    kCubicProjectionManip: int = ...
    kCurve: int = ...
    kCurveCVComponent: int = ...
    kCurveCurveIntersect: int = ...
    kCurveEPComponent: int = ...
    kCurveEdManip: int = ...
    kCurveFromMeshCoM: int = ...
    kCurveFromMeshEdge: int = ...
    kCurveFromSubdivEdge: int = ...
    kCurveFromSubdivFace: int = ...
    kCurveFromSurface: int = ...
    kCurveFromSurfaceBnd: int = ...
    kCurveFromSurfaceCoS: int = ...
    kCurveFromSurfaceIso: int = ...
    kCurveInfo: int = ...
    kCurveKnotComponent: int = ...
    kCurveNormalizerAngle: int = ...
    kCurveNormalizerLinear: int = ...
    kCurveParamComponent: int = ...
    kCurveSegmentManip: int = ...
    kCurveVarGroup: int = ...
    kCustomEvaluatorClusterNode: int = ...
    kCylinder: int = ...
    kCylindricalProjectionManip: int = ...
    kDOF: int = ...
    kDPbirailSrf: int = ...
    kDagContainer: int = ...
    kDagNode: int = ...
    kDagPose: int = ...
    kDagSelectionItem: int = ...
    kData: int = ...
    kData2Double: int = ...
    kData2Float: int = ...
    kData2Int: int = ...
    kData2Short: int = ...
    kData3Double: int = ...
    kData3Float: int = ...
    kData3Int: int = ...
    kData3Short: int = ...
    kData4Double: int = ...
    kDblTrsManip: int = ...
    kDecayRegionCapComponent: int = ...
    kDecayRegionComponent: int = ...
    kDecomposeMatrix: int = ...
    kDefaultLightList: int = ...
    kDeformBend: int = ...
    kDeformBendManip: int = ...
    kDeformFlare: int = ...
    kDeformFlareManip: int = ...
    kDeformFunc: int = ...
    kDeformSine: int = ...
    kDeformSineManip: int = ...
    kDeformSquash: int = ...
    kDeformSquashManip: int = ...
    kDeformTwist: int = ...
    kDeformTwistManip: int = ...
    kDeformWave: int = ...
    kDeformWaveManip: int = ...
    kDeleteColorSet: int = ...
    kDeleteComponent: int = ...
    kDeleteUVSet: int = ...
    kDeltaMush: int = ...
    kDependencyNode: int = ...
    kDetachCurve: int = ...
    kDetachSurface: int = ...
    kDiffuseMaterial: int = ...
    kDimension: int = ...
    kDimensionManip: int = ...
    kDirectedDisc: int = ...
    kDirectionManip: int = ...
    kDirectionalLight: int = ...
    kDiscManip: int = ...
    kDiskCache: int = ...
    kDispatchCompute: int = ...
    kDisplacementShader: int = ...
    kDisplayLayer: int = ...
    kDisplayLayerManager: int = ...
    kDistance: int = ...
    kDistanceBetween: int = ...
    kDistanceManip: int = ...
    kDofManip: int = ...
    kDoubleAngleAttribute: int = ...
    kDoubleArrayData: int = ...
    kDoubleIndexedComponent: int = ...
    kDoubleLinearAttribute: int = ...
    kDoubleShadingSwitch: int = ...
    kDrag: int = ...
    kDropOffFunction: int = ...
    kDropoffLocator: int = ...
    kDropoffManip: int = ...
    kDummy: int = ...
    kDummyConnectable: int = ...
    kDynAirManip: int = ...
    kDynArrayAttrsData: int = ...
    kDynAttenuationManip: int = ...
    kDynBase: int = ...
    kDynBaseFieldManip: int = ...
    kDynEmitterManip: int = ...
    kDynFieldsManip: int = ...
    kDynGlobals: int = ...
    kDynNewtonManip: int = ...
    kDynParticleSetComponent: int = ...
    kDynSpreadManip: int = ...
    kDynSweptGeometryData: int = ...
    kDynTurbulenceManip: int = ...
    kDynamicConstraint: int = ...
    kDynamicsController: int = ...
    kEdgeComponent: int = ...
    kEditCurve: int = ...
    kEditCurveManip: int = ...
    kEditMetadata: int = ...
    kEditsManager: int = ...
    kEmitter: int = ...
    kEnableManip: int = ...
    kEnumAttribute: int = ...
    kEnvBall: int = ...
    kEnvChrome: int = ...
    kEnvCube: int = ...
    kEnvFacade: int = ...
    kEnvFogMaterial: int = ...
    kEnvFogShape: int = ...
    kEnvSky: int = ...
    kEnvSphere: int = ...
    kExplodeNurbsShell: int = ...
    kExpression: int = ...
    kExtendCurve: int = ...
    kExtendCurveDistanceManip: int = ...
    kExtendSurface: int = ...
    kExtendSurfaceDistanceManip: int = ...
    kExtract: int = ...
    kExtrude: int = ...
    kExtrudeManip: int = ...
    kFFD: int = ...
    kFFblendSrf: int = ...
    kFFfilletSrf: int = ...
    kFacade: int = ...
    kFalloffEval: int = ...
    kFfdDualBase: int = ...
    kField: int = ...
    kFileBackground: int = ...
    kFileTexture: int = ...
    kFilletCurve: int = ...
    kFilter: int = ...
    kFilterClosestSample: int = ...
    kFilterEuler: int = ...
    kFilterSimplify: int = ...
    kFitBspline: int = ...
    kFixedLineManip: int = ...
    kFlexor: int = ...
    kFloatAngleAttribute: int = ...
    kFloatArrayData: int = ...
    kFloatLinearAttribute: int = ...
    kFloatMatrixAttribute: int = ...
    kFloatVectorArrayData: int = ...
    kFlow: int = ...
    kFluid: int = ...
    kFluidData: int = ...
    kFluidEmitter: int = ...
    kFluidGeom: int = ...
    kFluidTexture2D: int = ...
    kFluidTexture3D: int = ...
    kFollicle: int = ...
    kForceUpdateManip: int = ...
    kFosterParent: int = ...
    kFourByFourMatrix: int = ...
    kFractal: int = ...
    kFreePointManip: int = ...
    kFreePointTriadManip: int = ...
    kGammaCorrect: int = ...
    kGenericAttribute: int = ...
    kGeoConnectable: int = ...
    kGeoConnector: int = ...
    kGeomBind: int = ...
    kGeometric: int = ...
    kGeometryConstraint: int = ...
    kGeometryData: int = ...
    kGeometryFilt: int = ...
    kGeometryOnLineManip: int = ...
    kGeometryVarGroup: int = ...
    kGlobalCacheControls: int = ...
    kGlobalStitch: int = ...
    kGranite: int = ...
    kGravity: int = ...
    kGreasePencilSequence: int = ...
    kGreasePlane: int = ...
    kGreasePlaneRenderShape: int = ...
    kGrid: int = ...
    kGroundPlane: int = ...
    kGroupId: int = ...
    kGroupParts: int = ...
    kGuide: int = ...
    kGuideLine: int = ...
    kHairConstraint: int = ...
    kHairSystem: int = ...
    kHairTubeShader: int = ...
    kHandleRotateManip: int = ...
    kHardenPointCurve: int = ...
    kHardwareReflectionMap: int = ...
    kHardwareRenderGlobals: int = ...
    kHardwareRenderingGlobals: int = ...
    kHeightField: int = ...
    kHikEffector: int = ...
    kHikFKJoint: int = ...
    kHikFloorContactMarker: int = ...
    kHikGroundPlane: int = ...
    kHikHandle: int = ...
    kHikIKEffector: int = ...
    kHikSolver: int = ...
    kHistorySwitch: int = ...
    kHsvToRgb: int = ...
    kHwShaderNode: int = ...
    kHyperGraphInfo: int = ...
    kHyperLayout: int = ...
    kHyperLayoutDG: int = ...
    kHyperView: int = ...
    kIkEffector: int = ...
    kIkHandle: int = ...
    kIkRPManip: int = ...
    kIkSolver: int = ...
    kIkSplineManip: int = ...
    kIkSystem: int = ...
    kIllustratorCurve: int = ...
    kImageAdd: int = ...
    kImageBlur: int = ...
    kImageColorCorrect: int = ...
    kImageData: int = ...
    kImageDepth: int = ...
    kImageDiff: int = ...
    kImageDisplay: int = ...
    kImageFilter: int = ...
    kImageLoad: int = ...
    kImageMotionBlur: int = ...
    kImageMultiply: int = ...
    kImageNetDest: int = ...
    kImageNetSrc: int = ...
    kImageOver: int = ...
    kImagePlane: int = ...
    kImageRender: int = ...
    kImageSave: int = ...
    kImageSource: int = ...
    kImageUnder: int = ...
    kImageView: int = ...
    kImplicitCone: int = ...
    kImplicitSphere: int = ...
    kInsertKnotCrv: int = ...
    kInsertKnotSrf: int = ...
    kInstancer: int = ...
    kInt64ArrayData: int = ...
    kIntArrayData: int = ...
    kIntersectSurface: int = ...
    kInvalid: int = ...
    kIsoparmComponent: int = ...
    kIsoparmManip: int = ...
    kItemList: int = ...
    kJiggleDeformer: int = ...
    kJoint: int = ...
    kJointCluster: int = ...
    kJointClusterManip: int = ...
    kJointTranslateManip: int = ...
    kKeyframeDelta: int = ...
    kKeyframeDeltaAddRemove: int = ...
    kKeyframeDeltaBlockAddRemove: int = ...
    kKeyframeDeltaBreakdown: int = ...
    kKeyframeDeltaInfType: int = ...
    kKeyframeDeltaMove: int = ...
    kKeyframeDeltaScale: int = ...
    kKeyframeDeltaTangent: int = ...
    kKeyframeDeltaWeighted: int = ...
    kKeyframeRegionManip: int = ...
    kKeyingGroup: int = ...
    kLambert: int = ...
    kLambertMaterial: int = ...
    kLattice: int = ...
    kLatticeComponent: int = ...
    kLatticeData: int = ...
    kLatticeGeom: int = ...
    kLayeredShader: int = ...
    kLayeredTexture: int = ...
    kLeastSquares: int = ...
    kLeather: int = ...
    kLight: int = ...
    kLightDataAttribute: int = ...
    kLightFogMaterial: int = ...
    kLightInfo: int = ...
    kLightLink: int = ...
    kLightList: int = ...
    kLightManip: int = ...
    kLightProjectionGeometry: int = ...
    kLightSource: int = ...
    kLightSourceMaterial: int = ...
    kLimitManip: int = ...
    kLineArrowManip: int = ...
    kLineManip: int = ...
    kLineModifier: int = ...
    kLinearLight: int = ...
    kLocator: int = ...
    kLodGroup: int = ...
    kLodThresholds: int = ...
    kLookAt: int = ...
    kLuminance: int = ...
    kMCsolver: int = ...
    kMPbirailSrf: int = ...
    kMakeGroup: int = ...
    kMandelbrot: int = ...
    kMandelbrot3D: int = ...
    kManip2DContainer: int = ...
    kManipContainer: int = ...
    kManipulator: int = ...
    kManipulator2D: int = ...
    kManipulator3D: int = ...
    kMarble: int = ...
    kMarker: int = ...
    kMarkerManip: int = ...
    kMaterial: int = ...
    kMaterialFacade: int = ...
    kMaterialInfo: int = ...
    kMaterialTemplate: int = ...
    kMatrixAdd: int = ...
    kMatrixArrayData: int = ...
    kMatrixAttribute: int = ...
    kMatrixData: int = ...
    kMatrixFloatData: int = ...
    kMatrixHold: int = ...
    kMatrixMult: int = ...
    kMatrixPass: int = ...
    kMatrixWtAdd: int = ...
    kMembrane: int = ...
    kMentalRayTexture: int = ...
    kMergeVertsToolManip: int = ...
    kMesh: int = ...
    kMeshComponent: int = ...
    kMeshData: int = ...
    kMeshEdgeComponent: int = ...
    kMeshFaceVertComponent: int = ...
    kMeshFrEdgeComponent: int = ...
    kMeshGeom: int = ...
    kMeshMapComponent: int = ...
    kMeshPolygonComponent: int = ...
    kMeshVarGroup: int = ...
    kMeshVertComponent: int = ...
    kMeshVtxFaceComponent: int = ...
    kMessageAttribute: int = ...
    kMidModifier: int = ...
    kMidModifierWithMatrix: int = ...
    kModel: int = ...
    kModifyEdgeBaseManip: int = ...
    kModifyEdgeCrvManip: int = ...
    kModifyEdgeManip: int = ...
    kMorph: int = ...
    kMotionPath: int = ...
    kMotionPathManip: int = ...
    kMountain: int = ...
    kMoveUVShellManip2D: int = ...
    kMoveVertexManip: int = ...
    kMultDoubleLinear: int = ...
    kMultiSubVertexComponent: int = ...
    kMultilisterLight: int = ...
    kMultiplyDivide: int = ...
    kMute: int = ...
    kNBase: int = ...
    kNCloth: int = ...
    kNComponent: int = ...
    kNId: int = ...
    kNIdData: int = ...
    kNLE: int = ...
    kNObject: int = ...
    kNObjectData: int = ...
    kNParticle: int = ...
    kNRigid: int = ...
    kNamedObject: int = ...
    kNearestPointOnCurve: int = ...
    kNewton: int = ...
    kNodeGraphEditorBookmarkInfo: int = ...
    kNodeGraphEditorBookmarks: int = ...
    kNodeGraphEditorInfo: int = ...
    kNoise: int = ...
    kNonAmbientLight: int = ...
    kNonDagSelectionItem: int = ...
    kNonExtendedLight: int = ...
    kNonLinear: int = ...
    kNormalConstraint: int = ...
    kNucleus: int = ...
    kNumericAttribute: int = ...
    kNumericData: int = ...
    kNurbsBoolean: int = ...
    kNurbsCircular2PtArc: int = ...
    kNurbsCircular3PtArc: int = ...
    kNurbsCube: int = ...
    kNurbsCurve: int = ...
    kNurbsCurveData: int = ...
    kNurbsCurveGeom: int = ...
    kNurbsCurveToBezier: int = ...
    kNurbsPlane: int = ...
    kNurbsSquare: int = ...
    kNurbsSurface: int = ...
    kNurbsSurfaceData: int = ...
    kNurbsSurfaceGeom: int = ...
    kNurbsTesselate: int = ...
    kNurbsToSubdiv: int = ...
    kObjectAttrFilter: int = ...
    kObjectBinFilter: int = ...
    kObjectFilter: int = ...
    kObjectMultiFilter: int = ...
    kObjectNameFilter: int = ...
    kObjectRenderFilter: int = ...
    kObjectScriptFilter: int = ...
    kObjectTypeFilter: int = ...
    kOcean: int = ...
    kOceanDeformer: int = ...
    kOceanShader: int = ...
    kOffsetCos: int = ...
    kOffsetCosManip: int = ...
    kOffsetCurve: int = ...
    kOffsetCurveManip: int = ...
    kOffsetSurface: int = ...
    kOffsetSurfaceManip: int = ...
    kOldGeometryConstraint: int = ...
    kOpticalFX: int = ...
    kOrientConstraint: int = ...
    kOrientationComponent: int = ...
    kOrientationLocator: int = ...
    kOrientationMarker: int = ...
    kOrthoGrid: int = ...
    kPASolver: int = ...
    kPairBlend: int = ...
    kParamDimension: int = ...
    kParentConstraint: int = ...
    kParticle: int = ...
    kParticleAgeMapper: int = ...
    kParticleCloud: int = ...
    kParticleColorMapper: int = ...
    kParticleIncandecenceMapper: int = ...
    kParticleSamplerInfo: int = ...
    kParticleTransparencyMapper: int = ...
    kPartition: int = ...
    kPassContributionMap: int = ...
    kPfxGeometry: int = ...
    kPfxHair: int = ...
    kPfxToon: int = ...
    kPhong: int = ...
    kPhongExplorer: int = ...
    kPhongMaterial: int = ...
    kPickMatrix: int = ...
    kPivotComponent: int = ...
    kPivotManip2D: int = ...
    kPlace2dTexture: int = ...
    kPlace3dTexture: int = ...
    kPlanarProjectionManip: int = ...
    kPlanarTrimSrf: int = ...
    kPlane: int = ...
    kPlugin: int = ...
    kPluginBlendShape: int = ...
    kPluginCameraSet: int = ...
    kPluginClientDevice: int = ...
    kPluginConstraintNode: int = ...
    kPluginData: int = ...
    kPluginDeformerNode: int = ...
    kPluginDependNode: int = ...
    kPluginEmitterNode: int = ...
    kPluginFieldNode: int = ...
    kPluginGeometryData: int = ...
    kPluginGeometryFilter: int = ...
    kPluginHardwareShader: int = ...
    kPluginHwShaderNode: int = ...
    kPluginIkSolver: int = ...
    kPluginImagePlaneNode: int = ...
    kPluginLocatorNode: int = ...
    kPluginManipContainer: int = ...
    kPluginManipulatorNode: int = ...
    kPluginMotionPathNode: int = ...
    kPluginObjectSet: int = ...
    kPluginParticleAttributeMapperNode: int = ...
    kPluginShape: int = ...
    kPluginSkinCluster: int = ...
    kPluginSpringNode: int = ...
    kPluginThreadedDevice: int = ...
    kPluginTransformNode: int = ...
    kPlusMinusAverage: int = ...
    kPointArrayData: int = ...
    kPointConstraint: int = ...
    kPointLight: int = ...
    kPointManip: int = ...
    kPointMatrixMult: int = ...
    kPointOnCurveInfo: int = ...
    kPointOnCurveManip: int = ...
    kPointOnLineManip: int = ...
    kPointOnPolyConstraint: int = ...
    kPointOnSurfaceInfo: int = ...
    kPointOnSurfaceManip: int = ...
    kPoleVectorConstraint: int = ...
    kPolyAppend: int = ...
    kPolyAppendVertex: int = ...
    kPolyArrow: int = ...
    kPolyAutoProj: int = ...
    kPolyAutoProjManip: int = ...
    kPolyAverageVertex: int = ...
    kPolyBevel: int = ...
    kPolyBevel2: int = ...
    kPolyBevel3: int = ...
    kPolyBlindData: int = ...
    kPolyBoolOp: int = ...
    kPolyBridgeEdge: int = ...
    kPolyCBoolOp: int = ...
    kPolyCaddyManip: int = ...
    kPolyChipOff: int = ...
    kPolyCircularize: int = ...
    kPolyClean: int = ...
    kPolyCloseBorder: int = ...
    kPolyCollapseEdge: int = ...
    kPolyCollapseF: int = ...
    kPolyColorDel: int = ...
    kPolyColorMod: int = ...
    kPolyColorPerVertex: int = ...
    kPolyComponentData: int = ...
    kPolyCone: int = ...
    kPolyConnectComponents: int = ...
    kPolyContourProj: int = ...
    kPolyCreaseEdge: int = ...
    kPolyCreateFacet: int = ...
    kPolyCreateToolManip: int = ...
    kPolyCreator: int = ...
    kPolyCube: int = ...
    kPolyCut: int = ...
    kPolyCutManip: int = ...
    kPolyCutManipContainer: int = ...
    kPolyCylProj: int = ...
    kPolyCylinder: int = ...
    kPolyDelEdge: int = ...
    kPolyDelFacet: int = ...
    kPolyDelVertex: int = ...
    kPolyDuplicateEdge: int = ...
    kPolyEdgeToCurve: int = ...
    kPolyEditEdgeFlow: int = ...
    kPolyExtrudeEdge: int = ...
    kPolyExtrudeFacet: int = ...
    kPolyExtrudeManip: int = ...
    kPolyExtrudeManipContainer: int = ...
    kPolyExtrudeVertex: int = ...
    kPolyFlipEdge: int = ...
    kPolyFlipUV: int = ...
    kPolyHelix: int = ...
    kPolyHoleFace: int = ...
    kPolyLayoutUV: int = ...
    kPolyMapCut: int = ...
    kPolyMapDel: int = ...
    kPolyMapSew: int = ...
    kPolyMapSewMove: int = ...
    kPolyMappingManip: int = ...
    kPolyMergeEdge: int = ...
    kPolyMergeFacet: int = ...
    kPolyMergeUV: int = ...
    kPolyMergeVert: int = ...
    kPolyMesh: int = ...
    kPolyMirror: int = ...
    kPolyMirrorManipContainer: int = ...
    kPolyModifierManip: int = ...
    kPolyModifierManipContainer: int = ...
    kPolyMoveEdge: int = ...
    kPolyMoveFacet: int = ...
    kPolyMoveFacetUV: int = ...
    kPolyMoveUV: int = ...
    kPolyMoveUVManip: int = ...
    kPolyMoveVertex: int = ...
    kPolyMoveVertexManip: int = ...
    kPolyMoveVertexUV: int = ...
    kPolyNormal: int = ...
    kPolyNormalPerVertex: int = ...
    kPolyNormalizeUV: int = ...
    kPolyPassThru: int = ...
    kPolyPinUV: int = ...
    kPolyPipe: int = ...
    kPolyPlanProj: int = ...
    kPolyPlatonicSolid: int = ...
    kPolyPoke: int = ...
    kPolyPokeManip: int = ...
    kPolyPrimitive: int = ...
    kPolyPrimitiveMisc: int = ...
    kPolyPrism: int = ...
    kPolyProj: int = ...
    kPolyProjectCurve: int = ...
    kPolyProjectionManip: int = ...
    kPolyPyramid: int = ...
    kPolyQuad: int = ...
    kPolyReduce: int = ...
    kPolyRemesh: int = ...
    kPolySelectEditFeedbackManip: int = ...
    kPolySeparate: int = ...
    kPolySewEdge: int = ...
    kPolySmooth: int = ...
    kPolySmoothFacet: int = ...
    kPolySmoothProxy: int = ...
    kPolySoftEdge: int = ...
    kPolySphProj: int = ...
    kPolySphere: int = ...
    kPolySpinEdge: int = ...
    kPolySplit: int = ...
    kPolySplitEdge: int = ...
    kPolySplitRing: int = ...
    kPolySplitToolManip: int = ...
    kPolySplitVert: int = ...
    kPolyStraightenUVBorder: int = ...
    kPolySubdEdge: int = ...
    kPolySubdFacet: int = ...
    kPolyToSubdiv: int = ...
    kPolyToolFeedbackManip: int = ...
    kPolyToolFeedbackShape: int = ...
    kPolyTorus: int = ...
    kPolyTransfer: int = ...
    kPolyTriangulate: int = ...
    kPolyTweak: int = ...
    kPolyTweakUV: int = ...
    kPolyUVRectangle: int = ...
    kPolyUnite: int = ...
    kPolyVertexNormalManip: int = ...
    kPolyWedgeFace: int = ...
    kPoseInterpolatorManager: int = ...
    kPositionMarker: int = ...
    kPostProcessList: int = ...
    kPrecompExport: int = ...
    kPrimitive: int = ...
    kPrimitiveFalloff: int = ...
    kProjectCurve: int = ...
    kProjectTangent: int = ...
    kProjectTangentManip: int = ...
    kProjection: int = ...
    kProjectionManip: int = ...
    kProjectionMultiManip: int = ...
    kProjectionUVManip: int = ...
    kPropModManip: int = ...
    kPropMoveTriadManip: int = ...
    kProximityFalloff: int = ...
    kProximityPin: int = ...
    kProximityWrap: int = ...
    kProxy: int = ...
    kProxyManager: int = ...
    kPsdFileTexture: int = ...
    kQuadPtOnLineManip: int = ...
    kQuadShadingSwitch: int = ...
    kRBFsurface: int = ...
    kRPsolver: int = ...
    kRadial: int = ...
    kRadius: int = ...
    kRamp: int = ...
    kRampBackground: int = ...
    kRampShader: int = ...
    kRbfSrfManip: int = ...
    kReForm: int = ...
    kRebuildCurve: int = ...
    kRebuildSurface: int = ...
    kRecord: int = ...
    kReference: int = ...
    kReflect: int = ...
    kRemapColor: int = ...
    kRemapHsv: int = ...
    kRemapValue: int = ...
    kRenderBox: int = ...
    kRenderCone: int = ...
    kRenderGlobals: int = ...
    kRenderGlobalsList: int = ...
    kRenderLayer: int = ...
    kRenderLayerManager: int = ...
    kRenderPass: int = ...
    kRenderPassSet: int = ...
    kRenderQuality: int = ...
    kRenderRect: int = ...
    kRenderSetup: int = ...
    kRenderSphere: int = ...
    kRenderTarget: int = ...
    kRenderUtilityList: int = ...
    kRenderedImageSource: int = ...
    kRenderingList: int = ...
    kReorderUVSet: int = ...
    kResolution: int = ...
    kResultCurve: int = ...
    kResultCurveTimeToAngular: int = ...
    kResultCurveTimeToDistance: int = ...
    kResultCurveTimeToTime: int = ...
    kResultCurveTimeToUnitless: int = ...
    kReverse: int = ...
    kReverseCrvManip: int = ...
    kReverseCurve: int = ...
    kReverseCurveManip: int = ...
    kReverseSurface: int = ...
    kReverseSurfaceManip: int = ...
    kRevolve: int = ...
    kRevolveManip: int = ...
    kRevolvedPrimitive: int = ...
    kRevolvedPrimitiveManip: int = ...
    kRgbToHsv: int = ...
    kRigid: int = ...
    kRigidConstraint: int = ...
    kRigidDeform: int = ...
    kRigidSolver: int = ...
    kRock: int = ...
    kRotateBoxManip: int = ...
    kRotateLimitsManip: int = ...
    kRotateManip: int = ...
    kRotateUVManip2D: int = ...
    kRoundConstantRadius: int = ...
    kRoundConstantRadiusManip: int = ...
    kRoundRadiusCrvManip: int = ...
    kRoundRadiusManip: int = ...
    kSCsolver: int = ...
    kSPbirailSrf: int = ...
    kSamplerInfo: int = ...
    kScaleConstraint: int = ...
    kScaleLimitsManip: int = ...
    kScaleManip: int = ...
    kScalePointManip: int = ...
    kScaleUVManip2D: int = ...
    kScalingBoxManip: int = ...
    kScreenAlignedCircleManip: int = ...
    kScript: int = ...
    kScriptManip: int = ...
    kSculpt: int = ...
    kSectionManip: int = ...
    kSelectionItem: int = ...
    kSelectionList: int = ...
    kSelectionListData: int = ...
    kSelectionListOperator: int = ...
    kSequenceManager: int = ...
    kSequencer: int = ...
    kSet: int = ...
    kSetGroupComponent: int = ...
    kSetRange: int = ...
    kSfRevolveManip: int = ...
    kShaderGlow: int = ...
    kShaderList: int = ...
    kShadingEngine: int = ...
    kShadingMap: int = ...
    kShape: int = ...
    kShapeEditorManager: int = ...
    kShapeFragment: int = ...
    kShot: int = ...
    kShrinkWrapFilter: int = ...
    kSimpleVolumeShader: int = ...
    kSingleIndexedComponent: int = ...
    kSingleShadingSwitch: int = ...
    kSketchPlane: int = ...
    kSkin: int = ...
    kSkinBinding: int = ...
    kSkinClusterFilter: int = ...
    kSkinShader: int = ...
    kSl60: int = ...
    kSmear: int = ...
    kSmoothCurve: int = ...
    kSmoothTangentSrf: int = ...
    kSnapUVManip2D: int = ...
    kSnapshot: int = ...
    kSnapshotPath: int = ...
    kSnapshotShape: int = ...
    kSnow: int = ...
    kSoftMod: int = ...
    kSoftModFilter: int = ...
    kSoftModManip: int = ...
    kSolidFractal: int = ...
    kSolidify: int = ...
    kSphere: int = ...
    kSphereData: int = ...
    kSphericalProjectionManip: int = ...
    kSplineSolver: int = ...
    kSpotCylinderManip: int = ...
    kSpotLight: int = ...
    kSpotManip: int = ...
    kSpring: int = ...
    kSprite: int = ...
    kSquareSrf: int = ...
    kSquareSrfManip: int = ...
    kStandardSurface: int = ...
    kStateManip: int = ...
    kStencil: int = ...
    kStereoCameraMaster: int = ...
    kStitchAsNurbsShell: int = ...
    kStitchSrf: int = ...
    kStitchSrfManip: int = ...
    kStoryBoard: int = ...
    kStringArrayData: int = ...
    kStringData: int = ...
    kStringShadingSwitch: int = ...
    kStroke: int = ...
    kStrokeGlobals: int = ...
    kStucco: int = ...
    kStudioClearCoat: int = ...
    kStyleCurve: int = ...
    kSubCurve: int = ...
    kSubSurface: int = ...
    kSubVertexComponent: int = ...
    kSubdAddTopology: int = ...
    kSubdAutoProj: int = ...
    kSubdBlindData: int = ...
    kSubdBoolean: int = ...
    kSubdCleanTopology: int = ...
    kSubdCloseBorder: int = ...
    kSubdDelFace: int = ...
    kSubdExtrudeFace: int = ...
    kSubdHierBlind: int = ...
    kSubdLayoutUV: int = ...
    kSubdMapCut: int = ...
    kSubdMapSewMove: int = ...
    kSubdMappingManip: int = ...
    kSubdMergeVert: int = ...
    kSubdModifier: int = ...
    kSubdModifyEdge: int = ...
    kSubdMoveEdge: int = ...
    kSubdMoveFace: int = ...
    kSubdMoveVertex: int = ...
    kSubdPlanProj: int = ...
    kSubdProjectionManip: int = ...
    kSubdSplitFace: int = ...
    kSubdSubdivideFace: int = ...
    kSubdTweak: int = ...
    kSubdTweakUV: int = ...
    kSubdiv: int = ...
    kSubdivCVComponent: int = ...
    kSubdivCollapse: int = ...
    kSubdivCompId: int = ...
    kSubdivData: int = ...
    kSubdivEdgeComponent: int = ...
    kSubdivFaceComponent: int = ...
    kSubdivGeom: int = ...
    kSubdivMapComponent: int = ...
    kSubdivReverseFaces: int = ...
    kSubdivSurfaceVarGroup: int = ...
    kSubdivToNurbs: int = ...
    kSubdivToPoly: int = ...
    kSubsetFalloff: int = ...
    kSummaryObject: int = ...
    kSuper: int = ...
    kSurface: int = ...
    kSurfaceCVComponent: int = ...
    kSurfaceEPComponent: int = ...
    kSurfaceEdManip: int = ...
    kSurfaceFaceComponent: int = ...
    kSurfaceInfo: int = ...
    kSurfaceKnotComponent: int = ...
    kSurfaceLuminance: int = ...
    kSurfaceRangeComponent: int = ...
    kSurfaceShader: int = ...
    kSurfaceVarGroup: int = ...
    kSymmetryConstraint: int = ...
    kSymmetryLocator: int = ...
    kSymmetryMapCurve: int = ...
    kSymmetryMapVector: int = ...
    kTangentConstraint: int = ...
    kTension: int = ...
    kTexLattice: int = ...
    kTexLatticeDeformManip: int = ...
    kTexSmoothManip: int = ...
    kTexSmudgeUVManip: int = ...
    kTextButtonManip: int = ...
    kTextCurves: int = ...
    kTextManip: int = ...
    kTexture2d: int = ...
    kTexture3d: int = ...
    kTextureBakeSet: int = ...
    kTextureDeformer: int = ...
    kTextureDeformerHandle: int = ...
    kTextureEnv: int = ...
    kTextureList: int = ...
    kTextureManip3D: int = ...
    kThreadedDevice: int = ...
    kThreePointArcManip: int = ...
    kTime: int = ...
    kTimeAttribute: int = ...
    kTimeEditor: int = ...
    kTimeEditorAnimSource: int = ...
    kTimeEditorClip: int = ...
    kTimeEditorClipBase: int = ...
    kTimeEditorClipEvaluator: int = ...
    kTimeEditorInterpolator: int = ...
    kTimeEditorTracks: int = ...
    kTimeFunction: int = ...
    kTimeToUnitConversion: int = ...
    kTimeWarp: int = ...
    kToggleManip: int = ...
    kToggleOnLineManip: int = ...
    kToolContext: int = ...
    kToonLineAttributes: int = ...
    kTorus: int = ...
    kTowPointManip: int = ...
    kTowPointOnCurveManip: int = ...
    kTowPointOnSurfaceManip: int = ...
    kTrackInfoManager: int = ...
    kTransferAttributes: int = ...
    kTransferFalloff: int = ...
    kTransform: int = ...
    kTransformBoxManip: int = ...
    kTransformGeometry: int = ...
    kTranslateBoxManip: int = ...
    kTranslateLimitsManip: int = ...
    kTranslateManip: int = ...
    kTranslateManip2D: int = ...
    kTranslateUVManip: int = ...
    kTranslateUVManip2D: int = ...
    kTriadManip: int = ...
    kTrim: int = ...
    kTrimLocator: int = ...
    kTrimManip: int = ...
    kTrimWithBoundaries: int = ...
    kTriplanarProjectionManip: int = ...
    kTripleIndexedComponent: int = ...
    kTripleShadingSwitch: int = ...
    kTrsInsertManip: int = ...
    kTrsManip: int = ...
    kTrsTransManip: int = ...
    kTrsXformManip: int = ...
    kTurbulence: int = ...
    kTweak: int = ...
    kTwoPointArcManip: int = ...
    kTxSl: int = ...
    kTypedAttribute: int = ...
    kUInt64ArrayData: int = ...
    kUVManip2D: int = ...
    kUVPin: int = ...
    kUfeProxyTransform: int = ...
    kUint64SingleIndexedComponent: int = ...
    kUintArrayData: int = ...
    kUnderWorld: int = ...
    kUniform: int = ...
    kUniformFalloff: int = ...
    kUnitAttribute: int = ...
    kUnitConversion: int = ...
    kUnitToTimeConversion: int = ...
    kUnknown: int = ...
    kUnknownDag: int = ...
    kUnknownTransform: int = ...
    kUntrim: int = ...
    kUnused1: int = ...
    kUnused2: int = ...
    kUnused3: int = ...
    kUnused4: int = ...
    kUnused5: int = ...
    kUnused6: int = ...
    kUseBackground: int = ...
    kUvChooser: int = ...
    kVectorArrayData: int = ...
    kVectorProduct: int = ...
    kVertexBakeSet: int = ...
    kVertexWeightSet: int = ...
    kViewColorManager: int = ...
    kViewManip: int = ...
    kVolumeAxis: int = ...
    kVolumeBindManip: int = ...
    kVolumeFog: int = ...
    kVolumeLight: int = ...
    kVolumeNoise: int = ...
    kVolumeShader: int = ...
    kVortex: int = ...
    kWater: int = ...
    kWeightFunctionData: int = ...
    kWeightGeometryFilt: int = ...
    kWire: int = ...
    kWood: int = ...
    kWorld: int = ...
    kWrapFilter: int = ...
    kWriteToColorBuffer: int = ...
    kWriteToDepthBuffer: int = ...
    kWriteToFrameBuffer: int = ...
    kWriteToLabelBuffer: int = ...
    kWriteToVectorBuffer: int = ...
    kXformManip: int = ...
    kXsectionSubdivEdit: int = ...

class MFnAttribute(MFnBase):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def accepts(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def acceptsAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addToCategory(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def affectsAppearance(*args: Any, **kwargs: Any) -> Any: ...
    @affectsAppearance.setter
    def affectsAppearance(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def affectsWorldSpace(*args: Any, **kwargs: Any) -> Any: ...
    @affectsWorldSpace.setter
    def affectsWorldSpace(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def array(*args: Any, **kwargs: Any) -> Any: ...
    @array.setter
    def array(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def cached(*args: Any, **kwargs: Any) -> Any: ...
    @cached.setter
    def cached(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def channelBox(*args: Any, **kwargs: Any) -> Any: ...
    @channelBox.setter
    def channelBox(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def connectable(*args: Any, **kwargs: Any) -> Any: ...
    @connectable.setter
    def connectable(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def disconnectBehavior(*args: Any, **kwargs: Any) -> Any: ...
    @disconnectBehavior.setter
    def disconnectBehavior(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def dynamic(*args: Any, **kwargs: Any) -> Any: ...
    @dynamic.setter
    def dynamic(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def extension(*args: Any, **kwargs: Any) -> Any: ...
    @extension.setter
    def extension(*args: Any, **kwargs: Any) -> Any: ...
    def getAddAttrCmd(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasCategory(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def hidden(*args: Any, **kwargs: Any) -> Any: ...
    @hidden.setter
    def hidden(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def indeterminant(*args: Any, **kwargs: Any) -> Any: ...
    @indeterminant.setter
    def indeterminant(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def indexMatters(*args: Any, **kwargs: Any) -> Any: ...
    @indexMatters.setter
    def indexMatters(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def internal(*args: Any, **kwargs: Any) -> Any: ...
    @internal.setter
    def internal(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isProxyAttribute(*args: Any, **kwargs: Any) -> Any: ...
    @isProxyAttribute.setter
    def isProxyAttribute(*args: Any, **kwargs: Any) -> Any: ...
    kDelete: int = ...
    kNothing: int = ...
    kReset: int = ...
    @property
    def keyable(*args: Any, **kwargs: Any) -> Any: ...
    @keyable.setter
    def keyable(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def name(*args: Any, **kwargs: Any) -> Any: ...
    @name.setter
    def name(*args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def parent(*args: Any, **kwargs: Any) -> Any: ...
    @parent.setter
    def parent(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def readable(*args: Any, **kwargs: Any) -> Any: ...
    @readable.setter
    def readable(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def renderSource(*args: Any, **kwargs: Any) -> Any: ...
    @renderSource.setter
    def renderSource(*args: Any, **kwargs: Any) -> Any: ...
    def setNiceNameOverride(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def shortName(*args: Any, **kwargs: Any) -> Any: ...
    @shortName.setter
    def shortName(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def storable(*args: Any, **kwargs: Any) -> Any: ...
    @storable.setter
    def storable(*args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def usedAsColor(*args: Any, **kwargs: Any) -> Any: ...
    @usedAsColor.setter
    def usedAsColor(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def usedAsFilename(*args: Any, **kwargs: Any) -> Any: ...
    @usedAsFilename.setter
    def usedAsFilename(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def usesArrayDataBuilder(*args: Any, **kwargs: Any) -> Any: ...
    @usesArrayDataBuilder.setter
    def usesArrayDataBuilder(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def worldSpace(*args: Any, **kwargs: Any) -> Any: ...
    @worldSpace.setter
    def worldSpace(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def writable(*args: Any, **kwargs: Any) -> Any: ...
    @writable.setter
    def writable(*args: Any, **kwargs: Any) -> Any: ...

class MFnBase(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFnCamera(MFnDagNode):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def aspectRatio(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def boundingBox(*args: Any, **kwargs: Any) -> Any: ...
    @boundingBox.setter
    def boundingBox(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def cameraScale(*args: Any, **kwargs: Any) -> Any: ...
    @cameraScale.setter
    def cameraScale(*args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def centerOfInterest(*args: Any, **kwargs: Any) -> Any: ...
    @centerOfInterest.setter
    def centerOfInterest(*args: Any, **kwargs: Any) -> Any: ...
    def centerOfInterestPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def childCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def computeDepthOfField(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copyViewFrom(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagRoot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def duplicate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def eyePoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def fStop(*args: Any, **kwargs: Any) -> Any: ...
    @fStop.setter
    def fStop(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def farClippingPlane(*args: Any, **kwargs: Any) -> Any: ...
    @farClippingPlane.setter
    def farClippingPlane(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def farFocusDistance(*args: Any, **kwargs: Any) -> Any: ...
    @farFocusDistance.setter
    def farFocusDistance(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def filmFit(*args: Any, **kwargs: Any) -> Any: ...
    @filmFit.setter
    def filmFit(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def filmFitOffset(*args: Any, **kwargs: Any) -> Any: ...
    @filmFitOffset.setter
    def filmFitOffset(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def filmRollOrder(*args: Any, **kwargs: Any) -> Any: ...
    @filmRollOrder.setter
    def filmRollOrder(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def filmRollValue(*args: Any, **kwargs: Any) -> Any: ...
    @filmRollValue.setter
    def filmRollValue(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def filmTranslateH(*args: Any, **kwargs: Any) -> Any: ...
    @filmTranslateH.setter
    def filmTranslateH(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def filmTranslateV(*args: Any, **kwargs: Any) -> Any: ...
    @filmTranslateV.setter
    def filmTranslateV(*args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def focalLength(*args: Any, **kwargs: Any) -> Any: ...
    @focalLength.setter
    def focalLength(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def focusDistance(*args: Any, **kwargs: Any) -> Any: ...
    @focusDistance.setter
    def focusDistance(*args: Any, **kwargs: Any) -> Any: ...
    def fullPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectingAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllPaths(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAspectRatioLimits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedSetsAndMembers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFilmApertureLimits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFilmFrustum(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFilmFrustumCorners(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFocalLengthLimits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPortFieldOfView(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getRenderingFrustum(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getViewParameters(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getViewingFrustum(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasParent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasSamePerspective(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def horizontalFieldOfView(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def horizontalFilmAperture(*args: Any, **kwargs: Any) -> Any: ...
    @horizontalFilmAperture.setter
    def horizontalFilmAperture(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def horizontalFilmOffset(*args: Any, **kwargs: Any) -> Any: ...
    @horizontalFilmOffset.setter
    def horizontalFilmOffset(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def horizontalPan(*args: Any, **kwargs: Any) -> Any: ...
    @horizontalPan.setter
    def horizontalPan(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def horizontalRollPivot(*args: Any, **kwargs: Any) -> Any: ...
    @horizontalRollPivot.setter
    def horizontalRollPivot(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def horizontalShake(*args: Any, **kwargs: Any) -> Any: ...
    @horizontalShake.setter
    def horizontalShake(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def inModel(*args: Any, **kwargs: Any) -> Any: ...
    @inModel.setter
    def inModel(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def inUnderWorld(*args: Any, **kwargs: Any) -> Any: ...
    @inUnderWorld.setter
    def inUnderWorld(*args: Any, **kwargs: Any) -> Any: ...
    def instanceCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isChildOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isClippingPlanes(*args: Any, **kwargs: Any) -> Any: ...
    @isClippingPlanes.setter
    def isClippingPlanes(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isDefaultNode(*args: Any, **kwargs: Any) -> Any: ...
    @isDefaultNode.setter
    def isDefaultNode(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isDepthOfField(*args: Any, **kwargs: Any) -> Any: ...
    @isDepthOfField.setter
    def isDepthOfField(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isDisplayFilmGate(*args: Any, **kwargs: Any) -> Any: ...
    @isDisplayFilmGate.setter
    def isDisplayFilmGate(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isDisplayGateMask(*args: Any, **kwargs: Any) -> Any: ...
    @isDisplayGateMask.setter
    def isDisplayGateMask(*args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isFromReferencedFile(*args: Any, **kwargs: Any) -> Any: ...
    @isFromReferencedFile.setter
    def isFromReferencedFile(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isInstanceable(*args: Any, **kwargs: Any) -> Any: ...
    @isInstanceable.setter
    def isInstanceable(*args: Any, **kwargs: Any) -> Any: ...
    def isInstanced(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstancedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isIntermediateObject(*args: Any, **kwargs: Any) -> Any: ...
    @isIntermediateObject.setter
    def isIntermediateObject(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isLocked(*args: Any, **kwargs: Any) -> Any: ...
    @isLocked.setter
    def isLocked(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isMotionBlur(*args: Any, **kwargs: Any) -> Any: ...
    @isMotionBlur.setter
    def isMotionBlur(*args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isOrtho(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isParentOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isShared(*args: Any, **kwargs: Any) -> Any: ...
    @isShared.setter
    def isShared(*args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isVerticalLock(*args: Any, **kwargs: Any) -> Any: ...
    @isVerticalLock.setter
    def isVerticalLock(*args: Any, **kwargs: Any) -> Any: ...
    kExtensionAttr: int = ...
    kFillFilmFit: int = ...
    kHorizontalFilmFit: int = ...
    kInvalid: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNextPos: int = ...
    kNormalAttr: int = ...
    kOverscanFilmFit: int = ...
    kRotateTranslate: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    kTranslateRotate: int = ...
    kVerticalFilmFit: int = ...
    @property
    def lensSqueezeRatio(*args: Any, **kwargs: Any) -> Any: ...
    @lensSqueezeRatio.setter
    def lensSqueezeRatio(*args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def namespace(*args: Any, **kwargs: Any) -> Any: ...
    @namespace.setter
    def namespace(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def nearClippingPlane(*args: Any, **kwargs: Any) -> Any: ...
    @nearClippingPlane.setter
    def nearClippingPlane(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def nearFocusDistance(*args: Any, **kwargs: Any) -> Any: ...
    @nearFocusDistance.setter
    def nearFocusDistance(*args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def objectColor(*args: Any, **kwargs: Any) -> Any: ...
    @objectColor.setter
    def objectColor(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def objectColorRGB(*args: Any, **kwargs: Any) -> Any: ...
    @objectColorRGB.setter
    def objectColorRGB(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def objectColorType(*args: Any, **kwargs: Any) -> Any: ...
    @objectColorType.setter
    def objectColorType(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def orthoWidth(*args: Any, **kwargs: Any) -> Any: ...
    @orthoWidth.setter
    def orthoWidth(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def overscan(*args: Any, **kwargs: Any) -> Any: ...
    @overscan.setter
    def overscan(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def panZoomEnabled(*args: Any, **kwargs: Any) -> Any: ...
    @panZoomEnabled.setter
    def panZoomEnabled(*args: Any, **kwargs: Any) -> Any: ...
    def parent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def partialPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def pluginName(*args: Any, **kwargs: Any) -> Any: ...
    @pluginName.setter
    def pluginName(*args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postProjectionMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def postScale(*args: Any, **kwargs: Any) -> Any: ...
    @postScale.setter
    def postScale(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def preScale(*args: Any, **kwargs: Any) -> Any: ...
    @preScale.setter
    def preScale(*args: Any, **kwargs: Any) -> Any: ...
    def projectionMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChildAt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def renderPanZoom(*args: Any, **kwargs: Any) -> Any: ...
    @renderPanZoom.setter
    def renderPanZoom(*args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rightDirection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAspectRatio(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCenterOfInterestPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setEyePoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setHorizontalFieldOfView(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIsOrtho(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setNearFarClippingPlanes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setVerticalFieldOfView(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def shakeEnabled(*args: Any, **kwargs: Any) -> Any: ...
    @shakeEnabled.setter
    def shakeEnabled(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def shakeOverscan(*args: Any, **kwargs: Any) -> Any: ...
    @shakeOverscan.setter
    def shakeOverscan(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def shakeOverscanEnabled(*args: Any, **kwargs: Any) -> Any: ...
    @shakeOverscanEnabled.setter
    def shakeOverscanEnabled(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def shutterAngle(*args: Any, **kwargs: Any) -> Any: ...
    @shutterAngle.setter
    def shutterAngle(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def stereoHIT(*args: Any, **kwargs: Any) -> Any: ...
    @stereoHIT.setter
    def stereoHIT(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def stereoHITEnabled(*args: Any, **kwargs: Any) -> Any: ...
    @stereoHITEnabled.setter
    def stereoHITEnabled(*args: Any, **kwargs: Any) -> Any: ...
    def transformationMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def tumblePivot(*args: Any, **kwargs: Any) -> Any: ...
    @tumblePivot.setter
    def tumblePivot(*args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def typeId(*args: Any, **kwargs: Any) -> Any: ...
    @typeId.setter
    def typeId(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def typeName(*args: Any, **kwargs: Any) -> Any: ...
    @typeName.setter
    def typeName(*args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def upDirection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def useObjectColor(*args: Any, **kwargs: Any) -> Any: ...
    @useObjectColor.setter
    def useObjectColor(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def usePivotAsLocalSpace(*args: Any, **kwargs: Any) -> Any: ...
    @usePivotAsLocalSpace.setter
    def usePivotAsLocalSpace(*args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def verticalFieldOfView(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def verticalFilmAperture(*args: Any, **kwargs: Any) -> Any: ...
    @verticalFilmAperture.setter
    def verticalFilmAperture(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def verticalFilmOffset(*args: Any, **kwargs: Any) -> Any: ...
    @verticalFilmOffset.setter
    def verticalFilmOffset(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def verticalPan(*args: Any, **kwargs: Any) -> Any: ...
    @verticalPan.setter
    def verticalPan(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def verticalRollPivot(*args: Any, **kwargs: Any) -> Any: ...
    @verticalRollPivot.setter
    def verticalRollPivot(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def verticalShake(*args: Any, **kwargs: Any) -> Any: ...
    @verticalShake.setter
    def verticalShake(*args: Any, **kwargs: Any) -> Any: ...
    def viewDirection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def zoom(*args: Any, **kwargs: Any) -> Any: ...
    @zoom.setter
    def zoom(*args: Any, **kwargs: Any) -> Any: ...

class MFnComponent(MFnBase):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def componentType(*args: Any, **kwargs: Any) -> Any: ...
    @componentType.setter
    def componentType(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def elementCount(*args: Any, **kwargs: Any) -> Any: ...
    @elementCount.setter
    def elementCount(*args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def hasWeights(*args: Any, **kwargs: Any) -> Any: ...
    @hasWeights.setter
    def hasWeights(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isComplete(*args: Any, **kwargs: Any) -> Any: ...
    @isComplete.setter
    def isComplete(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isEmpty(*args: Any, **kwargs: Any) -> Any: ...
    @isEmpty.setter
    def isEmpty(*args: Any, **kwargs: Any) -> Any: ...
    def isEqual(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def weight(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFnComponentListData(MFnData):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def add(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def has(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAny: int = ...
    kComponentList: int = ...
    kDoubleArray: int = ...
    kDynArrayAttrs: int = ...
    kDynSweptGeometry: int = ...
    kFalloffFunction: int = ...
    kFloatArray: int = ...
    kIntArray: int = ...
    kInvalid: int = ...
    kLast: int = ...
    kLattice: int = ...
    kMatrix: int = ...
    kMatrixArray: int = ...
    kMesh: int = ...
    kNId: int = ...
    kNObject: int = ...
    kNumeric: int = ...
    kNurbsCurve: int = ...
    kNurbsSurface: int = ...
    kPlugin: int = ...
    kPluginGeometry: int = ...
    kPointArray: int = ...
    kSphere: int = ...
    kString: int = ...
    kStringArray: int = ...
    kSubdSurface: int = ...
    kVectorArray: int = ...
    def length(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFnCompoundAttribute(MFnAttribute):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def accepts(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def acceptsAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addToCategory(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def affectsAppearance(*args: Any, **kwargs: Any) -> Any: ...
    @affectsAppearance.setter
    def affectsAppearance(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def affectsWorldSpace(*args: Any, **kwargs: Any) -> Any: ...
    @affectsWorldSpace.setter
    def affectsWorldSpace(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def array(*args: Any, **kwargs: Any) -> Any: ...
    @array.setter
    def array(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def cached(*args: Any, **kwargs: Any) -> Any: ...
    @cached.setter
    def cached(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def channelBox(*args: Any, **kwargs: Any) -> Any: ...
    @channelBox.setter
    def channelBox(*args: Any, **kwargs: Any) -> Any: ...
    def child(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def connectable(*args: Any, **kwargs: Any) -> Any: ...
    @connectable.setter
    def connectable(*args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def disconnectBehavior(*args: Any, **kwargs: Any) -> Any: ...
    @disconnectBehavior.setter
    def disconnectBehavior(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def dynamic(*args: Any, **kwargs: Any) -> Any: ...
    @dynamic.setter
    def dynamic(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def extension(*args: Any, **kwargs: Any) -> Any: ...
    @extension.setter
    def extension(*args: Any, **kwargs: Any) -> Any: ...
    def getAddAttrCmd(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAddAttrCmds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasCategory(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def hidden(*args: Any, **kwargs: Any) -> Any: ...
    @hidden.setter
    def hidden(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def indeterminant(*args: Any, **kwargs: Any) -> Any: ...
    @indeterminant.setter
    def indeterminant(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def indexMatters(*args: Any, **kwargs: Any) -> Any: ...
    @indexMatters.setter
    def indexMatters(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def internal(*args: Any, **kwargs: Any) -> Any: ...
    @internal.setter
    def internal(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isProxyAttribute(*args: Any, **kwargs: Any) -> Any: ...
    @isProxyAttribute.setter
    def isProxyAttribute(*args: Any, **kwargs: Any) -> Any: ...
    kDelete: int = ...
    kNothing: int = ...
    kReset: int = ...
    @property
    def keyable(*args: Any, **kwargs: Any) -> Any: ...
    @keyable.setter
    def keyable(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def name(*args: Any, **kwargs: Any) -> Any: ...
    @name.setter
    def name(*args: Any, **kwargs: Any) -> Any: ...
    def numChildren(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def parent(*args: Any, **kwargs: Any) -> Any: ...
    @parent.setter
    def parent(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def readable(*args: Any, **kwargs: Any) -> Any: ...
    @readable.setter
    def readable(*args: Any, **kwargs: Any) -> Any: ...
    def removeChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def renderSource(*args: Any, **kwargs: Any) -> Any: ...
    @renderSource.setter
    def renderSource(*args: Any, **kwargs: Any) -> Any: ...
    def setNiceNameOverride(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def shortName(*args: Any, **kwargs: Any) -> Any: ...
    @shortName.setter
    def shortName(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def storable(*args: Any, **kwargs: Any) -> Any: ...
    @storable.setter
    def storable(*args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def usedAsColor(*args: Any, **kwargs: Any) -> Any: ...
    @usedAsColor.setter
    def usedAsColor(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def usedAsFilename(*args: Any, **kwargs: Any) -> Any: ...
    @usedAsFilename.setter
    def usedAsFilename(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def usesArrayDataBuilder(*args: Any, **kwargs: Any) -> Any: ...
    @usesArrayDataBuilder.setter
    def usesArrayDataBuilder(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def worldSpace(*args: Any, **kwargs: Any) -> Any: ...
    @worldSpace.setter
    def worldSpace(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def writable(*args: Any, **kwargs: Any) -> Any: ...
    @writable.setter
    def writable(*args: Any, **kwargs: Any) -> Any: ...

class MFnContainerNode(MFnDependencyNode):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectingAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCurrentAsMObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getMembers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getParentContainer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPublishedNames(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPublishedNodes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPublishedPlugs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getRootTransform(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getSubcontainers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isCurrent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isDefaultNode(*args: Any, **kwargs: Any) -> Any: ...
    @isDefaultNode.setter
    def isDefaultNode(*args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isFromReferencedFile(*args: Any, **kwargs: Any) -> Any: ...
    @isFromReferencedFile.setter
    def isFromReferencedFile(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isLocked(*args: Any, **kwargs: Any) -> Any: ...
    @isLocked.setter
    def isLocked(*args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isShared(*args: Any, **kwargs: Any) -> Any: ...
    @isShared.setter
    def isShared(*args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kChildAnchor: int = ...
    kExtensionAttr: int = ...
    kGeneric: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNormalAttr: int = ...
    kParentAnchor: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    def makeCurrent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def namespace(*args: Any, **kwargs: Any) -> Any: ...
    @namespace.setter
    def namespace(*args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def pluginName(*args: Any, **kwargs: Any) -> Any: ...
    @pluginName.setter
    def pluginName(*args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def typeId(*args: Any, **kwargs: Any) -> Any: ...
    @typeId.setter
    def typeId(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def typeName(*args: Any, **kwargs: Any) -> Any: ...
    @typeName.setter
    def typeName(*args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFnDagNode(MFnDependencyNode):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def boundingBox(*args: Any, **kwargs: Any) -> Any: ...
    @boundingBox.setter
    def boundingBox(*args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def childCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagRoot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def duplicate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fullPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectingAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllPaths(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedSetsAndMembers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasParent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def inModel(*args: Any, **kwargs: Any) -> Any: ...
    @inModel.setter
    def inModel(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def inUnderWorld(*args: Any, **kwargs: Any) -> Any: ...
    @inUnderWorld.setter
    def inUnderWorld(*args: Any, **kwargs: Any) -> Any: ...
    def instanceCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isChildOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isDefaultNode(*args: Any, **kwargs: Any) -> Any: ...
    @isDefaultNode.setter
    def isDefaultNode(*args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isFromReferencedFile(*args: Any, **kwargs: Any) -> Any: ...
    @isFromReferencedFile.setter
    def isFromReferencedFile(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isInstanceable(*args: Any, **kwargs: Any) -> Any: ...
    @isInstanceable.setter
    def isInstanceable(*args: Any, **kwargs: Any) -> Any: ...
    def isInstanced(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstancedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isIntermediateObject(*args: Any, **kwargs: Any) -> Any: ...
    @isIntermediateObject.setter
    def isIntermediateObject(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isLocked(*args: Any, **kwargs: Any) -> Any: ...
    @isLocked.setter
    def isLocked(*args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isParentOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isShared(*args: Any, **kwargs: Any) -> Any: ...
    @isShared.setter
    def isShared(*args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNextPos: int = ...
    kNormalAttr: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def namespace(*args: Any, **kwargs: Any) -> Any: ...
    @namespace.setter
    def namespace(*args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def objectColor(*args: Any, **kwargs: Any) -> Any: ...
    @objectColor.setter
    def objectColor(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def objectColorRGB(*args: Any, **kwargs: Any) -> Any: ...
    @objectColorRGB.setter
    def objectColorRGB(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def objectColorType(*args: Any, **kwargs: Any) -> Any: ...
    @objectColorType.setter
    def objectColorType(*args: Any, **kwargs: Any) -> Any: ...
    def parent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def partialPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def pluginName(*args: Any, **kwargs: Any) -> Any: ...
    @pluginName.setter
    def pluginName(*args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChildAt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def transformationMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def typeId(*args: Any, **kwargs: Any) -> Any: ...
    @typeId.setter
    def typeId(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def typeName(*args: Any, **kwargs: Any) -> Any: ...
    @typeName.setter
    def typeName(*args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def useObjectColor(*args: Any, **kwargs: Any) -> Any: ...
    @useObjectColor.setter
    def useObjectColor(*args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFnData(MFnBase):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAny: int = ...
    kComponentList: int = ...
    kDoubleArray: int = ...
    kDynArrayAttrs: int = ...
    kDynSweptGeometry: int = ...
    kFalloffFunction: int = ...
    kFloatArray: int = ...
    kIntArray: int = ...
    kInvalid: int = ...
    kLast: int = ...
    kLattice: int = ...
    kMatrix: int = ...
    kMatrixArray: int = ...
    kMesh: int = ...
    kNId: int = ...
    kNObject: int = ...
    kNumeric: int = ...
    kNurbsCurve: int = ...
    kNurbsSurface: int = ...
    kPlugin: int = ...
    kPluginGeometry: int = ...
    kPointArray: int = ...
    kSphere: int = ...
    kString: int = ...
    kStringArray: int = ...
    kSubdSurface: int = ...
    kVectorArray: int = ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFnDependencyNode(MFnBase):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectingAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isDefaultNode(*args: Any, **kwargs: Any) -> Any: ...
    @isDefaultNode.setter
    def isDefaultNode(*args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isFromReferencedFile(*args: Any, **kwargs: Any) -> Any: ...
    @isFromReferencedFile.setter
    def isFromReferencedFile(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isLocked(*args: Any, **kwargs: Any) -> Any: ...
    @isLocked.setter
    def isLocked(*args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isShared(*args: Any, **kwargs: Any) -> Any: ...
    @isShared.setter
    def isShared(*args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNormalAttr: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def namespace(*args: Any, **kwargs: Any) -> Any: ...
    @namespace.setter
    def namespace(*args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def pluginName(*args: Any, **kwargs: Any) -> Any: ...
    @pluginName.setter
    def pluginName(*args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def typeId(*args: Any, **kwargs: Any) -> Any: ...
    @typeId.setter
    def typeId(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def typeName(*args: Any, **kwargs: Any) -> Any: ...
    @typeName.setter
    def typeName(*args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFnDoubleArrayData(MFnData):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __delitem__(self: Self, key: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __getitem__(self: Self, key: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __len__(self: Self) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __setitem__(self: Self, key: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def array(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copyTo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAny: int = ...
    kComponentList: int = ...
    kDoubleArray: int = ...
    kDynArrayAttrs: int = ...
    kDynSweptGeometry: int = ...
    kFalloffFunction: int = ...
    kFloatArray: int = ...
    kIntArray: int = ...
    kInvalid: int = ...
    kLast: int = ...
    kLattice: int = ...
    kMatrix: int = ...
    kMatrixArray: int = ...
    kMesh: int = ...
    kNId: int = ...
    kNObject: int = ...
    kNumeric: int = ...
    kNurbsCurve: int = ...
    kNurbsSurface: int = ...
    kPlugin: int = ...
    kPluginGeometry: int = ...
    kPointArray: int = ...
    kSphere: int = ...
    kString: int = ...
    kStringArray: int = ...
    kSubdSurface: int = ...
    kVectorArray: int = ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFnDoubleIndexedComponent(MFnComponent):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addElement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addElements(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def componentType(*args: Any, **kwargs: Any) -> Any: ...
    @componentType.setter
    def componentType(*args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def elementCount(*args: Any, **kwargs: Any) -> Any: ...
    @elementCount.setter
    def elementCount(*args: Any, **kwargs: Any) -> Any: ...
    def getCompleteData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getElement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getElements(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def hasWeights(*args: Any, **kwargs: Any) -> Any: ...
    @hasWeights.setter
    def hasWeights(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isComplete(*args: Any, **kwargs: Any) -> Any: ...
    @isComplete.setter
    def isComplete(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isEmpty(*args: Any, **kwargs: Any) -> Any: ...
    @isEmpty.setter
    def isEmpty(*args: Any, **kwargs: Any) -> Any: ...
    def isEqual(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCompleteData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def weight(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFnEnumAttribute(MFnAttribute):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def accepts(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def acceptsAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addField(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addToCategory(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def affectsAppearance(*args: Any, **kwargs: Any) -> Any: ...
    @affectsAppearance.setter
    def affectsAppearance(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def affectsWorldSpace(*args: Any, **kwargs: Any) -> Any: ...
    @affectsWorldSpace.setter
    def affectsWorldSpace(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def array(*args: Any, **kwargs: Any) -> Any: ...
    @array.setter
    def array(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def cached(*args: Any, **kwargs: Any) -> Any: ...
    @cached.setter
    def cached(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def channelBox(*args: Any, **kwargs: Any) -> Any: ...
    @channelBox.setter
    def channelBox(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def connectable(*args: Any, **kwargs: Any) -> Any: ...
    @connectable.setter
    def connectable(*args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def default(*args: Any, **kwargs: Any) -> Any: ...
    @default.setter
    def default(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def disconnectBehavior(*args: Any, **kwargs: Any) -> Any: ...
    @disconnectBehavior.setter
    def disconnectBehavior(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def dynamic(*args: Any, **kwargs: Any) -> Any: ...
    @dynamic.setter
    def dynamic(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def extension(*args: Any, **kwargs: Any) -> Any: ...
    @extension.setter
    def extension(*args: Any, **kwargs: Any) -> Any: ...
    def fieldName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fieldValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAddAttrCmd(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getMax(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getMin(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasCategory(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def hidden(*args: Any, **kwargs: Any) -> Any: ...
    @hidden.setter
    def hidden(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def indeterminant(*args: Any, **kwargs: Any) -> Any: ...
    @indeterminant.setter
    def indeterminant(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def indexMatters(*args: Any, **kwargs: Any) -> Any: ...
    @indexMatters.setter
    def indexMatters(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def internal(*args: Any, **kwargs: Any) -> Any: ...
    @internal.setter
    def internal(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isProxyAttribute(*args: Any, **kwargs: Any) -> Any: ...
    @isProxyAttribute.setter
    def isProxyAttribute(*args: Any, **kwargs: Any) -> Any: ...
    kDelete: int = ...
    kNothing: int = ...
    kReset: int = ...
    @property
    def keyable(*args: Any, **kwargs: Any) -> Any: ...
    @keyable.setter
    def keyable(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def name(*args: Any, **kwargs: Any) -> Any: ...
    @name.setter
    def name(*args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def parent(*args: Any, **kwargs: Any) -> Any: ...
    @parent.setter
    def parent(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def readable(*args: Any, **kwargs: Any) -> Any: ...
    @readable.setter
    def readable(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def renderSource(*args: Any, **kwargs: Any) -> Any: ...
    @renderSource.setter
    def renderSource(*args: Any, **kwargs: Any) -> Any: ...
    def setDefaultByName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setNiceNameOverride(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def shortName(*args: Any, **kwargs: Any) -> Any: ...
    @shortName.setter
    def shortName(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def storable(*args: Any, **kwargs: Any) -> Any: ...
    @storable.setter
    def storable(*args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def usedAsColor(*args: Any, **kwargs: Any) -> Any: ...
    @usedAsColor.setter
    def usedAsColor(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def usedAsFilename(*args: Any, **kwargs: Any) -> Any: ...
    @usedAsFilename.setter
    def usedAsFilename(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def usesArrayDataBuilder(*args: Any, **kwargs: Any) -> Any: ...
    @usesArrayDataBuilder.setter
    def usesArrayDataBuilder(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def worldSpace(*args: Any, **kwargs: Any) -> Any: ...
    @worldSpace.setter
    def worldSpace(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def writable(*args: Any, **kwargs: Any) -> Any: ...
    @writable.setter
    def writable(*args: Any, **kwargs: Any) -> Any: ...

class MFnGenericAttribute(MFnAttribute):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def accepts(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def acceptsAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addDataType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addNumericType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addToCategory(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addTypeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def affectsAppearance(*args: Any, **kwargs: Any) -> Any: ...
    @affectsAppearance.setter
    def affectsAppearance(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def affectsWorldSpace(*args: Any, **kwargs: Any) -> Any: ...
    @affectsWorldSpace.setter
    def affectsWorldSpace(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def array(*args: Any, **kwargs: Any) -> Any: ...
    @array.setter
    def array(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def cached(*args: Any, **kwargs: Any) -> Any: ...
    @cached.setter
    def cached(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def channelBox(*args: Any, **kwargs: Any) -> Any: ...
    @channelBox.setter
    def channelBox(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def connectable(*args: Any, **kwargs: Any) -> Any: ...
    @connectable.setter
    def connectable(*args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def disconnectBehavior(*args: Any, **kwargs: Any) -> Any: ...
    @disconnectBehavior.setter
    def disconnectBehavior(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def dynamic(*args: Any, **kwargs: Any) -> Any: ...
    @dynamic.setter
    def dynamic(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def extension(*args: Any, **kwargs: Any) -> Any: ...
    @extension.setter
    def extension(*args: Any, **kwargs: Any) -> Any: ...
    def getAddAttrCmd(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasCategory(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def hidden(*args: Any, **kwargs: Any) -> Any: ...
    @hidden.setter
    def hidden(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def indeterminant(*args: Any, **kwargs: Any) -> Any: ...
    @indeterminant.setter
    def indeterminant(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def indexMatters(*args: Any, **kwargs: Any) -> Any: ...
    @indexMatters.setter
    def indexMatters(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def internal(*args: Any, **kwargs: Any) -> Any: ...
    @internal.setter
    def internal(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isProxyAttribute(*args: Any, **kwargs: Any) -> Any: ...
    @isProxyAttribute.setter
    def isProxyAttribute(*args: Any, **kwargs: Any) -> Any: ...
    kDelete: int = ...
    kNothing: int = ...
    kReset: int = ...
    @property
    def keyable(*args: Any, **kwargs: Any) -> Any: ...
    @keyable.setter
    def keyable(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def name(*args: Any, **kwargs: Any) -> Any: ...
    @name.setter
    def name(*args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def parent(*args: Any, **kwargs: Any) -> Any: ...
    @parent.setter
    def parent(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def readable(*args: Any, **kwargs: Any) -> Any: ...
    @readable.setter
    def readable(*args: Any, **kwargs: Any) -> Any: ...
    def removeDataType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeNumericType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeTypeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def renderSource(*args: Any, **kwargs: Any) -> Any: ...
    @renderSource.setter
    def renderSource(*args: Any, **kwargs: Any) -> Any: ...
    def setNiceNameOverride(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def shortName(*args: Any, **kwargs: Any) -> Any: ...
    @shortName.setter
    def shortName(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def storable(*args: Any, **kwargs: Any) -> Any: ...
    @storable.setter
    def storable(*args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def usedAsColor(*args: Any, **kwargs: Any) -> Any: ...
    @usedAsColor.setter
    def usedAsColor(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def usedAsFilename(*args: Any, **kwargs: Any) -> Any: ...
    @usedAsFilename.setter
    def usedAsFilename(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def usesArrayDataBuilder(*args: Any, **kwargs: Any) -> Any: ...
    @usesArrayDataBuilder.setter
    def usesArrayDataBuilder(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def worldSpace(*args: Any, **kwargs: Any) -> Any: ...
    @worldSpace.setter
    def worldSpace(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def writable(*args: Any, **kwargs: Any) -> Any: ...
    @writable.setter
    def writable(*args: Any, **kwargs: Any) -> Any: ...

class MFnGeometryData(MFnData):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addComponentTag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addObjectGroup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addObjectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def changeObjectGroupId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def componentTagContents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def componentTagExpressionSubsetState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def componentTagType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def componentTags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copyObjectGroups(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasComponentTag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObjectGroup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isIdentity(*args: Any, **kwargs: Any) -> Any: ...
    @isIdentity.setter
    def isIdentity(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isNotIdentity(*args: Any, **kwargs: Any) -> Any: ...
    @isNotIdentity.setter
    def isNotIdentity(*args: Any, **kwargs: Any) -> Any: ...
    kAny: int = ...
    kAuto: int = ...
    kCompleteGroup: int = ...
    kComponentList: int = ...
    kDoubleArray: int = ...
    kDynArrayAttrs: int = ...
    kDynSweptGeometry: int = ...
    kEdges: int = ...
    kEmptyGroup: int = ...
    kFaces: int = ...
    kFalloffFunction: int = ...
    kFloatArray: int = ...
    kIntArray: int = ...
    kInvalid: int = ...
    kInvalidGroup: int = ...
    kLast: int = ...
    kLattice: int = ...
    kMatrix: int = ...
    kMatrixArray: int = ...
    kMesh: int = ...
    kNId: int = ...
    kNObject: int = ...
    kNull: int = ...
    kNumeric: int = ...
    kNurbsCurve: int = ...
    kNurbsSurface: int = ...
    kPartialGroup: int = ...
    kPlugin: int = ...
    kPluginGeometry: int = ...
    kPointArray: int = ...
    kSphere: int = ...
    kString: int = ...
    kStringArray: int = ...
    kSubdSurface: int = ...
    kUnsupported: int = ...
    kVectorArray: int = ...
    kVerts: int = ...
    @property
    def matrix(*args: Any, **kwargs: Any) -> Any: ...
    @matrix.setter
    def matrix(*args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def objectGroupCount(*args: Any, **kwargs: Any) -> Any: ...
    @objectGroupCount.setter
    def objectGroupCount(*args: Any, **kwargs: Any) -> Any: ...
    def objectGroupSubsetState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeComponentTag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeObjectGroup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeObjectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def renameComponentTag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def resolveComponentTagExpression(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setComponentTagContents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFnIntArrayData(MFnData):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __delitem__(self: Self, key: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __getitem__(self: Self, key: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __len__(self: Self) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __setitem__(self: Self, key: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def array(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copyTo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAny: int = ...
    kComponentList: int = ...
    kDoubleArray: int = ...
    kDynArrayAttrs: int = ...
    kDynSweptGeometry: int = ...
    kFalloffFunction: int = ...
    kFloatArray: int = ...
    kIntArray: int = ...
    kInvalid: int = ...
    kLast: int = ...
    kLattice: int = ...
    kMatrix: int = ...
    kMatrixArray: int = ...
    kMesh: int = ...
    kNId: int = ...
    kNObject: int = ...
    kNumeric: int = ...
    kNurbsCurve: int = ...
    kNurbsSurface: int = ...
    kPlugin: int = ...
    kPluginGeometry: int = ...
    kPointArray: int = ...
    kSphere: int = ...
    kString: int = ...
    kStringArray: int = ...
    kSubdSurface: int = ...
    kVectorArray: int = ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFnLightDataAttribute(MFnAttribute):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def accepts(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def acceptsAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addToCategory(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def affectsAppearance(*args: Any, **kwargs: Any) -> Any: ...
    @affectsAppearance.setter
    def affectsAppearance(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def affectsWorldSpace(*args: Any, **kwargs: Any) -> Any: ...
    @affectsWorldSpace.setter
    def affectsWorldSpace(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def array(*args: Any, **kwargs: Any) -> Any: ...
    @array.setter
    def array(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def cached(*args: Any, **kwargs: Any) -> Any: ...
    @cached.setter
    def cached(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def channelBox(*args: Any, **kwargs: Any) -> Any: ...
    @channelBox.setter
    def channelBox(*args: Any, **kwargs: Any) -> Any: ...
    def child(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def connectable(*args: Any, **kwargs: Any) -> Any: ...
    @connectable.setter
    def connectable(*args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def default(*args: Any, **kwargs: Any) -> Any: ...
    @default.setter
    def default(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def disconnectBehavior(*args: Any, **kwargs: Any) -> Any: ...
    @disconnectBehavior.setter
    def disconnectBehavior(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def dynamic(*args: Any, **kwargs: Any) -> Any: ...
    @dynamic.setter
    def dynamic(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def extension(*args: Any, **kwargs: Any) -> Any: ...
    @extension.setter
    def extension(*args: Any, **kwargs: Any) -> Any: ...
    def getAddAttrCmd(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasCategory(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def hidden(*args: Any, **kwargs: Any) -> Any: ...
    @hidden.setter
    def hidden(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def indeterminant(*args: Any, **kwargs: Any) -> Any: ...
    @indeterminant.setter
    def indeterminant(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def indexMatters(*args: Any, **kwargs: Any) -> Any: ...
    @indexMatters.setter
    def indexMatters(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def internal(*args: Any, **kwargs: Any) -> Any: ...
    @internal.setter
    def internal(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isProxyAttribute(*args: Any, **kwargs: Any) -> Any: ...
    @isProxyAttribute.setter
    def isProxyAttribute(*args: Any, **kwargs: Any) -> Any: ...
    kDelete: int = ...
    kNothing: int = ...
    kReset: int = ...
    @property
    def keyable(*args: Any, **kwargs: Any) -> Any: ...
    @keyable.setter
    def keyable(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def name(*args: Any, **kwargs: Any) -> Any: ...
    @name.setter
    def name(*args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def parent(*args: Any, **kwargs: Any) -> Any: ...
    @parent.setter
    def parent(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def readable(*args: Any, **kwargs: Any) -> Any: ...
    @readable.setter
    def readable(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def renderSource(*args: Any, **kwargs: Any) -> Any: ...
    @renderSource.setter
    def renderSource(*args: Any, **kwargs: Any) -> Any: ...
    def setNiceNameOverride(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def shortName(*args: Any, **kwargs: Any) -> Any: ...
    @shortName.setter
    def shortName(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def storable(*args: Any, **kwargs: Any) -> Any: ...
    @storable.setter
    def storable(*args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def usedAsColor(*args: Any, **kwargs: Any) -> Any: ...
    @usedAsColor.setter
    def usedAsColor(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def usedAsFilename(*args: Any, **kwargs: Any) -> Any: ...
    @usedAsFilename.setter
    def usedAsFilename(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def usesArrayDataBuilder(*args: Any, **kwargs: Any) -> Any: ...
    @usesArrayDataBuilder.setter
    def usesArrayDataBuilder(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def worldSpace(*args: Any, **kwargs: Any) -> Any: ...
    @worldSpace.setter
    def worldSpace(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def writable(*args: Any, **kwargs: Any) -> Any: ...
    @writable.setter
    def writable(*args: Any, **kwargs: Any) -> Any: ...

class MFnMatrixArrayData(MFnData):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __delitem__(self: Self, key: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __getitem__(self: Self, key: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __len__(self: Self) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __setitem__(self: Self, key: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def array(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copyTo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAny: int = ...
    kComponentList: int = ...
    kDoubleArray: int = ...
    kDynArrayAttrs: int = ...
    kDynSweptGeometry: int = ...
    kFalloffFunction: int = ...
    kFloatArray: int = ...
    kIntArray: int = ...
    kInvalid: int = ...
    kLast: int = ...
    kLattice: int = ...
    kMatrix: int = ...
    kMatrixArray: int = ...
    kMesh: int = ...
    kNId: int = ...
    kNObject: int = ...
    kNumeric: int = ...
    kNurbsCurve: int = ...
    kNurbsSurface: int = ...
    kPlugin: int = ...
    kPluginGeometry: int = ...
    kPointArray: int = ...
    kSphere: int = ...
    kString: int = ...
    kStringArray: int = ...
    kSubdSurface: int = ...
    kVectorArray: int = ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFnMatrixAttribute(MFnAttribute):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def accepts(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def acceptsAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addToCategory(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def affectsAppearance(*args: Any, **kwargs: Any) -> Any: ...
    @affectsAppearance.setter
    def affectsAppearance(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def affectsWorldSpace(*args: Any, **kwargs: Any) -> Any: ...
    @affectsWorldSpace.setter
    def affectsWorldSpace(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def array(*args: Any, **kwargs: Any) -> Any: ...
    @array.setter
    def array(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def cached(*args: Any, **kwargs: Any) -> Any: ...
    @cached.setter
    def cached(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def channelBox(*args: Any, **kwargs: Any) -> Any: ...
    @channelBox.setter
    def channelBox(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def connectable(*args: Any, **kwargs: Any) -> Any: ...
    @connectable.setter
    def connectable(*args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def default(*args: Any, **kwargs: Any) -> Any: ...
    @default.setter
    def default(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def disconnectBehavior(*args: Any, **kwargs: Any) -> Any: ...
    @disconnectBehavior.setter
    def disconnectBehavior(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def dynamic(*args: Any, **kwargs: Any) -> Any: ...
    @dynamic.setter
    def dynamic(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def extension(*args: Any, **kwargs: Any) -> Any: ...
    @extension.setter
    def extension(*args: Any, **kwargs: Any) -> Any: ...
    def getAddAttrCmd(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasCategory(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def hidden(*args: Any, **kwargs: Any) -> Any: ...
    @hidden.setter
    def hidden(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def indeterminant(*args: Any, **kwargs: Any) -> Any: ...
    @indeterminant.setter
    def indeterminant(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def indexMatters(*args: Any, **kwargs: Any) -> Any: ...
    @indexMatters.setter
    def indexMatters(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def internal(*args: Any, **kwargs: Any) -> Any: ...
    @internal.setter
    def internal(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isProxyAttribute(*args: Any, **kwargs: Any) -> Any: ...
    @isProxyAttribute.setter
    def isProxyAttribute(*args: Any, **kwargs: Any) -> Any: ...
    kDelete: int = ...
    kDouble: int = ...
    kFloat: int = ...
    kNothing: int = ...
    kReset: int = ...
    @property
    def keyable(*args: Any, **kwargs: Any) -> Any: ...
    @keyable.setter
    def keyable(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def name(*args: Any, **kwargs: Any) -> Any: ...
    @name.setter
    def name(*args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def parent(*args: Any, **kwargs: Any) -> Any: ...
    @parent.setter
    def parent(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def readable(*args: Any, **kwargs: Any) -> Any: ...
    @readable.setter
    def readable(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def renderSource(*args: Any, **kwargs: Any) -> Any: ...
    @renderSource.setter
    def renderSource(*args: Any, **kwargs: Any) -> Any: ...
    def setNiceNameOverride(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def shortName(*args: Any, **kwargs: Any) -> Any: ...
    @shortName.setter
    def shortName(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def storable(*args: Any, **kwargs: Any) -> Any: ...
    @storable.setter
    def storable(*args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def usedAsColor(*args: Any, **kwargs: Any) -> Any: ...
    @usedAsColor.setter
    def usedAsColor(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def usedAsFilename(*args: Any, **kwargs: Any) -> Any: ...
    @usedAsFilename.setter
    def usedAsFilename(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def usesArrayDataBuilder(*args: Any, **kwargs: Any) -> Any: ...
    @usesArrayDataBuilder.setter
    def usesArrayDataBuilder(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def worldSpace(*args: Any, **kwargs: Any) -> Any: ...
    @worldSpace.setter
    def worldSpace(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def writable(*args: Any, **kwargs: Any) -> Any: ...
    @writable.setter
    def writable(*args: Any, **kwargs: Any) -> Any: ...

class MFnMatrixData(MFnData):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTransformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAny: int = ...
    kComponentList: int = ...
    kDoubleArray: int = ...
    kDynArrayAttrs: int = ...
    kDynSweptGeometry: int = ...
    kFalloffFunction: int = ...
    kFloatArray: int = ...
    kIntArray: int = ...
    kInvalid: int = ...
    kLast: int = ...
    kLattice: int = ...
    kMatrix: int = ...
    kMatrixArray: int = ...
    kMesh: int = ...
    kNId: int = ...
    kNObject: int = ...
    kNumeric: int = ...
    kNurbsCurve: int = ...
    kNurbsSurface: int = ...
    kPlugin: int = ...
    kPluginGeometry: int = ...
    kPointArray: int = ...
    kSphere: int = ...
    kString: int = ...
    kStringArray: int = ...
    kSubdSurface: int = ...
    kVectorArray: int = ...
    def matrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def transformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFnMesh(MFnDagNode):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addHoles(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addPolygon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allIntersections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def anyIntersection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def assignColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def assignColors(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def assignUV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def assignUVs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def autoUniformGridParams(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def booleanOp(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def booleanOps(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def boundingBox(*args: Any, **kwargs: Any) -> Any: ...
    @boundingBox.setter
    def boundingBox(*args: Any, **kwargs: Any) -> Any: ...
    def cachedIntersectionAcceleratorInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def checkSamePointTwice(*args: Any, **kwargs: Any) -> Any: ...
    @checkSamePointTwice.setter
    def checkSamePointTwice(*args: Any, **kwargs: Any) -> Any: ...
    def child(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def childCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cleanupEdgeSmoothing(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clearBlindData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clearColors(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clearGlobalIntersectionAcceleratorInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clearUVs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def closestIntersection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def collapseEdges(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def collapseFaces(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copyInPlace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copyUVSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createBlindDataType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createColorSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createInPlace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createUVSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentColorSetName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentUVSetName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagRoot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteColorSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteEdge(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteFace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteUVSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteVertex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def displayColors(*args: Any, **kwargs: Any) -> Any: ...
    @displayColors.setter
    def displayColors(*args: Any, **kwargs: Any) -> Any: ...
    def duplicate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def duplicateFaces(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def edgeBorderInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def extractFaces(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def extrudeEdges(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def extrudeFaces(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def freeCachedIntersectionAccelerator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fullPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def generateSmoothMesh(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectingAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllPaths(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAssignedUVs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAssociatedColorSetInstances(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAssociatedUVSetInstances(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAssociatedUVSetTextures(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getBinaryBlindData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getBinormals(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getBlindDataAttrNames(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getBlindDataTypes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getBoolBlindData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getClosestNormal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getClosestPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getClosestPointAndNormal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getClosestUVs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getColorIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getColorRepresentation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getColorSetFamilyNames(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getColorSetNames(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getColorSetsInFamily(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getColors(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedSetsAndMembers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedShaders(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCreaseEdges(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCreaseVertices(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDoubleBlindData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getEdgeVertices(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFaceAndVertexIndices(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFaceNormalIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFaceUVSetNames(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFaceVertexBinormal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFaceVertexBinormals(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFaceVertexColors(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFaceVertexIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFaceVertexNormal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFaceVertexNormals(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFaceVertexTangent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFaceVertexTangents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFloatBlindData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFloatPoints(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getHoles(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getIntBlindData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInvisibleFaces(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getMeshShellsIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getNormalIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getNormals(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPointAtUV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPoints(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPointsAtUV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPolygonNormal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPolygonTriangleVertices(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPolygonUV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPolygonUVid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPolygonVertices(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getSmoothMeshDisplayOptions(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getStringBlindData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getTangentId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getTangents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getTriangleOffsets(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getTriangles(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getUV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getUVAtPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getUVBorderEdges(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getUVSetFamilyNames(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getUVSetNames(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getUVSetsInFamily(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getUVs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getUvShellsIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getVertexColors(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getVertexNormal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getVertexNormals(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getVertices(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def globalIntersectionAcceleratorsInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAlphaChannels(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasBlindData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasColorChannels(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasParent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def inModel(*args: Any, **kwargs: Any) -> Any: ...
    @inModel.setter
    def inModel(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def inUnderWorld(*args: Any, **kwargs: Any) -> Any: ...
    @inUnderWorld.setter
    def inUnderWorld(*args: Any, **kwargs: Any) -> Any: ...
    def instanceCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def intersectFaceAtUV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isBlindDataTypeUsed(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isChildOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isColorClamped(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isColorSetPerInstance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isDefaultNode(*args: Any, **kwargs: Any) -> Any: ...
    @isDefaultNode.setter
    def isDefaultNode(*args: Any, **kwargs: Any) -> Any: ...
    def isEdgeSmooth(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isFromReferencedFile(*args: Any, **kwargs: Any) -> Any: ...
    @isFromReferencedFile.setter
    def isFromReferencedFile(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isInstanceable(*args: Any, **kwargs: Any) -> Any: ...
    @isInstanceable.setter
    def isInstanceable(*args: Any, **kwargs: Any) -> Any: ...
    def isInstanced(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstancedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isIntermediateObject(*args: Any, **kwargs: Any) -> Any: ...
    @isIntermediateObject.setter
    def isIntermediateObject(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isLocked(*args: Any, **kwargs: Any) -> Any: ...
    @isLocked.setter
    def isLocked(*args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNormalLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isParentOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isPolygonConvex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isPolygonUVReversed(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isRightHandedTangent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isShared(*args: Any, **kwargs: Any) -> Any: ...
    @isShared.setter
    def isShared(*args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isUVSetPerInstance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAlpha: int = ...
    kDifference: int = ...
    kEdgeClassification: int = ...
    kExtensionAttr: int = ...
    kGeomBorder: int = ...
    kInstanceUnspecified: int = ...
    kInternalPoint: int = ...
    kIntersectTolerance: float = ...
    kIntersection: int = ...
    kInvalid: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNextPos: int = ...
    kNormalAttr: int = ...
    kNormalClassification: int = ...
    kOnEdge: int = ...
    kPointTolerance: float = ...
    kRGB: int = ...
    kRGBA: int = ...
    kSharedUV: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    kUVBorder: int = ...
    kUnion: int = ...
    kUnsharedUV: int = ...
    def lockFaceVertexNormals(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def lockVertexNormals(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def namespace(*args: Any, **kwargs: Any) -> Any: ...
    @namespace.setter
    def namespace(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def numColorSets(*args: Any, **kwargs: Any) -> Any: ...
    @numColorSets.setter
    def numColorSets(*args: Any, **kwargs: Any) -> Any: ...
    def numColors(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def numEdges(*args: Any, **kwargs: Any) -> Any: ...
    @numEdges.setter
    def numEdges(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def numFaceVertices(*args: Any, **kwargs: Any) -> Any: ...
    @numFaceVertices.setter
    def numFaceVertices(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def numNormals(*args: Any, **kwargs: Any) -> Any: ...
    @numNormals.setter
    def numNormals(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def numPolygons(*args: Any, **kwargs: Any) -> Any: ...
    @numPolygons.setter
    def numPolygons(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def numUVSets(*args: Any, **kwargs: Any) -> Any: ...
    @numUVSets.setter
    def numUVSets(*args: Any, **kwargs: Any) -> Any: ...
    def numUVs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def numVertices(*args: Any, **kwargs: Any) -> Any: ...
    @numVertices.setter
    def numVertices(*args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def objectColor(*args: Any, **kwargs: Any) -> Any: ...
    @objectColor.setter
    def objectColor(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def objectColorRGB(*args: Any, **kwargs: Any) -> Any: ...
    @objectColorRGB.setter
    def objectColorRGB(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def objectColorType(*args: Any, **kwargs: Any) -> Any: ...
    @objectColorType.setter
    def objectColorType(*args: Any, **kwargs: Any) -> Any: ...
    def onBoundary(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def partialPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def pluginName(*args: Any, **kwargs: Any) -> Any: ...
    @pluginName.setter
    def pluginName(*args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def polygonVertexCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChildAt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeFaceColors(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeFaceVertexColors(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeVertexColors(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def renameUVSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setBinaryBlindData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setBoolBlindData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setColors(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCreaseEdges(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCreaseVertices(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCurrentColorSetName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCurrentUVSetName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoubleBlindData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setEdgeSmoothing(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setEdgeSmoothings(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFaceColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFaceColors(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFaceVertexColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFaceVertexColors(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFaceVertexNormal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFaceVertexNormals(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFloatBlindData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIntBlindData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInvisibleFaces(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIsColorClamped(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setNormals(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPoints(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSmoothMeshDisplayOptions(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSomeColors(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSomeUVs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setStringBlindData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUVs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setVertexColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setVertexColors(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setVertexNormal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setVertexNormals(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def sortIntersectionFaceTriIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def split(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def subdivideEdges(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def subdivideFaces(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def syncObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def transformationMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def typeId(*args: Any, **kwargs: Any) -> Any: ...
    @typeId.setter
    def typeId(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def typeName(*args: Any, **kwargs: Any) -> Any: ...
    @typeName.setter
    def typeName(*args: Any, **kwargs: Any) -> Any: ...
    def uniformGridParams(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def unlockFaceVertexNormals(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def unlockVertexNormals(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def updateSurface(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def useObjectColor(*args: Any, **kwargs: Any) -> Any: ...
    @useObjectColor.setter
    def useObjectColor(*args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFnMeshData(MFnGeometryData):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addComponentTag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addObjectGroup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addObjectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def changeObjectGroupId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def componentTagContents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def componentTagExpressionSubsetState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def componentTagType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def componentTags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copyObjectGroups(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasComponentTag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObjectGroup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isIdentity(*args: Any, **kwargs: Any) -> Any: ...
    @isIdentity.setter
    def isIdentity(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isNotIdentity(*args: Any, **kwargs: Any) -> Any: ...
    @isNotIdentity.setter
    def isNotIdentity(*args: Any, **kwargs: Any) -> Any: ...
    kAny: int = ...
    kAuto: int = ...
    kCompleteGroup: int = ...
    kComponentList: int = ...
    kDoubleArray: int = ...
    kDynArrayAttrs: int = ...
    kDynSweptGeometry: int = ...
    kEdges: int = ...
    kEmptyGroup: int = ...
    kFaces: int = ...
    kFalloffFunction: int = ...
    kFloatArray: int = ...
    kIntArray: int = ...
    kInvalid: int = ...
    kInvalidGroup: int = ...
    kLast: int = ...
    kLattice: int = ...
    kMatrix: int = ...
    kMatrixArray: int = ...
    kMesh: int = ...
    kNId: int = ...
    kNObject: int = ...
    kNull: int = ...
    kNumeric: int = ...
    kNurbsCurve: int = ...
    kNurbsSurface: int = ...
    kPartialGroup: int = ...
    kPlugin: int = ...
    kPluginGeometry: int = ...
    kPointArray: int = ...
    kSphere: int = ...
    kString: int = ...
    kStringArray: int = ...
    kSubdSurface: int = ...
    kUnsupported: int = ...
    kVectorArray: int = ...
    kVerts: int = ...
    @property
    def matrix(*args: Any, **kwargs: Any) -> Any: ...
    @matrix.setter
    def matrix(*args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def objectGroupCount(*args: Any, **kwargs: Any) -> Any: ...
    @objectGroupCount.setter
    def objectGroupCount(*args: Any, **kwargs: Any) -> Any: ...
    def objectGroupSubsetState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeComponentTag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeObjectGroup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeObjectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def renameComponentTag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def resolveComponentTagExpression(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setComponentTagContents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFnMessageAttribute(MFnAttribute):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def accepts(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def acceptsAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addToCategory(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def affectsAppearance(*args: Any, **kwargs: Any) -> Any: ...
    @affectsAppearance.setter
    def affectsAppearance(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def affectsWorldSpace(*args: Any, **kwargs: Any) -> Any: ...
    @affectsWorldSpace.setter
    def affectsWorldSpace(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def array(*args: Any, **kwargs: Any) -> Any: ...
    @array.setter
    def array(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def cached(*args: Any, **kwargs: Any) -> Any: ...
    @cached.setter
    def cached(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def channelBox(*args: Any, **kwargs: Any) -> Any: ...
    @channelBox.setter
    def channelBox(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def connectable(*args: Any, **kwargs: Any) -> Any: ...
    @connectable.setter
    def connectable(*args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def disconnectBehavior(*args: Any, **kwargs: Any) -> Any: ...
    @disconnectBehavior.setter
    def disconnectBehavior(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def dynamic(*args: Any, **kwargs: Any) -> Any: ...
    @dynamic.setter
    def dynamic(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def extension(*args: Any, **kwargs: Any) -> Any: ...
    @extension.setter
    def extension(*args: Any, **kwargs: Any) -> Any: ...
    def getAddAttrCmd(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasCategory(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def hidden(*args: Any, **kwargs: Any) -> Any: ...
    @hidden.setter
    def hidden(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def indeterminant(*args: Any, **kwargs: Any) -> Any: ...
    @indeterminant.setter
    def indeterminant(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def indexMatters(*args: Any, **kwargs: Any) -> Any: ...
    @indexMatters.setter
    def indexMatters(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def internal(*args: Any, **kwargs: Any) -> Any: ...
    @internal.setter
    def internal(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isProxyAttribute(*args: Any, **kwargs: Any) -> Any: ...
    @isProxyAttribute.setter
    def isProxyAttribute(*args: Any, **kwargs: Any) -> Any: ...
    kDelete: int = ...
    kNothing: int = ...
    kReset: int = ...
    @property
    def keyable(*args: Any, **kwargs: Any) -> Any: ...
    @keyable.setter
    def keyable(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def name(*args: Any, **kwargs: Any) -> Any: ...
    @name.setter
    def name(*args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def parent(*args: Any, **kwargs: Any) -> Any: ...
    @parent.setter
    def parent(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def readable(*args: Any, **kwargs: Any) -> Any: ...
    @readable.setter
    def readable(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def renderSource(*args: Any, **kwargs: Any) -> Any: ...
    @renderSource.setter
    def renderSource(*args: Any, **kwargs: Any) -> Any: ...
    def setNiceNameOverride(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def shortName(*args: Any, **kwargs: Any) -> Any: ...
    @shortName.setter
    def shortName(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def storable(*args: Any, **kwargs: Any) -> Any: ...
    @storable.setter
    def storable(*args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def usedAsColor(*args: Any, **kwargs: Any) -> Any: ...
    @usedAsColor.setter
    def usedAsColor(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def usedAsFilename(*args: Any, **kwargs: Any) -> Any: ...
    @usedAsFilename.setter
    def usedAsFilename(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def usesArrayDataBuilder(*args: Any, **kwargs: Any) -> Any: ...
    @usesArrayDataBuilder.setter
    def usesArrayDataBuilder(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def worldSpace(*args: Any, **kwargs: Any) -> Any: ...
    @worldSpace.setter
    def worldSpace(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def writable(*args: Any, **kwargs: Any) -> Any: ...
    @writable.setter
    def writable(*args: Any, **kwargs: Any) -> Any: ...

class MFnNumericAttribute(MFnAttribute):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def accepts(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def acceptsAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addToCategory(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def affectsAppearance(*args: Any, **kwargs: Any) -> Any: ...
    @affectsAppearance.setter
    def affectsAppearance(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def affectsWorldSpace(*args: Any, **kwargs: Any) -> Any: ...
    @affectsWorldSpace.setter
    def affectsWorldSpace(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def array(*args: Any, **kwargs: Any) -> Any: ...
    @array.setter
    def array(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def cached(*args: Any, **kwargs: Any) -> Any: ...
    @cached.setter
    def cached(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def channelBox(*args: Any, **kwargs: Any) -> Any: ...
    @channelBox.setter
    def channelBox(*args: Any, **kwargs: Any) -> Any: ...
    def child(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def connectable(*args: Any, **kwargs: Any) -> Any: ...
    @connectable.setter
    def connectable(*args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createAddr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def default(*args: Any, **kwargs: Any) -> Any: ...
    @default.setter
    def default(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def disconnectBehavior(*args: Any, **kwargs: Any) -> Any: ...
    @disconnectBehavior.setter
    def disconnectBehavior(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def dynamic(*args: Any, **kwargs: Any) -> Any: ...
    @dynamic.setter
    def dynamic(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def extension(*args: Any, **kwargs: Any) -> Any: ...
    @extension.setter
    def extension(*args: Any, **kwargs: Any) -> Any: ...
    def getAddAttrCmd(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getMax(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getMin(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getSoftMax(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getSoftMin(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasCategory(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasMax(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasMin(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasSoftMax(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasSoftMin(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def hidden(*args: Any, **kwargs: Any) -> Any: ...
    @hidden.setter
    def hidden(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def indeterminant(*args: Any, **kwargs: Any) -> Any: ...
    @indeterminant.setter
    def indeterminant(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def indexMatters(*args: Any, **kwargs: Any) -> Any: ...
    @indexMatters.setter
    def indexMatters(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def internal(*args: Any, **kwargs: Any) -> Any: ...
    @internal.setter
    def internal(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isProxyAttribute(*args: Any, **kwargs: Any) -> Any: ...
    @isProxyAttribute.setter
    def isProxyAttribute(*args: Any, **kwargs: Any) -> Any: ...
    kDelete: int = ...
    kNothing: int = ...
    kReset: int = ...
    @property
    def keyable(*args: Any, **kwargs: Any) -> Any: ...
    @keyable.setter
    def keyable(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def name(*args: Any, **kwargs: Any) -> Any: ...
    @name.setter
    def name(*args: Any, **kwargs: Any) -> Any: ...
    def numericType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def parent(*args: Any, **kwargs: Any) -> Any: ...
    @parent.setter
    def parent(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def readable(*args: Any, **kwargs: Any) -> Any: ...
    @readable.setter
    def readable(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def renderSource(*args: Any, **kwargs: Any) -> Any: ...
    @renderSource.setter
    def renderSource(*args: Any, **kwargs: Any) -> Any: ...
    def setMax(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMin(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setNiceNameOverride(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSoftMax(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSoftMin(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def shortName(*args: Any, **kwargs: Any) -> Any: ...
    @shortName.setter
    def shortName(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def storable(*args: Any, **kwargs: Any) -> Any: ...
    @storable.setter
    def storable(*args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def usedAsColor(*args: Any, **kwargs: Any) -> Any: ...
    @usedAsColor.setter
    def usedAsColor(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def usedAsFilename(*args: Any, **kwargs: Any) -> Any: ...
    @usedAsFilename.setter
    def usedAsFilename(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def usesArrayDataBuilder(*args: Any, **kwargs: Any) -> Any: ...
    @usesArrayDataBuilder.setter
    def usesArrayDataBuilder(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def worldSpace(*args: Any, **kwargs: Any) -> Any: ...
    @worldSpace.setter
    def worldSpace(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def writable(*args: Any, **kwargs: Any) -> Any: ...
    @writable.setter
    def writable(*args: Any, **kwargs: Any) -> Any: ...

class MFnNumericData(MFnData):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    k2Double: int = ...
    k2Float: int = ...
    k2Int: int = ...
    k2Long: int = ...
    k2Short: int = ...
    k3Double: int = ...
    k3Float: int = ...
    k3Int: int = ...
    k3Long: int = ...
    k3Short: int = ...
    k4Double: int = ...
    kAddr: int = ...
    kAny: int = ...
    kBoolean: int = ...
    kByte: int = ...
    kChar: int = ...
    kComponentList: int = ...
    kDouble: int = ...
    kDoubleArray: int = ...
    kDynArrayAttrs: int = ...
    kDynSweptGeometry: int = ...
    kFalloffFunction: int = ...
    kFloat: int = ...
    kFloatArray: int = ...
    kInt: int = ...
    kInt64: int = ...
    kIntArray: int = ...
    kInvalid: int = ...
    kLast: int = ...
    kLattice: int = ...
    kLong: int = ...
    kMatrix: int = ...
    kMatrixArray: int = ...
    kMesh: int = ...
    kNId: int = ...
    kNObject: int = ...
    kNumeric: int = ...
    kNurbsCurve: int = ...
    kNurbsSurface: int = ...
    kPlugin: int = ...
    kPluginGeometry: int = ...
    kPointArray: int = ...
    kShort: int = ...
    kSphere: int = ...
    kString: int = ...
    kStringArray: int = ...
    kSubdSurface: int = ...
    kVectorArray: int = ...
    def numericType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFnNurbsCurve(MFnDagNode):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def area(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def boundingBox(*args: Any, **kwargs: Any) -> Any: ...
    @boundingBox.setter
    def boundingBox(*args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def childCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def closestPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createWithEditPoints(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cvPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cvPositions(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cvs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagRoot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def degree(*args: Any, **kwargs: Any) -> Any: ...
    @degree.setter
    def degree(*args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def distanceToPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def duplicate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findLengthFromParam(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findParamFromLength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def form(*args: Any, **kwargs: Any) -> Any: ...
    @form.setter
    def form(*args: Any, **kwargs: Any) -> Any: ...
    def fullPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectingAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllPaths(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedSetsAndMembers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDerivativesAtParam(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getParamAtPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPointAtParam(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def hasHistoryOnCreate(*args: Any, **kwargs: Any) -> Any: ...
    @hasHistoryOnCreate.setter
    def hasHistoryOnCreate(*args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasParent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def inModel(*args: Any, **kwargs: Any) -> Any: ...
    @inModel.setter
    def inModel(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def inUnderWorld(*args: Any, **kwargs: Any) -> Any: ...
    @inUnderWorld.setter
    def inUnderWorld(*args: Any, **kwargs: Any) -> Any: ...
    def instanceCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isChildOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isDefaultNode(*args: Any, **kwargs: Any) -> Any: ...
    @isDefaultNode.setter
    def isDefaultNode(*args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isFromReferencedFile(*args: Any, **kwargs: Any) -> Any: ...
    @isFromReferencedFile.setter
    def isFromReferencedFile(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isInstanceable(*args: Any, **kwargs: Any) -> Any: ...
    @isInstanceable.setter
    def isInstanceable(*args: Any, **kwargs: Any) -> Any: ...
    def isInstanced(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstancedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isIntermediateObject(*args: Any, **kwargs: Any) -> Any: ...
    @isIntermediateObject.setter
    def isIntermediateObject(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isLocked(*args: Any, **kwargs: Any) -> Any: ...
    @isLocked.setter
    def isLocked(*args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isParamOnCurve(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isParentOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isPlanar(*args: Any, **kwargs: Any) -> Any: ...
    @isPlanar.setter
    def isPlanar(*args: Any, **kwargs: Any) -> Any: ...
    def isPointOnCurve(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isShared(*args: Any, **kwargs: Any) -> Any: ...
    @isShared.setter
    def isShared(*args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kClosed: int = ...
    kExtensionAttr: int = ...
    kFindParamTolerance: float = ...
    kInvalid: int = ...
    kInvalidAttr: int = ...
    kLast: int = ...
    kLocalDynamicAttr: int = ...
    kNextPos: int = ...
    kNormalAttr: int = ...
    kOpen: int = ...
    kPeriodic: int = ...
    kPointTolerance: float = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    def knot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def knotDomain(*args: Any, **kwargs: Any) -> Any: ...
    @knotDomain.setter
    def knotDomain(*args: Any, **kwargs: Any) -> Any: ...
    def knots(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def makeMultipleEndKnots(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def namespace(*args: Any, **kwargs: Any) -> Any: ...
    @namespace.setter
    def namespace(*args: Any, **kwargs: Any) -> Any: ...
    def normal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def numCVs(*args: Any, **kwargs: Any) -> Any: ...
    @numCVs.setter
    def numCVs(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def numKnots(*args: Any, **kwargs: Any) -> Any: ...
    @numKnots.setter
    def numKnots(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def numSpans(*args: Any, **kwargs: Any) -> Any: ...
    @numSpans.setter
    def numSpans(*args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def objectColor(*args: Any, **kwargs: Any) -> Any: ...
    @objectColor.setter
    def objectColor(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def objectColorRGB(*args: Any, **kwargs: Any) -> Any: ...
    @objectColorRGB.setter
    def objectColorRGB(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def objectColorType(*args: Any, **kwargs: Any) -> Any: ...
    @objectColorType.setter
    def objectColorType(*args: Any, **kwargs: Any) -> Any: ...
    def parent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def partialPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def planeNormal(*args: Any, **kwargs: Any) -> Any: ...
    @planeNormal.setter
    def planeNormal(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def pluginName(*args: Any, **kwargs: Any) -> Any: ...
    @pluginName.setter
    def pluginName(*args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChildAt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeKnot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reverse(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCVPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCVPositions(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setKnot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setKnots(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def tangent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def transformationMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def typeId(*args: Any, **kwargs: Any) -> Any: ...
    @typeId.setter
    def typeId(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def typeName(*args: Any, **kwargs: Any) -> Any: ...
    @typeName.setter
    def typeName(*args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def updateCurve(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def useObjectColor(*args: Any, **kwargs: Any) -> Any: ...
    @useObjectColor.setter
    def useObjectColor(*args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFnNurbsCurveData(MFnGeometryData):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addComponentTag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addObjectGroup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addObjectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def changeObjectGroupId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def componentTagContents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def componentTagExpressionSubsetState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def componentTagType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def componentTags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copyObjectGroups(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasComponentTag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObjectGroup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isIdentity(*args: Any, **kwargs: Any) -> Any: ...
    @isIdentity.setter
    def isIdentity(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isNotIdentity(*args: Any, **kwargs: Any) -> Any: ...
    @isNotIdentity.setter
    def isNotIdentity(*args: Any, **kwargs: Any) -> Any: ...
    kAny: int = ...
    kAuto: int = ...
    kCompleteGroup: int = ...
    kComponentList: int = ...
    kDoubleArray: int = ...
    kDynArrayAttrs: int = ...
    kDynSweptGeometry: int = ...
    kEdges: int = ...
    kEmptyGroup: int = ...
    kFaces: int = ...
    kFalloffFunction: int = ...
    kFloatArray: int = ...
    kIntArray: int = ...
    kInvalid: int = ...
    kInvalidGroup: int = ...
    kLast: int = ...
    kLattice: int = ...
    kMatrix: int = ...
    kMatrixArray: int = ...
    kMesh: int = ...
    kNId: int = ...
    kNObject: int = ...
    kNull: int = ...
    kNumeric: int = ...
    kNurbsCurve: int = ...
    kNurbsSurface: int = ...
    kPartialGroup: int = ...
    kPlugin: int = ...
    kPluginGeometry: int = ...
    kPointArray: int = ...
    kSphere: int = ...
    kString: int = ...
    kStringArray: int = ...
    kSubdSurface: int = ...
    kUnsupported: int = ...
    kVectorArray: int = ...
    kVerts: int = ...
    @property
    def matrix(*args: Any, **kwargs: Any) -> Any: ...
    @matrix.setter
    def matrix(*args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def objectGroupCount(*args: Any, **kwargs: Any) -> Any: ...
    @objectGroupCount.setter
    def objectGroupCount(*args: Any, **kwargs: Any) -> Any: ...
    def objectGroupSubsetState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeComponentTag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeObjectGroup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeObjectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def renameComponentTag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def resolveComponentTagExpression(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setComponentTagContents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFnNurbsSurface(MFnDagNode):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def area(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def assignUV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def assignUVs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def boundaryType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def boundingBox(*args: Any, **kwargs: Any) -> Any: ...
    @boundingBox.setter
    def boundingBox(*args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def childCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clearUVs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def closestPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cvPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cvPositions(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cvsInU(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cvsInV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagRoot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def dataObject(*args: Any, **kwargs: Any) -> Any: ...
    @dataObject.setter
    def dataObject(*args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def degreeInU(*args: Any, **kwargs: Any) -> Any: ...
    @degreeInU.setter
    def degreeInU(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def degreeInV(*args: Any, **kwargs: Any) -> Any: ...
    @degreeInV.setter
    def degreeInV(*args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def distanceToPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def duplicate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def edge(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def formInU(*args: Any, **kwargs: Any) -> Any: ...
    @formInU.setter
    def formInU(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def formInV(*args: Any, **kwargs: Any) -> Any: ...
    @formInV.setter
    def formInV(*args: Any, **kwargs: Any) -> Any: ...
    def fullPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectingAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllPaths(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAssignedUVs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedSetsAndMembers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedShaders(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDerivativesAtParam(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getParamAtPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPatchUV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPatchUVid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPatchUVs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPointAtParam(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getUV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getUVs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def hasHistoryOnCreate(*args: Any, **kwargs: Any) -> Any: ...
    @hasHistoryOnCreate.setter
    def hasHistoryOnCreate(*args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasParent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def inModel(*args: Any, **kwargs: Any) -> Any: ...
    @inModel.setter
    def inModel(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def inUnderWorld(*args: Any, **kwargs: Any) -> Any: ...
    @inUnderWorld.setter
    def inUnderWorld(*args: Any, **kwargs: Any) -> Any: ...
    def instanceCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def intersect(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isBezier(*args: Any, **kwargs: Any) -> Any: ...
    @isBezier.setter
    def isBezier(*args: Any, **kwargs: Any) -> Any: ...
    def isChildOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isDefaultNode(*args: Any, **kwargs: Any) -> Any: ...
    @isDefaultNode.setter
    def isDefaultNode(*args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlipNorm(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isFoldedOnBispan(*args: Any, **kwargs: Any) -> Any: ...
    @isFoldedOnBispan.setter
    def isFoldedOnBispan(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isFromReferencedFile(*args: Any, **kwargs: Any) -> Any: ...
    @isFromReferencedFile.setter
    def isFromReferencedFile(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isInstanceable(*args: Any, **kwargs: Any) -> Any: ...
    @isInstanceable.setter
    def isInstanceable(*args: Any, **kwargs: Any) -> Any: ...
    def isInstanced(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstancedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isIntermediateObject(*args: Any, **kwargs: Any) -> Any: ...
    @isIntermediateObject.setter
    def isIntermediateObject(*args: Any, **kwargs: Any) -> Any: ...
    def isKnotU(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isKnotV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isLocked(*args: Any, **kwargs: Any) -> Any: ...
    @isLocked.setter
    def isLocked(*args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isParamOnSurface(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isParentOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isPointInTrimmedRegion(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isPointOnSurface(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isShared(*args: Any, **kwargs: Any) -> Any: ...
    @isShared.setter
    def isShared(*args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isTrimmedSurface(*args: Any, **kwargs: Any) -> Any: ...
    @isTrimmedSurface.setter
    def isTrimmedSurface(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isUniform(*args: Any, **kwargs: Any) -> Any: ...
    @isUniform.setter
    def isUniform(*args: Any, **kwargs: Any) -> Any: ...
    kClosed: int = ...
    kClosedSegment: int = ...
    kExtensionAttr: int = ...
    kInner: int = ...
    kInvalid: int = ...
    kInvalidAttr: int = ...
    kInvalidBoundary: int = ...
    kLast: int = ...
    kLocalDynamicAttr: int = ...
    kNextPos: int = ...
    kNormalAttr: int = ...
    kOpen: int = ...
    kOuter: int = ...
    kPeriodic: int = ...
    kPointTolerance: float = ...
    kSegment: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    @property
    def knotDomainInU(*args: Any, **kwargs: Any) -> Any: ...
    @knotDomainInU.setter
    def knotDomainInU(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def knotDomainInV(*args: Any, **kwargs: Any) -> Any: ...
    @knotDomainInV.setter
    def knotDomainInV(*args: Any, **kwargs: Any) -> Any: ...
    def knotInU(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def knotInV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def knotsInU(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def knotsInV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def namespace(*args: Any, **kwargs: Any) -> Any: ...
    @namespace.setter
    def namespace(*args: Any, **kwargs: Any) -> Any: ...
    def normal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numBoundaries(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def numCVsInU(*args: Any, **kwargs: Any) -> Any: ...
    @numCVsInU.setter
    def numCVsInU(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def numCVsInV(*args: Any, **kwargs: Any) -> Any: ...
    @numCVsInV.setter
    def numCVsInV(*args: Any, **kwargs: Any) -> Any: ...
    def numEdges(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def numKnotsInU(*args: Any, **kwargs: Any) -> Any: ...
    @numKnotsInU.setter
    def numKnotsInU(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def numKnotsInV(*args: Any, **kwargs: Any) -> Any: ...
    @numKnotsInV.setter
    def numKnotsInV(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def numNonZeroSpansInU(*args: Any, **kwargs: Any) -> Any: ...
    @numNonZeroSpansInU.setter
    def numNonZeroSpansInU(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def numNonZeroSpansInV(*args: Any, **kwargs: Any) -> Any: ...
    @numNonZeroSpansInV.setter
    def numNonZeroSpansInV(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def numPatches(*args: Any, **kwargs: Any) -> Any: ...
    @numPatches.setter
    def numPatches(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def numPatchesInU(*args: Any, **kwargs: Any) -> Any: ...
    @numPatchesInU.setter
    def numPatchesInU(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def numPatchesInV(*args: Any, **kwargs: Any) -> Any: ...
    @numPatchesInV.setter
    def numPatchesInV(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def numRegions(*args: Any, **kwargs: Any) -> Any: ...
    @numRegions.setter
    def numRegions(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def numSpansInU(*args: Any, **kwargs: Any) -> Any: ...
    @numSpansInU.setter
    def numSpansInU(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def numSpansInV(*args: Any, **kwargs: Any) -> Any: ...
    @numSpansInV.setter
    def numSpansInV(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def numUVs(*args: Any, **kwargs: Any) -> Any: ...
    @numUVs.setter
    def numUVs(*args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def objectColor(*args: Any, **kwargs: Any) -> Any: ...
    @objectColor.setter
    def objectColor(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def objectColorRGB(*args: Any, **kwargs: Any) -> Any: ...
    @objectColorRGB.setter
    def objectColorRGB(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def objectColorType(*args: Any, **kwargs: Any) -> Any: ...
    @objectColorType.setter
    def objectColorType(*args: Any, **kwargs: Any) -> Any: ...
    def parent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def partialPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def pluginName(*args: Any, **kwargs: Any) -> Any: ...
    @pluginName.setter
    def pluginName(*args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def projectCurve(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChildAt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeKnotInU(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeKnotInV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeOneKnotInU(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeOneKnotInV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCVPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCVPositions(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setKnotInU(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setKnotInV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setKnotsInU(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setKnotsInV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUVs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def tangents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def transformationMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def trim(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def typeId(*args: Any, **kwargs: Any) -> Any: ...
    @typeId.setter
    def typeId(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def typeName(*args: Any, **kwargs: Any) -> Any: ...
    @typeName.setter
    def typeName(*args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def updateSurface(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def useObjectColor(*args: Any, **kwargs: Any) -> Any: ...
    @useObjectColor.setter
    def useObjectColor(*args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFnNurbsSurfaceData(MFnGeometryData):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addComponentTag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addObjectGroup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addObjectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def changeObjectGroupId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def componentTagContents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def componentTagExpressionSubsetState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def componentTagType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def componentTags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copyObjectGroups(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasComponentTag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObjectGroup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isIdentity(*args: Any, **kwargs: Any) -> Any: ...
    @isIdentity.setter
    def isIdentity(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isNotIdentity(*args: Any, **kwargs: Any) -> Any: ...
    @isNotIdentity.setter
    def isNotIdentity(*args: Any, **kwargs: Any) -> Any: ...
    kAny: int = ...
    kAuto: int = ...
    kCompleteGroup: int = ...
    kComponentList: int = ...
    kDoubleArray: int = ...
    kDynArrayAttrs: int = ...
    kDynSweptGeometry: int = ...
    kEdges: int = ...
    kEmptyGroup: int = ...
    kFaces: int = ...
    kFalloffFunction: int = ...
    kFloatArray: int = ...
    kIntArray: int = ...
    kInvalid: int = ...
    kInvalidGroup: int = ...
    kLast: int = ...
    kLattice: int = ...
    kMatrix: int = ...
    kMatrixArray: int = ...
    kMesh: int = ...
    kNId: int = ...
    kNObject: int = ...
    kNull: int = ...
    kNumeric: int = ...
    kNurbsCurve: int = ...
    kNurbsSurface: int = ...
    kPartialGroup: int = ...
    kPlugin: int = ...
    kPluginGeometry: int = ...
    kPointArray: int = ...
    kSphere: int = ...
    kString: int = ...
    kStringArray: int = ...
    kSubdSurface: int = ...
    kUnsupported: int = ...
    kVectorArray: int = ...
    kVerts: int = ...
    @property
    def matrix(*args: Any, **kwargs: Any) -> Any: ...
    @matrix.setter
    def matrix(*args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def objectGroupCount(*args: Any, **kwargs: Any) -> Any: ...
    @objectGroupCount.setter
    def objectGroupCount(*args: Any, **kwargs: Any) -> Any: ...
    def objectGroupSubsetState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeComponentTag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeObjectGroup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeObjectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def renameComponentTag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def resolveComponentTagExpression(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setComponentTagContents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFnPlugin(MFnBase):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def apiVersion(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterAttributePatternFactory(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterCommand(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterContextCommand(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterDragAndDropBehavior(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlugin(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def loadPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registerAttributePatternFactory(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registerCommand(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registerContextCommand(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registerData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registerDragAndDropBehavior(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registerNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registerShape(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def vendor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def version(*args: Any, **kwargs: Any) -> Any: ...
    @version.setter
    def version(*args: Any, **kwargs: Any) -> Any: ...

class MFnPluginData(MFnData):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def data(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAny: int = ...
    kComponentList: int = ...
    kDoubleArray: int = ...
    kDynArrayAttrs: int = ...
    kDynSweptGeometry: int = ...
    kFalloffFunction: int = ...
    kFloatArray: int = ...
    kIntArray: int = ...
    kInvalid: int = ...
    kLast: int = ...
    kLattice: int = ...
    kMatrix: int = ...
    kMatrixArray: int = ...
    kMesh: int = ...
    kNId: int = ...
    kNObject: int = ...
    kNumeric: int = ...
    kNurbsCurve: int = ...
    kNurbsSurface: int = ...
    kPlugin: int = ...
    kPluginGeometry: int = ...
    kPointArray: int = ...
    kSphere: int = ...
    kString: int = ...
    kStringArray: int = ...
    kSubdSurface: int = ...
    kVectorArray: int = ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFnPointArrayData(MFnData):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __delitem__(self: Self, key: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __getitem__(self: Self, key: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __len__(self: Self) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __setitem__(self: Self, key: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def array(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copyTo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAny: int = ...
    kComponentList: int = ...
    kDoubleArray: int = ...
    kDynArrayAttrs: int = ...
    kDynSweptGeometry: int = ...
    kFalloffFunction: int = ...
    kFloatArray: int = ...
    kIntArray: int = ...
    kInvalid: int = ...
    kLast: int = ...
    kLattice: int = ...
    kMatrix: int = ...
    kMatrixArray: int = ...
    kMesh: int = ...
    kNId: int = ...
    kNObject: int = ...
    kNumeric: int = ...
    kNurbsCurve: int = ...
    kNurbsSurface: int = ...
    kPlugin: int = ...
    kPluginGeometry: int = ...
    kPointArray: int = ...
    kSphere: int = ...
    kString: int = ...
    kStringArray: int = ...
    kSubdSurface: int = ...
    kVectorArray: int = ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFnReference(MFnDependencyNode):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def associatedNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def containsNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def containsNodeExactly(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fileName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectingAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def ignoreReferenceEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isDefaultNode(*args: Any, **kwargs: Any) -> Any: ...
    @isDefaultNode.setter
    def isDefaultNode(*args: Any, **kwargs: Any) -> Any: ...
    def isExportEditsFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isFromReferencedFile(*args: Any, **kwargs: Any) -> Any: ...
    @isFromReferencedFile.setter
    def isFromReferencedFile(*args: Any, **kwargs: Any) -> Any: ...
    def isLoaded(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isShared(*args: Any, **kwargs: Any) -> Any: ...
    @isShared.setter
    def isShared(*args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValidReference(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNormalAttr: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def namespace(*args: Any, **kwargs: Any) -> Any: ...
    @namespace.setter
    def namespace(*args: Any, **kwargs: Any) -> Any: ...
    def nodes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentAssembly(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentFileName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentReference(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def pluginName(*args: Any, **kwargs: Any) -> Any: ...
    @pluginName.setter
    def pluginName(*args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIgnoreReferenceEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def typeId(*args: Any, **kwargs: Any) -> Any: ...
    @typeId.setter
    def typeId(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def typeName(*args: Any, **kwargs: Any) -> Any: ...
    @typeName.setter
    def typeName(*args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFnSet(MFnDependencyNode):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addMember(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addMembers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def annotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectingAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getIntersection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getMemberPaths(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getMembers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getUnion(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasRestrictions(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def intersectsWith(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isDefaultNode(*args: Any, **kwargs: Any) -> Any: ...
    @isDefaultNode.setter
    def isDefaultNode(*args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isFromReferencedFile(*args: Any, **kwargs: Any) -> Any: ...
    @isFromReferencedFile.setter
    def isFromReferencedFile(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isLocked(*args: Any, **kwargs: Any) -> Any: ...
    @isLocked.setter
    def isLocked(*args: Any, **kwargs: Any) -> Any: ...
    def isMember(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isShared(*args: Any, **kwargs: Any) -> Any: ...
    @isShared.setter
    def isShared(*args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kEdgesOnly: int = ...
    kEditPointsOnly: int = ...
    kExtensionAttr: int = ...
    kFacetsOnly: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNone: int = ...
    kNormalAttr: int = ...
    kRenderableOnly: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    kVerticesOnly: int = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def namespace(*args: Any, **kwargs: Any) -> Any: ...
    @namespace.setter
    def namespace(*args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def pluginName(*args: Any, **kwargs: Any) -> Any: ...
    @pluginName.setter
    def pluginName(*args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeMember(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeMembers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def restriction(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAnnotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def typeId(*args: Any, **kwargs: Any) -> Any: ...
    @typeId.setter
    def typeId(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def typeName(*args: Any, **kwargs: Any) -> Any: ...
    @typeName.setter
    def typeName(*args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFnSingleIndexedComponent(MFnComponent):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addElement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addElements(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def componentType(*args: Any, **kwargs: Any) -> Any: ...
    @componentType.setter
    def componentType(*args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def element(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def elementCount(*args: Any, **kwargs: Any) -> Any: ...
    @elementCount.setter
    def elementCount(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def elementMax(*args: Any, **kwargs: Any) -> Any: ...
    @elementMax.setter
    def elementMax(*args: Any, **kwargs: Any) -> Any: ...
    def getCompleteData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getElements(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def hasWeights(*args: Any, **kwargs: Any) -> Any: ...
    @hasWeights.setter
    def hasWeights(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isComplete(*args: Any, **kwargs: Any) -> Any: ...
    @isComplete.setter
    def isComplete(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isEmpty(*args: Any, **kwargs: Any) -> Any: ...
    @isEmpty.setter
    def isEmpty(*args: Any, **kwargs: Any) -> Any: ...
    def isEqual(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCompleteData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def weight(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFnStringArrayData(MFnData):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __delitem__(self: Self, key: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __getitem__(self: Self, key: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __len__(self: Self) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __setitem__(self: Self, key: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def array(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAny: int = ...
    kComponentList: int = ...
    kDoubleArray: int = ...
    kDynArrayAttrs: int = ...
    kDynSweptGeometry: int = ...
    kFalloffFunction: int = ...
    kFloatArray: int = ...
    kIntArray: int = ...
    kInvalid: int = ...
    kLast: int = ...
    kLattice: int = ...
    kMatrix: int = ...
    kMatrixArray: int = ...
    kMesh: int = ...
    kNId: int = ...
    kNObject: int = ...
    kNumeric: int = ...
    kNurbsCurve: int = ...
    kNurbsSurface: int = ...
    kPlugin: int = ...
    kPluginGeometry: int = ...
    kPointArray: int = ...
    kSphere: int = ...
    kString: int = ...
    kStringArray: int = ...
    kSubdSurface: int = ...
    kVectorArray: int = ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFnStringData(MFnData):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAny: int = ...
    kComponentList: int = ...
    kDoubleArray: int = ...
    kDynArrayAttrs: int = ...
    kDynSweptGeometry: int = ...
    kFalloffFunction: int = ...
    kFloatArray: int = ...
    kIntArray: int = ...
    kInvalid: int = ...
    kLast: int = ...
    kLattice: int = ...
    kMatrix: int = ...
    kMatrixArray: int = ...
    kMesh: int = ...
    kNId: int = ...
    kNObject: int = ...
    kNumeric: int = ...
    kNurbsCurve: int = ...
    kNurbsSurface: int = ...
    kPlugin: int = ...
    kPluginGeometry: int = ...
    kPointArray: int = ...
    kSphere: int = ...
    kString: int = ...
    kStringArray: int = ...
    kSubdSurface: int = ...
    kVectorArray: int = ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def string(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFnTransform(MFnDagNode):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def boundingBox(*args: Any, **kwargs: Any) -> Any: ...
    @boundingBox.setter
    def boundingBox(*args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def childCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clearRestPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagRoot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def duplicate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fullPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectingAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllPaths(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedSetsAndMembers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasParent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def inModel(*args: Any, **kwargs: Any) -> Any: ...
    @inModel.setter
    def inModel(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def inUnderWorld(*args: Any, **kwargs: Any) -> Any: ...
    @inUnderWorld.setter
    def inUnderWorld(*args: Any, **kwargs: Any) -> Any: ...
    def instanceCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isChildOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isDefaultNode(*args: Any, **kwargs: Any) -> Any: ...
    @isDefaultNode.setter
    def isDefaultNode(*args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isFromReferencedFile(*args: Any, **kwargs: Any) -> Any: ...
    @isFromReferencedFile.setter
    def isFromReferencedFile(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isInstanceable(*args: Any, **kwargs: Any) -> Any: ...
    @isInstanceable.setter
    def isInstanceable(*args: Any, **kwargs: Any) -> Any: ...
    def isInstanced(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstancedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isIntermediateObject(*args: Any, **kwargs: Any) -> Any: ...
    @isIntermediateObject.setter
    def isIntermediateObject(*args: Any, **kwargs: Any) -> Any: ...
    def isLimited(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isLocked(*args: Any, **kwargs: Any) -> Any: ...
    @isLocked.setter
    def isLocked(*args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isParentOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isShared(*args: Any, **kwargs: Any) -> Any: ...
    @isShared.setter
    def isShared(*args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNextPos: int = ...
    kNormalAttr: int = ...
    kRotateMaxX: int = ...
    kRotateMaxY: int = ...
    kRotateMaxZ: int = ...
    kRotateMinX: int = ...
    kRotateMinY: int = ...
    kRotateMinZ: int = ...
    kScaleMaxX: int = ...
    kScaleMaxY: int = ...
    kScaleMaxZ: int = ...
    kScaleMinX: int = ...
    kScaleMinY: int = ...
    kScaleMinZ: int = ...
    kShearMaxXY: int = ...
    kShearMaxXZ: int = ...
    kShearMaxYZ: int = ...
    kShearMinXY: int = ...
    kShearMinXZ: int = ...
    kShearMinYZ: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    kTranslateMaxX: int = ...
    kTranslateMaxY: int = ...
    kTranslateMaxZ: int = ...
    kTranslateMinX: int = ...
    kTranslateMinY: int = ...
    kTranslateMinZ: int = ...
    def limitValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def namespace(*args: Any, **kwargs: Any) -> Any: ...
    @namespace.setter
    def namespace(*args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def objectColor(*args: Any, **kwargs: Any) -> Any: ...
    @objectColor.setter
    def objectColor(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def objectColorRGB(*args: Any, **kwargs: Any) -> Any: ...
    @objectColorRGB.setter
    def objectColorRGB(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def objectColorType(*args: Any, **kwargs: Any) -> Any: ...
    @objectColorType.setter
    def objectColorType(*args: Any, **kwargs: Any) -> Any: ...
    def parent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def partialPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def pluginName(*args: Any, **kwargs: Any) -> Any: ...
    @pluginName.setter
    def pluginName(*args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChildAt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def resetFromRestPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def restPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateByComponents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateOrientation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotatePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotatePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotationComponents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotationOrder(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scaleBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scalePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scalePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRestPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotateOrientation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotatePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotatePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotationComponents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotationOrder(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScalePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScalePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setShear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTransformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shearBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def transformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def transformationMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def translateBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def translation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def typeId(*args: Any, **kwargs: Any) -> Any: ...
    @typeId.setter
    def typeId(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def typeName(*args: Any, **kwargs: Any) -> Any: ...
    @typeName.setter
    def typeName(*args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def useObjectColor(*args: Any, **kwargs: Any) -> Any: ...
    @useObjectColor.setter
    def useObjectColor(*args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFnTripleIndexedComponent(MFnComponent):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addElement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addElements(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def componentType(*args: Any, **kwargs: Any) -> Any: ...
    @componentType.setter
    def componentType(*args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def elementCount(*args: Any, **kwargs: Any) -> Any: ...
    @elementCount.setter
    def elementCount(*args: Any, **kwargs: Any) -> Any: ...
    def getCompleteData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getElement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getElements(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def hasWeights(*args: Any, **kwargs: Any) -> Any: ...
    @hasWeights.setter
    def hasWeights(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isComplete(*args: Any, **kwargs: Any) -> Any: ...
    @isComplete.setter
    def isComplete(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isEmpty(*args: Any, **kwargs: Any) -> Any: ...
    @isEmpty.setter
    def isEmpty(*args: Any, **kwargs: Any) -> Any: ...
    def isEqual(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCompleteData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def weight(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFnTypedAttribute(MFnAttribute):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def accepts(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def acceptsAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addToCategory(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def affectsAppearance(*args: Any, **kwargs: Any) -> Any: ...
    @affectsAppearance.setter
    def affectsAppearance(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def affectsWorldSpace(*args: Any, **kwargs: Any) -> Any: ...
    @affectsWorldSpace.setter
    def affectsWorldSpace(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def array(*args: Any, **kwargs: Any) -> Any: ...
    @array.setter
    def array(*args: Any, **kwargs: Any) -> Any: ...
    def attrType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def cached(*args: Any, **kwargs: Any) -> Any: ...
    @cached.setter
    def cached(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def channelBox(*args: Any, **kwargs: Any) -> Any: ...
    @channelBox.setter
    def channelBox(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def connectable(*args: Any, **kwargs: Any) -> Any: ...
    @connectable.setter
    def connectable(*args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def default(*args: Any, **kwargs: Any) -> Any: ...
    @default.setter
    def default(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def disconnectBehavior(*args: Any, **kwargs: Any) -> Any: ...
    @disconnectBehavior.setter
    def disconnectBehavior(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def dynamic(*args: Any, **kwargs: Any) -> Any: ...
    @dynamic.setter
    def dynamic(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def extension(*args: Any, **kwargs: Any) -> Any: ...
    @extension.setter
    def extension(*args: Any, **kwargs: Any) -> Any: ...
    def getAddAttrCmd(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasCategory(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def hidden(*args: Any, **kwargs: Any) -> Any: ...
    @hidden.setter
    def hidden(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def indeterminant(*args: Any, **kwargs: Any) -> Any: ...
    @indeterminant.setter
    def indeterminant(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def indexMatters(*args: Any, **kwargs: Any) -> Any: ...
    @indexMatters.setter
    def indexMatters(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def internal(*args: Any, **kwargs: Any) -> Any: ...
    @internal.setter
    def internal(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isProxyAttribute(*args: Any, **kwargs: Any) -> Any: ...
    @isProxyAttribute.setter
    def isProxyAttribute(*args: Any, **kwargs: Any) -> Any: ...
    kDelete: int = ...
    kNothing: int = ...
    kReset: int = ...
    @property
    def keyable(*args: Any, **kwargs: Any) -> Any: ...
    @keyable.setter
    def keyable(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def name(*args: Any, **kwargs: Any) -> Any: ...
    @name.setter
    def name(*args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def parent(*args: Any, **kwargs: Any) -> Any: ...
    @parent.setter
    def parent(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def readable(*args: Any, **kwargs: Any) -> Any: ...
    @readable.setter
    def readable(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def renderSource(*args: Any, **kwargs: Any) -> Any: ...
    @renderSource.setter
    def renderSource(*args: Any, **kwargs: Any) -> Any: ...
    def setNiceNameOverride(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def shortName(*args: Any, **kwargs: Any) -> Any: ...
    @shortName.setter
    def shortName(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def storable(*args: Any, **kwargs: Any) -> Any: ...
    @storable.setter
    def storable(*args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def usedAsColor(*args: Any, **kwargs: Any) -> Any: ...
    @usedAsColor.setter
    def usedAsColor(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def usedAsFilename(*args: Any, **kwargs: Any) -> Any: ...
    @usedAsFilename.setter
    def usedAsFilename(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def usesArrayDataBuilder(*args: Any, **kwargs: Any) -> Any: ...
    @usesArrayDataBuilder.setter
    def usesArrayDataBuilder(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def worldSpace(*args: Any, **kwargs: Any) -> Any: ...
    @worldSpace.setter
    def worldSpace(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def writable(*args: Any, **kwargs: Any) -> Any: ...
    @writable.setter
    def writable(*args: Any, **kwargs: Any) -> Any: ...

class MFnUInt64ArrayData(MFnData):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __delitem__(self: Self, key: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __getitem__(self: Self, key: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __len__(self: Self) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __setitem__(self: Self, key: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def array(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copyTo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAny: int = ...
    kComponentList: int = ...
    kDoubleArray: int = ...
    kDynArrayAttrs: int = ...
    kDynSweptGeometry: int = ...
    kFalloffFunction: int = ...
    kFloatArray: int = ...
    kIntArray: int = ...
    kInvalid: int = ...
    kLast: int = ...
    kLattice: int = ...
    kMatrix: int = ...
    kMatrixArray: int = ...
    kMesh: int = ...
    kNId: int = ...
    kNObject: int = ...
    kNumeric: int = ...
    kNurbsCurve: int = ...
    kNurbsSurface: int = ...
    kPlugin: int = ...
    kPluginGeometry: int = ...
    kPointArray: int = ...
    kSphere: int = ...
    kString: int = ...
    kStringArray: int = ...
    kSubdSurface: int = ...
    kVectorArray: int = ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFnUnitAttribute(MFnAttribute):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def accepts(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def acceptsAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addToCategory(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def affectsAppearance(*args: Any, **kwargs: Any) -> Any: ...
    @affectsAppearance.setter
    def affectsAppearance(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def affectsWorldSpace(*args: Any, **kwargs: Any) -> Any: ...
    @affectsWorldSpace.setter
    def affectsWorldSpace(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def array(*args: Any, **kwargs: Any) -> Any: ...
    @array.setter
    def array(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def cached(*args: Any, **kwargs: Any) -> Any: ...
    @cached.setter
    def cached(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def channelBox(*args: Any, **kwargs: Any) -> Any: ...
    @channelBox.setter
    def channelBox(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def connectable(*args: Any, **kwargs: Any) -> Any: ...
    @connectable.setter
    def connectable(*args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def default(*args: Any, **kwargs: Any) -> Any: ...
    @default.setter
    def default(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def disconnectBehavior(*args: Any, **kwargs: Any) -> Any: ...
    @disconnectBehavior.setter
    def disconnectBehavior(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def dynamic(*args: Any, **kwargs: Any) -> Any: ...
    @dynamic.setter
    def dynamic(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def extension(*args: Any, **kwargs: Any) -> Any: ...
    @extension.setter
    def extension(*args: Any, **kwargs: Any) -> Any: ...
    def getAddAttrCmd(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getMax(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getMin(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getSoftMax(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getSoftMin(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasCategory(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasMax(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasMin(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasSoftMax(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasSoftMin(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def hidden(*args: Any, **kwargs: Any) -> Any: ...
    @hidden.setter
    def hidden(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def indeterminant(*args: Any, **kwargs: Any) -> Any: ...
    @indeterminant.setter
    def indeterminant(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def indexMatters(*args: Any, **kwargs: Any) -> Any: ...
    @indexMatters.setter
    def indexMatters(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def internal(*args: Any, **kwargs: Any) -> Any: ...
    @internal.setter
    def internal(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isProxyAttribute(*args: Any, **kwargs: Any) -> Any: ...
    @isProxyAttribute.setter
    def isProxyAttribute(*args: Any, **kwargs: Any) -> Any: ...
    kAngle: int = ...
    kDelete: int = ...
    kDistance: int = ...
    kInvalid: int = ...
    kLast: int = ...
    kNothing: int = ...
    kReset: int = ...
    kTime: int = ...
    @property
    def keyable(*args: Any, **kwargs: Any) -> Any: ...
    @keyable.setter
    def keyable(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def name(*args: Any, **kwargs: Any) -> Any: ...
    @name.setter
    def name(*args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def parent(*args: Any, **kwargs: Any) -> Any: ...
    @parent.setter
    def parent(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def readable(*args: Any, **kwargs: Any) -> Any: ...
    @readable.setter
    def readable(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def renderSource(*args: Any, **kwargs: Any) -> Any: ...
    @renderSource.setter
    def renderSource(*args: Any, **kwargs: Any) -> Any: ...
    def setMax(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMin(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setNiceNameOverride(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSoftMax(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSoftMin(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def shortName(*args: Any, **kwargs: Any) -> Any: ...
    @shortName.setter
    def shortName(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def storable(*args: Any, **kwargs: Any) -> Any: ...
    @storable.setter
    def storable(*args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def unitType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def usedAsColor(*args: Any, **kwargs: Any) -> Any: ...
    @usedAsColor.setter
    def usedAsColor(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def usedAsFilename(*args: Any, **kwargs: Any) -> Any: ...
    @usedAsFilename.setter
    def usedAsFilename(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def usesArrayDataBuilder(*args: Any, **kwargs: Any) -> Any: ...
    @usesArrayDataBuilder.setter
    def usesArrayDataBuilder(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def worldSpace(*args: Any, **kwargs: Any) -> Any: ...
    @worldSpace.setter
    def worldSpace(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def writable(*args: Any, **kwargs: Any) -> Any: ...
    @writable.setter
    def writable(*args: Any, **kwargs: Any) -> Any: ...

class MFnVectorArrayData(MFnData):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __delitem__(self: Self, key: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __getitem__(self: Self, key: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __len__(self: Self) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __setitem__(self: Self, key: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def array(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copyTo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAny: int = ...
    kComponentList: int = ...
    kDoubleArray: int = ...
    kDynArrayAttrs: int = ...
    kDynSweptGeometry: int = ...
    kFalloffFunction: int = ...
    kFloatArray: int = ...
    kIntArray: int = ...
    kInvalid: int = ...
    kLast: int = ...
    kLattice: int = ...
    kMatrix: int = ...
    kMatrixArray: int = ...
    kMesh: int = ...
    kNId: int = ...
    kNObject: int = ...
    kNumeric: int = ...
    kNurbsCurve: int = ...
    kNurbsSurface: int = ...
    kPlugin: int = ...
    kPluginGeometry: int = ...
    kPointArray: int = ...
    kSphere: int = ...
    kString: int = ...
    kStringArray: int = ...
    kSubdSurface: int = ...
    kVectorArray: int = ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MGlobal(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addToModel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addToModelAt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def animSelectionMask(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def apiVersion(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clearSelectionList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def closeErrorLog(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def componentSelectionMask(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentToolContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def defaultErrorLogPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def disableStow(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def displayError(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def displayInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def displayWarning(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doErrorLogEntry(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def errorLogPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def errorLoggingIsOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def executeCommandOnIdle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def executeCommandStringResult(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAbsolutePathToResources(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getActiveSelectionList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAssociatedSets(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFunctionSetList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getHiliteList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getLiveList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPreselectionHiliteList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getRichSelection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getSelectionListByName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def initOptionVar(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isRedoing(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isSelected(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isUndoing(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isYAxisUp(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isZAxisUp(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAddToHeadOfList: int = ...
    kAddToList: int = ...
    kBaseUIMode: int = ...
    kBatch: int = ...
    kInteractive: int = ...
    kLibraryApp: int = ...
    kRemoveFromList: int = ...
    kReplaceList: int = ...
    kSelectComponentMode: int = ...
    kSelectLeafMode: int = ...
    kSelectObjectMode: int = ...
    kSelectRootMode: int = ...
    kSelectTemplateMode: int = ...
    kSurfaceSelectMethod: int = ...
    kWireframeSelectMethod: int = ...
    kXORWithList: int = ...
    def mayaFeatureSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def mayaName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def mayaState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def mayaVersion(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def miscSelectionMask(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectSelectionMask(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def optionVarDoubleValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def optionVarExists(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def optionVarIntValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def optionVarStringValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeFromModel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeOptionVar(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def resetToDefaultErrorLogPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def selectByName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def selectCommand(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def selectFromScreen(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def selectionMethod(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def selectionMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setActiveSelectionList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAnimSelectionMask(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setComponentSelectionMask(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDisableStow(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDisplayCVs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setErrorLogPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setHiliteList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMiscSelectionMask(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectSelectionMask(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setOptionVarValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPreselectionHiliteList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRichSelection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSelectionMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTrackSelectionOrderEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setYAxisUp(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setZAxisUp(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def sourceFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def startErrorLogging(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def stopErrorLogging(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def trackSelectionOrderEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def unselect(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def unselectByName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def upAxis(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def viewFrame(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MImage(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def depth(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def depthMap(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def filter(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def filterExists(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def floatPixels(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDepthMapRange(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDepthMapSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def haveDepth(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isRGBA(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kByte: int = ...
    kFloat: int = ...
    kHeightFieldBumpFormat: int = ...
    kNoFormat: int = ...
    kNormalMapBumpFormat: int = ...
    kUnknown: int = ...
    kUnknownFormat: int = ...
    def pixelType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pixels(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def readDepthMap(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def readFromFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def readFromTextureNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def release(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def resize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDepthMap(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFloatPixels(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPixels(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRGBA(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def verticalFlip(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def writeToFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def writeToFileWithDepth(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MInt64Array(object):
    def __add__(self: Self, value: Any) -> Any: ...
    def __contains__(self: Self, key: Any) -> Any: ...
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __delitem__(self: Self, key: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __getitem__(self: Self, key: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __iadd__(self: Self, value: Any) -> Any: ...
    def __imul__(self: Self, value: Any) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __len__(self: Self) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __mul__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __rmul__(self: Self, value: Any) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __setitem__(self: Self, key: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def append(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def sizeIncrement(*args: Any, **kwargs: Any) -> Any: ...
    @sizeIncrement.setter
    def sizeIncrement(*args: Any, **kwargs: Any) -> Any: ...

class MIntArray(object):
    def __add__(self: Self, value: Any) -> Any: ...
    def __contains__(self: Self, key: Any) -> Any: ...
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __delitem__(self: Self, key: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __getitem__(self: Self, key: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __iadd__(self: Self, value: Any) -> Any: ...
    def __imul__(self: Self, value: Any) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __len__(self: Self) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __mul__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __rmul__(self: Self, value: Any) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __setitem__(self: Self, key: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def append(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def sizeIncrement(*args: Any, **kwargs: Any) -> Any: ...
    @sizeIncrement.setter
    def sizeIncrement(*args: Any, **kwargs: Any) -> Any: ...

class MItCurveCV(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __iter__(self: Self) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __next__(self: Self) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentItem(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasHistoryOnCreate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def index(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDone(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def next(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def position(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def translateBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def updateCurve(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MItDag(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __iter__(self: Self) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __next__(self: Self) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentItem(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def depth(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fullPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllPaths(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def instanceCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDone(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanced(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def iter(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def iternext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kBreadthFirst: int = ...
    kDepthFirst: int = ...
    kInvalidType: int = ...
    def next(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def partialPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def prune(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def root(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def traversalType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def traverseUnderWorld(*args: Any, **kwargs: Any) -> Any: ...
    @traverseUnderWorld.setter
    def traverseUnderWorld(*args: Any, **kwargs: Any) -> Any: ...

class MItDependencyGraph(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __iter__(self: Self) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __next__(self: Self) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def currentDirection(*args: Any, **kwargs: Any) -> Any: ...
    @currentDirection.setter
    def currentDirection(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def currentFilter(*args: Any, **kwargs: Any) -> Any: ...
    @currentFilter.setter
    def currentFilter(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def currentLevel(*args: Any, **kwargs: Any) -> Any: ...
    @currentLevel.setter
    def currentLevel(*args: Any, **kwargs: Any) -> Any: ...
    def currentNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentNodeHasUnknownType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def currentRelationship(*args: Any, **kwargs: Any) -> Any: ...
    @currentRelationship.setter
    def currentRelationship(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def currentTraversal(*args: Any, **kwargs: Any) -> Any: ...
    @currentTraversal.setter
    def currentTraversal(*args: Any, **kwargs: Any) -> Any: ...
    def getNodePath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getNodesVisited(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPlugPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPlugsVisited(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDone(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def iter(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def iternext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kBreadthFirst: int = ...
    kConnectedTo: int = ...
    kDependsOn: int = ...
    kDepthFirst: int = ...
    kDownstream: int = ...
    kEvaluationGraph: int = ...
    kNodeLevel: int = ...
    kPlugLevel: int = ...
    kUpstream: int = ...
    def next(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def nodeDepth(*args: Any, **kwargs: Any) -> Any: ...
    @nodeDepth.setter
    def nodeDepth(*args: Any, **kwargs: Any) -> Any: ...
    def previousPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def prune(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def pruningOnFilter(*args: Any, **kwargs: Any) -> Any: ...
    @pruningOnFilter.setter
    def pruningOnFilter(*args: Any, **kwargs: Any) -> Any: ...
    def reset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def resetFilter(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def resetTo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rootNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rootPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def traversingOverWorldSpaceDependents(*args: Any, **kwargs: Any) -> Any: ...
    @traversingOverWorldSpaceDependents.setter
    def traversingOverWorldSpaceDependents(*args: Any, **kwargs: Any) -> Any: ...

class MItDependencyNodes(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __iter__(self: Self) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __next__(self: Self) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDone(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def iter(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def iternext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def next(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def thisNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MItGeometry(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __iter__(self: Self) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __next__(self: Self) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allPositions(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def component(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def count(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentItem(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def exactCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def index(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDone(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def iter(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def iternext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def next(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def normal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def position(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAllPositions(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def weight(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MItMeshEdge(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __iter__(self: Self) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __next__(self: Self) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def center(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectedToEdge(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectedToFace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def count(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentItem(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def geomChanged(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedEdges(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedFaces(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def index(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDone(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isSmooth(*args: Any, **kwargs: Any) -> Any: ...
    @isSmooth.setter
    def isSmooth(*args: Any, **kwargs: Any) -> Any: ...
    def iter(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def iternext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def next(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numConnectedEdges(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numConnectedFaces(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def onBoundary(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def point(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def updateSurface(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexId(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MItMeshFaceVertex(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __iter__(self: Self) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __next__(self: Self) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentItem(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def faceId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def faceVertexId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def geomChanged(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getBinormal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getColorIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getNormal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getTangent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getUV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getUVIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUVs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDone(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def iter(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def iternext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def next(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def normalId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def position(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def tangentId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def updateSurface(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexId(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MItMeshPolygon(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __iter__(self: Self) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __next__(self: Self) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def center(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def count(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentItem(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def geomChanged(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getArea(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getColorIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getColorIndices(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getColors(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedEdges(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedFaces(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedVertices(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getEdges(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getNormal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getNormals(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPointAtUV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPoints(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getTriangle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getTriangles(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getUV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getUVArea(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getUVAtPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getUVIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getUVIndexAndValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getUVSetNames(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getUVs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getVertices(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUVs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasValidTriangulation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def index(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isConnectedToEdge(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isConnectedToFace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isConnectedToVertex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isConvex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDone(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isHoled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLamina(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isPlanar(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isStarlike(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isUVReversed(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def iter(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def iternext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def next(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def normalIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numColors(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numConnectedEdges(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numConnectedFaces(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numTriangles(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def onBoundary(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def point(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def polygonVertexCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPoints(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUVs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def tangentIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def updateSurface(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def zeroArea(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def zeroUVArea(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MItMeshVertex(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __iter__(self: Self) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __next__(self: Self) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectedToEdge(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectedToFace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def count(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentItem(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def geomChanged(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getColorIndices(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getColors(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedEdges(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedFaces(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedVertices(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getNormal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getNormalIndices(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getNormals(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getOppositeVertex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getUV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getUVIndices(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getUVs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def index(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDone(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def iter(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def iternext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def next(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numConnectedEdges(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numConnectedFaces(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numUVs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def onBoundary(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def position(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUVs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def translateBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def updateSurface(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MItSelectionList(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __iter__(self: Self) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __next__(self: Self) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDagPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDependNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getStrings(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasComponents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDone(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def itemType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def iter(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def iternext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAnimSelectionItem: int = ...
    kDNselectionItem: int = ...
    kDagSelectionItem: int = ...
    kPlugSelectionItem: int = ...
    kUnknownItem: int = ...
    def next(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFilter(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MItSurfaceCV(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __iter__(self: Self) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __next__(self: Self) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentItem(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasHistoryOnCreate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def index(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDone(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isRowDone(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def iter(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def iternext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def next(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def nextRow(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def position(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def translateBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def updateSurface(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uvIndices(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MIteratorType(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def filterList(*args: Any, **kwargs: Any) -> Any: ...
    @filterList.setter
    def filterList(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def filterListEnabled(*args: Any, **kwargs: Any) -> Any: ...
    @filterListEnabled.setter
    def filterListEnabled(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def filterType(*args: Any, **kwargs: Any) -> Any: ...
    @filterType.setter
    def filterType(*args: Any, **kwargs: Any) -> Any: ...
    kMDagPathObject: int = ...
    kMObject: int = ...
    kMPlugObject: int = ...
    @property
    def objectType(*args: Any, **kwargs: Any) -> Any: ...
    @objectType.setter
    def objectType(*args: Any, **kwargs: Any) -> Any: ...

class MLockMessage(MMessage):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentCallbackId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAddAttr: int = ...
    kChildReorder: int = ...
    kCreateChildInstance: int = ...
    kCreateNodeInstance: int = ...
    kCreateParentInstance: int = ...
    kDefaultAction: int = ...
    kDelete: int = ...
    kDoAction: int = ...
    kDoNotDoAction: int = ...
    kGroup: int = ...
    kInvalid: int = ...
    kInvalidDAG: int = ...
    kInvalidPlug: int = ...
    kLast: int = ...
    kLastDAG: int = ...
    kLastPlug: int = ...
    kLockAttr: int = ...
    kLockNode: int = ...
    kPlugAttrValChange: int = ...
    kPlugConnect: int = ...
    kPlugDisconnect: int = ...
    kPlugLockAttr: int = ...
    kPlugRemoveAttr: int = ...
    kPlugRenameAttr: int = ...
    kPlugUnlockAttr: int = ...
    kRemoveAttr: int = ...
    kRename: int = ...
    kRenameAttr: int = ...
    kReparent: int = ...
    kUnGroup: int = ...
    kUnlockAttr: int = ...
    kUnlockNode: int = ...
    def nodeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setNodeLockDAGQueryCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setNodeLockQueryCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPlugLockQueryCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MMatrix(object):
    def __add__(self: Self, value: Any) -> Any: ...
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __delitem__(self: Self, key: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __getitem__(self: Self, key: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    __hash__: NoneType = ...
    def __iadd__(self: Self, value: Any) -> Any: ...
    def __imul__(self: Self, value: Any) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __isub__(self: Self, value: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __len__(self: Self) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __mul__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __radd__(self: Self, value: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __rmul__(self: Self, value: Any) -> Any: ...
    def __rsub__(self: Self, value: Any) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __setitem__(self: Self, key: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __sub__(self: Self, value: Any) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def adjoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def det3x3(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def det4x4(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getElement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def homogenize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inverse(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isEquivalent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isSingular(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kIdentity: MMatrix = ...
    kTolerance: float = ...
    def setElement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setToIdentity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setToProduct(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def transpose(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MMatrixArray(object):
    def __add__(self: Self, value: Any) -> Any: ...
    def __contains__(self: Self, key: Any) -> Any: ...
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __delitem__(self: Self, key: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __getitem__(self: Self, key: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __iadd__(self: Self, value: Any) -> Any: ...
    def __imul__(self: Self, value: Any) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __len__(self: Self) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __mul__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __rmul__(self: Self, value: Any) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __setitem__(self: Self, key: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def append(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def sizeIncrement(*args: Any, **kwargs: Any) -> Any: ...
    @sizeIncrement.setter
    def sizeIncrement(*args: Any, **kwargs: Any) -> Any: ...

class MMeshIntersector(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getClosestPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isCreated(*args: Any, **kwargs: Any) -> Any: ...
    @isCreated.setter
    def isCreated(*args: Any, **kwargs: Any) -> Any: ...

class MMeshIsectAccelParams(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MMeshSmoothOptions(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def boundaryRule(*args: Any, **kwargs: Any) -> Any: ...
    @boundaryRule.setter
    def boundaryRule(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def divisions(*args: Any, **kwargs: Any) -> Any: ...
    @divisions.setter
    def divisions(*args: Any, **kwargs: Any) -> Any: ...
    kCatmullClark: int = ...
    kCreaseAll: int = ...
    kCreaseEdge: int = ...
    kInvalid: int = ...
    kInvalidSubdivision: int = ...
    kLast: int = ...
    kLastSubdivision: int = ...
    kLegacy: int = ...
    kOpenSubdivCatmullClarkAdaptive: int = ...
    kOpenSubdivCatmullClarkUniform: int = ...
    @property
    def keepBorderEdge(*args: Any, **kwargs: Any) -> Any: ...
    @keepBorderEdge.setter
    def keepBorderEdge(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def keepHardEdge(*args: Any, **kwargs: Any) -> Any: ...
    @keepHardEdge.setter
    def keepHardEdge(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def propEdgeHardness(*args: Any, **kwargs: Any) -> Any: ...
    @propEdgeHardness.setter
    def propEdgeHardness(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def smoothUVs(*args: Any, **kwargs: Any) -> Any: ...
    @smoothUVs.setter
    def smoothUVs(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def smoothness(*args: Any, **kwargs: Any) -> Any: ...
    @smoothness.setter
    def smoothness(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def subdivisionType(*args: Any, **kwargs: Any) -> Any: ...
    @subdivisionType.setter
    def subdivisionType(*args: Any, **kwargs: Any) -> Any: ...

class MMessage(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentCallbackId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kDefaultAction: int = ...
    kDoAction: int = ...
    kDoNotDoAction: int = ...
    def nodeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MModelMessage(MMessage):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAfterDuplicateCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addBeforeDuplicateCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addNodeAddedToModelCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addNodeRemovedFromModelCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentCallbackId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kActiveListModified: int = ...
    kDefaultAction: int = ...
    kDoAction: int = ...
    kDoNotDoAction: int = ...
    def nodeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MNamespace(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getNamespaceFromName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getNamespaceObjects(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getNamespaces(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def makeNamepathAbsolute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def moveNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def namespaceExists(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def relativeNames(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def renameNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rootNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCurrentNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRelativeNames(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def stripNamespaceFromName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def validateName(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MNodeCacheDisablingInfo(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCacheDisabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCacheDisabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMitigation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setReason(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MNodeCacheSetupInfo(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPreference(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getRequirement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kLastPreference: int = ...
    kLastRequirement: int = ...
    kSimulationSupport: int = ...
    kWantToCacheByDefault: int = ...
    def setPreference(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRequirement(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MNodeClass(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExtensionAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def attributeCount(*args: Any, **kwargs: Any) -> Any: ...
    @attributeCount.setter
    def attributeCount(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def classification(*args: Any, **kwargs: Any) -> Any: ...
    @classification.setter
    def classification(*args: Any, **kwargs: Any) -> Any: ...
    def getAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def pluginName(*args: Any, **kwargs: Any) -> Any: ...
    @pluginName.setter
    def pluginName(*args: Any, **kwargs: Any) -> Any: ...
    def removeExtensionAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeExtensionAttributeIfUnset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def typeId(*args: Any, **kwargs: Any) -> Any: ...
    @typeId.setter
    def typeId(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def typeName(*args: Any, **kwargs: Any) -> Any: ...
    @typeName.setter
    def typeName(*args: Any, **kwargs: Any) -> Any: ...

class MNodeMessage(MMessage):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttributeAddedOrRemovedCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttributeChangedCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addKeyableChangeOverride(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addNameChangedCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addNodeAboutToDeleteCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addNodeDestroyedCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addNodeDirtyCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addNodeDirtyPlugCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addNodePreRemovalCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addUuidChangedCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentCallbackId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAttributeAdded: int = ...
    kAttributeArrayAdded: int = ...
    kAttributeArrayRemoved: int = ...
    kAttributeEval: int = ...
    kAttributeKeyable: int = ...
    kAttributeLocked: int = ...
    kAttributeRemoved: int = ...
    kAttributeRenamed: int = ...
    kAttributeSet: int = ...
    kAttributeUnkeyable: int = ...
    kAttributeUnlocked: int = ...
    kConnectionBroken: int = ...
    kConnectionMade: int = ...
    kDefaultAction: int = ...
    kDoAction: int = ...
    kDoNotDoAction: int = ...
    kIncomingDirection: int = ...
    kKeyChangeInvalid: int = ...
    kKeyChangeLast: int = ...
    kLast: int = ...
    kMakeKeyable: int = ...
    kMakeUnkeyable: int = ...
    kOtherPlugSet: int = ...
    def nodeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MObject(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    __hash__: NoneType = ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def apiType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def apiTypeStr(*args: Any, **kwargs: Any) -> Any: ...
    @apiTypeStr.setter
    def apiTypeStr(*args: Any, **kwargs: Any) -> Any: ...
    def hasFn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNull(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kNullObj: MObject = ...

class MObjectArray(object):
    def __add__(self: Self, value: Any) -> Any: ...
    def __contains__(self: Self, key: Any) -> Any: ...
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __delitem__(self: Self, key: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __getitem__(self: Self, key: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __iadd__(self: Self, value: Any) -> Any: ...
    def __imul__(self: Self, value: Any) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __len__(self: Self) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __mul__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __rmul__(self: Self, value: Any) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __setitem__(self: Self, key: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def append(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def sizeIncrement(*args: Any, **kwargs: Any) -> Any: ...
    @sizeIncrement.setter
    def sizeIncrement(*args: Any, **kwargs: Any) -> Any: ...

class MObjectHandle(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    __hash__: NoneType = ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hashCode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isAlive(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MObjectSetMessage(MMessage):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addSetMembersModifiedCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentCallbackId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kDefaultAction: int = ...
    kDoAction: int = ...
    kDoNotDoAction: int = ...
    def nodeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MPlane(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def distance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def distanceToPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def normal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPlane(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MPlug(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    __hash__: NoneType = ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def array(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asBool(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asChar(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asDouble(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asFloat(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asInt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asMAngle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asMDataHandle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asMDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asMObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asMTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asShort(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectedTo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectionByPhysicalIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def constructHandle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def destinations(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def destinationsWithConversions(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def destructHandle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def elementByLogicalIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def elementByPhysicalIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def evaluateNumElements(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExistingArrayAttributeIndices(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getSetAttrCmds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def info(*args: Any, **kwargs: Any) -> Any: ...
    @info.setter
    def info(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isArray(*args: Any, **kwargs: Any) -> Any: ...
    @isArray.setter
    def isArray(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isCaching(*args: Any, **kwargs: Any) -> Any: ...
    @isCaching.setter
    def isCaching(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isChannelBox(*args: Any, **kwargs: Any) -> Any: ...
    @isChannelBox.setter
    def isChannelBox(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isChild(*args: Any, **kwargs: Any) -> Any: ...
    @isChild.setter
    def isChild(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isCompound(*args: Any, **kwargs: Any) -> Any: ...
    @isCompound.setter
    def isCompound(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isConnected(*args: Any, **kwargs: Any) -> Any: ...
    @isConnected.setter
    def isConnected(*args: Any, **kwargs: Any) -> Any: ...
    def isDefaultValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isDestination(*args: Any, **kwargs: Any) -> Any: ...
    @isDestination.setter
    def isDestination(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isDynamic(*args: Any, **kwargs: Any) -> Any: ...
    @isDynamic.setter
    def isDynamic(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isElement(*args: Any, **kwargs: Any) -> Any: ...
    @isElement.setter
    def isElement(*args: Any, **kwargs: Any) -> Any: ...
    def isFreeToChange(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isFromReferencedFile(*args: Any, **kwargs: Any) -> Any: ...
    @isFromReferencedFile.setter
    def isFromReferencedFile(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isIgnoredWhenRendering(*args: Any, **kwargs: Any) -> Any: ...
    @isIgnoredWhenRendering.setter
    def isIgnoredWhenRendering(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isKeyable(*args: Any, **kwargs: Any) -> Any: ...
    @isKeyable.setter
    def isKeyable(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isLocked(*args: Any, **kwargs: Any) -> Any: ...
    @isLocked.setter
    def isLocked(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isNetworked(*args: Any, **kwargs: Any) -> Any: ...
    @isNetworked.setter
    def isNetworked(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isNull(*args: Any, **kwargs: Any) -> Any: ...
    @isNull.setter
    def isNull(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isProcedural(*args: Any, **kwargs: Any) -> Any: ...
    @isProcedural.setter
    def isProcedural(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isProxy(*args: Any, **kwargs: Any) -> Any: ...
    @isProxy.setter
    def isProxy(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isSource(*args: Any, **kwargs: Any) -> Any: ...
    @isSource.setter
    def isSource(*args: Any, **kwargs: Any) -> Any: ...
    kAll: int = ...
    kChanged: int = ...
    kChildrenNotFreeToChange: int = ...
    kFreeToChange: int = ...
    kLastAttrSelector: int = ...
    kNonDefault: int = ...
    kNotFreeToChange: int = ...
    def logicalIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def node(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numChildren(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numConnectedChildren(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numConnectedElements(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numElements(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def partialName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def proxied(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def selectAncestorLogicalIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setBool(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setChar(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDouble(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFloat(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMAngle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMDataHandle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMPxData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setNumElements(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setShort(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def source(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def sourceWithConversion(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MPlugArray(object):
    def __add__(self: Self, value: Any) -> Any: ...
    def __contains__(self: Self, key: Any) -> Any: ...
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __delitem__(self: Self, key: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __getitem__(self: Self, key: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __iadd__(self: Self, value: Any) -> Any: ...
    def __imul__(self: Self, value: Any) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __len__(self: Self) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __mul__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __rmul__(self: Self, value: Any) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __setitem__(self: Self, key: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def append(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def sizeIncrement(*args: Any, **kwargs: Any) -> Any: ...
    @sizeIncrement.setter
    def sizeIncrement(*args: Any, **kwargs: Any) -> Any: ...

class MPoint(object):
    def __add__(self: Self, value: Any) -> Any: ...
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __delitem__(self: Self, key: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __getitem__(self: Self, key: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    __hash__: NoneType = ...
    def __iadd__(self: Self, value: Any) -> Any: ...
    def __imul__(self: Self, value: Any) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __isub__(self: Self, value: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __len__(self: Self) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __mul__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __radd__(self: Self, value: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __rmul__(self: Self, value: Any) -> Any: ...
    def __rsub__(self: Self, value: Any) -> Any: ...
    def __rtruediv__(self: Self, value: Any) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __setitem__(self: Self, key: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __sub__(self: Self, value: Any) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __truediv__(self: Self, value: Any) -> Any: ...
    def cartesianize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def distanceTo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def homogenize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isEquivalent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kOrigin: MPoint = ...
    kTolerance: float = ...
    def rationalize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def w(*args: Any, **kwargs: Any) -> Any: ...
    @w.setter
    def w(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def x(*args: Any, **kwargs: Any) -> Any: ...
    @x.setter
    def x(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def y(*args: Any, **kwargs: Any) -> Any: ...
    @y.setter
    def y(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def z(*args: Any, **kwargs: Any) -> Any: ...
    @z.setter
    def z(*args: Any, **kwargs: Any) -> Any: ...

class MPointArray(object):
    def __add__(self: Self, value: Any) -> Any: ...
    def __contains__(self: Self, key: Any) -> Any: ...
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __delitem__(self: Self, key: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __getitem__(self: Self, key: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __iadd__(self: Self, value: Any) -> Any: ...
    def __imul__(self: Self, value: Any) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __len__(self: Self) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __mul__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __rmul__(self: Self, value: Any) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __setitem__(self: Self, key: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def append(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def sizeIncrement(*args: Any, **kwargs: Any) -> Any: ...
    @sizeIncrement.setter
    def sizeIncrement(*args: Any, **kwargs: Any) -> Any: ...

class MPointOnMesh(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def barycentricCoords(*args: Any, **kwargs: Any) -> Any: ...
    @barycentricCoords.setter
    def barycentricCoords(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def face(*args: Any, **kwargs: Any) -> Any: ...
    @face.setter
    def face(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def normal(*args: Any, **kwargs: Any) -> Any: ...
    @normal.setter
    def normal(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def point(*args: Any, **kwargs: Any) -> Any: ...
    @point.setter
    def point(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def triangle(*args: Any, **kwargs: Any) -> Any: ...
    @triangle.setter
    def triangle(*args: Any, **kwargs: Any) -> Any: ...

class MPolyMessage(MMessage):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addPolyComponentIdChangedCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addPolyTopologyChangedCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentCallbackId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kDefaultAction: int = ...
    kDoAction: int = ...
    kDoNotDoAction: int = ...
    def nodeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MPxAttributePatternFactory(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MPxCommand(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def appendToResult(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clearResult(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def commandString(*args: Any, **kwargs: Any) -> Any: ...
    @commandString.setter
    def commandString(*args: Any, **kwargs: Any) -> Any: ...
    def currentResult(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentResultType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def displayError(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def displayInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def displayWarning(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doIt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasSyntax(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def historyOn(*args: Any, **kwargs: Any) -> Any: ...
    @historyOn.setter
    def historyOn(*args: Any, **kwargs: Any) -> Any: ...
    def isCurrentResultArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isUndoable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kDouble: int = ...
    kLong: int = ...
    kNoArg: int = ...
    kString: int = ...
    def redoIt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setResult(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def syntax(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def undoIt(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MPxData(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kData: int = ...
    kGeometryData: int = ...
    kLast: int = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def readASCII(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def readBinary(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def writeASCII(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def writeBinary(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MPxGeometryData(MPxData):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteComponentsFromGroups(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def iterator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kData: int = ...
    kGeometryData: int = ...
    kLast: int = ...
    @property
    def matrix(*args: Any, **kwargs: Any) -> Any: ...
    @matrix.setter
    def matrix(*args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def readASCII(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def readBinary(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def smartCopy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def updateCompleteVertexGroup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def writeASCII(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def writeBinary(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MPxGeometryIterator(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __iter__(self: Self) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __next__(self: Self) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def component(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def currentPoint(*args: Any, **kwargs: Any) -> Any: ...
    @currentPoint.setter
    def currentPoint(*args: Any, **kwargs: Any) -> Any: ...
    def geometry(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasNormals(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasPoints(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def index(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def indexUnsimplified(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDone(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def iteratorCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def maxPoints(*args: Any, **kwargs: Any) -> Any: ...
    @maxPoints.setter
    def maxPoints(*args: Any, **kwargs: Any) -> Any: ...
    def next(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def point(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPointGetNext(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MPxNode(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeAffects(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def compute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def configCache(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectionBroken(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectionMade(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copyInternalData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dependsOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def existWithoutInConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def existWithoutOutConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def forceCache(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCacheSetup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFilesToArchive(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInternalValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInternalValueInContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasInvalidationRangeTransformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inheritAttributesFrom(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def internalArrayCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isAbstractClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isPassiveOutput(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAssembly: int = ...
    kBlendShape: int = ...
    kCameraSetNode: int = ...
    kClientDeviceNode: int = ...
    kConstraintNode: int = ...
    kDeformerNode: int = ...
    kDependNode: int = ...
    kEmitterNode: int = ...
    kEvaluatedDirectly: int = ...
    kEvaluatedIndirectly: int = ...
    kFieldNode: int = ...
    kFluidEmitterNode: int = ...
    kGeometryFilter: int = ...
    kHardwareShader: int = ...
    kHwShaderNode: int = ...
    kIkSolverNode: int = ...
    kImagePlaneNode: int = ...
    kLast: int = ...
    kLeaveDirty: int = ...
    kLocatorNode: int = ...
    kManipContainer: int = ...
    kManipulatorNode: int = ...
    kMotionPathNode: int = ...
    kObjectSet: int = ...
    kParticleAttributeMapperNode: int = ...
    kPostEvaluationTypeLast: int = ...
    kSkinCluster: int = ...
    kSpringNode: int = ...
    kSurfaceShape: int = ...
    kThreadedDeviceNode: int = ...
    kTransformNode: int = ...
    def legalConnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def legalDisconnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def passThroughToMany(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def passThroughToOne(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postConstructor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postEvaluation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def preEvaluation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDependentsDirty(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExistWithoutInConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExistWithoutOutConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternalValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternalValueInContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMPSafe(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shouldSave(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def thisMObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def transformInvalidationRange(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MPxSurfaceShape(MPxNode):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def acceptsGeometryIterator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def activeComponents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeAffects(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def boundingBox(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    boundingBoxCenterX: MObject = ...
    boundingBoxCenterY: MObject = ...
    boundingBoxCenterZ: MObject = ...
    def cachedShapeAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canMakeLive(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    center: MObject = ...
    def childChanged(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def closestPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def componentToPlugs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def compute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def configCache(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectionBroken(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectionMade(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def convertToTweakNodePlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copyInternalData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createFullRenderGroup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createFullVertexGroup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteComponents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dependsOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def excludeAsPluginShape(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def existWithoutInConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def existWithoutOutConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def forceCache(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def geometryData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def geometryIteratorSetup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCacheSetup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getComponentSelectionMask(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFilesToArchive(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInternalValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInternalValueInContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getShapeSelectionMask(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getWorldMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasActiveComponents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasInvalidationRangeTransformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inheritAttributesFrom(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    instObjGroups: MObject = ...
    intermediateObject: MObject = ...
    def internalArrayCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    inverseMatrix: MObject = ...
    def isAbstractClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isBounded(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isPassiveOutput(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isRenderable(*args: Any, **kwargs: Any) -> Any: ...
    @isRenderable.setter
    def isRenderable(*args: Any, **kwargs: Any) -> Any: ...
    isTemplated: MObject = ...
    kAssembly: int = ...
    kBlendShape: int = ...
    kBoundingBoxChanged: int = ...
    kCameraSetNode: int = ...
    kClientDeviceNode: int = ...
    kConstraintNode: int = ...
    kDeformerNode: int = ...
    kDependNode: int = ...
    kEmitterNode: int = ...
    kEvaluatedDirectly: int = ...
    kEvaluatedIndirectly: int = ...
    kFieldNode: int = ...
    kFluidEmitterNode: int = ...
    kGeometryFilter: int = ...
    kHardwareShader: int = ...
    kHwShaderNode: int = ...
    kIkSolverNode: int = ...
    kImagePlaneNode: int = ...
    kLast: int = ...
    kLeaveDirty: int = ...
    kLocatorNode: int = ...
    kManipContainer: int = ...
    kManipulatorNode: int = ...
    kMatchInvalidAttribute: int = ...
    kMatchInvalidAttributeDim: int = ...
    kMatchInvalidAttributeIndex: int = ...
    kMatchInvalidAttributeRange: int = ...
    kMatchInvalidName: int = ...
    kMatchNone: int = ...
    kMatchOk: int = ...
    kMatchTooMany: int = ...
    kMotionPathNode: int = ...
    kNoPointCaching: int = ...
    kNormal: int = ...
    kObjectChanged: int = ...
    kObjectSet: int = ...
    kParticleAttributeMapperNode: int = ...
    kPostEvaluationTypeLast: int = ...
    kRestorePoints: int = ...
    kSavePoints: int = ...
    kSkinCluster: int = ...
    kSpringNode: int = ...
    kSurfaceShape: int = ...
    kThreadedDeviceNode: int = ...
    kTransformNode: int = ...
    kTransformOriginalPoints: int = ...
    kUTangent: int = ...
    kUVNTriad: int = ...
    kUpdatePoints: int = ...
    kVTangent: int = ...
    def legalConnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def legalDisconnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def localShapeInAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def localShapeOutAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    mControlPoints: MObject = ...
    mControlValueX: MObject = ...
    mControlValueY: MObject = ...
    mControlValueZ: MObject = ...
    mHasHistoryOnCreate: MObject = ...
    def match(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def matchComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    matrix: MObject = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def newControlPointComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    nodeBoundingBox: MObject = ...
    nodeBoundingBoxMax: MObject = ...
    nodeBoundingBoxMaxX: MObject = ...
    nodeBoundingBoxMaxZ: MObject = ...
    nodeBoundingBoxMin: MObject = ...
    nodeBoundingBoxMinX: MObject = ...
    nodeBoundingBoxMinY: MObject = ...
    nodeBoundingBoxMinZ: MObject = ...
    nodeBoundingBoxSize: MObject = ...
    nodeBoundingBoxSizeX: MObject = ...
    nodeBoundingBoxSizeY: MObject = ...
    nodeBoundingBoxSizeZ: MObject = ...
    objectColor: MObject = ...
    objectGroupColor: MObject = ...
    objectGroupId: MObject = ...
    objectGroups: MObject = ...
    objectGrpCompList: MObject = ...
    parentInverseMatrix: MObject = ...
    parentMatrix: MObject = ...
    def passThroughToMany(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def passThroughToOne(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pointAtParm(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postConstructor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postEvaluation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def preEvaluation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def renderGroupComponentType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDependentsDirty(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExistWithoutInConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExistWithoutOutConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternalValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternalValueInContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMPSafe(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shouldSave(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def thisMObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def transformInvalidationRange(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def transformUsing(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def tweakUsing(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def undeleteComponents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    useObjectColor: MObject = ...
    def vertexOffsetDirection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    visibility: MObject = ...
    def weightedTransformUsing(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def weightedTweakUsing(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    worldInverseMatrix: MObject = ...
    worldMatrix: MObject = ...
    def worldShapeOutAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MQuaternion(object):
    def __add__(self: Self, value: Any) -> Any: ...
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __delitem__(self: Self, key: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __getitem__(self: Self, key: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    __hash__: NoneType = ...
    def __imul__(self: Self, value: Any) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __len__(self: Self) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __mul__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __neg__(self: Self) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __radd__(self: Self, value: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __rmul__(self: Self, value: Any) -> Any: ...
    def __rsub__(self: Self, value: Any) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __setitem__(self: Self, key: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __sub__(self: Self, value: Any) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asAxisAngle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asEulerRotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def conjugate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def conjugateIt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def exp(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inverse(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def invertIt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isEquivalent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kIdentity: MQuaternion = ...
    kTolerance: float = ...
    def log(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def negateIt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def normal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def normalizeIt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setToXAxis(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setToYAxis(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setToZAxis(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def slerp(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def squad(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def squadPt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def w(*args: Any, **kwargs: Any) -> Any: ...
    @w.setter
    def w(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def x(*args: Any, **kwargs: Any) -> Any: ...
    @x.setter
    def x(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def y(*args: Any, **kwargs: Any) -> Any: ...
    @y.setter
    def y(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def z(*args: Any, **kwargs: Any) -> Any: ...
    @z.setter
    def z(*args: Any, **kwargs: Any) -> Any: ...

class MRampAttribute(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addEntries(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createColorRamp(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createCurveRamp(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createRamp(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteEntries(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getEntries(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getValueAtPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isColorRamp(*args: Any, **kwargs: Any) -> Any: ...
    @isColorRamp.setter
    def isColorRamp(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isCurveRamp(*args: Any, **kwargs: Any) -> Any: ...
    @isCurveRamp.setter
    def isCurveRamp(*args: Any, **kwargs: Any) -> Any: ...
    kLinear: int = ...
    kNone: int = ...
    kSmooth: int = ...
    kSpline: int = ...
    def numEntries(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pack(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInterpolationAtIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPositionAtIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRamp(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setValueAtIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def sort(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MRichSelection(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getRawSymmetryMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getSelection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getSymmetry(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getSymmetryMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getSymmetryPlane(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSelection(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MSceneMessage(MMessage):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addCheckCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addCheckFileCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addCheckReferenceCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addConnectionFailedCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addReferenceCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addStringArrayCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentCallbackId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAfterCreateReference: int = ...
    kAfterCreateReferenceAndRecordEdits: int = ...
    kAfterExport: int = ...
    kAfterExportReference: int = ...
    kAfterFileRead: int = ...
    kAfterImport: int = ...
    kAfterImportReference: int = ...
    kAfterLoadReference: int = ...
    kAfterLoadReferenceAndRecordEdits: int = ...
    kAfterNew: int = ...
    kAfterOpen: int = ...
    kAfterPluginLoad: int = ...
    kAfterPluginUnload: int = ...
    kAfterReference: int = ...
    kAfterRemoveReference: int = ...
    kAfterSave: int = ...
    kAfterSceneReadAndRecordEdits: int = ...
    kAfterSoftwareFrameRender: int = ...
    kAfterSoftwareRender: int = ...
    kAfterUnloadReference: int = ...
    kBeforeCreateReference: int = ...
    kBeforeCreateReferenceAndRecordEdits: int = ...
    kBeforeCreateReferenceCheck: int = ...
    kBeforeExport: int = ...
    kBeforeExportCheck: int = ...
    kBeforeExportReference: int = ...
    kBeforeFileRead: int = ...
    kBeforeImport: int = ...
    kBeforeImportCheck: int = ...
    kBeforeImportReference: int = ...
    kBeforeLoadReference: int = ...
    kBeforeLoadReferenceAndRecordEdits: int = ...
    kBeforeLoadReferenceCheck: int = ...
    kBeforeNew: int = ...
    kBeforeNewCheck: int = ...
    kBeforeOpen: int = ...
    kBeforeOpenCheck: int = ...
    kBeforePluginLoad: int = ...
    kBeforePluginUnload: int = ...
    kBeforeReference: int = ...
    kBeforeReferenceCheck: int = ...
    kBeforeRemoveReference: int = ...
    kBeforeSave: int = ...
    kBeforeSaveCheck: int = ...
    kBeforeSoftwareFrameRender: int = ...
    kBeforeSoftwareRender: int = ...
    kBeforeUnloadReference: int = ...
    kDefaultAction: int = ...
    kDoAction: int = ...
    kDoNotDoAction: int = ...
    kExportStarted: int = ...
    kLast: int = ...
    kMayaExiting: int = ...
    kMayaInitialized: int = ...
    kSceneUpdate: int = ...
    kSoftwareRenderInterrupted: int = ...
    def nodeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MSelectionList(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def add(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDagPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDependNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getSelectionStrings(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasItem(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasItemPartly(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def intersect(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isEmpty(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kMergeNormal: int = ...
    kRemoveFromList: int = ...
    kXORWithList: int = ...
    def length(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def merge(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def replace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def toggle(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MSelectionMask(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addMask(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterSelectionType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getSelectionTypePriority(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def intersects(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kSelectAnimAny: int = ...
    kSelectAnimCurves: int = ...
    kSelectAnimInTangents: int = ...
    kSelectAnimKeyframes: int = ...
    kSelectAnimMask: int = ...
    kSelectAnimOutTangents: int = ...
    kSelectCVs: int = ...
    kSelectCameras: int = ...
    kSelectClusters: int = ...
    kSelectCollisionModels: int = ...
    kSelectComponentsMask: int = ...
    kSelectCurveKnots: int = ...
    kSelectCurveParmPoints: int = ...
    kSelectCurves: int = ...
    kSelectCurvesOnSurfaces: int = ...
    kSelectDynamicConstraints: int = ...
    kSelectEdges: int = ...
    kSelectEditPoints: int = ...
    kSelectEmitters: int = ...
    kSelectFacets: int = ...
    kSelectFields: int = ...
    kSelectFluids: int = ...
    kSelectFollicles: int = ...
    kSelectGuideLines: int = ...
    kSelectHairSystems: int = ...
    kSelectHandles: int = ...
    kSelectHulls: int = ...
    kSelectIkEndEffectors: int = ...
    kSelectIkHandles: int = ...
    kSelectIsoparms: int = ...
    kSelectJointPivots: int = ...
    kSelectJoints: int = ...
    kSelectLatticePoints: int = ...
    kSelectLattices: int = ...
    kSelectLights: int = ...
    kSelectLocalAxis: int = ...
    kSelectLocators: int = ...
    kSelectManipulators: int = ...
    kSelectMeshComponents: int = ...
    kSelectMeshEdges: int = ...
    kSelectMeshFaces: int = ...
    kSelectMeshFreeEdges: int = ...
    kSelectMeshLines: int = ...
    kSelectMeshUVs: int = ...
    kSelectMeshVerts: int = ...
    kSelectMeshes: int = ...
    kSelectNCloths: int = ...
    kSelectNParticles: int = ...
    kSelectNRigids: int = ...
    kSelectNurbsCurves: int = ...
    kSelectNurbsSurfaces: int = ...
    kSelectObjectGroups: int = ...
    kSelectObjectsMask: int = ...
    kSelectOrientationLocators: int = ...
    kSelectPPStrokes: int = ...
    kSelectParticleShapes: int = ...
    kSelectParticles: int = ...
    kSelectPivots: int = ...
    kSelectPointsForGravity: int = ...
    kSelectPointsOnCurvesForGravity: int = ...
    kSelectPointsOnSurfacesForGravity: int = ...
    kSelectRigidBodies: int = ...
    kSelectRigidConstraints: int = ...
    kSelectRotatePivots: int = ...
    kSelectScalePivots: int = ...
    kSelectSculpts: int = ...
    kSelectSelectHandles: int = ...
    kSelectSketchPlanes: int = ...
    kSelectSprings: int = ...
    kSelectSubdiv: int = ...
    kSelectSubdivMeshEdges: int = ...
    kSelectSubdivMeshFaces: int = ...
    kSelectSubdivMeshMaps: int = ...
    kSelectSubdivMeshPoints: int = ...
    kSelectSurfaceEdge: int = ...
    kSelectSurfaceKnots: int = ...
    kSelectSurfaceParmPoints: int = ...
    kSelectSurfaceRange: int = ...
    kSelectSurfaces: int = ...
    kSelectTemplates: int = ...
    kSelectTextures: int = ...
    kSelectUVLocators: int = ...
    kSelectVertices: int = ...
    kSelectXYZLocators: int = ...
    def registerSelectionType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMask(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MSpace(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kInvalid: int = ...
    kLast: int = ...
    kObject: int = ...
    kPostTransform: int = ...
    kPreTransform: int = ...
    kTransform: int = ...
    kWorld: int = ...

class MSyntax(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addArg(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def enableEdit(*args: Any, **kwargs: Any) -> Any: ...
    @enableEdit.setter
    def enableEdit(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def enableQuery(*args: Any, **kwargs: Any) -> Any: ...
    @enableQuery.setter
    def enableQuery(*args: Any, **kwargs: Any) -> Any: ...
    kAngle: int = ...
    kBoolean: int = ...
    kDistance: int = ...
    kDouble: int = ...
    kInvalidArgType: int = ...
    kInvalidObjectFormat: int = ...
    kLastArgType: int = ...
    kLastObjectFormat: int = ...
    kLong: int = ...
    kNoArg: int = ...
    kNone: int = ...
    kSelectionItem: int = ...
    kSelectionList: int = ...
    kString: int = ...
    kStringObjects: int = ...
    kTime: int = ...
    kUnsigned: int = ...
    def makeFlagMultiUse(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def makeFlagQueryWithFullArgs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def maxObjects(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def minObjects(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxObjects(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMinObjects(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def useSelectionAsDefault(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MTime(object):
    def __add__(self: Self, value: Any) -> Any: ...
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    __hash__: NoneType = ...
    def __iadd__(self: Self, value: Any) -> Any: ...
    def __imul__(self: Self, value: Any) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __isub__(self: Self, value: Any) -> Any: ...
    def __itruediv__(self: Self, value: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __mul__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __radd__(self: Self, value: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __rmul__(self: Self, value: Any) -> Any: ...
    def __rsub__(self: Self, value: Any) -> Any: ...
    def __rtruediv__(self: Self, value: Any) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __sub__(self: Self, value: Any) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __truediv__(self: Self, value: Any) -> Any: ...
    def asUnits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    k100FPS: int = ...
    k10FPS: int = ...
    k1200FPS: int = ...
    k120FPS: int = ...
    k125FPS: int = ...
    k12FPS: int = ...
    k1500FPS: int = ...
    k150FPS: int = ...
    k15FPS: int = ...
    k16FPS: int = ...
    k2000FPS: int = ...
    k200FPS: int = ...
    k20FPS: int = ...
    k23_976FPS: int = ...
    k240FPS: int = ...
    k24FPS: int = ...
    k250FPS: int = ...
    k25FPS: int = ...
    k29_97DF: int = ...
    k29_97FPS: int = ...
    k2FPS: int = ...
    k3000FPS: int = ...
    k300FPS: int = ...
    k30FPS: int = ...
    k375FPS: int = ...
    k3FPS: int = ...
    k400FPS: int = ...
    k40FPS: int = ...
    k44100FPS: int = ...
    k47_952FPS: int = ...
    k48000FPS: int = ...
    k48FPS: int = ...
    k4FPS: int = ...
    k500FPS: int = ...
    k50FPS: int = ...
    k59_94FPS: int = ...
    k5FPS: int = ...
    k6000FPS: int = ...
    k600FPS: int = ...
    k60FPS: int = ...
    k6FPS: int = ...
    k750FPS: int = ...
    k75FPS: int = ...
    k80FPS: int = ...
    k8FPS: int = ...
    k90FPS: int = ...
    kFilm: int = ...
    kGames: int = ...
    kHours: int = ...
    kInvalid: int = ...
    kLast: int = ...
    kMilliseconds: int = ...
    kMinutes: int = ...
    kNTSCField: int = ...
    kNTSCFrame: int = ...
    kPALField: int = ...
    kPALFrame: int = ...
    kSeconds: int = ...
    kShowScan: int = ...
    kUserDef: int = ...
    def setUIUnit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def ticksPerSecond(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uiUnit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def unit(*args: Any, **kwargs: Any) -> Any: ...
    @unit.setter
    def unit(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def value(*args: Any, **kwargs: Any) -> Any: ...
    @value.setter
    def value(*args: Any, **kwargs: Any) -> Any: ...

class MTimeArray(object):
    def __add__(self: Self, value: Any) -> Any: ...
    def __contains__(self: Self, key: Any) -> Any: ...
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __delitem__(self: Self, key: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __getitem__(self: Self, key: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __iadd__(self: Self, value: Any) -> Any: ...
    def __imul__(self: Self, value: Any) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __len__(self: Self) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __mul__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __rmul__(self: Self, value: Any) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __setitem__(self: Self, key: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def append(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def sizeIncrement(*args: Any, **kwargs: Any) -> Any: ...
    @sizeIncrement.setter
    def sizeIncrement(*args: Any, **kwargs: Any) -> Any: ...

class MTimeRange(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    __hash__: NoneType = ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __or__(self: Self, value: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __ror__(self: Self, value: Any) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def contains(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def empty(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def intersects(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MTimerMessage(MMessage):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addTimerCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentCallbackId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kDefaultAction: int = ...
    kDoAction: int = ...
    kDoNotDoAction: int = ...
    def nodeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MTransformationMatrix(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    __hash__: NoneType = ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asMatrixInverse(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asRotateMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asScaleMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isEquivalent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kIdentity: MTransformationMatrix = ...
    kInvalid: int = ...
    kLast: int = ...
    kTolerance: float = ...
    kXYZ: int = ...
    kXZY: int = ...
    kYXZ: int = ...
    kYZX: int = ...
    kZXY: int = ...
    kZYX: int = ...
    def reorderRotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateByComponents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotatePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotatePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotationComponents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotationOrder(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotationOrientation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scaleBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scalePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scalePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotatePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotatePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotationComponents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotationOrientation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScalePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScalePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setShear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setToRotationAxis(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shearBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def translateBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def translation(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MTypeId(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    __hash__: NoneType = ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def id(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MURI(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    __hash__: NoneType = ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addQueryItem(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllQueryItemKeys(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllQueryItemValues(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAuthority(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDirectory(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFileName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFragment(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getHost(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPassword(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPort(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getQueryItemValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getQueryPairDelimiter(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getQueryValueDelimiter(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getScheme(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getUserInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getUserName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isEmpty(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValidURI(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAllQueryItems(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeQueryItem(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAuthority(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDirectory(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFileName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFragment(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setHost(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPassword(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPort(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setQueryDelimiters(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScheme(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setURI(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUserInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUserName(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MUint64Array(object):
    def __add__(self: Self, value: Any) -> Any: ...
    def __contains__(self: Self, key: Any) -> Any: ...
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __delitem__(self: Self, key: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __getitem__(self: Self, key: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __iadd__(self: Self, value: Any) -> Any: ...
    def __imul__(self: Self, value: Any) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __len__(self: Self) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __mul__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __rmul__(self: Self, value: Any) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __setitem__(self: Self, key: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def append(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def sizeIncrement(*args: Any, **kwargs: Any) -> Any: ...
    @sizeIncrement.setter
    def sizeIncrement(*args: Any, **kwargs: Any) -> Any: ...

class MUintArray(object):
    def __add__(self: Self, value: Any) -> Any: ...
    def __contains__(self: Self, key: Any) -> Any: ...
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __delitem__(self: Self, key: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __getitem__(self: Self, key: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __iadd__(self: Self, value: Any) -> Any: ...
    def __imul__(self: Self, value: Any) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __len__(self: Self) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __mul__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __rmul__(self: Self, value: Any) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __setitem__(self: Self, key: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def append(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def sizeIncrement(*args: Any, **kwargs: Any) -> Any: ...
    @sizeIncrement.setter
    def sizeIncrement(*args: Any, **kwargs: Any) -> Any: ...

class MUserData(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteAfterUse(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDeleteAfterUse(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MUserEventMessage(MMessage):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addUserEventCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentCallbackId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterUserEvent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isUserEvent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kDefaultAction: int = ...
    kDoAction: int = ...
    kDoNotDoAction: int = ...
    def nodeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postUserEvent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registerUserEvent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MUuid(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    __hash__: NoneType = ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def generate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def valid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MVector(object):
    def __add__(self: Self, value: Any) -> Any: ...
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __delitem__(self: Self, key: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __getitem__(self: Self, key: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    __hash__: NoneType = ...
    def __iadd__(self: Self, value: Any) -> Any: ...
    def __imul__(self: Self, value: Any) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __isub__(self: Self, value: Any) -> Any: ...
    def __itruediv__(self: Self, value: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __len__(self: Self) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __mul__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __neg__(self: Self) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __radd__(self: Self, value: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __rmul__(self: Self, value: Any) -> Any: ...
    def __rsub__(self: Self, value: Any) -> Any: ...
    def __rtruediv__(self: Self, value: Any) -> Any: ...
    def __rxor__(self: Self, value: Any) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __setitem__(self: Self, key: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __sub__(self: Self, value: Any) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __truediv__(self: Self, value: Any) -> Any: ...
    def __xor__(self: Self, value: Any) -> Any: ...
    def angle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isEquivalent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isParallel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kOneVector: MVector = ...
    kTolerance: float = ...
    kWaxis: int = ...
    kXaxis: int = ...
    kXaxisVector: MVector = ...
    kXnegAxisVector: MVector = ...
    kYaxis: int = ...
    kYaxisVector: MVector = ...
    kYnegAxisVector: MVector = ...
    kZaxis: int = ...
    kZaxisVector: MVector = ...
    kZeroVector: MVector = ...
    kZnegAxisVector: MVector = ...
    def length(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def normal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def normalize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateTo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def transformAsNormal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def x(*args: Any, **kwargs: Any) -> Any: ...
    @x.setter
    def x(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def y(*args: Any, **kwargs: Any) -> Any: ...
    @y.setter
    def y(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def z(*args: Any, **kwargs: Any) -> Any: ...
    @z.setter
    def z(*args: Any, **kwargs: Any) -> Any: ...

class MVectorArray(object):
    def __add__(self: Self, value: Any) -> Any: ...
    def __contains__(self: Self, key: Any) -> Any: ...
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __delitem__(self: Self, key: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __getitem__(self: Self, key: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __iadd__(self: Self, value: Any) -> Any: ...
    def __imul__(self: Self, value: Any) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __len__(self: Self) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __mul__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __rmul__(self: Self, value: Any) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __setitem__(self: Self, key: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def append(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def sizeIncrement(*args: Any, **kwargs: Any) -> Any: ...
    @sizeIncrement.setter
    def sizeIncrement(*args: Any, **kwargs: Any) -> Any: ...

class MWeight(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def influence(*args: Any, **kwargs: Any) -> Any: ...
    @influence.setter
    def influence(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def seam(*args: Any, **kwargs: Any) -> Any: ...
    @seam.setter
    def seam(*args: Any, **kwargs: Any) -> Any: ...

__builtins__: dict
__cached__: str
__doc__: NoneType
__file__: str
__loader__: SourceFileLoader
__name__: str
__package__: str
__spec__: ModuleSpec
def getStringResource(*args: Any, **kwargs: Any) -> Any: ...
key: str
ourdict: dict
py2dict: dict
def registerStringResource(*args: Any, **kwargs: Any) -> Any: ...
def registerStringResources(*args: Any, **kwargs: Any) -> Any: ...
val: str