# fmt: off
from typing import *
from typing_extensions import Self
from _typeshed import Incomplete


class MAnimControl(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def animationEndTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def animationStartTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def autoKeyMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def globalInTangentType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def globalOutTangentType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isPlaying(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isScrubbing(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kPlaybackLoop: int = ...
    kPlaybackOnce: int = ...
    kPlaybackOscillate: int = ...
    kPlaybackViewActive: int = ...
    kPlaybackViewAll: int = ...
    def maxTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def minTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def playBackward(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def playForward(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def playbackBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def playbackMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def playbackSpeed(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAnimationEndTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAnimationStartEndTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAnimationStartTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAutoKeyMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCurrentTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setGlobalInTangentType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setGlobalOutTangentType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMinMaxTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMinTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPlaybackBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPlaybackMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPlaybackSpeed(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setViewMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setWeightedTangents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def stop(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def viewMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def weightedTangents(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MAnimCurveChange(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def redoIt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def undoIt(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MAnimCurveClipboard(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clipboardItems(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def endTime(*args: Any, **kwargs: Any) -> Any: ...
    @endTime.setter
    def endTime(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def endUnitlessInput(*args: Any, **kwargs: Any) -> Any: ...
    @endUnitlessInput.setter
    def endUnitlessInput(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isEmpty(*args: Any, **kwargs: Any) -> Any: ...
    @isEmpty.setter
    def isEmpty(*args: Any, **kwargs: Any) -> Any: ...
    def set(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def startTime(*args: Any, **kwargs: Any) -> Any: ...
    @startTime.setter
    def startTime(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def startUnitlessInput(*args: Any, **kwargs: Any) -> Any: ...
    @startUnitlessInput.setter
    def startUnitlessInput(*args: Any, **kwargs: Any) -> Any: ...
    theAPIClipboard: MAnimCurveClipboard = ...

class MAnimCurveClipboardItem(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def animCurve(*args: Any, **kwargs: Any) -> Any: ...
    @animCurve.setter
    def animCurve(*args: Any, **kwargs: Any) -> Any: ...
    def animCurveType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def fullAttributeName(*args: Any, **kwargs: Any) -> Any: ...
    @fullAttributeName.setter
    def fullAttributeName(*args: Any, **kwargs: Any) -> Any: ...
    def getAddressingInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def leafAttributeName(*args: Any, **kwargs: Any) -> Any: ...
    @leafAttributeName.setter
    def leafAttributeName(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def nodeName(*args: Any, **kwargs: Any) -> Any: ...
    @nodeName.setter
    def nodeName(*args: Any, **kwargs: Any) -> Any: ...
    def setAddressingInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAnimCurve(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setNameInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MAnimCurveClipboardItemArray(object):
    def __add__(self: Self, value: Any) -> Any: ...
    def __contains__(self: Self, key: Any) -> Any: ...
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __delitem__(self: Self, key: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __getitem__(self: Self, key: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __iadd__(self: Self, value: Any) -> Any: ...
    def __imul__(self: Self, value: Any) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __len__(self: Self) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __mul__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __rmul__(self: Self, value: Any) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __setitem__(self: Self, key: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def append(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def sizeIncrement(*args: Any, **kwargs: Any) -> Any: ...
    @sizeIncrement.setter
    def sizeIncrement(*args: Any, **kwargs: Any) -> Any: ...

class MAnimMessage(MMessage):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAnimCurveEditedCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAnimKeyframeEditCheckCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAnimKeyframeEditedCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addDisableImplicitControlCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addNodeAnimKeyframeEditedCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addPostBakeResultsCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addPreBakeResultsCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentCallbackId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def flushAnimKeyframeEditedCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kDefaultAction: int = ...
    kDoAction: int = ...
    kDoNotDoAction: int = ...
    def nodeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MAnimUtil(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAnimatablePlugs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAnimatedPlugs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findConstraint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findSetDrivenKeyAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isAnimated(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFnAnimCurve(MFnDependencyNode):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addKey(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addKeys(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addKeysWithTangents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def animCurveType(*args: Any, **kwargs: Any) -> Any: ...
    @animCurveType.setter
    def animCurveType(*args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def evaluate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def find(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findClosest(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectingAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getTangentAngleWeight(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getTangentXY(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inTangentType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def input(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def insertKey(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isBreakdown(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isDefaultNode(*args: Any, **kwargs: Any) -> Any: ...
    @isDefaultNode.setter
    def isDefaultNode(*args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isFromReferencedFile(*args: Any, **kwargs: Any) -> Any: ...
    @isFromReferencedFile.setter
    def isFromReferencedFile(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isLocked(*args: Any, **kwargs: Any) -> Any: ...
    @isLocked.setter
    def isLocked(*args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isShared(*args: Any, **kwargs: Any) -> Any: ...
    @isShared.setter
    def isShared(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isStatic(*args: Any, **kwargs: Any) -> Any: ...
    @isStatic.setter
    def isStatic(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isTimeInput(*args: Any, **kwargs: Any) -> Any: ...
    @isTimeInput.setter
    def isTimeInput(*args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isUnitlessInput(*args: Any, **kwargs: Any) -> Any: ...
    @isUnitlessInput.setter
    def isUnitlessInput(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isWeighted(*args: Any, **kwargs: Any) -> Any: ...
    @isWeighted.setter
    def isWeighted(*args: Any, **kwargs: Any) -> Any: ...
    kAnimCurveTA: int = ...
    kAnimCurveTL: int = ...
    kAnimCurveTT: int = ...
    kAnimCurveTU: int = ...
    kAnimCurveUA: int = ...
    kAnimCurveUL: int = ...
    kAnimCurveUT: int = ...
    kAnimCurveUU: int = ...
    kAnimCurveUnknown: int = ...
    kConstant: int = ...
    kCycle: int = ...
    kCycleRelative: int = ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kLinear: int = ...
    kLocalDynamicAttr: int = ...
    kNormalAttr: int = ...
    kOscillate: int = ...
    kTangentAuto: int = ...
    kTangentAutoCustom: int = ...
    kTangentAutoEase: int = ...
    kTangentAutoMix: int = ...
    kTangentClamped: int = ...
    kTangentCustomEnd: int = ...
    kTangentCustomStart: int = ...
    kTangentFast: int = ...
    kTangentFixed: int = ...
    kTangentFlat: int = ...
    kTangentGlobal: int = ...
    kTangentLinear: int = ...
    kTangentPlateau: int = ...
    kTangentShared1: int = ...
    kTangentShared2: int = ...
    kTangentShared3: int = ...
    kTangentShared4: int = ...
    kTangentShared5: int = ...
    kTangentShared6: int = ...
    kTangentShared7: int = ...
    kTangentShared8: int = ...
    kTangentSlow: int = ...
    kTangentSmooth: int = ...
    kTangentStep: int = ...
    kTangentStepNext: int = ...
    kTangentTypeCount: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def namespace(*args: Any, **kwargs: Any) -> Any: ...
    @namespace.setter
    def namespace(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def numKeys(*args: Any, **kwargs: Any) -> Any: ...
    @numKeys.setter
    def numKeys(*args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def outTangentType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def pluginName(*args: Any, **kwargs: Any) -> Any: ...
    @pluginName.setter
    def pluginName(*args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def postInfinityType(*args: Any, **kwargs: Any) -> Any: ...
    @postInfinityType.setter
    def postInfinityType(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def preInfinityType(*args: Any, **kwargs: Any) -> Any: ...
    @preInfinityType.setter
    def preInfinityType(*args: Any, **kwargs: Any) -> Any: ...
    def remove(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAngle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInTangentType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInput(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIsBreakdown(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIsWeighted(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setOutTangentType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPostInfinityType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPreInfinityType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTangent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTangentTypes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTangentsLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setWeight(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setWeightsLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def tangentsLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def timedAnimCurveTypeForPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def typeId(*args: Any, **kwargs: Any) -> Any: ...
    @typeId.setter
    def typeId(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def typeName(*args: Any, **kwargs: Any) -> Any: ...
    @typeName.setter
    def typeName(*args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def unitlessAnimCurveTypeForPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def weightsLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFnGeometryFilter(MFnDependencyNode):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def deformerSet(*args: Any, **kwargs: Any) -> Any: ...
    @deformerSet.setter
    def deformerSet(*args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def envelope(*args: Any, **kwargs: Any) -> Any: ...
    @envelope.setter
    def envelope(*args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectingAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getComponentAtIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInputGeometry(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getOutputGeometry(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPathAtIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def groupIdAtIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def indexForGroupId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def indexForOutputConnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def indexForOutputShape(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inputShapeAtIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isDefaultNode(*args: Any, **kwargs: Any) -> Any: ...
    @isDefaultNode.setter
    def isDefaultNode(*args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isFromReferencedFile(*args: Any, **kwargs: Any) -> Any: ...
    @isFromReferencedFile.setter
    def isFromReferencedFile(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isLocked(*args: Any, **kwargs: Any) -> Any: ...
    @isLocked.setter
    def isLocked(*args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isShared(*args: Any, **kwargs: Any) -> Any: ...
    @isShared.setter
    def isShared(*args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNormalAttr: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def namespace(*args: Any, **kwargs: Any) -> Any: ...
    @namespace.setter
    def namespace(*args: Any, **kwargs: Any) -> Any: ...
    def numOutputConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def outputShapeAtIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def pluginName(*args: Any, **kwargs: Any) -> Any: ...
    @pluginName.setter
    def pluginName(*args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def typeId(*args: Any, **kwargs: Any) -> Any: ...
    @typeId.setter
    def typeId(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def typeName(*args: Any, **kwargs: Any) -> Any: ...
    @typeName.setter
    def typeName(*args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFnSkinCluster(MFnGeometryFilter):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def deformerSet(*args: Any, **kwargs: Any) -> Any: ...
    @deformerSet.setter
    def deformerSet(*args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def envelope(*args: Any, **kwargs: Any) -> Any: ...
    @envelope.setter
    def envelope(*args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectingAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getBlendWeights(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getComponentAtIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInputGeometry(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getOutputGeometry(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPathAtIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPointsAffectedByInfluence(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getWeights(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def groupIdAtIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def indexForGroupId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def indexForInfluenceObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def indexForOutputConnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def indexForOutputShape(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def influenceObjects(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inputShapeAtIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isDefaultNode(*args: Any, **kwargs: Any) -> Any: ...
    @isDefaultNode.setter
    def isDefaultNode(*args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isFromReferencedFile(*args: Any, **kwargs: Any) -> Any: ...
    @isFromReferencedFile.setter
    def isFromReferencedFile(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isLocked(*args: Any, **kwargs: Any) -> Any: ...
    @isLocked.setter
    def isLocked(*args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isShared(*args: Any, **kwargs: Any) -> Any: ...
    @isShared.setter
    def isShared(*args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNormalAttr: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def namespace(*args: Any, **kwargs: Any) -> Any: ...
    @namespace.setter
    def namespace(*args: Any, **kwargs: Any) -> Any: ...
    def numOutputConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def outputShapeAtIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def pluginName(*args: Any, **kwargs: Any) -> Any: ...
    @pluginName.setter
    def pluginName(*args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setBlendWeights(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setWeights(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def typeId(*args: Any, **kwargs: Any) -> Any: ...
    @typeId.setter
    def typeId(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def typeName(*args: Any, **kwargs: Any) -> Any: ...
    @typeName.setter
    def typeName(*args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

__builtins__: dict
__cached__: str
__doc__: NoneType
__file__: str
__loader__: SourceFileLoader
__name__: str
__package__: str
__spec__: ModuleSpec
key: str
ourdict: dict
py2dict: dict
val: str