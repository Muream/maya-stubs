# fmt: off
from typing import *
from typing_extensions import Self
from _typeshed import Incomplete


class M3dView(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def active3dView(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def activeAffectedColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def activeTemplateColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def applicationShell(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def backgroundColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def backgroundColorBottom(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def backgroundColorTop(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def beginGL(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def beginProjMatrixOverride(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def beginSelect(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def beginXorDrawing(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def colorAtIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def colorMask(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deviceContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def disallowPolygonOffset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def display(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def displayStatus(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def displayStyle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawText(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def endGL(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def endProjMatrixOverride(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def endSelect(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def endXorDrawing(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def filteredObjectList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def get3dView(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCamera(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getColorIndexAndTable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getLightCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getLightIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getLightPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getLightingMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getM3dViewFromModelEditor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getM3dViewFromModelPanel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getRendererName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getScreenPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def initNames(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isBackgroundGradient(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLightVisible(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isShadeActiveOnly(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isVisible(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kActive: int = ...
    kActiveAffected: int = ...
    kActiveColors: int = ...
    kActiveComponent: int = ...
    kActiveTemplate: int = ...
    kBackgroundColor: int = ...
    kBoundingBox: int = ...
    kCenter: int = ...
    kDefaultQualityRenderer: int = ...
    kDepth_8: int = ...
    kDepth_Float: int = ...
    kDisplayCVs: int = ...
    kDisplayCameras: int = ...
    kDisplayDeformers: int = ...
    kDisplayDimensions: int = ...
    kDisplayDynamicConstraints: int = ...
    kDisplayDynamics: int = ...
    kDisplayEverything: int = ...
    kDisplayFluids: int = ...
    kDisplayFollicles: int = ...
    kDisplayGrid: int = ...
    kDisplayHairSystems: int = ...
    kDisplayHulls: int = ...
    kDisplayIkHandles: int = ...
    kDisplayImagePlane: int = ...
    kDisplayJoints: int = ...
    kDisplayLights: int = ...
    kDisplayLocators: int = ...
    kDisplayManipulators: int = ...
    kDisplayMeshes: int = ...
    kDisplayNCloths: int = ...
    kDisplayNParticles: int = ...
    kDisplayNRigids: int = ...
    kDisplayNurbsCurves: int = ...
    kDisplayNurbsSurfaces: int = ...
    kDisplayParticleInstancers: int = ...
    kDisplayPivots: int = ...
    kDisplayPlanes: int = ...
    kDisplaySelectHandles: int = ...
    kDisplayStrokes: int = ...
    kDisplaySubdivSurfaces: int = ...
    kDisplayTextures: int = ...
    kDormant: int = ...
    kDormantColors: int = ...
    kExcludeMotionTrails: int = ...
    kExcludePluginShapes: int = ...
    kExternalRenderer: int = ...
    kFlatShaded: int = ...
    kGouraudShaded: int = ...
    kHighQualityRenderer: int = ...
    kHilite: int = ...
    kIntermediateObject: int = ...
    kInvisible: int = ...
    kLead: int = ...
    kLeft: int = ...
    kLightActive: int = ...
    kLightAll: int = ...
    kLightDefault: int = ...
    kLightNone: int = ...
    kLightSelected: int = ...
    kLive: int = ...
    kNoStatus: int = ...
    kPoints: int = ...
    kRight: int = ...
    kStippleDashed: int = ...
    kStippleNone: int = ...
    kTemplate: int = ...
    kTemplateColor: int = ...
    kUnused1: int = ...
    kViewport2Renderer: int = ...
    kWireFrame: int = ...
    def leadColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def liveColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def loadName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def modelViewMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def multipleDrawEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def multipleDrawPassCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numActiveColors(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numDormantColors(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numUserDefinedColors(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numberOf3dViews(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectDisplay(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectListFilterName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def playblastPortHeight(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def playblastPortWidth(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginObjectDisplay(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def popName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def popViewport(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def portHeight(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def portWidth(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def projectionMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pushName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pushViewport(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def readBufferTo2dTexture(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def readColorBuffer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def readDepthMap(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def referenceLayerColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def refresh(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def renderOverrideName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rendererString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scheduleRefresh(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scheduleRefreshAllViews(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def selectMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCamera(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setColorMask(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDisallowPolygonOffset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDisplayStyle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDrawColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDrawColorAndAlpha(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMultipleDrawEnable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMultipleDrawPassCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectDisplay(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectListFilterName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPluginObjectDisplay(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRenderOverrideName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setShowObjectFilterNameInHUD(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setShowViewSelectedChildren(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUserDefinedColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setViewSelectedPrefix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def showObjectFilterNameInHUD(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def showViewSelectedChildren(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def templateColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def textureMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def twoSidedLighting(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def updateViewingParameters(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userDefinedColorIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingDefaultMaterial(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingMipmappedTextures(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def viewIsFiltered(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def viewSelectedPrefix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def viewToObjectSpace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def viewToWorld(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def viewport(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def widget(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def window(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def wireframeOnShaded(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def wireframeOnlyInShadedMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def worldToView(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def writeColorBuffer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def xray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def xrayJoints(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MCursor(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    __hash__: NoneType = ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kCrossHairCursor: MCursor = ...
    kDefaultCursor: MCursor = ...
    kDoubleCrossHairCursor: MCursor = ...
    kEditCursor: MCursor = ...
    kHandCursor: MCursor = ...
    kPencilCursor: MCursor = ...

class MDrawData(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def geometry(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MDrawInfo(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canDrawComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def completelyInside(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def displayStatus(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def displayStyle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPrototype(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inSelect(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inUserInteraction(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inclusiveMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def multiPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectDisplayStatus(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginObjectDisplayStatus(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def projectionMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMultiPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userChangingViewContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def view(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MDrawProperties(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def color(*args: Any, **kwargs: Any) -> Any: ...
    @color.setter
    def color(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def lineStyle(*args: Any, **kwargs: Any) -> Any: ...
    @lineStyle.setter
    def lineStyle(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def lineWidth(*args: Any, **kwargs: Any) -> Any: ...
    @lineWidth.setter
    def lineWidth(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def pointSize(*args: Any, **kwargs: Any) -> Any: ...
    @pointSize.setter
    def pointSize(*args: Any, **kwargs: Any) -> Any: ...

class MDrawRequest(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def color(*args: Any, **kwargs: Any) -> Any: ...
    @color.setter
    def color(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def component(*args: Any, **kwargs: Any) -> Any: ...
    @component.setter
    def component(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def displayCullOpposite(*args: Any, **kwargs: Any) -> Any: ...
    @displayCullOpposite.setter
    def displayCullOpposite(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def displayCulling(*args: Any, **kwargs: Any) -> Any: ...
    @displayCulling.setter
    def displayCulling(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def displayStatus(*args: Any, **kwargs: Any) -> Any: ...
    @displayStatus.setter
    def displayStatus(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def displayStyle(*args: Any, **kwargs: Any) -> Any: ...
    @displayStyle.setter
    def displayStyle(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def drawData(*args: Any, **kwargs: Any) -> Any: ...
    @drawData.setter
    def drawData(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def drawLast(*args: Any, **kwargs: Any) -> Any: ...
    @drawLast.setter
    def drawLast(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isTransparent(*args: Any, **kwargs: Any) -> Any: ...
    @isTransparent.setter
    def isTransparent(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def material(*args: Any, **kwargs: Any) -> Any: ...
    @material.setter
    def material(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def matrix(*args: Any, **kwargs: Any) -> Any: ...
    @matrix.setter
    def matrix(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def multiPath(*args: Any, **kwargs: Any) -> Any: ...
    @multiPath.setter
    def multiPath(*args: Any, **kwargs: Any) -> Any: ...
    def planeColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPlaneColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def token(*args: Any, **kwargs: Any) -> Any: ...
    @token.setter
    def token(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def view(*args: Any, **kwargs: Any) -> Any: ...
    @view.setter
    def view(*args: Any, **kwargs: Any) -> Any: ...

class MEvent(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    controlKey: int = ...
    def getWindowPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isModifierControl(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isModifierKeyRelease(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isModifierLeftMouseButton(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isModifierMiddleMouseButton(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isModifierNone(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isModifierShift(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kLeftMouse: int = ...
    kMiddleMouse: int = ...
    @property
    def modifiers(*args: Any, **kwargs: Any) -> Any: ...
    @modifiers.setter
    def modifiers(*args: Any, **kwargs: Any) -> Any: ...
    def mouseButton(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def position(*args: Any, **kwargs: Any) -> Any: ...
    @position.setter
    def position(*args: Any, **kwargs: Any) -> Any: ...
    shiftKey: int = ...

class MFnCircleSweepManip(MFnManip3D):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def angleIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def axisIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def boundingBox(*args: Any, **kwargs: Any) -> Any: ...
    @boundingBox.setter
    def boundingBox(*args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def centerIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def childCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clearRestPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectToAnglePlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagRoot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteManipulator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawPlaneHandles(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def duplicate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def endCircleIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def endPoint(*args: Any, **kwargs: Any) -> Any: ...
    @endPoint.setter
    def endPoint(*args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fullPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectingAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllPaths(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedSetsAndMembers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def globalSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def handleSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasParent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def inModel(*args: Any, **kwargs: Any) -> Any: ...
    @inModel.setter
    def inModel(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def inUnderWorld(*args: Any, **kwargs: Any) -> Any: ...
    @inUnderWorld.setter
    def inUnderWorld(*args: Any, **kwargs: Any) -> Any: ...
    def instanceCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isChildOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isDefaultNode(*args: Any, **kwargs: Any) -> Any: ...
    @isDefaultNode.setter
    def isDefaultNode(*args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isFromReferencedFile(*args: Any, **kwargs: Any) -> Any: ...
    @isFromReferencedFile.setter
    def isFromReferencedFile(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isInstanceable(*args: Any, **kwargs: Any) -> Any: ...
    @isInstanceable.setter
    def isInstanceable(*args: Any, **kwargs: Any) -> Any: ...
    def isInstanced(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstancedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isIntermediateObject(*args: Any, **kwargs: Any) -> Any: ...
    @isIntermediateObject.setter
    def isIntermediateObject(*args: Any, **kwargs: Any) -> Any: ...
    def isLimited(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isLocked(*args: Any, **kwargs: Any) -> Any: ...
    @isLocked.setter
    def isLocked(*args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isOptimizePlaybackOn(*args: Any, **kwargs: Any) -> Any: ...
    @isOptimizePlaybackOn.setter
    def isOptimizePlaybackOn(*args: Any, **kwargs: Any) -> Any: ...
    def isParentOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isShared(*args: Any, **kwargs: Any) -> Any: ...
    @isShared.setter
    def isShared(*args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isVisible(*args: Any, **kwargs: Any) -> Any: ...
    @isVisible.setter
    def isVisible(*args: Any, **kwargs: Any) -> Any: ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNextPos: int = ...
    kNormalAttr: int = ...
    kRotateMaxX: int = ...
    kRotateMaxY: int = ...
    kRotateMaxZ: int = ...
    kRotateMinX: int = ...
    kRotateMinY: int = ...
    kRotateMinZ: int = ...
    kScaleMaxX: int = ...
    kScaleMaxY: int = ...
    kScaleMaxZ: int = ...
    kScaleMinX: int = ...
    kScaleMinY: int = ...
    kScaleMinZ: int = ...
    kShearMaxXY: int = ...
    kShearMaxXZ: int = ...
    kShearMaxYZ: int = ...
    kShearMinXY: int = ...
    kShearMinXZ: int = ...
    kShearMinYZ: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    kTranslateMaxX: int = ...
    kTranslateMaxY: int = ...
    kTranslateMaxZ: int = ...
    kTranslateMinX: int = ...
    kTranslateMinY: int = ...
    kTranslateMinZ: int = ...
    def limitValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def lineSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def manipScale(*args: Any, **kwargs: Any) -> Any: ...
    @manipScale.setter
    def manipScale(*args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def namespace(*args: Any, **kwargs: Any) -> Any: ...
    @namespace.setter
    def namespace(*args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def objectColor(*args: Any, **kwargs: Any) -> Any: ...
    @objectColor.setter
    def objectColor(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def objectColorRGB(*args: Any, **kwargs: Any) -> Any: ...
    @objectColorRGB.setter
    def objectColorRGB(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def objectColorType(*args: Any, **kwargs: Any) -> Any: ...
    @objectColorType.setter
    def objectColorType(*args: Any, **kwargs: Any) -> Any: ...
    def parent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def partialPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def pluginName(*args: Any, **kwargs: Any) -> Any: ...
    @pluginName.setter
    def pluginName(*args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChildAt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def resetFromRestPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def restPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateByComponents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateOrientation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotatePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotatePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateXYZValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotationComponents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotationOrder(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scaleBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scalePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scalePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAngle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCenterPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDrawAsArc(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDrawPlaneHandles(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setGlobalSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setHandleSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLineSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setNormal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRadius(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRestPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotateOrientation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotatePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotatePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotationComponents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotationOrder(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScalePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScalePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setShear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTransformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shearBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def startCircleIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def startPoint(*args: Any, **kwargs: Any) -> Any: ...
    @startPoint.setter
    def startPoint(*args: Any, **kwargs: Any) -> Any: ...
    def transformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def transformationMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def translateBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def translation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def typeId(*args: Any, **kwargs: Any) -> Any: ...
    @typeId.setter
    def typeId(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def typeName(*args: Any, **kwargs: Any) -> Any: ...
    @typeName.setter
    def typeName(*args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def useObjectColor(*args: Any, **kwargs: Any) -> Any: ...
    @useObjectColor.setter
    def useObjectColor(*args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFnCurveSegmentManip(MFnManip3D):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def boundingBox(*args: Any, **kwargs: Any) -> Any: ...
    @boundingBox.setter
    def boundingBox(*args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def childCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clearRestPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectToCurvePlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectToEndParamPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectToStartParamPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def curveIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagRoot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteManipulator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawPlaneHandles(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def duplicate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def endParamIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def endParameter(*args: Any, **kwargs: Any) -> Any: ...
    @endParameter.setter
    def endParameter(*args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fullPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectingAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllPaths(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedSetsAndMembers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def globalSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def handleSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasParent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def inModel(*args: Any, **kwargs: Any) -> Any: ...
    @inModel.setter
    def inModel(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def inUnderWorld(*args: Any, **kwargs: Any) -> Any: ...
    @inUnderWorld.setter
    def inUnderWorld(*args: Any, **kwargs: Any) -> Any: ...
    def instanceCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isChildOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isDefaultNode(*args: Any, **kwargs: Any) -> Any: ...
    @isDefaultNode.setter
    def isDefaultNode(*args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isFromReferencedFile(*args: Any, **kwargs: Any) -> Any: ...
    @isFromReferencedFile.setter
    def isFromReferencedFile(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isInstanceable(*args: Any, **kwargs: Any) -> Any: ...
    @isInstanceable.setter
    def isInstanceable(*args: Any, **kwargs: Any) -> Any: ...
    def isInstanced(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstancedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isIntermediateObject(*args: Any, **kwargs: Any) -> Any: ...
    @isIntermediateObject.setter
    def isIntermediateObject(*args: Any, **kwargs: Any) -> Any: ...
    def isLimited(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isLocked(*args: Any, **kwargs: Any) -> Any: ...
    @isLocked.setter
    def isLocked(*args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isOptimizePlaybackOn(*args: Any, **kwargs: Any) -> Any: ...
    @isOptimizePlaybackOn.setter
    def isOptimizePlaybackOn(*args: Any, **kwargs: Any) -> Any: ...
    def isParentOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isShared(*args: Any, **kwargs: Any) -> Any: ...
    @isShared.setter
    def isShared(*args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isVisible(*args: Any, **kwargs: Any) -> Any: ...
    @isVisible.setter
    def isVisible(*args: Any, **kwargs: Any) -> Any: ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNextPos: int = ...
    kNormalAttr: int = ...
    kRotateMaxX: int = ...
    kRotateMaxY: int = ...
    kRotateMaxZ: int = ...
    kRotateMinX: int = ...
    kRotateMinY: int = ...
    kRotateMinZ: int = ...
    kScaleMaxX: int = ...
    kScaleMaxY: int = ...
    kScaleMaxZ: int = ...
    kScaleMinX: int = ...
    kScaleMinY: int = ...
    kScaleMinZ: int = ...
    kShearMaxXY: int = ...
    kShearMaxXZ: int = ...
    kShearMaxYZ: int = ...
    kShearMinXY: int = ...
    kShearMinXZ: int = ...
    kShearMinYZ: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    kTranslateMaxX: int = ...
    kTranslateMaxY: int = ...
    kTranslateMaxZ: int = ...
    kTranslateMinX: int = ...
    kTranslateMinY: int = ...
    kTranslateMinZ: int = ...
    def limitValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def lineSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def manipScale(*args: Any, **kwargs: Any) -> Any: ...
    @manipScale.setter
    def manipScale(*args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def namespace(*args: Any, **kwargs: Any) -> Any: ...
    @namespace.setter
    def namespace(*args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def objectColor(*args: Any, **kwargs: Any) -> Any: ...
    @objectColor.setter
    def objectColor(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def objectColorRGB(*args: Any, **kwargs: Any) -> Any: ...
    @objectColorRGB.setter
    def objectColorRGB(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def objectColorType(*args: Any, **kwargs: Any) -> Any: ...
    @objectColorType.setter
    def objectColorType(*args: Any, **kwargs: Any) -> Any: ...
    def parent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def partialPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def pluginName(*args: Any, **kwargs: Any) -> Any: ...
    @pluginName.setter
    def pluginName(*args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChildAt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def resetFromRestPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def restPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateByComponents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateOrientation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotatePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotatePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateXYZValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotationComponents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotationOrder(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scaleBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scalePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scalePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDrawPlaneHandles(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setGlobalSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setHandleSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLineSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRestPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotateOrientation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotatePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotatePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotationComponents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotationOrder(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScalePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScalePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setShear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTransformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shearBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def startParamIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def startParameter(*args: Any, **kwargs: Any) -> Any: ...
    @startParameter.setter
    def startParameter(*args: Any, **kwargs: Any) -> Any: ...
    def transformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def transformationMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def translateBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def translation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def typeId(*args: Any, **kwargs: Any) -> Any: ...
    @typeId.setter
    def typeId(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def typeName(*args: Any, **kwargs: Any) -> Any: ...
    @typeName.setter
    def typeName(*args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def useObjectColor(*args: Any, **kwargs: Any) -> Any: ...
    @useObjectColor.setter
    def useObjectColor(*args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFnDirectionManip(MFnManip3D):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def boundingBox(*args: Any, **kwargs: Any) -> Any: ...
    @boundingBox.setter
    def boundingBox(*args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def childCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clearRestPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectToDirectionPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagRoot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteManipulator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def directionIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawPlaneHandles(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def duplicate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def endPointIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fullPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectingAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllPaths(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedSetsAndMembers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def globalSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def handleSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasParent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def inModel(*args: Any, **kwargs: Any) -> Any: ...
    @inModel.setter
    def inModel(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def inUnderWorld(*args: Any, **kwargs: Any) -> Any: ...
    @inUnderWorld.setter
    def inUnderWorld(*args: Any, **kwargs: Any) -> Any: ...
    def instanceCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isChildOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isDefaultNode(*args: Any, **kwargs: Any) -> Any: ...
    @isDefaultNode.setter
    def isDefaultNode(*args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isFromReferencedFile(*args: Any, **kwargs: Any) -> Any: ...
    @isFromReferencedFile.setter
    def isFromReferencedFile(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isInstanceable(*args: Any, **kwargs: Any) -> Any: ...
    @isInstanceable.setter
    def isInstanceable(*args: Any, **kwargs: Any) -> Any: ...
    def isInstanced(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstancedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isIntermediateObject(*args: Any, **kwargs: Any) -> Any: ...
    @isIntermediateObject.setter
    def isIntermediateObject(*args: Any, **kwargs: Any) -> Any: ...
    def isLimited(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isLocked(*args: Any, **kwargs: Any) -> Any: ...
    @isLocked.setter
    def isLocked(*args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isOptimizePlaybackOn(*args: Any, **kwargs: Any) -> Any: ...
    @isOptimizePlaybackOn.setter
    def isOptimizePlaybackOn(*args: Any, **kwargs: Any) -> Any: ...
    def isParentOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isShared(*args: Any, **kwargs: Any) -> Any: ...
    @isShared.setter
    def isShared(*args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isVisible(*args: Any, **kwargs: Any) -> Any: ...
    @isVisible.setter
    def isVisible(*args: Any, **kwargs: Any) -> Any: ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNextPos: int = ...
    kNormalAttr: int = ...
    kRotateMaxX: int = ...
    kRotateMaxY: int = ...
    kRotateMaxZ: int = ...
    kRotateMinX: int = ...
    kRotateMinY: int = ...
    kRotateMinZ: int = ...
    kScaleMaxX: int = ...
    kScaleMaxY: int = ...
    kScaleMaxZ: int = ...
    kScaleMinX: int = ...
    kScaleMinY: int = ...
    kScaleMinZ: int = ...
    kShearMaxXY: int = ...
    kShearMaxXZ: int = ...
    kShearMaxYZ: int = ...
    kShearMinXY: int = ...
    kShearMinXZ: int = ...
    kShearMinYZ: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    kTranslateMaxX: int = ...
    kTranslateMaxY: int = ...
    kTranslateMaxZ: int = ...
    kTranslateMinX: int = ...
    kTranslateMinY: int = ...
    kTranslateMinZ: int = ...
    def limitValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def lineSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def manipScale(*args: Any, **kwargs: Any) -> Any: ...
    @manipScale.setter
    def manipScale(*args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def namespace(*args: Any, **kwargs: Any) -> Any: ...
    @namespace.setter
    def namespace(*args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def objectColor(*args: Any, **kwargs: Any) -> Any: ...
    @objectColor.setter
    def objectColor(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def objectColorRGB(*args: Any, **kwargs: Any) -> Any: ...
    @objectColorRGB.setter
    def objectColorRGB(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def objectColorType(*args: Any, **kwargs: Any) -> Any: ...
    @objectColorType.setter
    def objectColorType(*args: Any, **kwargs: Any) -> Any: ...
    def parent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def partialPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def pluginName(*args: Any, **kwargs: Any) -> Any: ...
    @pluginName.setter
    def pluginName(*args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChildAt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def resetFromRestPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def restPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateByComponents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateOrientation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotatePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotatePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateXYZValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotationComponents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotationOrder(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scaleBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scalePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scalePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDirection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDrawPlaneHandles(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDrawStart(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setGlobalSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setHandleSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLineSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setNormalizeDirection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRestPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotateOrientation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotatePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotatePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotationComponents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotationOrder(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScalePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScalePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setShear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setStartPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTransformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shearBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def startPointIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def transformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def transformationMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def translateBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def translation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def typeId(*args: Any, **kwargs: Any) -> Any: ...
    @typeId.setter
    def typeId(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def typeName(*args: Any, **kwargs: Any) -> Any: ...
    @typeName.setter
    def typeName(*args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def useObjectColor(*args: Any, **kwargs: Any) -> Any: ...
    @useObjectColor.setter
    def useObjectColor(*args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFnDiscManip(MFnManip3D):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def angleIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def axisIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def boundingBox(*args: Any, **kwargs: Any) -> Any: ...
    @boundingBox.setter
    def boundingBox(*args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def centerIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def childCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clearRestPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectToAnglePlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagRoot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteManipulator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawPlaneHandles(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def duplicate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fullPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectingAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllPaths(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedSetsAndMembers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def globalSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def handleSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasParent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def inModel(*args: Any, **kwargs: Any) -> Any: ...
    @inModel.setter
    def inModel(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def inUnderWorld(*args: Any, **kwargs: Any) -> Any: ...
    @inUnderWorld.setter
    def inUnderWorld(*args: Any, **kwargs: Any) -> Any: ...
    def instanceCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isChildOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isDefaultNode(*args: Any, **kwargs: Any) -> Any: ...
    @isDefaultNode.setter
    def isDefaultNode(*args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isFromReferencedFile(*args: Any, **kwargs: Any) -> Any: ...
    @isFromReferencedFile.setter
    def isFromReferencedFile(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isInstanceable(*args: Any, **kwargs: Any) -> Any: ...
    @isInstanceable.setter
    def isInstanceable(*args: Any, **kwargs: Any) -> Any: ...
    def isInstanced(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstancedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isIntermediateObject(*args: Any, **kwargs: Any) -> Any: ...
    @isIntermediateObject.setter
    def isIntermediateObject(*args: Any, **kwargs: Any) -> Any: ...
    def isLimited(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isLocked(*args: Any, **kwargs: Any) -> Any: ...
    @isLocked.setter
    def isLocked(*args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isOptimizePlaybackOn(*args: Any, **kwargs: Any) -> Any: ...
    @isOptimizePlaybackOn.setter
    def isOptimizePlaybackOn(*args: Any, **kwargs: Any) -> Any: ...
    def isParentOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isShared(*args: Any, **kwargs: Any) -> Any: ...
    @isShared.setter
    def isShared(*args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isVisible(*args: Any, **kwargs: Any) -> Any: ...
    @isVisible.setter
    def isVisible(*args: Any, **kwargs: Any) -> Any: ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNextPos: int = ...
    kNormalAttr: int = ...
    kRotateMaxX: int = ...
    kRotateMaxY: int = ...
    kRotateMaxZ: int = ...
    kRotateMinX: int = ...
    kRotateMinY: int = ...
    kRotateMinZ: int = ...
    kScaleMaxX: int = ...
    kScaleMaxY: int = ...
    kScaleMaxZ: int = ...
    kScaleMinX: int = ...
    kScaleMinY: int = ...
    kScaleMinZ: int = ...
    kShearMaxXY: int = ...
    kShearMaxXZ: int = ...
    kShearMaxYZ: int = ...
    kShearMinXY: int = ...
    kShearMinXZ: int = ...
    kShearMinYZ: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    kTranslateMaxX: int = ...
    kTranslateMaxY: int = ...
    kTranslateMaxZ: int = ...
    kTranslateMinX: int = ...
    kTranslateMinY: int = ...
    kTranslateMinZ: int = ...
    def limitValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def lineSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def manipScale(*args: Any, **kwargs: Any) -> Any: ...
    @manipScale.setter
    def manipScale(*args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def namespace(*args: Any, **kwargs: Any) -> Any: ...
    @namespace.setter
    def namespace(*args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def objectColor(*args: Any, **kwargs: Any) -> Any: ...
    @objectColor.setter
    def objectColor(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def objectColorRGB(*args: Any, **kwargs: Any) -> Any: ...
    @objectColorRGB.setter
    def objectColorRGB(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def objectColorType(*args: Any, **kwargs: Any) -> Any: ...
    @objectColorType.setter
    def objectColorType(*args: Any, **kwargs: Any) -> Any: ...
    def parent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def partialPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def pluginName(*args: Any, **kwargs: Any) -> Any: ...
    @pluginName.setter
    def pluginName(*args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChildAt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def resetFromRestPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def restPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateByComponents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateOrientation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotatePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotatePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateXYZValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotationComponents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotationOrder(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scaleBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scalePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scalePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAngle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCenterPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDrawPlaneHandles(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setGlobalSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setHandleSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLineSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setNormal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRadius(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRestPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotateOrientation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotatePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotatePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotationComponents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotationOrder(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScalePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScalePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setShear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTransformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shearBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def transformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def transformationMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def translateBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def translation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def typeId(*args: Any, **kwargs: Any) -> Any: ...
    @typeId.setter
    def typeId(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def typeName(*args: Any, **kwargs: Any) -> Any: ...
    @typeName.setter
    def typeName(*args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def useObjectColor(*args: Any, **kwargs: Any) -> Any: ...
    @useObjectColor.setter
    def useObjectColor(*args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFnDistanceManip(MFnManip3D):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def boundingBox(*args: Any, **kwargs: Any) -> Any: ...
    @boundingBox.setter
    def boundingBox(*args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def childCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clearRestPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectToDistancePlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentPointIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagRoot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteManipulator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def directionIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def distanceIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawPlaneHandles(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def duplicate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fullPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectingAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllPaths(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedSetsAndMembers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def globalSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def handleSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasParent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def inModel(*args: Any, **kwargs: Any) -> Any: ...
    @inModel.setter
    def inModel(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def inUnderWorld(*args: Any, **kwargs: Any) -> Any: ...
    @inUnderWorld.setter
    def inUnderWorld(*args: Any, **kwargs: Any) -> Any: ...
    def instanceCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isChildOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isDefaultNode(*args: Any, **kwargs: Any) -> Any: ...
    @isDefaultNode.setter
    def isDefaultNode(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isDrawLineOn(*args: Any, **kwargs: Any) -> Any: ...
    @isDrawLineOn.setter
    def isDrawLineOn(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isDrawStartOn(*args: Any, **kwargs: Any) -> Any: ...
    @isDrawStartOn.setter
    def isDrawStartOn(*args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isFromReferencedFile(*args: Any, **kwargs: Any) -> Any: ...
    @isFromReferencedFile.setter
    def isFromReferencedFile(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isInstanceable(*args: Any, **kwargs: Any) -> Any: ...
    @isInstanceable.setter
    def isInstanceable(*args: Any, **kwargs: Any) -> Any: ...
    def isInstanced(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstancedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isIntermediateObject(*args: Any, **kwargs: Any) -> Any: ...
    @isIntermediateObject.setter
    def isIntermediateObject(*args: Any, **kwargs: Any) -> Any: ...
    def isLimited(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isLocked(*args: Any, **kwargs: Any) -> Any: ...
    @isLocked.setter
    def isLocked(*args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isOptimizePlaybackOn(*args: Any, **kwargs: Any) -> Any: ...
    @isOptimizePlaybackOn.setter
    def isOptimizePlaybackOn(*args: Any, **kwargs: Any) -> Any: ...
    def isParentOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isShared(*args: Any, **kwargs: Any) -> Any: ...
    @isShared.setter
    def isShared(*args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isVisible(*args: Any, **kwargs: Any) -> Any: ...
    @isVisible.setter
    def isVisible(*args: Any, **kwargs: Any) -> Any: ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNextPos: int = ...
    kNormalAttr: int = ...
    kRotateMaxX: int = ...
    kRotateMaxY: int = ...
    kRotateMaxZ: int = ...
    kRotateMinX: int = ...
    kRotateMinY: int = ...
    kRotateMinZ: int = ...
    kScaleMaxX: int = ...
    kScaleMaxY: int = ...
    kScaleMaxZ: int = ...
    kScaleMinX: int = ...
    kScaleMinY: int = ...
    kScaleMinZ: int = ...
    kShearMaxXY: int = ...
    kShearMaxXZ: int = ...
    kShearMaxYZ: int = ...
    kShearMinXY: int = ...
    kShearMinXZ: int = ...
    kShearMinYZ: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    kTranslateMaxX: int = ...
    kTranslateMaxY: int = ...
    kTranslateMaxZ: int = ...
    kTranslateMinX: int = ...
    kTranslateMinY: int = ...
    kTranslateMinZ: int = ...
    def limitValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def lineSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def manipScale(*args: Any, **kwargs: Any) -> Any: ...
    @manipScale.setter
    def manipScale(*args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def namespace(*args: Any, **kwargs: Any) -> Any: ...
    @namespace.setter
    def namespace(*args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def objectColor(*args: Any, **kwargs: Any) -> Any: ...
    @objectColor.setter
    def objectColor(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def objectColorRGB(*args: Any, **kwargs: Any) -> Any: ...
    @objectColorRGB.setter
    def objectColorRGB(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def objectColorType(*args: Any, **kwargs: Any) -> Any: ...
    @objectColorType.setter
    def objectColorType(*args: Any, **kwargs: Any) -> Any: ...
    def parent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def partialPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def pluginName(*args: Any, **kwargs: Any) -> Any: ...
    @pluginName.setter
    def pluginName(*args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChildAt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def resetFromRestPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def restPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateByComponents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateOrientation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotatePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotatePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateXYZValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotationComponents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotationOrder(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scaleBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scalePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scalePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def scalingFactor(*args: Any, **kwargs: Any) -> Any: ...
    @scalingFactor.setter
    def scalingFactor(*args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDirection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDrawPlaneHandles(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setGlobalSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setHandleSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLineSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRestPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotateOrientation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotatePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotatePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotationComponents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotationOrder(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScalePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScalePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setShear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setStartPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTransformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shearBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def startPointIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def transformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def transformationMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def translateBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def translation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def typeId(*args: Any, **kwargs: Any) -> Any: ...
    @typeId.setter
    def typeId(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def typeName(*args: Any, **kwargs: Any) -> Any: ...
    @typeName.setter
    def typeName(*args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def useObjectColor(*args: Any, **kwargs: Any) -> Any: ...
    @useObjectColor.setter
    def useObjectColor(*args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFnFreePointTriadManip(MFnManip3D):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def boundingBox(*args: Any, **kwargs: Any) -> Any: ...
    @boundingBox.setter
    def boundingBox(*args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def childCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clearRestPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectToPointPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagRoot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteManipulator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawPlaneHandles(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def duplicate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fullPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectingAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllPaths(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedSetsAndMembers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def globalSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def handleSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasParent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def inModel(*args: Any, **kwargs: Any) -> Any: ...
    @inModel.setter
    def inModel(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def inUnderWorld(*args: Any, **kwargs: Any) -> Any: ...
    @inUnderWorld.setter
    def inUnderWorld(*args: Any, **kwargs: Any) -> Any: ...
    def instanceCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isChildOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isDefaultNode(*args: Any, **kwargs: Any) -> Any: ...
    @isDefaultNode.setter
    def isDefaultNode(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isDrawAxesOn(*args: Any, **kwargs: Any) -> Any: ...
    @isDrawAxesOn.setter
    def isDrawAxesOn(*args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isFromReferencedFile(*args: Any, **kwargs: Any) -> Any: ...
    @isFromReferencedFile.setter
    def isFromReferencedFile(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isInstanceable(*args: Any, **kwargs: Any) -> Any: ...
    @isInstanceable.setter
    def isInstanceable(*args: Any, **kwargs: Any) -> Any: ...
    def isInstanced(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstancedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isIntermediateObject(*args: Any, **kwargs: Any) -> Any: ...
    @isIntermediateObject.setter
    def isIntermediateObject(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isKeyframeAllOn(*args: Any, **kwargs: Any) -> Any: ...
    @isKeyframeAllOn.setter
    def isKeyframeAllOn(*args: Any, **kwargs: Any) -> Any: ...
    def isLimited(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isLocked(*args: Any, **kwargs: Any) -> Any: ...
    @isLocked.setter
    def isLocked(*args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isOptimizePlaybackOn(*args: Any, **kwargs: Any) -> Any: ...
    @isOptimizePlaybackOn.setter
    def isOptimizePlaybackOn(*args: Any, **kwargs: Any) -> Any: ...
    def isParentOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isShared(*args: Any, **kwargs: Any) -> Any: ...
    @isShared.setter
    def isShared(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isSnapModeOn(*args: Any, **kwargs: Any) -> Any: ...
    @isSnapModeOn.setter
    def isSnapModeOn(*args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isVisible(*args: Any, **kwargs: Any) -> Any: ...
    @isVisible.setter
    def isVisible(*args: Any, **kwargs: Any) -> Any: ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNextPos: int = ...
    kNormalAttr: int = ...
    kRotateMaxX: int = ...
    kRotateMaxY: int = ...
    kRotateMaxZ: int = ...
    kRotateMinX: int = ...
    kRotateMinY: int = ...
    kRotateMinZ: int = ...
    kScaleMaxX: int = ...
    kScaleMaxY: int = ...
    kScaleMaxZ: int = ...
    kScaleMinX: int = ...
    kScaleMinY: int = ...
    kScaleMinZ: int = ...
    kShearMaxXY: int = ...
    kShearMaxXZ: int = ...
    kShearMaxYZ: int = ...
    kShearMinXY: int = ...
    kShearMinXZ: int = ...
    kShearMinYZ: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    kTranslateMaxX: int = ...
    kTranslateMaxY: int = ...
    kTranslateMaxZ: int = ...
    kTranslateMinX: int = ...
    kTranslateMinY: int = ...
    kTranslateMinZ: int = ...
    kViewPlane: int = ...
    kXYPlane: int = ...
    kXZPlane: int = ...
    kYZPlane: int = ...
    def limitValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def lineSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def manipScale(*args: Any, **kwargs: Any) -> Any: ...
    @manipScale.setter
    def manipScale(*args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def namespace(*args: Any, **kwargs: Any) -> Any: ...
    @namespace.setter
    def namespace(*args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def objectColor(*args: Any, **kwargs: Any) -> Any: ...
    @objectColor.setter
    def objectColor(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def objectColorRGB(*args: Any, **kwargs: Any) -> Any: ...
    @objectColorRGB.setter
    def objectColorRGB(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def objectColorType(*args: Any, **kwargs: Any) -> Any: ...
    @objectColorType.setter
    def objectColorType(*args: Any, **kwargs: Any) -> Any: ...
    def parent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def partialPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def pluginName(*args: Any, **kwargs: Any) -> Any: ...
    @pluginName.setter
    def pluginName(*args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pointIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChildAt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def resetFromRestPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def restPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateByComponents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateOrientation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotatePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotatePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateXYZValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotationComponents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotationOrder(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scaleBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scalePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scalePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDirection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDrawArrowHead(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDrawPlaneHandles(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setGlobalSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setGlobalTriadPlane(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setHandleSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLineSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRestPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotateOrientation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotatePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotatePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotationComponents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotationOrder(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScalePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScalePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setShear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTransformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shearBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def transformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def transformationMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def translateBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def translation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def typeId(*args: Any, **kwargs: Any) -> Any: ...
    @typeId.setter
    def typeId(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def typeName(*args: Any, **kwargs: Any) -> Any: ...
    @typeName.setter
    def typeName(*args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def useObjectColor(*args: Any, **kwargs: Any) -> Any: ...
    @useObjectColor.setter
    def useObjectColor(*args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFnManip3D(MFnTransform):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def boundingBox(*args: Any, **kwargs: Any) -> Any: ...
    @boundingBox.setter
    def boundingBox(*args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def childCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clearRestPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagRoot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteManipulator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawPlaneHandles(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def duplicate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fullPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectingAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllPaths(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedSetsAndMembers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def globalSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def handleSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasParent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def inModel(*args: Any, **kwargs: Any) -> Any: ...
    @inModel.setter
    def inModel(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def inUnderWorld(*args: Any, **kwargs: Any) -> Any: ...
    @inUnderWorld.setter
    def inUnderWorld(*args: Any, **kwargs: Any) -> Any: ...
    def instanceCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isChildOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isDefaultNode(*args: Any, **kwargs: Any) -> Any: ...
    @isDefaultNode.setter
    def isDefaultNode(*args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isFromReferencedFile(*args: Any, **kwargs: Any) -> Any: ...
    @isFromReferencedFile.setter
    def isFromReferencedFile(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isInstanceable(*args: Any, **kwargs: Any) -> Any: ...
    @isInstanceable.setter
    def isInstanceable(*args: Any, **kwargs: Any) -> Any: ...
    def isInstanced(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstancedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isIntermediateObject(*args: Any, **kwargs: Any) -> Any: ...
    @isIntermediateObject.setter
    def isIntermediateObject(*args: Any, **kwargs: Any) -> Any: ...
    def isLimited(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isLocked(*args: Any, **kwargs: Any) -> Any: ...
    @isLocked.setter
    def isLocked(*args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isOptimizePlaybackOn(*args: Any, **kwargs: Any) -> Any: ...
    @isOptimizePlaybackOn.setter
    def isOptimizePlaybackOn(*args: Any, **kwargs: Any) -> Any: ...
    def isParentOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isShared(*args: Any, **kwargs: Any) -> Any: ...
    @isShared.setter
    def isShared(*args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isVisible(*args: Any, **kwargs: Any) -> Any: ...
    @isVisible.setter
    def isVisible(*args: Any, **kwargs: Any) -> Any: ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNextPos: int = ...
    kNormalAttr: int = ...
    kRotateMaxX: int = ...
    kRotateMaxY: int = ...
    kRotateMaxZ: int = ...
    kRotateMinX: int = ...
    kRotateMinY: int = ...
    kRotateMinZ: int = ...
    kScaleMaxX: int = ...
    kScaleMaxY: int = ...
    kScaleMaxZ: int = ...
    kScaleMinX: int = ...
    kScaleMinY: int = ...
    kScaleMinZ: int = ...
    kShearMaxXY: int = ...
    kShearMaxXZ: int = ...
    kShearMaxYZ: int = ...
    kShearMinXY: int = ...
    kShearMinXZ: int = ...
    kShearMinYZ: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    kTranslateMaxX: int = ...
    kTranslateMaxY: int = ...
    kTranslateMaxZ: int = ...
    kTranslateMinX: int = ...
    kTranslateMinY: int = ...
    kTranslateMinZ: int = ...
    def limitValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def lineSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def manipScale(*args: Any, **kwargs: Any) -> Any: ...
    @manipScale.setter
    def manipScale(*args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def namespace(*args: Any, **kwargs: Any) -> Any: ...
    @namespace.setter
    def namespace(*args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def objectColor(*args: Any, **kwargs: Any) -> Any: ...
    @objectColor.setter
    def objectColor(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def objectColorRGB(*args: Any, **kwargs: Any) -> Any: ...
    @objectColorRGB.setter
    def objectColorRGB(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def objectColorType(*args: Any, **kwargs: Any) -> Any: ...
    @objectColorType.setter
    def objectColorType(*args: Any, **kwargs: Any) -> Any: ...
    def parent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def partialPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def pluginName(*args: Any, **kwargs: Any) -> Any: ...
    @pluginName.setter
    def pluginName(*args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChildAt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def resetFromRestPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def restPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateByComponents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateOrientation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotatePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotatePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateXYZValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotationComponents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotationOrder(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scaleBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scalePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scalePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDrawPlaneHandles(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setGlobalSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setHandleSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLineSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRestPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotateOrientation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotatePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotatePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotationComponents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotationOrder(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScalePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScalePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setShear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTransformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shearBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def transformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def transformationMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def translateBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def translation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def typeId(*args: Any, **kwargs: Any) -> Any: ...
    @typeId.setter
    def typeId(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def typeName(*args: Any, **kwargs: Any) -> Any: ...
    @typeName.setter
    def typeName(*args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def useObjectColor(*args: Any, **kwargs: Any) -> Any: ...
    @useObjectColor.setter
    def useObjectColor(*args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFnPointOnCurveManip(MFnManip3D):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def boundingBox(*args: Any, **kwargs: Any) -> Any: ...
    @boundingBox.setter
    def boundingBox(*args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def childCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clearRestPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectToCurvePlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectToParamPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def curveIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def curvePoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagRoot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteManipulator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawPlaneHandles(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def duplicate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fullPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectingAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllPaths(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedSetsAndMembers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def globalSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def handleSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasParent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def inModel(*args: Any, **kwargs: Any) -> Any: ...
    @inModel.setter
    def inModel(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def inUnderWorld(*args: Any, **kwargs: Any) -> Any: ...
    @inUnderWorld.setter
    def inUnderWorld(*args: Any, **kwargs: Any) -> Any: ...
    def instanceCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isChildOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isDefaultNode(*args: Any, **kwargs: Any) -> Any: ...
    @isDefaultNode.setter
    def isDefaultNode(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isDrawCurveOn(*args: Any, **kwargs: Any) -> Any: ...
    @isDrawCurveOn.setter
    def isDrawCurveOn(*args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isFromReferencedFile(*args: Any, **kwargs: Any) -> Any: ...
    @isFromReferencedFile.setter
    def isFromReferencedFile(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isInstanceable(*args: Any, **kwargs: Any) -> Any: ...
    @isInstanceable.setter
    def isInstanceable(*args: Any, **kwargs: Any) -> Any: ...
    def isInstanced(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstancedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isIntermediateObject(*args: Any, **kwargs: Any) -> Any: ...
    @isIntermediateObject.setter
    def isIntermediateObject(*args: Any, **kwargs: Any) -> Any: ...
    def isLimited(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isLocked(*args: Any, **kwargs: Any) -> Any: ...
    @isLocked.setter
    def isLocked(*args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isOptimizePlaybackOn(*args: Any, **kwargs: Any) -> Any: ...
    @isOptimizePlaybackOn.setter
    def isOptimizePlaybackOn(*args: Any, **kwargs: Any) -> Any: ...
    def isParentOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isShared(*args: Any, **kwargs: Any) -> Any: ...
    @isShared.setter
    def isShared(*args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isVisible(*args: Any, **kwargs: Any) -> Any: ...
    @isVisible.setter
    def isVisible(*args: Any, **kwargs: Any) -> Any: ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNextPos: int = ...
    kNormalAttr: int = ...
    kRotateMaxX: int = ...
    kRotateMaxY: int = ...
    kRotateMaxZ: int = ...
    kRotateMinX: int = ...
    kRotateMinY: int = ...
    kRotateMinZ: int = ...
    kScaleMaxX: int = ...
    kScaleMaxY: int = ...
    kScaleMaxZ: int = ...
    kScaleMinX: int = ...
    kScaleMinY: int = ...
    kScaleMinZ: int = ...
    kShearMaxXY: int = ...
    kShearMaxXZ: int = ...
    kShearMaxYZ: int = ...
    kShearMinXY: int = ...
    kShearMinXZ: int = ...
    kShearMinYZ: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    kTranslateMaxX: int = ...
    kTranslateMaxY: int = ...
    kTranslateMaxZ: int = ...
    kTranslateMinX: int = ...
    kTranslateMinY: int = ...
    kTranslateMinZ: int = ...
    def limitValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def lineSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def manipScale(*args: Any, **kwargs: Any) -> Any: ...
    @manipScale.setter
    def manipScale(*args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def namespace(*args: Any, **kwargs: Any) -> Any: ...
    @namespace.setter
    def namespace(*args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def objectColor(*args: Any, **kwargs: Any) -> Any: ...
    @objectColor.setter
    def objectColor(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def objectColorRGB(*args: Any, **kwargs: Any) -> Any: ...
    @objectColorRGB.setter
    def objectColorRGB(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def objectColorType(*args: Any, **kwargs: Any) -> Any: ...
    @objectColorType.setter
    def objectColorType(*args: Any, **kwargs: Any) -> Any: ...
    def paramIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def parameter(*args: Any, **kwargs: Any) -> Any: ...
    @parameter.setter
    def parameter(*args: Any, **kwargs: Any) -> Any: ...
    def parent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def partialPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def pluginName(*args: Any, **kwargs: Any) -> Any: ...
    @pluginName.setter
    def pluginName(*args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChildAt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def resetFromRestPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def restPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateByComponents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateOrientation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotatePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotatePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateXYZValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotationComponents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotationOrder(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scaleBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scalePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scalePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDrawPlaneHandles(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setGlobalSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setHandleSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLineSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRestPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotateOrientation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotatePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotatePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotationComponents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotationOrder(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScalePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScalePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setShear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTransformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shearBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def transformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def transformationMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def translateBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def translation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def typeId(*args: Any, **kwargs: Any) -> Any: ...
    @typeId.setter
    def typeId(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def typeName(*args: Any, **kwargs: Any) -> Any: ...
    @typeName.setter
    def typeName(*args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def useObjectColor(*args: Any, **kwargs: Any) -> Any: ...
    @useObjectColor.setter
    def useObjectColor(*args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFnPointOnSurfaceManip(MFnManip3D):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def boundingBox(*args: Any, **kwargs: Any) -> Any: ...
    @boundingBox.setter
    def boundingBox(*args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def childCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clearRestPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectToParamPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectToSurfacePlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagRoot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteManipulator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawPlaneHandles(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def duplicate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fullPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectingAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllPaths(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedSetsAndMembers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def globalSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def handleSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasParent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def inModel(*args: Any, **kwargs: Any) -> Any: ...
    @inModel.setter
    def inModel(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def inUnderWorld(*args: Any, **kwargs: Any) -> Any: ...
    @inUnderWorld.setter
    def inUnderWorld(*args: Any, **kwargs: Any) -> Any: ...
    def instanceCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isChildOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isDefaultNode(*args: Any, **kwargs: Any) -> Any: ...
    @isDefaultNode.setter
    def isDefaultNode(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isDrawSurfaceOn(*args: Any, **kwargs: Any) -> Any: ...
    @isDrawSurfaceOn.setter
    def isDrawSurfaceOn(*args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isFromReferencedFile(*args: Any, **kwargs: Any) -> Any: ...
    @isFromReferencedFile.setter
    def isFromReferencedFile(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isInstanceable(*args: Any, **kwargs: Any) -> Any: ...
    @isInstanceable.setter
    def isInstanceable(*args: Any, **kwargs: Any) -> Any: ...
    def isInstanced(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstancedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isIntermediateObject(*args: Any, **kwargs: Any) -> Any: ...
    @isIntermediateObject.setter
    def isIntermediateObject(*args: Any, **kwargs: Any) -> Any: ...
    def isLimited(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isLocked(*args: Any, **kwargs: Any) -> Any: ...
    @isLocked.setter
    def isLocked(*args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isOptimizePlaybackOn(*args: Any, **kwargs: Any) -> Any: ...
    @isOptimizePlaybackOn.setter
    def isOptimizePlaybackOn(*args: Any, **kwargs: Any) -> Any: ...
    def isParentOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isShared(*args: Any, **kwargs: Any) -> Any: ...
    @isShared.setter
    def isShared(*args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isVisible(*args: Any, **kwargs: Any) -> Any: ...
    @isVisible.setter
    def isVisible(*args: Any, **kwargs: Any) -> Any: ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNextPos: int = ...
    kNormalAttr: int = ...
    kRotateMaxX: int = ...
    kRotateMaxY: int = ...
    kRotateMaxZ: int = ...
    kRotateMinX: int = ...
    kRotateMinY: int = ...
    kRotateMinZ: int = ...
    kScaleMaxX: int = ...
    kScaleMaxY: int = ...
    kScaleMaxZ: int = ...
    kScaleMinX: int = ...
    kScaleMinY: int = ...
    kScaleMinZ: int = ...
    kShearMaxXY: int = ...
    kShearMaxXZ: int = ...
    kShearMaxYZ: int = ...
    kShearMinXY: int = ...
    kShearMinXZ: int = ...
    kShearMinYZ: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    kTranslateMaxX: int = ...
    kTranslateMaxY: int = ...
    kTranslateMaxZ: int = ...
    kTranslateMinX: int = ...
    kTranslateMinY: int = ...
    kTranslateMinZ: int = ...
    def limitValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def lineSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def manipScale(*args: Any, **kwargs: Any) -> Any: ...
    @manipScale.setter
    def manipScale(*args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def namespace(*args: Any, **kwargs: Any) -> Any: ...
    @namespace.setter
    def namespace(*args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def objectColor(*args: Any, **kwargs: Any) -> Any: ...
    @objectColor.setter
    def objectColor(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def objectColorRGB(*args: Any, **kwargs: Any) -> Any: ...
    @objectColorRGB.setter
    def objectColorRGB(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def objectColorType(*args: Any, **kwargs: Any) -> Any: ...
    @objectColorType.setter
    def objectColorType(*args: Any, **kwargs: Any) -> Any: ...
    def paramIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def partialPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def pluginName(*args: Any, **kwargs: Any) -> Any: ...
    @pluginName.setter
    def pluginName(*args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChildAt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def resetFromRestPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def restPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateByComponents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateOrientation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotatePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotatePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateXYZValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotationComponents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotationOrder(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scaleBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scalePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scalePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDrawArrows(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDrawPlaneHandles(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setGlobalSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setHandleSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLineSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRestPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotateOrientation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotatePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotatePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotationComponents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotationOrder(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScalePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScalePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setShear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTransformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shearBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def surfaceIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def transformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def transformationMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def translateBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def translation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def typeId(*args: Any, **kwargs: Any) -> Any: ...
    @typeId.setter
    def typeId(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def typeName(*args: Any, **kwargs: Any) -> Any: ...
    @typeName.setter
    def typeName(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def uParam(*args: Any, **kwargs: Any) -> Any: ...
    @uParam.setter
    def uParam(*args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def useObjectColor(*args: Any, **kwargs: Any) -> Any: ...
    @useObjectColor.setter
    def useObjectColor(*args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def vParam(*args: Any, **kwargs: Any) -> Any: ...
    @vParam.setter
    def vParam(*args: Any, **kwargs: Any) -> Any: ...

class MFnRotateManip(MFnManip3D):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def boundingBox(*args: Any, **kwargs: Any) -> Any: ...
    @boundingBox.setter
    def boundingBox(*args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def childCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clearRestPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectToRotationCenterPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectToRotationPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagRoot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteManipulator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def displayWithNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawPlaneHandles(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def duplicate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fullPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectingAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllPaths(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedSetsAndMembers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def globalSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def handleSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasParent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def inModel(*args: Any, **kwargs: Any) -> Any: ...
    @inModel.setter
    def inModel(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def inUnderWorld(*args: Any, **kwargs: Any) -> Any: ...
    @inUnderWorld.setter
    def inUnderWorld(*args: Any, **kwargs: Any) -> Any: ...
    def instanceCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isChildOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isDefaultNode(*args: Any, **kwargs: Any) -> Any: ...
    @isDefaultNode.setter
    def isDefaultNode(*args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isFromReferencedFile(*args: Any, **kwargs: Any) -> Any: ...
    @isFromReferencedFile.setter
    def isFromReferencedFile(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isInstanceable(*args: Any, **kwargs: Any) -> Any: ...
    @isInstanceable.setter
    def isInstanceable(*args: Any, **kwargs: Any) -> Any: ...
    def isInstanced(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstancedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isIntermediateObject(*args: Any, **kwargs: Any) -> Any: ...
    @isIntermediateObject.setter
    def isIntermediateObject(*args: Any, **kwargs: Any) -> Any: ...
    def isLimited(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isLocked(*args: Any, **kwargs: Any) -> Any: ...
    @isLocked.setter
    def isLocked(*args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isOptimizePlaybackOn(*args: Any, **kwargs: Any) -> Any: ...
    @isOptimizePlaybackOn.setter
    def isOptimizePlaybackOn(*args: Any, **kwargs: Any) -> Any: ...
    def isParentOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isShared(*args: Any, **kwargs: Any) -> Any: ...
    @isShared.setter
    def isShared(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isSnapModeOn(*args: Any, **kwargs: Any) -> Any: ...
    @isSnapModeOn.setter
    def isSnapModeOn(*args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isVisible(*args: Any, **kwargs: Any) -> Any: ...
    @isVisible.setter
    def isVisible(*args: Any, **kwargs: Any) -> Any: ...
    kExtensionAttr: int = ...
    kGimbal: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNextPos: int = ...
    kNormalAttr: int = ...
    kObjectSpace: int = ...
    kRotateMaxX: int = ...
    kRotateMaxY: int = ...
    kRotateMaxZ: int = ...
    kRotateMinX: int = ...
    kRotateMinY: int = ...
    kRotateMinZ: int = ...
    kScaleMaxX: int = ...
    kScaleMaxY: int = ...
    kScaleMaxZ: int = ...
    kScaleMinX: int = ...
    kScaleMinY: int = ...
    kScaleMinZ: int = ...
    kShearMaxXY: int = ...
    kShearMaxXZ: int = ...
    kShearMaxYZ: int = ...
    kShearMinXY: int = ...
    kShearMinXZ: int = ...
    kShearMinYZ: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    kTranslateMaxX: int = ...
    kTranslateMaxY: int = ...
    kTranslateMaxZ: int = ...
    kTranslateMinX: int = ...
    kTranslateMinY: int = ...
    kTranslateMinZ: int = ...
    kWorldSpace: int = ...
    def limitValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def lineSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def manipScale(*args: Any, **kwargs: Any) -> Any: ...
    @manipScale.setter
    def manipScale(*args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def namespace(*args: Any, **kwargs: Any) -> Any: ...
    @namespace.setter
    def namespace(*args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def objectColor(*args: Any, **kwargs: Any) -> Any: ...
    @objectColor.setter
    def objectColor(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def objectColorRGB(*args: Any, **kwargs: Any) -> Any: ...
    @objectColorRGB.setter
    def objectColorRGB(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def objectColorType(*args: Any, **kwargs: Any) -> Any: ...
    @objectColorType.setter
    def objectColorType(*args: Any, **kwargs: Any) -> Any: ...
    def parent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def partialPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def pluginName(*args: Any, **kwargs: Any) -> Any: ...
    @pluginName.setter
    def pluginName(*args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChildAt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def resetFromRestPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def restPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateByComponents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def rotateMode(*args: Any, **kwargs: Any) -> Any: ...
    @rotateMode.setter
    def rotateMode(*args: Any, **kwargs: Any) -> Any: ...
    def rotateOrientation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotatePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotatePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateXYZValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotationCenterIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotationComponents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotationIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotationOrder(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scaleBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scalePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scalePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDrawPlaneHandles(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setGlobalSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setHandleSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInitialRotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLineSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRestPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotateOrientation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotatePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotatePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotationCenter(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotationComponents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotationOrder(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScalePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScalePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setShear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTransformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shearBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def snapIncrement(*args: Any, **kwargs: Any) -> Any: ...
    @snapIncrement.setter
    def snapIncrement(*args: Any, **kwargs: Any) -> Any: ...
    def transformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def transformationMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def translateBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def translation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def typeId(*args: Any, **kwargs: Any) -> Any: ...
    @typeId.setter
    def typeId(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def typeName(*args: Any, **kwargs: Any) -> Any: ...
    @typeName.setter
    def typeName(*args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def useObjectColor(*args: Any, **kwargs: Any) -> Any: ...
    @useObjectColor.setter
    def useObjectColor(*args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFnScaleManip(MFnManip3D):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def boundingBox(*args: Any, **kwargs: Any) -> Any: ...
    @boundingBox.setter
    def boundingBox(*args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def childCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clearRestPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectToScaleCenterPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectToScalePlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagRoot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteManipulator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def displayWithNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawPlaneHandles(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def duplicate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fullPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectingAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllPaths(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedSetsAndMembers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def globalSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def handleSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasParent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def inModel(*args: Any, **kwargs: Any) -> Any: ...
    @inModel.setter
    def inModel(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def inUnderWorld(*args: Any, **kwargs: Any) -> Any: ...
    @inUnderWorld.setter
    def inUnderWorld(*args: Any, **kwargs: Any) -> Any: ...
    def instanceCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isChildOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isDefaultNode(*args: Any, **kwargs: Any) -> Any: ...
    @isDefaultNode.setter
    def isDefaultNode(*args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isFromReferencedFile(*args: Any, **kwargs: Any) -> Any: ...
    @isFromReferencedFile.setter
    def isFromReferencedFile(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isInstanceable(*args: Any, **kwargs: Any) -> Any: ...
    @isInstanceable.setter
    def isInstanceable(*args: Any, **kwargs: Any) -> Any: ...
    def isInstanced(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstancedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isIntermediateObject(*args: Any, **kwargs: Any) -> Any: ...
    @isIntermediateObject.setter
    def isIntermediateObject(*args: Any, **kwargs: Any) -> Any: ...
    def isLimited(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isLocked(*args: Any, **kwargs: Any) -> Any: ...
    @isLocked.setter
    def isLocked(*args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isOptimizePlaybackOn(*args: Any, **kwargs: Any) -> Any: ...
    @isOptimizePlaybackOn.setter
    def isOptimizePlaybackOn(*args: Any, **kwargs: Any) -> Any: ...
    def isParentOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isShared(*args: Any, **kwargs: Any) -> Any: ...
    @isShared.setter
    def isShared(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isSnapModeOn(*args: Any, **kwargs: Any) -> Any: ...
    @isSnapModeOn.setter
    def isSnapModeOn(*args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isVisible(*args: Any, **kwargs: Any) -> Any: ...
    @isVisible.setter
    def isVisible(*args: Any, **kwargs: Any) -> Any: ...
    kArbitraryOrientation: int = ...
    kDefaultOrientation: int = ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNextPos: int = ...
    kNormalAttr: int = ...
    kRotateMaxX: int = ...
    kRotateMaxY: int = ...
    kRotateMaxZ: int = ...
    kRotateMinX: int = ...
    kRotateMinY: int = ...
    kRotateMinZ: int = ...
    kScaleMaxX: int = ...
    kScaleMaxY: int = ...
    kScaleMaxZ: int = ...
    kScaleMinX: int = ...
    kScaleMinY: int = ...
    kScaleMinZ: int = ...
    kShearMaxXY: int = ...
    kShearMaxXZ: int = ...
    kShearMaxYZ: int = ...
    kShearMinXY: int = ...
    kShearMinXZ: int = ...
    kShearMinYZ: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    kTranslateMaxX: int = ...
    kTranslateMaxY: int = ...
    kTranslateMaxZ: int = ...
    kTranslateMinX: int = ...
    kTranslateMinY: int = ...
    kTranslateMinZ: int = ...
    def limitValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def lineSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def manipScale(*args: Any, **kwargs: Any) -> Any: ...
    @manipScale.setter
    def manipScale(*args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def namespace(*args: Any, **kwargs: Any) -> Any: ...
    @namespace.setter
    def namespace(*args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def objectColor(*args: Any, **kwargs: Any) -> Any: ...
    @objectColor.setter
    def objectColor(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def objectColorRGB(*args: Any, **kwargs: Any) -> Any: ...
    @objectColorRGB.setter
    def objectColorRGB(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def objectColorType(*args: Any, **kwargs: Any) -> Any: ...
    @objectColorType.setter
    def objectColorType(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def orientation(*args: Any, **kwargs: Any) -> Any: ...
    @orientation.setter
    def orientation(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def orientationMode(*args: Any, **kwargs: Any) -> Any: ...
    @orientationMode.setter
    def orientationMode(*args: Any, **kwargs: Any) -> Any: ...
    def parent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def partialPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def pluginName(*args: Any, **kwargs: Any) -> Any: ...
    @pluginName.setter
    def pluginName(*args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChildAt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def resetFromRestPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def restPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateByComponents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateOrientation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotatePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotatePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateXYZValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotationComponents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotationOrder(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scaleBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scaleCenterIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scaleIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scalePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scalePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDrawPlaneHandles(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setGlobalSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setHandleSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInitialScale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLineSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRestPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotateOrientation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotatePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotatePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotationComponents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotationOrder(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScalePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScalePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setShear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTransformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shearBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def snapIncrement(*args: Any, **kwargs: Any) -> Any: ...
    @snapIncrement.setter
    def snapIncrement(*args: Any, **kwargs: Any) -> Any: ...
    def transformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def transformationMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def translateBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def translation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def typeId(*args: Any, **kwargs: Any) -> Any: ...
    @typeId.setter
    def typeId(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def typeName(*args: Any, **kwargs: Any) -> Any: ...
    @typeName.setter
    def typeName(*args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def useObjectColor(*args: Any, **kwargs: Any) -> Any: ...
    @useObjectColor.setter
    def useObjectColor(*args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFnStateManip(MFnManip3D):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def boundingBox(*args: Any, **kwargs: Any) -> Any: ...
    @boundingBox.setter
    def boundingBox(*args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def childCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clearRestPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectToStatePlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagRoot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteManipulator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawPlaneHandles(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def duplicate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fullPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectingAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllPaths(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedSetsAndMembers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def globalSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def handleSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasParent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def inModel(*args: Any, **kwargs: Any) -> Any: ...
    @inModel.setter
    def inModel(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def inUnderWorld(*args: Any, **kwargs: Any) -> Any: ...
    @inUnderWorld.setter
    def inUnderWorld(*args: Any, **kwargs: Any) -> Any: ...
    def instanceCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isChildOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isDefaultNode(*args: Any, **kwargs: Any) -> Any: ...
    @isDefaultNode.setter
    def isDefaultNode(*args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isFromReferencedFile(*args: Any, **kwargs: Any) -> Any: ...
    @isFromReferencedFile.setter
    def isFromReferencedFile(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isInstanceable(*args: Any, **kwargs: Any) -> Any: ...
    @isInstanceable.setter
    def isInstanceable(*args: Any, **kwargs: Any) -> Any: ...
    def isInstanced(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstancedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isIntermediateObject(*args: Any, **kwargs: Any) -> Any: ...
    @isIntermediateObject.setter
    def isIntermediateObject(*args: Any, **kwargs: Any) -> Any: ...
    def isLimited(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isLocked(*args: Any, **kwargs: Any) -> Any: ...
    @isLocked.setter
    def isLocked(*args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isOptimizePlaybackOn(*args: Any, **kwargs: Any) -> Any: ...
    @isOptimizePlaybackOn.setter
    def isOptimizePlaybackOn(*args: Any, **kwargs: Any) -> Any: ...
    def isParentOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isShared(*args: Any, **kwargs: Any) -> Any: ...
    @isShared.setter
    def isShared(*args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isVisible(*args: Any, **kwargs: Any) -> Any: ...
    @isVisible.setter
    def isVisible(*args: Any, **kwargs: Any) -> Any: ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNextPos: int = ...
    kNormalAttr: int = ...
    kRotateMaxX: int = ...
    kRotateMaxY: int = ...
    kRotateMaxZ: int = ...
    kRotateMinX: int = ...
    kRotateMinY: int = ...
    kRotateMinZ: int = ...
    kScaleMaxX: int = ...
    kScaleMaxY: int = ...
    kScaleMaxZ: int = ...
    kScaleMinX: int = ...
    kScaleMinY: int = ...
    kScaleMinZ: int = ...
    kShearMaxXY: int = ...
    kShearMaxXZ: int = ...
    kShearMaxYZ: int = ...
    kShearMinXY: int = ...
    kShearMinXZ: int = ...
    kShearMinYZ: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    kTranslateMaxX: int = ...
    kTranslateMaxY: int = ...
    kTranslateMaxZ: int = ...
    kTranslateMinX: int = ...
    kTranslateMinY: int = ...
    kTranslateMinZ: int = ...
    def limitValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def lineSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def manipScale(*args: Any, **kwargs: Any) -> Any: ...
    @manipScale.setter
    def manipScale(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def maxStates(*args: Any, **kwargs: Any) -> Any: ...
    @maxStates.setter
    def maxStates(*args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def namespace(*args: Any, **kwargs: Any) -> Any: ...
    @namespace.setter
    def namespace(*args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def objectColor(*args: Any, **kwargs: Any) -> Any: ...
    @objectColor.setter
    def objectColor(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def objectColorRGB(*args: Any, **kwargs: Any) -> Any: ...
    @objectColorRGB.setter
    def objectColorRGB(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def objectColorType(*args: Any, **kwargs: Any) -> Any: ...
    @objectColorType.setter
    def objectColorType(*args: Any, **kwargs: Any) -> Any: ...
    def parent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def partialPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def pluginName(*args: Any, **kwargs: Any) -> Any: ...
    @pluginName.setter
    def pluginName(*args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def positionIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChildAt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def resetFromRestPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def restPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateByComponents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateOrientation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotatePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotatePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateXYZValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotationComponents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotationOrder(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scaleBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scalePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scalePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDrawPlaneHandles(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setGlobalSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setHandleSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInitialState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLineSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRestPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotateOrientation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotatePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotatePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotationComponents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotationOrder(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScalePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScalePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setShear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTransformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shearBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def state(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def stateIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def transformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def transformationMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def translateBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def translation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def typeId(*args: Any, **kwargs: Any) -> Any: ...
    @typeId.setter
    def typeId(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def typeName(*args: Any, **kwargs: Any) -> Any: ...
    @typeName.setter
    def typeName(*args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def useObjectColor(*args: Any, **kwargs: Any) -> Any: ...
    @useObjectColor.setter
    def useObjectColor(*args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFnToggleManip(MFnManip3D):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def boundingBox(*args: Any, **kwargs: Any) -> Any: ...
    @boundingBox.setter
    def boundingBox(*args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def childCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clearRestPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectToTogglePlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagRoot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteManipulator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def direction(*args: Any, **kwargs: Any) -> Any: ...
    @direction.setter
    def direction(*args: Any, **kwargs: Any) -> Any: ...
    def directionIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawPlaneHandles(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def duplicate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fullPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectingAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllPaths(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedSetsAndMembers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def globalSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def handleSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasParent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def inModel(*args: Any, **kwargs: Any) -> Any: ...
    @inModel.setter
    def inModel(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def inUnderWorld(*args: Any, **kwargs: Any) -> Any: ...
    @inUnderWorld.setter
    def inUnderWorld(*args: Any, **kwargs: Any) -> Any: ...
    def instanceCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isChildOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isDefaultNode(*args: Any, **kwargs: Any) -> Any: ...
    @isDefaultNode.setter
    def isDefaultNode(*args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isFromReferencedFile(*args: Any, **kwargs: Any) -> Any: ...
    @isFromReferencedFile.setter
    def isFromReferencedFile(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isInstanceable(*args: Any, **kwargs: Any) -> Any: ...
    @isInstanceable.setter
    def isInstanceable(*args: Any, **kwargs: Any) -> Any: ...
    def isInstanced(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstancedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isIntermediateObject(*args: Any, **kwargs: Any) -> Any: ...
    @isIntermediateObject.setter
    def isIntermediateObject(*args: Any, **kwargs: Any) -> Any: ...
    def isLimited(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isLocked(*args: Any, **kwargs: Any) -> Any: ...
    @isLocked.setter
    def isLocked(*args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isOptimizePlaybackOn(*args: Any, **kwargs: Any) -> Any: ...
    @isOptimizePlaybackOn.setter
    def isOptimizePlaybackOn(*args: Any, **kwargs: Any) -> Any: ...
    def isParentOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isShared(*args: Any, **kwargs: Any) -> Any: ...
    @isShared.setter
    def isShared(*args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def isVisible(*args: Any, **kwargs: Any) -> Any: ...
    @isVisible.setter
    def isVisible(*args: Any, **kwargs: Any) -> Any: ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNextPos: int = ...
    kNormalAttr: int = ...
    kRotateMaxX: int = ...
    kRotateMaxY: int = ...
    kRotateMaxZ: int = ...
    kRotateMinX: int = ...
    kRotateMinY: int = ...
    kRotateMinZ: int = ...
    kScaleMaxX: int = ...
    kScaleMaxY: int = ...
    kScaleMaxZ: int = ...
    kScaleMinX: int = ...
    kScaleMinY: int = ...
    kScaleMinZ: int = ...
    kShearMaxXY: int = ...
    kShearMaxXZ: int = ...
    kShearMaxYZ: int = ...
    kShearMinXY: int = ...
    kShearMinXZ: int = ...
    kShearMinYZ: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    kTranslateMaxX: int = ...
    kTranslateMaxY: int = ...
    kTranslateMaxZ: int = ...
    kTranslateMinX: int = ...
    kTranslateMinY: int = ...
    kTranslateMinZ: int = ...
    @property
    def length(*args: Any, **kwargs: Any) -> Any: ...
    @length.setter
    def length(*args: Any, **kwargs: Any) -> Any: ...
    def lengthIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def limitValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def lineSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def manipScale(*args: Any, **kwargs: Any) -> Any: ...
    @manipScale.setter
    def manipScale(*args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def namespace(*args: Any, **kwargs: Any) -> Any: ...
    @namespace.setter
    def namespace(*args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def objectColor(*args: Any, **kwargs: Any) -> Any: ...
    @objectColor.setter
    def objectColor(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def objectColorRGB(*args: Any, **kwargs: Any) -> Any: ...
    @objectColorRGB.setter
    def objectColorRGB(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def objectColorType(*args: Any, **kwargs: Any) -> Any: ...
    @objectColorType.setter
    def objectColorType(*args: Any, **kwargs: Any) -> Any: ...
    def parent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def partialPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def pluginName(*args: Any, **kwargs: Any) -> Any: ...
    @pluginName.setter
    def pluginName(*args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChildAt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def resetFromRestPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def restPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateByComponents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateOrientation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotatePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotatePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateXYZValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotationComponents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotationOrder(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scaleBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scalePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scalePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDrawPlaneHandles(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setGlobalSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setHandleSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLineSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRestPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotateOrientation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotatePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotatePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotationComponents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotationOrder(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScalePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScalePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setShear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTransformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shearBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def startPoint(*args: Any, **kwargs: Any) -> Any: ...
    @startPoint.setter
    def startPoint(*args: Any, **kwargs: Any) -> Any: ...
    def startPointIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def toggle(*args: Any, **kwargs: Any) -> Any: ...
    @toggle.setter
    def toggle(*args: Any, **kwargs: Any) -> Any: ...
    def toggleIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def transformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def transformationMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def translateBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def translation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def typeId(*args: Any, **kwargs: Any) -> Any: ...
    @typeId.setter
    def typeId(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def typeName(*args: Any, **kwargs: Any) -> Any: ...
    @typeName.setter
    def typeName(*args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def useObjectColor(*args: Any, **kwargs: Any) -> Any: ...
    @useObjectColor.setter
    def useObjectColor(*args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MHWShaderSwatchGenerator(MSwatchRenderBase):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cancelCurrentSwatchRender(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cancelParallelRendering(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doIteration(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def finishParallelRender(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getSwatchBackgroundColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def image(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def initialize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def node(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def renderParallel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def renderQuality(*args: Any, **kwargs: Any) -> Any: ...
    @renderQuality.setter
    def renderQuality(*args: Any, **kwargs: Any) -> Any: ...
    def resolution(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def swatchNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MManipData(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asBool(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asDouble(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asFloat(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asLong(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asMObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asShort(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asUnsigned(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isSimple(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MMaterial(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def applyTexture(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def defaultMaterial(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def evaluateDiffuse(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def evaluateEmission(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def evaluateMaterial(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def evaluateShininess(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def evaluateSpecular(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def evaluateTexture(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDiffuse(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getEmission(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getHasTransparency(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getHwShaderNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getShininess(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getSpecular(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getTextureTransformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAmbientColor: int = ...
    kBumpMap: int = ...
    kColor: int = ...
    kCosinePower: int = ...
    kDiffuse: int = ...
    kEccentricity: int = ...
    kHighlightSize: int = ...
    kIncandescence: int = ...
    kReflectedColor: int = ...
    kReflectivity: int = ...
    kRoughness: int = ...
    kSpecularColor: int = ...
    kSpecularRollOff: int = ...
    kTransluscence: int = ...
    kTransparency: int = ...
    kWhiteness: int = ...
    def materialIsTextured(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaterial(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shadingEngine(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def textureImage(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MMaterialArray(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __getitem__(self: Self, key: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __len__(self: Self) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def append(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def sizeIncrement(*args: Any, **kwargs: Any) -> Any: ...
    @sizeIncrement.setter
    def sizeIncrement(*args: Any, **kwargs: Any) -> Any: ...

class MPaintMessage(MMessage):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addVertexColorCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentCallbackId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kDefaultAction: int = ...
    kDoAction: int = ...
    kDoNotDoAction: int = ...
    def nodeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MPanelCanvas(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addPrimitive(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createFloatVertexBuffer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createPrimitive(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createTimeVertexBuffer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def destroyPrimitive(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def destroyVertexBuffer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isAutoRefresh(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLayerVisible(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kGraphEditorAxisLabels: int = ...
    kGraphEditorBackground: int = ...
    kGraphEditorCurveNames: int = ...
    kGraphEditorCurves: int = ...
    kGraphEditorFirstDefaultDraw: int = ...
    kGraphEditorGrid: int = ...
    kGraphEditorLastDefaultDraw: int = ...
    kGraphEditorOverlayTexture: int = ...
    kGraphEditorRetimeToolText: int = ...
    kGraphEditorTimeMarker: int = ...
    kGraphEditorUndefined: int = ...
    def refresh(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registerDrawUICallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removePrimitive(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAutoRefresh(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLayerVisible(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def supportsUIDrawing(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def unregisterDrawUICallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MPanelCanvasInfo(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getViewportBounds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getViewportSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setViewportBounds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def supportsUIDrawing(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MPxContext(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def abortAction(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addManipulator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def argTypeNumericalInput(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def beginMarquee(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def completeAction(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteAction(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteManipulators(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doDrag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doDragLegacy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doEnterRegion(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doHold(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doHoldLegacy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doPress(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doPressLegacy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doPtrMoved(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doPtrMovedLegacy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doRelease(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doReleaseLegacy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dragMarquee(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawFeedback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def feedbackNumericalInput(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def helpStateHasChanged(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def image(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kImage1: int = ...
    kImage2: int = ...
    kImage3: int = ...
    def newToolCommand(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def processNumericalInput(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def releaseMarquee(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCursor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setHelpString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setImage(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTitleString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def stringClassName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def toolOffCleanup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def toolOnSetup(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MPxContextCommand(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def appendSyntax(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doEditFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doQueryFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def makeObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parser(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setResult(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def syntax(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MPxDragAndDropBehavior(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectAttrToAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectAttrToNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectNodeToAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectNodeToNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shouldBeUsedFor(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MPxHardwareShader(MPxNode):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeAffects(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def compute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def configCache(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectionBroken(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectionMade(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copyInternalData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dependsOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def existWithoutInConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def existWithoutOutConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findResource(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def forceCache(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAvailableImages(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCacheSetup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFilesToArchive(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getHardwareShader(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInternalValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInternalValueInContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasInvalidationRangeTransformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inheritAttributesFrom(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def internalArrayCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isAbstractClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isPassiveOutput(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAssembly: int = ...
    kBlendShape: int = ...
    kCameraSetNode: int = ...
    kClientDeviceNode: int = ...
    kConstraintNode: int = ...
    kDeformerNode: int = ...
    kDependNode: int = ...
    kEmitterNode: int = ...
    kEvaluatedDirectly: int = ...
    kEvaluatedIndirectly: int = ...
    kFieldNode: int = ...
    kFluidEmitterNode: int = ...
    kGeometryFilter: int = ...
    kHardwareShader: int = ...
    kHwShaderNode: int = ...
    kIkSolverNode: int = ...
    kImagePlaneNode: int = ...
    kIsTransparent: int = ...
    kLast: int = ...
    kLeaveDirty: int = ...
    kLocatorNode: int = ...
    kManipContainer: int = ...
    kManipulatorNode: int = ...
    kMotionPathNode: int = ...
    kNoTransparencyFrontBackCull: int = ...
    kNoTransparencyPolygonSort: int = ...
    kObjectSet: int = ...
    kParticleAttributeMapperNode: int = ...
    kPostEvaluationTypeLast: int = ...
    kSkinCluster: int = ...
    kSpringNode: int = ...
    kSurfaceShape: int = ...
    kThreadedDeviceNode: int = ...
    kTransformNode: int = ...
    def legalConnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def legalDisconnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    outColor: MObject = ...
    outColorB: MObject = ...
    outColorG: MObject = ...
    outColorR: MObject = ...
    def passThroughToMany(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def passThroughToOne(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postConstructor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postEvaluation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def preEvaluation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def profile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def renderImage(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def renderSwatchImage(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDependentsDirty(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExistWithoutInConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExistWithoutOutConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternalValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternalValueInContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMPSafe(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUniformParameters(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setVaryingParameters(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shouldSave(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def thisMObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def transformInvalidationRange(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def transparencyOptions(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MPxHwShaderNode(MPxNode):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeAffects(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def bind(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def colorsPerVertex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def compute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def configCache(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectionBroken(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectionMade(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copyInternalData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentShadingEngine(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dependsOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dirtyMask(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def existWithoutInConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def existWithoutOutConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def forceCache(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def geometry(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAvailableImages(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCacheSetup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getColorSetNames(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFilesToArchive(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getHwShaderNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInternalValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInternalValueInContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getTexCoordSetNames(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glBind(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGeometry(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glUnbind(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasInvalidationRangeTransformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasTransparency(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inheritAttributesFrom(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def internalArrayCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def invertTexCoords(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isAbstractClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isPassiveOutput(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAssembly: int = ...
    kBlendShape: int = ...
    kCameraSetNode: int = ...
    kClientDeviceNode: int = ...
    kConstraintNode: int = ...
    kDeformerNode: int = ...
    kDependNode: int = ...
    kDirtyAll: int = ...
    kDirtyColorArrays: int = ...
    kDirtyNone: int = ...
    kDirtyNormalArray: int = ...
    kDirtyTexCoordArrays: int = ...
    kDirtyVertexArray: int = ...
    kEmitterNode: int = ...
    kEvaluatedDirectly: int = ...
    kEvaluatedIndirectly: int = ...
    kFieldNode: int = ...
    kFluidEmitterNode: int = ...
    kGeometryFilter: int = ...
    kHardwareShader: int = ...
    kHwShaderNode: int = ...
    kIkSolverNode: int = ...
    kImagePlaneNode: int = ...
    kIsTransparent: int = ...
    kLast: int = ...
    kLeaveDirty: int = ...
    kLocatorNode: int = ...
    kManipContainer: int = ...
    kManipulatorNode: int = ...
    kMotionPathNode: int = ...
    kNoTransparencyFrontBackCull: int = ...
    kNoTransparencyPolygonSort: int = ...
    kObjectSet: int = ...
    kParticleAttributeMapperNode: int = ...
    kPostEvaluationTypeLast: int = ...
    kSkinCluster: int = ...
    kSpringNode: int = ...
    kSurfaceShape: int = ...
    kThreadedDeviceNode: int = ...
    kTransformNode: int = ...
    kWriteAll: int = ...
    kWriteColorArrays: int = ...
    kWriteNone: int = ...
    kWriteNormalArray: int = ...
    kWriteTexCoordArrays: int = ...
    kWriteVertexArray: int = ...
    def legalConnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def legalDisconnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def normalsPerVertex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    outColor: MObject = ...
    outColorB: MObject = ...
    outColorG: MObject = ...
    outColorR: MObject = ...
    outGlowColor: MObject = ...
    outGlowColorB: MObject = ...
    outGlowColorG: MObject = ...
    outGlowColorR: MObject = ...
    outMatteOpacity: MObject = ...
    outMatteOpacityB: MObject = ...
    outMatteOpacityG: MObject = ...
    outMatteOpacityR: MObject = ...
    outTransparency: MObject = ...
    outTransparencyB: MObject = ...
    outTransparencyG: MObject = ...
    outTransparencyR: MObject = ...
    def passThroughToMany(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def passThroughToOne(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postConstructor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postEvaluation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def preEvaluation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def provideVertexIDs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def renderImage(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def renderSwatchImage(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDependentsDirty(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExistWithoutInConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExistWithoutOutConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternalValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternalValueInContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMPSafe(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shouldSave(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def supportsBatching(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def texCoordsPerVertex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def thisMObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def transformInvalidationRange(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def transparencyOptions(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def unbind(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MPxLocatorNode(MPxNode):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeAffects(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def boundingBox(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    boundingBoxCenterX: MObject = ...
    boundingBoxCenterY: MObject = ...
    boundingBoxCenterZ: MObject = ...
    center: MObject = ...
    def closestPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def color(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def colorRGB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def compute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def configCache(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectionBroken(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectionMade(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copyInternalData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dependsOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def draw(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawLast(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def excludeAsLocator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def existWithoutInConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def existWithoutOutConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def forceCache(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCacheSetup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFilesToArchive(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInternalValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInternalValueInContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getShapeSelectionMask(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasInvalidationRangeTransformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inheritAttributesFrom(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    instObjGroups: MObject = ...
    intermediateObject: MObject = ...
    def internalArrayCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    inverseMatrix: MObject = ...
    def isAbstractClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isBounded(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isPassiveOutput(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    isTemplated: MObject = ...
    def isTransparent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAssembly: int = ...
    kBlendShape: int = ...
    kCameraSetNode: int = ...
    kClientDeviceNode: int = ...
    kConstraintNode: int = ...
    kDeformerNode: int = ...
    kDependNode: int = ...
    kEmitterNode: int = ...
    kEvaluatedDirectly: int = ...
    kEvaluatedIndirectly: int = ...
    kFieldNode: int = ...
    kFluidEmitterNode: int = ...
    kGeometryFilter: int = ...
    kHardwareShader: int = ...
    kHwShaderNode: int = ...
    kIkSolverNode: int = ...
    kImagePlaneNode: int = ...
    kLast: int = ...
    kLeaveDirty: int = ...
    kLocatorNode: int = ...
    kManipContainer: int = ...
    kManipulatorNode: int = ...
    kMotionPathNode: int = ...
    kObjectSet: int = ...
    kParticleAttributeMapperNode: int = ...
    kPostEvaluationTypeLast: int = ...
    kSkinCluster: int = ...
    kSpringNode: int = ...
    kSurfaceShape: int = ...
    kThreadedDeviceNode: int = ...
    kTransformNode: int = ...
    def legalConnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def legalDisconnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    localPosition: MObject = ...
    localPositionX: MObject = ...
    localPositionY: MObject = ...
    localPositionZ: MObject = ...
    localScale: MObject = ...
    localScaleX: MObject = ...
    localScaleY: MObject = ...
    localScaleZ: MObject = ...
    matrix: MObject = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    nodeBoundingBox: MObject = ...
    nodeBoundingBoxMax: MObject = ...
    nodeBoundingBoxMaxX: MObject = ...
    nodeBoundingBoxMaxY: MObject = ...
    nodeBoundingBoxMaxZ: MObject = ...
    nodeBoundingBoxMin: MObject = ...
    nodeBoundingBoxMinX: MObject = ...
    nodeBoundingBoxMinY: MObject = ...
    nodeBoundingBoxMinZ: MObject = ...
    nodeBoundingBoxSize: MObject = ...
    nodeBoundingBoxSizeX: MObject = ...
    nodeBoundingBoxSizeY: MObject = ...
    nodeBoundingBoxSizeZ: MObject = ...
    objectColor: MObject = ...
    objectGroupColor: MObject = ...
    objectGroupId: MObject = ...
    objectGroups: MObject = ...
    objectGrpCompList: MObject = ...
    parentInverseMatrix: MObject = ...
    parentMatrix: MObject = ...
    def passThroughToMany(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def passThroughToOne(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postConstructor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postEvaluation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def preEvaluation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDependentsDirty(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExistWithoutInConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExistWithoutOutConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternalValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternalValueInContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMPSafe(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shouldSave(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def thisMObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def transformInvalidationRange(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    underWorldObject: MObject = ...
    def useClosestPointForSelection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    useObjectColor: MObject = ...
    visibility: MObject = ...
    worldInverseMatrix: MObject = ...
    worldMatrix: MObject = ...
    worldPosition: MObject = ...
    worldPositionX: MObject = ...
    worldPositionY: MObject = ...
    worldPositionZ: MObject = ...

class MPxManipContainer(MPxNode):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addCircleSweepManip(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addCurveSegmentManip(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addDirectionManip(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addDiscManip(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addDistanceManip(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addFreePointTriadManip(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addMPxManipulatorNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addManipToPlugConversion(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addPlugToInViewEditor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addPlugToManipConversion(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addPointOnCurveManip(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addPointOnSurfaceManip(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addRotateManip(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addScaleManip(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addStateManip(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addToManipConnectTable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addToggleManip(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeAffects(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def compute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def configCache(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectToDependNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectionBroken(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectionMade(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copyInternalData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createChildren(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dependsOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doDrag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doPress(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doRelease(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def draw(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawUI(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def existWithoutInConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def existWithoutOutConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def finishAddingManips(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def forceCache(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCacheSetup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConverterManipDoubleValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConverterManipMEulerRotationValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConverterManipMMatrixValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConverterManipMPointValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConverterManipMTransformationMatrixValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConverterManipMVectorValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConverterManipUIntValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConverterManipValues(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConverterPlugDoubleValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConverterPlugMEulerRotationValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConverterPlugMMatrixValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConverterPlugMPointValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConverterPlugMVectorValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConverterPlugValues(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFilesToArchive(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInternalValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInternalValueInContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasInvalidationRangeTransformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inheritAttributesFrom(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def initialize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def internalArrayCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isAbstractClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isManipActive(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isPassiveOutput(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAssembly: int = ...
    kBlendShape: int = ...
    kCameraSetNode: int = ...
    kClientDeviceNode: int = ...
    kConstraintNode: int = ...
    kDeformerNode: int = ...
    kDependNode: int = ...
    kEmitterNode: int = ...
    kEvaluatedDirectly: int = ...
    kEvaluatedIndirectly: int = ...
    kFieldNode: int = ...
    kFluidEmitterNode: int = ...
    kGeometryFilter: int = ...
    kHardwareShader: int = ...
    kHwShaderNode: int = ...
    kIkSolverNode: int = ...
    kImagePlaneNode: int = ...
    kLast: int = ...
    kLeaveDirty: int = ...
    kLocatorNode: int = ...
    kManipContainer: int = ...
    kManipulatorNode: int = ...
    kMotionPathNode: int = ...
    kObjectSet: int = ...
    kParticleAttributeMapperNode: int = ...
    kPostEvaluationTypeLast: int = ...
    kSkinCluster: int = ...
    kSpringNode: int = ...
    kSurfaceShape: int = ...
    kThreadedDeviceNode: int = ...
    kTransformNode: int = ...
    def legalConnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def legalDisconnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def manipToPlugConversion(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def newManipulator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def passThroughToMany(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def passThroughToOne(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def plugToManipConversion(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postConstructor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postEvaluation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def preDrawUI(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def preEvaluation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeFromManipConnectTable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDependentsDirty(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExistWithoutInConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExistWithoutOutConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternalValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternalValueInContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMPSafe(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shouldSave(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def thisMObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def transformInvalidationRange(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MPxManipulatorNode(MPxNode):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addDependentPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addDoubleValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addPointValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addVectorValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeAffects(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def colorAndName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def compute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def configCache(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectPlugToValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectToDependNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectionBroken(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectionMade(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copyInternalData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dependentPlugsReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dependsOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterForMouseMove(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dimmedColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doDrag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doMove(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doPress(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doRelease(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def draw(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawUI(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def existWithoutInConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def existWithoutOutConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def finishAddingManips(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def forceCache(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCacheSetup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDoubleValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFilesToArchive(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInternalValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInternalValueInContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPointValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getVectorValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glActiveName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glFirstHandle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasInvalidationRangeTransformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inheritAttributesFrom(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def internalArrayCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isAbstractClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isPassiveOutput(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAssembly: int = ...
    kBlendShape: int = ...
    kCameraSetNode: int = ...
    kClientDeviceNode: int = ...
    kConstraintNode: int = ...
    kDeformerNode: int = ...
    kDependNode: int = ...
    kEmitterNode: int = ...
    kEvaluatedDirectly: int = ...
    kEvaluatedIndirectly: int = ...
    kFieldNode: int = ...
    kFluidEmitterNode: int = ...
    kGeometryFilter: int = ...
    kHardwareShader: int = ...
    kHwShaderNode: int = ...
    kIkSolverNode: int = ...
    kImagePlaneNode: int = ...
    kLast: int = ...
    kLeaveDirty: int = ...
    kLocatorNode: int = ...
    kManipContainer: int = ...
    kManipulatorNode: int = ...
    kMotionPathNode: int = ...
    kObjectSet: int = ...
    kParticleAttributeMapperNode: int = ...
    kPostEvaluationTypeLast: int = ...
    kSkinCluster: int = ...
    kSpringNode: int = ...
    kSurfaceShape: int = ...
    kThreadedDeviceNode: int = ...
    kTransformNode: int = ...
    def labelBackgroundColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def labelColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def legalConnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def legalDisconnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def lineColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def mainColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def mouseDown(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def mousePosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def mouseRay(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def mouseRayWorld(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def mouseUp(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def newManipulator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def passThroughToMany(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def passThroughToOne(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postConstructor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postEvaluation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def preDrawUI(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def preEvaluation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def prevColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registerForMouseMove(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def selectedColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDependentsDirty(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoubleValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExistWithoutInConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExistWithoutOutConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setHandleColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternalValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternalValueInContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMPSafe(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPointValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setVectorValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shouldDrawHandleAsSelected(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shouldSave(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def thisMObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def transformInvalidationRange(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def xColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def yColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def zColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MPxSelectionContext(MPxContext):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def abortAction(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addManipulator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def argTypeNumericalInput(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def beginMarquee(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def completeAction(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteAction(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteManipulators(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doDrag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doDragLegacy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doEnterRegion(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doHold(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doHoldLegacy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doPress(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doPressLegacy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doPtrMoved(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doPtrMovedLegacy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doRelease(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doReleaseLegacy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dragMarquee(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawFeedback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def feedbackNumericalInput(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def helpStateHasChanged(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def image(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isSelecting(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kImage1: int = ...
    kImage2: int = ...
    kImage3: int = ...
    def lastDragPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def newToolCommand(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def processNumericalInput(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def releaseMarquee(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAllowDoubleClickAction(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAllowPaintSelect(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAllowPreSelectHilight(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAllowSoftSelect(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAllowSymmetry(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCursor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setHelpString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setImage(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTitleString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def startPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def stringClassName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def toolOffCleanup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def toolOnSetup(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MPxSurfaceShapeUI(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canDrawUV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawUV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kSelectMeshEdges: int = ...
    kSelectMeshFaces: int = ...
    kSelectMeshUVs: int = ...
    kSelectMeshVerts: int = ...
    def material(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def materials(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def select(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def selectUV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def snap(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def surfaceShape(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def surfaceShapeUI(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MPxToolCommand(MPxCommand):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def appendToResult(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cancel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clearResult(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def commandString(*args: Any, **kwargs: Any) -> Any: ...
    @commandString.setter
    def commandString(*args: Any, **kwargs: Any) -> Any: ...
    def currentResult(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentResultType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def displayError(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def displayInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def displayWarning(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doFinalize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doIt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def finalize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasSyntax(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def historyOn(*args: Any, **kwargs: Any) -> Any: ...
    @historyOn.setter
    def historyOn(*args: Any, **kwargs: Any) -> Any: ...
    def isCurrentResultArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isUndoable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kDouble: int = ...
    kLong: int = ...
    kNoArg: int = ...
    kString: int = ...
    def redoIt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setResult(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def syntax(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def undoIt(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MSelectInfo(MDrawInfo):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addSelection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canDrawComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def completelyInside(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def displayStatus(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def displayStyle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAlignmentMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getLocalRay(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPrototype(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def highestPriority(*args: Any, **kwargs: Any) -> Any: ...
    @highestPriority.setter
    def highestPriority(*args: Any, **kwargs: Any) -> Any: ...
    def inSelect(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inUserInteraction(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inclusiveMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isRay(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def multiPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectDisplayStatus(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginObjectDisplayStatus(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def projectionMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def selectClosest(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def selectForHilite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def selectOnHilitedOnly(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def selectPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def selectRect(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def selectable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def selectableComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMultiPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSnapPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def singleSelection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userChangingViewContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def view(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MTextureEditorDrawInfo(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def drawingFunction(*args: Any, **kwargs: Any) -> Any: ...
    @drawingFunction.setter
    def drawingFunction(*args: Any, **kwargs: Any) -> Any: ...
    kDrawEdgeForSelect: int = ...
    kDrawEverything: int = ...
    kDrawFacetForSelect: int = ...
    kDrawFunctionFirst: int = ...
    kDrawFunctionLast: int = ...
    kDrawUVForSelect: int = ...
    kDrawVertexForSelect: int = ...
    kDrawWireframe: int = ...

class MTimeSliderCustomDrawManager(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clearDrawPrimitives(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterCustomDraw(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAbove: int = ...
    kBelow: int = ...
    kOn: int = ...
    def registerCustomDrawOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registerCustomDrawOutside(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def requestTimeSliderRedraw(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setBackgroundColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDrawHeight(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDrawLayer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDrawLocation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDrawPrimitives(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDrawPriority(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDrawVisible(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setEditPrimitiveFunction(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setStartPrimitiveEditFunction(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setStopPrimitiveEditFunction(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTooltip(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MTimeSliderDrawPrimitive(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def bottom(*args: Any, **kwargs: Any) -> Any: ...
    @bottom.setter
    def bottom(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def color(*args: Any, **kwargs: Any) -> Any: ...
    @color.setter
    def color(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def drawType(*args: Any, **kwargs: Any) -> Any: ...
    @drawType.setter
    def drawType(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def endTime(*args: Any, **kwargs: Any) -> Any: ...
    @endTime.setter
    def endTime(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def height(*args: Any, **kwargs: Any) -> Any: ...
    @height.setter
    def height(*args: Any, **kwargs: Any) -> Any: ...
    kBracket: int = ...
    kFilledRect: int = ...
    kFullOutline: int = ...
    kMoveEndTime: int = ...
    kMovePrimitive: int = ...
    kMoveStartTime: int = ...
    kNone: int = ...
    kUpperOutline: int = ...
    kVerticalLine: int = ...
    @property
    def label(*args: Any, **kwargs: Any) -> Any: ...
    @label.setter
    def label(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def priority(*args: Any, **kwargs: Any) -> Any: ...
    @priority.setter
    def priority(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def startTime(*args: Any, **kwargs: Any) -> Any: ...
    @startTime.setter
    def startTime(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def tooltip(*args: Any, **kwargs: Any) -> Any: ...
    @tooltip.setter
    def tooltip(*args: Any, **kwargs: Any) -> Any: ...

class MUiMessage(MMessage):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def add3dViewDestroyMsgCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def add3dViewPostRenderMsgCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def add3dViewPreRenderMsgCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def add3dViewRenderOverrideChangedCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def add3dViewRendererChangedCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addCameraChangedCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addUiDeletedCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentCallbackId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kDefaultAction: int = ...
    kDoAction: int = ...
    kDoNotDoAction: int = ...
    def nodeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class RenderParameters(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def baseColor(*args: Any, **kwargs: Any) -> Any: ...
    @baseColor.setter
    def baseColor(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def showAlphaMask(*args: Any, **kwargs: Any) -> Any: ...
    @showAlphaMask.setter
    def showAlphaMask(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def unfiltered(*args: Any, **kwargs: Any) -> Any: ...
    @unfiltered.setter
    def unfiltered(*args: Any, **kwargs: Any) -> Any: ...

class ShaderContext(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def path(*args: Any, **kwargs: Any) -> Any: ...
    @path.setter
    def path(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def shadingEngine(*args: Any, **kwargs: Any) -> Any: ...
    @shadingEngine.setter
    def shadingEngine(*args: Any, **kwargs: Any) -> Any: ...

__builtins__: dict
__cached__: str
__doc__: NoneType
__file__: str
__loader__: SourceFileLoader
__name__: str
__package__: str
__spec__: ModuleSpec
key: str
ourdict: dict
py2dict: dict
val: str