# fmt: off
from typing import *
from typing_extensions import Self
from _typeshed import Incomplete


class MAttributeParameterMapping(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allowConnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allowRename(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parameterName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def resolvedParameterName(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MAttributeParameterMappingList(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __getitem__(self: Self, key: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __len__(self: Self) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def append(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findByAttributeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findByParameterName(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MBlendState(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def desc(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAdd: int = ...
    kAlphaChannel: int = ...
    kBlendFactor: int = ...
    kBlueChannel: int = ...
    kBothInvSourceAlpha: int = ...
    kBothSourceAlpha: int = ...
    kDestinationAlpha: int = ...
    kDestinationColor: int = ...
    kGreenChannel: int = ...
    kInvBlendFactor: int = ...
    kInvDestinationAlpha: int = ...
    kInvDestinationColor: int = ...
    kInvSourceAlpha: int = ...
    kInvSourceColor: int = ...
    kMax: int = ...
    kMaxTargets: int = ...
    kMin: int = ...
    kNoChannels: int = ...
    kOne: int = ...
    kRGBAChannels: int = ...
    kRGBChannels: int = ...
    kRedChannel: int = ...
    kReverseSubtract: int = ...
    kSourceAlpha: int = ...
    kSourceAlphaSat: int = ...
    kSourceColor: int = ...
    kSubtract: int = ...
    kZero: int = ...
    def resourceHandle(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MBlendStateDesc(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def alphaToCoverageEnable(*args: Any, **kwargs: Any) -> Any: ...
    @alphaToCoverageEnable.setter
    def alphaToCoverageEnable(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def blendFactor(*args: Any, **kwargs: Any) -> Any: ...
    @blendFactor.setter
    def blendFactor(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def independentBlendEnable(*args: Any, **kwargs: Any) -> Any: ...
    @independentBlendEnable.setter
    def independentBlendEnable(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def multiSampleMask(*args: Any, **kwargs: Any) -> Any: ...
    @multiSampleMask.setter
    def multiSampleMask(*args: Any, **kwargs: Any) -> Any: ...
    def setDefaults(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def targetBlends(*args: Any, **kwargs: Any) -> Any: ...
    @targetBlends.setter
    def targetBlends(*args: Any, **kwargs: Any) -> Any: ...

class MCameraOverride(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def mCameraPath(*args: Any, **kwargs: Any) -> Any: ...
    @mCameraPath.setter
    def mCameraPath(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def mFarClippingPlane(*args: Any, **kwargs: Any) -> Any: ...
    @mFarClippingPlane.setter
    def mFarClippingPlane(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def mHiddenCameraList(*args: Any, **kwargs: Any) -> Any: ...
    @mHiddenCameraList.setter
    def mHiddenCameraList(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def mNearClippingPlane(*args: Any, **kwargs: Any) -> Any: ...
    @mNearClippingPlane.setter
    def mNearClippingPlane(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def mProjectionMatrix(*args: Any, **kwargs: Any) -> Any: ...
    @mProjectionMatrix.setter
    def mProjectionMatrix(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def mUseFarClippingPlane(*args: Any, **kwargs: Any) -> Any: ...
    @mUseFarClippingPlane.setter
    def mUseFarClippingPlane(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def mUseHiddenCameraList(*args: Any, **kwargs: Any) -> Any: ...
    @mUseHiddenCameraList.setter
    def mUseHiddenCameraList(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def mUseNearClippingPlane(*args: Any, **kwargs: Any) -> Any: ...
    @mUseNearClippingPlane.setter
    def mUseNearClippingPlane(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def mUseProjectionMatrix(*args: Any, **kwargs: Any) -> Any: ...
    @mUseProjectionMatrix.setter
    def mUseProjectionMatrix(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def mUseViewMatrix(*args: Any, **kwargs: Any) -> Any: ...
    @mUseViewMatrix.setter
    def mUseViewMatrix(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def mViewMatrix(*args: Any, **kwargs: Any) -> Any: ...
    @mViewMatrix.setter
    def mViewMatrix(*args: Any, **kwargs: Any) -> Any: ...

class MClearOperation(MRenderOperation):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clearColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clearColor2(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clearDepth(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clearGradient(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clearStencil(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableSRGBWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kClear: int = ...
    kClearAll: int = ...
    kClearColor: int = ...
    kClearDepth: int = ...
    kClearNone: int = ...
    kClearStencil: int = ...
    kHUDRender: int = ...
    kPresentTarget: int = ...
    kQuadRender: int = ...
    kSceneRender: int = ...
    kUserDefined: int = ...
    def mask(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def operationType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def overridesColors(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setClearColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setClearColor2(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setClearDepth(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setClearGradient(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setClearStencil(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMask(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setOverridesColors(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def targetOverrideList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def viewportRectangleOverride(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MColorManagementUtilities(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getColorTransformCacheIdForInputSpace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getColorTransformCacheIdForOutputTransform(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getColorTransformData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isColorManagementAvailable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isColorManagementEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MComponentDataIndexing(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def componentType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def indices(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kFaceVertex: int = ...
    def setComponentType(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MComponentDataIndexingList(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __getitem__(self: Self, key: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __len__(self: Self) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def append(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MDepthNormalizationDescription(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def fDepthBias(*args: Any, **kwargs: Any) -> Any: ...
    @fDepthBias.setter
    def fDepthBias(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def fDepthScale(*args: Any, **kwargs: Any) -> Any: ...
    @fDepthScale.setter
    def fDepthScale(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def fFarClipDistance(*args: Any, **kwargs: Any) -> Any: ...
    @fFarClipDistance.setter
    def fFarClipDistance(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def fNearClipDistance(*args: Any, **kwargs: Any) -> Any: ...
    @fNearClipDistance.setter
    def fNearClipDistance(*args: Any, **kwargs: Any) -> Any: ...

class MDepthStencilState(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def desc(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kDecrementStencil: int = ...
    kDecrementStencilSat: int = ...
    kIncrementStencil: int = ...
    kIncrementStencilSat: int = ...
    kInvertStencil: int = ...
    kKeepStencil: int = ...
    kReplaceStencil: int = ...
    kZeroStencil: int = ...
    def resourceHandle(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MDepthStencilStateDesc(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def backFace(*args: Any, **kwargs: Any) -> Any: ...
    @backFace.setter
    def backFace(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def depthEnable(*args: Any, **kwargs: Any) -> Any: ...
    @depthEnable.setter
    def depthEnable(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def depthFunc(*args: Any, **kwargs: Any) -> Any: ...
    @depthFunc.setter
    def depthFunc(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def depthWriteEnable(*args: Any, **kwargs: Any) -> Any: ...
    @depthWriteEnable.setter
    def depthWriteEnable(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def frontFace(*args: Any, **kwargs: Any) -> Any: ...
    @frontFace.setter
    def frontFace(*args: Any, **kwargs: Any) -> Any: ...
    def setDefaults(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def stencilEnable(*args: Any, **kwargs: Any) -> Any: ...
    @stencilEnable.setter
    def stencilEnable(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def stencilReadMask(*args: Any, **kwargs: Any) -> Any: ...
    @stencilReadMask.setter
    def stencilReadMask(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def stencilReferenceVal(*args: Any, **kwargs: Any) -> Any: ...
    @stencilReferenceVal.setter
    def stencilReferenceVal(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def stencilWriteMask(*args: Any, **kwargs: Any) -> Any: ...
    @stencilWriteMask.setter
    def stencilWriteMask(*args: Any, **kwargs: Any) -> Any: ...

class MDrawContext(MFrameContext):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classificationExclusions(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copyCurrentColorRenderTarget(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copyCurrentColorRenderTargetToTexture(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copyCurrentDepthRenderTarget(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copyCurrentDepthRenderTargetToTexture(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getBackgroundParameters(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCurrentCameraPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCurrentColorRenderTarget(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCurrentDepthRenderTarget(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDOFParameters(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDepthRange(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDisplayStyle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getEnvironmentParameters(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFrameStamp(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFrustumBox(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getGlobalLineWidth(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getHwFogParameters(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getLightInformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getLightLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getLightParameterInformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getLightingMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPassContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPostEffectEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getRenderOverrideInformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getRenderTargetSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getSceneBox(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getStateManager(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getTransparencyAlgorithm(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getTuple(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getViewportDimensions(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inUserInteraction(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    k2dViewport: int = ...
    k3dViewport: int = ...
    kAmbientLight: int = ...
    kAmbientOcclusion: int = ...
    kAntiAliasing: int = ...
    kBackfaceCulling: int = ...
    kBoundingBox: int = ...
    kCustomLights: int = ...
    kDefaultMaterial: int = ...
    kDepthOfField: int = ...
    kDepthPeeling: int = ...
    kExcludeAll: int = ...
    kExcludeCVs: int = ...
    kExcludeCameras: int = ...
    kExcludeClipGhosts: int = ...
    kExcludeControllers: int = ...
    kExcludeDeformers: int = ...
    kExcludeDimensions: int = ...
    kExcludeDynamicConstraints: int = ...
    kExcludeDynamics: int = ...
    kExcludeFluids: int = ...
    kExcludeFollicles: int = ...
    kExcludeGreasePencils: int = ...
    kExcludeGrid: int = ...
    kExcludeHUD: int = ...
    kExcludeHairSystems: int = ...
    kExcludeHoldOuts: int = ...
    kExcludeHulls: int = ...
    kExcludeIkHandles: int = ...
    kExcludeImagePlane: int = ...
    kExcludeJoints: int = ...
    kExcludeLights: int = ...
    kExcludeLocators: int = ...
    kExcludeManipulators: int = ...
    kExcludeMeshes: int = ...
    kExcludeMotionTrails: int = ...
    kExcludeNCloths: int = ...
    kExcludeNParticles: int = ...
    kExcludeNRigids: int = ...
    kExcludeNone: int = ...
    kExcludeNurbsCurves: int = ...
    kExcludeNurbsSurfaces: int = ...
    kExcludeParticleInstancers: int = ...
    kExcludePivots: int = ...
    kExcludePlanes: int = ...
    kExcludePluginShapes: int = ...
    kExcludeSelectHandles: int = ...
    kExcludeStrokes: int = ...
    kExcludeSubdivSurfaces: int = ...
    kExcludeTextures: int = ...
    kFilteredIgnoreLightLimit: int = ...
    kFilteredToLightLimit: int = ...
    kFlatShaded: int = ...
    kFogExp: int = ...
    kFogExp2: int = ...
    kFogLinear: int = ...
    kGammaCorrection: int = ...
    kGouraudShaded: int = ...
    kImage: int = ...
    kLightDefault: int = ...
    kMotionBlur: int = ...
    kNoLighting: int = ...
    kObjectSorting: int = ...
    kProjectionInverseMtx: int = ...
    kProjectionMtx: int = ...
    kProjectionTranposeMtx: int = ...
    kProjectionTranspInverseMtx: int = ...
    kSceneLights: int = ...
    kSelectedLights: int = ...
    kShadeActiveOnly: int = ...
    kSmoothWireframe: int = ...
    kTextured: int = ...
    kTwoSidedLighting: int = ...
    kUnsorted: int = ...
    kViewColorTransformEnabled: int = ...
    kViewDirection: int = ...
    kViewFarClipValue: int = ...
    kViewInverseMtx: int = ...
    kViewMtx: int = ...
    kViewNearClipValue: int = ...
    kViewPosition: int = ...
    kViewProjInverseMtx: int = ...
    kViewProjMtx: int = ...
    kViewProjTranposeMtx: int = ...
    kViewProjTranspInverseMtx: int = ...
    kViewRight: int = ...
    kViewTranspInverseMtx: int = ...
    kViewTransposeMtx: int = ...
    kViewUnnormalizedFarClipValue: int = ...
    kViewUnnormlizedNearClipValue: int = ...
    kViewUp: int = ...
    kViewportPixelSize: int = ...
    kWeightedAverage: int = ...
    kWireFrame: int = ...
    kWireFrameOnShadedNone: int = ...
    kWireFrameOnShadedReduced: int = ...
    kWireframeOnShadedFull: int = ...
    kWorldInverseMtx: int = ...
    kWorldMtx: int = ...
    kWorldTranspInverseMtx: int = ...
    kWorldTransposeMtx: int = ...
    kWorldViewInverseMtx: int = ...
    kWorldViewMtx: int = ...
    kWorldViewProjInverseMtx: int = ...
    kWorldViewProjMtx: int = ...
    kWorldViewProjTranspInverseMtx: int = ...
    kWorldViewProjTransposeMtx: int = ...
    kWorldViewTranspInverseMtx: int = ...
    kWorldViewTransposeMtx: int = ...
    kXray: int = ...
    kXrayActiveComponents: int = ...
    kXrayJoint: int = ...
    def numberOfActiveLights(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectTypeExclusions(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def renderingDestination(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def semanticToMatrixType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def semanticToTupleType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shadeTemplates(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userChangingViewContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def viewDirectionAlongNegZ(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def wireOnShadedMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MDrawRegistry(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterComponentConverter(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterDrawOverrideCreator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterGeometryOverrideCreator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterImagePlaneOverrideCreator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterIndexBufferMutator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterPrimitiveGenerator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterShaderOverrideCreator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterShadingNodeOverrideCreator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterSubSceneOverrideCreator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterSurfaceShadingNodeOverrideCreator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterVertexBufferGenerator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterVertexBufferMutator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registerComponentConverter(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registerDrawOverrideCreator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registerGeometryOverrideCreator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registerImagePlaneOverrideCreator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registerIndexBufferMutator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registerPrimitiveGenerator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registerShaderOverrideCreator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registerShadingNodeOverrideCreator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registerSubSceneOverrideCreator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registerSurfaceShadingNodeOverrideCreator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registerVertexBufferGenerator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registerVertexBufferMutator(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFragmentManager(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAutomaticShaderStageInput(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addDomainShaderInputNameMapping(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addFragmentGraphFromBuffer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addFragmentGraphFromFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addFragmentPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addShadeFragmentFromBuffer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addShadeFragmentFromFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findDomainShaderInputName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fragmentList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getEffectOutputDirectory(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFragmentXML(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getIntermediateGraphOutputDirectory(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasFragment(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kDomainShader: int = ...
    kGeometryShader: int = ...
    kHullConstantShader: int = ...
    kHullShader: int = ...
    kPixelShader: int = ...
    kVertexShader: int = ...
    def removeAutomaticShaderStageInput(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeDomainShaderInputNameMapping(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeFragment(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setEffectOutputDirectory(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIntermediateGraphOutputDirectory(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFrameContext(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classificationExclusions(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getBackgroundParameters(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCurrentCameraPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCurrentColorRenderTarget(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCurrentDepthRenderTarget(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDOFParameters(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDisplayStyle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getEnvironmentParameters(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getGlobalLineWidth(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getHwFogParameters(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getLightLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getLightingMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPostEffectEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getRenderOverrideInformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getTransparencyAlgorithm(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getTuple(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getViewportDimensions(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inUserInteraction(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    k2dViewport: int = ...
    k3dViewport: int = ...
    kAmbientLight: int = ...
    kAmbientOcclusion: int = ...
    kAntiAliasing: int = ...
    kBackfaceCulling: int = ...
    kBoundingBox: int = ...
    kCustomLights: int = ...
    kDefaultMaterial: int = ...
    kDepthOfField: int = ...
    kDepthPeeling: int = ...
    kExcludeAll: int = ...
    kExcludeCVs: int = ...
    kExcludeCameras: int = ...
    kExcludeClipGhosts: int = ...
    kExcludeControllers: int = ...
    kExcludeDeformers: int = ...
    kExcludeDimensions: int = ...
    kExcludeDynamicConstraints: int = ...
    kExcludeDynamics: int = ...
    kExcludeFluids: int = ...
    kExcludeFollicles: int = ...
    kExcludeGreasePencils: int = ...
    kExcludeGrid: int = ...
    kExcludeHUD: int = ...
    kExcludeHairSystems: int = ...
    kExcludeHoldOuts: int = ...
    kExcludeHulls: int = ...
    kExcludeIkHandles: int = ...
    kExcludeImagePlane: int = ...
    kExcludeJoints: int = ...
    kExcludeLights: int = ...
    kExcludeLocators: int = ...
    kExcludeManipulators: int = ...
    kExcludeMeshes: int = ...
    kExcludeMotionTrails: int = ...
    kExcludeNCloths: int = ...
    kExcludeNParticles: int = ...
    kExcludeNRigids: int = ...
    kExcludeNone: int = ...
    kExcludeNurbsCurves: int = ...
    kExcludeNurbsSurfaces: int = ...
    kExcludeParticleInstancers: int = ...
    kExcludePivots: int = ...
    kExcludePlanes: int = ...
    kExcludePluginShapes: int = ...
    kExcludeSelectHandles: int = ...
    kExcludeStrokes: int = ...
    kExcludeSubdivSurfaces: int = ...
    kExcludeTextures: int = ...
    kFlatShaded: int = ...
    kFogExp: int = ...
    kFogExp2: int = ...
    kFogLinear: int = ...
    kGammaCorrection: int = ...
    kGouraudShaded: int = ...
    kImage: int = ...
    kLightDefault: int = ...
    kMotionBlur: int = ...
    kNoLighting: int = ...
    kObjectSorting: int = ...
    kProjectionInverseMtx: int = ...
    kProjectionMtx: int = ...
    kProjectionTranposeMtx: int = ...
    kProjectionTranspInverseMtx: int = ...
    kSceneLights: int = ...
    kSelectedLights: int = ...
    kShadeActiveOnly: int = ...
    kSmoothWireframe: int = ...
    kTextured: int = ...
    kTwoSidedLighting: int = ...
    kUnsorted: int = ...
    kViewColorTransformEnabled: int = ...
    kViewDirection: int = ...
    kViewFarClipValue: int = ...
    kViewInverseMtx: int = ...
    kViewMtx: int = ...
    kViewNearClipValue: int = ...
    kViewPosition: int = ...
    kViewProjInverseMtx: int = ...
    kViewProjMtx: int = ...
    kViewProjTranposeMtx: int = ...
    kViewProjTranspInverseMtx: int = ...
    kViewRight: int = ...
    kViewTranspInverseMtx: int = ...
    kViewTransposeMtx: int = ...
    kViewUnnormalizedFarClipValue: int = ...
    kViewUnnormlizedNearClipValue: int = ...
    kViewUp: int = ...
    kViewportPixelSize: int = ...
    kWeightedAverage: int = ...
    kWireFrame: int = ...
    kWireFrameOnShadedNone: int = ...
    kWireFrameOnShadedReduced: int = ...
    kWireframeOnShadedFull: int = ...
    kWorldInverseMtx: int = ...
    kWorldMtx: int = ...
    kWorldTranspInverseMtx: int = ...
    kWorldTransposeMtx: int = ...
    kWorldViewInverseMtx: int = ...
    kWorldViewMtx: int = ...
    kWorldViewProjInverseMtx: int = ...
    kWorldViewProjMtx: int = ...
    kWorldViewProjTranspInverseMtx: int = ...
    kWorldViewProjTransposeMtx: int = ...
    kWorldViewTranspInverseMtx: int = ...
    kWorldViewTransposeMtx: int = ...
    kXray: int = ...
    kXrayActiveComponents: int = ...
    kXrayJoint: int = ...
    def objectTypeExclusions(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def renderingDestination(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def semanticToMatrixType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def semanticToTupleType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shadeTemplates(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userChangingViewContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def wireOnShadedMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MGeometry(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addIndexBuffer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addVertexBuffer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createIndexBuffer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createVertexBuffer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dataTypeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteIndexBuffer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteVertexBuffer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawModeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def indexBuffer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def indexBufferCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAdjacentLineStrip: int = ...
    kAdjacentLines: int = ...
    kAdjacentTriangleStrip: int = ...
    kAdjacentTriangles: int = ...
    kAll: int = ...
    kBitangent: int = ...
    kBoundingBox: int = ...
    kChar: int = ...
    kColor: int = ...
    kDouble: int = ...
    kFloat: int = ...
    kInt16: int = ...
    kInt32: int = ...
    kInvalidPrimitive: int = ...
    kInvalidSemantic: int = ...
    kInvalidType: int = ...
    kLineStrip: int = ...
    kLines: int = ...
    kNormal: int = ...
    kPatch: int = ...
    kPoints: int = ...
    kPosition: int = ...
    kSelectionHighlighting: int = ...
    kSelectionOnly: int = ...
    kShaded: int = ...
    kTangent: int = ...
    kTangentWithSign: int = ...
    kTexture: int = ...
    kTextured: int = ...
    kTriangleStrip: int = ...
    kTriangles: int = ...
    kUnsignedChar: int = ...
    kUnsignedInt16: int = ...
    kUnsignedInt32: int = ...
    kWireframe: int = ...
    def primitiveString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def semanticString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexBuffer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexBufferCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MGeometryExtractor(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kPolyGeom_BaseMesh: int = ...
    kPolyGeom_Normal: int = ...
    kPolyGeom_NotSharing: int = ...
    def minimumBufferSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def populateIndexBuffer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def populateVertexBuffer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def primitiveCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MGeometryIndexMapping(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def component(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def geometryCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def indexLength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def indexStart(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MGeometryRequirements(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addIndexingRequirement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addVertexRequirement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def indexingRequirements(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexRequirements(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MGeometryUtilities(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def acquireReferenceGeometry(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def displayStatus(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kActive: int = ...
    kActiveAffected: int = ...
    kActiveComponent: int = ...
    kActiveTemplate: int = ...
    kDefaultCube: int = ...
    kDefaultPlane: int = ...
    kDefaultSphere: int = ...
    kDormant: int = ...
    kHilite: int = ...
    kIntermediateObject: int = ...
    kInvisible: int = ...
    kLead: int = ...
    kLive: int = ...
    kNoStatus: int = ...
    kTemplate: int = ...
    def releaseReferenceGeometry(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def wireframeColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MHUDRender(MRenderOperation):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addUIDrawables(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableSRGBWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUIDrawables(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kClear: int = ...
    kHUDRender: int = ...
    kPresentTarget: int = ...
    kQuadRender: int = ...
    kSceneRender: int = ...
    kUserDefined: int = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def operationType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def targetOverrideList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def viewportRectangleOverride(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MIndexBuffer(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def acquire(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def commit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dataType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasCustomResourceHandle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def lockResourceHandle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def map(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def resourceHandle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setResourceHandle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def size(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def unload(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def unlockResourceHandle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def unmap(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def update(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MIndexBufferDescriptor(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def component(*args: Any, **kwargs: Any) -> Any: ...
    @component.setter
    def component(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def dataType(*args: Any, **kwargs: Any) -> Any: ...
    @dataType.setter
    def dataType(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def indexType(*args: Any, **kwargs: Any) -> Any: ...
    @indexType.setter
    def indexType(*args: Any, **kwargs: Any) -> Any: ...
    kControlVertex: int = ...
    kCustom: int = ...
    kEdgeLine: int = ...
    kEditPoint: int = ...
    kFaceCenter: int = ...
    kHullEdgeCenter: int = ...
    kHullEdgeLine: int = ...
    kHullFaceCenter: int = ...
    kHullTriangle: int = ...
    kHullUV: int = ...
    kSubDivEdge: int = ...
    kTangent: int = ...
    kTriangle: int = ...
    kTriangleEdge: int = ...
    kVertexPoint: int = ...
    @property
    def name(*args: Any, **kwargs: Any) -> Any: ...
    @name.setter
    def name(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def primitive(*args: Any, **kwargs: Any) -> Any: ...
    @primitive.setter
    def primitive(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def primitiveStride(*args: Any, **kwargs: Any) -> Any: ...
    @primitiveStride.setter
    def primitiveStride(*args: Any, **kwargs: Any) -> Any: ...

class MIndexBufferDescriptorList(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __getitem__(self: Self, key: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __len__(self: Self) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def append(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MInitContext(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def dagPath(*args: Any, **kwargs: Any) -> Any: ...
    @dagPath.setter
    def dagPath(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def shader(*args: Any, **kwargs: Any) -> Any: ...
    @shader.setter
    def shader(*args: Any, **kwargs: Any) -> Any: ...

class MInitFeedback(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def customData(*args: Any, **kwargs: Any) -> Any: ...
    @customData.setter
    def customData(*args: Any, **kwargs: Any) -> Any: ...

class MIntersection(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def barycentricCoordinates(*args: Any, **kwargs: Any) -> Any: ...
    @barycentricCoordinates.setter
    def barycentricCoordinates(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def edgeInterpolantValue(*args: Any, **kwargs: Any) -> Any: ...
    @edgeInterpolantValue.setter
    def edgeInterpolantValue(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def index(*args: Any, **kwargs: Any) -> Any: ...
    @index.setter
    def index(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def instanceID(*args: Any, **kwargs: Any) -> Any: ...
    @instanceID.setter
    def instanceID(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def intersectionPoint(*args: Any, **kwargs: Any) -> Any: ...
    @intersectionPoint.setter
    def intersectionPoint(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def selectionLevel(*args: Any, **kwargs: Any) -> Any: ...
    @selectionLevel.setter
    def selectionLevel(*args: Any, **kwargs: Any) -> Any: ...

class MLightParameterInformation(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def arrayParameterCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getParameter(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getParameterTextureHandle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kBoolean: int = ...
    kColor: int = ...
    kCosConeAngle: int = ...
    kDecayRate: int = ...
    kDepthRange: int = ...
    kDropoff: int = ...
    kEmitsDiffuse: int = ...
    kEmitsSpecular: int = ...
    kFloat: int = ...
    kFloat2: int = ...
    kFloat3: int = ...
    kFloat4: int = ...
    kFloat4x4Col: int = ...
    kFloat4x4Row: int = ...
    kGlobalShadowOn: int = ...
    kInteger: int = ...
    kIntensity: int = ...
    kInvalid: int = ...
    kIrradianceIn: int = ...
    kLightEnabled: int = ...
    kNoSemantic: int = ...
    kSampler: int = ...
    kShadowBias: int = ...
    kShadowColor: int = ...
    kShadowDirty: int = ...
    kShadowMap: int = ...
    kShadowMapSize: int = ...
    kShadowOn: int = ...
    kShadowSamp: int = ...
    kShadowViewProj: int = ...
    kStartShadowParameters: int = ...
    kTexture2: int = ...
    kTextureCube: int = ...
    kWorldDirection: int = ...
    kWorldPosition: int = ...
    def lightPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def lightType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parameterList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parameterNames(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parameterSemantic(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parameterType(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MPassContext(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasShaderOverride(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kBeginRenderSemantic: str = ...
    kBeginSceneRenderSemantic: str = ...
    kColorPassSemantic: str = ...
    kCullBackSemantic: str = ...
    kCullFrontSemantic: str = ...
    kDOFPassSemantic: str = ...
    kDepthPassSemantic: str = ...
    kEndRenderSemantic: str = ...
    kEndSceneRenderSemantic: str = ...
    kMaterialOverrideSemantic: str = ...
    kMotionVectorPassSemantic: str = ...
    kNonPEPatternPassSemantic: str = ...
    kNormalDepthPassSemantic: str = ...
    kOpaqueGeometrySemantic: str = ...
    kOpaqueUISemantic: str = ...
    kPEPatternPassSemantic: str = ...
    kPostUIGeometrySemantic: str = ...
    kPreUIGeometrySemantic: str = ...
    kSelectionPassSemantic: str = ...
    kShadowPassSemantic: str = ...
    kTransparentGeometrySemantic: str = ...
    kTransparentPeelAndAvgSemantic: str = ...
    kTransparentPeelSemantic: str = ...
    kTransparentUISemantic: str = ...
    kTransparentWeightedAvgSemantic: str = ...
    kUIGeometrySemantic: str = ...
    kUserPassSemantic: str = ...
    kXrayUISemantic: str = ...
    def passIdentifier(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def passSemantics(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shaderOverrideInstance(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MPresentTarget(MRenderOperation):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableSRGBWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kCenterBuffer: int = ...
    kClear: int = ...
    kHUDRender: int = ...
    kLeftBuffer: int = ...
    kPresentTarget: int = ...
    kQuadRender: int = ...
    kRightBuffer: int = ...
    kSceneRender: int = ...
    kUserDefined: int = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def operationType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def presentDepth(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPresentDepth(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTargetBackBuffer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def targetBackBuffer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def targetOverrideList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def viewportRectangleOverride(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MPxComponentConverter(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addIntersection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def component(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def initialize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def selectionMask(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MPxDrawOverride(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addUIDrawables(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def boundingBox(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def disableInternalBoundingBoxDraw(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def excludedFromPostEffects(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def handleTraceMessage(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUIDrawables(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isBounded(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTransparent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pointSnappingActive(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def prepareForDraw(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def refineSelectionPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def supportedDrawAPIs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def traceCallSequence(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def transform(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def updateSelectionGranularity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userSelect(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def wantUserSelection(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MPxGeometryOverride(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addUIDrawables(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cleanUp(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def configCache(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFrameContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def handleTraceMessage(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUIDrawables(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isIndexingDirty(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isStreamDirty(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pointSnappingActive(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def populateGeometry(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def refineSelectionPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def requiresGeometryUpdate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def requiresUpdateRenderItems(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def supportedDrawAPIs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def supportsEvaluationManagerParallelUpdate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def supportsVP2CustomCaching(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def traceCallSequence(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def updateDG(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def updateRenderItems(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def updateSelectionGranularity(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MPxImagePlaneOverride(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def supportedDrawAPIs(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MPxIndexBufferMutator(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def mutateIndexing(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MPxPrimitiveGenerator(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def computeIndexCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def generateIndexing(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MPxShaderOverride(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def activateKey(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addGeometryRequirement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addGeometryRequirements(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addIndexingRequirement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addShaderSignature(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def boundingBoxExtraScale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def draw(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawGeometry(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def endUpdate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def handlesConsolidatedGeometry(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def handlesDraw(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def initialize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def initialize2(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTransparent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def nonTexturedShaderInstance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def overridesDrawState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def overridesNonMaterialItems(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rebuildAlways(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setGeometryRequirements(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shaderInstance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def supportedDrawAPIs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def supportsAdvancedTransparency(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def terminateKey(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def updateDG(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def updateDevice(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MPxShadingNodeOverride(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allowConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fragmentName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCustomMappings(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def outputForConnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def supportedDrawAPIs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def updateDG(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def updateShader(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def valueChangeRequiresFragmentRebuild(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MPxSubSceneOverride(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addInstanceTransform(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addUIDrawables(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def areUIDrawablesDirty(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def furtherUpdateRequired(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInstancedSelectionPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getSelectionPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUIDrawables(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pointSnappingActive(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAllInstances(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeExtraInstanceData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeInstance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def requiresUpdate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAllowTransparentInstances(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExtraInstanceData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setGeometryForRenderItem(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInstanceTransformArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def supportedDrawAPIs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def update(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def updateInstanceTransform(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def updateSelectionGranularity(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MPxSurfaceShadingNodeOverride(MPxShadingNodeOverride):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allowConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def bumpAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fragmentName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCustomMappings(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def outputForConnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def primaryColorParameter(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def supportedDrawAPIs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def transparencyParameter(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def updateDG(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def updateShader(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def valueChangeRequiresFragmentRebuild(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MPxVertexBufferGenerator(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createVertexStream(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getSourceIndexing(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getSourceStreams(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MPxVertexBufferMutator(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def modifyVertexStream(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MQuadRender(MRenderOperation):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def blendStateOverride(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clearOperation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def depthStencilStateOverride(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableSRGBWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kClear: int = ...
    kHUDRender: int = ...
    kPresentTarget: int = ...
    kQuadRender: int = ...
    kSceneRender: int = ...
    kUserDefined: int = ...
    @property
    def mClearOperation(*args: Any, **kwargs: Any) -> Any: ...
    @mClearOperation.setter
    def mClearOperation(*args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def operationType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rasterizerStateOverride(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shader(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def targetOverrideList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def viewportRectangleOverride(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MRasterizerState(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def desc(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kCullBack: int = ...
    kCullFront: int = ...
    kCullNone: int = ...
    kFillSolid: int = ...
    kFillWireFrame: int = ...
    def resourceHandle(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MRasterizerStateDesc(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def antialiasedLineEnable(*args: Any, **kwargs: Any) -> Any: ...
    @antialiasedLineEnable.setter
    def antialiasedLineEnable(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def cullMode(*args: Any, **kwargs: Any) -> Any: ...
    @cullMode.setter
    def cullMode(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def depthBias(*args: Any, **kwargs: Any) -> Any: ...
    @depthBias.setter
    def depthBias(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def depthBiasClamp(*args: Any, **kwargs: Any) -> Any: ...
    @depthBiasClamp.setter
    def depthBiasClamp(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def depthBiasIsFloat(*args: Any, **kwargs: Any) -> Any: ...
    @depthBiasIsFloat.setter
    def depthBiasIsFloat(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def depthClipEnable(*args: Any, **kwargs: Any) -> Any: ...
    @depthClipEnable.setter
    def depthClipEnable(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def fillMode(*args: Any, **kwargs: Any) -> Any: ...
    @fillMode.setter
    def fillMode(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def frontCounterClockwise(*args: Any, **kwargs: Any) -> Any: ...
    @frontCounterClockwise.setter
    def frontCounterClockwise(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def multiSampleEnable(*args: Any, **kwargs: Any) -> Any: ...
    @multiSampleEnable.setter
    def multiSampleEnable(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def scissorEnable(*args: Any, **kwargs: Any) -> Any: ...
    @scissorEnable.setter
    def scissorEnable(*args: Any, **kwargs: Any) -> Any: ...
    def setDefaults(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def slopeScaledDepthBias(*args: Any, **kwargs: Any) -> Any: ...
    @slopeScaledDepthBias.setter
    def slopeScaledDepthBias(*args: Any, **kwargs: Any) -> Any: ...

class MRenderItem(object):
    DecorationItem: int = ...
    DrawOnlyWhenDefaultMaterialActive: int = ...
    IgnoreDefaultMaterialMode: int = ...
    InternalItem: int = ...
    InternalMaterialItem: int = ...
    InternalTexturedMaterialItem: int = ...
    InternalUnsupportedMaterialItem: int = ...
    MaterialSceneItem: int = ...
    NonMaterialSceneItem: int = ...
    OverrideNonMaterialItem: int = ...
    SkipWhenDefaultMaterialActive: int = ...
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allowIsolateSelectCopy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def associateWithIndexBuffer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def availableShaderParameters(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def boundingBox(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def castsShadows(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def component(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def customData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def depthPriority(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def destroy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def excludedFromPostEffects(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def geometry(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCustomData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDefaultMaterialHandling(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getShader(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getShaderParameters(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isCompatibleWithMayaInstancer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isConsolidated(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isIsolateSelectCopy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isShaderFromNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectTypeExclusionFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def primitive(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def primitiveAndStride(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def receivesShadows(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def requiredVertexBuffers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    sActiveLineDepthPriority: int = ...
    sActivePointDepthPriority: int = ...
    sActiveWireDepthPriority: int = ...
    sDormantFilledDepthPriority: int = ...
    sDormantPointDepthPriority: int = ...
    sDormantWireDepthPriority: int = ...
    sHiliteWireDepthPriority: int = ...
    sSelectionDepthPriority: int = ...
    def selectionMask(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAllowIsolateSelectCopy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setBoundingBox(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCastsShadows(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCompatibleWithMayaInstancer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCustomData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDefaultMaterialHandling(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDepthPriority(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDrawMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExcludedFromPostEffects(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectTypeExclusionFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPrimitive(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setReceivesShadows(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSelectionMask(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setShader(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setShaderFromNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTreatAsTransparent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setWantConsolidation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setWantSubSceneConsolidation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shadingComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def sourceDagPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def sourceIndexMapping(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def wantConsolidation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def wantSubSceneConsolidation(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MRenderItemList(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __getitem__(self: Self, key: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __len__(self: Self) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def append(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def indexOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MRenderOperation(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableSRGBWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kClear: int = ...
    kHUDRender: int = ...
    kPresentTarget: int = ...
    kQuadRender: int = ...
    kSceneRender: int = ...
    kUserDefined: int = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def operationType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def targetOverrideList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def viewportRectangleOverride(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MRenderOverride(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cleanup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFrameContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def nextRenderOperation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def renderOperation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def select(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def startOperationIterator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def supportedDrawAPIs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uiName(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MRenderParameters(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getParameter(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isArrayParameter(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parameterList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parameterType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def semantic(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setArrayParameter(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setParameter(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MRenderProfile(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addRenderer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasRenderer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kMayaD3D: int = ...
    kMayaOpenGL: int = ...
    kMayaSoftware: int = ...
    def numberOfRenderers(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MRenderTarget(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def freeRawData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rawData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def resourceHandle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def targetDescription(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def updateDescription(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MRenderTargetAssignment(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def target(*args: Any, **kwargs: Any) -> Any: ...
    @target.setter
    def target(*args: Any, **kwargs: Any) -> Any: ...

class MRenderTargetDescription(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allowsUnorderedAccess(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def arraySliceCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def compatibleWithDescription(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def height(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isCubeMap(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def multiSampleCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rasterFormat(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAllowsUnorderedAccess(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setArraySliceCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setHeight(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIsCubeMap(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMultiSampleCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRasterFormat(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setWidth(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def width(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MRenderTargetManager(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def acquireRenderTarget(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def acquireRenderTargetFromScreen(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def formatSupportsSRGBWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def releaseRenderTarget(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MRenderUtilities(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def acquireSwatchDrawContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def acquireUVTextureDrawContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def blitTargetToGL(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def blitTargetToImage(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawSimpleMesh(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAmbientLight: int = ...
    kDefaultLights: int = ...
    kOrthogonalCameraCloseUp: int = ...
    kOrthogonalCameraWithMargin: int = ...
    kPerspectiveCamera: int = ...
    kSwatchLight: int = ...
    def releaseDrawContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def renderMaterialViewerGeometry(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def swatchBackgroundColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MRenderer(object):
    def GPUDeviceHandle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def GPUmaximumPrimitiveCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def GPUmaximumVertexBufferSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def activeRenderOverride(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copyTargetToScreen(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterOverride(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def disableChangeManagementUntilNextRefresh(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawAPI(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawAPIIsOpenGL(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawAPIVersion(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findRenderOverride(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFragmentManager(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getRenderTargetManager(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getShaderManager(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getTextureManager(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kA8: int = ...
    kA8B8G8R8: int = ...
    kAllDevices: int = ...
    kB5G5R5A1: int = ...
    kB5G6R5: int = ...
    kB8G8R8A8: int = ...
    kB8G8R8X8: int = ...
    kBC6H_SF16: int = ...
    kBC6H_UF16: int = ...
    kBC7_UNORM: int = ...
    kBC7_UNORM_SRGB: int = ...
    kD24S8: int = ...
    kD24X8: int = ...
    kD32_FLOAT: int = ...
    kDXT1_UNORM: int = ...
    kDXT1_UNORM_SRGB: int = ...
    kDXT2_UNORM: int = ...
    kDXT2_UNORM_PREALPHA: int = ...
    kDXT2_UNORM_SRGB: int = ...
    kDXT3_UNORM: int = ...
    kDXT3_UNORM_PREALPHA: int = ...
    kDXT3_UNORM_SRGB: int = ...
    kDXT4_SNORM: int = ...
    kDXT4_UNORM: int = ...
    kDXT5_SNORM: int = ...
    kDXT5_UNORM: int = ...
    kDirectX11: int = ...
    kL16: int = ...
    kL8: int = ...
    kNone: int = ...
    kNumberOfRasterFormats: int = ...
    kOpenGL: int = ...
    kOpenGLCoreProfile: int = ...
    kR10G10B10A2_UINT: int = ...
    kR10G10B10A2_UNORM: int = ...
    kR16G16B16A16_FLOAT: int = ...
    kR16G16B16A16_SINT: int = ...
    kR16G16B16A16_SNORM: int = ...
    kR16G16B16A16_UINT: int = ...
    kR16G16B16A16_UNORM: int = ...
    kR16G16_FLOAT: int = ...
    kR16G16_SINT: int = ...
    kR16G16_SNORM: int = ...
    kR16G16_UINT: int = ...
    kR16G16_UNORM: int = ...
    kR16_FLOAT: int = ...
    kR16_SINT: int = ...
    kR16_SNORM: int = ...
    kR16_UINT: int = ...
    kR16_UNORM: int = ...
    kR1_UNORM: int = ...
    kR24G8: int = ...
    kR24X8: int = ...
    kR32G32B32A32_FLOAT: int = ...
    kR32G32B32A32_SINT: int = ...
    kR32G32B32A32_UINT: int = ...
    kR32G32B32_FLOAT: int = ...
    kR32G32B32_SINT: int = ...
    kR32G32B32_UINT: int = ...
    kR32G32_FLOAT: int = ...
    kR32G32_SINT: int = ...
    kR32G32_UINT: int = ...
    kR32_FLOAT: int = ...
    kR32_SINT: int = ...
    kR32_UINT: int = ...
    kR8G8B8A8_SINT: int = ...
    kR8G8B8A8_SNORM: int = ...
    kR8G8B8A8_UINT: int = ...
    kR8G8B8A8_UNORM: int = ...
    kR8G8B8X8: int = ...
    kR8G8_SINT: int = ...
    kR8G8_SNORM: int = ...
    kR8G8_UINT: int = ...
    kR8G8_UNORM: int = ...
    kR8_SINT: int = ...
    kR8_SNORM: int = ...
    kR8_UINT: int = ...
    kR8_UNORM: int = ...
    kR9G9B9E5_FLOAT: int = ...
    def needEvaluateAllLights(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def outputTargetSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registerOverride(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def render(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def renderOverrideCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def renderOverrideName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setGeometryDrawDirty(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLightRequiresShadows(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLightsAndShadowsDirty(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRenderOverrideName(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MSamplerState(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def desc(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAnisotropic: int = ...
    kMinLinear_MagMipPoint: int = ...
    kMinLinear_MagPoint_MipLinear: int = ...
    kMinMagLinear_MipPoint: int = ...
    kMinMagMipLinear: int = ...
    kMinMagMipPoint: int = ...
    kMinMagPoint_MipLinear: int = ...
    kMinPoint_MagLinear_MipPoint: int = ...
    kMinPoint_MagMipLinear: int = ...
    kTexBorder: int = ...
    kTexClamp: int = ...
    kTexMirror: int = ...
    kTexWrap: int = ...
    def resourceHandle(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MSamplerStateDesc(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def addressU(*args: Any, **kwargs: Any) -> Any: ...
    @addressU.setter
    def addressU(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def addressV(*args: Any, **kwargs: Any) -> Any: ...
    @addressV.setter
    def addressV(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def addressW(*args: Any, **kwargs: Any) -> Any: ...
    @addressW.setter
    def addressW(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def borderColor(*args: Any, **kwargs: Any) -> Any: ...
    @borderColor.setter
    def borderColor(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def comparisonFn(*args: Any, **kwargs: Any) -> Any: ...
    @comparisonFn.setter
    def comparisonFn(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def coordCount(*args: Any, **kwargs: Any) -> Any: ...
    @coordCount.setter
    def coordCount(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def elementIndex(*args: Any, **kwargs: Any) -> Any: ...
    @elementIndex.setter
    def elementIndex(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def filter(*args: Any, **kwargs: Any) -> Any: ...
    @filter.setter
    def filter(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def maxAnisotropy(*args: Any, **kwargs: Any) -> Any: ...
    @maxAnisotropy.setter
    def maxAnisotropy(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def maxLOD(*args: Any, **kwargs: Any) -> Any: ...
    @maxLOD.setter
    def maxLOD(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def minLOD(*args: Any, **kwargs: Any) -> Any: ...
    @minLOD.setter
    def minLOD(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def mipLODBias(*args: Any, **kwargs: Any) -> Any: ...
    @mipLODBias.setter
    def mipLODBias(*args: Any, **kwargs: Any) -> Any: ...
    def setDefaults(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MSceneRender(MRenderOperation):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addPostUIDrawables(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addPreUIDrawables(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cameraOverride(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clearOperation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cullingOverride(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def displayModeOverride(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableSRGBWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fragmentName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getObjectTypeExclusions(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getParameters(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUIDrawables(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAmbientLight: int = ...
    kBoundingBox: int = ...
    kClear: int = ...
    kCullBackFaces: int = ...
    kCullFrontFaces: int = ...
    kCullNone: int = ...
    kDefaultMaterial: int = ...
    kExcludeAll: int = ...
    kExcludeCVs: int = ...
    kExcludeCameras: int = ...
    kExcludeDeformers: int = ...
    kExcludeDimensions: int = ...
    kExcludeDynamicConstraints: int = ...
    kExcludeDynamics: int = ...
    kExcludeFluids: int = ...
    kExcludeFollicles: int = ...
    kExcludeGrid: int = ...
    kExcludeHairSystems: int = ...
    kExcludeHoldOuts: int = ...
    kExcludeHulls: int = ...
    kExcludeIkHandles: int = ...
    kExcludeImagePlane: int = ...
    kExcludeJoints: int = ...
    kExcludeLights: int = ...
    kExcludeLocators: int = ...
    kExcludeManipulators: int = ...
    kExcludeMeshes: int = ...
    kExcludeMotionTrails: int = ...
    kExcludeNCloths: int = ...
    kExcludeNParticles: int = ...
    kExcludeNRigids: int = ...
    kExcludeNone: int = ...
    kExcludeNurbsCurves: int = ...
    kExcludeNurbsSurfaces: int = ...
    kExcludeParticleInstancers: int = ...
    kExcludePivots: int = ...
    kExcludePlanes: int = ...
    kExcludeSelectHandles: int = ...
    kExcludeStrokes: int = ...
    kExcludeSubdivSurfaces: int = ...
    kExcludeTextures: int = ...
    kFlatShaded: int = ...
    kHUDRender: int = ...
    kLightDefault: int = ...
    kNoCullingOverride: int = ...
    kNoDisplayModeOverride: int = ...
    kNoLight: int = ...
    kNoLightingModeOverride: int = ...
    kNoSceneFilterOverride: int = ...
    kPostEffectDisableAll: int = ...
    kPostEffectDisableDOF: int = ...
    kPostEffectDisableMotionBlur: int = ...
    kPostEffectDisableNone: int = ...
    kPostEffectDisableSSAO: int = ...
    kPresentTarget: int = ...
    kQuadRender: int = ...
    kRenderAllItems: int = ...
    kRenderNonShadedItems: int = ...
    kRenderOpaqueShadedItems: int = ...
    kRenderPostSceneUIItems: int = ...
    kRenderPreSceneUIItems: int = ...
    kRenderShadedItems: int = ...
    kRenderTransparentShadedItems: int = ...
    kRenderUIItems: int = ...
    kSceneLights: int = ...
    kSceneRender: int = ...
    kSelectedLights: int = ...
    kShadeActiveOnly: int = ...
    kShaded: int = ...
    kTextured: int = ...
    kUserDefined: int = ...
    kWireFrame: int = ...
    def lightModeOverride(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def mClearOperation(*args: Any, **kwargs: Any) -> Any: ...
    @mClearOperation.setter
    def mClearOperation(*args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectSetOverride(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectTypeExclusions(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def operationType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postEffectsOverride(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postRender(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postSceneRender(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def preRender(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def preSceneRender(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def renderFilterOverride(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shaderOverride(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shadowEnableOverride(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def targetOverrideList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def viewportRectangleOverride(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MSelectionContext(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kComponent: int = ...
    kEdge: int = ...
    kFace: int = ...
    kNone: int = ...
    kObject: int = ...
    kVertex: int = ...
    @property
    def selectionLevel(*args: Any, **kwargs: Any) -> Any: ...
    @selectionLevel.setter
    def selectionLevel(*args: Any, **kwargs: Any) -> Any: ...

class MSelectionInfo(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def alignmentMatrix(*args: Any, **kwargs: Any) -> Any: ...
    @alignmentMatrix.setter
    def alignmentMatrix(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def cursorPoint(*args: Any, **kwargs: Any) -> Any: ...
    @cursorPoint.setter
    def cursorPoint(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isRay(*args: Any, **kwargs: Any) -> Any: ...
    @isRay.setter
    def isRay(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def isSingleSelection(*args: Any, **kwargs: Any) -> Any: ...
    @isSingleSelection.setter
    def isSingleSelection(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def localRay(*args: Any, **kwargs: Any) -> Any: ...
    @localRay.setter
    def localRay(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def pointSnapping(*args: Any, **kwargs: Any) -> Any: ...
    @pointSnapping.setter
    def pointSnapping(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def selectClosest(*args: Any, **kwargs: Any) -> Any: ...
    @selectClosest.setter
    def selectClosest(*args: Any, **kwargs: Any) -> Any: ...
    def selectForHilite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def selectOnHilitedOnly(*args: Any, **kwargs: Any) -> Any: ...
    @selectOnHilitedOnly.setter
    def selectOnHilitedOnly(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def selectRect(*args: Any, **kwargs: Any) -> Any: ...
    @selectRect.setter
    def selectRect(*args: Any, **kwargs: Any) -> Any: ...
    def selectable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def selectableComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MShaderCompileMacro(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def definition(*args: Any, **kwargs: Any) -> Any: ...
    @definition.setter
    def definition(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def name(*args: Any, **kwargs: Any) -> Any: ...
    @name.setter
    def name(*args: Any, **kwargs: Any) -> Any: ...

class MShaderInstance(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def activatePass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addInputFragment(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addInputFragmentForMultiParams(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addOutputFragment(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def annotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def bind(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clone(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createShaderInstanceWithColorManagementFragment(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getArraySize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPassCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isArrayParameter(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTransparent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isVaryingParameter(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAnisotropyShader: int = ...
    kAnisotropyShader2: int = ...
    kBoolean: int = ...
    kDisplacementPosShader: int = ...
    kFloat: int = ...
    kFloat2: int = ...
    kFloat3: int = ...
    kFloat4: int = ...
    kFloat4x4Col: int = ...
    kFloat4x4Row: int = ...
    kGeometryShader: int = ...
    kGlossShader: int = ...
    kGlossShader2: int = ...
    kInteger: int = ...
    kInvalid: int = ...
    kNormalShader: int = ...
    kNormalShader2: int = ...
    kPixelShader: int = ...
    kReflectanceShader: int = ...
    kReflectanceShader2: int = ...
    kRotationAngleShader: int = ...
    kRotationAngleShader2: int = ...
    kRoughnessShader: int = ...
    kRoughnessShader2: int = ...
    kSampler: int = ...
    kTexture1: int = ...
    kTexture2: int = ...
    kTexture3: int = ...
    kTextureCube: int = ...
    kVertexShader: int = ...
    def parameterDefaultValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parameterList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parameterSemantic(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parameterType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def passAnnotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postDrawCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def preDrawCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def renameParameter(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def requiredVertexBuffers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def resourceName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def semantic(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setArrayParameter(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAsVarying(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIsTransparent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setParameter(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSemantic(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def techniqueAnnotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def techniqueNames(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uiName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uiWidget(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def unbind(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def updateParameters(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def writeEffectSourceToFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MShaderManager(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addShaderIncludePath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addShaderPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clearEffectCache(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getEffectsBufferShader(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getEffectsFileShader(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getEffectsTechniques(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFragmentShader(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getLastError(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getLastErrorSource(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getShaderFromNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getStockShader(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isSupportedShaderSemantic(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    k3dBlinnShader: int = ...
    k3dCPVDashLineShader: int = ...
    k3dCPVFatPointShader: int = ...
    k3dCPVShader: int = ...
    k3dCPVSolidShader: int = ...
    k3dCPVThickDashLineShader: int = ...
    k3dCPVThickLineShader: int = ...
    k3dColorLookupFatPointShader: int = ...
    k3dColorOpacityLookupFatPointShader: int = ...
    k3dDashLineShader: int = ...
    k3dDefaultMaterialShader: int = ...
    k3dDepthShader: int = ...
    k3dFatPointShader: int = ...
    k3dFloat2NumericShader: int = ...
    k3dFloat3NumericShader: int = ...
    k3dFloatNumericShader: int = ...
    k3dIntegerNumericShader: int = ...
    k3dIsotropicStandardSurfaceShader: int = ...
    k3dOpacityLookupFatPointShader: int = ...
    k3dPointLightShadowerShader: int = ...
    k3dPointVectorShader: int = ...
    k3dShadowerShader: int = ...
    k3dSolidShader: int = ...
    k3dSolidTextureShader: int = ...
    k3dStandardSurfaceShader: int = ...
    k3dStippleShader: int = ...
    k3dThickDashLineShader: int = ...
    k3dThickLineShader: int = ...
    def releaseShader(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeEffectFromCache(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shaderIncludePaths(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shaderPaths(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MStateManager(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def acquireBlendState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def acquireDepthStencilState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def acquireRasterizerState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def acquireSamplerState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getBlendState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDepthStencilState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getMaxSamplerCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getRasterizerState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getSamplerState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kCompareAlways: int = ...
    kCompareEqual: int = ...
    kCompareGreater: int = ...
    kCompareGreaterEqual: int = ...
    kCompareLess: int = ...
    kCompareLessEqual: int = ...
    kCompareNever: int = ...
    kCompareNotEqual: int = ...
    kDomainShader: int = ...
    kGeometryShader: int = ...
    kHullShader: int = ...
    kNoShader: int = ...
    kPixelShader: int = ...
    kVertexShader: int = ...
    def releaseBlendState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def releaseDepthStencilState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def releaseRasterizerState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def releaseSamplerState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setBlendState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDepthStencilState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRasterizerState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSamplerState(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MStencilOpDesc(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDefaults(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def stencilDepthFailOp(*args: Any, **kwargs: Any) -> Any: ...
    @stencilDepthFailOp.setter
    def stencilDepthFailOp(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def stencilFailOp(*args: Any, **kwargs: Any) -> Any: ...
    @stencilFailOp.setter
    def stencilFailOp(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def stencilFunc(*args: Any, **kwargs: Any) -> Any: ...
    @stencilFunc.setter
    def stencilFunc(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def stencilPassOp(*args: Any, **kwargs: Any) -> Any: ...
    @stencilPassOp.setter
    def stencilPassOp(*args: Any, **kwargs: Any) -> Any: ...

class MSubSceneContainer(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __len__(self: Self) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def add(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def count(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def find(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getIterator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MSubSceneContainerIterator(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def destroy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def next(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MSwatchRenderBase(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cancelCurrentSwatchRender(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cancelParallelRendering(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doIteration(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def finishParallelRender(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def image(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def node(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def renderParallel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def renderQuality(*args: Any, **kwargs: Any) -> Any: ...
    @renderQuality.setter
    def renderQuality(*args: Any, **kwargs: Any) -> Any: ...
    def resolution(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def swatchNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MTargetBlendDesc(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def alphaBlendOperation(*args: Any, **kwargs: Any) -> Any: ...
    @alphaBlendOperation.setter
    def alphaBlendOperation(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def alphaDestinationBlend(*args: Any, **kwargs: Any) -> Any: ...
    @alphaDestinationBlend.setter
    def alphaDestinationBlend(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def alphaSourceBlend(*args: Any, **kwargs: Any) -> Any: ...
    @alphaSourceBlend.setter
    def alphaSourceBlend(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def blendEnable(*args: Any, **kwargs: Any) -> Any: ...
    @blendEnable.setter
    def blendEnable(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def blendOperation(*args: Any, **kwargs: Any) -> Any: ...
    @blendOperation.setter
    def blendOperation(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def destinationBlend(*args: Any, **kwargs: Any) -> Any: ...
    @destinationBlend.setter
    def destinationBlend(*args: Any, **kwargs: Any) -> Any: ...
    def setDefaults(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def sourceBlend(*args: Any, **kwargs: Any) -> Any: ...
    @sourceBlend.setter
    def sourceBlend(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def targetWriteMask(*args: Any, **kwargs: Any) -> Any: ...
    @targetWriteMask.setter
    def targetWriteMask(*args: Any, **kwargs: Any) -> Any: ...

class MTexture(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def bytesPerPixel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def freeRawData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAlpha(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasTransparentAlpha(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasZeroAlpha(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rawData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def resourceHandle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setHasAlpha(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setHasTransparentAlpha(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setHasZeroAlpha(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def textureDescription(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def update(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MTextureAssignment(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def texture(*args: Any, **kwargs: Any) -> Any: ...
    @texture.setter
    def texture(*args: Any, **kwargs: Any) -> Any: ...

class MTextureDescription(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def fArraySlices(*args: Any, **kwargs: Any) -> Any: ...
    @fArraySlices.setter
    def fArraySlices(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def fBytesPerRow(*args: Any, **kwargs: Any) -> Any: ...
    @fBytesPerRow.setter
    def fBytesPerRow(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def fBytesPerSlice(*args: Any, **kwargs: Any) -> Any: ...
    @fBytesPerSlice.setter
    def fBytesPerSlice(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def fDepth(*args: Any, **kwargs: Any) -> Any: ...
    @fDepth.setter
    def fDepth(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def fEnvMapType(*args: Any, **kwargs: Any) -> Any: ...
    @fEnvMapType.setter
    def fEnvMapType(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def fFormat(*args: Any, **kwargs: Any) -> Any: ...
    @fFormat.setter
    def fFormat(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def fHeight(*args: Any, **kwargs: Any) -> Any: ...
    @fHeight.setter
    def fHeight(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def fMipmaps(*args: Any, **kwargs: Any) -> Any: ...
    @fMipmaps.setter
    def fMipmaps(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def fTextureType(*args: Any, **kwargs: Any) -> Any: ...
    @fTextureType.setter
    def fTextureType(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def fWidth(*args: Any, **kwargs: Any) -> Any: ...
    @fWidth.setter
    def fWidth(*args: Any, **kwargs: Any) -> Any: ...
    kCubeMap: int = ...
    kDepthTexture: int = ...
    kEnvCrossHoriz: int = ...
    kEnvCrossVert: int = ...
    kEnvCubemap: int = ...
    kEnvHemiSphere: int = ...
    kEnvLatLong: int = ...
    kEnvNone: int = ...
    kEnvSphere: int = ...
    kImage1D: int = ...
    kImage1DArray: int = ...
    kImage2D: int = ...
    kImage2DArray: int = ...
    kNumberOfEnvMapTypes: int = ...
    kNumberOfTextureTypes: int = ...
    kVolumeTexture: int = ...
    def setToDefault2DTexture(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MTextureManager(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def acquireDepthTexture(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def acquireTexture(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def acquireTiledTexture(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addImagePath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def imagePaths(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def releaseTexture(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def saveTexture(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MTextureUpdateRegion(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def fXRangeMax(*args: Any, **kwargs: Any) -> Any: ...
    @fXRangeMax.setter
    def fXRangeMax(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def fXRangeMin(*args: Any, **kwargs: Any) -> Any: ...
    @fXRangeMin.setter
    def fXRangeMin(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def fYRangeMax(*args: Any, **kwargs: Any) -> Any: ...
    @fYRangeMax.setter
    def fYRangeMax(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def fYRangeMin(*args: Any, **kwargs: Any) -> Any: ...
    @fYRangeMin.setter
    def fYRangeMin(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def fZRangeMax(*args: Any, **kwargs: Any) -> Any: ...
    @fZRangeMax.setter
    def fZRangeMax(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def fZRangeMin(*args: Any, **kwargs: Any) -> Any: ...
    @fZRangeMin.setter
    def fZRangeMin(*args: Any, **kwargs: Any) -> Any: ...

class MUIDrawManager(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def arc(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def arc2d(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def beginDrawInXray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def beginDrawable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def box(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def capsule(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def circle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def circle2d(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cone(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cylinder(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def depthPriority(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def endDrawInXray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def endDrawable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFontList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getIconNames(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def icon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAutomatic: int = ...
    kCenter: int = ...
    kClosedLine: int = ...
    kDashed: int = ...
    kDefaultFontSize: int = ...
    kDotted: int = ...
    kFlat: int = ...
    kInclineItalic: int = ...
    kInclineNormal: int = ...
    kInclineOblique: int = ...
    kLeft: int = ...
    kLineNone: int = ...
    kLineOverline: int = ...
    kLineStrikeoutLine: int = ...
    kLineStrip: int = ...
    kLineUnderline: int = ...
    kLines: int = ...
    kNonSelectable: int = ...
    kPoints: int = ...
    kRight: int = ...
    kSelectable: int = ...
    kShaded: int = ...
    kShortDashed: int = ...
    kShortDotted: int = ...
    kSmallFontSize: int = ...
    kSolid: int = ...
    kStippled: int = ...
    kStretchCondensed: int = ...
    kStretchExpanded: int = ...
    kStretchExtraCondensed: int = ...
    kStretchExtraExpanded: int = ...
    kStretchSemiCondensed: int = ...
    kStretchSemiExpanded: int = ...
    kStretchUltraCondensed: int = ...
    kStretchUltraExpanded: int = ...
    kStretchUnstretched: int = ...
    kTriStrip: int = ...
    kTriangles: int = ...
    kWeightBlack: int = ...
    kWeightBold: int = ...
    kWeightDemiBold: int = ...
    kWeightLight: int = ...
    kWeightNormal: int = ...
    def line(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def line2d(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def lineList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def lineStrip(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def mesh(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def mesh2d(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def point(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def point2d(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def points(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rect(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rect2d(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setColorIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDepthPriority(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFontIncline(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFontLine(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFontName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFontSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFontStretch(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFontWeight(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLineStyle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLineWidth(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPaintStyle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPointSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTexture(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTextureMask(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTextureSampler(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def sphere(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def text(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def text2d(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MUniformParameter(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asBool(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asFloat(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asFloatArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asInt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def enumFieldNames(*args: Any, **kwargs: Any) -> Any: ...
    @enumFieldNames.setter
    def enumFieldNames(*args: Any, **kwargs: Any) -> Any: ...
    def hasChanged(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isATexture(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kSemanticBackgroundColor: int = ...
    kSemanticBump: int = ...
    kSemanticBumpTexture: int = ...
    kSemanticColor: int = ...
    kSemanticColorTexture: int = ...
    kSemanticEnvironment: int = ...
    kSemanticFarClipPlane: int = ...
    kSemanticFrameNumber: int = ...
    kSemanticHWSEdgeLevel: int = ...
    kSemanticHWSFaceLevel: int = ...
    kSemanticHWSFrontCCW: int = ...
    kSemanticHWSHighlighting: int = ...
    kSemanticHWSInstancedDraw: int = ...
    kSemanticHWSObjectLevel: int = ...
    kSemanticHWSOccluder: int = ...
    kSemanticHWSPrimitiveBase: int = ...
    kSemanticHWSPrimitiveCountPerInstance: int = ...
    kSemanticHWSVertexLevel: int = ...
    kSemanticLocalViewer: int = ...
    kSemanticNearClipPlane: int = ...
    kSemanticNormal: int = ...
    kSemanticNormalTexture: int = ...
    kSemanticNormalizationTexture: int = ...
    kSemanticObjectDir: int = ...
    kSemanticObjectPos: int = ...
    kSemanticOpaqueDepthTexture: int = ...
    kSemanticProjectionDir: int = ...
    kSemanticProjectionInverseMatrix: int = ...
    kSemanticProjectionInverseTransposeMatrix: int = ...
    kSemanticProjectionMatrix: int = ...
    kSemanticProjectionPos: int = ...
    kSemanticProjectionTransposeMatrix: int = ...
    kSemanticTime: int = ...
    kSemanticTranspDepthTexture: int = ...
    kSemanticUnknown: int = ...
    kSemanticViewDir: int = ...
    kSemanticViewInverseMatrix: int = ...
    kSemanticViewInverseTransposeMatrix: int = ...
    kSemanticViewMatrix: int = ...
    kSemanticViewPos: int = ...
    kSemanticViewProjectionInverseMatrix: int = ...
    kSemanticViewProjectionInverseTransposeMatrix: int = ...
    kSemanticViewProjectionMatrix: int = ...
    kSemanticViewProjectionTransposeMatrix: int = ...
    kSemanticViewTransposeMatrix: int = ...
    kSemanticViewportPixelSize: int = ...
    kSemanticWorldDir: int = ...
    kSemanticWorldInverseMatrix: int = ...
    kSemanticWorldInverseTransposeMatrix: int = ...
    kSemanticWorldMatrix: int = ...
    kSemanticWorldPos: int = ...
    kSemanticWorldTransposeMatrix: int = ...
    kSemanticWorldViewInverseMatrix: int = ...
    kSemanticWorldViewInverseTransposeMatrix: int = ...
    kSemanticWorldViewMatrix: int = ...
    kSemanticWorldViewProjectionInverseMatrix: int = ...
    kSemanticWorldViewProjectionInverseTransposeMatrix: int = ...
    kSemanticWorldViewProjectionMatrix: int = ...
    kSemanticWorldViewProjectionTransposeMatrix: int = ...
    kSemanticWorldViewTransposeMatrix: int = ...
    kType1DTexture: int = ...
    kType2DTexture: int = ...
    kType3DTexture: int = ...
    kTypeBool: int = ...
    kTypeCubeTexture: int = ...
    kTypeEnum: int = ...
    kTypeEnvTexture: int = ...
    kTypeFloat: int = ...
    kTypeInt: int = ...
    kTypeString: int = ...
    kTypeUnknown: int = ...
    @property
    def keyable(*args: Any, **kwargs: Any) -> Any: ...
    @keyable.setter
    def keyable(*args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numColumns(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numElements(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numRows(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def plug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def rangeMax(*args: Any, **kwargs: Any) -> Any: ...
    @rangeMax.setter
    def rangeMax(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def rangeMin(*args: Any, **kwargs: Any) -> Any: ...
    @rangeMin.setter
    def rangeMin(*args: Any, **kwargs: Any) -> Any: ...
    def semantic(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setBool(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDirty(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFloat(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFloatArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def softRangeMax(*args: Any, **kwargs: Any) -> Any: ...
    @softRangeMax.setter
    def softRangeMax(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def softRangeMin(*args: Any, **kwargs: Any) -> Any: ...
    @softRangeMin.setter
    def softRangeMin(*args: Any, **kwargs: Any) -> Any: ...
    def source(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def uiHidden(*args: Any, **kwargs: Any) -> Any: ...
    @uiHidden.setter
    def uiHidden(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def uiNiceName(*args: Any, **kwargs: Any) -> Any: ...
    @uiNiceName.setter
    def uiNiceName(*args: Any, **kwargs: Any) -> Any: ...
    def userData(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MUniformParameterList(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __getitem__(self: Self, key: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __len__(self: Self) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def append(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setElement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MUserRenderOperation(MRenderOperation):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addUIDrawables(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cameraOverride(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableSRGBWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUIDrawables(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kClear: int = ...
    kHUDRender: int = ...
    kPresentTarget: int = ...
    kQuadRender: int = ...
    kSceneRender: int = ...
    kUserDefined: int = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def operationType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def requiresLightData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def targetOverrideList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def viewportRectangleOverride(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MVaryingParameter(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addElement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def destinationSetName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dimension(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def elementSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getElement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kBinormal: int = ...
    kChar: int = ...
    kColor: int = ...
    kDouble: int = ...
    kFloat: int = ...
    kInt16: int = ...
    kInt32: int = ...
    kInvalidParameter: int = ...
    kNoSemantic: int = ...
    kNormal: int = ...
    kPosition: int = ...
    kStructure: int = ...
    kTangent: int = ...
    kTexCoord: int = ...
    kUnsignedChar: int = ...
    kUnsignedInt16: int = ...
    kUnsignedInt32: int = ...
    kWeight: int = ...
    def maximumStride(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numElements(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeElements(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def semantic(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def semanticName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSource(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def sourceSemantic(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def sourceSetName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def updateId(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MVaryingParameterList(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __getitem__(self: Self, key: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __len__(self: Self) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def append(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setElement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MVertexBuffer(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def acquire(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def commit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def descriptor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasCustomResourceHandle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def lockResourceHandle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def map(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def resourceHandle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setResourceHandle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def unload(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def unlockResourceHandle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def unmap(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def update(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MVertexBufferArray(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __getitem__(self: Self, key: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __len__(self: Self) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def append(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getBuffer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getName(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MVertexBufferDescriptor(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def dataType(*args: Any, **kwargs: Any) -> Any: ...
    @dataType.setter
    def dataType(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def dataTypeSize(*args: Any, **kwargs: Any) -> Any: ...
    @dataTypeSize.setter
    def dataTypeSize(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def dimension(*args: Any, **kwargs: Any) -> Any: ...
    @dimension.setter
    def dimension(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def name(*args: Any, **kwargs: Any) -> Any: ...
    @name.setter
    def name(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def offset(*args: Any, **kwargs: Any) -> Any: ...
    @offset.setter
    def offset(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def semantic(*args: Any, **kwargs: Any) -> Any: ...
    @semantic.setter
    def semantic(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def semanticName(*args: Any, **kwargs: Any) -> Any: ...
    @semanticName.setter
    def semanticName(*args: Any, **kwargs: Any) -> Any: ...
    @property
    def stride(*args: Any, **kwargs: Any) -> Any: ...
    @stride.setter
    def stride(*args: Any, **kwargs: Any) -> Any: ...

class MVertexBufferDescriptorList(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __getitem__(self: Self, key: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __len__(self: Self) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def append(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self: Self, *args: Any, **kwargs: Any) -> Any: ...

__builtins__: dict
__cached__: str
__doc__: NoneType
__file__: str
__loader__: SourceFileLoader
__name__: str
__package__: str
__spec__: ModuleSpec
key: str
ourdict: dict
py2dict: dict
val: str