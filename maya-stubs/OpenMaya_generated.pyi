# fmt: off
from typing import *
from typing_extensions import Self
from _typeshed import Incomplete


MAYA_API_VERSION: int
MAYA_APP_VERSION: int
MAYA_CUSTOM_VERSION: int
MAYA_CUSTOM_VERSION_CLIENT: str
MAYA_CUSTOM_VERSION_MAJOR: int
MAYA_CUSTOM_VERSION_MINOR: int
class MAddRemoveAttrEdit(MEdit):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def attributeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def editType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasEditData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isApplied(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isAttributeAdded(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFailed(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTopLevel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAddRemoveAttrEdit: int = ...
    kConnectDisconnectEdit: int = ...
    kFcurveEdit: int = ...
    kNullEdit: int = ...
    kParentEdit: int = ...
    kSetAttrEdit: int = ...
    def matches(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def node(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def nodeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setApplied(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFailed(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MAddRemoveAttrEdit_className(*args: Any, **kwargs: Any) -> Any: ...
class MAngle(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def asAngMinutes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asAngSeconds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asDegrees(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asRadians(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asUnits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def internalToUI(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def internalUnit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAngMinutes: int = ...
    kAngSeconds: int = ...
    kDegrees: int = ...
    kInvalid: int = ...
    kLast: int = ...
    kRadians: int = ...
    def setInternalUnit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUIUnit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUnit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def uiToInternal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uiUnit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def unit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MAngle_className(*args: Any, **kwargs: Any) -> Any: ...
def MAngle_internalToUI(*args: Any, **kwargs: Any) -> Any: ...
def MAngle_internalUnit(*args: Any, **kwargs: Any) -> Any: ...
def MAngle_setInternalUnit(*args: Any, **kwargs: Any) -> Any: ...
def MAngle_setUIUnit(*args: Any, **kwargs: Any) -> Any: ...
def MAngle_uiToInternal(*args: Any, **kwargs: Any) -> Any: ...
def MAngle_uiUnit(*args: Any, **kwargs: Any) -> Any: ...
class MArgDatabase(MArgParser):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def commandArgumentBool(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def commandArgumentDouble(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def commandArgumentInt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def commandArgumentMAngle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def commandArgumentMDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def commandArgumentMTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def commandArgumentString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def flagArgumentBool(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def flagArgumentDouble(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def flagArgumentInt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def flagArgumentMAngle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def flagArgumentMDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def flagArgumentMTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def flagArgumentString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCommandArgument(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFlagArgument(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFlagArgumentList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFlagArgumentPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getObjects(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isEdit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isQuery(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numberOfFlagUses(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numberOfFlagsUsed(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MArgDatabase_className(*args: Any, **kwargs: Any) -> Any: ...
class MArgList(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addArg(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asAngle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asBool(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asDouble(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asDoubleArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asInt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asIntArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asStringArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asVector(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def flagIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kInvalidArgIndex: int = ...
    def length(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MArgList_className(*args: Any, **kwargs: Any) -> Any: ...
class MArgParser(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def commandArgumentBool(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def commandArgumentDouble(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def commandArgumentInt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def commandArgumentMAngle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def commandArgumentMDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def commandArgumentMTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def commandArgumentString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def flagArgumentBool(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def flagArgumentDouble(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def flagArgumentInt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def flagArgumentMAngle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def flagArgumentMDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def flagArgumentMTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def flagArgumentString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFlagArgumentList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFlagArgumentPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getObjects(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isEdit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isQuery(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numberOfFlagUses(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numberOfFlagsUsed(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MArgParser_className(*args: Any, **kwargs: Any) -> Any: ...
class MArrayDataBuilder(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addElement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addElementArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addLast(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addLastArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def elementCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def growArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeElement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setGrowSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MArrayDataBuilder_className(*args: Any, **kwargs: Any) -> Any: ...
class MArrayDataHandle(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def builder(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def elementCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def elementIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inputArrayValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inputValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def jumpToArrayElement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def jumpToElement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def next(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def outputArrayValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def outputValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAllClean(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setClean(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MArrayDataHandle_className(*args: Any, **kwargs: Any) -> Any: ...
class MAttributeIndex(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    __hash__: NoneType = ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getLower(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getUpper(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasLowerBound(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasRange(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUpperBound(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasValidRange(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isBounded(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kFloat: int = ...
    kInteger: int = ...
    def setLower(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUpper(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MAttributeIndex_className(*args: Any, **kwargs: Any) -> Any: ...
class MAttributePattern(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    __hash__: NoneType = ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addRootAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attrPattern(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attrPatternCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPattern(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeRootAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rootAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rootAttrCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MAttributePatternArray(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __getitem__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def append(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSizeIncrement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def sizeIncrement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MAttributePatternArray_className(*args: Any, **kwargs: Any) -> Any: ...
def MAttributePattern_attrPattern(*args: Any, **kwargs: Any) -> Any: ...
def MAttributePattern_attrPatternCount(*args: Any, **kwargs: Any) -> Any: ...
def MAttributePattern_className(*args: Any, **kwargs: Any) -> Any: ...
def MAttributePattern_findPattern(*args: Any, **kwargs: Any) -> Any: ...
class MAttributeSpec(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __getitem__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    __hash__: NoneType = ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dimensions(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDimensions(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MAttributeSpecArray(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __getitem__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def append(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSizeIncrement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def sizeIncrement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MAttributeSpecArray_className(*args: Any, **kwargs: Any) -> Any: ...
def MAttributeSpec_className(*args: Any, **kwargs: Any) -> Any: ...
class MBoundingBox(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def center(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def contains(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def depth(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def expand(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def height(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def intersects(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def max(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def min(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transformUsing(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def width(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MCacheConfigRuleRegistry(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registerFilter(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registeringCallableScript(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRegisteringCallableScript(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def unregisterFilter(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MCacheConfigRuleRegistry_className(*args: Any, **kwargs: Any) -> Any: ...
def MCacheConfigRuleRegistry_registerFilter(*args: Any, **kwargs: Any) -> Any: ...
def MCacheConfigRuleRegistry_registeringCallableScript(*args: Any, **kwargs: Any) -> Any: ...
def MCacheConfigRuleRegistry_setRegisteringCallableScript(*args: Any, **kwargs: Any) -> Any: ...
def MCacheConfigRuleRegistry_unregisterFilter(*args: Any, **kwargs: Any) -> Any: ...
class MCacheFormatDescription(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addChannel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addDescriptionInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getChannelDataType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getChannelEndTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getChannelInterpretation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getChannelName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getChannelSamplingRate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getChannelSamplingType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getChannelStartTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDescriptionInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDistribution(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getNumChannels(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getStartAndEndTimes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getTimePerFrame(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kDouble: int = ...
    kDoubleArray: int = ...
    kDoubleVectorArray: int = ...
    kFloatArray: int = ...
    kFloatVectorArray: int = ...
    kInt32Array: int = ...
    kIrregular: int = ...
    kNoFile: int = ...
    kOneFile: int = ...
    kOneFilePerFrame: int = ...
    kRegular: int = ...
    kUnknownData: int = ...
    def setDistribution(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTimePerFrame(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MCacheFormatDescription_className(*args: Any, **kwargs: Any) -> Any: ...
class MCacheSchema(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def add(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MCacheSchemaAttributesIterator(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def advance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def done(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MCacheSchemaAttributesIteratorSentinel(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    thisown: property = ...

class MCacheSchemaAttributesRange(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def begin(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def end(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MCallbackIdArray(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __getitem__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def append(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSizeIncrement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def sizeIncrement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MCallbackIdArray_className(*args: Any, **kwargs: Any) -> Any: ...
class MCameraMessage(MMessage):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addBeginManipulationCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addEndManipulationCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentCallbackId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCallableInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kDefaultAction: int = ...
    kDoAction: int = ...
    kDoNotDoAction: int = ...
    def nodeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registeringCallableScript(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCallableInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRegisteringCallableScript(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def stealCallableInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def stopRegisteringCallableScript(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MCameraMessage_addBeginManipulationCallback(*args: Any, **kwargs: Any) -> Any: ...
def MCameraMessage_addEndManipulationCallback(*args: Any, **kwargs: Any) -> Any: ...
def MCameraMessage_className(*args: Any, **kwargs: Any) -> Any: ...
class MCameraSetMessage(MMessage):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addCameraChangedCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addCameraLayerCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentCallbackId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCallableInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kDefaultAction: int = ...
    kDoAction: int = ...
    kDoNotDoAction: int = ...
    def nodeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registeringCallableScript(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCallableInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRegisteringCallableScript(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def stealCallableInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def stopRegisteringCallableScript(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MCameraSetMessage_addCameraChangedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MCameraSetMessage_addCameraLayerCallback(*args: Any, **kwargs: Any) -> Any: ...
def MCameraSetMessage_className(*args: Any, **kwargs: Any) -> Any: ...
class MClosedTimeInterval(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def empty(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    max: property = ...
    min: property = ...
    thisown: property = ...

class MColor(object):
    def __add__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __call__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    def __div__(self: Self, args: Any) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __getitem__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    __hash__: NoneType = ...
    def __iadd__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __idiv__(self: Self, args: Any) -> Any: ...
    def __imul__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __itruediv__(self: Self, args: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __mul__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __ne__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __neg__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __sub__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __truediv__(self: Self, args: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    a: property = ...
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    b: property = ...
    g: property = ...
    def get(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kCMY: int = ...
    kCMYK: int = ...
    kHSV: int = ...
    def kOpaqueBlack(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kRGB: int = ...
    r: property = ...
    def set(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MColorArray(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __getitem__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def append(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSizeIncrement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def sizeIncrement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MColorArray_className(*args: Any, **kwargs: Any) -> Any: ...
class MCommandMessage(MMessage):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addCommandCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addCommandOutputCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addCommandOutputFilterCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addProcCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentCallbackId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCallableInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kDefaultAction: int = ...
    kDisplay: int = ...
    kDoAction: int = ...
    kDoNotDoAction: int = ...
    kError: int = ...
    kHistory: int = ...
    kInfo: int = ...
    kMELCommand: int = ...
    kMELProc: int = ...
    kResult: int = ...
    kStackTrace: int = ...
    kWarning: int = ...
    def nodeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registeringCallableScript(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCallableInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRegisteringCallableScript(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def stealCallableInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def stopRegisteringCallableScript(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MCommandMessage_addCommandCallback(*args: Any, **kwargs: Any) -> Any: ...
def MCommandMessage_addCommandOutputCallback(*args: Any, **kwargs: Any) -> Any: ...
def MCommandMessage_addCommandOutputFilterCallback(*args: Any, **kwargs: Any) -> Any: ...
def MCommandMessage_addProcCallback(*args: Any, **kwargs: Any) -> Any: ...
def MCommandMessage_className(*args: Any, **kwargs: Any) -> Any: ...
class MCommandResult(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getResult(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kDouble: int = ...
    kDoubleArray: int = ...
    kInt: int = ...
    kInt64: int = ...
    kInt64Array: int = ...
    kIntArray: int = ...
    kInvalid: int = ...
    kMatrix: int = ...
    kMatrixArray: int = ...
    kString: int = ...
    kStringArray: int = ...
    kVector: int = ...
    kVectorArray: int = ...
    def resultType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def stringResult(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MCommandResult_className(*args: Any, **kwargs: Any) -> Any: ...
class MComputation(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def beginComputation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def endComputation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInterruptRequested(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def progress(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def progressMax(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def progressMin(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setProgress(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setProgressRange(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setProgressStatus(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MComputation_className(*args: Any, **kwargs: Any) -> Any: ...
class MConditionMessage(MMessage):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addConditionCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentCallbackId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCallableInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConditionNames(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConditionState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kDefaultAction: int = ...
    kDoAction: int = ...
    kDoNotDoAction: int = ...
    def nodeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registeringCallableScript(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCallableInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRegisteringCallableScript(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def stealCallableInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def stopRegisteringCallableScript(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MConditionMessage_addConditionCallback(*args: Any, **kwargs: Any) -> Any: ...
def MConditionMessage_className(*args: Any, **kwargs: Any) -> Any: ...
def MConditionMessage_getConditionNames(*args: Any, **kwargs: Any) -> Any: ...
def MConditionMessage_getConditionState(*args: Any, **kwargs: Any) -> Any: ...
class MConnectDisconnectAttrEdit(MEdit):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dstPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dstPlugName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def editType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasEditData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isApplied(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isConnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFailed(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTopLevel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAddRemoveAttrEdit: int = ...
    kConnectDisconnectEdit: int = ...
    kFcurveEdit: int = ...
    kNullEdit: int = ...
    kParentEdit: int = ...
    kSetAttrEdit: int = ...
    def matches(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setApplied(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFailed(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def srcPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def srcPlugName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MConnectDisconnectAttrEdit_className(*args: Any, **kwargs: Any) -> Any: ...
class MContainerMessage(MMessage):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addBoundAttrCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addPublishAttrCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentCallbackId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCallableInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kDefaultAction: int = ...
    kDoAction: int = ...
    kDoNotDoAction: int = ...
    def nodeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registeringCallableScript(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCallableInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRegisteringCallableScript(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def stealCallableInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def stopRegisteringCallableScript(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MContainerMessage_addBoundAttrCallback(*args: Any, **kwargs: Any) -> Any: ...
def MContainerMessage_addPublishAttrCallback(*args: Any, **kwargs: Any) -> Any: ...
def MContainerMessage_className(*args: Any, **kwargs: Any) -> Any: ...
class MCurveAttribute(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addEntries(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createCurve(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createCurveAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteEntries(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getEntries(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getNumEntries(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getValueAtPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getValuesAtPositions(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pack(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def sampleValueCurve(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCurve(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPositionAtIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setValueAtIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def sort(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MCurveAttribute_className(*args: Any, **kwargs: Any) -> Any: ...
def MCurveAttribute_createCurve(*args: Any, **kwargs: Any) -> Any: ...
def MCurveAttribute_createCurveAttr(*args: Any, **kwargs: Any) -> Any: ...
class MDAGDrawOverrideInfo(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    fDisplayType: property = ...
    fEnableShading: property = ...
    fEnableTexturing: property = ...
    fEnableVisible: property = ...
    fLOD: property = ...
    fOverrideEnabled: property = ...
    fPlaybackVisible: property = ...
    kDisplayTypeNormal: int = ...
    kDisplayTypeReference: int = ...
    kDisplayTypeTemplate: int = ...
    kLODBoundingBox: int = ...
    kLODFull: int = ...
    thisown: property = ...

class MDGContext(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def current(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    fsNormal: property = ...
    def getTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isCurrent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNormal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def makeCurrent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MDGContextGuard(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    thisown: property = ...

def MDGContext_className(*args: Any, **kwargs: Any) -> Any: ...
def MDGContext_current(*args: Any, **kwargs: Any) -> Any: ...
class MDGMessage(MMessage):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addConnectionCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addDelayedTimeChangeCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addDelayedTimeChangeRunupCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addForceUpdateCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addNodeAddedCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addNodeChangeUuidCheckCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addNodeRemovedCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addPreConnectionCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addTimeChangeCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentCallbackId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCallableInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kDefaultAction: int = ...
    kDoAction: int = ...
    kDoNotDoAction: int = ...
    def nodeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registeringCallableScript(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCallableInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRegisteringCallableScript(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def stealCallableInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def stopRegisteringCallableScript(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MDGMessage_addConnectionCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDGMessage_addDelayedTimeChangeCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDGMessage_addDelayedTimeChangeRunupCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDGMessage_addForceUpdateCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDGMessage_addNodeAddedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDGMessage_addNodeChangeUuidCheckCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDGMessage_addNodeRemovedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDGMessage_addPreConnectionCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDGMessage_addTimeChangeCallback(*args: Any, **kwargs: Any) -> Any: ...
class MDGModifier(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExtensionAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def commandToExecute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connect(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteMetadata(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def disconnect(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doIt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def linkExtensionAttributeToPlugin(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def newPlugValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def newPlugValueBool(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def newPlugValueChar(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def newPlugValueDouble(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def newPlugValueFloat(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def newPlugValueInt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def newPlugValueInt64(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def newPlugValueMAngle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def newPlugValueMDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def newPlugValueMTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def newPlugValueShort(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def newPlugValueString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pythonCommandToExecute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeExtensionAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeExtensionAttributeIfUnset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeMultiInstance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def renameAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def renameNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMetadata(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setNodeLockState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def undoIt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def unlinkExtensionAttributeFromPlugin(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MDGModifier_className(*args: Any, **kwargs: Any) -> Any: ...
class MDagMessage(MMessage):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addAllDagChangesCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAllDagChangesDagPathCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addChildAddedCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addChildAddedDagPathCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addChildRemovedCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addChildRemovedDagPathCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addChildReorderedCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addChildReorderedDagPathCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addDagCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addDagDagPathCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addInstanceAddedCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addInstanceAddedDagPathCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addInstanceRemovedCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addInstanceRemovedDagPathCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addMatrixModifiedCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addParentAddedCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addParentAddedDagPathCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addParentRemovedCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addParentRemovedDagPathCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addWorldMatrixModifiedCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentCallbackId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCallableInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAll: int = ...
    kChildAdded: int = ...
    kChildRemoved: int = ...
    kChildReordered: int = ...
    kDefaultAction: int = ...
    kDoAction: int = ...
    kDoNotDoAction: int = ...
    kInstanceAdded: int = ...
    kInstanceRemoved: int = ...
    kInvalidMsg: int = ...
    kLast: int = ...
    kParentAdded: int = ...
    kParentRemoved: int = ...
    kRotateOrder: int = ...
    kRotateOrient: int = ...
    kRotateOrientX: int = ...
    kRotateOrientY: int = ...
    kRotateOrientZ: int = ...
    kRotatePivot: int = ...
    kRotatePivotTrans: int = ...
    kRotatePivotX: int = ...
    kRotatePivotY: int = ...
    kRotatePivotZ: int = ...
    kRotateTransX: int = ...
    kRotateTransY: int = ...
    kRotateTransZ: int = ...
    kRotateX: int = ...
    kRotateY: int = ...
    kRotateZ: int = ...
    kRotation: int = ...
    kScale: int = ...
    kScalePivot: int = ...
    kScalePivotTrans: int = ...
    kScalePivotX: int = ...
    kScalePivotY: int = ...
    kScalePivotZ: int = ...
    kScaleTransX: int = ...
    kScaleTransY: int = ...
    kScaleTransZ: int = ...
    kScaleX: int = ...
    kScaleY: int = ...
    kScaleZ: int = ...
    kShear: int = ...
    kShearXY: int = ...
    kShearXZ: int = ...
    kShearYZ: int = ...
    kTranslateX: int = ...
    kTranslateY: int = ...
    kTranslateZ: int = ...
    kTranslation: int = ...
    def nodeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registeringCallableScript(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCallableInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRegisteringCallableScript(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def stealCallableInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def stopRegisteringCallableScript(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MDagMessage_addAllDagChangesCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDagMessage_addAllDagChangesDagPathCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDagMessage_addChildAddedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDagMessage_addChildAddedDagPathCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDagMessage_addChildRemovedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDagMessage_addChildRemovedDagPathCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDagMessage_addChildReorderedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDagMessage_addChildReorderedDagPathCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDagMessage_addDagCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDagMessage_addDagDagPathCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDagMessage_addInstanceAddedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDagMessage_addInstanceAddedDagPathCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDagMessage_addInstanceRemovedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDagMessage_addInstanceRemovedDagPathCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDagMessage_addMatrixModifiedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDagMessage_addParentAddedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDagMessage_addParentAddedDagPathCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDagMessage_addParentRemovedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDagMessage_addParentRemovedDagPathCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDagMessage_addWorldMatrixModifiedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDagMessage_className(*args: Any, **kwargs: Any) -> Any: ...
class MDagModifier(MDGModifier):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExtensionAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def commandToExecute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connect(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteMetadata(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def disconnect(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doIt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def linkExtensionAttributeToPlugin(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def newPlugValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def newPlugValueBool(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def newPlugValueChar(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def newPlugValueDouble(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def newPlugValueFloat(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def newPlugValueInt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def newPlugValueInt64(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def newPlugValueMAngle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def newPlugValueMDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def newPlugValueMTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def newPlugValueShort(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def newPlugValueString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pythonCommandToExecute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeExtensionAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeExtensionAttributeIfUnset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeMultiInstance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def renameAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def renameNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reparentNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMetadata(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setNodeLockState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def undoIt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def unlinkExtensionAttributeFromPlugin(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MDagModifier_className(*args: Any, **kwargs: Any) -> Any: ...
class MDagPath(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    __hash__: NoneType = ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def apiType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def childCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def exclusiveMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def exclusiveMatrixInverse(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def extendToShape(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def extendToShapeDirectlyBelow(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fullPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAPathTo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllPathsBelow(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllPathsTo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDisplayStatus(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDrawOverrideInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasFn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inclusiveMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inclusiveMatrixInverse(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def instanceNumber(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanced(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTemplated(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isVisible(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def matchTransform(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def node(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numberOfShapesDirectlyBelow(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def partialPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pathCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pop(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def push(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transform(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MDagPathArray(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __getitem__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def append(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSizeIncrement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def sizeIncrement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MDagPathArray_className(*args: Any, **kwargs: Any) -> Any: ...
def MDagPath_className(*args: Any, **kwargs: Any) -> Any: ...
def MDagPath_getAPathTo(*args: Any, **kwargs: Any) -> Any: ...
def MDagPath_getAllPathsTo(*args: Any, **kwargs: Any) -> Any: ...
def MDagPath_matchTransform(*args: Any, **kwargs: Any) -> Any: ...
class MDataBlock(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def context(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inputArrayValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inputValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isClean(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def outputArrayValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def outputValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setClean(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MDataBlock_className(*args: Any, **kwargs: Any) -> Any: ...
class MDataHandle(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def acceptedTypeIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asAddr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asAngle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asBool(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asChar(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asDouble(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asDouble2(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asDouble3(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asDouble4(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asFalloffFunction(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asFloat(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asFloat2(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asFloat3(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asFloatMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asFloatVector(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asGenericBool(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asGenericChar(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asGenericDouble(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asGenericFloat(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asGenericInt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asGenericInt64(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asGenericShort(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asInt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asInt2(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asInt3(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asInt64(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asLong(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asLong2(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asLong3(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asMesh(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asMeshTransformed(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asNurbsCurve(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asNurbsCurveTransformed(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asNurbsSurface(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asNurbsSurfaceTransformed(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asPluginData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asShort(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asShort2(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asShort3(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asSubdSurface(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asSubdSurfaceTransformed(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asUChar(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asVector(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copyWritable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def data(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def datablock(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def geometryTransformMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isGeneric(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNumeric(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numericType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set2Double(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set2Float(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set2Int(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set2Short(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set3Double(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set3Float(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set3Int(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set3Short(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set4Double(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setBool(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setChar(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setClean(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDouble(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFloat(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setGenericBool(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setGenericChar(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setGenericDouble(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setGenericFloat(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setGenericInt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setGenericInt64(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setGenericShort(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInt64(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMAngle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMFloatMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMFloatVector(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMPxData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMVector(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setShort(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MDataHandle_className(*args: Any, **kwargs: Any) -> Any: ...
class MDistance(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def asCentimeters(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asFeet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asInches(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asKilometers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asMeters(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asMiles(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asMillimeters(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asUnits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asYards(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def internalToUI(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def internalUnit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kCentimeters: int = ...
    kFeet: int = ...
    kInches: int = ...
    kInvalid: int = ...
    kKilometers: int = ...
    kLast: int = ...
    kMeters: int = ...
    kMiles: int = ...
    kMillimeters: int = ...
    kYards: int = ...
    def setInternalUnit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUIUnit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUnit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def uiToInternal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uiUnit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def unit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MDistance_className(*args: Any, **kwargs: Any) -> Any: ...
def MDistance_internalToUI(*args: Any, **kwargs: Any) -> Any: ...
def MDistance_internalUnit(*args: Any, **kwargs: Any) -> Any: ...
def MDistance_setInternalUnit(*args: Any, **kwargs: Any) -> Any: ...
def MDistance_setUIUnit(*args: Any, **kwargs: Any) -> Any: ...
def MDistance_uiToInternal(*args: Any, **kwargs: Any) -> Any: ...
def MDistance_uiUnit(*args: Any, **kwargs: Any) -> Any: ...
class MDoubleArray(object):
    def __add__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    def __delitem__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __getitem__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    __hash__: NoneType = ...
    def __iadd__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __len__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __radd__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __setitem__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def append(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSizeIncrement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def sizeIncrement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MDoubleArray_className(*args: Any, **kwargs: Any) -> Any: ...
class MEdit(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def editType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasEditData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isApplied(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFailed(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTopLevel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAddRemoveAttrEdit: int = ...
    kConnectDisconnectEdit: int = ...
    kFcurveEdit: int = ...
    kNullEdit: int = ...
    kParentEdit: int = ...
    kSetAttrEdit: int = ...
    def matches(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setApplied(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFailed(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MEdit_className(*args: Any, **kwargs: Any) -> Any: ...
class MEulerRotation(object):
    def __add__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __getitem__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    __hash__: NoneType = ...
    def __iadd__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __imul__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __isub__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __mul__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __ne__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __neg__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __sub__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def alternateSolution(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asQuaternion(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asVector(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def bound(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def boundIt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def closestCut(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def closestSolution(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def decompose(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    identity: MEulerRotation = ...
    def incrementalRotateBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inverse(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def invertIt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isEquivalent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isZero(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kXYZ: int = ...
    kXZY: int = ...
    kYXZ: int = ...
    kYZX: int = ...
    kZXY: int = ...
    kZYX: int = ...
    order: property = ...
    def reorder(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderIt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setToAlternateSolution(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setToClosestCut(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setToClosestSolution(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    x: property = ...
    y: property = ...
    z: property = ...

def MEulerRotation_decompose(*args: Any, **kwargs: Any) -> Any: ...
class MEvaluationManager(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def evaluationInExecution(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def evaluationManagerActive(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def graphConstructionActive(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MEvaluationManager_className(*args: Any, **kwargs: Any) -> Any: ...
def MEvaluationManager_evaluationInExecution(*args: Any, **kwargs: Any) -> Any: ...
def MEvaluationManager_evaluationManagerActive(*args: Any, **kwargs: Any) -> Any: ...
def MEvaluationManager_graphConstructionActive(*args: Any, **kwargs: Any) -> Any: ...
class MEvaluationNode(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def child(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def childCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connect(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def datablock(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dependencyNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dirtyPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dirtyPlugExists(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def iterator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def skipEvaluation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def skippingEvaluation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MEvaluationNodeIterator(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDone(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def next(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def plug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MEvaluationNodeIterator_className(*args: Any, **kwargs: Any) -> Any: ...
def MEvaluationNode_className(*args: Any, **kwargs: Any) -> Any: ...
class MEventMessage(MMessage):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addEventCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentCallbackId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCallableInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getEventNames(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kDefaultAction: int = ...
    kDoAction: int = ...
    kDoNotDoAction: int = ...
    def nodeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registeringCallableScript(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCallableInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRegisteringCallableScript(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def stealCallableInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def stopRegisteringCallableScript(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MEventMessage_addEventCallback(*args: Any, **kwargs: Any) -> Any: ...
def MEventMessage_className(*args: Any, **kwargs: Any) -> Any: ...
def MEventMessage_getEventNames(*args: Any, **kwargs: Any) -> Any: ...
class MFcurveEdit(MEdit):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def editType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fcurve(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fcurveName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasEditData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isApplied(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFailed(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTopLevel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAddRemoveAttrEdit: int = ...
    kConnectDisconnectEdit: int = ...
    kFcurveEdit: int = ...
    kNullEdit: int = ...
    kParentEdit: int = ...
    kSetAttrEdit: int = ...
    def matches(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setApplied(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFailed(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MFcurveEdit_className(*args: Any, **kwargs: Any) -> Any: ...
class MFileIO(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def beforeExportFilename(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def beforeExportUserFileTranslator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def beforeImportFilename(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def beforeImportUserFileTranslator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def beforeOpenFilename(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def beforeOpenUserFileTranslator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def beforeReferenceFilename(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def beforeReferenceUserFileTranslator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def beforeSaveFilename(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def beforeSaveUserFileTranslator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cleanReference(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentlyReadingFileVersion(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def exportAll(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def exportAnim(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def exportAnimFromReference(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def exportAsReference(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def exportSelected(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def exportSelectedAnim(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def exportSelectedAnimFromReference(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def exportType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fileCurrentlyLoading(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fileType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getErrorStatus(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFileTypes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFiles(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getLastTempFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getReferenceConnectionsBroken(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getReferenceConnectionsMade(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getReferenceFileByNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getReferenceNodes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getReferences(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def importFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isImportingFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNewingFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isOpeningFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isReadingFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isReferencingFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isSavingReference(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isWritingFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kExportTypeAll: int = ...
    kExportTypeAnim: int = ...
    kExportTypeAnimFromReference: int = ...
    kExportTypeAsReference: int = ...
    kExportTypeEdits: int = ...
    kExportTypePrefObjects: int = ...
    kExportTypeSelected: int = ...
    kForceDeleteNamespaceContent: int = ...
    kLoadAllReferences: int = ...
    kLoadDefault: int = ...
    kLoadNoReferences: int = ...
    kMergeNamespaceWithParentNamespace: int = ...
    kMergeNamespaceWithRootNamespace: int = ...
    kRemoveNamespaceIfEmpty: int = ...
    kVersion2008: int = ...
    kVersion2009: int = ...
    kVersion2010: int = ...
    kVersion2011: int = ...
    kVersion2012: int = ...
    kVersion2013: int = ...
    kVersion2014: int = ...
    kVersion2015: int = ...
    kVersion2016: int = ...
    kVersion2016R2: int = ...
    kVersion2017: int = ...
    kVersion2017Update3: int = ...
    kVersion2017Update4: int = ...
    kVersion2018: int = ...
    kVersion2018Update2: int = ...
    kVersion2018Update3: int = ...
    kVersion2018Update4: int = ...
    kVersion2019: int = ...
    kVersion2020: int = ...
    kVersion2022: int = ...
    kVersion2023: int = ...
    kVersion4_0: int = ...
    kVersion4_5: int = ...
    kVersion5_0: int = ...
    kVersion6_0: int = ...
    kVersion6_5: int = ...
    kVersion7_0: int = ...
    kVersion8_0: int = ...
    kVersion8_5: int = ...
    def latestMayaFileVersion(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def loadReference(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def loadReferenceByNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def mustRenameToSave(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def mustRenameToSaveMsg(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def newFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def open(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reference(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeReference(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def resetError(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def save(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def saveAs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def saveReference(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCurrentFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setError(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMustRenameToSave(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMustRenameToSaveMsg(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def unloadReference(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def unloadReferenceByNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFileIO_beforeExportFilename(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_beforeExportUserFileTranslator(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_beforeImportFilename(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_beforeImportUserFileTranslator(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_beforeOpenFilename(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_beforeOpenUserFileTranslator(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_beforeReferenceFilename(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_beforeReferenceUserFileTranslator(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_beforeSaveFilename(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_beforeSaveUserFileTranslator(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_className(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_cleanReference(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_currentFile(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_currentlyReadingFileVersion(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_exportAll(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_exportAnim(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_exportAnimFromReference(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_exportAsReference(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_exportSelected(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_exportSelectedAnim(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_exportSelectedAnimFromReference(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_exportType(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_fileCurrentlyLoading(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_fileType(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_getErrorStatus(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_getFileTypes(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_getFiles(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_getLastTempFile(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_getReferenceConnectionsBroken(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_getReferenceConnectionsMade(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_getReferenceFileByNode(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_getReferenceNodes(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_getReferences(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_importFile(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_isImportingFile(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_isNewingFile(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_isOpeningFile(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_isReadingFile(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_isReferencingFile(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_isSavingReference(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_isWritingFile(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_latestMayaFileVersion(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_loadReference(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_loadReferenceByNode(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_mustRenameToSave(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_mustRenameToSaveMsg(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_newFile(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_open(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_reference(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_removeReference(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_resetError(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_save(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_saveAs(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_saveReference(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_setCurrentFile(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_setError(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_setMustRenameToSave(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_setMustRenameToSaveMsg(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_unloadReference(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_unloadReferenceByNode(*args: Any, **kwargs: Any) -> Any: ...
class MFileObject(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def exists(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def expandedFullName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def expandedPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fullName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getResolvedFullName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isAbsolutePath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def ithFullName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def ithPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kBaseName: int = ...
    kDirMap: int = ...
    kExact: int = ...
    kInputFile: int = ...
    kInputReference: int = ...
    kNone: int = ...
    kReferenceMappings: int = ...
    kRelative: int = ...
    kStrict: int = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def overrideResolvedFullName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def path(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pathCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rawFullName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rawName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rawPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rawURI(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def resolveMethod(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def resolvedFullName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def resolvedName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def resolvedPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFullName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRawFullName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRawName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRawPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRawURI(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setResolveMethod(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MFileObject_getResolvedFullName(*args: Any, **kwargs: Any) -> Any: ...
def MFileObject_isAbsolutePath(*args: Any, **kwargs: Any) -> Any: ...
class MFloatArray(object):
    def __add__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    def __delitem__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __getitem__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    __hash__: NoneType = ...
    def __iadd__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __len__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __radd__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __setitem__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def append(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSizeIncrement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def sizeIncrement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MFloatArray_className(*args: Any, **kwargs: Any) -> Any: ...
class MFloatMatrix(object):
    def __add__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __call__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __getitem__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    __hash__: NoneType = ...
    def __iadd__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __imul__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __isub__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __mul__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __ne__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __sub__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def adjoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def det3x3(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def det4x4(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def homogenize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inverse(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isEquivalent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    matrix: property = ...
    def setToIdentity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setToProduct(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transpose(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFloatMatrix_className(*args: Any, **kwargs: Any) -> Any: ...
MFloatMatrix_kTol: float
class MFloatPoint(object):
    def __add__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __call__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    def __div__(self: Self, args: Any) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __getitem__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    __hash__: NoneType = ...
    def __iadd__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __imul__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __isub__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __mul__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __ne__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __sub__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __truediv__(self: Self, args: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cartesianize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def distanceTo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def homogenize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isEquivalent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def origin(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rationalize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCast(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    w: property = ...
    x: property = ...
    y: property = ...
    z: property = ...

class MFloatPointArray(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __getitem__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def append(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSizeIncrement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def sizeIncrement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MFloatPointArray_className(*args: Any, **kwargs: Any) -> Any: ...
def MFloatPoint_className(*args: Any, **kwargs: Any) -> Any: ...
MFloatPoint_kTol: float
class MFloatVector(object):
    def __add__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __call__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    def __div__(self: Self, args: Any) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __getitem__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    __hash__: NoneType = ...
    def __iadd__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __idiv__(self: Self, args: Any) -> Any: ...
    def __imul__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __isub__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __itruediv__(self: Self, args: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __mul__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __ne__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __neg__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __sub__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __truediv__(self: Self, args: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def __xor__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def angle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isEquivalent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isParallel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def normal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def normalize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def one(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    x: property = ...
    def xAxis(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def xNegAxis(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    y: property = ...
    def yAxis(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def yNegAxis(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    z: property = ...
    def zAxis(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def zNegAxis(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def zero(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFloatVectorArray(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __getitem__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def append(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSizeIncrement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def sizeIncrement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MFloatVectorArray_className(*args: Any, **kwargs: Any) -> Any: ...
MFloatVector_kTol: float
class MFn(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    kAISEnvFacade: int = ...
    kAddDoubleLinear: int = ...
    kAdskMaterial: int = ...
    kAffect: int = ...
    kAimConstraint: int = ...
    kAimMatrix: int = ...
    kAir: int = ...
    kAlignCurve: int = ...
    kAlignManip: int = ...
    kAlignSurface: int = ...
    kAmbientLight: int = ...
    kAngle: int = ...
    kAngleBetween: int = ...
    kAnimBlend: int = ...
    kAnimBlendInOut: int = ...
    kAnimCurve: int = ...
    kAnimCurveTimeToAngular: int = ...
    kAnimCurveTimeToDistance: int = ...
    kAnimCurveTimeToTime: int = ...
    kAnimCurveTimeToUnitless: int = ...
    kAnimCurveUnitlessToAngular: int = ...
    kAnimCurveUnitlessToDistance: int = ...
    kAnimCurveUnitlessToTime: int = ...
    kAnimCurveUnitlessToUnitless: int = ...
    kAnimLayer: int = ...
    kAnisotropy: int = ...
    kAnnotation: int = ...
    kAnyGeometryVarGroup: int = ...
    kArcLength: int = ...
    kAreaLight: int = ...
    kArrayMapper: int = ...
    kArrowManip: int = ...
    kArubaTesselate: int = ...
    kAssembly: int = ...
    kAsset: int = ...
    kAttachCurve: int = ...
    kAttachSurface: int = ...
    kAttribute: int = ...
    kAttribute2Double: int = ...
    kAttribute2Float: int = ...
    kAttribute2Int: int = ...
    kAttribute2Long: int = ...
    kAttribute2Short: int = ...
    kAttribute3Double: int = ...
    kAttribute3Float: int = ...
    kAttribute3Int: int = ...
    kAttribute3Long: int = ...
    kAttribute3Short: int = ...
    kAttribute4Double: int = ...
    kAudio: int = ...
    kAverageCurveManip: int = ...
    kAvgCurves: int = ...
    kAvgNurbsSurfacePoints: int = ...
    kAvgSurfacePoints: int = ...
    kAxesActionManip: int = ...
    kBackground: int = ...
    kBallProjectionManip: int = ...
    kBarnDoorManip: int = ...
    kBase: int = ...
    kBaseLattice: int = ...
    kBendLattice: int = ...
    kBevel: int = ...
    kBevelManip: int = ...
    kBevelPlus: int = ...
    kBezierCurve: int = ...
    kBezierCurveData: int = ...
    kBezierCurveToNurbs: int = ...
    kBinaryData: int = ...
    kBirailSrf: int = ...
    kBlend: int = ...
    kBlendColorSet: int = ...
    kBlendColors: int = ...
    kBlendDevice: int = ...
    kBlendFalloff: int = ...
    kBlendManip: int = ...
    kBlendMatrix: int = ...
    kBlendNodeAdditiveRotation: int = ...
    kBlendNodeAdditiveScale: int = ...
    kBlendNodeBase: int = ...
    kBlendNodeBoolean: int = ...
    kBlendNodeDouble: int = ...
    kBlendNodeDoubleAngle: int = ...
    kBlendNodeDoubleLinear: int = ...
    kBlendNodeEnum: int = ...
    kBlendNodeFloat: int = ...
    kBlendNodeFloatAngle: int = ...
    kBlendNodeFloatLinear: int = ...
    kBlendNodeInt16: int = ...
    kBlendNodeInt32: int = ...
    kBlendNodeTime: int = ...
    kBlendShape: int = ...
    kBlendTwoAttr: int = ...
    kBlendWeighted: int = ...
    kBlindData: int = ...
    kBlindDataTemplate: int = ...
    kBlinn: int = ...
    kBlinnMaterial: int = ...
    kBoundary: int = ...
    kBox: int = ...
    kBoxData: int = ...
    kBrownian: int = ...
    kBrush: int = ...
    kBulge: int = ...
    kBulgeLattice: int = ...
    kBump: int = ...
    kBump3d: int = ...
    kButtonManip: int = ...
    kCacheBase: int = ...
    kCacheBlend: int = ...
    kCacheFile: int = ...
    kCacheTrack: int = ...
    kCacheableNode: int = ...
    kCaddyManipBase: int = ...
    kCamera: int = ...
    kCameraManip: int = ...
    kCameraPlaneManip: int = ...
    kCameraSet: int = ...
    kCameraView: int = ...
    kCenterManip: int = ...
    kChainToSpline: int = ...
    kCharacter: int = ...
    kCharacterMap: int = ...
    kCharacterMappingData: int = ...
    kCharacterOffset: int = ...
    kChecker: int = ...
    kChoice: int = ...
    kChooser: int = ...
    kCircle: int = ...
    kCircleManip: int = ...
    kCirclePointManip: int = ...
    kCircleSweepManip: int = ...
    kClampColor: int = ...
    kClientDevice: int = ...
    kClip: int = ...
    kClipGhostShape: int = ...
    kClipLibrary: int = ...
    kClipScheduler: int = ...
    kClipToGhostData: int = ...
    kCloseCurve: int = ...
    kCloseSurface: int = ...
    kClosestPointOnMesh: int = ...
    kClosestPointOnSurface: int = ...
    kCloth: int = ...
    kCloud: int = ...
    kCluster: int = ...
    kClusterFilter: int = ...
    kClusterFlexor: int = ...
    kCoiManip: int = ...
    kCollision: int = ...
    kColorBackground: int = ...
    kColorMgtGlobals: int = ...
    kColorProfile: int = ...
    kCombinationShape: int = ...
    kCommCornerManip: int = ...
    kCommCornerOperManip: int = ...
    kCommEdgeOperManip: int = ...
    kCommEdgePtManip: int = ...
    kCommEdgeSegmentManip: int = ...
    kComponent: int = ...
    kComponentFalloff: int = ...
    kComponentListData: int = ...
    kComponentManip: int = ...
    kComponentMatch: int = ...
    kComposeMatrix: int = ...
    kCompoundAttribute: int = ...
    kConcentricProjectionManip: int = ...
    kCondition: int = ...
    kCone: int = ...
    kConstraint: int = ...
    kContainer: int = ...
    kContainerBase: int = ...
    kContourProjectionManip: int = ...
    kContrast: int = ...
    kControl: int = ...
    kControllerTag: int = ...
    kCopyColorSet: int = ...
    kCopyUVSet: int = ...
    kCpManip: int = ...
    kCrater: int = ...
    kCreaseSet: int = ...
    kCreate: int = ...
    kCreateBPManip: int = ...
    kCreateBezierManip: int = ...
    kCreateCVManip: int = ...
    kCreateColorSet: int = ...
    kCreateEPManip: int = ...
    kCreateSectionManip: int = ...
    kCreateUVSet: int = ...
    kCrossSectionEditManip: int = ...
    kCrossSectionManager: int = ...
    kCubicProjectionManip: int = ...
    kCurve: int = ...
    kCurveCVComponent: int = ...
    kCurveCurveIntersect: int = ...
    kCurveEPComponent: int = ...
    kCurveEdManip: int = ...
    kCurveFromMeshCoM: int = ...
    kCurveFromMeshEdge: int = ...
    kCurveFromSubdivEdge: int = ...
    kCurveFromSubdivFace: int = ...
    kCurveFromSurface: int = ...
    kCurveFromSurfaceBnd: int = ...
    kCurveFromSurfaceCoS: int = ...
    kCurveFromSurfaceIso: int = ...
    kCurveInfo: int = ...
    kCurveKnotComponent: int = ...
    kCurveNormalizerAngle: int = ...
    kCurveNormalizerLinear: int = ...
    kCurveParamComponent: int = ...
    kCurveSegmentManip: int = ...
    kCurveVarGroup: int = ...
    kCustomEvaluatorClusterNode: int = ...
    kCylinder: int = ...
    kCylindricalProjectionManip: int = ...
    kDOF: int = ...
    kDPbirailSrf: int = ...
    kDagContainer: int = ...
    kDagNode: int = ...
    kDagPose: int = ...
    kDagSelectionItem: int = ...
    kData: int = ...
    kData2Double: int = ...
    kData2Float: int = ...
    kData2Int: int = ...
    kData2Long: int = ...
    kData2Short: int = ...
    kData3Double: int = ...
    kData3Float: int = ...
    kData3Int: int = ...
    kData3Long: int = ...
    kData3Short: int = ...
    kData4Double: int = ...
    kDblTrsManip: int = ...
    kDecayRegionCapComponent: int = ...
    kDecayRegionComponent: int = ...
    kDecomposeMatrix: int = ...
    kDefaultLightList: int = ...
    kDeformBend: int = ...
    kDeformBendManip: int = ...
    kDeformFlare: int = ...
    kDeformFlareManip: int = ...
    kDeformFunc: int = ...
    kDeformSine: int = ...
    kDeformSineManip: int = ...
    kDeformSquash: int = ...
    kDeformSquashManip: int = ...
    kDeformTwist: int = ...
    kDeformTwistManip: int = ...
    kDeformWave: int = ...
    kDeformWaveManip: int = ...
    kDeleteColorSet: int = ...
    kDeleteComponent: int = ...
    kDeleteUVSet: int = ...
    kDeltaMush: int = ...
    kDependencyNode: int = ...
    kDetachCurve: int = ...
    kDetachSurface: int = ...
    kDiffuseMaterial: int = ...
    kDimension: int = ...
    kDimensionManip: int = ...
    kDirectedDisc: int = ...
    kDirectionManip: int = ...
    kDirectionalLight: int = ...
    kDiscManip: int = ...
    kDiskCache: int = ...
    kDispatchCompute: int = ...
    kDisplacementShader: int = ...
    kDisplayLayer: int = ...
    kDisplayLayerManager: int = ...
    kDistance: int = ...
    kDistanceBetween: int = ...
    kDistanceManip: int = ...
    kDofManip: int = ...
    kDoubleAngleAttribute: int = ...
    kDoubleArrayData: int = ...
    kDoubleIndexedComponent: int = ...
    kDoubleLinearAttribute: int = ...
    kDoubleShadingSwitch: int = ...
    kDrag: int = ...
    kDropOffFunction: int = ...
    kDropoffLocator: int = ...
    kDropoffManip: int = ...
    kDummy: int = ...
    kDummyConnectable: int = ...
    kDynAirManip: int = ...
    kDynArrayAttrsData: int = ...
    kDynAttenuationManip: int = ...
    kDynBase: int = ...
    kDynBaseFieldManip: int = ...
    kDynEmitterManip: int = ...
    kDynFieldsManip: int = ...
    kDynGlobals: int = ...
    kDynNewtonManip: int = ...
    kDynParticleSetComponent: int = ...
    kDynSpreadManip: int = ...
    kDynSweptGeometryData: int = ...
    kDynTurbulenceManip: int = ...
    kDynamicConstraint: int = ...
    kDynamicsController: int = ...
    kEdgeComponent: int = ...
    kEditCurve: int = ...
    kEditCurveManip: int = ...
    kEditMetadata: int = ...
    kEditsManager: int = ...
    kEmitter: int = ...
    kEnableManip: int = ...
    kEnumAttribute: int = ...
    kEnvBall: int = ...
    kEnvChrome: int = ...
    kEnvCube: int = ...
    kEnvFacade: int = ...
    kEnvFogMaterial: int = ...
    kEnvFogShape: int = ...
    kEnvSky: int = ...
    kEnvSphere: int = ...
    kExplodeNurbsShell: int = ...
    kExpression: int = ...
    kExtendCurve: int = ...
    kExtendCurveDistanceManip: int = ...
    kExtendSurface: int = ...
    kExtendSurfaceDistanceManip: int = ...
    kExtract: int = ...
    kExtrude: int = ...
    kExtrudeManip: int = ...
    kFFD: int = ...
    kFFblendSrf: int = ...
    kFFfilletSrf: int = ...
    kFacade: int = ...
    kFalloffEval: int = ...
    kFfdDualBase: int = ...
    kField: int = ...
    kFileBackground: int = ...
    kFileTexture: int = ...
    kFilletCurve: int = ...
    kFilter: int = ...
    kFilterClosestSample: int = ...
    kFilterEuler: int = ...
    kFilterSimplify: int = ...
    kFitBspline: int = ...
    kFixedLineManip: int = ...
    kFlexor: int = ...
    kFloatAngleAttribute: int = ...
    kFloatArrayData: int = ...
    kFloatLinearAttribute: int = ...
    kFloatMatrixAttribute: int = ...
    kFloatVectorArrayData: int = ...
    kFlow: int = ...
    kFluid: int = ...
    kFluidData: int = ...
    kFluidEmitter: int = ...
    kFluidGeom: int = ...
    kFluidTexture2D: int = ...
    kFluidTexture3D: int = ...
    kFollicle: int = ...
    kForceUpdateManip: int = ...
    kFosterParent: int = ...
    kFourByFourMatrix: int = ...
    kFractal: int = ...
    kFreePointManip: int = ...
    kFreePointTriadManip: int = ...
    kGammaCorrect: int = ...
    kGenericAttribute: int = ...
    kGeoConnectable: int = ...
    kGeoConnector: int = ...
    kGeomBind: int = ...
    kGeometric: int = ...
    kGeometryConstraint: int = ...
    kGeometryData: int = ...
    kGeometryFilt: int = ...
    kGeometryOnLineManip: int = ...
    kGeometryVarGroup: int = ...
    kGlobalCacheControls: int = ...
    kGlobalStitch: int = ...
    kGranite: int = ...
    kGravity: int = ...
    kGreasePencilSequence: int = ...
    kGreasePlane: int = ...
    kGreasePlaneRenderShape: int = ...
    kGrid: int = ...
    kGroundPlane: int = ...
    kGroupId: int = ...
    kGroupParts: int = ...
    kGuide: int = ...
    kGuideLine: int = ...
    kHairConstraint: int = ...
    kHairSystem: int = ...
    kHairTubeShader: int = ...
    kHandleRotateManip: int = ...
    kHardenPointCurve: int = ...
    kHardwareReflectionMap: int = ...
    kHardwareRenderGlobals: int = ...
    kHardwareRenderingGlobals: int = ...
    kHeightField: int = ...
    kHikEffector: int = ...
    kHikFKJoint: int = ...
    kHikFloorContactMarker: int = ...
    kHikGroundPlane: int = ...
    kHikHandle: int = ...
    kHikIKEffector: int = ...
    kHikSolver: int = ...
    kHistorySwitch: int = ...
    kHsvToRgb: int = ...
    kHwShaderNode: int = ...
    kHyperGraphInfo: int = ...
    kHyperLayout: int = ...
    kHyperLayoutDG: int = ...
    kHyperView: int = ...
    kIkEffector: int = ...
    kIkHandle: int = ...
    kIkRPManip: int = ...
    kIkSolver: int = ...
    kIkSplineManip: int = ...
    kIkSystem: int = ...
    kIllustratorCurve: int = ...
    kImageAdd: int = ...
    kImageBlur: int = ...
    kImageColorCorrect: int = ...
    kImageData: int = ...
    kImageDepth: int = ...
    kImageDiff: int = ...
    kImageDisplay: int = ...
    kImageFilter: int = ...
    kImageLoad: int = ...
    kImageMotionBlur: int = ...
    kImageMultiply: int = ...
    kImageNetDest: int = ...
    kImageNetSrc: int = ...
    kImageOver: int = ...
    kImagePlane: int = ...
    kImageRender: int = ...
    kImageSave: int = ...
    kImageSource: int = ...
    kImageUnder: int = ...
    kImageView: int = ...
    kImplicitCone: int = ...
    kImplicitSphere: int = ...
    kInsertKnotCrv: int = ...
    kInsertKnotSrf: int = ...
    kInstancer: int = ...
    kInt64ArrayData: int = ...
    kIntArrayData: int = ...
    kIntersectSurface: int = ...
    kInvalid: int = ...
    kIsoparmComponent: int = ...
    kIsoparmManip: int = ...
    kItemList: int = ...
    kJiggleDeformer: int = ...
    kJoint: int = ...
    kJointCluster: int = ...
    kJointClusterManip: int = ...
    kJointTranslateManip: int = ...
    kKeyframeDelta: int = ...
    kKeyframeDeltaAddRemove: int = ...
    kKeyframeDeltaBlockAddRemove: int = ...
    kKeyframeDeltaBreakdown: int = ...
    kKeyframeDeltaInfType: int = ...
    kKeyframeDeltaMove: int = ...
    kKeyframeDeltaScale: int = ...
    kKeyframeDeltaTangent: int = ...
    kKeyframeDeltaWeighted: int = ...
    kKeyframeRegionManip: int = ...
    kKeyingGroup: int = ...
    kLambert: int = ...
    kLambertMaterial: int = ...
    kLast: int = ...
    kLattice: int = ...
    kLatticeComponent: int = ...
    kLatticeData: int = ...
    kLatticeGeom: int = ...
    kLayeredShader: int = ...
    kLayeredTexture: int = ...
    kLeastSquares: int = ...
    kLeather: int = ...
    kLight: int = ...
    kLightDataAttribute: int = ...
    kLightFogMaterial: int = ...
    kLightInfo: int = ...
    kLightLink: int = ...
    kLightList: int = ...
    kLightManip: int = ...
    kLightProjectionGeometry: int = ...
    kLightSource: int = ...
    kLightSourceMaterial: int = ...
    kLimitManip: int = ...
    kLineArrowManip: int = ...
    kLineManip: int = ...
    kLineModifier: int = ...
    kLinearLight: int = ...
    kLocator: int = ...
    kLodGroup: int = ...
    kLodThresholds: int = ...
    kLookAt: int = ...
    kLuminance: int = ...
    kMCsolver: int = ...
    kMPbirailSrf: int = ...
    kMakeGroup: int = ...
    kMandelbrot: int = ...
    kMandelbrot3D: int = ...
    kManip2DContainer: int = ...
    kManipContainer: int = ...
    kManipulator: int = ...
    kManipulator2D: int = ...
    kManipulator3D: int = ...
    kMarble: int = ...
    kMarker: int = ...
    kMarkerManip: int = ...
    kMaterial: int = ...
    kMaterialFacade: int = ...
    kMaterialInfo: int = ...
    kMaterialTemplate: int = ...
    kMatrixAdd: int = ...
    kMatrixArrayData: int = ...
    kMatrixAttribute: int = ...
    kMatrixData: int = ...
    kMatrixFloatData: int = ...
    kMatrixHold: int = ...
    kMatrixMult: int = ...
    kMatrixPass: int = ...
    kMatrixWtAdd: int = ...
    kMembrane: int = ...
    kMentalRayTexture: int = ...
    kMergeVertsToolManip: int = ...
    kMesh: int = ...
    kMeshComponent: int = ...
    kMeshData: int = ...
    kMeshEdgeComponent: int = ...
    kMeshFaceVertComponent: int = ...
    kMeshFrEdgeComponent: int = ...
    kMeshGeom: int = ...
    kMeshMapComponent: int = ...
    kMeshPolygonComponent: int = ...
    kMeshVarGroup: int = ...
    kMeshVertComponent: int = ...
    kMeshVtxFaceComponent: int = ...
    kMessageAttribute: int = ...
    kMidModifier: int = ...
    kMidModifierWithMatrix: int = ...
    kModel: int = ...
    kModifyEdgeBaseManip: int = ...
    kModifyEdgeCrvManip: int = ...
    kModifyEdgeManip: int = ...
    kMorph: int = ...
    kMotionPath: int = ...
    kMotionPathManip: int = ...
    kMountain: int = ...
    kMoveUVShellManip2D: int = ...
    kMoveVertexManip: int = ...
    kMultDoubleLinear: int = ...
    kMultiSubVertexComponent: int = ...
    kMultilisterLight: int = ...
    kMultiplyDivide: int = ...
    kMute: int = ...
    kNBase: int = ...
    kNCloth: int = ...
    kNComponent: int = ...
    kNId: int = ...
    kNIdData: int = ...
    kNLE: int = ...
    kNObject: int = ...
    kNObjectData: int = ...
    kNParticle: int = ...
    kNRigid: int = ...
    kNamedObject: int = ...
    kNearestPointOnCurve: int = ...
    kNewton: int = ...
    kNodeGraphEditorBookmarkInfo: int = ...
    kNodeGraphEditorBookmarks: int = ...
    kNodeGraphEditorInfo: int = ...
    kNoise: int = ...
    kNonAmbientLight: int = ...
    kNonDagSelectionItem: int = ...
    kNonExtendedLight: int = ...
    kNonLinear: int = ...
    kNormalConstraint: int = ...
    kNucleus: int = ...
    kNumericAttribute: int = ...
    kNumericData: int = ...
    kNurbsBoolean: int = ...
    kNurbsCircular2PtArc: int = ...
    kNurbsCircular3PtArc: int = ...
    kNurbsCube: int = ...
    kNurbsCurve: int = ...
    kNurbsCurveData: int = ...
    kNurbsCurveGeom: int = ...
    kNurbsCurveToBezier: int = ...
    kNurbsPlane: int = ...
    kNurbsSquare: int = ...
    kNurbsSurface: int = ...
    kNurbsSurfaceData: int = ...
    kNurbsSurfaceGeom: int = ...
    kNurbsTesselate: int = ...
    kNurbsToSubdiv: int = ...
    kObjectAttrFilter: int = ...
    kObjectBinFilter: int = ...
    kObjectFilter: int = ...
    kObjectMultiFilter: int = ...
    kObjectNameFilter: int = ...
    kObjectRenderFilter: int = ...
    kObjectScriptFilter: int = ...
    kObjectTypeFilter: int = ...
    kOcean: int = ...
    kOceanDeformer: int = ...
    kOceanShader: int = ...
    kOffsetCos: int = ...
    kOffsetCosManip: int = ...
    kOffsetCurve: int = ...
    kOffsetCurveManip: int = ...
    kOffsetSurface: int = ...
    kOffsetSurfaceManip: int = ...
    kOldGeometryConstraint: int = ...
    kOpticalFX: int = ...
    kOrientConstraint: int = ...
    kOrientationComponent: int = ...
    kOrientationLocator: int = ...
    kOrientationMarker: int = ...
    kOrthoGrid: int = ...
    kPASolver: int = ...
    kPairBlend: int = ...
    kParamDimension: int = ...
    kParentConstraint: int = ...
    kParticle: int = ...
    kParticleAgeMapper: int = ...
    kParticleCloud: int = ...
    kParticleColorMapper: int = ...
    kParticleIncandecenceMapper: int = ...
    kParticleSamplerInfo: int = ...
    kParticleTransparencyMapper: int = ...
    kPartition: int = ...
    kPassContributionMap: int = ...
    kPfxGeometry: int = ...
    kPfxHair: int = ...
    kPfxToon: int = ...
    kPhong: int = ...
    kPhongExplorer: int = ...
    kPhongMaterial: int = ...
    kPickMatrix: int = ...
    kPivotComponent: int = ...
    kPivotManip2D: int = ...
    kPlace2dTexture: int = ...
    kPlace3dTexture: int = ...
    kPlanarProjectionManip: int = ...
    kPlanarTrimSrf: int = ...
    kPlane: int = ...
    kPlugin: int = ...
    kPluginBlendShape: int = ...
    kPluginCameraSet: int = ...
    kPluginClientDevice: int = ...
    kPluginConstraintNode: int = ...
    kPluginData: int = ...
    kPluginDeformerNode: int = ...
    kPluginDependNode: int = ...
    kPluginEmitterNode: int = ...
    kPluginFieldNode: int = ...
    kPluginGeometryData: int = ...
    kPluginGeometryFilter: int = ...
    kPluginHardwareShader: int = ...
    kPluginHwShaderNode: int = ...
    kPluginIkSolver: int = ...
    kPluginImagePlaneNode: int = ...
    kPluginLocatorNode: int = ...
    kPluginManipContainer: int = ...
    kPluginManipulatorNode: int = ...
    kPluginMotionPathNode: int = ...
    kPluginObjectSet: int = ...
    kPluginParticleAttributeMapperNode: int = ...
    kPluginShape: int = ...
    kPluginSkinCluster: int = ...
    kPluginSpringNode: int = ...
    kPluginThreadedDevice: int = ...
    kPluginTransformNode: int = ...
    kPlusMinusAverage: int = ...
    kPointArrayData: int = ...
    kPointConstraint: int = ...
    kPointLight: int = ...
    kPointManip: int = ...
    kPointMatrixMult: int = ...
    kPointOnCurveInfo: int = ...
    kPointOnCurveManip: int = ...
    kPointOnLineManip: int = ...
    kPointOnPolyConstraint: int = ...
    kPointOnSurfaceInfo: int = ...
    kPointOnSurfaceManip: int = ...
    kPoleVectorConstraint: int = ...
    kPolyAppend: int = ...
    kPolyAppendVertex: int = ...
    kPolyArrow: int = ...
    kPolyAutoProj: int = ...
    kPolyAutoProjManip: int = ...
    kPolyAverageVertex: int = ...
    kPolyBevel: int = ...
    kPolyBevel2: int = ...
    kPolyBevel3: int = ...
    kPolyBlindData: int = ...
    kPolyBoolOp: int = ...
    kPolyBridgeEdge: int = ...
    kPolyCBoolOp: int = ...
    kPolyCaddyManip: int = ...
    kPolyChipOff: int = ...
    kPolyCircularize: int = ...
    kPolyClean: int = ...
    kPolyCloseBorder: int = ...
    kPolyCollapseEdge: int = ...
    kPolyCollapseF: int = ...
    kPolyColorDel: int = ...
    kPolyColorMod: int = ...
    kPolyColorPerVertex: int = ...
    kPolyComponentData: int = ...
    kPolyCone: int = ...
    kPolyConnectComponents: int = ...
    kPolyContourProj: int = ...
    kPolyCreaseEdge: int = ...
    kPolyCreateFacet: int = ...
    kPolyCreateToolManip: int = ...
    kPolyCreator: int = ...
    kPolyCube: int = ...
    kPolyCut: int = ...
    kPolyCutManip: int = ...
    kPolyCutManipContainer: int = ...
    kPolyCylProj: int = ...
    kPolyCylinder: int = ...
    kPolyDelEdge: int = ...
    kPolyDelFacet: int = ...
    kPolyDelVertex: int = ...
    kPolyDuplicateEdge: int = ...
    kPolyEdgeToCurve: int = ...
    kPolyEditEdgeFlow: int = ...
    kPolyExtrudeEdge: int = ...
    kPolyExtrudeFacet: int = ...
    kPolyExtrudeManip: int = ...
    kPolyExtrudeManipContainer: int = ...
    kPolyExtrudeVertex: int = ...
    kPolyFlipEdge: int = ...
    kPolyFlipUV: int = ...
    kPolyHelix: int = ...
    kPolyHoleFace: int = ...
    kPolyLayoutUV: int = ...
    kPolyMapCut: int = ...
    kPolyMapDel: int = ...
    kPolyMapSew: int = ...
    kPolyMapSewMove: int = ...
    kPolyMappingManip: int = ...
    kPolyMergeEdge: int = ...
    kPolyMergeFacet: int = ...
    kPolyMergeUV: int = ...
    kPolyMergeVert: int = ...
    kPolyMesh: int = ...
    kPolyMirror: int = ...
    kPolyMirrorManipContainer: int = ...
    kPolyModifierManip: int = ...
    kPolyModifierManipContainer: int = ...
    kPolyMoveEdge: int = ...
    kPolyMoveFacet: int = ...
    kPolyMoveFacetUV: int = ...
    kPolyMoveUV: int = ...
    kPolyMoveUVManip: int = ...
    kPolyMoveVertex: int = ...
    kPolyMoveVertexManip: int = ...
    kPolyMoveVertexUV: int = ...
    kPolyNormal: int = ...
    kPolyNormalPerVertex: int = ...
    kPolyNormalizeUV: int = ...
    kPolyPassThru: int = ...
    kPolyPinUV: int = ...
    kPolyPipe: int = ...
    kPolyPlanProj: int = ...
    kPolyPlatonicSolid: int = ...
    kPolyPoke: int = ...
    kPolyPokeManip: int = ...
    kPolyPrimitive: int = ...
    kPolyPrimitiveMisc: int = ...
    kPolyPrism: int = ...
    kPolyProj: int = ...
    kPolyProjectCurve: int = ...
    kPolyProjectionManip: int = ...
    kPolyPyramid: int = ...
    kPolyQuad: int = ...
    kPolyReduce: int = ...
    kPolyRemesh: int = ...
    kPolySelectEditFeedbackManip: int = ...
    kPolySeparate: int = ...
    kPolySewEdge: int = ...
    kPolySmooth: int = ...
    kPolySmoothFacet: int = ...
    kPolySmoothProxy: int = ...
    kPolySoftEdge: int = ...
    kPolySphProj: int = ...
    kPolySphere: int = ...
    kPolySpinEdge: int = ...
    kPolySplit: int = ...
    kPolySplitEdge: int = ...
    kPolySplitRing: int = ...
    kPolySplitToolManip: int = ...
    kPolySplitVert: int = ...
    kPolyStraightenUVBorder: int = ...
    kPolySubdEdge: int = ...
    kPolySubdFacet: int = ...
    kPolyToSubdiv: int = ...
    kPolyToolFeedbackManip: int = ...
    kPolyToolFeedbackShape: int = ...
    kPolyTorus: int = ...
    kPolyTransfer: int = ...
    kPolyTriangulate: int = ...
    kPolyTweak: int = ...
    kPolyTweakUV: int = ...
    kPolyUVRectangle: int = ...
    kPolyUnite: int = ...
    kPolyVertexNormalManip: int = ...
    kPolyWedgeFace: int = ...
    kPoseInterpolatorManager: int = ...
    kPositionMarker: int = ...
    kPostProcessList: int = ...
    kPrecompExport: int = ...
    kPrimitive: int = ...
    kPrimitiveFalloff: int = ...
    kProjectCurve: int = ...
    kProjectTangent: int = ...
    kProjectTangentManip: int = ...
    kProjection: int = ...
    kProjectionManip: int = ...
    kProjectionMultiManip: int = ...
    kProjectionUVManip: int = ...
    kPropModManip: int = ...
    kPropMoveTriadManip: int = ...
    kProximityFalloff: int = ...
    kProximityPin: int = ...
    kProximityWrap: int = ...
    kProxy: int = ...
    kProxyManager: int = ...
    kPsdFileTexture: int = ...
    kQuadPtOnLineManip: int = ...
    kQuadShadingSwitch: int = ...
    kRBFsurface: int = ...
    kRPsolver: int = ...
    kRadial: int = ...
    kRadius: int = ...
    kRamp: int = ...
    kRampBackground: int = ...
    kRampShader: int = ...
    kRbfSrfManip: int = ...
    kReForm: int = ...
    kRebuildCurve: int = ...
    kRebuildSurface: int = ...
    kRecord: int = ...
    kReference: int = ...
    kReflect: int = ...
    kRemapColor: int = ...
    kRemapHsv: int = ...
    kRemapValue: int = ...
    kRenderBox: int = ...
    kRenderCone: int = ...
    kRenderGlobals: int = ...
    kRenderGlobalsList: int = ...
    kRenderLayer: int = ...
    kRenderLayerManager: int = ...
    kRenderPass: int = ...
    kRenderPassSet: int = ...
    kRenderQuality: int = ...
    kRenderRect: int = ...
    kRenderSetup: int = ...
    kRenderSphere: int = ...
    kRenderTarget: int = ...
    kRenderUtilityList: int = ...
    kRenderedImageSource: int = ...
    kRenderingList: int = ...
    kReorderUVSet: int = ...
    kResolution: int = ...
    kResultCurve: int = ...
    kResultCurveTimeToAngular: int = ...
    kResultCurveTimeToDistance: int = ...
    kResultCurveTimeToTime: int = ...
    kResultCurveTimeToUnitless: int = ...
    kReverse: int = ...
    kReverseCrvManip: int = ...
    kReverseCurve: int = ...
    kReverseCurveManip: int = ...
    kReverseSurface: int = ...
    kReverseSurfaceManip: int = ...
    kRevolve: int = ...
    kRevolveManip: int = ...
    kRevolvedPrimitive: int = ...
    kRevolvedPrimitiveManip: int = ...
    kRgbToHsv: int = ...
    kRigid: int = ...
    kRigidConstraint: int = ...
    kRigidDeform: int = ...
    kRigidSolver: int = ...
    kRock: int = ...
    kRotateBoxManip: int = ...
    kRotateLimitsManip: int = ...
    kRotateManip: int = ...
    kRotateUVManip2D: int = ...
    kRoundConstantRadius: int = ...
    kRoundConstantRadiusManip: int = ...
    kRoundRadiusCrvManip: int = ...
    kRoundRadiusManip: int = ...
    kSCsolver: int = ...
    kSPbirailSrf: int = ...
    kSamplerInfo: int = ...
    kScaleConstraint: int = ...
    kScaleLimitsManip: int = ...
    kScaleManip: int = ...
    kScalePointManip: int = ...
    kScaleUVManip2D: int = ...
    kScalingBoxManip: int = ...
    kScreenAlignedCircleManip: int = ...
    kScript: int = ...
    kScriptManip: int = ...
    kSculpt: int = ...
    kSectionManip: int = ...
    kSelectionItem: int = ...
    kSelectionList: int = ...
    kSelectionListData: int = ...
    kSelectionListOperator: int = ...
    kSequenceManager: int = ...
    kSequencer: int = ...
    kSet: int = ...
    kSetGroupComponent: int = ...
    kSetRange: int = ...
    kSfRevolveManip: int = ...
    kShaderGlow: int = ...
    kShaderList: int = ...
    kShadingEngine: int = ...
    kShadingMap: int = ...
    kShape: int = ...
    kShapeEditorManager: int = ...
    kShapeFragment: int = ...
    kShot: int = ...
    kShrinkWrapFilter: int = ...
    kSimpleVolumeShader: int = ...
    kSingleIndexedComponent: int = ...
    kSingleShadingSwitch: int = ...
    kSketchPlane: int = ...
    kSkin: int = ...
    kSkinBinding: int = ...
    kSkinClusterFilter: int = ...
    kSkinShader: int = ...
    kSl60: int = ...
    kSmear: int = ...
    kSmoothCurve: int = ...
    kSmoothTangentSrf: int = ...
    kSnapUVManip2D: int = ...
    kSnapshot: int = ...
    kSnapshotPath: int = ...
    kSnapshotShape: int = ...
    kSnow: int = ...
    kSoftMod: int = ...
    kSoftModFilter: int = ...
    kSoftModManip: int = ...
    kSolidFractal: int = ...
    kSolidify: int = ...
    kSphere: int = ...
    kSphereData: int = ...
    kSphericalProjectionManip: int = ...
    kSplineSolver: int = ...
    kSpotCylinderManip: int = ...
    kSpotLight: int = ...
    kSpotManip: int = ...
    kSpring: int = ...
    kSprite: int = ...
    kSquareSrf: int = ...
    kSquareSrfManip: int = ...
    kStandardSurface: int = ...
    kStateManip: int = ...
    kStencil: int = ...
    kStereoCameraMaster: int = ...
    kStitchAsNurbsShell: int = ...
    kStitchSrf: int = ...
    kStitchSrfManip: int = ...
    kStoryBoard: int = ...
    kStringArrayData: int = ...
    kStringData: int = ...
    kStringShadingSwitch: int = ...
    kStroke: int = ...
    kStrokeGlobals: int = ...
    kStucco: int = ...
    kStudioClearCoat: int = ...
    kStyleCurve: int = ...
    kSubCurve: int = ...
    kSubSurface: int = ...
    kSubVertexComponent: int = ...
    kSubdAddTopology: int = ...
    kSubdAutoProj: int = ...
    kSubdBlindData: int = ...
    kSubdBoolean: int = ...
    kSubdCleanTopology: int = ...
    kSubdCloseBorder: int = ...
    kSubdDelFace: int = ...
    kSubdExtrudeFace: int = ...
    kSubdHierBlind: int = ...
    kSubdLayoutUV: int = ...
    kSubdMapCut: int = ...
    kSubdMapSewMove: int = ...
    kSubdMappingManip: int = ...
    kSubdMergeVert: int = ...
    kSubdModifier: int = ...
    kSubdModifyEdge: int = ...
    kSubdMoveEdge: int = ...
    kSubdMoveFace: int = ...
    kSubdMoveVertex: int = ...
    kSubdPlanProj: int = ...
    kSubdProjectionManip: int = ...
    kSubdSplitFace: int = ...
    kSubdSubdivideFace: int = ...
    kSubdTweak: int = ...
    kSubdTweakUV: int = ...
    kSubdiv: int = ...
    kSubdivCVComponent: int = ...
    kSubdivCollapse: int = ...
    kSubdivCompId: int = ...
    kSubdivData: int = ...
    kSubdivEdgeComponent: int = ...
    kSubdivFaceComponent: int = ...
    kSubdivGeom: int = ...
    kSubdivMapComponent: int = ...
    kSubdivReverseFaces: int = ...
    kSubdivSurfaceVarGroup: int = ...
    kSubdivToNurbs: int = ...
    kSubdivToPoly: int = ...
    kSubsetFalloff: int = ...
    kSummaryObject: int = ...
    kSuper: int = ...
    kSurface: int = ...
    kSurfaceCVComponent: int = ...
    kSurfaceEPComponent: int = ...
    kSurfaceEdManip: int = ...
    kSurfaceFaceComponent: int = ...
    kSurfaceInfo: int = ...
    kSurfaceKnotComponent: int = ...
    kSurfaceLuminance: int = ...
    kSurfaceRangeComponent: int = ...
    kSurfaceShader: int = ...
    kSurfaceVarGroup: int = ...
    kSymmetryConstraint: int = ...
    kSymmetryLocator: int = ...
    kSymmetryMapCurve: int = ...
    kSymmetryMapVector: int = ...
    kTangentConstraint: int = ...
    kTension: int = ...
    kTexLattice: int = ...
    kTexLatticeDeformManip: int = ...
    kTexSmoothManip: int = ...
    kTexSmudgeUVManip: int = ...
    kTextButtonManip: int = ...
    kTextCurves: int = ...
    kTextManip: int = ...
    kTexture2d: int = ...
    kTexture3d: int = ...
    kTextureBakeSet: int = ...
    kTextureDeformer: int = ...
    kTextureDeformerHandle: int = ...
    kTextureEnv: int = ...
    kTextureList: int = ...
    kTextureManip3D: int = ...
    kThreadedDevice: int = ...
    kThreePointArcManip: int = ...
    kTime: int = ...
    kTimeAttribute: int = ...
    kTimeEditor: int = ...
    kTimeEditorAnimSource: int = ...
    kTimeEditorClip: int = ...
    kTimeEditorClipBase: int = ...
    kTimeEditorClipEvaluator: int = ...
    kTimeEditorInterpolator: int = ...
    kTimeEditorTracks: int = ...
    kTimeFunction: int = ...
    kTimeToUnitConversion: int = ...
    kTimeWarp: int = ...
    kToggleManip: int = ...
    kToggleOnLineManip: int = ...
    kToolContext: int = ...
    kToonLineAttributes: int = ...
    kTorus: int = ...
    kTowPointManip: int = ...
    kTowPointOnCurveManip: int = ...
    kTowPointOnSurfaceManip: int = ...
    kTrackInfoManager: int = ...
    kTransferAttributes: int = ...
    kTransferFalloff: int = ...
    kTransform: int = ...
    kTransformBoxManip: int = ...
    kTransformGeometry: int = ...
    kTranslateBoxManip: int = ...
    kTranslateLimitsManip: int = ...
    kTranslateManip: int = ...
    kTranslateManip2D: int = ...
    kTranslateUVManip: int = ...
    kTranslateUVManip2D: int = ...
    kTriadManip: int = ...
    kTrim: int = ...
    kTrimLocator: int = ...
    kTrimManip: int = ...
    kTrimWithBoundaries: int = ...
    kTriplanarProjectionManip: int = ...
    kTripleIndexedComponent: int = ...
    kTripleShadingSwitch: int = ...
    kTrsInsertManip: int = ...
    kTrsManip: int = ...
    kTrsTransManip: int = ...
    kTrsXformManip: int = ...
    kTurbulence: int = ...
    kTweak: int = ...
    kTwoPointArcManip: int = ...
    kTxSl: int = ...
    kTypedAttribute: int = ...
    kUInt64ArrayData: int = ...
    kUVManip2D: int = ...
    kUVPin: int = ...
    kUfeProxyTransform: int = ...
    kUint64SingleIndexedComponent: int = ...
    kUintArrayData: int = ...
    kUnderWorld: int = ...
    kUniform: int = ...
    kUniformFalloff: int = ...
    kUnitAttribute: int = ...
    kUnitConversion: int = ...
    kUnitToTimeConversion: int = ...
    kUnknown: int = ...
    kUnknownDag: int = ...
    kUnknownTransform: int = ...
    kUntrim: int = ...
    kUnused1: int = ...
    kUnused2: int = ...
    kUnused3: int = ...
    kUnused4: int = ...
    kUnused5: int = ...
    kUnused6: int = ...
    kUseBackground: int = ...
    kUvChooser: int = ...
    kVectorArrayData: int = ...
    kVectorProduct: int = ...
    kVertexBakeSet: int = ...
    kVertexWeightSet: int = ...
    kViewColorManager: int = ...
    kViewManip: int = ...
    kVolumeAxis: int = ...
    kVolumeBindManip: int = ...
    kVolumeFog: int = ...
    kVolumeLight: int = ...
    kVolumeNoise: int = ...
    kVolumeShader: int = ...
    kVortex: int = ...
    kWater: int = ...
    kWeightFunctionData: int = ...
    kWeightGeometryFilt: int = ...
    kWire: int = ...
    kWood: int = ...
    kWorld: int = ...
    kWrapFilter: int = ...
    kWriteToColorBuffer: int = ...
    kWriteToDepthBuffer: int = ...
    kWriteToFrameBuffer: int = ...
    kWriteToLabelBuffer: int = ...
    kWriteToVectorBuffer: int = ...
    kXformManip: int = ...
    kXsectionSubdivEdit: int = ...
    nodeType: property = ...
    thisown: property = ...

class MFnAmbientLight(MFnLight):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def activeColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def ambientShade(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def boundingBox(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def castSoftShadows(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def centerOfIllumination(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def childCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def color(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagRoot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dormantColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsReference(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsTemplate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def duplicate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableDGTiming(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fullPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedByAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllPaths(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedSetsAndMembers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasParent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def icon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inModel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inUnderWorld(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def instanceCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def intensity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isChildOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDefaultNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFromReferencedFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanceable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanced(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstancedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isIntermediateObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isParentOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isShared(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNextPos: int = ...
    kNormalAttr: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    kUseDefaultColor: int = ...
    kUseIndexColor: int = ...
    kUseRGBColor: int = ...
    def lightAmbient(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def lightDiffuse(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def lightDirection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def lightIntensity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def lightSpecular(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def model(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numShadowSamples(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorRGB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def opticalFXvisibility(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def partialPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rayDepthLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChildAt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAmbientShade(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCastSoftShadows(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCenterOfIllumination(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIcon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInstanceable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIntensity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIntermediateObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setNumShadowSamples(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColorType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setOpticalFXvisibility(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRayDepthLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setShadowColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setShadowRadius(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseRayTraceShadows(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shadowColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shadowRadius(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transformationMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def useRayTraceShadows(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingHiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnAmbientLight_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnAnisotropyShader(MFnDependencyNode):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def anisotropicReflectivity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def correlationX(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def correlationY(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableDGTiming(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedByAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def icon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDefaultNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFromReferencedFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isShared(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNormalAttr: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def refractiveIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateAngle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def roughness(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAnisotropicReflectivity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCorrelationX(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCorrelationY(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIcon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRefractiveIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotateAngle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRoughness(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTangentUCamera(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTangentVCamera(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def tangentUCamera(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def tangentVCamera(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnAnisotropyShader_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnAreaLight(MFnNonExtendedLight):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def activeColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def boundingBox(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def castSoftShadows(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def centerOfIllumination(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def childCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def color(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagRoot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def decayRate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def depthMapBias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def depthMapFilterSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def depthMapFocus(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def depthMapResolution(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def depthMapWidthFocus(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dormantColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsReference(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsTemplate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def duplicate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableDGTiming(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fullPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedByAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllPaths(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedSetsAndMembers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasParent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def icon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inModel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inUnderWorld(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def instanceCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def intensity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isChildOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDefaultNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFromReferencedFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanceable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanced(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstancedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isIntermediateObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isParentOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isShared(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNextPos: int = ...
    kNormalAttr: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    kUseDefaultColor: int = ...
    kUseIndexColor: int = ...
    kUseRGBColor: int = ...
    def lightAmbient(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def lightDiffuse(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def lightDirection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def lightIntensity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def lightSpecular(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def model(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numShadowSamples(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorRGB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def opticalFXvisibility(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def partialPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rayDepthLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChildAt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCastSoftShadows(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCenterOfIllumination(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDecayRate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDepthMapBias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDepthMapFilterSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDepthMapFocus(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDepthMapResolution(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDepthMapWidthFocus(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIcon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInstanceable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIntensity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIntermediateObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setNumShadowSamples(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColorType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setOpticalFXvisibility(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRayDepthLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setShadowColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setShadowRadius(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseDepthMapAutoFocus(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseDepthMapShadows(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseRayTraceShadows(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shadowColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shadowRadius(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transformationMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def useDepthMapAutoFocus(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def useDepthMapShadows(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def useRayTraceShadows(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingHiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnAreaLight_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnArrayAttrsData(MFnData):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def checkArrayExist(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def count(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doubleArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDoubleData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getIntData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getStringData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getVectorData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def intArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAny: int = ...
    kComponentList: int = ...
    kDoubleArray: int = ...
    kDynArrayAttrs: int = ...
    kDynSweptGeometry: int = ...
    kFalloffFunction: int = ...
    kFloatArray: int = ...
    kIntArray: int = ...
    kInvalid: int = ...
    kLast: int = ...
    kLattice: int = ...
    kMatrix: int = ...
    kMatrixArray: int = ...
    kMesh: int = ...
    kNId: int = ...
    kNObject: int = ...
    kNumeric: int = ...
    kNurbsCurve: int = ...
    kNurbsSurface: int = ...
    kPlugin: int = ...
    kPluginGeometry: int = ...
    kPointArray: int = ...
    kSphere: int = ...
    kString: int = ...
    kStringArray: int = ...
    kSubdSurface: int = ...
    kVectorArray: int = ...
    def list(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def stringArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def vectorArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnArrayAttrsData_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnAssembly(MFnDagNode):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def activate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def activateNonRecursive(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def activeColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def boundingBox(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canActivate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canRepApplyEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def childCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createRepresentation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagRoot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteAllRepresentations(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteRepresentation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dormantColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsReference(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsTemplate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def duplicate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableDGTiming(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fullPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAbsoluteRepNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getActive(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedByAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllPaths(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedSetsAndMembers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInitialRep(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getParentAssembly(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getRepLabel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getRepNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getRepType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getRepresentations(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getSubAssemblies(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getTopLevelAssemblies(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def handlesAddEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasParent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def icon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def importFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inModel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inUnderWorld(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def instanceCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isActive(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isChildOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDefaultNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFromReferencedFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanceable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanced(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstancedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isIntermediateObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isParentOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isShared(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTopLevel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNextPos: int = ...
    kNormalAttr: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    kUseDefaultColor: int = ...
    kUseIndexColor: int = ...
    kUseRGBColor: int = ...
    def model(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorRGB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def partialPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postLoad(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChildAt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def repTypes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIcon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInstanceable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIntermediateObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColorType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRepLabel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRepName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def supportsEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def supportsMemberChanges(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transformationMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingHiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnAssembly_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnAssembly_getTopLevelAssemblies(*args: Any, **kwargs: Any) -> Any: ...
class MFnAttribute(MFnBase):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def accepts(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def acceptsAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addToCategory(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAppearance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def disconnectBehavior(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAddAttrCmd(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCategories(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasCategory(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def indexMatters(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def internal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isAffectsWorldSpace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isCached(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isChannelBoxFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isConnectable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDynamic(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isExtension(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isHidden(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isIndeterminant(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isKeyable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isProxyAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isReadable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isRenderSource(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isStorable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isUsedAsColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isUsedAsFilename(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isWorldSpace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isWritable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kDelete: int = ...
    kNothing: int = ...
    kReset: int = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeFromCategory(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAppearance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsWorldSpace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCached(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setChannelBox(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setConnectable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDisconnectBehavior(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setHidden(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIndeterminant(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIndexMatters(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setKeyable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setNiceNameOverride(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setProxyAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setReadable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRenderSource(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setStorable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUsedAsColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUsedAsFilename(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUsesArrayDataBuilder(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setWorldSpace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setWritable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shortName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usesArrayDataBuilder(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnAttribute_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnBase(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnBase_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnBase_isValid(*args: Any, **kwargs: Any) -> Any: ...
def MFnBase_typeString(*args: Any, **kwargs: Any) -> Any: ...
class MFnBlinnShader(MFnReflectShader):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def ambientColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def color(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def diffuseCoeff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def eccentricity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableDGTiming(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedByAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glowIntensity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hideSource(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def icon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def incandescence(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDefaultNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFromReferencedFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isShared(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNormalAttr: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reflectedColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reflectedRayDepthLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reflectivity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def refractedRayDepthLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def refractiveIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rtRefractedColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAmbientColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDiffuseCoeff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setEccentricity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setGlowIntensity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setHideSource(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIcon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIncandescence(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setReflectedColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setReflectedRayDepthLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setReflectivity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRefractedRayDepthLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRefractiveIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRtRefractedColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSpecularColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSpecularRollOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTranslucenceCoeff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTransparency(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def specularColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def specularRollOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def translucenceCoeff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def transparency(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnBlinnShader_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnCamera(MFnDagNode):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def activeColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def aspectRatio(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def boundingBox(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cameraScale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def centerOfInterest(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def centerOfInterestPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def childCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def computeDepthOfField(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copyViewFrom(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagRoot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dormantColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsReference(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsTemplate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def duplicate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableDGTiming(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def eyePoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fStop(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def farClippingPlane(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def farFocusDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def filmFit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def filmFitOffset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def filmRollOrder(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def filmRollValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def filmTranslateH(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def filmTranslateV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def focalLength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def focusDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fullPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedByAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllPaths(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAspectRatioLimits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedSetsAndMembers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFilmApertureLimits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFilmFrustum(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFocalLengthLimits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPortFieldOfView(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getRenderingFrustum(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getViewParameters(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getViewingFrustum(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasParent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasSamePerspective(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def horizontalFieldOfView(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def horizontalFilmAperture(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def horizontalFilmOffset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def horizontalPan(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def horizontalRollPivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def horizontalShake(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def icon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inModel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inUnderWorld(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def instanceCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isChildOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isClippingPlanes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDefaultNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDepthOfField(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDisplayFilmGate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDisplayGateMask(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFromReferencedFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanceable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanced(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstancedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isIntermediateObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isMotionBlur(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isOrtho(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isParentOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isShared(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isVerticalLock(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kExtensionAttr: int = ...
    kFillFilmFit: int = ...
    kHorizontalFilmFit: int = ...
    kInvalid: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNextPos: int = ...
    kNormalAttr: int = ...
    kOverscanFilmFit: int = ...
    kRotateTranslate: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    kTranslateRotate: int = ...
    kUseDefaultColor: int = ...
    kUseIndexColor: int = ...
    kUseRGBColor: int = ...
    kVerticalFilmFit: int = ...
    def lensSqueezeRatio(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def model(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def nearClippingPlane(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def nearFocusDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorRGB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def orthoWidth(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def overscan(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def panZoomEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def partialPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postProjectionMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postScale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def preScale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def projectionMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChildAt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def renderPanZoom(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rightDirection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAspectRatio(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCameraScale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCenterOfInterest(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCenterOfInterestPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setClippingPlanes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDepthOfField(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDisplayFilmGate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDisplayGateMask(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setEyePoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFStop(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFarClippingPlane(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFarFocusDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFilmFit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFilmFitOffset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFilmRollOrder(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFilmRollValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFilmTranslateH(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFilmTranslateV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFocalLength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFocusDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setHorizontalFieldOfView(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setHorizontalFilmAperture(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setHorizontalFilmOffset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setHorizontalPan(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setHorizontalRollPivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setHorizontalShake(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIcon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInstanceable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIntermediateObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIsOrtho(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLensSqueezeRatio(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMotionBlur(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setNearClippingPlane(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setNearFarClippingPlanes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setNearFocusDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColorType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setOrthoWidth(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setOverscan(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPanZoomEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPostScale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPreScale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRenderPanZoom(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setShakeEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setShakeOverscan(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setShakeOverscanEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setShutterAngle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setStereoHIT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setStereoHITEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTumblePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUsePivotAsLocalSpace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setVerticalFieldOfView(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setVerticalFilmAperture(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setVerticalFilmOffset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setVerticalLock(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setVerticalPan(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setVerticalRollPivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setVerticalShake(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setZoom(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shakeEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shakeOverscan(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shakeOverscanEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shutterAngle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def stereoHIT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def stereoHITEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transformationMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def tumblePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def unnormalizedFarClippingPlane(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def unnormalizedNearClippingPlane(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def upDirection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usePivotAsLocalSpace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingHiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def verticalFieldOfView(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def verticalFilmAperture(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def verticalFilmOffset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def verticalPan(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def verticalRollPivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def verticalShake(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def viewDirection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def zoom(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFnCameraSet(MFnDependencyNode):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def appendLayer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteLayer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableDGTiming(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedByAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getLayerCamera(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getLayerClearDepthValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getLayerOrder(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getLayerSceneData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getNumLayers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getSortedIndices(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def icon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def insertLayer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDefaultNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFromReferencedFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLayerActive(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isShared(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNormalAttr: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIcon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLayerActive(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLayerCamera(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLayerClearDepthValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLayerOrder(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLayerSceneData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnCameraSet_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnCamera_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnComponent(MFnBase):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def componentType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def elementCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasWeights(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isComplete(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isEmpty(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isEqual(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setComplete(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setWeight(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setWeights(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def weight(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFnComponentListData(MFnData):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __getitem__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def add(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def has(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAny: int = ...
    kComponentList: int = ...
    kDoubleArray: int = ...
    kDynArrayAttrs: int = ...
    kDynSweptGeometry: int = ...
    kFalloffFunction: int = ...
    kFloatArray: int = ...
    kIntArray: int = ...
    kInvalid: int = ...
    kLast: int = ...
    kLattice: int = ...
    kMatrix: int = ...
    kMatrixArray: int = ...
    kMesh: int = ...
    kNId: int = ...
    kNObject: int = ...
    kNumeric: int = ...
    kNurbsCurve: int = ...
    kNurbsSurface: int = ...
    kPlugin: int = ...
    kPluginGeometry: int = ...
    kPointArray: int = ...
    kSphere: int = ...
    kString: int = ...
    kStringArray: int = ...
    kSubdSurface: int = ...
    kVectorArray: int = ...
    def length(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnComponentListData_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnComponent_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnCompoundAttribute(MFnAttribute):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def accepts(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def acceptsAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addToCategory(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAppearance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def disconnectBehavior(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAddAttrCmd(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAddAttrCmds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCategories(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasCategory(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def indexMatters(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def internal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isAffectsWorldSpace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isCached(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isChannelBoxFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isConnectable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDynamic(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isExtension(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isHidden(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isIndeterminant(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isKeyable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isProxyAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isReadable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isRenderSource(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isStorable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isUsedAsColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isUsedAsFilename(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isWorldSpace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isWritable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kDelete: int = ...
    kNothing: int = ...
    kReset: int = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numChildren(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeFromCategory(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAppearance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsWorldSpace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCached(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setChannelBox(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setConnectable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDisconnectBehavior(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setHidden(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIndeterminant(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIndexMatters(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setKeyable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setNiceNameOverride(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setProxyAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setReadable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRenderSource(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setStorable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUsedAsColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUsedAsFilename(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUsesArrayDataBuilder(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setWorldSpace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setWritable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shortName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usesArrayDataBuilder(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnCompoundAttribute_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnContainerNode(MFnDependencyNode):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableDGTiming(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedByAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCurrentAsMObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getMembers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getParentContainer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPublishedNames(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPublishedNodes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPublishedPlugs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getRootTransform(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getSubcontainers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def icon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isCurrent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDefaultNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFromReferencedFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isShared(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kChildAnchor: int = ...
    kExtensionAttr: int = ...
    kGeneric: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNormalAttr: int = ...
    kParentAnchor: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    def makeCurrent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIcon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnContainerNode_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnContainerNode_getCurrentAsMObject(*args: Any, **kwargs: Any) -> Any: ...
class MFnDagNode(MFnDependencyNode):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def activeColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def boundingBox(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def childCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagRoot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dormantColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsReference(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsTemplate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def duplicate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableDGTiming(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fullPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedByAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllPaths(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedSetsAndMembers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasParent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def icon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inModel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inUnderWorld(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def instanceCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isChildOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDefaultNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFromReferencedFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanceable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanced(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstancedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isIntermediateObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isParentOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isShared(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNextPos: int = ...
    kNormalAttr: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    kUseDefaultColor: int = ...
    kUseIndexColor: int = ...
    kUseRGBColor: int = ...
    def model(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorRGB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def partialPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChildAt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIcon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInstanceable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIntermediateObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColorType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transformationMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingHiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnDagNode_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnData(MFnBase):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAny: int = ...
    kComponentList: int = ...
    kDoubleArray: int = ...
    kDynArrayAttrs: int = ...
    kDynSweptGeometry: int = ...
    kFalloffFunction: int = ...
    kFloatArray: int = ...
    kIntArray: int = ...
    kInvalid: int = ...
    kLast: int = ...
    kLattice: int = ...
    kMatrix: int = ...
    kMatrixArray: int = ...
    kMesh: int = ...
    kNId: int = ...
    kNObject: int = ...
    kNumeric: int = ...
    kNurbsCurve: int = ...
    kNurbsSurface: int = ...
    kPlugin: int = ...
    kPluginGeometry: int = ...
    kPointArray: int = ...
    kSphere: int = ...
    kString: int = ...
    kStringArray: int = ...
    kSubdSurface: int = ...
    kVectorArray: int = ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnData_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnDependencyNode(MFnBase):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableDGTiming(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedByAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def icon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDefaultNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFromReferencedFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isShared(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNormalAttr: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIcon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnDependencyNode_allocateFlag(*args: Any, **kwargs: Any) -> Any: ...
def MFnDependencyNode_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnDependencyNode_classification(*args: Any, **kwargs: Any) -> Any: ...
def MFnDependencyNode_deallocateAllFlags(*args: Any, **kwargs: Any) -> Any: ...
def MFnDependencyNode_deallocateFlag(*args: Any, **kwargs: Any) -> Any: ...
def MFnDependencyNode_enableDGTiming(*args: Any, **kwargs: Any) -> Any: ...
class MFnDirectionalLight(MFnNonExtendedLight):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def activeColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def boundingBox(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def castSoftShadows(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def centerOfIllumination(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def childCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def color(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagRoot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def decayRate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def depthMapBias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def depthMapFilterSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def depthMapFocus(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def depthMapResolution(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def depthMapWidthFocus(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dormantColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsReference(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsTemplate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def duplicate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableDGTiming(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fullPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedByAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllPaths(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedSetsAndMembers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasParent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def icon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inModel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inUnderWorld(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def instanceCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def intensity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isChildOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDefaultNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFromReferencedFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanceable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanced(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstancedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isIntermediateObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isParentOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isShared(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNextPos: int = ...
    kNormalAttr: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    kUseDefaultColor: int = ...
    kUseIndexColor: int = ...
    kUseRGBColor: int = ...
    def lightAmbient(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def lightDiffuse(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def lightDirection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def lightIntensity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def lightSpecular(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def model(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numShadowSamples(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorRGB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def opticalFXvisibility(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def partialPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rayDepthLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChildAt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCastSoftShadows(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCenterOfIllumination(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDecayRate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDepthMapBias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDepthMapFilterSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDepthMapFocus(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDepthMapResolution(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDepthMapWidthFocus(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIcon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInstanceable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIntensity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIntermediateObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setNumShadowSamples(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColorType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setOpticalFXvisibility(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRayDepthLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setShadowAngle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setShadowColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setShadowRadius(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseDepthMapAutoFocus(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseDepthMapShadows(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseLightPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseRayTraceShadows(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shadowAngle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shadowColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shadowRadius(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transformationMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def useDepthMapAutoFocus(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def useDepthMapShadows(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def useLightPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def useRayTraceShadows(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingHiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnDirectionalLight_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnDoubleArrayData(MFnData):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __getitem__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def array(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copyTo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAny: int = ...
    kComponentList: int = ...
    kDoubleArray: int = ...
    kDynArrayAttrs: int = ...
    kDynSweptGeometry: int = ...
    kFalloffFunction: int = ...
    kFloatArray: int = ...
    kIntArray: int = ...
    kInvalid: int = ...
    kLast: int = ...
    kLattice: int = ...
    kMatrix: int = ...
    kMatrixArray: int = ...
    kMesh: int = ...
    kNId: int = ...
    kNObject: int = ...
    kNumeric: int = ...
    kNurbsCurve: int = ...
    kNurbsSurface: int = ...
    kPlugin: int = ...
    kPluginGeometry: int = ...
    kPointArray: int = ...
    kSphere: int = ...
    kString: int = ...
    kStringArray: int = ...
    kSubdSurface: int = ...
    kVectorArray: int = ...
    def length(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnDoubleArrayData_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnDoubleIndexedComponent(MFnComponent):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addElement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addElements(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def componentType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def elementCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCompleteData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getElement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getElements(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasWeights(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isComplete(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isEmpty(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isEqual(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setComplete(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCompleteData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setWeight(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setWeights(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def weight(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnDoubleIndexedComponent_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnEnumAttribute(MFnAttribute):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def accepts(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def acceptsAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addField(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addToCategory(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAppearance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def defaultValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def disconnectBehavior(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fieldIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fieldName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAddAttrCmd(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCategories(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDefault(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getMax(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getMin(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasCategory(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def indexMatters(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def internal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isAffectsWorldSpace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isCached(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isChannelBoxFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isConnectable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDynamic(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isExtension(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isHidden(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isIndeterminant(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isKeyable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isProxyAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isReadable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isRenderSource(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isStorable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isUsedAsColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isUsedAsFilename(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isWorldSpace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isWritable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kDelete: int = ...
    kNothing: int = ...
    kReset: int = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeFromCategory(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAppearance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsWorldSpace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCached(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setChannelBox(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setConnectable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDefault(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDisconnectBehavior(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setHidden(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIndeterminant(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIndexMatters(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setKeyable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setNiceNameOverride(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setProxyAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setReadable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRenderSource(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setStorable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUsedAsColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUsedAsFilename(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUsesArrayDataBuilder(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setWorldSpace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setWritable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shortName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usesArrayDataBuilder(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnEnumAttribute_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnExpression(MFnDependencyNode):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableDGTiming(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def evaluate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def expression(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedByAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDefaultObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def icon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isAnimated(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDefaultNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFromReferencedFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isShared(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAll: int = ...
    kAngularOnly: int = ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNone: int = ...
    kNormalAttr: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAnimated(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDefaultObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExpression(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIcon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUnitConversion(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def unitConversion(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnExpression_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnFloatArrayData(MFnData):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __getitem__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def array(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copyTo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAny: int = ...
    kComponentList: int = ...
    kDoubleArray: int = ...
    kDynArrayAttrs: int = ...
    kDynSweptGeometry: int = ...
    kFalloffFunction: int = ...
    kFloatArray: int = ...
    kIntArray: int = ...
    kInvalid: int = ...
    kLast: int = ...
    kLattice: int = ...
    kMatrix: int = ...
    kMatrixArray: int = ...
    kMesh: int = ...
    kNId: int = ...
    kNObject: int = ...
    kNumeric: int = ...
    kNurbsCurve: int = ...
    kNurbsSurface: int = ...
    kPlugin: int = ...
    kPluginGeometry: int = ...
    kPointArray: int = ...
    kSphere: int = ...
    kString: int = ...
    kStringArray: int = ...
    kSubdSurface: int = ...
    kVectorArray: int = ...
    def length(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnFloatArrayData_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnGenericAttribute(MFnAttribute):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def accepts(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def acceptsAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAccept(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addDataAccept(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addNumericDataAccept(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addToCategory(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAppearance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def disconnectBehavior(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAddAttrCmd(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCategories(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasCategory(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def indexMatters(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def internal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isAffectsWorldSpace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isCached(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isChannelBoxFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isConnectable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDynamic(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isExtension(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isHidden(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isIndeterminant(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isKeyable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isProxyAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isReadable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isRenderSource(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isStorable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isUsedAsColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isUsedAsFilename(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isWorldSpace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isWritable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kDelete: int = ...
    kNothing: int = ...
    kReset: int = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAccept(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeDataAccept(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeFromCategory(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeNumericDataAccept(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAppearance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsWorldSpace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCached(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setChannelBox(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setConnectable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDisconnectBehavior(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setHidden(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIndeterminant(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIndexMatters(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setKeyable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setNiceNameOverride(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setProxyAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setReadable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRenderSource(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setStorable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUsedAsColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUsedAsFilename(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUsesArrayDataBuilder(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setWorldSpace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setWritable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shortName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usesArrayDataBuilder(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnGenericAttribute_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnGeometryData(MFnData):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addComponentTag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addObjectGroup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addObjectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def changeObjectGroupId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def componentTagCategory(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def componentTagContents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def componentTagExpressionSubsetState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def componentTagType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def componentTags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copyObjectGroups(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasComponentTag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObjectGroup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAny: int = ...
    kAuto: int = ...
    kCompleteGroup: int = ...
    kComponentList: int = ...
    kDoubleArray: int = ...
    kDynArrayAttrs: int = ...
    kDynSweptGeometry: int = ...
    kEdges: int = ...
    kEmptyGroup: int = ...
    kFaces: int = ...
    kFalloffFunction: int = ...
    kFloatArray: int = ...
    kIntArray: int = ...
    kInvalid: int = ...
    kInvalidGroup: int = ...
    kLast: int = ...
    kLattice: int = ...
    kMatrix: int = ...
    kMatrixArray: int = ...
    kMesh: int = ...
    kNId: int = ...
    kNObject: int = ...
    kNull: int = ...
    kNumeric: int = ...
    kNurbsCurve: int = ...
    kNurbsSurface: int = ...
    kPartialGroup: int = ...
    kPlugin: int = ...
    kPluginGeometry: int = ...
    kPointArray: int = ...
    kSphere: int = ...
    kString: int = ...
    kStringArray: int = ...
    kSubdSurface: int = ...
    kUnsupported: int = ...
    kVectorArray: int = ...
    kVerts: int = ...
    def matrixIsIdentity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def matrixIsNotIdentity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupSubsetState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeComponentTag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeObjectGroup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeObjectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def renameComponentTag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def resolveComponentTagExpression(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setComponentTagContents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnGeometryData_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnIntArrayData(MFnData):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __getitem__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def array(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copyTo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAny: int = ...
    kComponentList: int = ...
    kDoubleArray: int = ...
    kDynArrayAttrs: int = ...
    kDynSweptGeometry: int = ...
    kFalloffFunction: int = ...
    kFloatArray: int = ...
    kIntArray: int = ...
    kInvalid: int = ...
    kLast: int = ...
    kLattice: int = ...
    kMatrix: int = ...
    kMatrixArray: int = ...
    kMesh: int = ...
    kNId: int = ...
    kNObject: int = ...
    kNumeric: int = ...
    kNurbsCurve: int = ...
    kNurbsSurface: int = ...
    kPlugin: int = ...
    kPluginGeometry: int = ...
    kPointArray: int = ...
    kSphere: int = ...
    kString: int = ...
    kStringArray: int = ...
    kSubdSurface: int = ...
    kVectorArray: int = ...
    def length(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnIntArrayData_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnLambertShader(MFnDependencyNode):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def ambientColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def color(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def diffuseCoeff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableDGTiming(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedByAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glowIntensity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hideSource(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def icon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def incandescence(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDefaultNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFromReferencedFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isShared(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNormalAttr: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def refractedRayDepthLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def refractiveIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rtRefractedColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAmbientColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDiffuseCoeff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setGlowIntensity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setHideSource(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIcon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIncandescence(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRefractedRayDepthLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRefractiveIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRtRefractedColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTranslucenceCoeff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTransparency(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def translucenceCoeff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def transparency(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnLambertShader_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnLatticeData(MFnGeometryData):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addComponentTag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addObjectGroup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addObjectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def changeObjectGroupId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def componentTagCategory(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def componentTagContents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def componentTagExpressionSubsetState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def componentTagType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def componentTags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copyObjectGroups(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasComponentTag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObjectGroup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAny: int = ...
    kAuto: int = ...
    kCompleteGroup: int = ...
    kComponentList: int = ...
    kDoubleArray: int = ...
    kDynArrayAttrs: int = ...
    kDynSweptGeometry: int = ...
    kEdges: int = ...
    kEmptyGroup: int = ...
    kFaces: int = ...
    kFalloffFunction: int = ...
    kFloatArray: int = ...
    kIntArray: int = ...
    kInvalid: int = ...
    kInvalidGroup: int = ...
    kLast: int = ...
    kLattice: int = ...
    kMatrix: int = ...
    kMatrixArray: int = ...
    kMesh: int = ...
    kNId: int = ...
    kNObject: int = ...
    kNull: int = ...
    kNumeric: int = ...
    kNurbsCurve: int = ...
    kNurbsSurface: int = ...
    kPartialGroup: int = ...
    kPlugin: int = ...
    kPluginGeometry: int = ...
    kPointArray: int = ...
    kSphere: int = ...
    kString: int = ...
    kStringArray: int = ...
    kSubdSurface: int = ...
    kUnsupported: int = ...
    kVectorArray: int = ...
    kVerts: int = ...
    def lattice(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def matrixIsIdentity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def matrixIsNotIdentity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupSubsetState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeComponentTag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeObjectGroup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeObjectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def renameComponentTag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def resolveComponentTagExpression(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setComponentTagContents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnLatticeData_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnLayeredShader(MFnDependencyNode):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def color(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def compositingFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableDGTiming(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedByAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glowColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hardwareColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hardwareShader(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def icon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDefaultNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFromReferencedFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isShared(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNormalAttr: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCompositingFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setGlowColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setHardwareColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setHardwareShader(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIcon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTransparency(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transparency(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnLayeredShader_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnLight(MFnDagNode):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def activeColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def boundingBox(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def centerOfIllumination(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def childCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def color(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagRoot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dormantColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsReference(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsTemplate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def duplicate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableDGTiming(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fullPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedByAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllPaths(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedSetsAndMembers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasParent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def icon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inModel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inUnderWorld(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def instanceCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def intensity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isChildOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDefaultNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFromReferencedFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanceable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanced(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstancedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isIntermediateObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isParentOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isShared(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNextPos: int = ...
    kNormalAttr: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    kUseDefaultColor: int = ...
    kUseIndexColor: int = ...
    kUseRGBColor: int = ...
    def lightAmbient(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def lightDiffuse(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def lightDirection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def lightIntensity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def lightSpecular(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def model(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numShadowSamples(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorRGB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def opticalFXvisibility(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def partialPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rayDepthLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChildAt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCenterOfIllumination(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIcon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInstanceable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIntensity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIntermediateObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setNumShadowSamples(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColorType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setOpticalFXvisibility(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRayDepthLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setShadowColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseRayTraceShadows(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shadowColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transformationMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def useRayTraceShadows(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingHiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFnLightDataAttribute(MFnAttribute):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def accepts(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def acceptsAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addToCategory(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAppearance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def disconnectBehavior(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAddAttrCmd(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCategories(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDefault(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasCategory(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def indexMatters(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def internal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isAffectsWorldSpace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isCached(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isChannelBoxFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isConnectable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDynamic(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isExtension(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isHidden(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isIndeterminant(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isKeyable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isProxyAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isReadable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isRenderSource(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isStorable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isUsedAsColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isUsedAsFilename(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isWorldSpace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isWritable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kDelete: int = ...
    kNothing: int = ...
    kReset: int = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeFromCategory(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAppearance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsWorldSpace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCached(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setChannelBox(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setConnectable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDefault(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDisconnectBehavior(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setHidden(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIndeterminant(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIndexMatters(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setKeyable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setNiceNameOverride(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setProxyAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setReadable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRenderSource(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setStorable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUsedAsColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUsedAsFilename(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUsesArrayDataBuilder(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setWorldSpace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setWritable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shortName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usesArrayDataBuilder(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnLightDataAttribute_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnLight_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnMatrixArrayData(MFnData):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def array(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copyTo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAny: int = ...
    kComponentList: int = ...
    kDoubleArray: int = ...
    kDynArrayAttrs: int = ...
    kDynSweptGeometry: int = ...
    kFalloffFunction: int = ...
    kFloatArray: int = ...
    kIntArray: int = ...
    kInvalid: int = ...
    kLast: int = ...
    kLattice: int = ...
    kMatrix: int = ...
    kMatrixArray: int = ...
    kMesh: int = ...
    kNId: int = ...
    kNObject: int = ...
    kNumeric: int = ...
    kNurbsCurve: int = ...
    kNurbsSurface: int = ...
    kPlugin: int = ...
    kPluginGeometry: int = ...
    kPointArray: int = ...
    kSphere: int = ...
    kString: int = ...
    kStringArray: int = ...
    kSubdSurface: int = ...
    kVectorArray: int = ...
    def length(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnMatrixArrayData_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnMatrixAttribute(MFnAttribute):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def accepts(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def acceptsAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addToCategory(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAppearance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def disconnectBehavior(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAddAttrCmd(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCategories(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDefault(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasCategory(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def indexMatters(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def internal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isAffectsWorldSpace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isCached(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isChannelBoxFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isConnectable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDynamic(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isExtension(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isHidden(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isIndeterminant(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isKeyable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isProxyAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isReadable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isRenderSource(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isStorable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isUsedAsColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isUsedAsFilename(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isWorldSpace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isWritable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kDelete: int = ...
    kDouble: int = ...
    kFloat: int = ...
    kNothing: int = ...
    kReset: int = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeFromCategory(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAppearance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsWorldSpace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCached(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setChannelBox(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setConnectable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDefault(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDisconnectBehavior(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setHidden(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIndeterminant(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIndexMatters(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setKeyable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setNiceNameOverride(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setProxyAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setReadable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRenderSource(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setStorable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUsedAsColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUsedAsFilename(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUsesArrayDataBuilder(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setWorldSpace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setWritable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shortName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usesArrayDataBuilder(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnMatrixAttribute_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnMatrixData(MFnData):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTransformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAny: int = ...
    kComponentList: int = ...
    kDoubleArray: int = ...
    kDynArrayAttrs: int = ...
    kDynSweptGeometry: int = ...
    kFalloffFunction: int = ...
    kFloatArray: int = ...
    kIntArray: int = ...
    kInvalid: int = ...
    kLast: int = ...
    kLattice: int = ...
    kMatrix: int = ...
    kMatrixArray: int = ...
    kMesh: int = ...
    kNId: int = ...
    kNObject: int = ...
    kNumeric: int = ...
    kNurbsCurve: int = ...
    kNurbsSurface: int = ...
    kPlugin: int = ...
    kPluginGeometry: int = ...
    kPointArray: int = ...
    kSphere: int = ...
    kString: int = ...
    kStringArray: int = ...
    kSubdSurface: int = ...
    kVectorArray: int = ...
    def matrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnMatrixData_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnMesh(MFnDagNode):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def activeColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addHoles(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addPolygon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allIntersections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def anyIntersection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def assignColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def assignColors(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def assignUV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def assignUVs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def autoUniformGridParams(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def binaryBlindDataComponentId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def booleanOp(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def booleanOps(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def boundingBox(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cachedIntersectionAcceleratorInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def childCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cleanupEdgeSmoothing(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clearBlindData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clearColors(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clearGlobalIntersectionAcceleratorInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clearUVs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def closestIntersection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def collapseEdges(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def collapseFaces(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def componentTypeFromName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def componentTypeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copyInPlace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copyUVSetWithName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createBlindDataType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createColorSetDataMesh(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createColorSetWithName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createColorSetWithNameDataMesh(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createInPlace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createUVSetDataMeshWithName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createUVSetWithName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentColorSetName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentUVSetName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagRoot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteColorSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteEdge(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteFace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteUVSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteVertex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def displayColors(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dormantColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsReference(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsTemplate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def duplicate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def duplicateFaces(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def edgeBorderInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableDGTiming(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def extractFaces(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def extrudeEdges(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def extrudeFaces(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def freeCachedIntersectionAccelerator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fullPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def generateSmoothMesh(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedByAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllPaths(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAssignedUVs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAssociatedColorSetInstances(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAssociatedUVSetInstances(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAssociatedUVSetTextures(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAxisAtPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getBinaryBlindData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getBinormals(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getBlindDataAttrNames(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getBlindDataFaceVertexIndices(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getBlindDataTypes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getBoolBlindData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCheckSamePointTwice(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getClosestNormal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getClosestPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getClosestPointAndNormal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getClosestUVs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getColorIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getColorRepresentation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getColorSetFamilyNames(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getColorSetNames(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getColorSetsInFamily(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getColors(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedSetsAndMembers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedShaders(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCreaseEdges(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCreaseVertices(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDoubleBlindData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getEdgeVertices(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFaceNormalIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFaceUVSetNames(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFaceVertexBinormal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFaceVertexBinormals(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFaceVertexBlindDataIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFaceVertexColorIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFaceVertexColors(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFaceVertexNormal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFaceVertexNormals(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFaceVertexTangent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFaceVertexTangents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFloatBlindData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getHoles(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getIntBlindData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInvisibleFaces(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getMeshShellsIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getNormalIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getNormals(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPinUVs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPointAtUV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPoints(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPointsAtUV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPolygonNormal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPolygonTriangleVertices(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPolygonUV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPolygonUVid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPolygonVertices(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getRawDoublePoints(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getRawNormals(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getRawPoints(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getRawUVs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getSmoothMeshDisplayOptions(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getStringBlindData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getTangentId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getTangents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getTriangleOffsets(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getTriangles(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getUV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getUVAtPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getUVBorderEdges(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getUVSetFamilyNames(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getUVSetNames(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getUVSetsInFamily(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getUVs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getUvShellsIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getVertexColors(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getVertexNormal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getVertexNormals(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getVertices(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def globalIntersectionAcceleratorsInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAlphaChannels(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasBlindData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasBlindDataComponentId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasColorChannels(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasParent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def icon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inModel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inUnderWorld(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def instanceCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def intersect(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def intersectFaceAtUV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isBlindDataTypeUsed(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isChildOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isColorClamped(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isColorSetPerInstance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDefaultNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isEdgeSmooth(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFromReferencedFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanceable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanced(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstancedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isIntermediateObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNormalLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isParentOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isPolygonConvex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isPolygonUVReversed(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isRightHandedTangent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isShared(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isUVSetPerInstance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAlpha: int = ...
    kDifference: int = ...
    kEdgeClassification: int = ...
    kExtensionAttr: int = ...
    kGeomBorder: int = ...
    kInternalPoint: int = ...
    kIntersection: int = ...
    kInvalid: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNextPos: int = ...
    kNormalAttr: int = ...
    kNormalClassification: int = ...
    kOnEdge: int = ...
    kRGB: int = ...
    kRGBA: int = ...
    kSharedUV: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    kUVBorder: int = ...
    kUnion: int = ...
    kUnsharedUV: int = ...
    kUseDefaultColor: int = ...
    kUseIndexColor: int = ...
    kUseRGBColor: int = ...
    def lockFaceVertexNormals(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def lockVertexNormals(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def model(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numColorSets(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numColors(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numEdges(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numFaceVertices(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numNormals(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numPolygons(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numUVSets(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numUVs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numVertices(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorRGB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def onBoundary(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def partialPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def polyTriangulate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def polygonVertexCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChildAt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeFaceColors(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeFaceVertexColors(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeVertexColors(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def renameUVSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setBinaryBlindData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setBoolBlindData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCheckSamePointTwice(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setColors(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCreaseEdges(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCreaseVertices(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCurrentColorSetName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCurrentUVSetName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDisplayColors(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoubleBlindData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setEdgeSmoothing(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setEdgeSmoothings(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFaceColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFaceColors(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFaceVertexColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFaceVertexColors(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFaceVertexNormal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFaceVertexNormals(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFloatBlindData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIcon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInstanceable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIntBlindData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIntermediateObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInvisibleFaces(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIsColorClamped(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setNormals(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColorType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPinUVs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPoints(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSmoothMeshDisplayOptions(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSomeColors(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSomeUVs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setStringBlindData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUVs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setVertexColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setVertexColors(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setVertexNormal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setVertexNormals(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def sortIntersectionFaceTriIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def split(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def stringBlindDataComponentId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def subdivideEdges(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def subdivideFaces(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def syncObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transformationMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uniformGridParams(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def unlockFaceVertexNormals(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def unlockVertexNormals(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def updateSurface(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingHiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFnMeshData(MFnGeometryData):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addComponentTag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addObjectGroup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addObjectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def changeObjectGroupId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def componentTagCategory(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def componentTagContents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def componentTagExpressionSubsetState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def componentTagType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def componentTags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copyObjectGroups(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasComponentTag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObjectGroup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAny: int = ...
    kAuto: int = ...
    kCompleteGroup: int = ...
    kComponentList: int = ...
    kDoubleArray: int = ...
    kDynArrayAttrs: int = ...
    kDynSweptGeometry: int = ...
    kEdges: int = ...
    kEmptyGroup: int = ...
    kFaces: int = ...
    kFalloffFunction: int = ...
    kFloatArray: int = ...
    kIntArray: int = ...
    kInvalid: int = ...
    kInvalidGroup: int = ...
    kLast: int = ...
    kLattice: int = ...
    kMatrix: int = ...
    kMatrixArray: int = ...
    kMesh: int = ...
    kNId: int = ...
    kNObject: int = ...
    kNull: int = ...
    kNumeric: int = ...
    kNurbsCurve: int = ...
    kNurbsSurface: int = ...
    kPartialGroup: int = ...
    kPlugin: int = ...
    kPluginGeometry: int = ...
    kPointArray: int = ...
    kSphere: int = ...
    kString: int = ...
    kStringArray: int = ...
    kSubdSurface: int = ...
    kUnsupported: int = ...
    kVectorArray: int = ...
    kVerts: int = ...
    def matrixIsIdentity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def matrixIsNotIdentity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupSubsetState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeComponentTag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeObjectGroup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeObjectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def renameComponentTag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def resolveComponentTagExpression(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setComponentTagContents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnMeshData_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnMesh_autoUniformGridParams(*args: Any, **kwargs: Any) -> Any: ...
def MFnMesh_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnMesh_clearGlobalIntersectionAcceleratorInfo(*args: Any, **kwargs: Any) -> Any: ...
def MFnMesh_componentTypeFromName(*args: Any, **kwargs: Any) -> Any: ...
def MFnMesh_componentTypeName(*args: Any, **kwargs: Any) -> Any: ...
def MFnMesh_globalIntersectionAcceleratorsInfo(*args: Any, **kwargs: Any) -> Any: ...
def MFnMesh_polyTriangulate(*args: Any, **kwargs: Any) -> Any: ...
def MFnMesh_uniformGridParams(*args: Any, **kwargs: Any) -> Any: ...
class MFnMessageAttribute(MFnAttribute):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def accepts(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def acceptsAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addToCategory(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAppearance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def disconnectBehavior(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAddAttrCmd(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCategories(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasCategory(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def indexMatters(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def internal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isAffectsWorldSpace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isCached(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isChannelBoxFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isConnectable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDynamic(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isExtension(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isHidden(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isIndeterminant(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isKeyable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isProxyAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isReadable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isRenderSource(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isStorable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isUsedAsColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isUsedAsFilename(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isWorldSpace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isWritable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kDelete: int = ...
    kNothing: int = ...
    kReset: int = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeFromCategory(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAppearance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsWorldSpace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCached(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setChannelBox(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setConnectable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDisconnectBehavior(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setHidden(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIndeterminant(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIndexMatters(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setKeyable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setNiceNameOverride(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setProxyAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setReadable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRenderSource(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setStorable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUsedAsColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUsedAsFilename(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUsesArrayDataBuilder(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setWorldSpace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setWritable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shortName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usesArrayDataBuilder(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnMessageAttribute_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnNonAmbientLight(MFnLight):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def activeColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def boundingBox(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def centerOfIllumination(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def childCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def color(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagRoot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def decayRate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dormantColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsReference(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsTemplate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def duplicate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableDGTiming(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fullPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedByAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllPaths(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedSetsAndMembers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasParent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def icon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inModel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inUnderWorld(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def instanceCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def intensity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isChildOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDefaultNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFromReferencedFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanceable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanced(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstancedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isIntermediateObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isParentOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isShared(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNextPos: int = ...
    kNormalAttr: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    kUseDefaultColor: int = ...
    kUseIndexColor: int = ...
    kUseRGBColor: int = ...
    def lightAmbient(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def lightDiffuse(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def lightDirection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def lightIntensity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def lightSpecular(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def model(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numShadowSamples(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorRGB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def opticalFXvisibility(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def partialPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rayDepthLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChildAt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCenterOfIllumination(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDecayRate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIcon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInstanceable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIntensity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIntermediateObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setNumShadowSamples(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColorType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setOpticalFXvisibility(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRayDepthLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setShadowColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseRayTraceShadows(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shadowColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transformationMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def useRayTraceShadows(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingHiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnNonAmbientLight_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnNonExtendedLight(MFnNonAmbientLight):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def activeColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def boundingBox(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def castSoftShadows(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def centerOfIllumination(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def childCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def color(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagRoot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def decayRate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def depthMapBias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def depthMapFilterSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def depthMapFocus(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def depthMapResolution(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def depthMapWidthFocus(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dormantColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsReference(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsTemplate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def duplicate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableDGTiming(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fullPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedByAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllPaths(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedSetsAndMembers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasParent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def icon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inModel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inUnderWorld(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def instanceCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def intensity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isChildOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDefaultNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFromReferencedFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanceable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanced(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstancedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isIntermediateObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isParentOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isShared(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNextPos: int = ...
    kNormalAttr: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    kUseDefaultColor: int = ...
    kUseIndexColor: int = ...
    kUseRGBColor: int = ...
    def lightAmbient(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def lightDiffuse(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def lightDirection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def lightIntensity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def lightSpecular(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def model(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numShadowSamples(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorRGB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def opticalFXvisibility(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def partialPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rayDepthLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChildAt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCastSoftShadows(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCenterOfIllumination(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDecayRate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDepthMapBias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDepthMapFilterSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDepthMapFocus(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDepthMapResolution(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDepthMapWidthFocus(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIcon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInstanceable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIntensity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIntermediateObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setNumShadowSamples(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColorType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setOpticalFXvisibility(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRayDepthLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setShadowColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setShadowRadius(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseDepthMapAutoFocus(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseDepthMapShadows(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseRayTraceShadows(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shadowColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shadowRadius(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transformationMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def useDepthMapAutoFocus(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def useDepthMapShadows(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def useRayTraceShadows(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingHiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnNonExtendedLight_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnNumericAttribute(MFnAttribute):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def accepts(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def acceptsAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addToCategory(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAppearance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createAddr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def disconnectBehavior(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAddAttrCmd(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCategories(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDefault(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getMax(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getMin(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getSoftMax(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getSoftMin(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasCategory(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasMax(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasMin(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasSoftMax(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasSoftMin(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def indexMatters(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def internal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isAffectsWorldSpace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isCached(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isChannelBoxFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isConnectable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDynamic(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isExtension(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isHidden(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isIndeterminant(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isKeyable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isProxyAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isReadable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isRenderSource(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isStorable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isUsedAsColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isUsedAsFilename(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isWorldSpace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isWritable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kDelete: int = ...
    kNothing: int = ...
    kReset: int = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeFromCategory(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAppearance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsWorldSpace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCached(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setChannelBox(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setConnectable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDefault(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDisconnectBehavior(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setHidden(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIndeterminant(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIndexMatters(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setKeyable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMax(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMin(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setNiceNameOverride(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setProxyAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setReadable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRenderSource(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSoftMax(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSoftMin(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setStorable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUsedAsColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUsedAsFilename(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUsesArrayDataBuilder(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setWorldSpace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setWritable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shortName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def unitType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usesArrayDataBuilder(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnNumericAttribute_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnNumericData(MFnData):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getData2Double(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getData2Float(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getData2Int(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getData2Short(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getData3Double(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getData3Float(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getData3Int(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getData3Short(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getData4Double(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    k2Double: int = ...
    k2Float: int = ...
    k2Int: int = ...
    k2Long: int = ...
    k2Short: int = ...
    k3Double: int = ...
    k3Float: int = ...
    k3Int: int = ...
    k3Long: int = ...
    k3Short: int = ...
    k4Double: int = ...
    kAddr: int = ...
    kAny: int = ...
    kBoolean: int = ...
    kByte: int = ...
    kChar: int = ...
    kComponentList: int = ...
    kDouble: int = ...
    kDoubleArray: int = ...
    kDynArrayAttrs: int = ...
    kDynSweptGeometry: int = ...
    kFalloffFunction: int = ...
    kFloat: int = ...
    kFloatArray: int = ...
    kInt: int = ...
    kInt64: int = ...
    kIntArray: int = ...
    kInvalid: int = ...
    kLast: int = ...
    kLattice: int = ...
    kLong: int = ...
    kMatrix: int = ...
    kMatrixArray: int = ...
    kMesh: int = ...
    kNId: int = ...
    kNObject: int = ...
    kNumeric: int = ...
    kNurbsCurve: int = ...
    kNurbsSurface: int = ...
    kPlugin: int = ...
    kPluginGeometry: int = ...
    kPointArray: int = ...
    kShort: int = ...
    kSphere: int = ...
    kString: int = ...
    kStringArray: int = ...
    kSubdSurface: int = ...
    kVectorArray: int = ...
    def numericType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setData2Double(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setData2Float(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setData2Int(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setData2Short(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setData3Double(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setData3Float(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setData3Int(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setData3Short(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setData4Double(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnNumericData_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnNurbsCurve(MFnDagNode):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def activeColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def area(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def boundingBox(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def childCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def closestPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createWithEditPoints(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cvs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagRoot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def degree(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def distanceToPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dormantColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsReference(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsTemplate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def duplicate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableDGTiming(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findLengthFromParam(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findParamFromLength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def form(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fullPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedByAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllPaths(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCVs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedSetsAndMembers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDerivativesAtParm(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getKnotDomain(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getKnots(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getParamAtPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPointAtParam(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasHistoryOnCreate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasParent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def icon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inModel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inUnderWorld(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def instanceCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isChildOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDefaultNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFromReferencedFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanceable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanced(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstancedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isIntermediateObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isParamOnCurve(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isParentOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isPlanar(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isPointOnCurve(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isShared(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kClosed: int = ...
    kExtensionAttr: int = ...
    kInvalid: int = ...
    kInvalidAttr: int = ...
    kLast: int = ...
    kLocalDynamicAttr: int = ...
    kNextPos: int = ...
    kNormalAttr: int = ...
    kOpen: int = ...
    kPeriodic: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    kUseDefaultColor: int = ...
    kUseIndexColor: int = ...
    kUseRGBColor: int = ...
    def knot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def makeMultipleEndKnots(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def model(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def normal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numCVs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numKnots(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numSpans(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorRGB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def partialPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rebuild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChildAt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeKnot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reverse(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCVs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIcon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInstanceable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIntermediateObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setKnot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setKnots(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColorType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def tangent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transformationMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def updateCurve(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingHiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFnNurbsCurveData(MFnGeometryData):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addComponentTag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addObjectGroup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addObjectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def changeObjectGroupId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def componentTagCategory(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def componentTagContents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def componentTagExpressionSubsetState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def componentTagType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def componentTags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copyObjectGroups(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasComponentTag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObjectGroup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAny: int = ...
    kAuto: int = ...
    kCompleteGroup: int = ...
    kComponentList: int = ...
    kDoubleArray: int = ...
    kDynArrayAttrs: int = ...
    kDynSweptGeometry: int = ...
    kEdges: int = ...
    kEmptyGroup: int = ...
    kFaces: int = ...
    kFalloffFunction: int = ...
    kFloatArray: int = ...
    kIntArray: int = ...
    kInvalid: int = ...
    kInvalidGroup: int = ...
    kLast: int = ...
    kLattice: int = ...
    kMatrix: int = ...
    kMatrixArray: int = ...
    kMesh: int = ...
    kNId: int = ...
    kNObject: int = ...
    kNull: int = ...
    kNumeric: int = ...
    kNurbsCurve: int = ...
    kNurbsSurface: int = ...
    kPartialGroup: int = ...
    kPlugin: int = ...
    kPluginGeometry: int = ...
    kPointArray: int = ...
    kSphere: int = ...
    kString: int = ...
    kStringArray: int = ...
    kSubdSurface: int = ...
    kUnsupported: int = ...
    kVectorArray: int = ...
    kVerts: int = ...
    def matrixIsIdentity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def matrixIsNotIdentity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupSubsetState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeComponentTag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeObjectGroup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeObjectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def renameComponentTag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def resolveComponentTagExpression(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setComponentTagContents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnNurbsCurveData_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnNurbsCurve_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnNurbsSurface(MFnDagNode):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def activeColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def area(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def assignUV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def assignUVs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def boundaryType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def boundingBox(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def childCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clearUVs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def closestPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cvsInU(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cvsInV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagRoot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def degreeU(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def degreeV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def distanceToPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dormantColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsReference(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsTemplate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def duplicate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def edge(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableDGTiming(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def formInU(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def formInV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fullPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedByAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllPaths(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAssignedUVs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCVs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedSetsAndMembers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedShaders(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDataObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDerivativesAtParm(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getKnotDomain(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getKnotsInU(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getKnotsInV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getParamAtPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPatchUV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPatchUVid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPatchUVs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPointAtParam(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getTangents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getTrimBoundaries(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getUV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getUVs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasHistoryOnCreate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasParent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def icon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inModel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inUnderWorld(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def instanceCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def intersect(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isBezier(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isChildOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDefaultNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlipNorm(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFoldedOnBispan(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFromReferencedFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanceable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanced(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstancedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isIntermediateObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isKnotU(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isKnotV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isParamOnSurface(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isParentOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isPointInTrimmedRegion(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isPointOnSurface(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isShared(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrimmedSurface(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isUniform(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kClosed: int = ...
    kClosedSegment: int = ...
    kExtensionAttr: int = ...
    kInner: int = ...
    kInvalid: int = ...
    kInvalidAttr: int = ...
    kInvalidBoundary: int = ...
    kLast: int = ...
    kLocalDynamicAttr: int = ...
    kNextPos: int = ...
    kNormalAttr: int = ...
    kOpen: int = ...
    kOuter: int = ...
    kPeriodic: int = ...
    kSegment: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    kUseDefaultColor: int = ...
    kUseIndexColor: int = ...
    kUseRGBColor: int = ...
    def knotInU(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def knotInV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def model(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def normal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numBoundaries(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numCVsInU(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numCVsInV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numEdges(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numKnotsInU(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numKnotsInV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numNonZeroSpansInU(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numNonZeroSpansInV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numPatches(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numPatchesInU(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numPatchesInV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numRegions(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numSpansInU(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numSpansInV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numUVs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorRGB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def partialPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def projectCurve(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChildAt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeKnotInU(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeKnotInV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeOneKnotInU(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeOneKnotInV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCVs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIcon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInstanceable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIntermediateObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setKnotInU(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setKnotInV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setKnotsInU(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setKnotsInV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColorType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUVs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def tesselate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transformationMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def trim(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def trimWithBoundaries(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def updateSurface(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingHiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFnNurbsSurfaceData(MFnGeometryData):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addComponentTag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addObjectGroup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addObjectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def changeObjectGroupId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def componentTagCategory(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def componentTagContents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def componentTagExpressionSubsetState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def componentTagType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def componentTags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copyObjectGroups(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasComponentTag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObjectGroup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAny: int = ...
    kAuto: int = ...
    kCompleteGroup: int = ...
    kComponentList: int = ...
    kDoubleArray: int = ...
    kDynArrayAttrs: int = ...
    kDynSweptGeometry: int = ...
    kEdges: int = ...
    kEmptyGroup: int = ...
    kFaces: int = ...
    kFalloffFunction: int = ...
    kFloatArray: int = ...
    kIntArray: int = ...
    kInvalid: int = ...
    kInvalidGroup: int = ...
    kLast: int = ...
    kLattice: int = ...
    kMatrix: int = ...
    kMatrixArray: int = ...
    kMesh: int = ...
    kNId: int = ...
    kNObject: int = ...
    kNull: int = ...
    kNumeric: int = ...
    kNurbsCurve: int = ...
    kNurbsSurface: int = ...
    kPartialGroup: int = ...
    kPlugin: int = ...
    kPluginGeometry: int = ...
    kPointArray: int = ...
    kSphere: int = ...
    kString: int = ...
    kStringArray: int = ...
    kSubdSurface: int = ...
    kUnsupported: int = ...
    kVectorArray: int = ...
    kVerts: int = ...
    def matrixIsIdentity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def matrixIsNotIdentity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupSubsetState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeComponentTag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeObjectGroup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeObjectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def renameComponentTag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def resolveComponentTagExpression(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setComponentTagContents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnNurbsSurfaceData_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnNurbsSurface_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnPartition(MFnDependencyNode):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addMember(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableDGTiming(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedByAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def icon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDefaultNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFromReferencedFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isRenderPartition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isShared(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kEdgesOnly: int = ...
    kEditPointsOnly: int = ...
    kExtensionAttr: int = ...
    kFacetsOnly: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNone: int = ...
    kNormalAttr: int = ...
    kRenderableOnly: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    kVerticesOnly: int = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeMember(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIcon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnPartition_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnPhongEShader(MFnDependencyNode):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableDGTiming(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedByAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def highlightSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def icon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDefaultNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFromReferencedFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isShared(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNormalAttr: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def roughness(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setHighlightSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIcon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRoughness(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setWhiteness(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def whiteness(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnPhongEShader_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnPhongShader(MFnReflectShader):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def ambientColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def color(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cosPower(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def diffuseCoeff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableDGTiming(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedByAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glowIntensity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hideSource(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def icon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def incandescence(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDefaultNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFromReferencedFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isShared(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNormalAttr: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reflectedColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reflectedRayDepthLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reflectivity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def refractedRayDepthLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def refractiveIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rtRefractedColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAmbientColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCosPower(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDiffuseCoeff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setGlowIntensity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setHideSource(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIcon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIncandescence(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setReflectedColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setReflectedRayDepthLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setReflectivity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRefractedRayDepthLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRefractiveIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRtRefractedColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSpecularColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTranslucenceCoeff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTransparency(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def specularColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def translucenceCoeff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def transparency(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnPhongShader_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnPluginData(MFnData):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def constData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def data(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAny: int = ...
    kComponentList: int = ...
    kDoubleArray: int = ...
    kDynArrayAttrs: int = ...
    kDynSweptGeometry: int = ...
    kFalloffFunction: int = ...
    kFloatArray: int = ...
    kIntArray: int = ...
    kInvalid: int = ...
    kLast: int = ...
    kLattice: int = ...
    kMatrix: int = ...
    kMatrixArray: int = ...
    kMesh: int = ...
    kNId: int = ...
    kNObject: int = ...
    kNumeric: int = ...
    kNurbsCurve: int = ...
    kNurbsSurface: int = ...
    kPlugin: int = ...
    kPluginGeometry: int = ...
    kPointArray: int = ...
    kSphere: int = ...
    kString: int = ...
    kStringArray: int = ...
    kSubdSurface: int = ...
    kVectorArray: int = ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnPluginData_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnPointArrayData(MFnData):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def array(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copyTo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAny: int = ...
    kComponentList: int = ...
    kDoubleArray: int = ...
    kDynArrayAttrs: int = ...
    kDynSweptGeometry: int = ...
    kFalloffFunction: int = ...
    kFloatArray: int = ...
    kIntArray: int = ...
    kInvalid: int = ...
    kLast: int = ...
    kLattice: int = ...
    kMatrix: int = ...
    kMatrixArray: int = ...
    kMesh: int = ...
    kNId: int = ...
    kNObject: int = ...
    kNumeric: int = ...
    kNurbsCurve: int = ...
    kNurbsSurface: int = ...
    kPlugin: int = ...
    kPluginGeometry: int = ...
    kPointArray: int = ...
    kSphere: int = ...
    kString: int = ...
    kStringArray: int = ...
    kSubdSurface: int = ...
    kVectorArray: int = ...
    def length(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnPointArrayData_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnPointLight(MFnNonExtendedLight):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def activeColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def boundingBox(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def castSoftShadows(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def centerOfIllumination(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def childCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def color(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagRoot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def decayRate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def depthMapBias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def depthMapFilterSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def depthMapFocus(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def depthMapResolution(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def depthMapWidthFocus(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dormantColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsReference(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsTemplate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def duplicate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableDGTiming(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fullPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedByAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllPaths(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedSetsAndMembers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasParent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def icon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inModel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inUnderWorld(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def instanceCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def intensity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isChildOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDefaultNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFromReferencedFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanceable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanced(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstancedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isIntermediateObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isParentOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isShared(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNextPos: int = ...
    kNormalAttr: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    kUseDefaultColor: int = ...
    kUseIndexColor: int = ...
    kUseRGBColor: int = ...
    def lightAmbient(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def lightDiffuse(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def lightDirection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def lightIntensity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def lightSpecular(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def model(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numShadowSamples(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorRGB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def opticalFXvisibility(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def partialPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rayDepthLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChildAt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCastSoftShadows(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCenterOfIllumination(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDecayRate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDepthMapBias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDepthMapFilterSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDepthMapFocus(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDepthMapResolution(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDepthMapWidthFocus(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIcon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInstanceable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIntensity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIntermediateObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setNumShadowSamples(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColorType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setOpticalFXvisibility(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRayDepthLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setShadowColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setShadowRadius(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseDepthMapAutoFocus(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseDepthMapShadows(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseRayTraceShadows(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shadowColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shadowRadius(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transformationMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def useDepthMapAutoFocus(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def useDepthMapShadows(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def useRayTraceShadows(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingHiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnPointLight_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnReference(MFnDependencyNode):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def associatedNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def containsNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def containsNodeExactly(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableDGTiming(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fileName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedByAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def icon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def ignoreReferenceEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDefaultNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isExportEditsFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFromReferencedFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLoaded(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isShared(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValidReference(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNormalAttr: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def nodes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentAssembly(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentFileName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentReference(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIcon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIgnoreReferenceEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnReference_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnReference_ignoreReferenceEdits(*args: Any, **kwargs: Any) -> Any: ...
def MFnReference_setIgnoreReferenceEdits(*args: Any, **kwargs: Any) -> Any: ...
class MFnReflectShader(MFnLambertShader):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def ambientColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def color(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def diffuseCoeff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableDGTiming(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedByAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glowIntensity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hideSource(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def icon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def incandescence(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDefaultNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFromReferencedFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isShared(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNormalAttr: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reflectedColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reflectedRayDepthLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reflectivity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def refractedRayDepthLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def refractiveIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rtRefractedColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAmbientColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDiffuseCoeff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setGlowIntensity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setHideSource(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIcon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIncandescence(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setReflectedColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setReflectedRayDepthLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setReflectivity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRefractedRayDepthLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRefractiveIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRtRefractedColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSpecularColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTranslucenceCoeff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTransparency(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def specularColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def translucenceCoeff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def transparency(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnReflectShader_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnSet(MFnDependencyNode):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addMember(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addMembers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def annotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableDGTiming(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedByAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getIntersection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getMemberPaths(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getMembers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getUnion(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasRestrictions(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def icon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def intersectsWith(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDefaultNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFromReferencedFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isMember(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isShared(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kEdgesOnly: int = ...
    kEditPointsOnly: int = ...
    kExtensionAttr: int = ...
    kFacetsOnly: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNone: int = ...
    kNormalAttr: int = ...
    kRenderableOnly: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    kVerticesOnly: int = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeMember(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeMembers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def restriction(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAnnotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIcon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnSet_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnSingleIndexedComponent(MFnComponent):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addElement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addElements(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def componentType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def element(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def elementCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def elementMax(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCompleteData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getElements(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasWeights(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isComplete(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isEmpty(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isEqual(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setComplete(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCompleteData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setWeight(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setWeights(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def weight(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnSingleIndexedComponent_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnSphereData(MFnData):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAny: int = ...
    kComponentList: int = ...
    kDoubleArray: int = ...
    kDynArrayAttrs: int = ...
    kDynSweptGeometry: int = ...
    kFalloffFunction: int = ...
    kFloatArray: int = ...
    kIntArray: int = ...
    kInvalid: int = ...
    kLast: int = ...
    kLattice: int = ...
    kMatrix: int = ...
    kMatrixArray: int = ...
    kMesh: int = ...
    kNId: int = ...
    kNObject: int = ...
    kNumeric: int = ...
    kNurbsCurve: int = ...
    kNurbsSurface: int = ...
    kPlugin: int = ...
    kPluginGeometry: int = ...
    kPointArray: int = ...
    kSphere: int = ...
    kString: int = ...
    kStringArray: int = ...
    kSubdSurface: int = ...
    kVectorArray: int = ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def radius(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRadius(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnSphereData_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnSpotLight(MFnNonExtendedLight):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def activeColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def barnDoorAngle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def barnDoors(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def boundingBox(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def castSoftShadows(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def centerOfIllumination(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def childCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def color(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def coneAngle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagRoot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def decayRate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def depthMapBias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def depthMapFilterSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def depthMapFocus(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def depthMapResolution(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def depthMapWidthFocus(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dormantColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsReference(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsTemplate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dropOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def duplicate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableDGTiming(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def endDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fullPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedByAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllPaths(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedSetsAndMembers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasParent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def icon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inModel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inUnderWorld(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def instanceCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def intensity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isChildOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDefaultNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFromReferencedFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanceable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanced(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstancedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isIntermediateObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isParentOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isShared(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kBottom: int = ...
    kExtensionAttr: int = ...
    kFirst: int = ...
    kInvalidAttr: int = ...
    kLeft: int = ...
    kLocalDynamicAttr: int = ...
    kNextPos: int = ...
    kNormalAttr: int = ...
    kRight: int = ...
    kSecond: int = ...
    kThird: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    kTop: int = ...
    kUseDefaultColor: int = ...
    kUseIndexColor: int = ...
    kUseRGBColor: int = ...
    def lightAmbient(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def lightDiffuse(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def lightDirection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def lightIntensity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def lightSpecular(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def model(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numShadowSamples(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorRGB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def opticalFXvisibility(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def partialPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def penumbraAngle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rayDepthLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChildAt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setBarnDoorAngle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setBarnDoors(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCastSoftShadows(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCenterOfIllumination(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setConeAngle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDecayRate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDepthMapBias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDepthMapFilterSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDepthMapFocus(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDepthMapResolution(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDepthMapWidthFocus(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDropOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setEndDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIcon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInstanceable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIntensity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIntermediateObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setNumShadowSamples(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColorType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setOpticalFXvisibility(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPenumbraAngle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRayDepthLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setShadowColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setShadowRadius(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setStartDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseDecayRegions(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseDepthMapAutoFocus(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseDepthMapShadows(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseRayTraceShadows(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shadowColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shadowRadius(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def startDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transformationMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def useDecayRegions(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def useDepthMapAutoFocus(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def useDepthMapShadows(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def useRayTraceShadows(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingHiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnSpotLight_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnStandardSurfaceShader(MFnDependencyNode):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def base(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def baseColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def coat(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def coatAffectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def coatAffectRoughness(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def coatAnisotropy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def coatColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def coatIOR(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def coatRotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def coatRoughness(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def diffuseRoughness(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def emission(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def emissionColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableDGTiming(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedByAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def icon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDefaultNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFromReferencedFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isShared(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNormalAttr: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    def metalness(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def opacity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setBase(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setBaseColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCoat(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCoatAffectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCoatAffectRoughness(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCoatAnisotropy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCoatColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCoatIOR(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCoatRotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCoatRoughness(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDiffuseRoughness(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setEmission(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setEmissionColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIcon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMetalness(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setOpacity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSheen(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSheenColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSheenRoughness(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSpecular(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSpecularAnisotropy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSpecularColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSpecularIOR(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSpecularRotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSpecularRoughness(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSubsurface(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSubsurfaceAnisotropy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSubsurfaceColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSubsurfaceRadius(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSubsurfaceScale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setThinFilmIOR(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setThinFilmThickness(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setThinWalled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTransmission(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTransmissionColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTransmissionDepth(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTransmissionDispersion(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTransmissionExtraRoughness(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTransmissionScatter(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTransmissionScatterAnisotropy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def sheen(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def sheenColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def sheenRoughness(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def specular(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def specularAnisotropy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def specularColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def specularIOR(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def specularRotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def specularRoughness(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def subsurface(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def subsurfaceAnisotropy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def subsurfaceColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def subsurfaceRadius(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def subsurfaceScale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def thinFilmIOR(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def thinFilmThickness(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def thinWalled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transmission(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def transmissionColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def transmissionDepth(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def transmissionDispersion(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def transmissionExtraRoughness(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def transmissionScatter(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def transmissionScatterAnisotropy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnStandardSurfaceShader_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnStringArrayData(MFnData):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __getitem__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def array(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copyTo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAny: int = ...
    kComponentList: int = ...
    kDoubleArray: int = ...
    kDynArrayAttrs: int = ...
    kDynSweptGeometry: int = ...
    kFalloffFunction: int = ...
    kFloatArray: int = ...
    kIntArray: int = ...
    kInvalid: int = ...
    kLast: int = ...
    kLattice: int = ...
    kMatrix: int = ...
    kMatrixArray: int = ...
    kMesh: int = ...
    kNId: int = ...
    kNObject: int = ...
    kNumeric: int = ...
    kNurbsCurve: int = ...
    kNurbsSurface: int = ...
    kPlugin: int = ...
    kPluginGeometry: int = ...
    kPointArray: int = ...
    kSphere: int = ...
    kString: int = ...
    kStringArray: int = ...
    kSubdSurface: int = ...
    kVectorArray: int = ...
    def length(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnStringArrayData_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnStringData(MFnData):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAny: int = ...
    kComponentList: int = ...
    kDoubleArray: int = ...
    kDynArrayAttrs: int = ...
    kDynSweptGeometry: int = ...
    kFalloffFunction: int = ...
    kFloatArray: int = ...
    kIntArray: int = ...
    kInvalid: int = ...
    kLast: int = ...
    kLattice: int = ...
    kMatrix: int = ...
    kMatrixArray: int = ...
    kMesh: int = ...
    kNId: int = ...
    kNObject: int = ...
    kNumeric: int = ...
    kNurbsCurve: int = ...
    kNurbsSurface: int = ...
    kPlugin: int = ...
    kPluginGeometry: int = ...
    kPointArray: int = ...
    kSphere: int = ...
    kString: int = ...
    kStringArray: int = ...
    kSubdSurface: int = ...
    kVectorArray: int = ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def string(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnStringData_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnSubd(MFnDagNode):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def activeColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def boundingBox(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def childCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def collapse(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def convertToNurbs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def creasesClearAll(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def creasesGetAll(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def creasesSetAll(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createBaseMesh(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagRoot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dormantColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsReference(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsTemplate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def duplicate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def edgeAdjacentPolygon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def edgeBetween(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def edgeChildren(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def edgeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def edgeCreaseRelevant(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def edgeIsBoundary(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def edgeIsCreased(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def edgeIsValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def edgeSetCrease(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def edgeVertices(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def editsPending(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def editsUpdateAll(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableDGTiming(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def evaluateNormal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def evaluatePosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def evaluatePositionAndNormal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fullPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedByAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllPaths(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedSetsAndMembers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedShaders(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCubicSpline(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasParent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def icon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inModel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inUnderWorld(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def instanceCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isChildOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDefaultNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFromReferencedFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanceable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanced(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstancedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isIntermediateObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isParentOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isShared(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNextPos: int = ...
    kNormalAttr: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    kUseDefaultColor: int = ...
    kUseIndexColor: int = ...
    kUseRGBColor: int = ...
    def levelFullySubdivideTo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def levelMaxAllowed(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def levelMaxCurrent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def model(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorRGB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def partialPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def polygonBaseMeshAdd(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def polygonBaseMeshAddWithUVs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def polygonChildren(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def polygonCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def polygonCountMaxWithGivenBaseMesh(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def polygonEdgeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def polygonEdges(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def polygonGetCenterUV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def polygonGetVertexUVs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def polygonHasChildren(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def polygonHasVertexUVs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def polygonIsValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def polygonSetUseUVs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def polygonSetVertexUVs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def polygonSubdivide(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def polygonVertexCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def polygonVertices(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChildAt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIcon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInstanceable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIntermediateObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColorType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def tesselate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def tessellateViaNurbs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transformationMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def updateAllEditsAndCreases(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def updateSubdSurface(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingHiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexAdjacentVertices(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexBaseIndexFromVertexId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexBaseMeshAdd(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexBaseMeshAddWithIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexBaseMeshGet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexBaseMeshGetWithId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexBaseMeshSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexBaseMeshSetWithId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexChildren(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexCreaseRelevant(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexEditGet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexEditSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexEditsClearAllNonBase(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexEditsGetAllNonBase(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexEditsSetAllNonBase(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexIdFromBaseVertexIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexIncidentEdges(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexIncidentPolygons(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexIsBoundary(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexIsCreased(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexIsValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexNormal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexPositionGet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexPositionGetNoEdit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexPositionSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexSetCrease(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexValence(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFnSubdData(MFnGeometryData):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addComponentTag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addObjectGroup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addObjectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def changeObjectGroupId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def componentTagCategory(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def componentTagContents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def componentTagExpressionSubsetState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def componentTagType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def componentTags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copyObjectGroups(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasComponentTag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObjectGroup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAny: int = ...
    kAuto: int = ...
    kCompleteGroup: int = ...
    kComponentList: int = ...
    kDoubleArray: int = ...
    kDynArrayAttrs: int = ...
    kDynSweptGeometry: int = ...
    kEdges: int = ...
    kEmptyGroup: int = ...
    kFaces: int = ...
    kFalloffFunction: int = ...
    kFloatArray: int = ...
    kIntArray: int = ...
    kInvalid: int = ...
    kInvalidGroup: int = ...
    kLast: int = ...
    kLattice: int = ...
    kMatrix: int = ...
    kMatrixArray: int = ...
    kMesh: int = ...
    kNId: int = ...
    kNObject: int = ...
    kNull: int = ...
    kNumeric: int = ...
    kNurbsCurve: int = ...
    kNurbsSurface: int = ...
    kPartialGroup: int = ...
    kPlugin: int = ...
    kPluginGeometry: int = ...
    kPointArray: int = ...
    kSphere: int = ...
    kString: int = ...
    kStringArray: int = ...
    kSubdSurface: int = ...
    kUnsupported: int = ...
    kVectorArray: int = ...
    kVerts: int = ...
    def matrixIsIdentity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def matrixIsNotIdentity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupSubsetState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeComponentTag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeObjectGroup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeObjectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def renameComponentTag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def resolveComponentTagExpression(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setComponentTagContents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnSubdData_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnSubdNames(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def base(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def baseFaceId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def baseFaceIdFromIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def baseFaceIdFromLong(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def baseFaceIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def baseFaceIndexFromId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def corner(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def first(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fromMUint64(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fromSelectionIndices(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def level(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def levelOneFaceAsLong(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def levelOneFaceId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def levelOneFaceIdFromIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def levelOneFaceIdFromLong(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def levelOneFaceIndexFromId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def nonBaseFaceEdges(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def nonBaseFaceVertices(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentFaceId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def path(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def toMUint64(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def toSelectionIndices(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnSubdNames_base(*args: Any, **kwargs: Any) -> Any: ...
def MFnSubdNames_baseFaceId(*args: Any, **kwargs: Any) -> Any: ...
def MFnSubdNames_baseFaceIdFromIndex(*args: Any, **kwargs: Any) -> Any: ...
def MFnSubdNames_baseFaceIdFromLong(*args: Any, **kwargs: Any) -> Any: ...
def MFnSubdNames_baseFaceIndex(*args: Any, **kwargs: Any) -> Any: ...
def MFnSubdNames_baseFaceIndexFromId(*args: Any, **kwargs: Any) -> Any: ...
def MFnSubdNames_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnSubdNames_corner(*args: Any, **kwargs: Any) -> Any: ...
def MFnSubdNames_first(*args: Any, **kwargs: Any) -> Any: ...
def MFnSubdNames_fromMUint64(*args: Any, **kwargs: Any) -> Any: ...
def MFnSubdNames_fromSelectionIndices(*args: Any, **kwargs: Any) -> Any: ...
def MFnSubdNames_level(*args: Any, **kwargs: Any) -> Any: ...
def MFnSubdNames_levelOneFaceAsLong(*args: Any, **kwargs: Any) -> Any: ...
def MFnSubdNames_levelOneFaceId(*args: Any, **kwargs: Any) -> Any: ...
def MFnSubdNames_levelOneFaceIdFromIndex(*args: Any, **kwargs: Any) -> Any: ...
def MFnSubdNames_levelOneFaceIdFromLong(*args: Any, **kwargs: Any) -> Any: ...
def MFnSubdNames_levelOneFaceIndexFromId(*args: Any, **kwargs: Any) -> Any: ...
def MFnSubdNames_nonBaseFaceEdges(*args: Any, **kwargs: Any) -> Any: ...
def MFnSubdNames_nonBaseFaceVertices(*args: Any, **kwargs: Any) -> Any: ...
def MFnSubdNames_parentFaceId(*args: Any, **kwargs: Any) -> Any: ...
def MFnSubdNames_path(*args: Any, **kwargs: Any) -> Any: ...
def MFnSubdNames_toMUint64(*args: Any, **kwargs: Any) -> Any: ...
def MFnSubdNames_toSelectionIndices(*args: Any, **kwargs: Any) -> Any: ...
def MFnSubd_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnTransform(MFnDagNode):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def activeColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def boundingBox(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def childCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clearRestPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagRoot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dormantColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsReference(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsTemplate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def duplicate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableDGTiming(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fullPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedByAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllPaths(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedSetsAndMembers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getRotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getRotationQuaternion(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getScale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getShear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasParent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def icon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inModel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inUnderWorld(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def instanceCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isChildOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDefaultNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFromReferencedFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanceable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanced(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstancedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isIntermediateObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLimited(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isParentOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isShared(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNextPos: int = ...
    kNormalAttr: int = ...
    kRotateMaxX: int = ...
    kRotateMaxY: int = ...
    kRotateMaxZ: int = ...
    kRotateMinX: int = ...
    kRotateMinY: int = ...
    kRotateMinZ: int = ...
    kScaleMaxX: int = ...
    kScaleMaxY: int = ...
    kScaleMaxZ: int = ...
    kScaleMinX: int = ...
    kScaleMinY: int = ...
    kScaleMinZ: int = ...
    kShearMaxXY: int = ...
    kShearMaxXZ: int = ...
    kShearMaxYZ: int = ...
    kShearMinXY: int = ...
    kShearMinXZ: int = ...
    kShearMinYZ: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    kTranslateMaxX: int = ...
    kTranslateMaxY: int = ...
    kTranslateMaxZ: int = ...
    kTranslateMinX: int = ...
    kTranslateMinY: int = ...
    kTranslateMinZ: int = ...
    kUseDefaultColor: int = ...
    kUseIndexColor: int = ...
    kUseRGBColor: int = ...
    def limitValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def model(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorRGB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def partialPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChildAt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def resetFromRestPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def restPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateByQuaternion(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateOrientation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotatePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotatePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotationOrder(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scaleBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scalePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scalePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIcon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInstanceable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIntermediateObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColorType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRestPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotateOrientation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotatePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotatePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotationOrder(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotationQuaternion(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScalePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScalePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setShear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shearBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def transformationMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def translateBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def translation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingHiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnTransform_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnTripleIndexedComponent(MFnComponent):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addElement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addElements(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def componentType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def elementCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCompleteData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getElement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getElements(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasWeights(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isComplete(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isEmpty(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isEqual(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setComplete(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCompleteData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setWeight(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setWeights(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def weight(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnTripleIndexedComponent_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnTypedAttribute(MFnAttribute):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def accepts(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def acceptsAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addToCategory(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAppearance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attrType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def disconnectBehavior(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAddAttrCmd(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCategories(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDefault(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasCategory(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def indexMatters(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def internal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isAffectsWorldSpace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isCached(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isChannelBoxFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isConnectable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDynamic(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isExtension(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isHidden(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isIndeterminant(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isKeyable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isProxyAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isReadable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isRenderSource(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isStorable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isUsedAsColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isUsedAsFilename(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isWorldSpace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isWritable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kDelete: int = ...
    kNothing: int = ...
    kReset: int = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeFromCategory(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAppearance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsWorldSpace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCached(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setChannelBox(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setConnectable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDefault(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDisconnectBehavior(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setHidden(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIndeterminant(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIndexMatters(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setKeyable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setNiceNameOverride(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setProxyAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setReadable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRenderSource(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setStorable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUsedAsColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUsedAsFilename(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUsesArrayDataBuilder(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setWorldSpace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setWritable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shortName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usesArrayDataBuilder(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnTypedAttribute_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnUInt64ArrayData(MFnData):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def array(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copyTo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAny: int = ...
    kComponentList: int = ...
    kDoubleArray: int = ...
    kDynArrayAttrs: int = ...
    kDynSweptGeometry: int = ...
    kFalloffFunction: int = ...
    kFloatArray: int = ...
    kIntArray: int = ...
    kInvalid: int = ...
    kLast: int = ...
    kLattice: int = ...
    kMatrix: int = ...
    kMatrixArray: int = ...
    kMesh: int = ...
    kNId: int = ...
    kNObject: int = ...
    kNumeric: int = ...
    kNurbsCurve: int = ...
    kNurbsSurface: int = ...
    kPlugin: int = ...
    kPluginGeometry: int = ...
    kPointArray: int = ...
    kSphere: int = ...
    kString: int = ...
    kStringArray: int = ...
    kSubdSurface: int = ...
    kVectorArray: int = ...
    def length(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnUInt64ArrayData_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnUint64SingleIndexedComponent(MFnComponent):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addElement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addElements(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def componentType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def element(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def elementCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCompleteData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getElements(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasWeights(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isComplete(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isEmpty(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isEqual(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setComplete(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCompleteData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setWeight(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setWeights(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def weight(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnUint64SingleIndexedComponent_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnUnitAttribute(MFnAttribute):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def accepts(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def acceptsAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addToCategory(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAppearance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def disconnectBehavior(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAddAttrCmd(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCategories(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDefault(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getMax(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getMin(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getSoftMax(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getSoftMin(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasCategory(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasMax(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasMin(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasSoftMax(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasSoftMin(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def indexMatters(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def internal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isAffectsWorldSpace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isCached(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isChannelBoxFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isConnectable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDynamic(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isExtension(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isHidden(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isIndeterminant(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isKeyable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isProxyAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isReadable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isRenderSource(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isStorable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isUsedAsColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isUsedAsFilename(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isWorldSpace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isWritable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAngle: int = ...
    kDelete: int = ...
    kDistance: int = ...
    kInvalid: int = ...
    kLast: int = ...
    kNothing: int = ...
    kReset: int = ...
    kTime: int = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeFromCategory(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAppearance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsWorldSpace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCached(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setChannelBox(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setConnectable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDefault(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDisconnectBehavior(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setHidden(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIndeterminant(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIndexMatters(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setKeyable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMax(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMin(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setNiceNameOverride(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setProxyAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setReadable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRenderSource(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSoftMax(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSoftMin(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setStorable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUsedAsColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUsedAsFilename(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUsesArrayDataBuilder(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setWorldSpace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setWritable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shortName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def unitType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usesArrayDataBuilder(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnUnitAttribute_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnVectorArrayData(MFnData):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def array(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copyTo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAny: int = ...
    kComponentList: int = ...
    kDoubleArray: int = ...
    kDynArrayAttrs: int = ...
    kDynSweptGeometry: int = ...
    kFalloffFunction: int = ...
    kFloatArray: int = ...
    kIntArray: int = ...
    kInvalid: int = ...
    kLast: int = ...
    kLattice: int = ...
    kMatrix: int = ...
    kMatrixArray: int = ...
    kMesh: int = ...
    kNId: int = ...
    kNObject: int = ...
    kNumeric: int = ...
    kNurbsCurve: int = ...
    kNurbsSurface: int = ...
    kPlugin: int = ...
    kPluginGeometry: int = ...
    kPointArray: int = ...
    kSphere: int = ...
    kString: int = ...
    kStringArray: int = ...
    kSubdSurface: int = ...
    kVectorArray: int = ...
    def length(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnVectorArrayData_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnVolumeLight(MFnPointLight):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def activeColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def arc(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def boundingBox(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def castSoftShadows(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def centerOfIllumination(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def childCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def color(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def colorRamp(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def coneEndRadius(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagRoot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def decayRate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def depthMapBias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def depthMapFilterSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def depthMapFocus(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def depthMapResolution(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def depthMapWidthFocus(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dormantColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsReference(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsTemplate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def duplicate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def emitAmbient(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableDGTiming(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fullPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedByAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllPaths(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedSetsAndMembers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasParent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def icon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inModel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inUnderWorld(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def instanceCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def intensity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isChildOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDefaultNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFromReferencedFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanceable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanced(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstancedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isIntermediateObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isParentOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isShared(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kBoxVolume: int = ...
    kConeVolume: int = ...
    kCylinderVolume: int = ...
    kDownAxis: int = ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kInward: int = ...
    kLocalDynamicAttr: int = ...
    kNextPos: int = ...
    kNormalAttr: int = ...
    kOutward: int = ...
    kSphereVolume: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    kUseDefaultColor: int = ...
    kUseIndexColor: int = ...
    kUseRGBColor: int = ...
    def lightAmbient(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def lightDiffuse(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def lightDirection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def lightIntensity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def lightShape(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def lightSpecular(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def model(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numShadowSamples(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorRGB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def opticalFXvisibility(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def partialPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def penumbraRamp(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rayDepthLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChildAt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setArc(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCastSoftShadows(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCenterOfIllumination(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setConeEndRadius(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDecayRate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDepthMapBias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDepthMapFilterSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDepthMapFocus(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDepthMapResolution(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDepthMapWidthFocus(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setEmitAmbient(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIcon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInstanceable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIntensity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIntermediateObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLightShape(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setNumShadowSamples(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColorType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setOpticalFXvisibility(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRayDepthLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setShadowAngle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setShadowColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setShadowRadius(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseDepthMapAutoFocus(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseDepthMapShadows(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseRayTraceShadows(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setVolumeLightDirection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shadowAngle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shadowColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shadowRadius(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transformationMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def useDepthMapAutoFocus(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def useDepthMapShadows(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def useRayTraceShadows(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingHiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def volumeLightDirection(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnVolumeLight_className(*args: Any, **kwargs: Any) -> Any: ...
class MGlobal(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addToModel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addToModelAt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def animSelectionMask(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def apiVersion(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clearSelectionList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def closeErrorLog(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def componentSelectionMask(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentToolContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def customVersion(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def customVersionClient(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def customVersionMajor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def customVersionMinor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def customVersionString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def defaultErrorLogPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def disableStow(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def displayError(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def displayInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def displayWarning(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doErrorLogEntry(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def errorLogPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def errorLoggingIsOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def executeCommand(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def executeCommandOnIdle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def executeCommandStringResult(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def executePythonCommand(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def executePythonCommandOnIdle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def executePythonCommandStringResult(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAbsolutePathToResources(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getActiveSelectionList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAssociatedSets(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFunctionSetList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getHiliteList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getLiveList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPreselectionHiliteList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getRichSelection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getSelectionListByName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getUILanguage(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def initOptionVar(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isCustomVersion(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDefaultLanguage(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInCrashHandler(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isRedoing(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isSelected(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isUndoing(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isYAxisUp(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isZAxisUp(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAddToHeadOfList: int = ...
    kAddToList: int = ...
    kBaseUIMode: int = ...
    kBatch: int = ...
    kComplete: int = ...
    kInteractive: int = ...
    kLibraryApp: int = ...
    kRemoveFromList: int = ...
    kReplaceList: int = ...
    kRestricted: int = ...
    kSelectComponentMode: int = ...
    kSelectLeafMode: int = ...
    kSelectObjectMode: int = ...
    kSelectRootMode: int = ...
    kSelectTemplateMode: int = ...
    kSurfaceSelectMethod: int = ...
    kWireframeSelectMethod: int = ...
    kXORWithList: int = ...
    def mayaFeatureSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def mayaName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def mayaState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def mayaVersion(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def miscSelectionMask(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectSelectionMask(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def optionVarDoubleValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def optionVarExists(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def optionVarIntValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def optionVarStringValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeFromModel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeOptionVar(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def resetToDefaultErrorLogPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def select(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def selectByName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def selectCommand(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def selectFromScreen(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def selectionMethod(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def selectionMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setActiveSelectionList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAnimSelectionMask(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setComponentSelectionMask(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDisableStow(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDisplayCVs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setErrorLogPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setHiliteList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMiscSelectionMask(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectSelectionMask(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setOptionVarValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPreselectionHiliteList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRichSelection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSelectionMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTrackSelectionOrderEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setYAxisUp(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setZAxisUp(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def sourceFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def startErrorLogging(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def stopErrorLogging(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def trackSelectionOrderEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def unselect(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def unselectByName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def upAxis(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def viewFrame(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MGlobal_addToModel(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_addToModelAt(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_animSelectionMask(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_apiVersion(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_className(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_clearSelectionList(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_closeErrorLog(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_componentSelectionMask(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_currentToolContext(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_customVersion(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_customVersionClient(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_customVersionMajor(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_customVersionMinor(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_customVersionString(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_defaultErrorLogPathName(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_deleteNode(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_disableStow(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_displayError(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_displayInfo(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_displayWarning(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_doErrorLogEntry(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_errorLogPathName(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_errorLoggingIsOn(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_executeCommand(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_executeCommandOnIdle(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_executeCommandStringResult(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_executePythonCommand(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_executePythonCommandOnIdle(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_executePythonCommandStringResult(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_getAbsolutePathToResources(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_getActiveSelectionList(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_getAssociatedSets(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_getFunctionSetList(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_getHiliteList(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_getLiveList(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_getPreselectionHiliteList(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_getRichSelection(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_getSelectionListByName(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_getUILanguage(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_initOptionVar(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_isCustomVersion(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_isDefaultLanguage(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_isInCrashHandler(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_isRedoing(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_isSelected(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_isUndoing(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_isYAxisUp(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_isZAxisUp(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_mayaFeatureSet(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_mayaName(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_mayaState(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_mayaVersion(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_miscSelectionMask(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_objectSelectionMask(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_optionVarDoubleValue(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_optionVarExists(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_optionVarIntValue(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_optionVarStringValue(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_removeFromModel(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_removeOptionVar(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_resetToDefaultErrorLogPathName(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_select(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_selectByName(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_selectCommand(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_selectFromScreen(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_selectionMethod(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_selectionMode(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_setActiveSelectionList(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_setAnimSelectionMask(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_setComponentSelectionMask(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_setDisableStow(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_setDisplayCVs(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_setErrorLogPathName(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_setHiliteList(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_setMiscSelectionMask(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_setObjectSelectionMask(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_setOptionVarValue(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_setPreselectionHiliteList(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_setRichSelection(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_setSelectionMode(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_setTrackSelectionOrderEnabled(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_setYAxisUp(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_setZAxisUp(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_sourceFile(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_startErrorLogging(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_stopErrorLogging(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_trackSelectionOrderEnabled(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_unselect(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_unselectByName(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_upAxis(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_viewFrame(*args: Any, **kwargs: Any) -> Any: ...
class MIffFile(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def beginGet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def beginReadGroup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def close(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def endGet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def endReadGroup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getChunk(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def iffGetFloat(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def iffGetInt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def iffGetShort(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isActive(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def open(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MIffFile_className(*args: Any, **kwargs: Any) -> Any: ...
class MIffTag(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    __hash__: NoneType = ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    kCAT: MIffTag = ...
    kCAT4: MIffTag = ...
    kCAT8: MIffTag = ...
    kFOR4: MIffTag = ...
    kFOR8: MIffTag = ...
    kFORM: MIffTag = ...
    kLIS4: MIffTag = ...
    kLIS8: MIffTag = ...
    kLIST: MIffTag = ...
    kPRO4: MIffTag = ...
    kPRO8: MIffTag = ...
    kPROP: MIffTag = ...
    thisown: property = ...

class MImage(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def convertPixelFormat(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def depth(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def depthMap(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def filter(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def filterExists(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def floatPixels(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDepthMapRange(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDepthMapSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def haveDepth(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isRGBA(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kByte: int = ...
    kFloat: int = ...
    kHeightFieldBumpFormat: int = ...
    kNoFormat: int = ...
    kNormalMapBumpFormat: int = ...
    kUnknown: int = ...
    kUnknownFormat: int = ...
    def pixelType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pixels(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def readDepthMap(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def readFromFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def readFromTextureNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def release(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def resize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDepthMap(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFloatPixels(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPixels(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRGBA(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def verticalFlip(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def writeToFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def writeToFileWithDepth(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MImageFileInfo(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def channels(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hardwareType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAlpha(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasMipMaps(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def height(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def imageType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kHwTexture1D: int = ...
    kHwTexture2D: int = ...
    kHwTexture3D: int = ...
    kHwTextureCubeMap: int = ...
    kHwTextureRectangle: int = ...
    kHwTextureUnknown: int = ...
    kImageTypeBump: int = ...
    kImageTypeColor: int = ...
    kImageTypeNormal: int = ...
    kImageTypeUnknown: int = ...
    def numberOfImages(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pixelType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def width(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MImage_className(*args: Any, **kwargs: Any) -> Any: ...
def MImage_filterExists(*args: Any, **kwargs: Any) -> Any: ...
class MInt64Array(object):
    def __add__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    def __delitem__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __getitem__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    __hash__: NoneType = ...
    def __iadd__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __len__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __radd__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __setitem__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def append(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSizeIncrement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def sizeIncrement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MInt64Array_className(*args: Any, **kwargs: Any) -> Any: ...
class MIntArray(object):
    def __add__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    def __delitem__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __getitem__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    __hash__: NoneType = ...
    def __iadd__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __len__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __radd__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __setitem__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def append(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSizeIncrement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def sizeIncrement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MIntArray_className(*args: Any, **kwargs: Any) -> Any: ...
class MItCurveCV(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __next__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentItem(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasHistoryOnCreate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def index(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDone(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def next(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def position(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def translateBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def updateCurve(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MItCurveCV_className(*args: Any, **kwargs: Any) -> Any: ...
class MItDag(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __next__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentItem(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def depth(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fullPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllPaths(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def instanceCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDone(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanced(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def item(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kBreadthFirst: int = ...
    kDepthFirst: int = ...
    kInvalidType: int = ...
    def next(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def partialPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def prune(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def root(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def traverseUnderWorld(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def willTraverseUnderWorld(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MItDag_className(*args: Any, **kwargs: Any) -> Any: ...
class MItDependencyGraph(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __next__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def atNodeLevel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentDirection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentFilter(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentItem(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentLevel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentRelationship(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentTraversal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def disablePruningOnFilter(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enablePruningOnFilter(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getNodePath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getNodesVisited(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPlugPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPlugsVisited(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDirectionDownStream(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDone(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isPruningOnFilter(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTraversalDepthFirst(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTraversingOverWorldSpaceDependents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kBreadthFirst: int = ...
    kConnectedTo: int = ...
    kDependsOn: int = ...
    kDepthFirst: int = ...
    kDownstream: int = ...
    kEvaluationGraph: int = ...
    kNodeLevel: int = ...
    kPlugLevel: int = ...
    kUpstream: int = ...
    def next(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def nodeDepth(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def previousPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def prune(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def resetFilter(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def resetTo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rootNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rootPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCurrentFilter(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCurrentRelationship(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTraversalOverWorldSpaceDependents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def thisNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def thisNodeHasUnknownType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def thisPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def toggleDirection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def toggleLevel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def toggleTraversal(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MItDependencyGraph_className(*args: Any, **kwargs: Any) -> Any: ...
class MItDependencyNodes(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __next__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDone(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def item(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def next(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def thisNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MItDependencyNodes_className(*args: Any, **kwargs: Any) -> Any: ...
class MItEdits(object):
    ALL_EDITS: int = ...
    SUCCESSFUL_EDITS: int = ...
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __next__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addRemoveAttrEdit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectDisconnectEdit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentEditString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentEditType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def edit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fcurveEdit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDone(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isReverse(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kForward: int = ...
    kReverse: int = ...
    def next(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentingEdit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCurrentEdit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAttrEdit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MItEdits_className(*args: Any, **kwargs: Any) -> Any: ...
class MItGeometry(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __next__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def allPositions(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def component(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def count(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentItem(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def exactCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def index(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDone(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def next(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def normal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def position(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def positionIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAllPositions(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def weight(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MItGeometry_className(*args: Any, **kwargs: Any) -> Any: ...
class MItInstancer(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __next__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def instancer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def instancerId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def instancerPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDone(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def matrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def next(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def nextInstancer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def nextParticle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def particleId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def path(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pathId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MItInstancer_className(*args: Any, **kwargs: Any) -> Any: ...
class MItMeshEdge(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __next__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def center(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cleanupSmoothing(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectedToEdge(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectedToFace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def count(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentItem(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def edge(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def geomChanged(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedEdges(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedFaces(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getLength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def index(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDone(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isSmooth(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def next(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numConnectedEdges(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numConnectedFaces(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def onBoundary(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def point(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSmoothing(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def updateSurface(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MItMeshEdge_className(*args: Any, **kwargs: Any) -> Any: ...
class MItMeshFaceVertex(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __next__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentItem(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def faceId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def faceVertId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def faceVertex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def geomChanged(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getBinormal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getColorIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getNormal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getTangent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getUV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getUVIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUVs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDone(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def next(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def normalId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def position(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def tangentId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def updateSurface(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def vertId(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MItMeshFaceVertex_className(*args: Any, **kwargs: Any) -> Any: ...
class MItMeshPolygon(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __next__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def center(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def count(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentItem(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def geomChanged(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getArea(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAxisAtUV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getColorIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getColorIndices(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getColors(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedEdges(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedFaces(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedVertices(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getEdges(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getNormal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getNormals(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPointAtUV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPoints(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getTriangle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getTriangles(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getUV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getUVArea(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getUVAtPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getUVIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getUVSetNames(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getUVs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getVertices(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUVs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasValidTriangulation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def index(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isConnectedToEdge(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isConnectedToFace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isConnectedToVertex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isConvex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDone(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isHoled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLamina(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isPlanar(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isStarlike(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isUVReversed(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def next(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def normalIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numColors(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numConnectedEdges(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numConnectedFaces(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numTriangles(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def onBoundary(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def point(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def polygon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def polygonVertexCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPoints(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUVs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def tangentIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def updateSurface(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def zeroArea(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def zeroUVArea(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MItMeshPolygon_className(*args: Any, **kwargs: Any) -> Any: ...
class MItMeshVertex(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __next__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectedToEdge(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectedToFace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def count(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentItem(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def geomChanged(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getColorIndices(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getColors(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedEdges(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedFaces(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedVertices(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getNormal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getNormalIndices(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getNormals(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getOppositeVertex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getUV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getUVIndices(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getUVs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def index(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDone(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def next(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numConnectedEdges(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numConnectedFaces(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numUVs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def onBoundary(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def position(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUVs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def translateBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def updateSurface(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def vertex(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MItMeshVertex_className(*args: Any, **kwargs: Any) -> Any: ...
class MItSelectionList(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __next__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDagPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDependNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getStrings(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasComponents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDone(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def itemType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAnimSelectionItem: int = ...
    kDNselectionItem: int = ...
    kDagSelectionItem: int = ...
    kPlugSelectionItem: int = ...
    kUnknownItem: int = ...
    def next(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFilter(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MItSelectionList_className(*args: Any, **kwargs: Any) -> Any: ...
class MItSubdEdge(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __next__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def index(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isBoundary(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDone(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isSharp(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def level(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def next(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLevel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSharpness(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MItSubdEdge_className(*args: Any, **kwargs: Any) -> Any: ...
class MItSubdFace(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __next__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def index(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDone(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def level(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def next(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLevel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MItSubdFace_className(*args: Any, **kwargs: Any) -> Any: ...
class MItSubdVertex(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __next__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def index(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDone(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def level(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def next(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLevel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MItSubdVertex_className(*args: Any, **kwargs: Any) -> Any: ...
class MItSurfaceCV(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __next__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentItem(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasHistoryOnCreate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def index(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDone(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isRowDone(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def next(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def nextRow(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def position(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def translateBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def updateSurface(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MItSurfaceCV_className(*args: Any, **kwargs: Any) -> Any: ...
class MIteratorType(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def filterListEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFilterList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFilterType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getObjectType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kMDagPathObject: int = ...
    kMObject: int = ...
    kMPlugObject: int = ...
    def setFilterList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFilterType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MLockMessage(MMessage):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentCallbackId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCallableInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAddAttr: int = ...
    kChildReorder: int = ...
    kCreateChildInstance: int = ...
    kCreateNodeInstance: int = ...
    kCreateParentInstance: int = ...
    kDefaultAction: int = ...
    kDelete: int = ...
    kDoAction: int = ...
    kDoNotDoAction: int = ...
    kGroup: int = ...
    kInvalid: int = ...
    kInvalidDAG: int = ...
    kInvalidPlug: int = ...
    kLast: int = ...
    kLastDAG: int = ...
    kLastPlug: int = ...
    kLockAttr: int = ...
    kLockNode: int = ...
    kPlugAttrValChange: int = ...
    kPlugConnect: int = ...
    kPlugDisconnect: int = ...
    kPlugLockAttr: int = ...
    kPlugRemoveAttr: int = ...
    kPlugRenameAttr: int = ...
    kPlugUnlockAttr: int = ...
    kRemoveAttr: int = ...
    kRename: int = ...
    kRenameAttr: int = ...
    kReparent: int = ...
    kUnGroup: int = ...
    kUnlockAttr: int = ...
    kUnlockNode: int = ...
    def nodeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registeringCallableScript(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCallableInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setNodeLockDAGQueryCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setNodeLockQueryCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPlugLockQueryCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRegisteringCallableScript(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def stealCallableInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def stopRegisteringCallableScript(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MLockMessage_className(*args: Any, **kwargs: Any) -> Any: ...
def MLockMessage_setNodeLockDAGQueryCallback(*args: Any, **kwargs: Any) -> Any: ...
def MLockMessage_setNodeLockQueryCallback(*args: Any, **kwargs: Any) -> Any: ...
def MLockMessage_setPlugLockQueryCallback(*args: Any, **kwargs: Any) -> Any: ...
class MMatrix(object):
    def __add__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __call__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __getitem__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    __hash__: NoneType = ...
    def __iadd__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __imul__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __isub__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __mul__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __ne__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __sub__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def adjoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def det3x3(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def det4x4(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def homogenize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def identity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inverse(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isEquivalent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isSingular(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    matrix: property = ...
    def setToIdentity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setToProduct(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transpose(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MMatrixArray(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __getitem__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def append(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSizeIncrement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def sizeIncrement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MMatrixArray_className(*args: Any, **kwargs: Any) -> Any: ...
def MMatrix_className(*args: Any, **kwargs: Any) -> Any: ...
MMatrix_kTol: float
class MMeshIntersector(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getClosestPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isCreated(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MMeshIntersector_className(*args: Any, **kwargs: Any) -> Any: ...
class MMeshIsectAccelParams(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    thisown: property = ...

class MMeshSmoothOptions(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def boundaryRule(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def divisions(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAlwaysSharp: int = ...
    kCatmullClark: int = ...
    kChaikin: int = ...
    kCreaseAll: int = ...
    kCreaseEdge: int = ...
    kInvalid: int = ...
    kInvalidBoundary: int = ...
    kInvalidCreaseMethod: int = ...
    kInvalidSubdivision: int = ...
    kLast: int = ...
    kLastBoundary: int = ...
    kLastCreaseMethod: int = ...
    kLastSubdivision: int = ...
    kLegacy: int = ...
    kNone: int = ...
    kNormal: int = ...
    kOpenSubdivCatmullClarkAdaptive: int = ...
    kOpenSubdivCatmullClarkUniform: int = ...
    kSharpEdges: int = ...
    kSharpEdgesAndCorners: int = ...
    def keepBorderEdge(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def keepHardEdge(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def openSubdivCreaseMethod(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def openSubdivFaceVaryingBoundary(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def openSubdivSmoothTriangles(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def openSubdivVertexBoundary(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def propEdgeHardness(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setBoundaryRule(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDivisions(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setKeepBorderEdge(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setKeepHardEdge(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setOpenSubdivCreaseMethod(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setOpenSubdivFaceVaryingBoundary(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setOpenSubdivSmoothTriangles(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setOpenSubdivVertexBoundary(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPropEdgeHardness(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSmoothUVs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSmoothness(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSubdivisionType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def smoothUVs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def smoothness(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def subdivisionType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MMeshSmoothOptions_className(*args: Any, **kwargs: Any) -> Any: ...
class MMessage(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentCallbackId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCallableInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kDefaultAction: int = ...
    kDoAction: int = ...
    kDoNotDoAction: int = ...
    def nodeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registeringCallableScript(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCallableInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRegisteringCallableScript(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def stealCallableInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def stopRegisteringCallableScript(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MMessageNode(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    fClientPtr: property = ...
    fHeadNode: property = ...
    fId: property = ...
    fNextNode: property = ...
    fServerPtr: property = ...
    fSubClientPtr: property = ...
    isValid: property = ...
    thisown: property = ...

def MMessage_className(*args: Any, **kwargs: Any) -> Any: ...
def MMessage_currentCallbackId(*args: Any, **kwargs: Any) -> Any: ...
def MMessage_getCallableInfo(*args: Any, **kwargs: Any) -> Any: ...
def MMessage_nodeCallbacks(*args: Any, **kwargs: Any) -> Any: ...
def MMessage_registeringCallableScript(*args: Any, **kwargs: Any) -> Any: ...
def MMessage_removeCallback(*args: Any, **kwargs: Any) -> Any: ...
def MMessage_removeCallbacks(*args: Any, **kwargs: Any) -> Any: ...
def MMessage_setCallableInfo(*args: Any, **kwargs: Any) -> Any: ...
def MMessage_setRegisteringCallableScript(*args: Any, **kwargs: Any) -> Any: ...
def MMessage_stealCallableInfo(*args: Any, **kwargs: Any) -> Any: ...
def MMessage_stopRegisteringCallableScript(*args: Any, **kwargs: Any) -> Any: ...
class MModelMessage(MMessage):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addAfterDuplicateCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addBeforeDuplicateCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addNodeAddedToModelCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addNodeRemovedFromModelCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentCallbackId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCallableInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kActiveListModified: int = ...
    kDefaultAction: int = ...
    kDoAction: int = ...
    kDoNotDoAction: int = ...
    def nodeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registeringCallableScript(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCallableInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRegisteringCallableScript(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def stealCallableInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def stopRegisteringCallableScript(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MModelMessage_addAfterDuplicateCallback(*args: Any, **kwargs: Any) -> Any: ...
def MModelMessage_addBeforeDuplicateCallback(*args: Any, **kwargs: Any) -> Any: ...
def MModelMessage_addCallback(*args: Any, **kwargs: Any) -> Any: ...
def MModelMessage_addNodeAddedToModelCallback(*args: Any, **kwargs: Any) -> Any: ...
def MModelMessage_addNodeRemovedFromModelCallback(*args: Any, **kwargs: Any) -> Any: ...
def MModelMessage_className(*args: Any, **kwargs: Any) -> Any: ...
class MNamespace(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getNamespaceFromName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getNamespaceObjects(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getNamespaces(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def makeNamepathAbsolute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def moveNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def namespaceExists(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def relativeNames(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def renameNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rootNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCurrentNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRelativeNames(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def stripNamespaceFromName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def validateName(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MNamespace_addNamespace(*args: Any, **kwargs: Any) -> Any: ...
def MNamespace_className(*args: Any, **kwargs: Any) -> Any: ...
def MNamespace_currentNamespace(*args: Any, **kwargs: Any) -> Any: ...
def MNamespace_getNamespaceFromName(*args: Any, **kwargs: Any) -> Any: ...
def MNamespace_getNamespaceObjects(*args: Any, **kwargs: Any) -> Any: ...
def MNamespace_getNamespaces(*args: Any, **kwargs: Any) -> Any: ...
def MNamespace_makeNamepathAbsolute(*args: Any, **kwargs: Any) -> Any: ...
def MNamespace_moveNamespace(*args: Any, **kwargs: Any) -> Any: ...
def MNamespace_namespaceExists(*args: Any, **kwargs: Any) -> Any: ...
def MNamespace_parentNamespace(*args: Any, **kwargs: Any) -> Any: ...
def MNamespace_relativeNames(*args: Any, **kwargs: Any) -> Any: ...
def MNamespace_removeNamespace(*args: Any, **kwargs: Any) -> Any: ...
def MNamespace_renameNamespace(*args: Any, **kwargs: Any) -> Any: ...
def MNamespace_rootNamespace(*args: Any, **kwargs: Any) -> Any: ...
def MNamespace_setCurrentNamespace(*args: Any, **kwargs: Any) -> Any: ...
def MNamespace_setRelativeNames(*args: Any, **kwargs: Any) -> Any: ...
def MNamespace_stripNamespaceFromName(*args: Any, **kwargs: Any) -> Any: ...
def MNamespace_validateName(*args: Any, **kwargs: Any) -> Any: ...
class MNodeCacheDisablingInfo(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def getCacheDisabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCacheDisabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMitigation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setReason(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MNodeCacheDisablingInfoHelper(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    kLastConnectionTest: int = ...
    kTestDefaultValue: int = ...
    kTestDirtyPlug: int = ...
    kTestHierarchy: int = ...
    kTestPlug: int = ...
    def setUnsafeNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUnsafeValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def testAnimatedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def testBooleanAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MNodeCacheDisablingInfoHelper_setUnsafeNode(*args: Any, **kwargs: Any) -> Any: ...
def MNodeCacheDisablingInfoHelper_setUnsafeValue(*args: Any, **kwargs: Any) -> Any: ...
def MNodeCacheDisablingInfoHelper_testAnimatedAttribute(*args: Any, **kwargs: Any) -> Any: ...
def MNodeCacheDisablingInfoHelper_testBooleanAttribute(*args: Any, **kwargs: Any) -> Any: ...
class MNodeCacheSetupInfo(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def getPreference(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getRequirement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kLastPreference: int = ...
    kLastRequirement: int = ...
    kSimulationSupport: int = ...
    kWantToCacheByDefault: int = ...
    def setPreference(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRequirement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MNodeClass(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addExtensionAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addToClassification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeExtensionAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeExtensionAttributeIfUnset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeFromClassification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MNodeClass_className(*args: Any, **kwargs: Any) -> Any: ...
class MNodeMessage(MMessage):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addAttributeAddedOrRemovedCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttributeChangedCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addKeyableChangeOverride(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addNameChangedCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addNodeAboutToDeleteCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addNodeDestroyedCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addNodeDirtyCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addNodeDirtyPlugCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addNodePreRemovalCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addUuidChangedCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentCallbackId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCallableInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAttributeAdded: int = ...
    kAttributeArrayAdded: int = ...
    kAttributeArrayRemoved: int = ...
    kAttributeEval: int = ...
    kAttributeKeyable: int = ...
    kAttributeLocked: int = ...
    kAttributeRemoved: int = ...
    kAttributeRenamed: int = ...
    kAttributeSet: int = ...
    kAttributeUnkeyable: int = ...
    kAttributeUnlocked: int = ...
    kConnectionBroken: int = ...
    kConnectionMade: int = ...
    kDefaultAction: int = ...
    kDoAction: int = ...
    kDoNotDoAction: int = ...
    kIncomingDirection: int = ...
    kKeyChangeInvalid: int = ...
    kKeyChangeLast: int = ...
    kLast: int = ...
    kMakeKeyable: int = ...
    kMakeUnkeyable: int = ...
    kOtherPlugSet: int = ...
    def nodeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registeringCallableScript(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCallableInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRegisteringCallableScript(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def stealCallableInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def stopRegisteringCallableScript(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MNodeMessage_addAttributeAddedOrRemovedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MNodeMessage_addAttributeChangedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MNodeMessage_addKeyableChangeOverride(*args: Any, **kwargs: Any) -> Any: ...
def MNodeMessage_addNameChangedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MNodeMessage_addNodeAboutToDeleteCallback(*args: Any, **kwargs: Any) -> Any: ...
def MNodeMessage_addNodeDestroyedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MNodeMessage_addNodeDirtyCallback(*args: Any, **kwargs: Any) -> Any: ...
def MNodeMessage_addNodeDirtyPlugCallback(*args: Any, **kwargs: Any) -> Any: ...
def MNodeMessage_addNodePreRemovalCallback(*args: Any, **kwargs: Any) -> Any: ...
def MNodeMessage_addUuidChangedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MNodeMessage_className(*args: Any, **kwargs: Any) -> Any: ...
class MNurbsIntersector(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getClosestPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getIntersect(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getIntersects(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isCreated(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MNurbsIntersector_className(*args: Any, **kwargs: Any) -> Any: ...
class MObject(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    __hash__: NoneType = ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def apiType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def apiTypeStr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasFn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNull(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kNullObj: property = ...
    thisown: property = ...

class MObjectArray(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __getitem__(self: Self, args: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def append(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSizeIncrement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def sizeIncrement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MObjectArray_className(*args: Any, **kwargs: Any) -> Any: ...
class MObjectHandle(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    __hash__: NoneType = ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hashCode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isAlive(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectHashCode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectRef(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MObjectHandle_objectHashCode(*args: Any, **kwargs: Any) -> Any: ...
class MObjectSetMessage(MMessage):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addSetMembersModifiedCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentCallbackId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCallableInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kDefaultAction: int = ...
    kDoAction: int = ...
    kDoNotDoAction: int = ...
    def nodeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registeringCallableScript(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCallableInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRegisteringCallableScript(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def stealCallableInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def stopRegisteringCallableScript(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MObjectSetMessage_addSetMembersModifiedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MObjectSetMessage_className(*args: Any, **kwargs: Any) -> Any: ...
class MParentingEdit(MEdit):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def editType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasEditData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isApplied(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFailed(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTopLevel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAddRemoveAttrEdit: int = ...
    kConnectDisconnectEdit: int = ...
    kFcurveEdit: int = ...
    kNullEdit: int = ...
    kParentEdit: int = ...
    kSetAttrEdit: int = ...
    def matches(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentedObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentedObjectName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setApplied(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFailed(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MParentingEdit_className(*args: Any, **kwargs: Any) -> Any: ...
class MPlane(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def directedDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def distance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def normal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPlane(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MPlane_className(*args: Any, **kwargs: Any) -> Any: ...
class MPlug(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __getitem__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    __hash__: NoneType = ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def array(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asBool(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asChar(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asDouble(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asFloat(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asInt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asInt64(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asMAngle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asMDataHandle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asMDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asMObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asMTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asShort(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectedTo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectionByPhysicalIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def constructHandle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def destinations(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def destinationsWithConversions(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def destructHandle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def elementByLogicalIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def elementByPhysicalIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def evaluateNumElements(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExistingArrayAttributeIndices(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getSetAttrCmds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def info(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isCachingFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isChannelBoxFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isCompound(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isConnected(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDefaultValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDestination(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDynamic(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isElement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFreeToChange(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFromReferencedFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isIgnoredWhenRendering(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isKeyable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNetworked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNull(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isProcedural(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isProxy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isSource(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAll: int = ...
    kChanged: int = ...
    kChildrenNotFreeToChange: int = ...
    kFreeToChange: int = ...
    kLastAttrSelector: int = ...
    kNonDefault: int = ...
    kNotFreeToChange: int = ...
    def logicalIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def node(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numChildren(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numConnectedChildren(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numConnectedElements(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numElements(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def partialName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def proxied(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def selectAncestorLogicalIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setBool(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCaching(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setChannelBox(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setChar(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDouble(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFloat(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInt64(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setKeyable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMAngle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMDataHandle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMPxData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setNumElements(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setShort(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def source(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def sourceWithConversion(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MPlugArray(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __getitem__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def append(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSizeIncrement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def sizeIncrement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MPlugArray_className(*args: Any, **kwargs: Any) -> Any: ...
def MPlug_className(*args: Any, **kwargs: Any) -> Any: ...
class MPoint(object):
    def __add__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __call__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    def __div__(self: Self, args: Any) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __getitem__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    __hash__: NoneType = ...
    def __iadd__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __imul__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __isub__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __mul__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __ne__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __sub__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __truediv__(self: Self, args: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cartesianize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def distanceTo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def homogenize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isEquivalent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def origin(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rationalize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    w: property = ...
    x: property = ...
    y: property = ...
    z: property = ...

class MPointArray(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __getitem__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def append(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSizeIncrement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def sizeIncrement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MPointArray_className(*args: Any, **kwargs: Any) -> Any: ...
class MPointOnMesh(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def faceIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getBarycentricCoords(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getNormal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def triangleIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MPointOnNurbs(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getUV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MPoint_className(*args: Any, **kwargs: Any) -> Any: ...
MPoint_kTol: float
class MPolyMessage(MMessage):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addColorSetChangedCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addPolyComponentIdChangedCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addPolyTopologyChangedCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addUVSetChangedCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentCallbackId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deletedId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCallableInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kColorSetAdded: int = ...
    kColorSetDeleted: int = ...
    kCurrentColorSetChanged: int = ...
    kCurrentUVSetChanged: int = ...
    kDefaultAction: int = ...
    kDoAction: int = ...
    kDoNotDoAction: int = ...
    kEdgeIndex: int = ...
    kFaceIndex: int = ...
    kLastErrorIndex: int = ...
    kUVSetAdded: int = ...
    kUVSetDeleted: int = ...
    kVertexIndex: int = ...
    def nodeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registeringCallableScript(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCallableInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRegisteringCallableScript(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def stealCallableInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def stopRegisteringCallableScript(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MPolyMessage_addColorSetChangedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MPolyMessage_addPolyComponentIdChangedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MPolyMessage_addPolyTopologyChangedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MPolyMessage_addUVSetChangedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MPolyMessage_className(*args: Any, **kwargs: Any) -> Any: ...
def MPolyMessage_deletedId(*args: Any, **kwargs: Any) -> Any: ...
class MProfiler(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addCategory(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def categoryRecording(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def eventBegin(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def eventDataAvailable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def eventEnd(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllCategories(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getBufferSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCPUId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCategoryIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCategoryInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCategoryName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDescription(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getEventCategory(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getEventCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getEventDuration(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getEventName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getEventTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getNumberOfCPUs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getThreadDuration(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getThreadId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDataFromFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isSignalEvent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kColorA_L1: int = ...
    kColorA_L2: int = ...
    kColorA_L3: int = ...
    kColorB_L1: int = ...
    kColorB_L2: int = ...
    kColorB_L3: int = ...
    kColorC_L1: int = ...
    kColorC_L2: int = ...
    kColorC_L3: int = ...
    kColorCount: int = ...
    kColorD_L1: int = ...
    kColorD_L2: int = ...
    kColorD_L3: int = ...
    kColorE_L1: int = ...
    kColorE_L2: int = ...
    kColorE_L3: int = ...
    kColorG_L1: int = ...
    kColorG_L2: int = ...
    kColorG_L3: int = ...
    def loadRecording(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def recordingActive(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCategory(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def resetRecording(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def saveRecording(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setBufferSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCategoryRecording(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRecordingActive(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def signalEvent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MProfiler_addCategory(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_categoryRecording(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_className(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_eventBegin(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_eventDataAvailable(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_eventEnd(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_getAllCategories(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_getBufferSize(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_getCPUId(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_getCategoryIndex(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_getCategoryInfo(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_getCategoryName(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_getColor(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_getDescription(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_getEventCategory(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_getEventCount(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_getEventDuration(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_getEventName(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_getEventTime(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_getNumberOfCPUs(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_getThreadDuration(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_getThreadId(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_isDataFromFile(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_isSignalEvent(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_loadRecording(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_recordingActive(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_removeCategory(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_resetRecording(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_saveRecording(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_setBufferSize(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_setCategoryRecording(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_setRecordingActive(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_signalEvent(*args: Any, **kwargs: Any) -> Any: ...
def MProfilingContextManager(categoryId: Any, colorIndex: Any, eventName: Any, description: Any = ..., associatedNode: Any = ...) -> Any:
    """Context manager that defines a profiling scope around a block of code.

    	Parameters
    	----------
    	categoryId : int
    		The index of the category which the event belongs to.
    	colorIndex : MProfiler.ProfilingColor
    		The color to draw the profiling result in Profiler Window.
    	eventName : string
    		The name of the event.
    	description : string (optional)
    		Description of the event.
    	associatedNode : MObject (optional)
    		The dependency node associated with the event.

    	Example
    	-------
    	>>> import maya.OpenMaya as OM
    	>>> categoryIndex = OM.MProfiler.addCategory("Python Scripts")
    	>>> def Factorial(number):
    	...     # Instrument the following block of code:
    	...     with OM.MProfilingContextManager(categoryIndex, OM.MProfiler.kColorE_L1, "Factorial", "FactorialDesc"):
    	...             result = 1
    	...             for i in xrange(2, number+1):
    	...                     result *= i
    	...     return result
    	...
    	>>>
    """
class MProfilingScope(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MProfilingScope_className(*args: Any, **kwargs: Any) -> Any: ...
class MQuaternion(object):
    def __add__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __getitem__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    __hash__: NoneType = ...
    def __imul__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __mul__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __ne__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __neg__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __sub__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def asEulerRotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def conjugate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def conjugateIt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def exp(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAxisAngle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    identity: MQuaternion = ...
    def inverse(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def invertIt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isEquivalent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def log(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def negateIt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def normal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def normalizeIt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scaleIt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAxisAngle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setToXAxis(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setToYAxis(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setToZAxis(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    w: property = ...
    x: property = ...
    y: property = ...
    z: property = ...

class MRampAttribute(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addEntries(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createColorRamp(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createCurveRamp(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createRamp(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteEntries(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getColorAtPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getEntries(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getNumEntries(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getValueAtPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isColorRamp(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isCurveRamp(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kLinear: int = ...
    kNone: int = ...
    kSmooth: int = ...
    kSpline: int = ...
    def pack(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def sampleColorRamp(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def sampleValueRamp(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setColorAtIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInterpolationAtIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPositionAtIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRamp(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setValueAtIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def sort(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MRampAttribute_className(*args: Any, **kwargs: Any) -> Any: ...
def MRampAttribute_createColorRamp(*args: Any, **kwargs: Any) -> Any: ...
def MRampAttribute_createCurveRamp(*args: Any, **kwargs: Any) -> Any: ...
def MRampAttribute_createRamp(*args: Any, **kwargs: Any) -> Any: ...
class MRenderPassDef(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addDoubleParameter(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addFloatParameter(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addIntParameter(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAttributeType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDescription(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getGroup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getID(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getImplementation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MRenderPassDef_className(*args: Any, **kwargs: Any) -> Any: ...
class MRenderPassRegistry(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getRenderPassDefinition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registerRenderPassDefinition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MRenderPassRegistry_className(*args: Any, **kwargs: Any) -> Any: ...
def MRenderPassRegistry_getRenderPassDefinition(*args: Any, **kwargs: Any) -> Any: ...
def MRenderPassRegistry_registerRenderPassDefinition(*args: Any, **kwargs: Any) -> Any: ...
class MRichSelection(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getSelection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getSymmetry(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getSymmetryMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getSymmetryPlane(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSelection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MRichSelection_className(*args: Any, **kwargs: Any) -> Any: ...
class MSceneMessage(MMessage):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addCheckCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addCheckFileCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addCheckReferenceCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addConnectionFailedCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addNamespaceRenamedCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addReferenceCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addStringArrayCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentCallbackId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCallableInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAfterCreateReference: int = ...
    kAfterCreateReferenceAndRecordEdits: int = ...
    kAfterExport: int = ...
    kAfterExportReference: int = ...
    kAfterFileRead: int = ...
    kAfterImport: int = ...
    kAfterImportReference: int = ...
    kAfterLoadReference: int = ...
    kAfterLoadReferenceAndRecordEdits: int = ...
    kAfterNew: int = ...
    kAfterOpen: int = ...
    kAfterPluginLoad: int = ...
    kAfterPluginUnload: int = ...
    kAfterReference: int = ...
    kAfterRemoveReference: int = ...
    kAfterSave: int = ...
    kAfterSceneReadAndRecordEdits: int = ...
    kAfterSoftwareFrameRender: int = ...
    kAfterSoftwareRender: int = ...
    kAfterUnloadReference: int = ...
    kBeforeCreateReference: int = ...
    kBeforeCreateReferenceAndRecordEdits: int = ...
    kBeforeCreateReferenceCheck: int = ...
    kBeforeExport: int = ...
    kBeforeExportCheck: int = ...
    kBeforeExportReference: int = ...
    kBeforeFileRead: int = ...
    kBeforeImport: int = ...
    kBeforeImportCheck: int = ...
    kBeforeImportReference: int = ...
    kBeforeLoadReference: int = ...
    kBeforeLoadReferenceAndRecordEdits: int = ...
    kBeforeLoadReferenceCheck: int = ...
    kBeforeNew: int = ...
    kBeforeNewCheck: int = ...
    kBeforeOpen: int = ...
    kBeforeOpenCheck: int = ...
    kBeforePluginLoad: int = ...
    kBeforePluginUnload: int = ...
    kBeforeReference: int = ...
    kBeforeReferenceCheck: int = ...
    kBeforeRemoveReference: int = ...
    kBeforeSave: int = ...
    kBeforeSaveCheck: int = ...
    kBeforeSoftwareFrameRender: int = ...
    kBeforeSoftwareRender: int = ...
    kBeforeUnloadReference: int = ...
    kDefaultAction: int = ...
    kDoAction: int = ...
    kDoNotDoAction: int = ...
    kExportStarted: int = ...
    kLast: int = ...
    kMayaExiting: int = ...
    kMayaInitialized: int = ...
    kSceneUpdate: int = ...
    kSoftwareRenderInterrupted: int = ...
    def nodeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registeringCallableScript(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCallableInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRegisteringCallableScript(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def stealCallableInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def stopRegisteringCallableScript(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MSceneMessage_addCallback(*args: Any, **kwargs: Any) -> Any: ...
def MSceneMessage_addCheckCallback(*args: Any, **kwargs: Any) -> Any: ...
def MSceneMessage_addCheckFileCallback(*args: Any, **kwargs: Any) -> Any: ...
def MSceneMessage_addCheckReferenceCallback(*args: Any, **kwargs: Any) -> Any: ...
def MSceneMessage_addConnectionFailedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MSceneMessage_addNamespaceRenamedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MSceneMessage_addReferenceCallback(*args: Any, **kwargs: Any) -> Any: ...
def MSceneMessage_addStringArrayCallback(*args: Any, **kwargs: Any) -> Any: ...
def MSceneMessage_className(*args: Any, **kwargs: Any) -> Any: ...
class MScriptUtil(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def asBool(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asBoolPtr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asCharPtr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asDouble(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asDouble2Ptr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asDouble3Ptr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asDouble4Ptr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asDoublePtr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asFloat(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asFloat2Ptr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asFloat3Ptr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asFloat4Ptr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asFloatPtr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asInt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asInt2Ptr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asInt3Ptr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asInt4Ptr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asIntPtr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asShort(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asShort2Ptr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asShort3Ptr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asShort4Ptr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asShortPtr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asUcharPtr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asUint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asUint2Ptr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asUint3Ptr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asUint4Ptr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asUintPtr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asUshortPtr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createFloatArrayFromList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createFloatMatrixFromList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createFromDouble(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createFromInt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createFromList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createIntArrayFromList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createMatrixFromList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getBool(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getBoolArrayItem(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getChar(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCharArrayItem(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDouble(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDouble2ArrayItem(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDouble3ArrayItem(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDouble4ArrayItem(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDoubleArrayItem(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFloat(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFloat2ArrayItem(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFloat3ArrayItem(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFloat4ArrayItem(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFloatArrayItem(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInt2ArrayItem(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInt3ArrayItem(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInt4ArrayItem(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getIntArrayItem(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getShort(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getShort2ArrayItem(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getShort3ArrayItem(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getShort4ArrayItem(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getShortArrayItem(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getUchar(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getUcharArrayItem(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getUint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getUint2ArrayItem(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getUint3ArrayItem(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getUint4ArrayItem(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getUintArrayItem(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getUshortArrayItem(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setBool(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setBoolArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setChar(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCharArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDouble(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDouble2ArrayItem(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDouble3ArrayItem(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDouble4ArrayItem(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoubleArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFloat(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFloat2ArrayItem(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFloat3ArrayItem(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFloat4ArrayItem(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFloatArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInt2ArrayItem(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInt3ArrayItem(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInt4ArrayItem(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIntArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setShort(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setShort2ArrayItem(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setShort3ArrayItem(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setShort4ArrayItem(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setShortArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUchar(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUcharArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUint2ArrayItem(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUint3ArrayItem(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUint4ArrayItem(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUintArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUshortArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MScriptUtil_createFloatArrayFromList(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_createFloatMatrixFromList(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_createIntArrayFromList(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_createMatrixFromList(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getBool(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getBoolArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getChar(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getCharArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getDouble(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getDouble2ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getDouble3ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getDouble4ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getDoubleArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getFloat(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getFloat2ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getFloat3ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getFloat4ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getFloatArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getInt(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getInt2ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getInt3ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getInt4ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getIntArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getShort(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getShort2ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getShort3ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getShort4ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getShortArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getUchar(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getUcharArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getUint(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getUint2ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getUint3ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getUint4ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getUintArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getUshortArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setBool(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setBoolArray(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setChar(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setCharArray(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setDouble(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setDouble2ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setDouble3ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setDouble4ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setDoubleArray(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setFloat(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setFloat2ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setFloat3ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setFloat4ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setFloatArray(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setInt(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setInt2ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setInt3ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setInt4ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setIntArray(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setShort(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setShort2ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setShort3ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setShort4ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setShortArray(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setUchar(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setUcharArray(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setUint(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setUint2ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setUint3ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setUint4ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setUintArray(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setUshortArray(*args: Any, **kwargs: Any) -> Any: ...
class MSelectionList(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def add(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDagPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDependNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getSelectionStrings(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasItem(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasItemPartly(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def intersect(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isEmpty(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kMergeNormal: int = ...
    kRemoveFromList: int = ...
    kXORWithList: int = ...
    def length(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def merge(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def replace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def toggle(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MSelectionList_className(*args: Any, **kwargs: Any) -> Any: ...
class MSelectionMask(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __or__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addMask(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterSelectionType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getSelectionTypePriority(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def intersects(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kSelectAnimAny: int = ...
    kSelectAnimCurves: int = ...
    kSelectAnimInTangents: int = ...
    kSelectAnimKeyframes: int = ...
    kSelectAnimMask: int = ...
    kSelectAnimOutTangents: int = ...
    kSelectCVs: int = ...
    kSelectCameras: int = ...
    kSelectClusters: int = ...
    kSelectCollisionModels: int = ...
    kSelectComponentsMask: int = ...
    kSelectCurveKnots: int = ...
    kSelectCurveParmPoints: int = ...
    kSelectCurves: int = ...
    kSelectCurvesOnSurfaces: int = ...
    kSelectDynamicConstraints: int = ...
    kSelectEdges: int = ...
    kSelectEditPoints: int = ...
    kSelectEmitters: int = ...
    kSelectFacets: int = ...
    kSelectFields: int = ...
    kSelectFluids: int = ...
    kSelectFollicles: int = ...
    kSelectGuideLines: int = ...
    kSelectHairSystems: int = ...
    kSelectHandles: int = ...
    kSelectHulls: int = ...
    kSelectIkEndEffectors: int = ...
    kSelectIkHandles: int = ...
    kSelectIsoparms: int = ...
    kSelectJointPivots: int = ...
    kSelectJoints: int = ...
    kSelectLatticePoints: int = ...
    kSelectLattices: int = ...
    kSelectLights: int = ...
    kSelectLocalAxis: int = ...
    kSelectLocators: int = ...
    kSelectManipulators: int = ...
    kSelectMeshComponents: int = ...
    kSelectMeshEdges: int = ...
    kSelectMeshFaces: int = ...
    kSelectMeshFreeEdges: int = ...
    kSelectMeshLines: int = ...
    kSelectMeshUVs: int = ...
    kSelectMeshVerts: int = ...
    kSelectMeshes: int = ...
    kSelectNCloths: int = ...
    kSelectNParticles: int = ...
    kSelectNRigids: int = ...
    kSelectNurbsCurves: int = ...
    kSelectNurbsSurfaces: int = ...
    kSelectObjectGroups: int = ...
    kSelectObjectsMask: int = ...
    kSelectOrientationLocators: int = ...
    kSelectPPStrokes: int = ...
    kSelectParticleShapes: int = ...
    kSelectParticles: int = ...
    kSelectPivots: int = ...
    kSelectPointsForGravity: int = ...
    kSelectPointsOnCurvesForGravity: int = ...
    kSelectPointsOnSurfacesForGravity: int = ...
    kSelectRigidBodies: int = ...
    kSelectRigidConstraints: int = ...
    kSelectRotatePivots: int = ...
    kSelectScalePivots: int = ...
    kSelectSculpts: int = ...
    kSelectSelectHandles: int = ...
    kSelectSketchPlanes: int = ...
    kSelectSprings: int = ...
    kSelectSubdiv: int = ...
    kSelectSubdivMeshEdges: int = ...
    kSelectSubdivMeshFaces: int = ...
    kSelectSubdivMeshMaps: int = ...
    kSelectSubdivMeshPoints: int = ...
    kSelectSurfaceEdge: int = ...
    kSelectSurfaceKnots: int = ...
    kSelectSurfaceParmPoints: int = ...
    kSelectSurfaceRange: int = ...
    kSelectSurfaces: int = ...
    kSelectTemplates: int = ...
    kSelectTextures: int = ...
    kSelectUVLocators: int = ...
    kSelectVertices: int = ...
    kSelectXYZLocators: int = ...
    def registerSelectionType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMask(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MSelectionMask_deregisterSelectionType(*args: Any, **kwargs: Any) -> Any: ...
def MSelectionMask_getSelectionTypePriority(*args: Any, **kwargs: Any) -> Any: ...
def MSelectionMask_registerSelectionType(*args: Any, **kwargs: Any) -> Any: ...
class MSetAttrEdit(MEdit):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def editType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasEditData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isApplied(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFailed(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTopLevel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAddRemoveAttrEdit: int = ...
    kConnectDisconnectEdit: int = ...
    kFcurveEdit: int = ...
    kNullEdit: int = ...
    kParentEdit: int = ...
    kSetAttrEdit: int = ...
    def matches(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def plug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def plugName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setApplied(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFailed(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MSetAttrEdit_className(*args: Any, **kwargs: Any) -> Any: ...
class MSpace(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    kInvalid: int = ...
    kLast: int = ...
    kObject: int = ...
    kPostTransform: int = ...
    kPreTransform: int = ...
    kTransform: int = ...
    kWorld: int = ...
    thisown: property = ...

class MStreamUtils(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def readChar(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def readCharBuffer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def readDouble(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def readFloat(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def readInt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def stdErrorStream(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def stdOutStream(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def writeChar(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def writeCharBuffer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def writeDouble(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def writeFloat(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def writeInt(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MStreamUtils_readChar(*args: Any, **kwargs: Any) -> Any: ...
def MStreamUtils_readCharBuffer(*args: Any, **kwargs: Any) -> Any: ...
def MStreamUtils_readDouble(*args: Any, **kwargs: Any) -> Any: ...
def MStreamUtils_readFloat(*args: Any, **kwargs: Any) -> Any: ...
def MStreamUtils_readInt(*args: Any, **kwargs: Any) -> Any: ...
def MStreamUtils_stdErrorStream(*args: Any, **kwargs: Any) -> Any: ...
def MStreamUtils_stdOutStream(*args: Any, **kwargs: Any) -> Any: ...
def MStreamUtils_writeChar(*args: Any, **kwargs: Any) -> Any: ...
def MStreamUtils_writeCharBuffer(*args: Any, **kwargs: Any) -> Any: ...
def MStreamUtils_writeDouble(*args: Any, **kwargs: Any) -> Any: ...
def MStreamUtils_writeFloat(*args: Any, **kwargs: Any) -> Any: ...
def MStreamUtils_writeInt(*args: Any, **kwargs: Any) -> Any: ...
class MSyntax(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addArg(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canEdit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canQuery(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableEdit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableQuery(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAngle: int = ...
    kBoolean: int = ...
    kDistance: int = ...
    kDouble: int = ...
    kInvalidArgType: int = ...
    kInvalidObjectFormat: int = ...
    kLastArgType: int = ...
    kLastObjectFormat: int = ...
    kLong: int = ...
    kNoArg: int = ...
    kNone: int = ...
    kSelectionItem: int = ...
    kSelectionList: int = ...
    kString: int = ...
    kStringObjects: int = ...
    kTime: int = ...
    kUnsigned: int = ...
    def makeFlagMultiUse(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def makeFlagQueryWithFullArgs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def maxObjects(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def minObjects(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxObjects(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMinObjects(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def useSelectionAsDefault(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MSyntax_className(*args: Any, **kwargs: Any) -> Any: ...
class MTesselationParams(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    fsDefaultTesselationParams: property = ...
    kGeneralFormat: int = ...
    kLastFlag: int = ...
    kQuads: int = ...
    kSpanEquiSpaced: int = ...
    kStandardFitFormat: int = ...
    kSurface3DDistance: int = ...
    kSurface3DEquiSpaced: int = ...
    kSurfaceEquiSpaced: int = ...
    kTriangleCountFormat: int = ...
    kTriangles: int = ...
    kUseChordHeightRatio: int = ...
    kUseEdgeSmooth: int = ...
    kUseFractionalTolerance: int = ...
    kUseMaxEdgeLength: int = ...
    kUseMaxNumberPolys: int = ...
    kUseMaxSubdivisionLevel: int = ...
    kUseMaxUVRectangleSize: int = ...
    kUseMinEdgeLength: int = ...
    kUseMinScreenSize: int = ...
    kUseRelativeTolerance: int = ...
    kUseTriangleEdgeSwapping: int = ...
    def set3DDelta(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setBoundingBoxDiagonal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setChordHeightRatio(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setEdgeSmoothFactor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFitTolerance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFormatType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxEdgeLength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxNumberPolys(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxSubdivisionLevel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxUVRectangleSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMinEdgeLength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMinScreenSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setOutputType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRelativeFitTolerance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setStdChordHeightRatio(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setStdFractionalTolerance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setStdMinEdgeLength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSubdivisionFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTriangleCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUDistanceFraction(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUIsoparmType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUNumber(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setVDistanceFraction(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setVIsoparmType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setVNumber(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setWorldspaceToScreenTransform(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MTesselationParams_className(*args: Any, **kwargs: Any) -> Any: ...
class MTime(object):
    def __add__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    def __div__(self: Self, args: Any) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    __hash__: NoneType = ...
    def __iadd__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __idiv__(self: Self, args: Any) -> Any: ...
    def __imul__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __isub__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __itruediv__(self: Self, args: Any) -> Any: ...
    def __le__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __lt__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    __module__: str = ...
    def __mul__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __ne__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __sub__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __truediv__(self: Self, args: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def asUnits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    k100FPS: int = ...
    k10FPS: int = ...
    k1200FPS: int = ...
    k120FPS: int = ...
    k125FPS: int = ...
    k12FPS: int = ...
    k1500FPS: int = ...
    k150FPS: int = ...
    k15FPS: int = ...
    k16FPS: int = ...
    k2000FPS: int = ...
    k200FPS: int = ...
    k20FPS: int = ...
    k23_976FPS: int = ...
    k240FPS: int = ...
    k24FPS: int = ...
    k250FPS: int = ...
    k25FPS: int = ...
    k29_97DF: int = ...
    k29_97FPS: int = ...
    k2FPS: int = ...
    k3000FPS: int = ...
    k300FPS: int = ...
    k30FPS: int = ...
    k375FPS: int = ...
    k3FPS: int = ...
    k400FPS: int = ...
    k40FPS: int = ...
    k44100FPS: int = ...
    k47_952FPS: int = ...
    k48000FPS: int = ...
    k48FPS: int = ...
    k4FPS: int = ...
    k500FPS: int = ...
    k50FPS: int = ...
    k59_94FPS: int = ...
    k5FPS: int = ...
    k6000FPS: int = ...
    k600FPS: int = ...
    k60FPS: int = ...
    k6FPS: int = ...
    k750FPS: int = ...
    k75FPS: int = ...
    k80FPS: int = ...
    k8FPS: int = ...
    k90FPS: int = ...
    kFilm: int = ...
    kGames: int = ...
    kHours: int = ...
    kInvalid: int = ...
    kLast: int = ...
    kMilliseconds: int = ...
    kMinutes: int = ...
    kNTSCField: int = ...
    kNTSCFrame: int = ...
    kPALField: int = ...
    kPALFrame: int = ...
    kSeconds: int = ...
    kShowScan: int = ...
    kUserDef: int = ...
    def setUIUnit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUnit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def ticksPerSecond(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uiUnit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def unit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MTimeArray(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __getitem__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def append(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSizeIncrement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def sizeIncrement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MTimeArray_className(*args: Any, **kwargs: Any) -> Any: ...
class MTimeRange(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    __hash__: NoneType = ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __or__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def bounds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def contains(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def empty(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def intersects(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MTime_className(*args: Any, **kwargs: Any) -> Any: ...
def MTime_setUIUnit(*args: Any, **kwargs: Any) -> Any: ...
def MTime_ticksPerSecond(*args: Any, **kwargs: Any) -> Any: ...
def MTime_uiUnit(*args: Any, **kwargs: Any) -> Any: ...
class MTimer(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    __hash__: NoneType = ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def beginTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def elapsedTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def endTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MTimerMessage(MMessage):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addTimerCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentCallbackId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCallableInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kDefaultAction: int = ...
    kDoAction: int = ...
    kDoNotDoAction: int = ...
    def nodeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registeringCallableScript(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCallableInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRegisteringCallableScript(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSleepCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def sleepCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def stealCallableInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def stopRegisteringCallableScript(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MTimerMessage_addTimerCallback(*args: Any, **kwargs: Any) -> Any: ...
def MTimerMessage_className(*args: Any, **kwargs: Any) -> Any: ...
def MTimerMessage_setSleepCallback(*args: Any, **kwargs: Any) -> Any: ...
def MTimerMessage_sleepCallback(*args: Any, **kwargs: Any) -> Any: ...
class MTransformationMatrix(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    __hash__: NoneType = ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addRotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addRotationQuaternion(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addScale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addShear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asMatrixInverse(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asRotateMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asScaleMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def eulerRotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getRotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getRotationQuaternion(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getScale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getShear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    identity: MTransformationMatrix = ...
    def isEquivalent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kInvalid: int = ...
    kLast: int = ...
    kXYZ: int = ...
    kXZY: int = ...
    kYXZ: int = ...
    kYZX: int = ...
    kZXY: int = ...
    kZYX: int = ...
    def reorderRotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotatePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotatePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateTo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotationOrder(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotationOrientation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scalePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scalePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotatePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotatePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotationOrientation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotationQuaternion(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScalePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScalePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setShear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setToRotationAxis(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def translation(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MTransformationMatrix_className(*args: Any, **kwargs: Any) -> Any: ...
MTransformationMatrix_kTol: float
class MTrimBoundaryArray(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __getitem__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def append(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getMergedBoundary(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reserve(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def size(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MTrimBoundaryArray_className(*args: Any, **kwargs: Any) -> Any: ...
class MTypeId(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    __hash__: NoneType = ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def id(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MTypeId_className(*args: Any, **kwargs: Any) -> Any: ...
class MURI(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    __hash__: NoneType = ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addQueryItem(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllQueryItemKeys(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllQueryItemValues(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAuthority(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDirectory(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFileName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFragment(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getHost(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPassword(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPort(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getQueryItemValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getQueryPairDelimiter(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getQueryValueDelimiter(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getScheme(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getUserInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getUserName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isEmpty(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValidURI(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAllQueryItems(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeQueryItem(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAuthority(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDirectory(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFileName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFragment(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setHost(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPassword(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPort(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setQueryDelimiters(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScheme(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setURI(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUserInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUserName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MURI_className(*args: Any, **kwargs: Any) -> Any: ...
def MURI_isValidURI(*args: Any, **kwargs: Any) -> Any: ...
class MUint64Array(object):
    def __add__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    def __delitem__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __getitem__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    __hash__: NoneType = ...
    def __iadd__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __len__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __radd__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __setitem__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def append(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSizeIncrement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def sizeIncrement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MUint64Array_className(*args: Any, **kwargs: Any) -> Any: ...
class MUintArray(object):
    def __add__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    def __delitem__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __getitem__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    __hash__: NoneType = ...
    def __iadd__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __len__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __radd__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __setitem__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def append(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSizeIncrement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def sizeIncrement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MUintArray_className(*args: Any, **kwargs: Any) -> Any: ...
class MUserData(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteAfterUse(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDeleteAfterUse(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MUserData_className(*args: Any, **kwargs: Any) -> Any: ...
class MUserEventMessage(MMessage):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addUserEventCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentCallbackId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterUserEvent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCallableInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isUserEvent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kDefaultAction: int = ...
    kDoAction: int = ...
    kDoNotDoAction: int = ...
    def nodeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postUserEvent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registerUserEvent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registeringCallableScript(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCallableInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRegisteringCallableScript(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def stealCallableInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def stopRegisteringCallableScript(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MUserEventMessage_addUserEventCallback(*args: Any, **kwargs: Any) -> Any: ...
def MUserEventMessage_className(*args: Any, **kwargs: Any) -> Any: ...
def MUserEventMessage_deregisterUserEvent(*args: Any, **kwargs: Any) -> Any: ...
def MUserEventMessage_isUserEvent(*args: Any, **kwargs: Any) -> Any: ...
def MUserEventMessage_postUserEvent(*args: Any, **kwargs: Any) -> Any: ...
def MUserEventMessage_registerUserEvent(*args: Any, **kwargs: Any) -> Any: ...
class MUuid(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    __hash__: NoneType = ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def asString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def generate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def valid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MUuid_className(*args: Any, **kwargs: Any) -> Any: ...
class MVector(object):
    def __add__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __call__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    def __div__(self: Self, args: Any) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __getitem__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    __hash__: NoneType = ...
    def __iadd__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __idiv__(self: Self, args: Any) -> Any: ...
    def __imul__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __isub__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __itruediv__(self: Self, args: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __mul__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __ne__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __neg__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __sub__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __truediv__(self: Self, args: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def __xor__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def angle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isEquivalent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isParallel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kWaxis: int = ...
    kXaxis: int = ...
    kYaxis: int = ...
    kZaxis: int = ...
    def length(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def normal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def normalize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def one(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateTo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transformAsNormal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    x: property = ...
    def xAxis(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def xNegAxis(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    y: property = ...
    def yAxis(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def yNegAxis(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    z: property = ...
    def zAxis(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def zNegAxis(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def zero(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MVectorArray(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __getitem__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def append(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSizeIncrement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def sizeIncrement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MVectorArray_className(*args: Any, **kwargs: Any) -> Any: ...
MVector_kTol: float
class MWeight(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def influence(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def seam(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInfluence(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSeam(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MWeight_className(*args: Any, **kwargs: Any) -> Any: ...
NULL: int
STRICT: int
class _SwigNonDynamicMeta:
    @property
    def __abstractmethods__(*args: Any, **kwargs: Any) -> Any: ...
    @__abstractmethods__.setter
    def __abstractmethods__(*args: Any, **kwargs: Any) -> Any: ...
    class type:
        @property
        def __abstractmethods__(*args: Any, **kwargs: Any) -> Any: ...
        @__abstractmethods__.setter
        def __abstractmethods__(*args: Any, **kwargs: Any) -> Any: ...
        class object:
            def __delattr__(self: Self, name: Any) -> Any:
                """Implement delattr(self, name)."""
            def __dir__(self: Self) -> Any:
                """Default dir() implementation."""
            __doc__: str = ...
            def __eq__(self: Self, value: Any) -> Any:
                """Return self==value."""
            def __format__(self: Self, format_spec: Any) -> Any:
                """Default object formatter."""
            def __ge__(self: Self, value: Any) -> Any:
                """Return self>=value."""
            def __getattribute__(self: Self, name: Any) -> Any:
                """Return getattr(self, name)."""
            def __gt__(self: Self, value: Any) -> Any:
                """Return self>value."""
            def __hash__(self: Self) -> Any:
                """Return hash(self)."""
            def __init__(self: Self, args: Any, kwargs: Any) -> Any:
                """Initialize self.  See help(type(self)) for accurate signature."""
            def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
                """This method is called when a class is subclassed.

                The default implementation does nothing. It may be
                overridden to extend subclasses.
                """
            def __le__(self: Self, value: Any) -> Any:
                """Return self<=value."""
            def __lt__(self: Self, value: Any) -> Any:
                """Return self<value."""
            def __ne__(self: Self, value: Any) -> Any:
                """Return self!=value."""
            def __new__(self: Self, args: Any, kwargs: Any) -> Any:
                """Create and return a new object.  See help(type) for accurate signature."""
            def __reduce__(self: Self) -> Any:
                """Helper for pickle."""
            def __reduce_ex__(self: Self, protocol: Any) -> Any:
                """Helper for pickle."""
            def __repr__(self: Self) -> Any:
                """Return repr(self)."""
            def __setattr__(self: Self, name: Any, value: Any) -> Any:
                """Implement setattr(self, name, value)."""
            def __sizeof__(self: Self) -> Any:
                """Size of object in memory, in bytes."""
            def __str__(self: Self) -> Any:
                """Return str(self)."""
            def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
                """Abstract classes can override this to customize issubclass().

                This is invoked early on by abc.ABCMeta.__subclasscheck__().
                It should return True, False or NotImplemented.  If it returns
                NotImplemented, the normal algorithm is used.  Otherwise, it
                overrides the normal algorithm (and the outcome is cached).
                """

        __bases__: tuple = ...
        __basicsize__: int = ...
        def __call__(self: Self, args: Any, kwargs: Any) -> Any:
            """Call self as a function."""
        def __delattr__(self: Self, name: Any) -> Any:
            """Implement delattr(self, name)."""
        __dict__: mappingproxy = ...
        __dictoffset__: int = ...
        def __dir__(self: Self) -> Any:
            """Specialized __dir__ implementation for types."""
        __doc__: str = ...
        def __eq__(self: Self, value: Any) -> Any:
            """Return self==value."""
        __flags__: int = ...
        def __format__(self: Self, format_spec: Any) -> Any:
            """Default object formatter."""
        def __ge__(self: Self, value: Any) -> Any:
            """Return self>=value."""
        def __getattribute__(self: Self, name: Any) -> Any:
            """Return getattr(self, name)."""
        def __gt__(self: Self, value: Any) -> Any:
            """Return self>value."""
        def __hash__(self: Self) -> Any:
            """Return hash(self)."""
        def __init__(self: Self, args: Any, kwargs: Any) -> Any:
            """Initialize self.  See help(type(self)) for accurate signature."""
        def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
            """This method is called when a class is subclassed.

            The default implementation does nothing. It may be
            overridden to extend subclasses.
            """
        def __instancecheck__(self: Self, instance: Any) -> Any:
            """Check if an object is an instance."""
        __itemsize__: int = ...
        def __le__(self: Self, value: Any) -> Any:
            """Return self<=value."""
        def __lt__(self: Self, value: Any) -> Any:
            """Return self<value."""
        __module__: str = ...
        __mro__: tuple = ...
        __name__: str = ...
        def __ne__(self: Self, value: Any) -> Any:
            """Return self!=value."""
        def __new__(self: Self, args: Any, kwargs: Any) -> Any:
            """Create and return a new object.  See help(type) for accurate signature."""
        def __prepare__(self: Self, *args: Any, **kwargs: Any) -> Any:
            """__prepare__() -> dict
            used to create the namespace for the class statement
            """
        __qualname__: str = ...
        def __reduce__(self: Self) -> Any:
            """Helper for pickle."""
        def __reduce_ex__(self: Self, protocol: Any) -> Any:
            """Helper for pickle."""
        def __repr__(self: Self) -> Any:
            """Return repr(self)."""
        def __setattr__(self: Self, name: Any, value: Any) -> Any:
            """Implement setattr(self, name, value)."""
        def __sizeof__(self: Self) -> Any:
            """Return memory consumption of the type object."""
        def __str__(self: Self) -> Any:
            """Return str(self)."""
        def __subclasscheck__(self: Self, subclass: Any) -> Any:
            """Check if a class is a subclass."""
        def __subclasses__(self: Self) -> Any:
            """Return a list of immediate subclasses."""
        def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
            """Abstract classes can override this to customize issubclass().

            This is invoked early on by abc.ABCMeta.__subclasscheck__().
            It should return True, False or NotImplemented.  If it returns
            NotImplemented, the normal algorithm is used.  Otherwise, it
            overrides the normal algorithm (and the outcome is cached).
            """
        __text_signature__: NoneType = ...
        __weakrefoffset__: int = ...
        def mro(self: Self) -> Any:
            """Return a type's method resolution order."""

    __bases__: tuple = ...
    __basicsize__: int = ...
    def __call__(self: Self, args: Any, kwargs: Any) -> Any:
        """Call self as a function."""
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    __dictoffset__: int = ...
    def __dir__(self: Self) -> Any:
        """Specialized __dir__ implementation for types."""
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    __flags__: int = ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any, kwargs: Any) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __instancecheck__(self: Self, instance: Any) -> Any:
        """Check if an object is an instance."""
    __itemsize__: int = ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    __mro__: tuple = ...
    __name__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __prepare__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """__prepare__() -> dict
        used to create the namespace for the class statement
        """
    __qualname__: str = ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any:
        """Return repr(self)."""
    def __setattr__(self: Self, cls: Any, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any:
        """Return memory consumption of the type object."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasscheck__(self: Self, subclass: Any) -> Any:
        """Check if a class is a subclass."""
    def __subclasses__(self: Self) -> Any:
        """Return a list of immediate subclasses."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    __text_signature__: NoneType = ...
    __weakrefoffset__: int = ...
    def mro(self: Self) -> Any:
        """Return a type's method resolution order."""

__builtins__: dict
__cached__: str
__doc__: NoneType
__file__: str
__loader__: SourcelessFileLoader
__name__: str
__package__: str
__spec__: ModuleSpec
def _swig_add_metaclass(metaclass: Any) -> Any:
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
def SWIG_PyInstanceMethod_New(*args: Any, **kwargs: Any) -> Any: ...
def SWIG_PyStaticMethod_New(*args: Any, **kwargs: Any) -> Any: ...
_swig_python_version_info: version_info
def _swig_repr(self: Self) -> Any: ...
def _swig_setattr_nondynamic_class_variable(set: Any) -> Any: ...
def _swig_setattr_nondynamic_instance_variable(set: Any) -> Any: ...
class array2dDouble(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def get(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getptr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class array2dFloat(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def get(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getptr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class array3dDouble(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def get(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getptr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class array3dFloat(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def get(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getptr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class array3dInt(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def get(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getptr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class array4dDouble(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def get(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getptr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class array4dFloat(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def get(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getptr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class array4dInt(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def get(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getptr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class boolPtr(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def boolPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
def boolRefValue(ptr: Any) -> Any: ...
class charPtr(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def charPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
def charRefValue(ptr: Any) -> Any: ...
def createBoolRef() -> Any: ...
def createCharRef() -> Any: ...
def createDoubleRef() -> Any: ...
def createFloatRef() -> Any: ...
def createIntRef() -> Any: ...
def createShortRef() -> Any: ...
def createUCharRef() -> Any: ...
def createUIntRef() -> Any: ...
cvar: swigvarlink
class doublePtr(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def doublePtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
def doubleRefValue(ptr: Any) -> Any: ...
class floatPtr(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def floatPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
def floatRefValue(ptr: Any) -> Any: ...
class intPtr(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def intPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
def intRefValue(ptr: Any) -> Any: ...
kDefaultNodeType: str
kEulerRotationEpsilon: float
kMFnMeshInstanceUnspecified: int
kMFnMeshPointTolerance: float
kMFnMeshTolerance: float
kMFnNurbsEpsilon: float
kMFnSubdPointTolerance: float
kMFnSubdTolerance: float
kQuaternionEpsilon: float
kUnknownParameter: str
def setRefValue(refObject: Any, value: Any) -> Any: ...
class shortPtr(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def shortPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
def shortRefValue(ptr: Any) -> Any: ...
class uCharPtr(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def uCharPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
def uCharRefValue(ptr: Any) -> Any: ...
class uIntPtr(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def uIntPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
def uIntRefValue(ptr: Any) -> Any: ...