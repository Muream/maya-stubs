from typing import *
from typing_extensions import Self
from _typeshed import Incomplete
from maya.OpenMaya import *

def MDynSweptLine_className(*args: Any, **kwargs: Any) -> Any: ...
def MDynSweptTriangle_className(*args: Any, **kwargs: Any) -> Any: ...
def MDynamicsUtil_addNodeTypeToRunup(*args: Any, **kwargs: Any) -> Any: ...
def MDynamicsUtil_evalDynamics2dTexture(*args: Any, **kwargs: Any) -> Any: ...
def MDynamicsUtil_hasValidDynamics2dTexture(*args: Any, **kwargs: Any) -> Any: ...
def MDynamicsUtil_inRunup(*args: Any, **kwargs: Any) -> Any: ...
def MDynamicsUtil_removeNodeTypeFromRunup(*args: Any, **kwargs: Any) -> Any: ...
def MDynamicsUtil_runupIfRequired(*args: Any, **kwargs: Any) -> Any: ...
def MFnAirField_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnDragField_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnDynSweptGeometryData_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnField_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnFluid_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnGravityField_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnInstancer_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnNIdData_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnNObjectData_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnNewtonField_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnParticleSystem_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnPfxGeometry_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnRadialField_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnTurbulenceField_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnUniformField_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnVolumeAxisField_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnVortexField_className(*args: Any, **kwargs: Any) -> Any: ...
def MHairSystem_className(*args: Any, **kwargs: Any) -> Any: ...
def MHairSystem_getCollisionObject(*args: Any, **kwargs: Any) -> Any: ...
def MHairSystem_getFollicle(*args: Any, **kwargs: Any) -> Any: ...
def MHairSystem_registerCollisionSolverCollide(*args: Any, **kwargs: Any) -> Any: ...
def MHairSystem_registerCollisionSolverPreFrame(*args: Any, **kwargs: Any) -> Any: ...
def MHairSystem_registeringCallableScript(*args: Any, **kwargs: Any) -> Any: ...
def MHairSystem_setRegisteringCallableScript(*args: Any, **kwargs: Any) -> Any: ...
def MHairSystem_unregisterCollisionSolverCollide(*args: Any, **kwargs: Any) -> Any: ...
def MHairSystem_unregisterCollisionSolverPreFrame(*args: Any, **kwargs: Any) -> Any: ...
def MRenderLineArray_className(*args: Any, **kwargs: Any) -> Any: ...
def MRenderLine_className(*args: Any, **kwargs: Any) -> Any: ...

__builtins__: dict
__cached__: str
__doc__: NoneType
__file__: str
__loader__: SourcelessFileLoader
__name__: str
__package__: str
__spec__: ModuleSpec

def _swig_add_metaclass(metaclass: Any) -> Any:
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""

def SWIG_PyInstanceMethod_New(*args: Any, **kwargs: Any) -> Any: ...
def SWIG_PyStaticMethod_New(*args: Any, **kwargs: Any) -> Any: ...

_swig_python_version_info: version_info

def _swig_repr(self) -> Any: ...
def _swig_setattr_nondynamic_class_variable(set: Any) -> Any: ...
def _swig_setattr_nondynamic_instance_variable(set: Any) -> Any: ...
def boolPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
def charPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
def doublePtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
def floatPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
def intPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
def shortPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
def uCharPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
def uIntPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...

class MDynSweptLine:
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    def normal(self, *args: Any, **kwargs: Any) -> Any: ...
    def tangent(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def vertex(self, *args: Any, **kwargs: Any) -> Any: ...

class MDynSweptTriangle:
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def area(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def normal(self, *args: Any, **kwargs: Any) -> Any: ...
    def normalToPoint(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def uvPoint(self, *args: Any, **kwargs: Any) -> Any: ...
    def vertex(self, *args: Any, **kwargs: Any) -> Any: ...

class MDynamicsUtil:
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addNodeTypeToRunup(self, *args: Any, **kwargs: Any) -> Any: ...
    def evalDynamics2dTexture(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasValidDynamics2dTexture(self, *args: Any, **kwargs: Any) -> Any: ...
    def inRunup(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeNodeTypeFromRunup(self, *args: Any, **kwargs: Any) -> Any: ...
    def runupIfRequired(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnField(MFnDagNode):
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def attenuation(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def falloffCurve(self, *args: Any, **kwargs: Any) -> Any: ...
    def getForceAtPoint(self, *args: Any, **kwargs: Any) -> Any: ...
    def isFalloffCurveConstantOne(self, *args: Any, **kwargs: Any) -> Any: ...
    def magnitude(self, *args: Any, **kwargs: Any) -> Any: ...
    def maxDistance(self, *args: Any, **kwargs: Any) -> Any: ...
    def perVertex(self, *args: Any, **kwargs: Any) -> Any: ...
    def setAttenuation(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMagnitude(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxDistance(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPerVertex(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseMaxDistance(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def useMaxDistance(self, *args: Any, **kwargs: Any) -> Any: ...

class MFnAirField(MFnField):
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def componentOnly(self, *args: Any, **kwargs: Any) -> Any: ...
    def direction(self, *args: Any, **kwargs: Any) -> Any: ...
    def enableSpread(self, *args: Any, **kwargs: Any) -> Any: ...
    def inheritRotation(self, *args: Any, **kwargs: Any) -> Any: ...
    def inheritVelocity(self, *args: Any, **kwargs: Any) -> Any: ...
    def setComponentOnly(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDirection(self, *args: Any, **kwargs: Any) -> Any: ...
    def setEnableSpread(self, *args: Any, **kwargs: Any) -> Any: ...
    def setInheritRotation(self, *args: Any, **kwargs: Any) -> Any: ...
    def setInheritVelocity(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSpeed(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSpread(self, *args: Any, **kwargs: Any) -> Any: ...
    def speed(self, *args: Any, **kwargs: Any) -> Any: ...
    def spread(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnDragField(MFnField):
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def direction(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDirection(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseDirection(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def useDirection(self, *args: Any, **kwargs: Any) -> Any: ...

class MFnDynSweptGeometryData(MFnData):
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def lineCount(self, *args: Any, **kwargs: Any) -> Any: ...
    def sweptLine(self, *args: Any, **kwargs: Any) -> Any: ...
    def sweptTriangle(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def triangleCount(self, *args: Any, **kwargs: Any) -> Any: ...

class MFnFluid(MFnDagNode):
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create2D(self, *args: Any, **kwargs: Any) -> Any: ...
    def create3D(self, *args: Any, **kwargs: Any) -> Any: ...
    def density(self, *args: Any, **kwargs: Any) -> Any: ...
    def emitIntoArrays(self, *args: Any, **kwargs: Any) -> Any: ...
    def expandToInclude(self, *args: Any, **kwargs: Any) -> Any: ...
    def falloff(self, *args: Any, **kwargs: Any) -> Any: ...
    def fuel(self, *args: Any, **kwargs: Any) -> Any: ...
    def getColorMode(self, *args: Any, **kwargs: Any) -> Any: ...
    def getColors(self, *args: Any, **kwargs: Any) -> Any: ...
    def getCoordinateMode(self, *args: Any, **kwargs: Any) -> Any: ...
    def getCoordinates(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDensityMode(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDimensions(self, *args: Any, **kwargs: Any) -> Any: ...
    def getFalloffMode(self, *args: Any, **kwargs: Any) -> Any: ...
    def getForceAtPoint(self, *args: Any, **kwargs: Any) -> Any: ...
    def getFuelMode(self, *args: Any, **kwargs: Any) -> Any: ...
    def getResolution(self, *args: Any, **kwargs: Any) -> Any: ...
    def getTemperatureMode(self, *args: Any, **kwargs: Any) -> Any: ...
    def getVelocity(self, *args: Any, **kwargs: Any) -> Any: ...
    def getVelocityMode(self, *args: Any, **kwargs: Any) -> Any: ...
    def gridSize(self, *args: Any, **kwargs: Any) -> Any: ...
    def index(self, *args: Any, **kwargs: Any) -> Any: ...
    def isAutoResize(self, *args: Any, **kwargs: Any) -> Any: ...
    def isResizeToEmitter(self, *args: Any, **kwargs: Any) -> Any: ...
    def pressure(self, *args: Any, **kwargs: Any) -> Any: ...
    def setColorMode(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCoordinateMode(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDensityMode(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFalloffMode(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFuelMode(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSize(self, *args: Any, **kwargs: Any) -> Any: ...
    def setTemperatureMode(self, *args: Any, **kwargs: Any) -> Any: ...
    def setVelocityMode(self, *args: Any, **kwargs: Any) -> Any: ...
    def temperature(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def toGridIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def updateGrid(self, *args: Any, **kwargs: Any) -> Any: ...
    def velocityGridSizes(self, *args: Any, **kwargs: Any) -> Any: ...
    def voxelCenterPosition(self, *args: Any, **kwargs: Any) -> Any: ...

class MFnGravityField(MFnField):
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def direction(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDirection(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnInstancer(MFnDagNode):
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def allInstances(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def instancesForParticle(self, *args: Any, **kwargs: Any) -> Any: ...
    def particleCount(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnNIdData(MFnData):
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def getObjectPtr(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnNObjectData(MFnData):
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def getClothObjectPtr(self, *args: Any, **kwargs: Any) -> Any: ...
    def getCollide(self, *args: Any, **kwargs: Any) -> Any: ...
    def getParticleObjectPtr(self, *args: Any, **kwargs: Any) -> Any: ...
    def getRigidObjectPtr(self, *args: Any, **kwargs: Any) -> Any: ...
    def isCached(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCached(self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectPtr(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnNewtonField(MFnField):
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def minDistance(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMinDistance(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnParticleSystem(MFnDagNode):
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def acceleration(self, *args: Any, **kwargs: Any) -> Any: ...
    def age(self, *args: Any, **kwargs: Any) -> Any: ...
    def betterIllum(self, *args: Any, **kwargs: Any) -> Any: ...
    def castsShadows(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def count(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def deformedParticleShape(self, *args: Any, **kwargs: Any) -> Any: ...
    def disableCloudAxis(self, *args: Any, **kwargs: Any) -> Any: ...
    def emission(self, *args: Any, **kwargs: Any) -> Any: ...
    def emit(self, *args: Any, **kwargs: Any) -> Any: ...
    def evaluateDynamics(self, *args: Any, **kwargs: Any) -> Any: ...
    def flatShaded(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPerParticleAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasEmission(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasLifespan(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasOpacity(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasRgb(self, *args: Any, **kwargs: Any) -> Any: ...
    def isDeformedParticleShape(self, *args: Any, **kwargs: Any) -> Any: ...
    def isPerParticleDoubleAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def isPerParticleIntAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def isPerParticleVectorAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self, *args: Any, **kwargs: Any) -> Any: ...
    def lifespan(self, *args: Any, **kwargs: Any) -> Any: ...
    def mass(self, *args: Any, **kwargs: Any) -> Any: ...
    def opacity(self, *args: Any, **kwargs: Any) -> Any: ...
    def originalParticleShape(self, *args: Any, **kwargs: Any) -> Any: ...
    def particleIds(self, *args: Any, **kwargs: Any) -> Any: ...
    def particleName(self, *args: Any, **kwargs: Any) -> Any: ...
    def position(self, *args: Any, **kwargs: Any) -> Any: ...
    def position0(self, *args: Any, **kwargs: Any) -> Any: ...
    def position1(self, *args: Any, **kwargs: Any) -> Any: ...
    def primaryVisibility(self, *args: Any, **kwargs: Any) -> Any: ...
    def radius(self, *args: Any, **kwargs: Any) -> Any: ...
    def radius0(self, *args: Any, **kwargs: Any) -> Any: ...
    def radius1(self, *args: Any, **kwargs: Any) -> Any: ...
    def receiveShadows(self, *args: Any, **kwargs: Any) -> Any: ...
    def renderType(self, *args: Any, **kwargs: Any) -> Any: ...
    def rgb(self, *args: Any, **kwargs: Any) -> Any: ...
    def saveInitialState(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCount(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPerParticleAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def surfaceShading(self, *args: Any, **kwargs: Any) -> Any: ...
    def tailSize(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def threshold(self, *args: Any, **kwargs: Any) -> Any: ...
    def velocity(self, *args: Any, **kwargs: Any) -> Any: ...
    def visibleInReflections(self, *args: Any, **kwargs: Any) -> Any: ...
    def visibleInRefractions(self, *args: Any, **kwargs: Any) -> Any: ...

class MFnPfxGeometry(MFnDagNode):
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def getBoundingBox(self, *args: Any, **kwargs: Any) -> Any: ...
    def getLineData(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnRadialField(MFnField):
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def radialType(self, *args: Any, **kwargs: Any) -> Any: ...
    def setType(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnTurbulenceField(MFnField):
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def frequency(self, *args: Any, **kwargs: Any) -> Any: ...
    def phase(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFrequency(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPhase(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnUniformField(MFnField):
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def direction(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDirection(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnVolumeAxisField(MFnField):
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def detailTurbulence(self, *args: Any, **kwargs: Any) -> Any: ...
    def direction(self, *args: Any, **kwargs: Any) -> Any: ...
    def directionalSpeed(self, *args: Any, **kwargs: Any) -> Any: ...
    def invertAttenuation(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDirection(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDirectionalSpeed(self, *args: Any, **kwargs: Any) -> Any: ...
    def setInvertAttenuation(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSpeedAlongAxis(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSpeedAroundAxis(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSpeedAwayFromAxis(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSpeedAwayFromCenter(self, *args: Any, **kwargs: Any) -> Any: ...
    def setTurbulence(self, *args: Any, **kwargs: Any) -> Any: ...
    def setTurbulenceFrequency(self, *args: Any, **kwargs: Any) -> Any: ...
    def setTurbulenceOffset(self, *args: Any, **kwargs: Any) -> Any: ...
    def setTurbulenceSpeed(self, *args: Any, **kwargs: Any) -> Any: ...
    def speedAlongAxis(self, *args: Any, **kwargs: Any) -> Any: ...
    def speedAroundAxis(self, *args: Any, **kwargs: Any) -> Any: ...
    def speedAwayFromAxis(self, *args: Any, **kwargs: Any) -> Any: ...
    def speedAwayFromCenter(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def turbulence(self, *args: Any, **kwargs: Any) -> Any: ...
    def turbulenceFrequency(self, *args: Any, **kwargs: Any) -> Any: ...
    def turbulenceOffset(self, *args: Any, **kwargs: Any) -> Any: ...
    def turbulenceSpeed(self, *args: Any, **kwargs: Any) -> Any: ...

class MFnVortexField(MFnField):
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def axis(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def setAxis(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MHairSystem:
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def getCollisionObject(self, *args: Any, **kwargs: Any) -> Any: ...
    def getFollicle(self, *args: Any, **kwargs: Any) -> Any: ...
    def registerCollisionSolverCollide(self, *args: Any, **kwargs: Any) -> Any: ...
    def registerCollisionSolverPreFrame(self, *args: Any, **kwargs: Any) -> Any: ...
    def registeringCallableScript(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRegisteringCallableScript(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def unregisterCollisionSolverCollide(self, *args: Any, **kwargs: Any) -> Any: ...
    def unregisterCollisionSolverPreFrame(self, *args: Any, **kwargs: Any) -> Any: ...

class MRenderLine:
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def getColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def getFlatness(self, *args: Any, **kwargs: Any) -> Any: ...
    def getIncandescence(self, *args: Any, **kwargs: Any) -> Any: ...
    def getLine(self, *args: Any, **kwargs: Any) -> Any: ...
    def getParameter(self, *args: Any, **kwargs: Any) -> Any: ...
    def getTransparency(self, *args: Any, **kwargs: Any) -> Any: ...
    def getTwist(self, *args: Any, **kwargs: Any) -> Any: ...
    def getWidth(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MRenderLineArray:
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteArray(self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    def renderLine(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MnObject:
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    thisown: property = ...

class MnCloth(MnObject):
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def createNCloth(self, *args: Any, **kwargs: Any) -> Any: ...
    def getBounce(self, *args: Any, **kwargs: Any) -> Any: ...
    def getFriction(self, *args: Any, **kwargs: Any) -> Any: ...
    def getInverseMass(self, *args: Any, **kwargs: Any) -> Any: ...
    def getNumVertices(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPositions(self, *args: Any, **kwargs: Any) -> Any: ...
    def getThickness(self, *args: Any, **kwargs: Any) -> Any: ...
    def getVelocities(self, *args: Any, **kwargs: Any) -> Any: ...
    def setAddCrossLinks(self, *args: Any, **kwargs: Any) -> Any: ...
    def setAirTightness(self, *args: Any, **kwargs: Any) -> Any: ...
    def setBendAngleDropoff(self, *args: Any, **kwargs: Any) -> Any: ...
    def setBendAngleScale(self, *args: Any, **kwargs: Any) -> Any: ...
    def setBendResistance(self, *args: Any, **kwargs: Any) -> Any: ...
    def setBendRestAngleFromPositions(self, *args: Any, **kwargs: Any) -> Any: ...
    def setBounce(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCollisionFlags(self, *args: Any, **kwargs: Any) -> Any: ...
    def setComputeRestAngles(self, *args: Any, **kwargs: Any) -> Any: ...
    def setComputeRestLength(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDamping(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDisableGravity(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDragAndLift(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFriction(self, *args: Any, **kwargs: Any) -> Any: ...
    def setIncompressibility(self, *args: Any, **kwargs: Any) -> Any: ...
    def setInputMeshAttractAndRigidStrength(self, *args: Any, **kwargs: Any) -> Any: ...
    def setInputMeshAttractDamping(self, *args: Any, **kwargs: Any) -> Any: ...
    def setInputMeshAttractPositions(self, *args: Any, **kwargs: Any) -> Any: ...
    def setInverseMass(self, *args: Any, **kwargs: Any) -> Any: ...
    def setLinksRestLengthFromPositions(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxIterations(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxSelfCollisionIterations(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPositions(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPressure(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPressureDamping(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPumpRate(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRestitutionAngle(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRestitutionTension(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSealHoles(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSelfCollideWidth(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSelfCollisionFlags(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSelfCollisionSoftness(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSelfCrossoverPush(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSelfTrappedCheck(self, *args: Any, **kwargs: Any) -> Any: ...
    def setShearResistance(self, *args: Any, **kwargs: Any) -> Any: ...
    def setStartPressure(self, *args: Any, **kwargs: Any) -> Any: ...
    def setStretchAndCompressionResistance(self, *args: Any, **kwargs: Any) -> Any: ...
    def setTangentialDrag(self, *args: Any, **kwargs: Any) -> Any: ...
    def setThickness(self, *args: Any, **kwargs: Any) -> Any: ...
    def setTopology(self, *args: Any, **kwargs: Any) -> Any: ...
    def setTrackVolume(self, *args: Any, **kwargs: Any) -> Any: ...
    def setVelocities(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MnParticle(MnObject):
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def createNParticle(self, *args: Any, **kwargs: Any) -> Any: ...
    def getBounce(self, *args: Any, **kwargs: Any) -> Any: ...
    def getFriction(self, *args: Any, **kwargs: Any) -> Any: ...
    def getInverseMass(self, *args: Any, **kwargs: Any) -> Any: ...
    def getNumVertices(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPositions(self, *args: Any, **kwargs: Any) -> Any: ...
    def getThickness(self, *args: Any, **kwargs: Any) -> Any: ...
    def getVelocities(self, *args: Any, **kwargs: Any) -> Any: ...
    def setBounce(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCollide(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDamping(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDisableGravity(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDragAndLift(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFriction(self, *args: Any, **kwargs: Any) -> Any: ...
    def setIncompressibility(self, *args: Any, **kwargs: Any) -> Any: ...
    def setInverseMass(self, *args: Any, **kwargs: Any) -> Any: ...
    def setLiquidRadiusScale(self, *args: Any, **kwargs: Any) -> Any: ...
    def setLiquidSimulation(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxIterations(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxSelfCollisionIterations(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPositions(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRestDensity(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSelfCollide(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSelfCollideWidth(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSelfCollisionSoftness(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSurfaceTension(self, *args: Any, **kwargs: Any) -> Any: ...
    def setThickness(self, *args: Any, **kwargs: Any) -> Any: ...
    def setTopology(self, *args: Any, **kwargs: Any) -> Any: ...
    def setVelocities(self, *args: Any, **kwargs: Any) -> Any: ...
    def setViscosity(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MnRigid(MnObject):
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def createNRigid(self, *args: Any, **kwargs: Any) -> Any: ...
    def getBounce(self, *args: Any, **kwargs: Any) -> Any: ...
    def getFriction(self, *args: Any, **kwargs: Any) -> Any: ...
    def getInverseMass(self, *args: Any, **kwargs: Any) -> Any: ...
    def getNumVertices(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPositions(self, *args: Any, **kwargs: Any) -> Any: ...
    def getThickness(self, *args: Any, **kwargs: Any) -> Any: ...
    def getVelocities(self, *args: Any, **kwargs: Any) -> Any: ...
    def setBounce(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCollisionFlags(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFriction(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPositions(self, *args: Any, **kwargs: Any) -> Any: ...
    def setThickness(self, *args: Any, **kwargs: Any) -> Any: ...
    def setTopology(self, *args: Any, **kwargs: Any) -> Any: ...
    def setVelocities(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MnSolver:
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addNObject(self, *args: Any, **kwargs: Any) -> Any: ...
    def createNSolver(self, *args: Any, **kwargs: Any) -> Any: ...
    def makeAllCollide(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAllCollisions(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeNObject(self, *args: Any, **kwargs: Any) -> Any: ...
    def setAirDensity(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDisabled(self, *args: Any, **kwargs: Any) -> Any: ...
    def setGravity(self, *args: Any, **kwargs: Any) -> Any: ...
    def setGravityDir(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxIterations(self, *args: Any, **kwargs: Any) -> Any: ...
    def setStartTime(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSubsteps(self, *args: Any, **kwargs: Any) -> Any: ...
    def setWindDir(self, *args: Any, **kwargs: Any) -> Any: ...
    def setWindNoiseIntensity(self, *args: Any, **kwargs: Any) -> Any: ...
    def setWindSpeed(self, *args: Any, **kwargs: Any) -> Any: ...
    def solve(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class _SwigNonDynamicMeta(type):
    __bases__: tuple = ...
    __doc__: str = ...
    __module__: str = ...
    __mro__: tuple = ...
    __name__: str = ...
    __qualname__: str = ...
    def __setattr__(self, cls: Any, name: Any, value: Any) -> Any: ...

class boolPtr:
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self, *args: Any, **kwargs: Any) -> Any: ...

class charPtr:
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self, *args: Any, **kwargs: Any) -> Any: ...

class doublePtr:
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self, *args: Any, **kwargs: Any) -> Any: ...

class floatPtr:
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self, *args: Any, **kwargs: Any) -> Any: ...

class intPtr:
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self, *args: Any, **kwargs: Any) -> Any: ...

class shortPtr:
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self, *args: Any, **kwargs: Any) -> Any: ...

class uCharPtr:
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self, *args: Any, **kwargs: Any) -> Any: ...

class uIntPtr:
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self, *args: Any, **kwargs: Any) -> Any: ...
