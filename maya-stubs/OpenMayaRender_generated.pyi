# fmt: off
from typing import *
from typing_extensions import Self
from _typeshed import Incomplete


class MColorMixingSpaceHelper(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def applyMixingTransform(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getMixingSpaceNames(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getViewNames(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kForward: int = ...
    kInverse: int = ...
    def mixingSpace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def mixingSpaceHasViews(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def mixingToSlider(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def refresh(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMixingSpace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setView(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def sliderToMixing(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def view(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MColorPickerCallback(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getKey(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MColorPickerCallback_className(*args: Any, **kwargs: Any) -> Any: ...
class MColorPickerUtilities(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def applyViewTransform(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doRegisterToColorPicking(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def grabColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isRegisteredToColorPicking(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kForward: int = ...
    kInverse: int = ...
    thisown: property = ...
    def unregisterFromColorPicking(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MColorPickerUtilities_applyViewTransform(*args: Any, **kwargs: Any) -> Any: ...
def MColorPickerUtilities_className(*args: Any, **kwargs: Any) -> Any: ...
def MColorPickerUtilities_doRegisterToColorPicking(*args: Any, **kwargs: Any) -> Any: ...
def MColorPickerUtilities_grabColor(*args: Any, **kwargs: Any) -> Any: ...
def MColorPickerUtilities_isRegisteredToColorPicking(*args: Any, **kwargs: Any) -> Any: ...
def MColorPickerUtilities_unregisterFromColorPicking(*args: Any, **kwargs: Any) -> Any: ...
class MCommonRenderSettingsData(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    customExt: property = ...
    customImageFormat: property = ...
    deviceAspectRatio: property = ...
    dotPerInch: property = ...
    enableDefaultLight: property = ...
    frameBy: property = ...
    frameEnd: property = ...
    framePadding: property = ...
    frameStart: property = ...
    def getBufferName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getImageName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPostRenderFrameCmd(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPreRenderFrameCmd(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    height: property = ...
    imageFormat: property = ...
    def isAnimated(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isMovieFormat(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kFullPathImage: int = ...
    kFullPathTmp: int = ...
    kRelativePath: int = ...
    name: property = ...
    namePattern: property = ...
    namingScheme: property = ...
    pixelAspectRatio: property = ...
    postMel: property = ...
    postRenderLayerMel: property = ...
    postRenderMel: property = ...
    preMel: property = ...
    preRenderLayerMel: property = ...
    preRenderMel: property = ...
    renderAll: property = ...
    renumberBy: property = ...
    renumberFrames: property = ...
    renumberStart: property = ...
    def setFieldName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPassName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shouldRenderFrameAtTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    skipExistingFrames: property = ...
    thisown: property = ...
    useCustomExt: property = ...
    width: property = ...

def MCommonRenderSettingsData_className(*args: Any, **kwargs: Any) -> Any: ...
def MCommonRenderSettingsData_getPostRenderFrameCmd(*args: Any, **kwargs: Any) -> Any: ...
def MCommonRenderSettingsData_getPreRenderFrameCmd(*args: Any, **kwargs: Any) -> Any: ...
class MD3D9Renderer(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def getD3D9Device(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def makeSwatchContextCurrent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def readSwatchContextPixels(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setBackgroundColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def theRenderer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MD3D9Renderer_theRenderer(*args: Any, **kwargs: Any) -> Any: ...
class MDrawProcedureBase(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def enabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def execute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnImageSource(MFnDependencyNode):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableDGTiming(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedByAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getImageName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def icon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDefaultNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFromReferencedFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isShared(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNormalAttr: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIcon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def sourceCamera(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def sourceLayer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnImageSource_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnRenderLayer(MFnDependencyNode):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def adjustmentPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentLayer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def defaultRenderLayer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableDGTiming(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def externalRenderPasses(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findLayerByName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedByAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def icon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inCurrentRenderLayer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inLayer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDefaultNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFromReferencedFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isPlugAdjusted(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isShared(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNormalAttr: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    def layerChildren(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def listAllRenderLayers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def listMembers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def passHasLight(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def passHasObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIcon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnRenderLayer_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnRenderLayer_currentLayer(*args: Any, **kwargs: Any) -> Any: ...
def MFnRenderLayer_defaultRenderLayer(*args: Any, **kwargs: Any) -> Any: ...
def MFnRenderLayer_findLayerByName(*args: Any, **kwargs: Any) -> Any: ...
def MFnRenderLayer_listAllRenderLayers(*args: Any, **kwargs: Any) -> Any: ...
class MFnRenderPass(MFnDependencyNode):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def customTokenString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableDGTiming(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def frameBufferChannels(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def frameBufferType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedByAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getImplementation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def icon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDefaultNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFromReferencedFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isShared(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNormalAttr: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def passID(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIcon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setImplementation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usesFiltering(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnRenderPass_className(*args: Any, **kwargs: Any) -> Any: ...
class MGLFunctionTable(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def extensionExists(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glAccum(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glActiveTexture(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glActiveVaryingNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glAlphaFragmentOp1ATI(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glAlphaFragmentOp2ATI(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glAlphaFragmentOp3ATI(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glAlphaFunc(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glAreProgramsResidentNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glAreTexturesResident(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glArrayElement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glAttachObjectARB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glBegin(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glBeginFragmentShaderATI(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glBeginOcclusionQueryNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glBeginQueryARB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glBeginTransformFeedbackEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glBeginTransformFeedbackNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glBeginVertexShaderEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glBindAttribLocationARB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glBindBufferARB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glBindBufferBaseEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glBindBufferBaseNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glBindBufferOffsetEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glBindBufferOffsetNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glBindBufferRangeEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glBindBufferRangeNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glBindFragmentShaderATI(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glBindFramebufferEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glBindLightParameterEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glBindMaterialParameterEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glBindParameterEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glBindProgram(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glBindProgramNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glBindRenderbufferEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glBindTexGenParameterEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glBindTexture(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glBindTextureUnitParameterEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glBindVertexShaderEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glBitmap(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glBlendEquationEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glBlendFunc(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glBlitFramebufferEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glBufferDataARB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glBufferSubDataARB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glCallList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glCallLists(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glCheckFramebufferStatusEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glClear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glClearAccum(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glClearColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glClearDepth(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glClearIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glClearStencil(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glClientActiveTexture(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glClipPlane(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glColor3b(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glColor3bv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glColor3d(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glColor3dv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glColor3f(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glColor3fv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glColor3i(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glColor3iv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glColor3s(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glColor3sv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glColor3ub(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glColor3ubv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glColor3ui(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glColor3uiv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glColor3us(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glColor3usv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glColor4b(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glColor4bv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glColor4d(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glColor4dv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glColor4f(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glColor4fv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glColor4i(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glColor4iv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glColor4s(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glColor4sv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glColor4ub(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glColor4ubv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glColor4ui(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glColor4uiv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glColor4us(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glColor4usv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glColorFragmentOp1ATI(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glColorFragmentOp2ATI(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glColorFragmentOp3ATI(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glColorMask(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glColorMaterial(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glColorPointer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glCombinerInputNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glCombinerOutputNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glCombinerParameterfNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glCombinerParameterfvNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glCombinerParameteriNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glCombinerParameterivNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glCompileShaderARB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glCompressedTexImage1D(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glCompressedTexImage2D(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glCompressedTexImage3D(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glCompressedTexSubImage1D(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glCompressedTexSubImage2D(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glCompressedTexSubImage3D(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glCopyPixels(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glCopyTexImage1D(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glCopyTexImage2D(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glCopyTexSubImage1D(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glCopyTexSubImage2D(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glCopyTexSubImage3D(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glCreateProgramObjectARB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glCreateShaderObjectARB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glCullFace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glCullParameterdvEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glCullParameterfvEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glDeleteBuffersARB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glDeleteFencesNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glDeleteFragmentShaderATI(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glDeleteFramebuffersEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glDeleteLists(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glDeleteObjectARB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glDeleteOcclusionQueriesNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glDeletePrograms(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glDeleteProgramsNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glDeleteQueriesARB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glDeleteRenderbuffersEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glDeleteTextures(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glDeleteVertexShaderEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glDepthFunc(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glDepthMask(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glDepthRange(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glDetachObjectARB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glDisable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glDisableClientState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glDisableVariantClientStateEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glDisableVertexAttribArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glDrawArrays(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glDrawBuffer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glDrawElements(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glDrawPixels(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glDrawRangeElements(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glEdgeFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glEdgeFlagPointer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glEdgeFlagv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glEnable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glEnableClientState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glEnableVariantClientStateEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glEnableVertexAttribArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glEnd(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glEndFragmentShaderATI(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glEndList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glEndOcclusionQueryNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glEndQueryARB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glEndTransformFeedbackEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glEndTransformFeedbackNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glEndVertexShaderEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glEvalCoord1d(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glEvalCoord1dv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glEvalCoord1f(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glEvalCoord1fv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glEvalCoord2d(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glEvalCoord2dv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glEvalCoord2f(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glEvalCoord2fv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glEvalMesh1(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glEvalMesh2(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glEvalPoint1(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glEvalPoint2(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glExecuteProgramNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glExtractComponentEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glFeedbackBuffer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glFinalCombinerInputNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glFinish(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glFinishFenceNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glFlush(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glFlushVertexArrayRangeNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glFogCoordPointerEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glFogCoorddEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glFogCoorddvEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glFogCoordfEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glFogCoordfvEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glFogf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glFogfv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glFogi(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glFogiv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glFramebufferRenderbufferEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glFramebufferTexture1DEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glFramebufferTexture2DEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glFramebufferTexture3DEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glFrontFace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glFrustum(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGenBuffersARB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGenFencesNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGenFragmentShadersATI(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGenFramebuffersEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGenLists(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGenOcclusionQueriesNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGenPrograms(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGenProgramsNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGenQueriesARB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGenRenderbuffersEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGenSymbolsEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGenTextures(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGenVertexShadersEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGenerateMipmapEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetActiveAttribARB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetActiveUniformARB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetActiveVaryingNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetAttachedObjectsARB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetAttribLocationARB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetBooleanv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetBufferParameterivARB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetBufferPointervARB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetBufferSubDataARB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetClipPlane(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetCombinerInputParameterfvNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetCombinerInputParameterivNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetCombinerOutputParameterfvNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetCombinerOutputParameterivNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetCompressedTexImage(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetDoublev(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetError(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetFenceivNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetFinalCombinerInputParameterfvNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetFinalCombinerInputParameterivNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetFloatv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetFramebufferAttachmentParameterivEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetHandleARB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetInfoLogARB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetIntegerv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetInvariantBooleanvEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetInvariantFloatvEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetInvariantIntegervEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetLightfv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetLightiv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetLocalConstantBooleanvEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetLocalConstantFloatvEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetLocalConstantIntegervEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetMapdv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetMapfv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetMapiv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetMaterialfv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetMaterialiv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetObjectParameterfvARB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetObjectParameterivARB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetOcclusionQueryivNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetOcclusionQueryuivNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetPixelMapfv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetPixelMapuiv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetPixelMapusv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetPointerv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetPolygonStipple(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetProgramEnvParameterdv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetProgramEnvParameterfv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetProgramLocalParameterdv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetProgramLocalParameterfv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetProgramParameterdvNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetProgramParameterfvNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetProgramString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetProgramStringNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetProgramiv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetProgramivNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetQueryObjectivARB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetQueryObjectuivARB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetQueryivARB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetRenderbufferParameterivEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetShaderSourceARB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetTexEnvfv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetTexEnviv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetTexGendv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetTexGenfv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetTexGeniv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetTexImage(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetTexLevelParameterfv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetTexLevelParameteriv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetTexParameterfv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetTexParameteriv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetTrackMatrixivNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetTransformFeedbackVaryingEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetTransformFeedbackVaryingNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetUniformLocationARB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetUniformfvARB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetUniformivARB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetVariantBooleanvEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetVariantFloatvEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetVariantIntegervEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetVariantPointervEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetVaryingLocationNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetVertexAttribPointerv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetVertexAttribPointervNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetVertexAttribdv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetVertexAttribdvNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetVertexAttribfv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetVertexAttribfvNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetVertexAttribiv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGetVertexAttribivNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glHint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glIndexMask(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glIndexPointer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glIndexd(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glIndexdv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glIndexf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glIndexfv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glIndexi(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glIndexiv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glIndexs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glIndexsv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glIndexub(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glIndexubv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glInitNames(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glInsertComponentEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glInterleavedArrays(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glIsBufferARB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glIsEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glIsFenceNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glIsFramebufferEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glIsList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glIsOcclusionQueryNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glIsProgram(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glIsProgramNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glIsQueryARB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glIsRenderbufferEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glIsTexture(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glIsVariantEnabledEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glLightModelf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glLightModelfv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glLightModeli(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glLightModeliv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glLightf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glLightfv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glLighti(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glLightiv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glLineStipple(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glLineWidth(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glLinkProgramARB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glListBase(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glLoadIdentity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glLoadMatrixd(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glLoadMatrixf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glLoadName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glLoadProgramNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glLoadTransposeMatrixd(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glLoadTransposeMatrixdARB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glLoadTransposeMatrixf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glLoadTransposeMatrixfARB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glLockArraysEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glLogicOp(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glMap1d(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glMap1f(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glMap2d(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glMap2f(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glMapBufferARB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glMapGrid1d(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glMapGrid1f(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glMapGrid2d(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glMapGrid2f(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glMaterialf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glMaterialfv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glMateriali(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glMaterialiv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glMatrixMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glMultMatrixd(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glMultMatrixf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glMultTransposeMatrixd(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glMultTransposeMatrixdARB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glMultTransposeMatrixf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glMultTransposeMatrixfARB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glMultiDrawArrays(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glMultiDrawElements(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glMultiTexCoord1d(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glMultiTexCoord1dv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glMultiTexCoord1f(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glMultiTexCoord1fv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glMultiTexCoord1i(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glMultiTexCoord1iv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glMultiTexCoord1s(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glMultiTexCoord1sv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glMultiTexCoord2d(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glMultiTexCoord2dv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glMultiTexCoord2f(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glMultiTexCoord2fv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glMultiTexCoord2i(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glMultiTexCoord2iv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glMultiTexCoord2s(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glMultiTexCoord2sv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glMultiTexCoord3d(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glMultiTexCoord3dv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glMultiTexCoord3f(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glMultiTexCoord3fv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glMultiTexCoord3i(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glMultiTexCoord3iv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glMultiTexCoord3s(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glMultiTexCoord3sv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glMultiTexCoord4d(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glMultiTexCoord4dv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glMultiTexCoord4f(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glMultiTexCoord4fv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glMultiTexCoord4i(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glMultiTexCoord4iv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glMultiTexCoord4s(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glMultiTexCoord4sv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glNewList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glNormal3b(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glNormal3bv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glNormal3d(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glNormal3dv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glNormal3f(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glNormal3fv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glNormal3i(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glNormal3iv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glNormal3s(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glNormal3sv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glNormalPointer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glOrtho(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glPNTrianglesfATI(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glPNTrianglesiATI(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glPassTexCoordATI(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glPassThrough(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glPixelMapfv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glPixelMapuiv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glPixelMapusv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glPixelStoref(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glPixelStorei(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glPixelTransferf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glPixelTransferi(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glPixelZoom(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glPointParameterf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glPointParameterfv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glPointSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glPolygonMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glPolygonOffset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glPolygonStipple(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glPopAttrib(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glPopClientAttrib(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glPopMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glPopName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glPrimitiveRestartIndexNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glPrimitiveRestartNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glPrioritizeTextures(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glProgramEnvParameter4d(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glProgramEnvParameter4dv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glProgramEnvParameter4f(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glProgramEnvParameter4fv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glProgramLocalParameter4d(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glProgramLocalParameter4dv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glProgramLocalParameter4f(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glProgramLocalParameter4fv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glProgramParameter4dNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glProgramParameter4dvNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glProgramParameter4fNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glProgramParameter4fvNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glProgramParameters4dvNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glProgramParameters4fvNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glProgramString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glPushAttrib(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glPushClientAttrib(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glPushMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glPushName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glRasterPos2d(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glRasterPos2dv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glRasterPos2f(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glRasterPos2fv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glRasterPos2i(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glRasterPos2iv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glRasterPos2s(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glRasterPos2sv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glRasterPos3d(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glRasterPos3dv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glRasterPos3f(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glRasterPos3fv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glRasterPos3i(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glRasterPos3iv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glRasterPos3s(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glRasterPos3sv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glRasterPos4d(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glRasterPos4dv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glRasterPos4f(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glRasterPos4fv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glRasterPos4i(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glRasterPos4iv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glRasterPos4s(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glRasterPos4sv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glReadBuffer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glReadPixels(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glRectd(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glRectdv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glRectf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glRectfv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glRecti(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glRectiv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glRects(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glRectsv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glRenderMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glRenderbufferStorageEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glRequestResidentProgramsNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glRotated(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glRotatef(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glSampleCoverage(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glSampleMapATI(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glScaled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glScalef(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glScissor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glSecondaryColor3bEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glSecondaryColor3bvEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glSecondaryColor3dEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glSecondaryColor3dvEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glSecondaryColor3fEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glSecondaryColor3fvEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glSecondaryColor3iEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glSecondaryColor3ivEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glSecondaryColor3sEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glSecondaryColor3svEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glSecondaryColor3ubEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glSecondaryColor3ubvEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glSecondaryColor3uiEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glSecondaryColor3uivEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glSecondaryColor3usEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glSecondaryColor3usvEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glSecondaryColorPointerEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glSelectBuffer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glSetFenceNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glSetFragmentShaderConstantATI(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glSetInvariantEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glSetLocalConstantEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glShadeModel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glShaderOp1EXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glShaderOp2EXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glShaderOp3EXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glShaderSourceARB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glStencilFunc(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glStencilMask(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glStencilOp(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glSwizzleEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glTestFenceNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glTexCoord1d(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glTexCoord1dv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glTexCoord1f(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glTexCoord1fv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glTexCoord1i(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glTexCoord1iv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glTexCoord1s(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glTexCoord1sv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glTexCoord2d(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glTexCoord2dv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glTexCoord2f(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glTexCoord2fv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glTexCoord2i(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glTexCoord2iv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glTexCoord2s(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glTexCoord2sv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glTexCoord3d(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glTexCoord3dv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glTexCoord3f(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glTexCoord3fv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glTexCoord3i(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glTexCoord3iv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glTexCoord3s(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glTexCoord3sv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glTexCoord4d(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glTexCoord4dv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glTexCoord4f(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glTexCoord4fv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glTexCoord4i(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glTexCoord4iv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glTexCoord4s(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glTexCoord4sv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glTexCoordPointer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glTexEnvf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glTexEnvfv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glTexEnvi(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glTexEnviv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glTexGend(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glTexGendv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glTexGenf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glTexGenfv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glTexGeni(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glTexGeniv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glTexImage1D(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glTexImage2D(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glTexImage3D(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glTexParameterf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glTexParameterfv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glTexParameteri(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glTexParameteriv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glTexSubImage1D(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glTexSubImage2D(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glTexSubImage3D(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glTrackMatrixNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glTransformFeedbackAttribsNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glTransformFeedbackVaryingsEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glTransformFeedbackVaryingsNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glTranslated(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glTranslatef(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glUniform1fARB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glUniform1fvARB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glUniform1iARB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glUniform1ivARB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glUniform2fARB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glUniform2fvARB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glUniform2iARB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glUniform2ivARB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glUniform3fARB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glUniform3fvARB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glUniform3iARB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glUniform3ivARB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glUniform4fARB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glUniform4fvARB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glUniform4iARB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glUniform4ivARB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glUniformMatrix2fvARB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glUniformMatrix3fvARB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glUniformMatrix4fvARB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glUnlockArraysEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glUnmapBufferARB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glUseProgramObjectARB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glValidateProgramARB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVariantPointerEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVariantbvEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVariantdvEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVariantfvEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVariantivEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVariantsvEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVariantubvEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVariantuivEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVariantusvEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertex2d(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertex2dv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertex2f(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertex2fv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertex2i(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertex2iv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertex2s(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertex2sv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertex3d(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertex3dv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertex3f(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertex3fv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertex3i(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertex3iv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertex3s(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertex3sv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertex4d(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertex4dv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertex4f(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertex4fv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertex4i(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertex4iv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertex4s(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertex4sv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexArrayRangeNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttrib1d(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttrib1dNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttrib1dv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttrib1dvNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttrib1f(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttrib1fNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttrib1fv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttrib1fvNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttrib1s(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttrib1sNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttrib1sv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttrib1svNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttrib2d(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttrib2dNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttrib2dv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttrib2dvNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttrib2f(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttrib2fNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttrib2fv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttrib2fvNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttrib2s(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttrib2sNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttrib2sv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttrib2svNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttrib3d(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttrib3dNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttrib3dv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttrib3dvNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttrib3f(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttrib3fNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttrib3fv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttrib3fvNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttrib3s(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttrib3sNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttrib3sv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttrib3svNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttrib4Nbv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttrib4Niv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttrib4Nsv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttrib4Nub(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttrib4Nubv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttrib4Nuiv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttrib4Nusv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttrib4bv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttrib4d(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttrib4dNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttrib4dv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttrib4dvNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttrib4f(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttrib4fNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttrib4fv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttrib4fvNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttrib4iv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttrib4s(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttrib4sNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttrib4sv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttrib4svNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttrib4ubNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttrib4ubv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttrib4ubvNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttrib4uiv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttrib4usv(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttribPointer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttribPointerNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttribs1dvNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttribs1fvNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttribs1svNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttribs2dvNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttribs2fvNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttribs2svNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttribs3dvNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttribs3fvNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttribs3svNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttribs4dvNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttribs4fvNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttribs4svNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexAttribs4ubvNV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexPointer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexWeightPointerEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexWeightfEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glVertexWeightfvEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glViewport(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glWriteMaskEXT(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kMGL_Version11: int = ...
    kMGL_Version12: int = ...
    kMGL_Version121: int = ...
    kMGL_Version13: int = ...
    kMGL_Version14: int = ...
    kMGL_Version15: int = ...
    kMGL_Version20: int = ...
    def maxTextureSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def maxVertexAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numTexImageUnits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numTexInterpolants(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numTexUnits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

MGL_2D: int
MGL_2X_BIT_ATI: int
MGL_2_BYTES: int
MGL_3D: int
MGL_3D_COLOR: int
MGL_3D_COLOR_TEXTURE: int
MGL_3_BYTES: int
MGL_4D_COLOR_TEXTURE: int
MGL_4X_BIT_ATI: int
MGL_4_BYTES: int
MGL_8X_BIT_ATI: int
MGL_ABGR_EXT: int
MGL_ACCUM: int
MGL_ACCUM_ALPHA_BITS: int
MGL_ACCUM_BLUE_BITS: int
MGL_ACCUM_BUFFER_BIT: int
MGL_ACCUM_CLEAR_VALUE: int
MGL_ACCUM_GREEN_BITS: int
MGL_ACCUM_RED_BITS: int
MGL_ACTIVE_TEXTURE: int
MGL_ACTIVE_TEXTURE_ARB: int
MGL_ACTIVE_VARYINGS_NV: int
MGL_ACTIVE_VARYING_MAX_LENGTH_NV: int
MGL_ADD: int
MGL_ADD_ATI: int
MGL_ADD_SIGNED: int
MGL_ADD_SIGNED_EXT: int
MGL_ALL_ATTRIB_BITS: int
MGL_ALL_COMPLETED_NV: int
MGL_ALPHA: int
MGL_ALPHA12: int
MGL_ALPHA16: int
MGL_ALPHA16F: int
MGL_ALPHA32F: int
MGL_ALPHA4: int
MGL_ALPHA8: int
MGL_ALPHA_BIAS: int
MGL_ALPHA_BITS: int
MGL_ALPHA_SCALE: int
MGL_ALPHA_TEST: int
MGL_ALPHA_TEST_FUNC: int
MGL_ALPHA_TEST_REF: int
MGL_ALWAYS: int
MGL_AMBIENT: int
MGL_AMBIENT_AND_DIFFUSE: int
MGL_AND: int
MGL_AND_INVERTED: int
MGL_AND_REVERSE: int
MGL_ARB_depth_texture: int
MGL_ARB_shadow: int
MGL_ARB_shadow_ambient: int
MGL_ARB_texture_env_dot3: int
MGL_ARRAY_BUFFER_ARB: int
MGL_ARRAY_BUFFER_BINDING_ARB: int
MGL_ARRAY_ELEMENT_LOCK_COUNT_EXT: int
MGL_ARRAY_ELEMENT_LOCK_FIRST_EXT: int
MGL_ATTRIB_ARRAY_POINTER_NV: int
MGL_ATTRIB_ARRAY_SIZE_NV: int
MGL_ATTRIB_ARRAY_STRIDE_NV: int
MGL_ATTRIB_ARRAY_TYPE_NV: int
MGL_ATTRIB_STACK_DEPTH: int
MGL_AUTO_NORMAL: int
MGL_AUX0: int
MGL_AUX1: int
MGL_AUX2: int
MGL_AUX3: int
MGL_AUX_BUFFERS: int
MGL_BACK: int
MGL_BACK_LEFT: int
MGL_BACK_PRIMARY_COLOR_NV: int
MGL_BACK_RIGHT: int
MGL_BACK_SECONDARY_COLOR_NV: int
MGL_BGRA_EXT: int
MGL_BGR_EXT: int
MGL_BIAS_BIT_ATI: int
MGL_BIAS_BY_NEGATIVE_ONE_HALF_NV: int
MGL_BITMAP: int
MGL_BITMAP_TOKEN: int
MGL_BLEND: int
MGL_BLEND_COLOR: int
MGL_BLEND_COLOR_EXT: int
MGL_BLEND_DST: int
MGL_BLEND_EQUATION: int
MGL_BLEND_EQUATION_EXT: int
MGL_BLEND_SRC: int
MGL_BLUE: int
MGL_BLUE_BIAS: int
MGL_BLUE_BITS: int
MGL_BLUE_BIT_ATI: int
MGL_BLUE_SCALE: int
MGL_BOOL_ARB: int
MGL_BOOL_VEC2_ARB: int
MGL_BOOL_VEC3_ARB: int
MGL_BOOL_VEC4_ARB: int
MGL_BUFFER_ACCESS_ARB: int
MGL_BUFFER_MAPPED_ARB: int
MGL_BUFFER_MAP_POINTER_ARB: int
MGL_BUFFER_SIZE_ARB: int
MGL_BUFFER_USAGE_ARB: int
MGL_BYTE: int
MGL_C3F_V3F: int
MGL_C4F_N3F_V3F: int
MGL_C4UB_V2F: int
MGL_C4UB_V3F: int
MGL_CCW: int
MGL_CLAMP: int
MGL_CLAMP_FRAGMENT_COLOR: int
MGL_CLAMP_READ_COLOR: int
MGL_CLAMP_TO_BORDER: int
MGL_CLAMP_TO_BORDER_ARB: int
MGL_CLAMP_TO_BORDER_SGIS: int
MGL_CLAMP_TO_EDGE: int
MGL_CLAMP_VERTEX_COLOR: int
MGL_CLEAR: int
MGL_CLIENT_ACTIVE_TEXTURE: int
MGL_CLIENT_ACTIVE_TEXTURE_ARB: int
MGL_CLIENT_ALL_ATTRIB_BITS: int
MGL_CLIENT_ATTRIB_STACK_DEPTH: int
MGL_CLIENT_PIXEL_STORE_BIT: int
MGL_CLIENT_VERTEX_ARRAY_BIT: int
MGL_CLIP_DISTANCE_NV: int
MGL_CLIP_PLANE0: int
MGL_CLIP_PLANE1: int
MGL_CLIP_PLANE2: int
MGL_CLIP_PLANE3: int
MGL_CLIP_PLANE4: int
MGL_CLIP_PLANE5: int
MGL_CLIP_VOLUME_CLIPPING_HINT_EXT: int
MGL_CND0_ATI: int
MGL_CND_ATI: int
MGL_COEFF: int
MGL_COLOR: int
MGL_COLOR_ALPHA_PAIRING_ATI: int
MGL_COLOR_ARRAY: int
MGL_COLOR_ARRAY_BUFFER_BINDING_ARB: int
MGL_COLOR_ARRAY_COUNT_EXT: int
MGL_COLOR_ARRAY_EXT: int
MGL_COLOR_ARRAY_POINTER: int
MGL_COLOR_ARRAY_POINTER_EXT: int
MGL_COLOR_ARRAY_SIZE: int
MGL_COLOR_ARRAY_SIZE_EXT: int
MGL_COLOR_ARRAY_STRIDE: int
MGL_COLOR_ARRAY_STRIDE_EXT: int
MGL_COLOR_ARRAY_TYPE: int
MGL_COLOR_ARRAY_TYPE_EXT: int
MGL_COLOR_ATTACHMENT0: int
MGL_COLOR_ATTACHMENT1: int
MGL_COLOR_ATTACHMENT10: int
MGL_COLOR_ATTACHMENT11: int
MGL_COLOR_ATTACHMENT12: int
MGL_COLOR_ATTACHMENT13: int
MGL_COLOR_ATTACHMENT14: int
MGL_COLOR_ATTACHMENT15: int
MGL_COLOR_ATTACHMENT2: int
MGL_COLOR_ATTACHMENT3: int
MGL_COLOR_ATTACHMENT4: int
MGL_COLOR_ATTACHMENT5: int
MGL_COLOR_ATTACHMENT6: int
MGL_COLOR_ATTACHMENT7: int
MGL_COLOR_ATTACHMENT8: int
MGL_COLOR_ATTACHMENT9: int
MGL_COLOR_BUFFER_BIT: int
MGL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI: int
MGL_COLOR_CLEAR_VALUE: int
MGL_COLOR_INDEX: int
MGL_COLOR_INDEX12_EXT: int
MGL_COLOR_INDEX16_EXT: int
MGL_COLOR_INDEX1_EXT: int
MGL_COLOR_INDEX2_EXT: int
MGL_COLOR_INDEX4_EXT: int
MGL_COLOR_INDEX8_EXT: int
MGL_COLOR_INDEXES: int
MGL_COLOR_LOGIC_OP: int
MGL_COLOR_MATERIAL: int
MGL_COLOR_MATERIAL_FACE: int
MGL_COLOR_MATERIAL_PARAMETER: int
MGL_COLOR_SUM: int
MGL_COLOR_SUM_CLAMP_NV: int
MGL_COLOR_SUM_EXT: int
MGL_COLOR_TABLE_ALPHA_SIZE_EXT: int
MGL_COLOR_TABLE_BLUE_SIZE_EXT: int
MGL_COLOR_TABLE_FORMAT_EXT: int
MGL_COLOR_TABLE_GREEN_SIZE_EXT: int
MGL_COLOR_TABLE_INTENSITY_SIZE_EXT: int
MGL_COLOR_TABLE_LUMINANCE_SIZE_EXT: int
MGL_COLOR_TABLE_RED_SIZE_EXT: int
MGL_COLOR_TABLE_WIDTH_EXT: int
MGL_COLOR_WRITEMASK: int
MGL_COMBINE: int
MGL_COMBINE4_NV: int
MGL_COMBINER0_NV: int
MGL_COMBINER1_NV: int
MGL_COMBINER2_NV: int
MGL_COMBINER3_NV: int
MGL_COMBINER4_NV: int
MGL_COMBINER5_NV: int
MGL_COMBINER6_NV: int
MGL_COMBINER7_NV: int
MGL_COMBINER_AB_DOT_PRODUCT_NV: int
MGL_COMBINER_AB_OUTPUT_NV: int
MGL_COMBINER_BIAS_NV: int
MGL_COMBINER_CD_DOT_PRODUCT_NV: int
MGL_COMBINER_CD_OUTPUT_NV: int
MGL_COMBINER_COMPONENT_USAGE_NV: int
MGL_COMBINER_INPUT_NV: int
MGL_COMBINER_MAPPING_NV: int
MGL_COMBINER_MUX_SUM_NV: int
MGL_COMBINER_SCALE_NV: int
MGL_COMBINER_SUM_OUTPUT_NV: int
MGL_COMBINE_ALPHA: int
MGL_COMBINE_ALPHA_EXT: int
MGL_COMBINE_EXT: int
MGL_COMBINE_RGB: int
MGL_COMBINE_RGB_EXT: int
MGL_COMPARE_R_TO_TEXTURE_ARB: int
MGL_COMPILE: int
MGL_COMPILE_AND_EXECUTE: int
MGL_COMPRESSED_ALPHA: int
MGL_COMPRESSED_ALPHA_ARB: int
MGL_COMPRESSED_INTENSITY: int
MGL_COMPRESSED_INTENSITY_ARB: int
MGL_COMPRESSED_LUMINANCE: int
MGL_COMPRESSED_LUMINANCE_ALPHA: int
MGL_COMPRESSED_LUMINANCE_ALPHA_ARB: int
MGL_COMPRESSED_LUMINANCE_ARB: int
MGL_COMPRESSED_RGB: int
MGL_COMPRESSED_RGBA: int
MGL_COMPRESSED_RGBA_ARB: int
MGL_COMPRESSED_RGBA_S3TC_DXT1_EXT: int
MGL_COMPRESSED_RGBA_S3TC_DXT3_EXT: int
MGL_COMPRESSED_RGBA_S3TC_DXT5_EXT: int
MGL_COMPRESSED_RGB_ARB: int
MGL_COMPRESSED_RGB_S3TC_DXT1_EXT: int
MGL_COMPRESSED_TEXTURE_FORMATS: int
MGL_COMPRESSED_TEXTURE_FORMATS_ARB: int
MGL_COMP_BIT_ATI: int
MGL_CONSTANT: int
MGL_CONSTANT_ALPHA: int
MGL_CONSTANT_ALPHA_EXT: int
MGL_CONSTANT_ATTENUATION: int
MGL_CONSTANT_COLOR: int
MGL_CONSTANT_COLOR0_NV: int
MGL_CONSTANT_COLOR1_NV: int
MGL_CONSTANT_COLOR_EXT: int
MGL_CONSTANT_EXT: int
MGL_CONST_EYE_NV: int
MGL_CON_0_ATI: int
MGL_CON_10_ATI: int
MGL_CON_11_ATI: int
MGL_CON_12_ATI: int
MGL_CON_13_ATI: int
MGL_CON_14_ATI: int
MGL_CON_15_ATI: int
MGL_CON_16_ATI: int
MGL_CON_17_ATI: int
MGL_CON_18_ATI: int
MGL_CON_19_ATI: int
MGL_CON_1_ATI: int
MGL_CON_20_ATI: int
MGL_CON_21_ATI: int
MGL_CON_22_ATI: int
MGL_CON_23_ATI: int
MGL_CON_24_ATI: int
MGL_CON_25_ATI: int
MGL_CON_26_ATI: int
MGL_CON_27_ATI: int
MGL_CON_28_ATI: int
MGL_CON_29_ATI: int
MGL_CON_2_ATI: int
MGL_CON_30_ATI: int
MGL_CON_31_ATI: int
MGL_CON_3_ATI: int
MGL_CON_4_ATI: int
MGL_CON_5_ATI: int
MGL_CON_6_ATI: int
MGL_CON_7_ATI: int
MGL_CON_8_ATI: int
MGL_CON_9_ATI: int
MGL_COPY: int
MGL_COPY_INVERTED: int
MGL_COPY_PIXEL_TOKEN: int
MGL_CULL_FACE: int
MGL_CULL_FACE_MODE: int
MGL_CULL_FRAGMENT_NV: int
MGL_CULL_MODES_NV: int
MGL_CULL_VERTEX_EXT: int
MGL_CULL_VERTEX_EYE_POSITION_EXT: int
MGL_CULL_VERTEX_OBJECT_POSITION_EXT: int
MGL_CURRENT_ATTRIB_NV: int
MGL_CURRENT_BIT: int
MGL_CURRENT_COLOR: int
MGL_CURRENT_FOG_COORDINATE_EXT: int
MGL_CURRENT_INDEX: int
MGL_CURRENT_MATRIX: int
MGL_CURRENT_MATRIX_NV: int
MGL_CURRENT_MATRIX_STACK_DEPTH: int
MGL_CURRENT_MATRIX_STACK_DEPTH_NV: int
MGL_CURRENT_NORMAL: int
MGL_CURRENT_OCCLUSION_QUERY_ID_NV: int
MGL_CURRENT_QUERY_ARB: int
MGL_CURRENT_RASTER_COLOR: int
MGL_CURRENT_RASTER_DISTANCE: int
MGL_CURRENT_RASTER_INDEX: int
MGL_CURRENT_RASTER_POSITION: int
MGL_CURRENT_RASTER_POSITION_VALID: int
MGL_CURRENT_RASTER_TEXTURE_COORDS: int
MGL_CURRENT_SECONDARY_COLOR_EXT: int
MGL_CURRENT_TEXTURE_COORDS: int
MGL_CURRENT_VERTEX_ATTRIB: int
MGL_CURRENT_VERTEX_EXT: int
MGL_CURRENT_VERTEX_WEIGHT_EXT: int
MGL_CW: int
MGL_DECAL: int
MGL_DECR: int
MGL_DECR_WRAP_EXT: int
MGL_DEPENDENT_AR_TEXTURE_2D_NV: int
MGL_DEPENDENT_GB_TEXTURE_2D_NV: int
MGL_DEPTH: int
MGL_DEPTH_ATTACHMENT: int
MGL_DEPTH_BIAS: int
MGL_DEPTH_BITS: int
MGL_DEPTH_BUFFER_BIT: int
MGL_DEPTH_CLEAR_VALUE: int
MGL_DEPTH_COMPONENT: int
MGL_DEPTH_COMPONENT16_ARB: int
MGL_DEPTH_COMPONENT24_ARB: int
MGL_DEPTH_COMPONENT32_ARB: int
MGL_DEPTH_FUNC: int
MGL_DEPTH_RANGE: int
MGL_DEPTH_SCALE: int
MGL_DEPTH_TEST: int
MGL_DEPTH_TEXTURE_MODE_ARB: int
MGL_DEPTH_WRITEMASK: int
MGL_DIFFUSE: int
MGL_DISCARD_NV: int
MGL_DITHER: int
MGL_DOMAIN: int
MGL_DONT_CARE: int
MGL_DOT2_ADD_ATI: int
MGL_DOT3_ATI: int
MGL_DOT3_RGB: int
MGL_DOT3_RGBA: int
MGL_DOT3_RGBA_ARB: int
MGL_DOT3_RGBA_EXT: int
MGL_DOT3_RGB_ARB: int
MGL_DOT3_RGB_EXT: int
MGL_DOT4_ATI: int
MGL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV: int
MGL_DOT_PRODUCT_DEPTH_REPLACE_NV: int
MGL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV: int
MGL_DOT_PRODUCT_NV: int
MGL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV: int
MGL_DOT_PRODUCT_TEXTURE_2D_NV: int
MGL_DOT_PRODUCT_TEXTURE_3D_NV: int
MGL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV: int
MGL_DOUBLE: int
MGL_DOUBLEBUFFER: int
MGL_DRAW_BUFFER: int
MGL_DRAW_FRAMEBUFFER: int
MGL_DRAW_PIXEL_TOKEN: int
MGL_DSDT8_MAG8_INTENSITY8_NV: int
MGL_DSDT8_MAG8_NV: int
MGL_DSDT8_NV: int
MGL_DSDT_MAG_INTENSITY_NV: int
MGL_DSDT_MAG_NV: int
MGL_DSDT_MAG_VIB_NV: int
MGL_DSDT_NV: int
MGL_DST_ALPHA: int
MGL_DST_COLOR: int
MGL_DS_BIAS_NV: int
MGL_DS_SCALE_NV: int
MGL_DT_BIAS_NV: int
MGL_DT_SCALE_NV: int
MGL_DYNAMIC_COPY_ARB: int
MGL_DYNAMIC_DRAW_ARB: int
MGL_DYNAMIC_READ_ARB: int
MGL_EDGE_FLAG: int
MGL_EDGE_FLAG_ARRAY: int
MGL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB: int
MGL_EDGE_FLAG_ARRAY_COUNT_EXT: int
MGL_EDGE_FLAG_ARRAY_EXT: int
MGL_EDGE_FLAG_ARRAY_POINTER: int
MGL_EDGE_FLAG_ARRAY_POINTER_EXT: int
MGL_EDGE_FLAG_ARRAY_STRIDE: int
MGL_EDGE_FLAG_ARRAY_STRIDE_EXT: int
MGL_EIGHTH_BIT_ATI: int
MGL_ELEMENT_ARRAY_BUFFER_ARB: int
MGL_ELEMENT_ARRAY_BUFFER_BINDING_ARB: int
MGL_EMBOSS_CONSTANT_NV: int
MGL_EMBOSS_LIGHT_NV: int
MGL_EMBOSS_MAP_NV: int
MGL_EMISSION: int
MGL_ENABLE_BIT: int
MGL_EQUAL: int
MGL_EQUIV: int
MGL_EVAL_BIT: int
MGL_EXP: int
MGL_EXP2: int
MGL_EXPAND_NEGATE_NV: int
MGL_EXPAND_NORMAL_NV: int
MGL_EXTENSIONS: int
MGL_EXT_vertex_shader: int
MGL_EYE_LINEAR: int
MGL_EYE_PLANE: int
MGL_E_TIMES_F_NV: int
MGL_FALSE: int
MGL_FASTEST: int
MGL_FEEDBACK: int
MGL_FEEDBACK_BUFFER_POINTER: int
MGL_FEEDBACK_BUFFER_SIZE: int
MGL_FEEDBACK_BUFFER_TYPE: int
MGL_FENCE_CONDITION_NV: int
MGL_FENCE_STATUS_NV: int
MGL_FILL: int
MGL_FIXED_ONLY: int
MGL_FLAT: int
MGL_FLOAT: int
MGL_FLOAT_CLEAR_COLOR_VALUE_NV: int
MGL_FLOAT_MAT2_ARB: int
MGL_FLOAT_MAT3_ARB: int
MGL_FLOAT_MAT4_ARB: int
MGL_FLOAT_R16_NV: int
MGL_FLOAT_R32_NV: int
MGL_FLOAT_RG16_NV: int
MGL_FLOAT_RG32_NV: int
MGL_FLOAT_RGB16_NV: int
MGL_FLOAT_RGB32_NV: int
MGL_FLOAT_RGBA16_NV: int
MGL_FLOAT_RGBA32_NV: int
MGL_FLOAT_RGBA_MODE_NV: int
MGL_FLOAT_RGBA_NV: int
MGL_FLOAT_RGB_NV: int
MGL_FLOAT_RG_NV: int
MGL_FLOAT_R_NV: int
MGL_FLOAT_VEC2_ARB: int
MGL_FLOAT_VEC3_ARB: int
MGL_FLOAT_VEC4_ARB: int
MGL_FOG: int
MGL_FOG_BIT: int
MGL_FOG_COLOR: int
MGL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB: int
MGL_FOG_COORDINATE_ARRAY_EXT: int
MGL_FOG_COORDINATE_ARRAY_POINTER_EXT: int
MGL_FOG_COORDINATE_ARRAY_STRIDE_EXT: int
MGL_FOG_COORDINATE_ARRAY_TYPE_EXT: int
MGL_FOG_COORDINATE_EXT: int
MGL_FOG_COORDINATE_SOURCE_EXT: int
MGL_FOG_DENSITY: int
MGL_FOG_END: int
MGL_FOG_HINT: int
MGL_FOG_INDEX: int
MGL_FOG_MODE: int
MGL_FOG_SPECULAR_TEXTURE_WIN: int
MGL_FOG_START: int
MGL_FRAGMENT_DEPTH_EXT: int
MGL_FRAGMENT_PROGRAM_ARB: int
MGL_FRAGMENT_PROGRAM_BINDING_NV: int
MGL_FRAGMENT_PROGRAM_NV: int
MGL_FRAGMENT_SHADER_ARB: int
MGL_FRAGMENT_SHADER_ATI: int
MGL_FRAMEBUFFER: int
MGL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: int
MGL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: int
MGL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET: int
MGL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: int
MGL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: int
MGL_FRAMEBUFFER_BINDING: int
MGL_FRAMEBUFFER_COMPLETE: int
MGL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT: int
MGL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS: int
MGL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER: int
MGL_FRAMEBUFFER_INCOMPLETE_DUPLICATE_ATTACHMENT: int
MGL_FRAMEBUFFER_INCOMPLETE_FORMATS: int
MGL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: int
MGL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER: int
MGL_FRAMEBUFFER_UNSUPPORTED: int
MGL_FRONT: int
MGL_FRONT_AND_BACK: int
MGL_FRONT_FACE: int
MGL_FRONT_LEFT: int
MGL_FRONT_RIGHT: int
MGL_FULL_RANGE_EXT: int
MGL_FUNC_ADD: int
MGL_FUNC_ADD_EXT: int
MGL_FUNC_REVERSE_SUBTRACT: int
MGL_FUNC_REVERSE_SUBTRACT_EXT: int
MGL_FUNC_SUBTRACT: int
MGL_FUNC_SUBTRACT_EXT: int
MGL_GENERATE_MIPMAP_SGIS: int
MGL_GENERIC_ATTRIB_NV: int
MGL_GEQUAL: int
MGL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX: int
MGL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX: int
MGL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX: int
MGL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX: int
MGL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX: int
MGL_GREATER: int
MGL_GREEN: int
MGL_GREEN_BIAS: int
MGL_GREEN_BITS: int
MGL_GREEN_BIT_ATI: int
MGL_GREEN_SCALE: int
MGL_HALF_BIAS_NEGATE_NV: int
MGL_HALF_BIAS_NORMAL_NV: int
MGL_HALF_BIT_ATI: int
MGL_HALF_FLOAT: int
MGL_HILO16_NV: int
MGL_HILO_NV: int
MGL_HINT_BIT: int
MGL_HI_BIAS_NV: int
MGL_HI_SCALE_NV: int
MGL_IBM_TEXTURE_MIRRORED_REPEAT: int
MGL_IDENTITY_NV: int
MGL_INCR: int
MGL_INCR_WRAP_EXT: int
MGL_INDEX_ARRAY: int
MGL_INDEX_ARRAY_BUFFER_BINDING_ARB: int
MGL_INDEX_ARRAY_COUNT_EXT: int
MGL_INDEX_ARRAY_EXT: int
MGL_INDEX_ARRAY_POINTER: int
MGL_INDEX_ARRAY_POINTER_EXT: int
MGL_INDEX_ARRAY_STRIDE: int
MGL_INDEX_ARRAY_STRIDE_EXT: int
MGL_INDEX_ARRAY_TYPE: int
MGL_INDEX_ARRAY_TYPE_EXT: int
MGL_INDEX_BITS: int
MGL_INDEX_CLEAR_VALUE: int
MGL_INDEX_LOGIC_OP: int
MGL_INDEX_MODE: int
MGL_INDEX_OFFSET: int
MGL_INDEX_SHIFT: int
MGL_INDEX_WRITEMASK: int
MGL_INT: int
MGL_INTENSITY: int
MGL_INTENSITY12: int
MGL_INTENSITY16: int
MGL_INTENSITY16F: int
MGL_INTENSITY32F: int
MGL_INTENSITY4: int
MGL_INTENSITY8: int
MGL_INTERLEAVED_ATTRIBS_EXT: int
MGL_INTERLEAVED_ATTRIBS_NV: int
MGL_INTERPOLATE: int
MGL_INTERPOLATE_EXT: int
MGL_INT_VEC2_ARB: int
MGL_INT_VEC3_ARB: int
MGL_INT_VEC4_ARB: int
MGL_INVALID_ENUM: int
MGL_INVALID_FRAMEBUFFER_OPERATION: int
MGL_INVALID_OPERATION: int
MGL_INVALID_VALUE: int
MGL_INVARIANT_DATATYPE_EXT: int
MGL_INVARIANT_EXT: int
MGL_INVARIANT_VALUE_EXT: int
MGL_INVERSE_NV: int
MGL_INVERSE_TRANSPOSE_NV: int
MGL_INVERT: int
MGL_ISOTROPIC_BRDF_NV: int
MGL_KEEP: int
MGL_LEFT: int
MGL_LEQUAL: int
MGL_LERP_ATI: int
MGL_LESS: int
MGL_LIGHT0: int
MGL_LIGHT1: int
MGL_LIGHT2: int
MGL_LIGHT3: int
MGL_LIGHT4: int
MGL_LIGHT5: int
MGL_LIGHT6: int
MGL_LIGHT7: int
MGL_LIGHTING: int
MGL_LIGHTING_BIT: int
MGL_LIGHT_MODEL_AMBIENT: int
MGL_LIGHT_MODEL_COLOR_CONTROL: int
MGL_LIGHT_MODEL_LOCAL_VIEWER: int
MGL_LIGHT_MODEL_TWO_SIDE: int
MGL_LINE: int
MGL_LINEAR: int
MGL_LINEAR_ATTENUATION: int
MGL_LINEAR_MIPMAP_LINEAR: int
MGL_LINEAR_MIPMAP_NEAREST: int
MGL_LINES: int
MGL_LINE_BIT: int
MGL_LINE_LOOP: int
MGL_LINE_RESET_TOKEN: int
MGL_LINE_SMOOTH: int
MGL_LINE_SMOOTH_HINT: int
MGL_LINE_STIPPLE: int
MGL_LINE_STIPPLE_PATTERN: int
MGL_LINE_STIPPLE_REPEAT: int
MGL_LINE_STRIP: int
MGL_LINE_TOKEN: int
MGL_LINE_WIDTH: int
MGL_LINE_WIDTH_GRANULARITY: int
MGL_LINE_WIDTH_RANGE: int
MGL_LIST_BASE: int
MGL_LIST_BIT: int
MGL_LIST_INDEX: int
MGL_LIST_MODE: int
MGL_LOAD: int
MGL_LOCAL_CONSTANT_DATATYPE_EXT: int
MGL_LOCAL_CONSTANT_EXT: int
MGL_LOCAL_CONSTANT_VALUE_EXT: int
MGL_LOCAL_EXT: int
MGL_LOGIC_OP: int
MGL_LOGIC_OP_MODE: int
MGL_LO_BIAS_NV: int
MGL_LO_SCALE_NV: int
MGL_LUMINANCE: int
MGL_LUMINANCE12: int
MGL_LUMINANCE12_ALPHA12: int
MGL_LUMINANCE12_ALPHA4: int
MGL_LUMINANCE16: int
MGL_LUMINANCE16F: int
MGL_LUMINANCE16_ALPHA16: int
MGL_LUMINANCE32F: int
MGL_LUMINANCE4: int
MGL_LUMINANCE4_ALPHA4: int
MGL_LUMINANCE6_ALPHA2: int
MGL_LUMINANCE8: int
MGL_LUMINANCE8_ALPHA8: int
MGL_LUMINANCE_ALPHA: int
MGL_LUMINANCE_ALPHA16F: int
MGL_LUMINANCE_ALPHA32F: int
MGL_MAD_ATI: int
MGL_MAGNITUDE_BIAS_NV: int
MGL_MAGNITUDE_SCALE_NV: int
MGL_MAP1_COLOR_4: int
MGL_MAP1_GRID_DOMAIN: int
MGL_MAP1_GRID_SEGMENTS: int
MGL_MAP1_INDEX: int
MGL_MAP1_NORMAL: int
MGL_MAP1_TEXTURE_COORD_1: int
MGL_MAP1_TEXTURE_COORD_2: int
MGL_MAP1_TEXTURE_COORD_3: int
MGL_MAP1_TEXTURE_COORD_4: int
MGL_MAP1_VERTEX_3: int
MGL_MAP1_VERTEX_4: int
MGL_MAP1_VERTEX_ATTRIB0_4_NV: int
MGL_MAP1_VERTEX_ATTRIB10_4_NV: int
MGL_MAP1_VERTEX_ATTRIB11_4_NV: int
MGL_MAP1_VERTEX_ATTRIB12_4_NV: int
MGL_MAP1_VERTEX_ATTRIB13_4_NV: int
MGL_MAP1_VERTEX_ATTRIB14_4_NV: int
MGL_MAP1_VERTEX_ATTRIB15_4_NV: int
MGL_MAP1_VERTEX_ATTRIB1_4_NV: int
MGL_MAP1_VERTEX_ATTRIB2_4_NV: int
MGL_MAP1_VERTEX_ATTRIB3_4_NV: int
MGL_MAP1_VERTEX_ATTRIB4_4_NV: int
MGL_MAP1_VERTEX_ATTRIB5_4_NV: int
MGL_MAP1_VERTEX_ATTRIB6_4_NV: int
MGL_MAP1_VERTEX_ATTRIB7_4_NV: int
MGL_MAP1_VERTEX_ATTRIB8_4_NV: int
MGL_MAP1_VERTEX_ATTRIB9_4_NV: int
MGL_MAP2_COLOR_4: int
MGL_MAP2_GRID_DOMAIN: int
MGL_MAP2_GRID_SEGMENTS: int
MGL_MAP2_INDEX: int
MGL_MAP2_NORMAL: int
MGL_MAP2_TEXTURE_COORD_1: int
MGL_MAP2_TEXTURE_COORD_2: int
MGL_MAP2_TEXTURE_COORD_3: int
MGL_MAP2_TEXTURE_COORD_4: int
MGL_MAP2_VERTEX_3: int
MGL_MAP2_VERTEX_4: int
MGL_MAP2_VERTEX_ATTRIB0_4_NV: int
MGL_MAP2_VERTEX_ATTRIB10_4_NV: int
MGL_MAP2_VERTEX_ATTRIB11_4_NV: int
MGL_MAP2_VERTEX_ATTRIB12_4_NV: int
MGL_MAP2_VERTEX_ATTRIB13_4_NV: int
MGL_MAP2_VERTEX_ATTRIB14_4_NV: int
MGL_MAP2_VERTEX_ATTRIB15_4_NV: int
MGL_MAP2_VERTEX_ATTRIB1_4_NV: int
MGL_MAP2_VERTEX_ATTRIB2_4_NV: int
MGL_MAP2_VERTEX_ATTRIB3_4_NV: int
MGL_MAP2_VERTEX_ATTRIB4_4_NV: int
MGL_MAP2_VERTEX_ATTRIB5_4_NV: int
MGL_MAP2_VERTEX_ATTRIB6_4_NV: int
MGL_MAP2_VERTEX_ATTRIB7_4_NV: int
MGL_MAP2_VERTEX_ATTRIB8_4_NV: int
MGL_MAP2_VERTEX_ATTRIB9_4_NV: int
MGL_MAP_COLOR: int
MGL_MAP_STENCIL: int
MGL_MATRIX0: int
MGL_MATRIX0_NV: int
MGL_MATRIX1: int
MGL_MATRIX10: int
MGL_MATRIX11: int
MGL_MATRIX12: int
MGL_MATRIX13: int
MGL_MATRIX14: int
MGL_MATRIX15: int
MGL_MATRIX16: int
MGL_MATRIX17: int
MGL_MATRIX18: int
MGL_MATRIX19: int
MGL_MATRIX1_NV: int
MGL_MATRIX2: int
MGL_MATRIX20: int
MGL_MATRIX21: int
MGL_MATRIX22: int
MGL_MATRIX23: int
MGL_MATRIX24: int
MGL_MATRIX25: int
MGL_MATRIX26: int
MGL_MATRIX27: int
MGL_MATRIX28: int
MGL_MATRIX29: int
MGL_MATRIX2_NV: int
MGL_MATRIX3: int
MGL_MATRIX30: int
MGL_MATRIX31: int
MGL_MATRIX3_NV: int
MGL_MATRIX4: int
MGL_MATRIX4_NV: int
MGL_MATRIX5: int
MGL_MATRIX5_NV: int
MGL_MATRIX6: int
MGL_MATRIX6_NV: int
MGL_MATRIX7: int
MGL_MATRIX7_NV: int
MGL_MATRIX8: int
MGL_MATRIX9: int
MGL_MATRIX_EXT: int
MGL_MATRIX_MODE: int
MGL_MAX: int
MGL_MAX_3D_TEXTURE_SIZE: int
MGL_MAX_3D_TEXTURE_SIZE_EXT: int
MGL_MAX_ATTRIB_STACK_DEPTH: int
MGL_MAX_CLIENT_ATTRIB_STACK_DEPTH: int
MGL_MAX_CLIP_PLANES: int
MGL_MAX_COLOR_ATTACHMENTS: int
MGL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB: int
MGL_MAX_CUBE_MAP_TEXTURE_SIZE: int
MGL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB: int
MGL_MAX_EVAL_ORDER: int
MGL_MAX_EXT: int
MGL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV: int
MGL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB: int
MGL_MAX_GENERAL_COMBINERS_NV: int
MGL_MAX_LIGHTS: int
MGL_MAX_LIST_NESTING: int
MGL_MAX_MODELVIEW_STACK_DEPTH: int
MGL_MAX_NAME_STACK_DEPTH: int
MGL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT: int
MGL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT: int
MGL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT: int
MGL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT: int
MGL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT: int
MGL_MAX_PIXEL_MAP_TABLE: int
MGL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI: int
MGL_MAX_PROGRAM_ADDRESS_REGISTERS: int
MGL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB: int
MGL_MAX_PROGRAM_ATTRIBS: int
MGL_MAX_PROGRAM_ENV_PARAMETERS: int
MGL_MAX_PROGRAM_INSTRUCTIONS: int
MGL_MAX_PROGRAM_LOCAL_PARAMETERS: int
MGL_MAX_PROGRAM_MATRICES: int
MGL_MAX_PROGRAM_MATRIX_STACK_DEPTH: int
MGL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS: int
MGL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB: int
MGL_MAX_PROGRAM_NATIVE_ATTRIBS: int
MGL_MAX_PROGRAM_NATIVE_INSTRUCTIONS: int
MGL_MAX_PROGRAM_NATIVE_PARAMETERS: int
MGL_MAX_PROGRAM_NATIVE_TEMPORARIES: int
MGL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB: int
MGL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB: int
MGL_MAX_PROGRAM_PARAMETERS: int
MGL_MAX_PROGRAM_TEMPORARIES: int
MGL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB: int
MGL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB: int
MGL_MAX_PROJECTION_STACK_DEPTH: int
MGL_MAX_RECTANGLE_TEXTURE_SIZE: int
MGL_MAX_RENDERBUFFER_SIZE: int
MGL_MAX_TEXTURE_COORDS_ARB: int
MGL_MAX_TEXTURE_COORDS_NV: int
MGL_MAX_TEXTURE_IMAGE_UNITS_ARB: int
MGL_MAX_TEXTURE_IMAGE_UNITS_NV: int
MGL_MAX_TEXTURE_MAX_ANISOTROPY_EXT: int
MGL_MAX_TEXTURE_SIZE: int
MGL_MAX_TEXTURE_STACK_DEPTH: int
MGL_MAX_TEXTURE_UNITS: int
MGL_MAX_TEXTURE_UNITS_ARB: int
MGL_MAX_TRACK_MATRICES_NV: int
MGL_MAX_TRACK_MATRIX_STACK_DEPTH_NV: int
MGL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT: int
MGL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV: int
MGL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT: int
MGL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV: int
MGL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT: int
MGL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV: int
MGL_MAX_VARYING_FLOATS_ARB: int
MGL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV: int
MGL_MAX_VERTEX_ATTRIBS: int
MGL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT: int
MGL_MAX_VERTEX_SHADER_INVARIANTS_EXT: int
MGL_MAX_VERTEX_SHADER_LOCALS_EXT: int
MGL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT: int
MGL_MAX_VERTEX_SHADER_VARIANTS_EXT: int
MGL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB: int
MGL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB: int
MGL_MAX_VIEWPORT_DIMS: int
MGL_MIN: int
MGL_MIN_EXT: int
MGL_MIRRORED_REPEAT_IBM: int
MGL_MIRROR_CLAMP_ATI: int
MGL_MIRROR_CLAMP_TO_EDGE_ATI: int
MGL_MODELVIEW: int
MGL_MODELVIEW0_EXT: int
MGL_MODELVIEW0_MATRIX_EXT: int
MGL_MODELVIEW0_STACK_DEPTH_EXT: int
MGL_MODELVIEW1_EXT: int
MGL_MODELVIEW1_STACK_DEPTH_EXT: int
MGL_MODELVIEW_MATRIX: int
MGL_MODELVIEW_MATRIX1_EXT: int
MGL_MODELVIEW_PROJECTION_NV: int
MGL_MODELVIEW_STACK_DEPTH: int
MGL_MODULATE: int
MGL_MOV_ATI: int
MGL_MULT: int
MGL_MULTISAMPLE: int
MGL_MULTISAMPLE_ARB: int
MGL_MULTISAMPLE_BIT: int
MGL_MULTISAMPLE_BIT_ARB: int
MGL_MUL_ATI: int
MGL_MVP_MATRIX_EXT: int
MGL_N3F_V3F: int
MGL_NAME_STACK_DEPTH: int
MGL_NAND: int
MGL_NEAREST: int
MGL_NEAREST_MIPMAP_LINEAR: int
MGL_NEAREST_MIPMAP_NEAREST: int
MGL_NEGATE_BIT_ATI: int
MGL_NEGATIVE_ONE_EXT: int
MGL_NEGATIVE_W_EXT: int
MGL_NEGATIVE_X_EXT: int
MGL_NEGATIVE_Y_EXT: int
MGL_NEGATIVE_Z_EXT: int
MGL_NEVER: int
MGL_NICEST: int
MGL_NONE: int
MGL_NOOP: int
MGL_NOR: int
MGL_NORMALIZE: int
MGL_NORMALIZED_RANGE_EXT: int
MGL_NORMAL_ARRAY: int
MGL_NORMAL_ARRAY_BUFFER_BINDING_ARB: int
MGL_NORMAL_ARRAY_COUNT_EXT: int
MGL_NORMAL_ARRAY_EXT: int
MGL_NORMAL_ARRAY_POINTER: int
MGL_NORMAL_ARRAY_POINTER_EXT: int
MGL_NORMAL_ARRAY_STRIDE: int
MGL_NORMAL_ARRAY_STRIDE_EXT: int
MGL_NORMAL_ARRAY_TYPE: int
MGL_NORMAL_ARRAY_TYPE_EXT: int
MGL_NORMAL_MAP: int
MGL_NORMAL_MAP_ARB: int
MGL_NOTEQUAL: int
MGL_NO_ERROR: int
MGL_NUM_COMPRESSED_TEXTURE_FORMATS: int
MGL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB: int
MGL_NUM_FRAGMENT_CONSTANTS_ATI: int
MGL_NUM_FRAGMENT_REGISTERS_ATI: int
MGL_NUM_GENERAL_COMBINERS_NV: int
MGL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI: int
MGL_NUM_INSTRUCTIONS_PER_PASS_ATI: int
MGL_NUM_INSTRUCTIONS_TOTAL_ATI: int
MGL_NUM_LOOPBACK_COMPONENTS_ATI: int
MGL_NUM_PASSES_ATI: int
MGL_OBJECT_ACTIVE_ATTRIBUTES_ARB: int
MGL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB: int
MGL_OBJECT_ACTIVE_UNIFORMS_ARB: int
MGL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB: int
MGL_OBJECT_ATTACHED_OBJECTS_ARB: int
MGL_OBJECT_COMPILE_STATUS_ARB: int
MGL_OBJECT_DELETE_STATUS_ARB: int
MGL_OBJECT_INFO_LOG_LENGTH_ARB: int
MGL_OBJECT_LINEAR: int
MGL_OBJECT_LINK_STATUS_ARB: int
MGL_OBJECT_PLANE: int
MGL_OBJECT_SHADER_SOURCE_LENGTH_ARB: int
MGL_OBJECT_SUBTYPE_ARB: int
MGL_OBJECT_TYPE_ARB: int
MGL_OBJECT_VALIDATE_STATUS_ARB: int
MGL_OCCLUSION_TEST_HP: int
MGL_OCCLUSION_TEST_RESULT_HP: int
MGL_OFFSET_TEXTURE_2D_BIAS_NV: int
MGL_OFFSET_TEXTURE_2D_MATRIX_NV: int
MGL_OFFSET_TEXTURE_2D_NV: int
MGL_OFFSET_TEXTURE_2D_SCALE_NV: int
MGL_ONE: int
MGL_ONE_EXT: int
MGL_ONE_MINUS_CONSTANT_ALPHA: int
MGL_ONE_MINUS_CONSTANT_ALPHA_EXT: int
MGL_ONE_MINUS_CONSTANT_COLOR: int
MGL_ONE_MINUS_CONSTANT_COLOR_EXT: int
MGL_ONE_MINUS_DST_ALPHA: int
MGL_ONE_MINUS_DST_COLOR: int
MGL_ONE_MINUS_SRC_ALPHA: int
MGL_ONE_MINUS_SRC_COLOR: int
MGL_OPERAND0_ALPHA: int
MGL_OPERAND0_ALPHA_EXT: int
MGL_OPERAND0_RGB: int
MGL_OPERAND0_RGB_EXT: int
MGL_OPERAND1_ALPHA: int
MGL_OPERAND1_ALPHA_EXT: int
MGL_OPERAND1_RGB: int
MGL_OPERAND1_RGB_EXT: int
MGL_OPERAND2_ALPHA: int
MGL_OPERAND2_ALPHA_EXT: int
MGL_OPERAND2_RGB: int
MGL_OPERAND2_RGB_EXT: int
MGL_OPERAND3_ALPHA_NV: int
MGL_OPERAND3_RGB_NV: int
MGL_OP_ADD_EXT: int
MGL_OP_CLAMP_EXT: int
MGL_OP_CROSS_PRODUCT_EXT: int
MGL_OP_DOT3_EXT: int
MGL_OP_DOT4_EXT: int
MGL_OP_EXP_BASE_2_EXT: int
MGL_OP_FLOOR_EXT: int
MGL_OP_FRAC_EXT: int
MGL_OP_INDEX_EXT: int
MGL_OP_LOG_BASE_2_EXT: int
MGL_OP_MADD_EXT: int
MGL_OP_MAX_EXT: int
MGL_OP_MIN_EXT: int
MGL_OP_MOV_EXT: int
MGL_OP_MULTIPLY_MATRIX_EXT: int
MGL_OP_MUL_EXT: int
MGL_OP_NEGATE_EXT: int
MGL_OP_POWER_EXT: int
MGL_OP_RECIP_EXT: int
MGL_OP_RECIP_SQRT_EXT: int
MGL_OP_ROUND_EXT: int
MGL_OP_SET_GE_EXT: int
MGL_OP_SET_LT_EXT: int
MGL_OP_SUB_EXT: int
MGL_OR: int
MGL_ORDER: int
MGL_OR_INVERTED: int
MGL_OR_REVERSE: int
MGL_OUTPUT_COLOR0_EXT: int
MGL_OUTPUT_COLOR1_EXT: int
MGL_OUTPUT_FOG_EXT: int
MGL_OUTPUT_TEXTURE_COORD0_EXT: int
MGL_OUTPUT_TEXTURE_COORD10_EXT: int
MGL_OUTPUT_TEXTURE_COORD11_EXT: int
MGL_OUTPUT_TEXTURE_COORD12_EXT: int
MGL_OUTPUT_TEXTURE_COORD13_EXT: int
MGL_OUTPUT_TEXTURE_COORD14_EXT: int
MGL_OUTPUT_TEXTURE_COORD15_EXT: int
MGL_OUTPUT_TEXTURE_COORD16_EXT: int
MGL_OUTPUT_TEXTURE_COORD17_EXT: int
MGL_OUTPUT_TEXTURE_COORD18_EXT: int
MGL_OUTPUT_TEXTURE_COORD19_EXT: int
MGL_OUTPUT_TEXTURE_COORD1_EXT: int
MGL_OUTPUT_TEXTURE_COORD20_EXT: int
MGL_OUTPUT_TEXTURE_COORD21_EXT: int
MGL_OUTPUT_TEXTURE_COORD22_EXT: int
MGL_OUTPUT_TEXTURE_COORD23_EXT: int
MGL_OUTPUT_TEXTURE_COORD24_EXT: int
MGL_OUTPUT_TEXTURE_COORD25_EXT: int
MGL_OUTPUT_TEXTURE_COORD26_EXT: int
MGL_OUTPUT_TEXTURE_COORD27_EXT: int
MGL_OUTPUT_TEXTURE_COORD28_EXT: int
MGL_OUTPUT_TEXTURE_COORD29_EXT: int
MGL_OUTPUT_TEXTURE_COORD2_EXT: int
MGL_OUTPUT_TEXTURE_COORD30_EXT: int
MGL_OUTPUT_TEXTURE_COORD31_EXT: int
MGL_OUTPUT_TEXTURE_COORD3_EXT: int
MGL_OUTPUT_TEXTURE_COORD4_EXT: int
MGL_OUTPUT_TEXTURE_COORD5_EXT: int
MGL_OUTPUT_TEXTURE_COORD6_EXT: int
MGL_OUTPUT_TEXTURE_COORD7_EXT: int
MGL_OUTPUT_TEXTURE_COORD8_EXT: int
MGL_OUTPUT_TEXTURE_COORD9_EXT: int
MGL_OUTPUT_VERTEX_EXT: int
MGL_OUT_OF_MEMORY: int
MGL_PACK_ALIGNMENT: int
MGL_PACK_IMAGE_HEIGHT: int
MGL_PACK_IMAGE_HEIGHT_EXT: int
MGL_PACK_LSB_FIRST: int
MGL_PACK_ROW_LENGTH: int
MGL_PACK_SKIP_IMAGES: int
MGL_PACK_SKIP_IMAGES_EXT: int
MGL_PACK_SKIP_PIXELS: int
MGL_PACK_SKIP_ROWS: int
MGL_PACK_SWAP_BYTES: int
MGL_PASS_THROUGH_NV: int
MGL_PASS_THROUGH_TOKEN: int
MGL_PERSPECTIVE_CORRECTION_HINT: int
MGL_PHONG_HINT_WIN: int
MGL_PHONG_WIN: int
MGL_PIXEL_COUNTER_BITS_ARB: int
MGL_PIXEL_COUNTER_BITS_NV: int
MGL_PIXEL_COUNT_AVAILABLE_NV: int
MGL_PIXEL_COUNT_NV: int
MGL_PIXEL_MAP_A_TO_A: int
MGL_PIXEL_MAP_A_TO_A_SIZE: int
MGL_PIXEL_MAP_B_TO_B: int
MGL_PIXEL_MAP_B_TO_B_SIZE: int
MGL_PIXEL_MAP_G_TO_G: int
MGL_PIXEL_MAP_G_TO_G_SIZE: int
MGL_PIXEL_MAP_I_TO_A: int
MGL_PIXEL_MAP_I_TO_A_SIZE: int
MGL_PIXEL_MAP_I_TO_B: int
MGL_PIXEL_MAP_I_TO_B_SIZE: int
MGL_PIXEL_MAP_I_TO_G: int
MGL_PIXEL_MAP_I_TO_G_SIZE: int
MGL_PIXEL_MAP_I_TO_I: int
MGL_PIXEL_MAP_I_TO_I_SIZE: int
MGL_PIXEL_MAP_I_TO_R: int
MGL_PIXEL_MAP_I_TO_R_SIZE: int
MGL_PIXEL_MAP_R_TO_R: int
MGL_PIXEL_MAP_R_TO_R_SIZE: int
MGL_PIXEL_MAP_S_TO_S: int
MGL_PIXEL_MAP_S_TO_S_SIZE: int
MGL_PIXEL_MODE_BIT: int
MGL_PN_TRIANGLES_ATI: int
MGL_PN_TRIANGLES_NORMAL_MODE_ATI: int
MGL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI: int
MGL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI: int
MGL_PN_TRIANGLES_POINT_MODE_ATI: int
MGL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI: int
MGL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI: int
MGL_PN_TRIANGLES_TESSELATION_LEVEL_ATI: int
MGL_POINT: int
MGL_POINTS: int
MGL_POINT_BIT: int
MGL_POINT_DISTANCE_ATTENUATION_ARB: int
MGL_POINT_FADE_THRESHOLD_SIZE_ARB: int
MGL_POINT_SIZE: int
MGL_POINT_SIZE_GRANULARITY: int
MGL_POINT_SIZE_MAX_ARB: int
MGL_POINT_SIZE_MIN_ARB: int
MGL_POINT_SIZE_RANGE: int
MGL_POINT_SMOOTH: int
MGL_POINT_SMOOTH_HINT: int
MGL_POINT_TOKEN: int
MGL_POLYGON: int
MGL_POLYGON_BIT: int
MGL_POLYGON_MODE: int
MGL_POLYGON_OFFSET_FACTOR: int
MGL_POLYGON_OFFSET_FILL: int
MGL_POLYGON_OFFSET_LINE: int
MGL_POLYGON_OFFSET_POINT: int
MGL_POLYGON_OFFSET_UNITS: int
MGL_POLYGON_SMOOTH: int
MGL_POLYGON_SMOOTH_HINT: int
MGL_POLYGON_STIPPLE: int
MGL_POLYGON_STIPPLE_BIT: int
MGL_POLYGON_TOKEN: int
MGL_POSITION: int
MGL_PREVIOUS: int
MGL_PREVIOUS_EXT: int
MGL_PREVIOUS_TEXTURE_INPUT_NV: int
MGL_PRIMARY_COLOR: int
MGL_PRIMARY_COLOR_EXT: int
MGL_PRIMARY_COLOR_NV: int
MGL_PRIMITIVES_GENERATED_EXT: int
MGL_PRIMITIVES_GENERATED_NV: int
MGL_PRIMITIVE_ID_NV: int
MGL_PRIMITIVE_RESTART_INDEX_NV: int
MGL_PRIMITIVE_RESTART_NV: int
MGL_PROGRAM_ADDRESS_REGISTERS: int
MGL_PROGRAM_ALU_INSTRUCTIONS_ARB: int
MGL_PROGRAM_ATTRIBS: int
MGL_PROGRAM_BINDING: int
MGL_PROGRAM_ERROR_POSITION: int
MGL_PROGRAM_ERROR_POSITION_NV: int
MGL_PROGRAM_ERROR_STRING: int
MGL_PROGRAM_ERROR_STRING_NV: int
MGL_PROGRAM_FORMAT: int
MGL_PROGRAM_FORMAT_ASCII: int
MGL_PROGRAM_INSTRUCTIONS: int
MGL_PROGRAM_LENGTH: int
MGL_PROGRAM_LENGTH_NV: int
MGL_PROGRAM_NATIVE_ADDRESS_REGISTERS: int
MGL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB: int
MGL_PROGRAM_NATIVE_ATTRIBS: int
MGL_PROGRAM_NATIVE_INSTRUCTIONS: int
MGL_PROGRAM_NATIVE_PARAMETERS: int
MGL_PROGRAM_NATIVE_TEMPORARIES: int
MGL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB: int
MGL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB: int
MGL_PROGRAM_OBJECT_ARB: int
MGL_PROGRAM_PARAMETERS: int
MGL_PROGRAM_PARAMETER_NV: int
MGL_PROGRAM_RESIDENT_NV: int
MGL_PROGRAM_STRING: int
MGL_PROGRAM_STRING_NV: int
MGL_PROGRAM_TARGET_NV: int
MGL_PROGRAM_TEMPORARIES: int
MGL_PROGRAM_TEX_INDIRECTIONS_ARB: int
MGL_PROGRAM_TEX_INSTRUCTIONS_ARB: int
MGL_PROGRAM_UNDER_NATIVE_LIMITS: int
MGL_PROJECTION: int
MGL_PROJECTION_MATRIX: int
MGL_PROJECTION_STACK_DEPTH: int
MGL_PROXY_TEXTURE_1D: int
MGL_PROXY_TEXTURE_2D: int
MGL_PROXY_TEXTURE_3D: int
MGL_PROXY_TEXTURE_3D_EXT: int
MGL_PROXY_TEXTURE_CUBE_MAP: int
MGL_PROXY_TEXTURE_CUBE_MAP_ARB: int
MGL_PROXY_TEXTURE_RECTANGLE: int
MGL_Q: int
MGL_QUADRATIC_ATTENUATION: int
MGL_QUADS: int
MGL_QUAD_STRIP: int
MGL_QUARTER_BIT_ATI: int
MGL_QUERY_RESULT_ARB: int
MGL_QUERY_RESULT_AVAILABLE_ARB: int
MGL_R: int
MGL_R3_G3_B2: int
MGL_RASTERIZER_DISCARD_EXT: int
MGL_RASTERIZER_DISCARD_NV: int
MGL_READ_BUFFER: int
MGL_READ_FRAMEBUFFER: int
MGL_READ_ONLY_ARB: int
MGL_READ_WRITE_ARB: int
MGL_RED: int
MGL_RED_BIAS: int
MGL_RED_BITS: int
MGL_RED_BIT_ATI: int
MGL_RED_SCALE: int
MGL_REFLECTION_MAP: int
MGL_REFLECTION_MAP_ARB: int
MGL_REGISTER_COMBINERS_NV: int
MGL_REG_0_ATI: int
MGL_REG_10_ATI: int
MGL_REG_11_ATI: int
MGL_REG_12_ATI: int
MGL_REG_13_ATI: int
MGL_REG_14_ATI: int
MGL_REG_15_ATI: int
MGL_REG_16_ATI: int
MGL_REG_17_ATI: int
MGL_REG_18_ATI: int
MGL_REG_19_ATI: int
MGL_REG_1_ATI: int
MGL_REG_20_ATI: int
MGL_REG_21_ATI: int
MGL_REG_22_ATI: int
MGL_REG_23_ATI: int
MGL_REG_24_ATI: int
MGL_REG_25_ATI: int
MGL_REG_26_ATI: int
MGL_REG_27_ATI: int
MGL_REG_28_ATI: int
MGL_REG_29_ATI: int
MGL_REG_2_ATI: int
MGL_REG_30_ATI: int
MGL_REG_31_ATI: int
MGL_REG_3_ATI: int
MGL_REG_4_ATI: int
MGL_REG_5_ATI: int
MGL_REG_6_ATI: int
MGL_REG_7_ATI: int
MGL_REG_8_ATI: int
MGL_REG_9_ATI: int
MGL_RENDER: int
MGL_RENDERBUFFER: int
MGL_RENDERBUFFER_ALPHA_SIZE: int
MGL_RENDERBUFFER_BINDING: int
MGL_RENDERBUFFER_BLUE_SIZE: int
MGL_RENDERBUFFER_DEPTH_SIZE: int
MGL_RENDERBUFFER_FREE_MEMORY_ATI: int
MGL_RENDERBUFFER_GREEN_SIZE: int
MGL_RENDERBUFFER_HEIGHT: int
MGL_RENDERBUFFER_INTERNAL_FORMAT: int
MGL_RENDERBUFFER_RED_SIZE: int
MGL_RENDERBUFFER_STENCIL_SIZE: int
MGL_RENDERBUFFER_WIDTH: int
MGL_RENDERER: int
MGL_RENDER_MODE: int
MGL_REPEAT: int
MGL_REPLACE: int
MGL_RESCALE_NORMAL_EXT: int
MGL_RETURN: int
MGL_RGB: int
MGL_RGB10: int
MGL_RGB10_A2: int
MGL_RGB12: int
MGL_RGB16: int
MGL_RGB16F: int
MGL_RGB32F: int
MGL_RGB4: int
MGL_RGB5: int
MGL_RGB5_A1: int
MGL_RGB8: int
MGL_RGBA: int
MGL_RGBA12: int
MGL_RGBA16: int
MGL_RGBA16F: int
MGL_RGBA2: int
MGL_RGBA32F: int
MGL_RGBA4: int
MGL_RGBA8: int
MGL_RGBA_FLOAT_MODE: int
MGL_RGBA_FLOAT_MODE_ATI: int
MGL_RGBA_MODE: int
MGL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV: int
MGL_RGB_SCALE: int
MGL_RGB_SCALE_EXT: int
MGL_RIGHT: int
MGL_S: int
MGL_SAMPLES: int
MGL_SAMPLES_ARB: int
MGL_SAMPLES_PASSED_ARB: int
MGL_SAMPLE_ALPHA_TO_COVERAGE: int
MGL_SAMPLE_ALPHA_TO_COVERAGE_ARB: int
MGL_SAMPLE_ALPHA_TO_ONE: int
MGL_SAMPLE_ALPHA_TO_ONE_ARB: int
MGL_SAMPLE_BUFFERS: int
MGL_SAMPLE_BUFFERS_ARB: int
MGL_SAMPLE_COVERAGE: int
MGL_SAMPLE_COVERAGE_ARB: int
MGL_SAMPLE_COVERAGE_INVERT: int
MGL_SAMPLE_COVERAGE_INVERT_ARB: int
MGL_SAMPLE_COVERAGE_VALUE: int
MGL_SAMPLE_COVERAGE_VALUE_ARB: int
MGL_SATURATE_BIT_ATI: int
MGL_SCALAR_EXT: int
MGL_SCALE_BY_FOUR_NV: int
MGL_SCALE_BY_ONE_HALF_NV: int
MGL_SCALE_BY_TWO_NV: int
MGL_SCISSOR_BIT: int
MGL_SCISSOR_BOX: int
MGL_SCISSOR_TEST: int
MGL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB: int
MGL_SECONDARY_COLOR_ARRAY_EXT: int
MGL_SECONDARY_COLOR_ARRAY_POINTER_EXT: int
MGL_SECONDARY_COLOR_ARRAY_SIZE_EXT: int
MGL_SECONDARY_COLOR_ARRAY_STRIDE_EXT: int
MGL_SECONDARY_COLOR_ARRAY_TYPE_EXT: int
MGL_SECONDARY_COLOR_NV: int
MGL_SECONDARY_INTERPOLATOR_ATI: int
MGL_SELECT: int
MGL_SELECTION_BUFFER_POINTER: int
MGL_SELECTION_BUFFER_SIZE: int
MGL_SEPARATE_ATTRIBS_EXT: int
MGL_SEPARATE_ATTRIBS_NV: int
MGL_SEPARATE_SPECULAR_COLOR: int
MGL_SET: int
MGL_SHADER_CONSISTENT_NV: int
MGL_SHADER_OBJECT_ARB: int
MGL_SHADER_OPERATION_NV: int
MGL_SHADE_MODEL: int
MGL_SHININESS: int
MGL_SHORT: int
MGL_SIGNED_ALPHA8_NV: int
MGL_SIGNED_ALPHA_NV: int
MGL_SIGNED_HILO16_NV: int
MGL_SIGNED_HILO_NV: int
MGL_SIGNED_IDENTITY_NV: int
MGL_SIGNED_INTENSITY8_NV: int
MGL_SIGNED_INTENSITY_NV: int
MGL_SIGNED_LUMINANCE8_ALPHA8_NV: int
MGL_SIGNED_LUMINANCE8_NV: int
MGL_SIGNED_LUMINANCE_ALPHA_NV: int
MGL_SIGNED_LUMINANCE_NV: int
MGL_SIGNED_NEGATE_NV: int
MGL_SIGNED_RGB8_NV: int
MGL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV: int
MGL_SIGNED_RGBA8_NV: int
MGL_SIGNED_RGBA_NV: int
MGL_SIGNED_RGB_NV: int
MGL_SIGNED_RGB_UNSIGNED_ALPHA_NV: int
MGL_SINGLE_COLOR: int
MGL_SMOOTH: int
MGL_SOURCE0_ALPHA: int
MGL_SOURCE0_ALPHA_EXT: int
MGL_SOURCE0_RGB: int
MGL_SOURCE0_RGB_EXT: int
MGL_SOURCE1_ALPHA: int
MGL_SOURCE1_ALPHA_EXT: int
MGL_SOURCE1_RGB: int
MGL_SOURCE1_RGB_EXT: int
MGL_SOURCE2_ALPHA: int
MGL_SOURCE2_ALPHA_EXT: int
MGL_SOURCE2_RGB: int
MGL_SOURCE2_RGB_EXT: int
MGL_SOURCE3_ALPHA_NV: int
MGL_SOURCE3_RGB_NV: int
MGL_SPARE0_NV: int
MGL_SPARE0_PLUS_SECONDARY_COLOR_NV: int
MGL_SPARE1_NV: int
MGL_SPECULAR: int
MGL_SPHERE_MAP: int
MGL_SPOT_CUTOFF: int
MGL_SPOT_DIRECTION: int
MGL_SPOT_EXPONENT: int
MGL_SRC_ALPHA: int
MGL_SRC_ALPHA_SATURATE: int
MGL_SRC_COLOR: int
MGL_STACK_OVERFLOW: int
MGL_STACK_UNDERFLOW: int
MGL_STATIC_COPY_ARB: int
MGL_STATIC_DRAW_ARB: int
MGL_STATIC_READ_ARB: int
MGL_STENCIL: int
MGL_STENCIL_ATTACHMENT: int
MGL_STENCIL_BITS: int
MGL_STENCIL_BUFFER_BIT: int
MGL_STENCIL_CLEAR_VALUE: int
MGL_STENCIL_FAIL: int
MGL_STENCIL_FUNC: int
MGL_STENCIL_INDEX: int
MGL_STENCIL_INDEX1: int
MGL_STENCIL_INDEX16: int
MGL_STENCIL_INDEX4: int
MGL_STENCIL_INDEX8: int
MGL_STENCIL_PASS_DEPTH_FAIL: int
MGL_STENCIL_PASS_DEPTH_PASS: int
MGL_STENCIL_REF: int
MGL_STENCIL_TEST: int
MGL_STENCIL_VALUE_MASK: int
MGL_STENCIL_WRITEMASK: int
MGL_STEREO: int
MGL_STREAM_COPY_ARB: int
MGL_STREAM_DRAW_ARB: int
MGL_STREAM_READ_ARB: int
MGL_SUBPIXEL_BITS: int
MGL_SUBTRACT: int
MGL_SUB_ATI: int
MGL_SWIZZLE_STQ_ATI: int
MGL_SWIZZLE_STQ_DQ_ATI: int
MGL_SWIZZLE_STRQ_ATI: int
MGL_SWIZZLE_STRQ_DQ_ATI: int
MGL_SWIZZLE_STR_ATI: int
MGL_SWIZZLE_STR_DR_ATI: int
MGL_T: int
MGL_T2F_C3F_V3F: int
MGL_T2F_C4F_N3F_V3F: int
MGL_T2F_C4UB_V3F: int
MGL_T2F_N3F_V3F: int
MGL_T2F_V3F: int
MGL_T4F_C4F_N3F_V4F: int
MGL_T4F_V4F: int
MGL_TEXTURE: int
MGL_TEXTURE0: int
MGL_TEXTURE0_ARB: int
MGL_TEXTURE1: int
MGL_TEXTURE10: int
MGL_TEXTURE10_ARB: int
MGL_TEXTURE11: int
MGL_TEXTURE11_ARB: int
MGL_TEXTURE12: int
MGL_TEXTURE12_ARB: int
MGL_TEXTURE13: int
MGL_TEXTURE13_ARB: int
MGL_TEXTURE14: int
MGL_TEXTURE14_ARB: int
MGL_TEXTURE15: int
MGL_TEXTURE15_ARB: int
MGL_TEXTURE16: int
MGL_TEXTURE16_ARB: int
MGL_TEXTURE17: int
MGL_TEXTURE17_ARB: int
MGL_TEXTURE18: int
MGL_TEXTURE18_ARB: int
MGL_TEXTURE19: int
MGL_TEXTURE19_ARB: int
MGL_TEXTURE1_ARB: int
MGL_TEXTURE2: int
MGL_TEXTURE20: int
MGL_TEXTURE20_ARB: int
MGL_TEXTURE21: int
MGL_TEXTURE21_ARB: int
MGL_TEXTURE22: int
MGL_TEXTURE22_ARB: int
MGL_TEXTURE23: int
MGL_TEXTURE23_ARB: int
MGL_TEXTURE24: int
MGL_TEXTURE24_ARB: int
MGL_TEXTURE25: int
MGL_TEXTURE25_ARB: int
MGL_TEXTURE26: int
MGL_TEXTURE26_ARB: int
MGL_TEXTURE27: int
MGL_TEXTURE27_ARB: int
MGL_TEXTURE28: int
MGL_TEXTURE28_ARB: int
MGL_TEXTURE29: int
MGL_TEXTURE29_ARB: int
MGL_TEXTURE2_ARB: int
MGL_TEXTURE3: int
MGL_TEXTURE30: int
MGL_TEXTURE30_ARB: int
MGL_TEXTURE31: int
MGL_TEXTURE31_ARB: int
MGL_TEXTURE3_ARB: int
MGL_TEXTURE4: int
MGL_TEXTURE4_ARB: int
MGL_TEXTURE5: int
MGL_TEXTURE5_ARB: int
MGL_TEXTURE6: int
MGL_TEXTURE6_ARB: int
MGL_TEXTURE7: int
MGL_TEXTURE7_ARB: int
MGL_TEXTURE8: int
MGL_TEXTURE8_ARB: int
MGL_TEXTURE9: int
MGL_TEXTURE9_ARB: int
MGL_TEXTURE_1D: int
MGL_TEXTURE_1D_BINDING: int
MGL_TEXTURE_2D: int
MGL_TEXTURE_2D_BINDING: int
MGL_TEXTURE_3D: int
MGL_TEXTURE_3D_EXT: int
MGL_TEXTURE_ALPHA_SIZE: int
MGL_TEXTURE_ALPHA_TYPE: int
MGL_TEXTURE_BINDING_1D: int
MGL_TEXTURE_BINDING_2D: int
MGL_TEXTURE_BINDING_CUBE_MAP: int
MGL_TEXTURE_BINDING_CUBE_MAP_ARB: int
MGL_TEXTURE_BINDING_RECTANGLE: int
MGL_TEXTURE_BIT: int
MGL_TEXTURE_BLUE_SIZE: int
MGL_TEXTURE_BLUE_TYPE: int
MGL_TEXTURE_BORDER: int
MGL_TEXTURE_BORDER_COLOR: int
MGL_TEXTURE_BORDER_VALUES_NV: int
MGL_TEXTURE_COMPARE_FAIL_VALUE_ARB: int
MGL_TEXTURE_COMPARE_FUNC_ARB: int
MGL_TEXTURE_COMPARE_MODE_ARB: int
MGL_TEXTURE_COMPARE_OPERATOR_SGIX: int
MGL_TEXTURE_COMPARE_SGIX: int
MGL_TEXTURE_COMPONENTS: int
MGL_TEXTURE_COMPRESSED: int
MGL_TEXTURE_COMPRESSED_ARB: int
MGL_TEXTURE_COMPRESSED_IMAGE_SIZE: int
MGL_TEXTURE_COMPRESSION_HINT: int
MGL_TEXTURE_COMPRESSION_HINT_ARB: int
MGL_TEXTURE_COORD_ARRAY: int
MGL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB: int
MGL_TEXTURE_COORD_ARRAY_COUNT_EXT: int
MGL_TEXTURE_COORD_ARRAY_EXT: int
MGL_TEXTURE_COORD_ARRAY_POINTER: int
MGL_TEXTURE_COORD_ARRAY_POINTER_EXT: int
MGL_TEXTURE_COORD_ARRAY_SIZE: int
MGL_TEXTURE_COORD_ARRAY_SIZE_EXT: int
MGL_TEXTURE_COORD_ARRAY_STRIDE: int
MGL_TEXTURE_COORD_ARRAY_STRIDE_EXT: int
MGL_TEXTURE_COORD_ARRAY_TYPE: int
MGL_TEXTURE_COORD_ARRAY_TYPE_EXT: int
MGL_TEXTURE_COORD_NV: int
MGL_TEXTURE_CUBE_MAP: int
MGL_TEXTURE_CUBE_MAP_ARB: int
MGL_TEXTURE_CUBE_MAP_NEGATIVE_X: int
MGL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB: int
MGL_TEXTURE_CUBE_MAP_NEGATIVE_Y: int
MGL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB: int
MGL_TEXTURE_CUBE_MAP_NEGATIVE_Z: int
MGL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB: int
MGL_TEXTURE_CUBE_MAP_POSITIVE_X: int
MGL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB: int
MGL_TEXTURE_CUBE_MAP_POSITIVE_Y: int
MGL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB: int
MGL_TEXTURE_CUBE_MAP_POSITIVE_Z: int
MGL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB: int
MGL_TEXTURE_DEPTH: int
MGL_TEXTURE_DEPTH_EXT: int
MGL_TEXTURE_DEPTH_SIZE_ARB: int
MGL_TEXTURE_DEPTH_TYPE: int
MGL_TEXTURE_DS_SIZE_NV: int
MGL_TEXTURE_DT_SIZE_NV: int
MGL_TEXTURE_ENV: int
MGL_TEXTURE_ENV_COLOR: int
MGL_TEXTURE_ENV_MODE: int
MGL_TEXTURE_FLOAT_COMPONENTS_NV: int
MGL_TEXTURE_FREE_MEMORY_ATI: int
MGL_TEXTURE_GEN_MODE: int
MGL_TEXTURE_GEN_Q: int
MGL_TEXTURE_GEN_R: int
MGL_TEXTURE_GEN_S: int
MGL_TEXTURE_GEN_T: int
MGL_TEXTURE_GEQUAL_R_SGIX: int
MGL_TEXTURE_GREEN_SIZE: int
MGL_TEXTURE_GREEN_TYPE: int
MGL_TEXTURE_HEIGHT: int
MGL_TEXTURE_HI_SIZE_NV: int
MGL_TEXTURE_IMAGE_SIZE_ARB: int
MGL_TEXTURE_INTENSITY_SIZE: int
MGL_TEXTURE_INTENSITY_TYPE: int
MGL_TEXTURE_INTERNAL_FORMAT: int
MGL_TEXTURE_LEQUAL_R_SGIX: int
MGL_TEXTURE_LO_SIZE_NV: int
MGL_TEXTURE_LUMINANCE_SIZE: int
MGL_TEXTURE_LUMINANCE_TYPE: int
MGL_TEXTURE_MAG_FILTER: int
MGL_TEXTURE_MAG_SIZE_NV: int
MGL_TEXTURE_MATRIX: int
MGL_TEXTURE_MAX_ANISOTROPY_EXT: int
MGL_TEXTURE_MIN_FILTER: int
MGL_TEXTURE_PRIORITY: int
MGL_TEXTURE_RECTANGLE: int
MGL_TEXTURE_RED_SIZE: int
MGL_TEXTURE_RED_TYPE: int
MGL_TEXTURE_RESIDENT: int
MGL_TEXTURE_SHADER_NV: int
MGL_TEXTURE_STACK_DEPTH: int
MGL_TEXTURE_WIDTH: int
MGL_TEXTURE_WRAP_R: int
MGL_TEXTURE_WRAP_R_EXT: int
MGL_TEXTURE_WRAP_S: int
MGL_TEXTURE_WRAP_T: int
MGL_TRACK_MATRIX_NV: int
MGL_TRACK_MATRIX_TRANSFORM_NV: int
MGL_TRANSFORM_BIT: int
MGL_TRANSFORM_FEEDBACK_ATTRIBS_NV: int
MGL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT: int
MGL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV: int
MGL_TRANSFORM_FEEDBACK_BUFFER_EXT: int
MGL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT: int
MGL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV: int
MGL_TRANSFORM_FEEDBACK_BUFFER_NV: int
MGL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT: int
MGL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV: int
MGL_TRANSFORM_FEEDBACK_BUFFER_START_EXT: int
MGL_TRANSFORM_FEEDBACK_BUFFER_START_NV: int
MGL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT: int
MGL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV: int
MGL_TRANSFORM_FEEDBACK_RECORD_NV: int
MGL_TRANSFORM_FEEDBACK_VARYINGS_EXT: int
MGL_TRANSFORM_FEEDBACK_VARYINGS_NV: int
MGL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT: int
MGL_TRANSPOSE_COLOR_MATRIX: int
MGL_TRANSPOSE_COLOR_MATRIX_ARB: int
MGL_TRANSPOSE_CURRENT_MATRIX: int
MGL_TRANSPOSE_MODELVIEW_MATRIX: int
MGL_TRANSPOSE_MODELVIEW_MATRIX_ARB: int
MGL_TRANSPOSE_NV: int
MGL_TRANSPOSE_PROJECTION_MATRIX: int
MGL_TRANSPOSE_PROJECTION_MATRIX_ARB: int
MGL_TRANSPOSE_TEXTURE_MATRIX: int
MGL_TRANSPOSE_TEXTURE_MATRIX_ARB: int
MGL_TRIANGLES: int
MGL_TRIANGLE_FAN: int
MGL_TRIANGLE_STRIP: int
MGL_TRUE: int
MGL_UNPACK_ALIGNMENT: int
MGL_UNPACK_IMAGE_HEIGHT: int
MGL_UNPACK_IMAGE_HEIGHT_EXT: int
MGL_UNPACK_LSB_FIRST: int
MGL_UNPACK_ROW_LENGTH: int
MGL_UNPACK_SKIP_IMAGES: int
MGL_UNPACK_SKIP_IMAGES_EXT: int
MGL_UNPACK_SKIP_PIXELS: int
MGL_UNPACK_SKIP_ROWS: int
MGL_UNPACK_SWAP_BYTES: int
MGL_UNSIGNED_BYTE: int
MGL_UNSIGNED_BYTE_3_3_2_EXT: int
MGL_UNSIGNED_IDENTITY_NV: int
MGL_UNSIGNED_INT: int
MGL_UNSIGNED_INT_10_10_10_2_EXT: int
MGL_UNSIGNED_INT_8_8_8_8_EXT: int
MGL_UNSIGNED_INT_S8_S8_8_8_NV: int
MGL_UNSIGNED_INT_S8_S8_8_8_REV_NV: int
MGL_UNSIGNED_INVERT_NV: int
MGL_UNSIGNED_NORMALIZED: int
MGL_UNSIGNED_SHORT: int
MGL_UNSIGNED_SHORT_4_4_4_4_EXT: int
MGL_UNSIGNED_SHORT_5_5_5_1_EXT: int
MGL_V2F: int
MGL_V3F: int
MGL_VARIABLE_A_NV: int
MGL_VARIABLE_B_NV: int
MGL_VARIABLE_C_NV: int
MGL_VARIABLE_D_NV: int
MGL_VARIABLE_E_NV: int
MGL_VARIABLE_F_NV: int
MGL_VARIABLE_G_NV: int
MGL_VARIANT_ARRAY_EXT: int
MGL_VARIANT_ARRAY_POINTER_EXT: int
MGL_VARIANT_ARRAY_STRIDE_EXT: int
MGL_VARIANT_ARRAY_TYPE_EXT: int
MGL_VARIANT_DATATYPE_EXT: int
MGL_VARIANT_EXT: int
MGL_VARIANT_VALUE_EXT: int
MGL_VBO_FREE_MEMORY_ATI: int
MGL_VECTOR_EXT: int
MGL_VENDOR: int
MGL_VERSION: int
MGL_VERTEX_ARRAY: int
MGL_VERTEX_ARRAY_BUFFER_BINDING_ARB: int
MGL_VERTEX_ARRAY_COUNT_EXT: int
MGL_VERTEX_ARRAY_EXT: int
MGL_VERTEX_ARRAY_POINTER: int
MGL_VERTEX_ARRAY_POINTER_EXT: int
MGL_VERTEX_ARRAY_RANGE_LENGTH_NV: int
MGL_VERTEX_ARRAY_RANGE_NV: int
MGL_VERTEX_ARRAY_RANGE_POINTER_NV: int
MGL_VERTEX_ARRAY_RANGE_VALID_NV: int
MGL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV: int
MGL_VERTEX_ARRAY_SIZE: int
MGL_VERTEX_ARRAY_SIZE_EXT: int
MGL_VERTEX_ARRAY_STRIDE: int
MGL_VERTEX_ARRAY_STRIDE_EXT: int
MGL_VERTEX_ARRAY_TYPE: int
MGL_VERTEX_ARRAY_TYPE_EXT: int
MGL_VERTEX_ATTRIB_ARRAY0_NV: int
MGL_VERTEX_ATTRIB_ARRAY10_NV: int
MGL_VERTEX_ATTRIB_ARRAY11_NV: int
MGL_VERTEX_ATTRIB_ARRAY12_NV: int
MGL_VERTEX_ATTRIB_ARRAY13_NV: int
MGL_VERTEX_ATTRIB_ARRAY14_NV: int
MGL_VERTEX_ATTRIB_ARRAY15_NV: int
MGL_VERTEX_ATTRIB_ARRAY1_NV: int
MGL_VERTEX_ATTRIB_ARRAY2_NV: int
MGL_VERTEX_ATTRIB_ARRAY3_NV: int
MGL_VERTEX_ATTRIB_ARRAY4_NV: int
MGL_VERTEX_ATTRIB_ARRAY5_NV: int
MGL_VERTEX_ATTRIB_ARRAY6_NV: int
MGL_VERTEX_ATTRIB_ARRAY7_NV: int
MGL_VERTEX_ATTRIB_ARRAY8_NV: int
MGL_VERTEX_ATTRIB_ARRAY9_NV: int
MGL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB: int
MGL_VERTEX_ATTRIB_ARRAY_ENABLED: int
MGL_VERTEX_ATTRIB_ARRAY_NORMALIZED: int
MGL_VERTEX_ATTRIB_ARRAY_POINTER: int
MGL_VERTEX_ATTRIB_ARRAY_SIZE: int
MGL_VERTEX_ATTRIB_ARRAY_STRIDE: int
MGL_VERTEX_ATTRIB_ARRAY_TYPE: int
MGL_VERTEX_ID_NV: int
MGL_VERTEX_PROGRAM: int
MGL_VERTEX_PROGRAM_BINDING_NV: int
MGL_VERTEX_PROGRAM_NV: int
MGL_VERTEX_PROGRAM_POINT_SIZE: int
MGL_VERTEX_PROGRAM_POINT_SIZE_NV: int
MGL_VERTEX_PROGRAM_TWO_SIDE: int
MGL_VERTEX_PROGRAM_TWO_SIDE_NV: int
MGL_VERTEX_SHADER_ARB: int
MGL_VERTEX_SHADER_BINDING_EXT: int
MGL_VERTEX_SHADER_EXT: int
MGL_VERTEX_SHADER_INSTRUCTIONS_EXT: int
MGL_VERTEX_SHADER_INVARIANTS_EXT: int
MGL_VERTEX_SHADER_LOCALS_EXT: int
MGL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT: int
MGL_VERTEX_SHADER_OPTIMIZED_EXT: int
MGL_VERTEX_SHADER_VARIANTS_EXT: int
MGL_VERTEX_STATE_PROGRAM_NV: int
MGL_VERTEX_WEIGHTING_EXT: int
MGL_VERTEX_WEIGHT_ARRAY_EXT: int
MGL_VERTEX_WEIGHT_ARRAY_POINTER_EXT: int
MGL_VERTEX_WEIGHT_ARRAY_SIZE_EXT: int
MGL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT: int
MGL_VERTEX_WEIGHT_ARRAY_TYPE_EXT: int
MGL_VIBRANCE_BIAS_NV: int
MGL_VIBRANCE_SCALE_NV: int
MGL_VIEWPORT: int
MGL_VIEWPORT_BIT: int
MGL_WEIGHT_ARRAY_BUFFER_BINDING_ARB: int
MGL_WRITE_ONLY_ARB: int
MGL_W_EXT: int
MGL_XOR: int
MGL_X_EXT: int
MGL_Y_EXT: int
MGL_ZERO: int
MGL_ZERO_EXT: int
MGL_ZOOM_X: int
MGL_ZOOM_Y: int
MGL_Z_EXT: int
class MGeometryData(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def collectionNumber(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def data(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dataType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def elementCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def elementSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def elementType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def elementTypeSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAPISupported: int = ...
    kBiNormal: int = ...
    kChar: int = ...
    kColor: int = ...
    kColorMask: int = ...
    kDouble: int = ...
    kFloat: int = ...
    kFour: int = ...
    kInt16: int = ...
    kInt32: int = ...
    kInvalidDataType: int = ...
    kInvalidElementSize: int = ...
    kInvalidElementType: int = ...
    kMaxDataTypeIndex: int = ...
    kNormal: int = ...
    kOne: int = ...
    kPosition: int = ...
    kPrimitiveCenter: int = ...
    kTangent: int = ...
    kTexCoord: int = ...
    kThree: int = ...
    kTwo: int = ...
    kUnsignedChar: int = ...
    kUnsignedInt16: int = ...
    kUnsignedInt32: int = ...
    kUserData: int = ...
    kVelocity: int = ...
    kWeight: int = ...
    def objectName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectOwnsData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCollectionNumber(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectOwnsData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def uniqueID(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MGeometryLegacy(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def binormal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def color(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def componentId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def data(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def normal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def position(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def primitiveArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def primitiveArrayCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def tangent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def texCoord(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MGeometryList(object):
    MSetupFlags: property = ...
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addLast(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cullMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def geometry(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDone(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAll: int = ...
    kCullCCW: int = ...
    kCullCW: int = ...
    kCullNone: int = ...
    kCulling: int = ...
    kFixedFunctionLighting: int = ...
    kMatrices: int = ...
    kNone: int = ...
    def length(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def next(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectToWorldMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def path(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def projectionMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCurrentElement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def viewMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MGeometryManager(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dereferenceDefaultGeometry(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getGeometry(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kDefaultCube: int = ...
    kDefaultPlane: int = ...
    kDefaultSphere: int = ...
    def referenceDefaultGeometry(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MGeometryManager_className(*args: Any, **kwargs: Any) -> Any: ...
def MGeometryManager_dereferenceDefaultGeometry(*args: Any, **kwargs: Any) -> Any: ...
def MGeometryManager_getGeometry(*args: Any, **kwargs: Any) -> Any: ...
def MGeometryManager_referenceDefaultGeometry(*args: Any, **kwargs: Any) -> Any: ...
class MGeometryPrimitive(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def data(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dataType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawPrimitiveType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def elementCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kInvalidIndexType: int = ...
    kLineLoop: int = ...
    kLineStrip: int = ...
    kLines: int = ...
    kMaxDrawPrimitiveTypeIndex: int = ...
    kPoints: int = ...
    kPolygon: int = ...
    kQuadStrip: int = ...
    kQuads: int = ...
    kTriangleFan: int = ...
    kTriangleStrip: int = ...
    kTriangles: int = ...
    thisown: property = ...
    def uniqueID(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MGeometryRequirementsLegacy(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addBinormal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addComponentId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addFaceOffsets(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addNormal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addTangent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addTexCoord(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MHardwareRenderer(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addDrawProcedure(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def backEndString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dereferenceGeometry(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawSwatchBackGroundQuads(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findDrawProcedure(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getBufferSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getColorBufferPixelFormat(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCurrentExposureNumber(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDepthBufferPixelFormat(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDrawProcedureCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDrawProcedureListNames(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getSwatchLightDirection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getSwatchOrthoCameraSetting(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getSwatchPerspectiveCameraSetting(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getSwatchPerspectiveCameraTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getTotalExposureCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glFunctionTable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def insertDrawProcedure(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kDefaultCube: int = ...
    kDefaultPlane: int = ...
    kDefaultSphere: int = ...
    kDepth_Float32: int = ...
    kFailure: int = ...
    kItemExists: int = ...
    kItemNotFound: int = ...
    kLocationNotFound: int = ...
    kPostExposure: int = ...
    kPostRendering: int = ...
    kPreExposure: int = ...
    kPreRendering: int = ...
    kRGBA_Fix8: int = ...
    kRGBA_Float16: int = ...
    kSuccess: int = ...
    def makeResourceContextCurrent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def makeSwatchContextCurrent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def readSwatchContextPixels(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def referenceDefaultGeometry(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeDrawProcedure(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def restoreCurrent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def theRenderer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MHardwareRenderer_theRenderer(*args: Any, **kwargs: Any) -> Any: ...
class MHwTextureManager(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterTextureFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glBind(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registerTextureFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def textureFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MHwTextureManager_className(*args: Any, **kwargs: Any) -> Any: ...
def MHwTextureManager_deregisterTextureFile(*args: Any, **kwargs: Any) -> Any: ...
def MHwTextureManager_glBind(*args: Any, **kwargs: Any) -> Any: ...
def MHwTextureManager_registerTextureFile(*args: Any, **kwargs: Any) -> Any: ...
def MHwTextureManager_textureFile(*args: Any, **kwargs: Any) -> Any: ...
class MHwrCallback(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deviceDeleted(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deviceLost(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deviceNew(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deviceReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MHwrCallback_addCallback(*args: Any, **kwargs: Any) -> Any: ...
def MHwrCallback_removeCallback(*args: Any, **kwargs: Any) -> Any: ...
class MLightLinks(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def getIgnoredLights(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getIgnoredObjects(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getLinkedLights(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getLinkedObjects(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getShadowIgnoredLights(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getShadowIgnoredObjects(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getShadowLinkedLights(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getShadowLinkedObjects(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parseLinks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MRenderCallback(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    def __disown__(self: Self) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addRenderTileCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postProcessCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def renderCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shadowCastCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MRenderCallback_addCallback(*args: Any, **kwargs: Any) -> Any: ...
def MRenderCallback_addRenderTileCallback(*args: Any, **kwargs: Any) -> Any: ...
def MRenderCallback_className(*args: Any, **kwargs: Any) -> Any: ...
def MRenderCallback_removeCallback(*args: Any, **kwargs: Any) -> Any: ...
class MRenderData(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    aspectRatio: property = ...
    bottom: property = ...
    bytesPerChannel: property = ...
    depthArr: property = ...
    eyePoint: property = ...
    fieldOfView: property = ...
    internalData: property = ...
    left: property = ...
    perspective: property = ...
    resX: property = ...
    resY: property = ...
    rgbaArr: property = ...
    right: property = ...
    def screenToWorld(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    top: property = ...
    viewDirection: property = ...
    worldToEyeMatrix: property = ...
    def worldToScreen(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    xsize: property = ...
    ysize: property = ...

class MRenderProfile(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addRenderer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasRenderer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kMayaD3D: int = ...
    kMayaOpenGL: int = ...
    kMayaSoftware: int = ...
    def numberOfRenderers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MRenderSetup(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getEnabledSelectedNodeNames(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MRenderSetupPrivate(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def _switchToLegacyRenderLayer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _triggerSelectionChanged(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MRenderSetupPrivate__switchToLegacyRenderLayer(*args: Any, **kwargs: Any) -> Any: ...
def MRenderSetupPrivate__triggerSelectionChanged(*args: Any, **kwargs: Any) -> Any: ...
def MRenderSetupPrivate_className(*args: Any, **kwargs: Any) -> Any: ...
def MRenderSetup_className(*args: Any, **kwargs: Any) -> Any: ...
def MRenderSetup_getEnabledSelectedNodeNames(*args: Any, **kwargs: Any) -> Any: ...
class MRenderShadowData(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    depthMaps: property = ...
    internalData: property = ...
    kDirectional: int = ...
    kInvalid: int = ...
    kPoint: int = ...
    kSpot: int = ...
    lightPosition: property = ...
    lightType: property = ...
    midDistMaps: property = ...
    perspective: property = ...
    perspectiveMatrix: property = ...
    projectionMatrix: property = ...
    shadowResX: property = ...
    shadowResY: property = ...
    thisown: property = ...
    useMidDistMap: property = ...
    def worldToZbuffer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def zbufferToWorld(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MRenderTargetLegacy(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def height(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def makeTargetCurrent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def width(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def writeColorBuffer(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MRenderUtil(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def convertPsdFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def diffuseReflectance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def eval2dTexture(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def exactFileTextureName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def exactImagePlaneFileName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def generatingIprFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCommonRenderSettings(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hemisphereCoverage(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inCurrentRenderLayer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAll: int = ...
    kAmbientOnly: int = ...
    kBatchRender: int = ...
    kColorOnly: int = ...
    kDiffuseOnly: int = ...
    kHardwareRender: int = ...
    kInteractiveRender: int = ...
    kIprRender: int = ...
    kNotRendering: int = ...
    kShadowOnly: int = ...
    kSpecularOnly: int = ...
    def lightAttenuation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def mainBeautyPassCustomTokenString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def mainBeautyPassName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def maximumSpecularReflection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def mayaRenderState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def noise1(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def noise2(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def noise3(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def noise4(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def noiseTableCubeSide(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def noiseTableSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def raytrace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def raytraceFirstGeometryIntersections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def relativeFileName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def renderObjectItem(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def renderPass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def sampleShadingNetwork(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def sendRenderProgressInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def valueInNoiseTable(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MRenderUtil_className(*args: Any, **kwargs: Any) -> Any: ...
def MRenderUtil_convertPsdFile(*args: Any, **kwargs: Any) -> Any: ...
def MRenderUtil_diffuseReflectance(*args: Any, **kwargs: Any) -> Any: ...
def MRenderUtil_eval2dTexture(*args: Any, **kwargs: Any) -> Any: ...
def MRenderUtil_exactFileTextureName(*args: Any, **kwargs: Any) -> Any: ...
def MRenderUtil_exactImagePlaneFileName(*args: Any, **kwargs: Any) -> Any: ...
def MRenderUtil_generatingIprFile(*args: Any, **kwargs: Any) -> Any: ...
def MRenderUtil_getCommonRenderSettings(*args: Any, **kwargs: Any) -> Any: ...
def MRenderUtil_hemisphereCoverage(*args: Any, **kwargs: Any) -> Any: ...
def MRenderUtil_inCurrentRenderLayer(*args: Any, **kwargs: Any) -> Any: ...
def MRenderUtil_lightAttenuation(*args: Any, **kwargs: Any) -> Any: ...
def MRenderUtil_mainBeautyPassCustomTokenString(*args: Any, **kwargs: Any) -> Any: ...
def MRenderUtil_mainBeautyPassName(*args: Any, **kwargs: Any) -> Any: ...
def MRenderUtil_maximumSpecularReflection(*args: Any, **kwargs: Any) -> Any: ...
def MRenderUtil_mayaRenderState(*args: Any, **kwargs: Any) -> Any: ...
def MRenderUtil_noise1(*args: Any, **kwargs: Any) -> Any: ...
def MRenderUtil_noise2(*args: Any, **kwargs: Any) -> Any: ...
def MRenderUtil_noise3(*args: Any, **kwargs: Any) -> Any: ...
def MRenderUtil_noise4(*args: Any, **kwargs: Any) -> Any: ...
def MRenderUtil_noiseTableCubeSide(*args: Any, **kwargs: Any) -> Any: ...
def MRenderUtil_noiseTableSize(*args: Any, **kwargs: Any) -> Any: ...
def MRenderUtil_raytrace(*args: Any, **kwargs: Any) -> Any: ...
def MRenderUtil_raytraceFirstGeometryIntersections(*args: Any, **kwargs: Any) -> Any: ...
def MRenderUtil_relativeFileName(*args: Any, **kwargs: Any) -> Any: ...
def MRenderUtil_renderObjectItem(*args: Any, **kwargs: Any) -> Any: ...
def MRenderUtil_renderPass(*args: Any, **kwargs: Any) -> Any: ...
def MRenderUtil_sampleShadingNetwork(*args: Any, **kwargs: Any) -> Any: ...
def MRenderUtil_sendRenderProgressInfo(*args: Any, **kwargs: Any) -> Any: ...
def MRenderUtil_valueInNoiseTable(*args: Any, **kwargs: Any) -> Any: ...
class MRenderView(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doesRenderEditorExist(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def endRender(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getRenderRegion(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def refresh(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCurrentCamera(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDrawTileBoundary(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def startRegionRender(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def startRender(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def updatePixels(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MRenderView_className(*args: Any, **kwargs: Any) -> Any: ...
def MRenderView_doesRenderEditorExist(*args: Any, **kwargs: Any) -> Any: ...
def MRenderView_endRender(*args: Any, **kwargs: Any) -> Any: ...
def MRenderView_getRenderRegion(*args: Any, **kwargs: Any) -> Any: ...
def MRenderView_refresh(*args: Any, **kwargs: Any) -> Any: ...
def MRenderView_setCurrentCamera(*args: Any, **kwargs: Any) -> Any: ...
def MRenderView_setDrawTileBoundary(*args: Any, **kwargs: Any) -> Any: ...
def MRenderView_startRegionRender(*args: Any, **kwargs: Any) -> Any: ...
def MRenderView_startRender(*args: Any, **kwargs: Any) -> Any: ...
def MRenderView_updatePixels(*args: Any, **kwargs: Any) -> Any: ...
class MRenderingInfo(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def cameraPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def height(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def originX(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def originY(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def projectionMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def renderTarget(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def renderingAPI(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def renderingVersion(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def viewMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def width(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MSwatchRenderBase(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def cancelCurrentSwatchRender(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cancelParallelRendering(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doIteration(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableSwatchRender(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def image(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def node(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def renderParallel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def renderQuality(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def resolution(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRenderQuality(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def swatchNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MSwatchRenderBase_cancelCurrentSwatchRender(*args: Any, **kwargs: Any) -> Any: ...
def MSwatchRenderBase_enableSwatchRender(*args: Any, **kwargs: Any) -> Any: ...
class MSwatchRenderRegister(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def registerSwatchRender(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def unregisterSwatchRender(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MSwatchRenderRegister_registerSwatchRender(*args: Any, **kwargs: Any) -> Any: ...
def MSwatchRenderRegister_unregisterSwatchRender(*args: Any, **kwargs: Any) -> Any: ...
class MUniformParameter(object):
    def UIHidden(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAsBool(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAsFloat(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAsFloatArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAsInt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAsString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getSource(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasChanged(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isATexture(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kSemanticBackgroundColor: int = ...
    kSemanticBump: int = ...
    kSemanticBumpTexture: int = ...
    kSemanticColor: int = ...
    kSemanticColorTexture: int = ...
    kSemanticEnvironment: int = ...
    kSemanticFarClipPlane: int = ...
    kSemanticFrameNumber: int = ...
    kSemanticHWSEdgeLevel: int = ...
    kSemanticHWSFaceLevel: int = ...
    kSemanticHWSFrontCCW: int = ...
    kSemanticHWSHighlighting: int = ...
    kSemanticHWSInstancedDraw: int = ...
    kSemanticHWSObjectLevel: int = ...
    kSemanticHWSOccluder: int = ...
    kSemanticHWSPrimitiveBase: int = ...
    kSemanticHWSPrimitiveCountPerInstance: int = ...
    kSemanticHWSVertexLevel: int = ...
    kSemanticLocalViewer: int = ...
    kSemanticNearClipPlane: int = ...
    kSemanticNormal: int = ...
    kSemanticNormalTexture: int = ...
    kSemanticNormalizationTexture: int = ...
    kSemanticObjectDir: int = ...
    kSemanticObjectPos: int = ...
    kSemanticOpaqueDepthTexture: int = ...
    kSemanticProjectionDir: int = ...
    kSemanticProjectionInverseMatrix: int = ...
    kSemanticProjectionInverseTransposeMatrix: int = ...
    kSemanticProjectionMatrix: int = ...
    kSemanticProjectionPos: int = ...
    kSemanticProjectionTransposeMatrix: int = ...
    kSemanticTime: int = ...
    kSemanticTranspDepthTexture: int = ...
    kSemanticUnknown: int = ...
    kSemanticViewDir: int = ...
    kSemanticViewInverseMatrix: int = ...
    kSemanticViewInverseTransposeMatrix: int = ...
    kSemanticViewMatrix: int = ...
    kSemanticViewPos: int = ...
    kSemanticViewProjectionInverseMatrix: int = ...
    kSemanticViewProjectionInverseTransposeMatrix: int = ...
    kSemanticViewProjectionMatrix: int = ...
    kSemanticViewProjectionTransposeMatrix: int = ...
    kSemanticViewTransposeMatrix: int = ...
    kSemanticViewportPixelSize: int = ...
    kSemanticWorldDir: int = ...
    kSemanticWorldInverseMatrix: int = ...
    kSemanticWorldInverseTransposeMatrix: int = ...
    kSemanticWorldMatrix: int = ...
    kSemanticWorldPos: int = ...
    kSemanticWorldTransposeMatrix: int = ...
    kSemanticWorldViewInverseMatrix: int = ...
    kSemanticWorldViewInverseTransposeMatrix: int = ...
    kSemanticWorldViewMatrix: int = ...
    kSemanticWorldViewProjectionInverseMatrix: int = ...
    kSemanticWorldViewProjectionInverseTransposeMatrix: int = ...
    kSemanticWorldViewProjectionMatrix: int = ...
    kSemanticWorldViewProjectionTransposeMatrix: int = ...
    kSemanticWorldViewTransposeMatrix: int = ...
    kType1DTexture: int = ...
    kType2DTexture: int = ...
    kType3DTexture: int = ...
    kTypeBool: int = ...
    kTypeCubeTexture: int = ...
    kTypeEnum: int = ...
    kTypeEnvTexture: int = ...
    kTypeFloat: int = ...
    kTypeInt: int = ...
    kTypeString: int = ...
    kTypeUnknown: int = ...
    def keyable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numColumns(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numElements(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numRows(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def semantic(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAsBool(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAsFloat(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAsFloatArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAsInt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAsString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDirty(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setEnumFieldNames(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setKeyable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRangeMax(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRangeMin(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSoftRangeMax(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSoftRangeMin(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUIHidden(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUINiceName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userData(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MUniformParameterList(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def append(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getElement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setElement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MVaryingParameter(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addElement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def destinationSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dimension(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getBuffer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getElement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getElementSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getMaximumStride(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getSourceSetName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getSourceType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getUpdateId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kBinormal: int = ...
    kChar: int = ...
    kColor: int = ...
    kDouble: int = ...
    kFloat: int = ...
    kInt16: int = ...
    kInt32: int = ...
    kInvalidParameter: int = ...
    kNoSemantic: int = ...
    kNormal: int = ...
    kPosition: int = ...
    kStructure: int = ...
    kTangent: int = ...
    kTexCoord: int = ...
    kUnsignedChar: int = ...
    kUnsignedInt16: int = ...
    kUnsignedInt32: int = ...
    kWeight: int = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numElements(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeElements(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def semantic(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def semanticName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSource(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MVaryingParameterList(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def append(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getElement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setElement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MViewportRenderer(object):
    def UIname(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def deregisterRenderer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def initialize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kDirect3D: int = ...
    kExcludeAll: int = ...
    kExcludeCVs: int = ...
    kExcludeCameras: int = ...
    kExcludeDeformers: int = ...
    kExcludeDimensions: int = ...
    kExcludeDynamicConstraints: int = ...
    kExcludeDynamics: int = ...
    kExcludeFluids: int = ...
    kExcludeFollicles: int = ...
    kExcludeGrid: int = ...
    kExcludeHairSystems: int = ...
    kExcludeHulls: int = ...
    kExcludeIkHandles: int = ...
    kExcludeImagePlane: int = ...
    kExcludeJoints: int = ...
    kExcludeLights: int = ...
    kExcludeLocators: int = ...
    kExcludeManipulators: int = ...
    kExcludeMeshes: int = ...
    kExcludeMotionTrails: int = ...
    kExcludeNCloths: int = ...
    kExcludeNParticles: int = ...
    kExcludeNRigids: int = ...
    kExcludeNone: int = ...
    kExcludeNurbsCurves: int = ...
    kExcludeNurbsSurfaces: int = ...
    kExcludeParticleInstancers: int = ...
    kExcludePivots: int = ...
    kExcludePlanes: int = ...
    kExcludePluginShapes: int = ...
    kExcludeSelectHandles: int = ...
    kExcludeStrokes: int = ...
    kExcludeSubdivSurfaces: int = ...
    kExcludeTextures: int = ...
    kNoOverride: int = ...
    kOpenGL: int = ...
    kOverrideAllDrawing: int = ...
    kOverrideThenStandard: int = ...
    kOverrideThenUI: int = ...
    kSoftware: int = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def nativelySupports(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def override(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def overrideThenStandardExclusion(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registerRenderer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def render(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def renderingOverride(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRenderingOverride(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUIName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def uninitialize(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class RV_AOV(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    name: property = ...
    numberOfChannels: property = ...
    pPixels: property = ...
    thisown: property = ...

class RV_PIXEL(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    a: property = ...
    b: property = ...
    g: property = ...
    r: property = ...
    thisown: property = ...

class _SwigNonDynamicMeta:
    @property
    def __abstractmethods__(*args: Any, **kwargs: Any) -> Any: ...
    @__abstractmethods__.setter
    def __abstractmethods__(*args: Any, **kwargs: Any) -> Any: ...
    class type:
        @property
        def __abstractmethods__(*args: Any, **kwargs: Any) -> Any: ...
        @__abstractmethods__.setter
        def __abstractmethods__(*args: Any, **kwargs: Any) -> Any: ...
        class object:
            def __delattr__(self: Self, name: Any) -> Any:
                """Implement delattr(self, name)."""
            def __dir__(self: Self) -> Any:
                """Default dir() implementation."""
            __doc__: str = ...
            def __eq__(self: Self, value: Any) -> Any:
                """Return self==value."""
            def __format__(self: Self, format_spec: Any) -> Any:
                """Default object formatter."""
            def __ge__(self: Self, value: Any) -> Any:
                """Return self>=value."""
            def __getattribute__(self: Self, name: Any) -> Any:
                """Return getattr(self, name)."""
            def __gt__(self: Self, value: Any) -> Any:
                """Return self>value."""
            def __hash__(self: Self) -> Any:
                """Return hash(self)."""
            def __init__(self: Self, args: Any, kwargs: Any) -> Any:
                """Initialize self.  See help(type(self)) for accurate signature."""
            def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
                """This method is called when a class is subclassed.

                The default implementation does nothing. It may be
                overridden to extend subclasses.
                """
            def __le__(self: Self, value: Any) -> Any:
                """Return self<=value."""
            def __lt__(self: Self, value: Any) -> Any:
                """Return self<value."""
            def __ne__(self: Self, value: Any) -> Any:
                """Return self!=value."""
            def __new__(self: Self, args: Any, kwargs: Any) -> Any:
                """Create and return a new object.  See help(type) for accurate signature."""
            def __reduce__(self: Self) -> Any:
                """Helper for pickle."""
            def __reduce_ex__(self: Self, protocol: Any) -> Any:
                """Helper for pickle."""
            def __repr__(self: Self) -> Any:
                """Return repr(self)."""
            def __setattr__(self: Self, name: Any, value: Any) -> Any:
                """Implement setattr(self, name, value)."""
            def __sizeof__(self: Self) -> Any:
                """Size of object in memory, in bytes."""
            def __str__(self: Self) -> Any:
                """Return str(self)."""
            def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
                """Abstract classes can override this to customize issubclass().

                This is invoked early on by abc.ABCMeta.__subclasscheck__().
                It should return True, False or NotImplemented.  If it returns
                NotImplemented, the normal algorithm is used.  Otherwise, it
                overrides the normal algorithm (and the outcome is cached).
                """

        __bases__: tuple = ...
        __basicsize__: int = ...
        def __call__(self: Self, args: Any, kwargs: Any) -> Any:
            """Call self as a function."""
        def __delattr__(self: Self, name: Any) -> Any:
            """Implement delattr(self, name)."""
        __dict__: mappingproxy = ...
        __dictoffset__: int = ...
        def __dir__(self: Self) -> Any:
            """Specialized __dir__ implementation for types."""
        __doc__: str = ...
        def __eq__(self: Self, value: Any) -> Any:
            """Return self==value."""
        __flags__: int = ...
        def __format__(self: Self, format_spec: Any) -> Any:
            """Default object formatter."""
        def __ge__(self: Self, value: Any) -> Any:
            """Return self>=value."""
        def __getattribute__(self: Self, name: Any) -> Any:
            """Return getattr(self, name)."""
        def __gt__(self: Self, value: Any) -> Any:
            """Return self>value."""
        def __hash__(self: Self) -> Any:
            """Return hash(self)."""
        def __init__(self: Self, args: Any, kwargs: Any) -> Any:
            """Initialize self.  See help(type(self)) for accurate signature."""
        def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
            """This method is called when a class is subclassed.

            The default implementation does nothing. It may be
            overridden to extend subclasses.
            """
        def __instancecheck__(self: Self, instance: Any) -> Any:
            """Check if an object is an instance."""
        __itemsize__: int = ...
        def __le__(self: Self, value: Any) -> Any:
            """Return self<=value."""
        def __lt__(self: Self, value: Any) -> Any:
            """Return self<value."""
        __module__: str = ...
        __mro__: tuple = ...
        __name__: str = ...
        def __ne__(self: Self, value: Any) -> Any:
            """Return self!=value."""
        def __new__(self: Self, args: Any, kwargs: Any) -> Any:
            """Create and return a new object.  See help(type) for accurate signature."""
        def __prepare__(self: Self, *args: Any, **kwargs: Any) -> Any:
            """__prepare__() -> dict
            used to create the namespace for the class statement
            """
        __qualname__: str = ...
        def __reduce__(self: Self) -> Any:
            """Helper for pickle."""
        def __reduce_ex__(self: Self, protocol: Any) -> Any:
            """Helper for pickle."""
        def __repr__(self: Self) -> Any:
            """Return repr(self)."""
        def __setattr__(self: Self, name: Any, value: Any) -> Any:
            """Implement setattr(self, name, value)."""
        def __sizeof__(self: Self) -> Any:
            """Return memory consumption of the type object."""
        def __str__(self: Self) -> Any:
            """Return str(self)."""
        def __subclasscheck__(self: Self, subclass: Any) -> Any:
            """Check if a class is a subclass."""
        def __subclasses__(self: Self) -> Any:
            """Return a list of immediate subclasses."""
        def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
            """Abstract classes can override this to customize issubclass().

            This is invoked early on by abc.ABCMeta.__subclasscheck__().
            It should return True, False or NotImplemented.  If it returns
            NotImplemented, the normal algorithm is used.  Otherwise, it
            overrides the normal algorithm (and the outcome is cached).
            """
        __text_signature__: NoneType = ...
        __weakrefoffset__: int = ...
        def mro(self: Self) -> Any:
            """Return a type's method resolution order."""

    __bases__: tuple = ...
    __basicsize__: int = ...
    def __call__(self: Self, args: Any, kwargs: Any) -> Any:
        """Call self as a function."""
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    __dictoffset__: int = ...
    def __dir__(self: Self) -> Any:
        """Specialized __dir__ implementation for types."""
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    __flags__: int = ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any, kwargs: Any) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __instancecheck__(self: Self, instance: Any) -> Any:
        """Check if an object is an instance."""
    __itemsize__: int = ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    __mro__: tuple = ...
    __name__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __prepare__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """__prepare__() -> dict
        used to create the namespace for the class statement
        """
    __qualname__: str = ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any:
        """Return repr(self)."""
    def __setattr__(self: Self, cls: Any, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any:
        """Return memory consumption of the type object."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasscheck__(self: Self, subclass: Any) -> Any:
        """Check if a class is a subclass."""
    def __subclasses__(self: Self) -> Any:
        """Return a list of immediate subclasses."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    __text_signature__: NoneType = ...
    __weakrefoffset__: int = ...
    def mro(self: Self) -> Any:
        """Return a type's method resolution order."""

__builtins__: dict
__cached__: str
__doc__: NoneType
__file__: str
__loader__: SourcelessFileLoader
__name__: str
__package__: str
__spec__: ModuleSpec
def _swig_add_metaclass(metaclass: Any) -> Any:
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
def SWIG_PyInstanceMethod_New(*args: Any, **kwargs: Any) -> Any: ...
def SWIG_PyStaticMethod_New(*args: Any, **kwargs: Any) -> Any: ...
_swig_python_version_info: version_info
def _swig_repr(self: Self) -> Any: ...
def _swig_setattr_nondynamic_class_variable(set: Any) -> Any: ...
def _swig_setattr_nondynamic_instance_variable(set: Any) -> Any: ...
class boolPtr(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def boolPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
class charPtr(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def charPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
class doublePtr(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def doublePtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
class floatPtr(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def floatPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
class intPtr(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def intPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
kMGLext_ARB_ES2_compatibility: int
kMGLext_ARB_OpenMGL20: int
kMGLext_ARB_cl_event: int
kMGLext_ARB_color_buffer_float: int
kMGLext_ARB_depth_texture: int
kMGLext_ARB_explicit_attrib_location: int
kMGLext_ARB_fragment_program: int
kMGLext_ARB_fragment_program_shadow: int
kMGLext_ARB_half_float_pixel: int
kMGLext_ARB_instanced_arrays: int
kMGLext_ARB_matrix_palette: int
kMGLext_ARB_occlusion_query: int
kMGLext_ARB_point_parameters: int
kMGLext_ARB_shadow: int
kMGLext_ARB_shadow_ambient: int
kMGLext_ARB_sync: int
kMGLext_ARB_texgen_reflection: int
kMGLext_ARB_texture_env_crossbar: int
kMGLext_ARB_texture_float: int
kMGLext_ARB_texture_non_power_of_two: int
kMGLext_ARB_texture_rectangle: int
kMGLext_ARB_vertex_blend: int
kMGLext_ARB_vertex_buffer_object: int
kMGLext_ARB_vertex_program: int
kMGLext_ATI_fragment_shader: int
kMGLext_ATI_meminfo: int
kMGLext_ATI_pixel_format_float: int
kMGLext_ATI_texture_mirror_once: int
kMGLext_EXT_compiled_vertex_array: int
kMGLext_EXT_cull_vertex: int
kMGLext_EXT_fog_coord: int
kMGLext_EXT_secondary_color: int
kMGLext_EXT_texture_filter_anisotropic: int
kMGLext_EXT_transform_feedback: int
kMGLext_EXT_vertex_shader: int
kMGLext_EXT_vertex_weighting: int
kMGLext_MGLX_choose_fbconfig: int
kMGLext_MGLX_choose_fbconfig_sgix: int
kMGLext_MGLX_create_context_with_config_sgix: int
kMGLext_MGLX_create_new_context: int
kMGLext_MGLX_create_pbuffer: int
kMGLext_MGLX_create_pbuffer_sgix: int
kMGLext_MGLX_destroy_pbuffer: int
kMGLext_MGLX_destroy_window: int
kMGLext_MGLX_get_visual_from_fbconfig_sgix: int
kMGLext_NUMBER_OF_EXTENSIONS: int
kMGLext_NVX_gpu_memory_info: int
kMGLext_NV_fence: int
kMGLext_NV_float_buffer: int
kMGLext_NV_fragment_program: int
kMGLext_NV_occlusion_query: int
kMGLext_NV_primitive_restart: int
kMGLext_NV_register_combiners: int
kMGLext_NV_texture_shader: int
kMGLext_NV_transform_feedback: int
kMGLext_NV_vertex_array_range: int
kMGLext_NV_vertex_program: int
kMGLext_SGIS_generate_mipmap: int
kMGLext_SGIX_depth_texture: int
kMGLext_SGIX_shadow: int
kMGLext_WMGL_ARB_buffer_region: int
kMGLext_WMGL_ARB_extensions_string: int
kMGLext_WMGL_ARB_make_current_read: int
kMGLext_WMGL_ARB_pbuffer: int
kMGLext_WMGL_ARB_pixel_format: int
kMGLext_WMGL_ARB_render_texture: int
kMGLext_WMGL_NV_allocate_memory: int
kMGLext_abgr: int
kMGLext_bgra: int
kMGLext_blend_color: int
kMGLext_blend_minmax: int
kMGLext_blend_subtract: int
kMGLext_color_matrix: int
kMGLext_color_table: int
kMGLext_convolution: int
kMGLext_draw_range_elements: int
kMGLext_frame_buffer_object: int
kMGLext_framebuffer_multisample: int
kMGLext_histogram: int
kMGLext_imaging_subset: int
kMGLext_multi_draw_arrays: int
kMGLext_multisample: int
kMGLext_multitexture: int
kMGLext_packed_depth_stencil: int
kMGLext_packed_pixels: int
kMGLext_rescale_normal: int
kMGLext_separate_specular_color: int
kMGLext_texture3D: int
kMGLext_texture_array: int
kMGLext_texture_border_clamp: int
kMGLext_texture_compression: int
kMGLext_texture_compression_s3tc: int
kMGLext_texture_cube_map: int
kMGLext_texture_edge_clamp: int
kMGLext_texture_env_add: int
kMGLext_texture_env_combine: int
kMGLext_texture_env_dot3: int
kMGLext_texture_lod: int
kMGLext_texture_mirrored_repeat: int
kMGLext_transpose_matrix: int
class shortPtr(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def shortPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
class uCharPtr(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def uCharPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
class uIntPtr(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def uIntPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...