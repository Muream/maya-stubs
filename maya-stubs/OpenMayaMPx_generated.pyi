# fmt: off
from typing import *
from typing_extensions import Self
from _typeshed import Incomplete


class MExternalContentInfoTable(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    def addResolvedEntry(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addUnresolvedEntry(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getEntryByIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInfoByKey(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MExternalContentLocationTable(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    def addEntry(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getEntryByIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getLocationByKey(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnPlugin(MFnBase):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    def addMenuItem(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def apiVersion(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterAnimCurveInterpolator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterAttributePatternFactory(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterCacheFormat(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterCommand(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterConstraintCommand(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterContextCommand(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterControlCommand(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterDevice(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterDisplayFilter(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterDragAndDropBehavior(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterEvaluator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterFileTranslator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterIkSolver(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterImageFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterModelEditorCommand(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterRenderPassImpl(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterRenderer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterTopologyEvaluator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterURIFileResolver(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlugin(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCallableInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNodeRegistered(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kDefaultDataLocation: SwigPyObject = ...
    kImageFilePriorityDefault: int = ...
    kImageFilePriorityHigh: int = ...
    kImageFilePriorityHighest: int = ...
    kImageFilePriorityLow: int = ...
    kImageFilePriorityLowest: int = ...
    def loadPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def matrixTypeIdFromXformId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registerAnimCurveInterpolator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registerAttributePatternFactory(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registerBakeEngine(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registerCacheFormat(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registerCommand(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registerConstraintCommand(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registerContextCommand(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registerControlCommand(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registerData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registerDevice(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registerDisplayFilter(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registerDragAndDropBehavior(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registerEvaluator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registerFileTranslator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registerIkSolver(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registerImageFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registerMaterialInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registerModelEditorCommand(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registerNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registerRenderPassImpl(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registerRenderer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registerShape(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registerTopologyEvaluator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registerTransform(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registerUI(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registerUIStrings(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registerURIFileResolver(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registeringCallableScript(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeMenuItem(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCallableInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRegisteringCallableScript(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setVersion(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def unregisterBakeEngine(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def unregisterMaterialInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def vendor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def version(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnPlugin_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnPlugin_findPlugin(*args: Any, **kwargs: Any) -> Any: ...
def MFnPlugin_isNodeRegistered(*args: Any, **kwargs: Any) -> Any: ...
def MFnPlugin_registeringCallableScript(*args: Any, **kwargs: Any) -> Any: ...
def MFnPlugin_setRegisteringCallableScript(*args: Any, **kwargs: Any) -> Any: ...
class MPx3dModelView(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    def __disown__(self: Self) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    def backgroundColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def backgroundColorBottom(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def backgroundColorTop(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def beginGL(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def beginXorDrawing(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def colorAtIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def customDraw(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def customDrawEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def destroyOnPanelDestruction(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def displayAxisAtOriginOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def displayAxisOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def displayCameraAnnotationOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def displayHUD(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def displayStyle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doUpdateOnMove(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawAdornments(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawAdornmentsNow(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawHUDNow(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawInterrupt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOnePass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawText(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def endGL(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def endXorDrawing(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def filteredObjectList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fogColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fogDensity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fogEnd(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fogMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fogSource(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fogStart(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAsM3dView(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCamera(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCameraHUDName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCameraSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getColorIndexAndTable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCurrentCameraSetCamera(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getModelView(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getObjectsToView(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def handleDraw(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasStereoBufferSupport(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def includeInvisible(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isBackfaceCulling(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isBackgroundFogEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isBackgroundGradient(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFogEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isShadeActiveOnly(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTextureDisplayEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTwoSidedLighting(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isVisible(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isWireframeOnShaded(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isXrayEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kFogCoordinate: int = ...
    kFogExponential: int = ...
    kFogExponentialSquared: int = ...
    kFogFragment: int = ...
    kFogLinear: int = ...
    kLightActive: int = ...
    kLightAll: int = ...
    kLightDefault: int = ...
    kLightNone: int = ...
    kLightQuality: int = ...
    kLightSelected: int = ...
    def lightingMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def multipleDrawEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def multipleDrawPassCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numActiveColors(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numDormantColors(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numUserDefinedColors(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectDisplay(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def okForMultipleDraw(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def portHeight(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def portWidth(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postMultipleDraw(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postMultipleDrawPass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def preMultipleDraw(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def preMultipleDrawPass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def processDraw(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def refresh(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removingCamera(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def requestOkForDraw(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setBackfaceCulling(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setBackgroundFogEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCamera(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCameraInDraw(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCameraSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCurrentCameraSetCamera(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCustomDrawEnable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDestroyOnPanelDestruction(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDisplayAxis(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDisplayAxisAtOrigin(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDisplayCameraAnnotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDisplayHUD(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDisplayStyle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoUpdateOnMove(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDrawAdornments(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDrawCameraOverride(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDrawColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDrawInterrupt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFogColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFogDensity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFogEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFogEnd(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFogMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFogSource(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFogStart(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInStereoDrawMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIncludeInvisible(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLightingMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMultipleDrawEnable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectDisplay(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectsToView(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTextureDisplayEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTwoSidedLighting(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUserDefinedColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setViewSelected(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setViewSelectedPrefix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setViewSelectedSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setWireframeOnShaded(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setXrayEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def templateColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def updateViewingParameters(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userDefinedColorIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def viewIsFiltered(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def viewSelected(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def viewSelectedPrefix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def viewSelectedSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def viewToObjectSpace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def viewToWorld(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def viewType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def wantStereoGLBuffer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def worldToView(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MPx3dModelView_className(*args: Any, **kwargs: Any) -> Any: ...
def MPx3dModelView_getModelView(*args: Any, **kwargs: Any) -> Any: ...
class MPxAnimCurveInterpolator(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    def __disown__(self: Self) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    def evaluate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def initialize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kEvaluateAtKey: int = ...
    kLockType: int = ...
    thisown: property = ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MPxAssembly(MPxNode):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    def __disown__(self: Self) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    def _doNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _forceCache(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _setMPSafe(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def activate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def activateRep(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def activating(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAddAttrEdit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addConnectAttrEdit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addDeleteAttrEdit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addDisconnectAttrEdit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addParentEdit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addSetAttrEdit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeAffects(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def beforeSave(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    caching: property = ...
    def canRepApplyEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def compute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def configCache(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectionBroken(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectionMade(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copyInternalData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createRepresentation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteAllRepresentations(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteRepresentation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dependsOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def existWithoutInConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def existWithoutOutConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    frozen: property = ...
    def getActive(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCacheSetup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFilesToArchive(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInitialRep(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInstancePtr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInternalValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInternalValueInContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getRepLabel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getRepNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getRepType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getRepresentations(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def handlesAddEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasInvalidationRangeTransformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inactivateRep(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inheritAttributesFrom(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def internalArrayCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isAbstractClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isActive(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    isHistoricallyInteresting: property = ...
    def isPassiveOutput(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingTopology(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAssembly: int = ...
    kBlendShape: int = ...
    kCameraSetNode: int = ...
    kClientDeviceNode: int = ...
    kConstraintNode: int = ...
    kDefaultScheduling: int = ...
    kDeformerNode: int = ...
    kDependNode: int = ...
    kEmitterNode: int = ...
    kEvaluatedDirectly: int = ...
    kEvaluatedIndirectly: int = ...
    kFieldNode: int = ...
    kFluidEmitterNode: int = ...
    kGeometryFilter: int = ...
    kGloballySerial: int = ...
    kGloballySerialize: int = ...
    kHardwareShader: int = ...
    kHwShaderNode: int = ...
    kIkSolverNode: int = ...
    kImagePlaneNode: int = ...
    kLast: int = ...
    kLeaveDirty: int = ...
    kLocatorNode: int = ...
    kManipContainer: int = ...
    kManipulatorNode: int = ...
    kMotionPathNode: int = ...
    kObjectSet: int = ...
    kParallel: int = ...
    kParticleAttributeMapperNode: int = ...
    kPostEvaluationTypeLast: int = ...
    kSchedulingTypeLast: int = ...
    kSerial: int = ...
    kSerialize: int = ...
    kSkinCluster: int = ...
    kSpringNode: int = ...
    kSurfaceShape: int = ...
    kThreadedDeviceNode: int = ...
    kTransformNode: int = ...
    kUntrusted: int = ...
    def legalConnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def legalDisconnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def memberAdded(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def memberRemoved(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    message: property = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def passThroughToMany(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def passThroughToOne(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def performActivate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def performInactivate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postActivateRep(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postApplyEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postConstructor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postEvaluation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postLoad(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postUnapplyEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def preApplyEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def preEvaluation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def preUnapplyEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def repTypes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def schedulingType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDependentsDirty(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExistWithoutInConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExistWithoutOutConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInstancePtr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternalValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternalValueInContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRepLabel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRepName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shouldSave(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    state: property = ...
    def supportsEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def supportsMemberChanges(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def thisMObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transformInvalidationRange(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def updateRepNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MPxAssembly_className(*args: Any, **kwargs: Any) -> Any: ...
class MPxAttributePatternFactory(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    def __disown__(self: Self) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createPatternsFromFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createPatternsFromString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MPxAttributePatternFactory_className(*args: Any, **kwargs: Any) -> Any: ...
class MPxBakeEngine(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    def __disown__(self: Self) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    def bake(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getUVRange(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setNeedTransparency(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MPxBlendShape(MPxGeometryFilter):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    def __disown__(self: Self) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    def _doNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _forceCache(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _setMPSafe(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def accessoryAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def accessoryNodeSetup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeAffects(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    caching: property = ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    componentTagExpression: property = ...
    def compute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def configCache(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectionBroken(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectionMade(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copyInternalData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deform(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deformData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dependsOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    envelope: property = ...
    def existWithoutInConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def existWithoutOutConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    frozen: property = ...
    def getCacheSetup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDeformationDetails(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFilesToArchive(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFixedSetupData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getGeometryIterator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInternalValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInternalValueInContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    groupId: property = ...
    def hasInvalidationRangeTransformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inheritAttributesFrom(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    input: property = ...
    inputComponentsTarget: property = ...
    inputGeom: property = ...
    inputGeomTarget: property = ...
    inputPointsTarget: property = ...
    inputTarget: property = ...
    inputTargetGroup: property = ...
    inputTargetItem: property = ...
    def internalArrayCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isAbstractClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    isHistoricallyInteresting: property = ...
    def isPassiveOutput(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingTopology(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAssembly: int = ...
    kBlendShape: int = ...
    kCameraSetNode: int = ...
    kClientDeviceNode: int = ...
    kConstraintNode: int = ...
    kDefaultScheduling: int = ...
    kDeformerNode: int = ...
    kDeformsAll: int = ...
    kDeformsColors: int = ...
    kDeformsUVs: int = ...
    kDependNode: int = ...
    kEmitterNode: int = ...
    kEvaluatedDirectly: int = ...
    kEvaluatedIndirectly: int = ...
    kFieldNode: int = ...
    kFluidEmitterNode: int = ...
    kGeometryFilter: int = ...
    kGloballySerial: int = ...
    kGloballySerialize: int = ...
    kHardwareShader: int = ...
    kHwShaderNode: int = ...
    kIkSolverNode: int = ...
    kImagePlaneNode: int = ...
    kLast: int = ...
    kLeaveDirty: int = ...
    kLocatorNode: int = ...
    kManipContainer: int = ...
    kManipulatorNode: int = ...
    kMotionPathNode: int = ...
    kObjectSet: int = ...
    kParallel: int = ...
    kParticleAttributeMapperNode: int = ...
    kPostEvaluationTypeLast: int = ...
    kSchedulingTypeLast: int = ...
    kSerial: int = ...
    kSerialize: int = ...
    kSkinCluster: int = ...
    kSpringNode: int = ...
    kSurfaceShape: int = ...
    kThreadedDeviceNode: int = ...
    kTransformNode: int = ...
    kUntrusted: int = ...
    def legalConnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def legalDisconnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    message: property = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    outputGeom: property = ...
    def passThroughToMany(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def passThroughToOne(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postConstructor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postEvaluation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def preEvaluation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def schedulingType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDeformationDetails(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDependentsDirty(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExistWithoutInConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExistWithoutOutConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternalValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternalValueInContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setModifiedCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseExistingConnectionWhenSetEditing(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shouldSave(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    state: property = ...
    targetWeights: property = ...
    def thisMObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transformInvalidationRange(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    weight: property = ...

def MPxBlendShape_className(*args: Any, **kwargs: Any) -> Any: ...
class MPxCacheConfigRuleFilter(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    def __disown__(self: Self) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    def isMatch(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postRulesExecution(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def preRulesExecution(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MPxCacheFormat(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    def __disown__(self: Self) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    def beginReadChunk(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def beginWriteChunk(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def close(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def endReadChunk(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def endWriteChunk(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def extension(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findChannelName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def handlesDescription(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kRead: int = ...
    kReadWrite: int = ...
    kWrite: int = ...
    def open(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def readArraySize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def readChannelName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def readDescription(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def readDoubleArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def readDoubleVectorArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def readFloatArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def readFloatVectorArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def readHeader(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def readInt32(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def readIntArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def readNextTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def readTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rewind(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def writeChannelName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def writeDescription(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def writeDoubleArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def writeDoubleVectorArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def writeFloatArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def writeFloatVectorArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def writeHeader(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def writeInt32(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def writeIntArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def writeTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MPxCacheFormat_className(*args: Any, **kwargs: Any) -> Any: ...
class MPxCameraSet(MPxNode):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    def __disown__(self: Self) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    def _doNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _forceCache(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _setMPSafe(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    active: property = ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeAffects(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    caching: property = ...
    camera: property = ...
    cameraLayer: property = ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def compute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def configCache(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectionBroken(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectionMade(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copyInternalData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dependsOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def existWithoutInConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def existWithoutOutConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    frozen: property = ...
    def getCacheSetup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFilesToArchive(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInternalValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInternalValueInContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasInvalidationRangeTransformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inheritAttributesFrom(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def internalArrayCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isAbstractClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    isHistoricallyInteresting: property = ...
    def isPassiveOutput(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingTopology(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAssembly: int = ...
    kBlendShape: int = ...
    kCameraSetNode: int = ...
    kClientDeviceNode: int = ...
    kConstraintNode: int = ...
    kDefaultScheduling: int = ...
    kDeformerNode: int = ...
    kDependNode: int = ...
    kEmitterNode: int = ...
    kEvaluatedDirectly: int = ...
    kEvaluatedIndirectly: int = ...
    kFieldNode: int = ...
    kFluidEmitterNode: int = ...
    kGeometryFilter: int = ...
    kGloballySerial: int = ...
    kGloballySerialize: int = ...
    kHardwareShader: int = ...
    kHwShaderNode: int = ...
    kIkSolverNode: int = ...
    kImagePlaneNode: int = ...
    kLast: int = ...
    kLeaveDirty: int = ...
    kLocatorNode: int = ...
    kManipContainer: int = ...
    kManipulatorNode: int = ...
    kMotionPathNode: int = ...
    kObjectSet: int = ...
    kParallel: int = ...
    kParticleAttributeMapperNode: int = ...
    kPostEvaluationTypeLast: int = ...
    kSchedulingTypeLast: int = ...
    kSerial: int = ...
    kSerialize: int = ...
    kSkinCluster: int = ...
    kSpringNode: int = ...
    kSurfaceShape: int = ...
    kThreadedDeviceNode: int = ...
    kTransformNode: int = ...
    kUntrusted: int = ...
    def legalConnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def legalDisconnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    message: property = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    order: property = ...
    def passThroughToMany(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def passThroughToOne(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postConstructor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postEvaluation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def preEvaluation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    sceneData: property = ...
    def schedulingType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDependentsDirty(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExistWithoutInConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExistWithoutOutConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternalValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternalValueInContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shouldSave(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    state: property = ...
    def thisMObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transformInvalidationRange(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MPxCameraSet_className(*args: Any, **kwargs: Any) -> Any: ...
class MPxCommand(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    def __disown__(self: Self) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    def appendToResult(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clearResult(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def commandString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentDoubleResult(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentIntResult(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentResultType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentStringResult(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def displayError(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def displayInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def displayWarning(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doIt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCurrentResult(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasSyntax(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isCurrentResultArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isHistoryOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isUndoable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kDouble: int = ...
    kLong: int = ...
    kNoArg: int = ...
    kString: int = ...
    def redoIt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCommandString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setHistoryOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setResult(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUndoable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def syntax(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def undoIt(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MPxCommand_appendToResult(*args: Any, **kwargs: Any) -> Any: ...
def MPxCommand_className(*args: Any, **kwargs: Any) -> Any: ...
def MPxCommand_clearResult(*args: Any, **kwargs: Any) -> Any: ...
def MPxCommand_currentDoubleResult(*args: Any, **kwargs: Any) -> Any: ...
def MPxCommand_currentIntResult(*args: Any, **kwargs: Any) -> Any: ...
def MPxCommand_currentResultType(*args: Any, **kwargs: Any) -> Any: ...
def MPxCommand_currentStringResult(*args: Any, **kwargs: Any) -> Any: ...
def MPxCommand_displayError(*args: Any, **kwargs: Any) -> Any: ...
def MPxCommand_displayInfo(*args: Any, **kwargs: Any) -> Any: ...
def MPxCommand_displayWarning(*args: Any, **kwargs: Any) -> Any: ...
def MPxCommand_getCurrentResult(*args: Any, **kwargs: Any) -> Any: ...
def MPxCommand_isCurrentResultArray(*args: Any, **kwargs: Any) -> Any: ...
def MPxCommand_setResult(*args: Any, **kwargs: Any) -> Any: ...
class MPxComponentShape(MPxSurfaceShape):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    def __disown__(self: Self) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    def _doNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _forceCache(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _setMPSafe(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def acceptsGeometryIterator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def activeComponents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeAffects(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def boundingBox(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    boundingBoxCenterX: property = ...
    boundingBoxCenterY: property = ...
    boundingBoxCenterZ: property = ...
    def cachedShapeAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    caching: property = ...
    def canMakeLive(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    center: property = ...
    def childChanged(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def closestPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def componentToPlugs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def compute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def configCache(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectionBroken(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectionMade(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def convertToTweakNodePlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copyInternalData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createFullRenderGroup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createFullVertexGroup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteComponents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dependsOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def evalNodeAffectsDrawDb(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def excludeAsPluginShape(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def existWithoutInConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def existWithoutOutConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    frozen: property = ...
    def geometryData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def geometryIteratorSetup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCacheSetup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getComponentSelectionMask(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getControlPoints(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFilesToArchive(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInternalValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInternalValueInContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getShapeSelectionMask(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getWorldMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasActiveComponents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasInvalidationRangeTransformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inheritAttributesFrom(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    instObjGroups: property = ...
    intermediateObject: property = ...
    def internalArrayCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    inverseMatrix: property = ...
    def isAbstractClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isBounded(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    isHistoricallyInteresting: property = ...
    def isPassiveOutput(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isRenderable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    isTemplated: property = ...
    def isTrackingTopology(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAssembly: int = ...
    kBlendShape: int = ...
    kBoundingBoxChanged: int = ...
    kCameraSetNode: int = ...
    kClientDeviceNode: int = ...
    kConstraintNode: int = ...
    kDefaultScheduling: int = ...
    kDeformerNode: int = ...
    kDependNode: int = ...
    kEmitterNode: int = ...
    kEvaluatedDirectly: int = ...
    kEvaluatedIndirectly: int = ...
    kFieldNode: int = ...
    kFluidEmitterNode: int = ...
    kGeometryFilter: int = ...
    kGloballySerial: int = ...
    kGloballySerialize: int = ...
    kHardwareShader: int = ...
    kHwShaderNode: int = ...
    kIkSolverNode: int = ...
    kImagePlaneNode: int = ...
    kLast: int = ...
    kLeaveDirty: int = ...
    kLocatorNode: int = ...
    kManipContainer: int = ...
    kManipulatorNode: int = ...
    kMatchInvalidAttribute: int = ...
    kMatchInvalidAttributeDim: int = ...
    kMatchInvalidAttributeIndex: int = ...
    kMatchInvalidAttributeRange: int = ...
    kMatchInvalidName: int = ...
    kMatchNone: int = ...
    kMatchOk: int = ...
    kMatchTooMany: int = ...
    kMotionPathNode: int = ...
    kNoPointCaching: int = ...
    kNormal: int = ...
    kObjectChanged: int = ...
    kObjectSet: int = ...
    kParallel: int = ...
    kParticleAttributeMapperNode: int = ...
    kPostEvaluationTypeLast: int = ...
    kRestorePoints: int = ...
    kSavePoints: int = ...
    kSchedulingTypeLast: int = ...
    kSerial: int = ...
    kSerialize: int = ...
    kSkinCluster: int = ...
    kSpringNode: int = ...
    kSurfaceShape: int = ...
    kThreadedDeviceNode: int = ...
    kTransformNode: int = ...
    kTransformOriginalPoints: int = ...
    kUTangent: int = ...
    kUVNTriad: int = ...
    kUntrusted: int = ...
    kUpdatePoints: int = ...
    kVTangent: int = ...
    def legalConnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def legalDisconnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def localShapeInAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def localShapeOutAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    mControlPoints: property = ...
    mControlValueX: property = ...
    mControlValueY: property = ...
    mControlValueZ: property = ...
    mHasHistoryOnCreate: property = ...
    def match(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def matchComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    matrix: property = ...
    message: property = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def newControlPointComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    nodeBoundingBox: property = ...
    nodeBoundingBoxMax: property = ...
    nodeBoundingBoxMaxX: property = ...
    nodeBoundingBoxMaxY: property = ...
    nodeBoundingBoxMaxZ: property = ...
    nodeBoundingBoxMin: property = ...
    nodeBoundingBoxMinX: property = ...
    nodeBoundingBoxMinY: property = ...
    nodeBoundingBoxMinZ: property = ...
    nodeBoundingBoxSize: property = ...
    nodeBoundingBoxSizeX: property = ...
    nodeBoundingBoxSizeY: property = ...
    nodeBoundingBoxSizeZ: property = ...
    objectColor: property = ...
    objectGroupColor: property = ...
    objectGroupId: property = ...
    objectGroups: property = ...
    objectGrpCompList: property = ...
    parentInverseMatrix: property = ...
    parentMatrix: property = ...
    def passThroughToMany(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def passThroughToOne(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pointAtParm(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postConstructor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postEvaluation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def preEvaluation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def renderGroupComponentType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def schedulingType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setControlPoints(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDependentsDirty(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExistWithoutInConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExistWithoutOutConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternalValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternalValueInContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRenderable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shouldSave(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    state: property = ...
    def thisMObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transformInvalidationRange(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def transformUsing(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def tweakUsing(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def undeleteComponents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    useObjectColor: property = ...
    def vertexOffsetDirection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    visibility: property = ...
    def weightedTransformUsing(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def weightedTweakUsing(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    worldInverseMatrix: property = ...
    worldMatrix: property = ...
    def worldShapeOutAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MPxConstraint(MPxNode):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    def __disown__(self: Self) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    def _doNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _forceCache(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _setMPSafe(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeAffects(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    caching: property = ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def compute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def configCache(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectionBroken(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectionMade(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def constraintRotateOrderAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copyInternalData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dependsOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    enableRestPosition: property = ...
    def existWithoutInConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def existWithoutOutConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    frozen: property = ...
    def getCacheSetup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFilesToArchive(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInternalValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInternalValueInContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getOutputAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasInvalidationRangeTransformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inheritAttributesFrom(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def internalArrayCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isAbstractClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    isHistoricallyInteresting: property = ...
    def isPassiveOutput(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingTopology(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAssembly: int = ...
    kBlendShape: int = ...
    kCameraSetNode: int = ...
    kClientDeviceNode: int = ...
    kConstraintNode: int = ...
    kDefaultScheduling: int = ...
    kDeformerNode: int = ...
    kDependNode: int = ...
    kEmitterNode: int = ...
    kEvaluatedDirectly: int = ...
    kEvaluatedIndirectly: int = ...
    kFieldNode: int = ...
    kFluidEmitterNode: int = ...
    kGeometryFilter: int = ...
    kGloballySerial: int = ...
    kGloballySerialize: int = ...
    kHardwareShader: int = ...
    kHwShaderNode: int = ...
    kIkSolverNode: int = ...
    kImagePlaneNode: int = ...
    kLast: int = ...
    kLeaveDirty: int = ...
    kLocatorNode: int = ...
    kManipContainer: int = ...
    kManipulatorNode: int = ...
    kMotionPathNode: int = ...
    kObject: int = ...
    kObjectRotation: int = ...
    kObjectSet: int = ...
    kParallel: int = ...
    kParticleAttributeMapperNode: int = ...
    kPostEvaluationTypeLast: int = ...
    kScene: int = ...
    kSchedulingTypeLast: int = ...
    kSerial: int = ...
    kSerialize: int = ...
    kSkinCluster: int = ...
    kSpringNode: int = ...
    kSurfaceShape: int = ...
    kThreadedDeviceNode: int = ...
    kTransformNode: int = ...
    kUntrusted: int = ...
    kVector: int = ...
    def legalConnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def legalDisconnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    lockOutput: property = ...
    message: property = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def passThroughToMany(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def passThroughToOne(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def passiveOutputAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postConstructor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postEvaluation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def preEvaluation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def schedulingType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDependentsDirty(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExistWithoutInConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExistWithoutOutConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternalValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternalValueInContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shouldSave(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    state: property = ...
    def targetAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def thisMObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transformInvalidationRange(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def weightAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MPxConstraintCommand(MPxCommand):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    def __disown__(self: Self) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    def _syntax(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def aimVectorAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def appendSyntax(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def appendToResult(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clearResult(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def commandString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectObjectAndConstraint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectTarget(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def constraintEnableRestAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def constraintInstancedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def constraintNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def constraintOutputAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def constraintRestAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def constraintTargetAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def constraintTargetInstancedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def constraintTargetWeightAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def constraintTypeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createdConstraint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentDoubleResult(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentIntResult(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentResultType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentStringResult(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def displayError(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def displayInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def displayWarning(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doCreate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doEdit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doIt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doQuery(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCurrentResult(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getObjectAttributesArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def handleNewTargets(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasSyntax(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasVectorFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isCurrentResultArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isHistoryOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isUndoable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kDouble: int = ...
    kGeometryShape: int = ...
    kLast: int = ...
    kLong: int = ...
    kNoArg: int = ...
    kString: int = ...
    kTransform: int = ...
    def objectAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def offsetAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parseArgs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def redoIt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCommandString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setHistoryOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRestPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setResult(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUndoable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def supportsOffset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def syntax(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def targetType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def undoIt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def upVectorAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def worldUpMatrixAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def worldUpTypeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def worldUpVectorAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MPxConstraint_className(*args: Any, **kwargs: Any) -> Any: ...
class MPxContext(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    def __disown__(self: Self) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    def _beginMarquee(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _dragMarquee(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _ignoreEntry(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _newToolCommand(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _releaseMarquee(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _setCursor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _setHelpString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _setTitleString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def abortAction(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addManipulator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def argTypeNumericalInput(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def completeAction(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteAction(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteManipulators(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doDrag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doEnterRegion(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doHold(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doPress(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doPtrMoved(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doRelease(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def feedbackNumericalInput(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def helpStateHasChanged(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def image(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kImage1: int = ...
    kImage2: int = ...
    kImage3: int = ...
    def newToolCommand(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def processNumericalInput(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setImage(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def stringClassName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def toolOffCleanup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def toolOnSetup(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MPxContextCommand(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    def __disown__(self: Self) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    def _parser(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _syntax(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def appendSyntax(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doEditFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doQueryFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def makeObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setResult(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MPxContextCommand_className(*args: Any, **kwargs: Any) -> Any: ...
def MPxContext__ignoreEntry(*args: Any, **kwargs: Any) -> Any: ...
def MPxContext_className(*args: Any, **kwargs: Any) -> Any: ...
class MPxControlCommand(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    def __disown__(self: Self) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    def _control(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _parser(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _syntax(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def appendSyntax(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clearResult(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doEditFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doQueryFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def makeControl(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setResult(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def skipFlagForCreate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MPxControlCommand_className(*args: Any, **kwargs: Any) -> Any: ...
class MPxData(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    def __disown__(self: Self) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    def copy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kData: int = ...
    kGeometryData: int = ...
    kLast: int = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def readASCII(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def readBinary(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def writeASCII(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def writeBinary(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MPxDeformerNode(MPxGeometryFilter):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    def __disown__(self: Self) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    def _doNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _forceCache(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _setMPSafe(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def accessoryAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def accessoryNodeSetup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeAffects(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    caching: property = ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    componentTagExpression: property = ...
    def compute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def configCache(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectionBroken(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectionMade(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copyInternalData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deform(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dependsOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    envelope: property = ...
    def existWithoutInConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def existWithoutOutConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    frozen: property = ...
    def getCacheSetup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDeformationDetails(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFilesToArchive(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFixedSetupData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getGeometryIterator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInternalValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInternalValueInContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    groupId: property = ...
    def hasInvalidationRangeTransformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inheritAttributesFrom(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    input: property = ...
    inputGeom: property = ...
    def internalArrayCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isAbstractClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    isHistoricallyInteresting: property = ...
    def isPassiveOutput(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingTopology(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAssembly: int = ...
    kBlendShape: int = ...
    kCameraSetNode: int = ...
    kClientDeviceNode: int = ...
    kConstraintNode: int = ...
    kDefaultScheduling: int = ...
    kDeformerNode: int = ...
    kDeformsAll: int = ...
    kDeformsColors: int = ...
    kDeformsUVs: int = ...
    kDependNode: int = ...
    kEmitterNode: int = ...
    kEvaluatedDirectly: int = ...
    kEvaluatedIndirectly: int = ...
    kFieldNode: int = ...
    kFluidEmitterNode: int = ...
    kGeometryFilter: int = ...
    kGloballySerial: int = ...
    kGloballySerialize: int = ...
    kHardwareShader: int = ...
    kHwShaderNode: int = ...
    kIkSolverNode: int = ...
    kImagePlaneNode: int = ...
    kLast: int = ...
    kLeaveDirty: int = ...
    kLocatorNode: int = ...
    kManipContainer: int = ...
    kManipulatorNode: int = ...
    kMotionPathNode: int = ...
    kObjectSet: int = ...
    kParallel: int = ...
    kParticleAttributeMapperNode: int = ...
    kPostEvaluationTypeLast: int = ...
    kSchedulingTypeLast: int = ...
    kSerial: int = ...
    kSerialize: int = ...
    kSkinCluster: int = ...
    kSpringNode: int = ...
    kSurfaceShape: int = ...
    kThreadedDeviceNode: int = ...
    kTransformNode: int = ...
    kUntrusted: int = ...
    def legalConnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def legalDisconnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    message: property = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    outputGeom: property = ...
    def passThroughToMany(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def passThroughToOne(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postConstructor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postEvaluation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def preEvaluation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def schedulingType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDeformationDetails(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDependentsDirty(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExistWithoutInConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExistWithoutOutConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternalValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternalValueInContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setModifiedCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseExistingConnectionWhenSetEditing(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shouldSave(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    state: property = ...
    def thisMObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transformInvalidationRange(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    weightList: property = ...
    def weightValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    weights: property = ...

def MPxDeformerNode_className(*args: Any, **kwargs: Any) -> Any: ...
class MPxDragAndDropBehavior(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    def __disown__(self: Self) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectAttrToAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectAttrToNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectNodeToAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectNodeToNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shouldBeUsedFor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MPxDragAndDropBehavior_className(*args: Any, **kwargs: Any) -> Any: ...
class MPxEditData(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    def __disown__(self: Self) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    _dataStringValue: property = ...
    _dataValue: property = ...
    def _getStringValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _getValue(self: Self) -> Any: ...
    def _setStringValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _setValue(self: Self, value: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isEqual(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLessThan(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def performIsEqual(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def performIsLessThan(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MPxEditData_className(*args: Any, **kwargs: Any) -> Any: ...
class MPxEmitterNode(MPxNode):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    def __disown__(self: Self) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    def _doNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _forceCache(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _setMPSafe(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeAffects(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    caching: property = ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def compute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def configCache(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectionBroken(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectionMade(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copyInternalData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dependsOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def draw(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def evalEmission2dTexture(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def existWithoutInConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def existWithoutOutConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    frozen: property = ...
    def getCacheSetup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCurrentTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDeltaTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getEmitterType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFilesToArchive(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInternalValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInternalValueInContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getMaxDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getMinDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getOwnerShape(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getRandomSeed(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getRandomState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getRate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getStartTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getWorldMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getWorldPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasInvalidationRangeTransformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasValidEmission2dTexture(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inheritAttributesFrom(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def internalArrayCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isAbstractClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    isHistoricallyInteresting: property = ...
    def isPassiveOutput(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingTopology(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAssembly: int = ...
    kBlendShape: int = ...
    kCameraSetNode: int = ...
    kClientDeviceNode: int = ...
    kConstraintNode: int = ...
    kCurve: int = ...
    kDefaultScheduling: int = ...
    kDeformerNode: int = ...
    kDependNode: int = ...
    kDirectional: int = ...
    kEmitterNode: int = ...
    kEvaluatedDirectly: int = ...
    kEvaluatedIndirectly: int = ...
    kFieldNode: int = ...
    kFluidEmitterNode: int = ...
    kGeometryFilter: int = ...
    kGloballySerial: int = ...
    kGloballySerialize: int = ...
    kHardwareShader: int = ...
    kHwShaderNode: int = ...
    kIkSolverNode: int = ...
    kImagePlaneNode: int = ...
    kLast: int = ...
    kLeaveDirty: int = ...
    kLocatorNode: int = ...
    kManipContainer: int = ...
    kManipulatorNode: int = ...
    kMotionPathNode: int = ...
    kObjectSet: int = ...
    kOmni: int = ...
    kParallel: int = ...
    kParticleAttributeMapperNode: int = ...
    kPostEvaluationTypeLast: int = ...
    kSchedulingTypeLast: int = ...
    kSerial: int = ...
    kSerialize: int = ...
    kSkinCluster: int = ...
    kSpringNode: int = ...
    kSurface: int = ...
    kSurfaceShape: int = ...
    kThreadedDeviceNode: int = ...
    kTransformNode: int = ...
    kUntrusted: int = ...
    kVolume: int = ...
    def legalConnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def legalDisconnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    mCurrentTime: property = ...
    mDeltaTime: property = ...
    mDirection: property = ...
    mDirectionX: property = ...
    mDirectionY: property = ...
    mDirectionZ: property = ...
    mEmitterType: property = ...
    mInheritFactor: property = ...
    mIsFull: property = ...
    mMaxDistance: property = ...
    mMinDistance: property = ...
    mOutput: property = ...
    mOwnerCentroid: property = ...
    mOwnerCentroidX: property = ...
    mOwnerCentroidY: property = ...
    mOwnerCentroidZ: property = ...
    mOwnerPosData: property = ...
    mOwnerVelData: property = ...
    mRandState: property = ...
    mRandStateX: property = ...
    mRandStateY: property = ...
    mRandStateZ: property = ...
    mRate: property = ...
    mSeed: property = ...
    mSpeed: property = ...
    mStartTime: property = ...
    mSweptGeometry: property = ...
    mWorldMatrix: property = ...
    message: property = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def passThroughToMany(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def passThroughToOne(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postConstructor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postEvaluation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def preEvaluation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def randgen(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def resetRandomState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def schedulingType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDependentsDirty(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExistWithoutInConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExistWithoutOutConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternalValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternalValueInContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRandomState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shouldSave(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    state: property = ...
    def thisMObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transformInvalidationRange(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def volumePrimitiveBoundingBox(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def volumePrimitiveDistanceFromAxis(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def volumePrimitivePointInside(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MPxEmitterNode_className(*args: Any, **kwargs: Any) -> Any: ...
class MPxFieldNode(MPxNode):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    def __disown__(self: Self) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    def _doNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _forceCache(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _setMPSafe(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeAffects(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    caching: property = ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def compute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def configCache(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectionBroken(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectionMade(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copyInternalData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dependsOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def draw(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def existWithoutInConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def existWithoutOutConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def falloffCurve(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    frozen: property = ...
    def getCacheSetup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFilesToArchive(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getForceAtPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInternalValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInternalValueInContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasInvalidationRangeTransformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def iconBitmap(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def iconSizeAndOrigin(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inheritAttributesFrom(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def internalArrayCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isAbstractClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFalloffCurveConstantOne(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    isHistoricallyInteresting: property = ...
    def isPassiveOutput(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingTopology(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAssembly: int = ...
    kBlendShape: int = ...
    kCameraSetNode: int = ...
    kClientDeviceNode: int = ...
    kConstraintNode: int = ...
    kDefaultScheduling: int = ...
    kDeformerNode: int = ...
    kDependNode: int = ...
    kEmitterNode: int = ...
    kEvaluatedDirectly: int = ...
    kEvaluatedIndirectly: int = ...
    kFieldNode: int = ...
    kFluidEmitterNode: int = ...
    kGeometryFilter: int = ...
    kGloballySerial: int = ...
    kGloballySerialize: int = ...
    kHardwareShader: int = ...
    kHwShaderNode: int = ...
    kIkSolverNode: int = ...
    kImagePlaneNode: int = ...
    kLast: int = ...
    kLeaveDirty: int = ...
    kLocatorNode: int = ...
    kManipContainer: int = ...
    kManipulatorNode: int = ...
    kMotionPathNode: int = ...
    kObjectSet: int = ...
    kParallel: int = ...
    kParticleAttributeMapperNode: int = ...
    kPostEvaluationTypeLast: int = ...
    kSchedulingTypeLast: int = ...
    kSerial: int = ...
    kSerialize: int = ...
    kSkinCluster: int = ...
    kSpringNode: int = ...
    kSurfaceShape: int = ...
    kThreadedDeviceNode: int = ...
    kTransformNode: int = ...
    kUntrusted: int = ...
    def legalConnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def legalDisconnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    mApplyPerVertex: property = ...
    mAttenuation: property = ...
    mDeltaTime: property = ...
    mInputData: property = ...
    mInputForce: property = ...
    mInputMass: property = ...
    mInputPPData: property = ...
    mInputPositions: property = ...
    mInputVelocities: property = ...
    mMagnitude: property = ...
    mMaxDistance: property = ...
    mOutputForce: property = ...
    mOwnerCentroid: property = ...
    mOwnerCentroidX: property = ...
    mOwnerCentroidY: property = ...
    mOwnerCentroidZ: property = ...
    mOwnerPPData: property = ...
    mOwnerPosData: property = ...
    mOwnerVelData: property = ...
    mUseMaxDistance: property = ...
    mWorldMatrix: property = ...
    message: property = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def passThroughToMany(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def passThroughToOne(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postConstructor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postEvaluation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def preEvaluation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def schedulingType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDependentsDirty(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExistWithoutInConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExistWithoutOutConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternalValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternalValueInContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shouldSave(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    state: property = ...
    def thisMObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transformInvalidationRange(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MPxFieldNode_className(*args: Any, **kwargs: Any) -> Any: ...
class MPxFileResolver(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    def __disown__(self: Self) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findURIResolverByName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findURIResolverByScheme(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getURIResolversByName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getURIResolversByScheme(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kInput: int = ...
    kNone: int = ...
    def numURIResolvers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def performAfterSaveURI(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def resolveURI(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def resolveURIWithContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def resolverName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def uriScheme(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MPxFileResolver_className(*args: Any, **kwargs: Any) -> Any: ...
def MPxFileResolver_findURIResolverByName(*args: Any, **kwargs: Any) -> Any: ...
def MPxFileResolver_findURIResolverByScheme(*args: Any, **kwargs: Any) -> Any: ...
def MPxFileResolver_getURIResolversByName(*args: Any, **kwargs: Any) -> Any: ...
def MPxFileResolver_getURIResolversByScheme(*args: Any, **kwargs: Any) -> Any: ...
def MPxFileResolver_numURIResolvers(*args: Any, **kwargs: Any) -> Any: ...
class MPxFileTranslator(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    def __disown__(self: Self) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    def allowMultipleFileOptimization(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeOpened(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def defaultExtension(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fileAccessMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def filter(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def haveNamespaceSupport(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def haveReadMethod(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def haveReferenceMethod(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def haveWriteMethod(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def identifyFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kCouldBeMyFileType: int = ...
    kExportAccessMode: int = ...
    kExportActiveAccessMode: int = ...
    kImportAccessMode: int = ...
    kIsMyFileType: int = ...
    kNotMyFileType: int = ...
    kOpenAccessMode: int = ...
    kReferenceAccessMode: int = ...
    kSaveAccessMode: int = ...
    kUnknownAccessMode: int = ...
    def reader(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def writer(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MPxFileTranslator_fileAccessMode(*args: Any, **kwargs: Any) -> Any: ...
class MPxFluidEmitterNode(MPxEmitterNode):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    def __disown__(self: Self) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    def _doNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _forceCache(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _setMPSafe(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeAffects(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    caching: property = ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def compute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def configCache(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectionBroken(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectionMade(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copyInternalData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dependsOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def draw(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def evalEmission2dTexture(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def existWithoutInConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def existWithoutOutConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fluidColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fluidDensityEmission(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fluidDropoff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fluidEmitColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fluidEmitter(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fluidFuelEmission(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fluidHeatEmission(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fluidJitter(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    frozen: property = ...
    def getCacheSetup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCurrentTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDeltaTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getEmitterType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFilesToArchive(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInternalValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInternalValueInContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getMaxDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getMinDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getOwnerShape(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getRandomSeed(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getRandomState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getRate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getStartTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getWorldMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getWorldPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasInvalidationRangeTransformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasValidEmission2dTexture(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inheritAttributesFrom(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def internalArrayCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isAbstractClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    isHistoricallyInteresting: property = ...
    def isPassiveOutput(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingTopology(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAssembly: int = ...
    kBlendShape: int = ...
    kCameraSetNode: int = ...
    kClientDeviceNode: int = ...
    kConstraintNode: int = ...
    kCurve: int = ...
    kDefaultScheduling: int = ...
    kDeformerNode: int = ...
    kDependNode: int = ...
    kDirectional: int = ...
    kEmitterNode: int = ...
    kEvaluatedDirectly: int = ...
    kEvaluatedIndirectly: int = ...
    kFieldNode: int = ...
    kFluidEmitterNode: int = ...
    kGeometryFilter: int = ...
    kGloballySerial: int = ...
    kGloballySerialize: int = ...
    kHardwareShader: int = ...
    kHwShaderNode: int = ...
    kIkSolverNode: int = ...
    kImagePlaneNode: int = ...
    kLast: int = ...
    kLeaveDirty: int = ...
    kLocatorNode: int = ...
    kManipContainer: int = ...
    kManipulatorNode: int = ...
    kMotionPathNode: int = ...
    kObjectSet: int = ...
    kOmni: int = ...
    kParallel: int = ...
    kParticleAttributeMapperNode: int = ...
    kPostEvaluationTypeLast: int = ...
    kSchedulingTypeLast: int = ...
    kSerial: int = ...
    kSerialize: int = ...
    kSkinCluster: int = ...
    kSpringNode: int = ...
    kSurface: int = ...
    kSurfaceShape: int = ...
    kThreadedDeviceNode: int = ...
    kTransformNode: int = ...
    kUntrusted: int = ...
    kVolume: int = ...
    def legalConnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def legalDisconnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    mCurrentTime: property = ...
    mDeltaTime: property = ...
    mDirection: property = ...
    mDirectionX: property = ...
    mDirectionY: property = ...
    mDirectionZ: property = ...
    mEmissionFunction: property = ...
    mEmitFluidColor: property = ...
    mEmitterType: property = ...
    mFluidColor: property = ...
    mFluidColorB: property = ...
    mFluidColorG: property = ...
    mFluidColorR: property = ...
    mFluidDensityEmission: property = ...
    mFluidDropoff: property = ...
    mFluidFuelEmission: property = ...
    mFluidHeatEmission: property = ...
    mFluidJitter: property = ...
    mInheritFactor: property = ...
    mIsFull: property = ...
    mMaxDistance: property = ...
    mMinDistance: property = ...
    mOutput: property = ...
    mOwnerCentroid: property = ...
    mOwnerCentroidX: property = ...
    mOwnerCentroidY: property = ...
    mOwnerCentroidZ: property = ...
    mOwnerPosData: property = ...
    mOwnerVelData: property = ...
    mRandState: property = ...
    mRandStateX: property = ...
    mRandStateY: property = ...
    mRandStateZ: property = ...
    mRate: property = ...
    mSeed: property = ...
    mSpeed: property = ...
    mStartTime: property = ...
    mSweptGeometry: property = ...
    mTurbulence: property = ...
    mWorldMatrix: property = ...
    message: property = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def passThroughToMany(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def passThroughToOne(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postConstructor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postEvaluation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def preEvaluation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def randgen(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def resetRandomState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def schedulingType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDependentsDirty(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExistWithoutInConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExistWithoutOutConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternalValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternalValueInContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRandomState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shouldSave(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    state: property = ...
    def thisMObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transformInvalidationRange(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def turbulence(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def volumePrimitiveBoundingBox(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def volumePrimitiveDistanceFromAxis(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def volumePrimitivePointInside(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MPxFluidEmitterNode_className(*args: Any, **kwargs: Any) -> Any: ...
class MPxGeometryData(MPxData):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    def __disown__(self: Self) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    def copy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteComponentsFromGroups(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def iterator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kData: int = ...
    kGeometryData: int = ...
    kLast: int = ...
    def matrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def readASCII(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def readBinary(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def smartCopy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def updateCompleteVertexGroup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def writeASCII(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def writeBinary(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MPxGeometryFilter(MPxNode):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    def __disown__(self: Self) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    def _doNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _forceCache(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _setMPSafe(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def accessoryAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def accessoryNodeSetup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeAffects(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    caching: property = ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    componentTagExpression: property = ...
    def compute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def configCache(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectionBroken(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectionMade(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copyInternalData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deform(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dependsOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    envelope: property = ...
    def existWithoutInConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def existWithoutOutConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    frozen: property = ...
    def getCacheSetup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDeformationDetails(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFilesToArchive(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFixedSetupData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getGeometryIterator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInternalValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInternalValueInContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    groupId: property = ...
    def hasInvalidationRangeTransformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inheritAttributesFrom(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    input: property = ...
    inputGeom: property = ...
    def internalArrayCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isAbstractClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    isHistoricallyInteresting: property = ...
    def isPassiveOutput(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingTopology(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAssembly: int = ...
    kBlendShape: int = ...
    kCameraSetNode: int = ...
    kClientDeviceNode: int = ...
    kConstraintNode: int = ...
    kDefaultScheduling: int = ...
    kDeformerNode: int = ...
    kDeformsAll: int = ...
    kDeformsColors: int = ...
    kDeformsUVs: int = ...
    kDependNode: int = ...
    kEmitterNode: int = ...
    kEvaluatedDirectly: int = ...
    kEvaluatedIndirectly: int = ...
    kFieldNode: int = ...
    kFluidEmitterNode: int = ...
    kGeometryFilter: int = ...
    kGloballySerial: int = ...
    kGloballySerialize: int = ...
    kHardwareShader: int = ...
    kHwShaderNode: int = ...
    kIkSolverNode: int = ...
    kImagePlaneNode: int = ...
    kLast: int = ...
    kLeaveDirty: int = ...
    kLocatorNode: int = ...
    kManipContainer: int = ...
    kManipulatorNode: int = ...
    kMotionPathNode: int = ...
    kObjectSet: int = ...
    kParallel: int = ...
    kParticleAttributeMapperNode: int = ...
    kPostEvaluationTypeLast: int = ...
    kSchedulingTypeLast: int = ...
    kSerial: int = ...
    kSerialize: int = ...
    kSkinCluster: int = ...
    kSpringNode: int = ...
    kSurfaceShape: int = ...
    kThreadedDeviceNode: int = ...
    kTransformNode: int = ...
    kUntrusted: int = ...
    def legalConnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def legalDisconnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    message: property = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    outputGeom: property = ...
    def passThroughToMany(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def passThroughToOne(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postConstructor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postEvaluation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def preEvaluation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def schedulingType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDeformationDetails(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDependentsDirty(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExistWithoutInConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExistWithoutOutConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternalValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternalValueInContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setModifiedCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseExistingConnectionWhenSetEditing(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shouldSave(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    state: property = ...
    def thisMObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transformInvalidationRange(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MPxGeometryFilter_className(*args: Any, **kwargs: Any) -> Any: ...
class MPxGeometryIterator(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    def __disown__(self: Self) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __next__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def component(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def geometry(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasNormals(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasPoints(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def index(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def indexUnsimplified(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDone(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def iteratorCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def maxPoints(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def next(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def point(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCurrentPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxPoints(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPointGetNext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MPxGeometryIterator_className(*args: Any, **kwargs: Any) -> Any: ...
class MPxGlBuffer(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    def __disown__(self: Self) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    def beginBufferNotify(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def bindFbo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def closeFbo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def endBufferNotify(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def openFbo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def unbindFbo(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MPxGlBuffer_className(*args: Any, **kwargs: Any) -> Any: ...
class MPxHardwareShader(MPxNode):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    def __disown__(self: Self) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    def _doNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _forceCache(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _setMPSafe(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeAffects(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    caching: property = ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def compute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def configCache(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectionBroken(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectionMade(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copyInternalData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dependsOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def existWithoutInConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def existWithoutOutConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findResource(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    frozen: property = ...
    def getCacheSetup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFilesToArchive(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getHardwareShaderPtr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInternalValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInternalValueInContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasInvalidationRangeTransformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inheritAttributesFrom(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def internalArrayCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isAbstractClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    isHistoricallyInteresting: property = ...
    def isPassiveOutput(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingTopology(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAssembly: int = ...
    kBlendShape: int = ...
    kCameraSetNode: int = ...
    kClientDeviceNode: int = ...
    kConstraintNode: int = ...
    kDefaultScheduling: int = ...
    kDeformerNode: int = ...
    kDependNode: int = ...
    kEmitterNode: int = ...
    kEvaluatedDirectly: int = ...
    kEvaluatedIndirectly: int = ...
    kFieldNode: int = ...
    kFluidEmitterNode: int = ...
    kGeometryFilter: int = ...
    kGloballySerial: int = ...
    kGloballySerialize: int = ...
    kHardwareShader: int = ...
    kHwShaderNode: int = ...
    kIkSolverNode: int = ...
    kImagePlaneNode: int = ...
    kIsTransparent: int = ...
    kLast: int = ...
    kLeaveDirty: int = ...
    kLocatorNode: int = ...
    kManipContainer: int = ...
    kManipulatorNode: int = ...
    kMotionPathNode: int = ...
    kNoTransparencyFrontBackCull: int = ...
    kNoTransparencyPolygonSort: int = ...
    kObjectSet: int = ...
    kParallel: int = ...
    kParticleAttributeMapperNode: int = ...
    kPostEvaluationTypeLast: int = ...
    kSchedulingTypeLast: int = ...
    kSerial: int = ...
    kSerialize: int = ...
    kSkinCluster: int = ...
    kSpringNode: int = ...
    kSurfaceShape: int = ...
    kThreadedDeviceNode: int = ...
    kTransformNode: int = ...
    kUntrusted: int = ...
    def legalConnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def legalDisconnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    message: property = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    outColor: property = ...
    outColorB: property = ...
    outColorG: property = ...
    outColorR: property = ...
    def passThroughToMany(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def passThroughToOne(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postConstructor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postEvaluation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def preEvaluation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def profile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def render(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def renderSwatchImage(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def schedulingType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDependentsDirty(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExistWithoutInConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExistWithoutOutConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternalValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternalValueInContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUniformParameters(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setVaryingParameters(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shouldSave(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    state: property = ...
    def thisMObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transformInvalidationRange(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def transparencyOptions(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MPxHardwareShader_className(*args: Any, **kwargs: Any) -> Any: ...
def MPxHardwareShader_findResource(*args: Any, **kwargs: Any) -> Any: ...
def MPxHardwareShader_getHardwareShaderPtr(*args: Any, **kwargs: Any) -> Any: ...
class MPxHwShaderNode(MPxNode):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    def __disown__(self: Self) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    def _doNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _forceCache(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _setMPSafe(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeAffects(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def bind(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    caching: property = ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def colorsPerVertex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def compute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def configCache(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectionBroken(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectionMade(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copyInternalData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentShadingEngine(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dependsOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dirtyMask(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def existWithoutInConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def existWithoutOutConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    frozen: property = ...
    def geometry(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCacheSetup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFilesToArchive(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getHwShaderNodePtr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInternalValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInternalValueInContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glBind(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glGeometry(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glUnbind(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasInvalidationRangeTransformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasTransparency(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inheritAttributesFrom(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def internalArrayCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def invertTexCoords(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isAbstractClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    isHistoricallyInteresting: property = ...
    def isPassiveOutput(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingTopology(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAssembly: int = ...
    kBlendShape: int = ...
    kCameraSetNode: int = ...
    kClientDeviceNode: int = ...
    kConstraintNode: int = ...
    kDefaultScheduling: int = ...
    kDeformerNode: int = ...
    kDependNode: int = ...
    kDirtyAll: int = ...
    kDirtyColorArrays: int = ...
    kDirtyNone: int = ...
    kDirtyNormalArray: int = ...
    kDirtyTexCoordArrays: int = ...
    kDirtyVertexArray: int = ...
    kEmitterNode: int = ...
    kEvaluatedDirectly: int = ...
    kEvaluatedIndirectly: int = ...
    kFieldNode: int = ...
    kFluidEmitterNode: int = ...
    kGeometryFilter: int = ...
    kGloballySerial: int = ...
    kGloballySerialize: int = ...
    kHardwareShader: int = ...
    kHwShaderNode: int = ...
    kIkSolverNode: int = ...
    kImagePlaneNode: int = ...
    kIsTransparent: int = ...
    kLast: int = ...
    kLeaveDirty: int = ...
    kLocatorNode: int = ...
    kManipContainer: int = ...
    kManipulatorNode: int = ...
    kMotionPathNode: int = ...
    kNoTransparencyFrontBackCull: int = ...
    kNoTransparencyPolygonSort: int = ...
    kObjectSet: int = ...
    kParallel: int = ...
    kParticleAttributeMapperNode: int = ...
    kPostEvaluationTypeLast: int = ...
    kSchedulingTypeLast: int = ...
    kSerial: int = ...
    kSerialize: int = ...
    kSkinCluster: int = ...
    kSpringNode: int = ...
    kSurfaceShape: int = ...
    kThreadedDeviceNode: int = ...
    kTransformNode: int = ...
    kUntrusted: int = ...
    kWriteAll: int = ...
    kWriteColorArrays: int = ...
    kWriteNone: int = ...
    kWriteNormalArray: int = ...
    kWriteTexCoordArrays: int = ...
    kWriteVertexArray: int = ...
    def legalConnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def legalDisconnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    message: property = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def normalsPerVertex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    outColor: property = ...
    outColorB: property = ...
    outColorG: property = ...
    outColorR: property = ...
    outGlowColor: property = ...
    outGlowColorB: property = ...
    outGlowColorG: property = ...
    outGlowColorR: property = ...
    outMatteOpacity: property = ...
    outMatteOpacityB: property = ...
    outMatteOpacityG: property = ...
    outMatteOpacityR: property = ...
    outTransparency: property = ...
    outTransparencyB: property = ...
    outTransparencyG: property = ...
    outTransparencyR: property = ...
    def passThroughToMany(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def passThroughToOne(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postConstructor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postEvaluation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def preEvaluation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def provideFaceIDs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def provideLocalUVCoord(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def provideVertexIDs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def renderSwatchImage(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def schedulingType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDependentsDirty(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExistWithoutInConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExistWithoutOutConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternalValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternalValueInContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shouldSave(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    state: property = ...
    def supportsBatching(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def texCoordsPerVertex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def thisMObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transformInvalidationRange(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def transparencyOptions(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def unbind(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MPxHwShaderNode_className(*args: Any, **kwargs: Any) -> Any: ...
def MPxHwShaderNode_getHwShaderNodePtr(*args: Any, **kwargs: Any) -> Any: ...
class MPxIkSolverNode(MPxNode):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    def __disown__(self: Self) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    def _doNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _forceCache(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _getJointAngles(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _setJointAngles(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _setMPSafe(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _setToRestAngles(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeAffects(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    caching: property = ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def compute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def configCache(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectionBroken(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectionMade(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copyInternalData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dependsOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doSolve(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def existWithoutInConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def existWithoutOutConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    frozen: property = ...
    def funcValueTolerance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCacheSetup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFilesToArchive(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInternalValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInternalValueInContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def groupHandlesByTopology(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def handleGroup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasInvalidationRangeTransformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasJointLimitSupport(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueSolution(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inheritAttributesFrom(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def internalArrayCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isAbstractClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isAttributeCreatedBySolver(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    isHistoricallyInteresting: property = ...
    def isPassiveOutput(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isPositionOnly(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isSingleChainOnly(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingTopology(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAssembly: int = ...
    kBlendShape: int = ...
    kCameraSetNode: int = ...
    kClientDeviceNode: int = ...
    kConstraintNode: int = ...
    kDefaultScheduling: int = ...
    kDeformerNode: int = ...
    kDependNode: int = ...
    kEmitterNode: int = ...
    kEvaluatedDirectly: int = ...
    kEvaluatedIndirectly: int = ...
    kFieldNode: int = ...
    kFluidEmitterNode: int = ...
    kGeometryFilter: int = ...
    kGloballySerial: int = ...
    kGloballySerialize: int = ...
    kHardwareShader: int = ...
    kHwShaderNode: int = ...
    kIkSolverNode: int = ...
    kImagePlaneNode: int = ...
    kLast: int = ...
    kLeaveDirty: int = ...
    kLocatorNode: int = ...
    kManipContainer: int = ...
    kManipulatorNode: int = ...
    kMotionPathNode: int = ...
    kObjectSet: int = ...
    kParallel: int = ...
    kParticleAttributeMapperNode: int = ...
    kPostEvaluationTypeLast: int = ...
    kSchedulingTypeLast: int = ...
    kSerial: int = ...
    kSerialize: int = ...
    kSkinCluster: int = ...
    kSpringNode: int = ...
    kSurfaceShape: int = ...
    kThreadedDeviceNode: int = ...
    kTransformNode: int = ...
    kUntrusted: int = ...
    def legalConnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def legalDisconnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def maxIterations(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    message: property = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def passThroughToMany(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def passThroughToOne(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def positionOnly(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postConstructor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postEvaluation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postSolve(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def preEvaluation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def preSolve(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotatePlane(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def schedulingType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDependentsDirty(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExistWithoutInConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExistWithoutOutConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFuncValueTolerance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setHandleGroup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternalValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternalValueInContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxIterations(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPositionOnly(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotatePlane(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSingleChainOnly(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSupportJointLimits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUniqueSolution(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shouldSave(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def singleChainOnly(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def snapHandle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def solverTypeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    state: property = ...
    def supportJointLimits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def thisMObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def toSolverSpace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def toWorldSpace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def transformInvalidationRange(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uniqueSolution(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MPxIkSolverNode_className(*args: Any, **kwargs: Any) -> Any: ...
class MPxImageFile(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    def __disown__(self: Self) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    def close(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glLoad(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def load(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def open(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MPxImagePlane(MPxNode):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    def __disown__(self: Self) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    def _doNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _forceCache(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _setMPSafe(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    alphaGain: property = ...
    alreadyPremult: property = ...
    def attributeAffects(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    caching: property = ...
    center: property = ...
    centerX: property = ...
    centerY: property = ...
    centerZ: property = ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    colorGain: property = ...
    colorGainB: property = ...
    colorGainG: property = ...
    colorGainR: property = ...
    colorOffset: property = ...
    colorOffsetB: property = ...
    colorOffsetG: property = ...
    colorOffsetR: property = ...
    composite: property = ...
    def compute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def configCache(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectionBroken(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectionMade(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copyInternalData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    coverage: property = ...
    coverageOrigin: property = ...
    coverageOriginX: property = ...
    coverageOriginY: property = ...
    coverageX: property = ...
    coverageY: property = ...
    def dependsOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    depth: property = ...
    depthBias: property = ...
    depthFile: property = ...
    depthOversample: property = ...
    depthScale: property = ...
    displayMode: property = ...
    displayOnlyIfCurrent: property = ...
    def exactImageFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def existWithoutInConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def existWithoutOutConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    fit: property = ...
    frameExtension: property = ...
    frameOffset: property = ...
    frozen: property = ...
    def getCacheSetup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFilesToArchive(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInternalValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInternalValueInContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasInvalidationRangeTransformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    height: property = ...
    imageName: property = ...
    imageType: property = ...
    def inheritAttributesFrom(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def internalArrayCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isAbstractClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    isHistoricallyInteresting: property = ...
    def isPassiveOutput(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingTopology(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAssembly: int = ...
    kBlendShape: int = ...
    kCameraSetNode: int = ...
    kClientDeviceNode: int = ...
    kConstraintNode: int = ...
    kDefaultScheduling: int = ...
    kDeformerNode: int = ...
    kDependNode: int = ...
    kEmitterNode: int = ...
    kEvaluatedDirectly: int = ...
    kEvaluatedIndirectly: int = ...
    kFieldNode: int = ...
    kFluidEmitterNode: int = ...
    kGeometryFilter: int = ...
    kGloballySerial: int = ...
    kGloballySerialize: int = ...
    kHardwareShader: int = ...
    kHwShaderNode: int = ...
    kIkSolverNode: int = ...
    kImagePlaneNode: int = ...
    kLast: int = ...
    kLeaveDirty: int = ...
    kLocatorNode: int = ...
    kManipContainer: int = ...
    kManipulatorNode: int = ...
    kMotionPathNode: int = ...
    kObjectSet: int = ...
    kParallel: int = ...
    kParticleAttributeMapperNode: int = ...
    kPostEvaluationTypeLast: int = ...
    kSchedulingTypeLast: int = ...
    kSerial: int = ...
    kSerialize: int = ...
    kSkinCluster: int = ...
    kSpringNode: int = ...
    kSurfaceShape: int = ...
    kThreadedDeviceNode: int = ...
    kTransformNode: int = ...
    kUntrusted: int = ...
    def legalConnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def legalDisconnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def loadImageMap(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    lockedToCamera: property = ...
    maxShadingSamples: property = ...
    message: property = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    offset: property = ...
    offsetX: property = ...
    offsetY: property = ...
    def passThroughToMany(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def passThroughToOne(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postConstructor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postEvaluation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def preEvaluation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def refreshImage(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    rotate: property = ...
    def schedulingType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    separateDepth: property = ...
    def setDependentsDirty(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExistWithoutInConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExistWithoutOutConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setImageDirty(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternalValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternalValueInContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    shadingSamples: property = ...
    shadingSamplesOverride: property = ...
    def shouldSave(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    size: property = ...
    sizeX: property = ...
    sizeY: property = ...
    sourceTexture: property = ...
    squeezeCorrection: property = ...
    state: property = ...
    def thisMObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transformInvalidationRange(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    useDepthMap: property = ...
    useFrameExtension: property = ...
    visibleInReflections: property = ...
    visibleInRefractions: property = ...
    width: property = ...

def MPxImagePlane_className(*args: Any, **kwargs: Any) -> Any: ...
class MPxLocatorNode(MPxNode):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    def __disown__(self: Self) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    def _doNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _forceCache(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _setMPSafe(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeAffects(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def boundingBox(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    boundingBoxCenterX: property = ...
    boundingBoxCenterY: property = ...
    boundingBoxCenterZ: property = ...
    caching: property = ...
    center: property = ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def closestPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def color(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def colorRGB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def compute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def configCache(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectionBroken(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectionMade(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copyInternalData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dependsOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def draw(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawLast(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def excludeAsLocator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def existWithoutInConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def existWithoutOutConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    frozen: property = ...
    def getCacheSetup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFilesToArchive(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInternalValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInternalValueInContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getShapeSelectionMask(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasInvalidationRangeTransformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inheritAttributesFrom(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    instObjGroups: property = ...
    intermediateObject: property = ...
    def internalArrayCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    inverseMatrix: property = ...
    def isAbstractClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isBounded(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    isHistoricallyInteresting: property = ...
    def isPassiveOutput(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    isTemplated: property = ...
    def isTrackingTopology(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTransparent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAssembly: int = ...
    kBlendShape: int = ...
    kCameraSetNode: int = ...
    kClientDeviceNode: int = ...
    kConstraintNode: int = ...
    kDefaultScheduling: int = ...
    kDeformerNode: int = ...
    kDependNode: int = ...
    kEmitterNode: int = ...
    kEvaluatedDirectly: int = ...
    kEvaluatedIndirectly: int = ...
    kFieldNode: int = ...
    kFluidEmitterNode: int = ...
    kGeometryFilter: int = ...
    kGloballySerial: int = ...
    kGloballySerialize: int = ...
    kHardwareShader: int = ...
    kHwShaderNode: int = ...
    kIkSolverNode: int = ...
    kImagePlaneNode: int = ...
    kLast: int = ...
    kLeaveDirty: int = ...
    kLocatorNode: int = ...
    kManipContainer: int = ...
    kManipulatorNode: int = ...
    kMotionPathNode: int = ...
    kObjectSet: int = ...
    kParallel: int = ...
    kParticleAttributeMapperNode: int = ...
    kPostEvaluationTypeLast: int = ...
    kSchedulingTypeLast: int = ...
    kSerial: int = ...
    kSerialize: int = ...
    kSkinCluster: int = ...
    kSpringNode: int = ...
    kSurfaceShape: int = ...
    kThreadedDeviceNode: int = ...
    kTransformNode: int = ...
    kUntrusted: int = ...
    def legalConnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def legalDisconnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    localPosition: property = ...
    localPositionX: property = ...
    localPositionY: property = ...
    localPositionZ: property = ...
    localScale: property = ...
    localScaleX: property = ...
    localScaleY: property = ...
    localScaleZ: property = ...
    matrix: property = ...
    message: property = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    nodeBoundingBox: property = ...
    nodeBoundingBoxMax: property = ...
    nodeBoundingBoxMaxX: property = ...
    nodeBoundingBoxMaxY: property = ...
    nodeBoundingBoxMaxZ: property = ...
    nodeBoundingBoxMin: property = ...
    nodeBoundingBoxMinX: property = ...
    nodeBoundingBoxMinY: property = ...
    nodeBoundingBoxMinZ: property = ...
    nodeBoundingBoxSize: property = ...
    nodeBoundingBoxSizeX: property = ...
    nodeBoundingBoxSizeY: property = ...
    nodeBoundingBoxSizeZ: property = ...
    objectColor: property = ...
    objectGroupColor: property = ...
    objectGroupId: property = ...
    objectGroups: property = ...
    objectGrpCompList: property = ...
    parentInverseMatrix: property = ...
    parentMatrix: property = ...
    def passThroughToMany(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def passThroughToOne(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postConstructor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postEvaluation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def preEvaluation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def schedulingType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDependentsDirty(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExistWithoutInConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExistWithoutOutConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternalValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternalValueInContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shouldSave(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    state: property = ...
    def thisMObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transformInvalidationRange(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    underWorldObject: property = ...
    def useClosestPointForSelection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    useObjectColor: property = ...
    visibility: property = ...
    worldInverseMatrix: property = ...
    worldMatrix: property = ...
    worldPosition: property = ...
    worldPositionX: property = ...
    worldPositionY: property = ...
    worldPositionZ: property = ...

def MPxLocatorNode_className(*args: Any, **kwargs: Any) -> Any: ...
class MPxManipContainer(MPxNode):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    def __disown__(self: Self) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    def _doNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _forceCache(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _setMPSafe(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addCircleSweepManip(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addCurveSegmentManip(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addDirectionManip(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addDiscManip(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addDistanceManip(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addFreePointTriadManip(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addMPxManipulatorNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addManipToPlugConversion(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addPlugToInViewEditor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addPlugToManipConversion(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addPointOnCurveManip(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addPointOnSurfaceManip(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addRotateManip(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addScaleManip(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addStateManip(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addToManipConnectTable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addToggleManip(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeAffects(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    caching: property = ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def compute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def configCache(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectToDependNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectionBroken(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectionMade(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copyInternalData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createChildren(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dependsOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doDrag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doPress(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doRelease(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def draw(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def existWithoutInConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def existWithoutOutConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def finishAddingManips(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    frozen: property = ...
    def getCacheSetup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConverterManipValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConverterPlugValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFilesToArchive(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInternalValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInternalValueInContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasInvalidationRangeTransformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inheritAttributesFrom(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def initialize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def internalArrayCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isAbstractClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    isHistoricallyInteresting: property = ...
    def isManipActive(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isPassiveOutput(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingTopology(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAssembly: int = ...
    kBlendShape: int = ...
    kCameraSetNode: int = ...
    kCircleSweepManip: int = ...
    kClientDeviceNode: int = ...
    kConstraintNode: int = ...
    kCurveSegmentManip: int = ...
    kCustomManip: int = ...
    kDefaultScheduling: int = ...
    kDeformerNode: int = ...
    kDependNode: int = ...
    kDirectionManip: int = ...
    kDiscManip: int = ...
    kDistanceManip: int = ...
    kEmitterNode: int = ...
    kEvaluatedDirectly: int = ...
    kEvaluatedIndirectly: int = ...
    kFieldNode: int = ...
    kFluidEmitterNode: int = ...
    kFreePointTriadManip: int = ...
    kGeometryFilter: int = ...
    kGloballySerial: int = ...
    kGloballySerialize: int = ...
    kHardwareShader: int = ...
    kHwShaderNode: int = ...
    kIkSolverNode: int = ...
    kImagePlaneNode: int = ...
    kLast: int = ...
    kLeaveDirty: int = ...
    kLocatorNode: int = ...
    kManipContainer: int = ...
    kManipulatorNode: int = ...
    kMotionPathNode: int = ...
    kObjectSet: int = ...
    kParallel: int = ...
    kParticleAttributeMapperNode: int = ...
    kPointOnCurveManip: int = ...
    kPointOnSurfaceManip: int = ...
    kPostEvaluationTypeLast: int = ...
    kSchedulingTypeLast: int = ...
    kSerial: int = ...
    kSerialize: int = ...
    kSkinCluster: int = ...
    kSpringNode: int = ...
    kStateManip: int = ...
    kSurfaceShape: int = ...
    kThreadedDeviceNode: int = ...
    kToggleManip: int = ...
    kTransformNode: int = ...
    kUntrusted: int = ...
    def legalConnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def legalDisconnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def manipToPlugConversion(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    message: property = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def newManipulator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def passThroughToMany(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def passThroughToOne(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def plugToManipConversion(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postConstructor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postEvaluation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def preEvaluation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeFromManipConnectTable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def schedulingType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDependentsDirty(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExistWithoutInConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExistWithoutOutConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternalValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternalValueInContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shouldSave(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    state: property = ...
    def thisMObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transformInvalidationRange(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MPxManipContainer_addToManipConnectTable(*args: Any, **kwargs: Any) -> Any: ...
def MPxManipContainer_className(*args: Any, **kwargs: Any) -> Any: ...
def MPxManipContainer_initialize(*args: Any, **kwargs: Any) -> Any: ...
def MPxManipContainer_newManipulator(*args: Any, **kwargs: Any) -> Any: ...
def MPxManipContainer_removeFromManipConnectTable(*args: Any, **kwargs: Any) -> Any: ...
class MPxManipulatorNode(MPxNode):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    def __disown__(self: Self) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    def _doNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _forceCache(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _setMPSafe(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addDependentPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addDoubleValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addPointValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addVectorValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeAffects(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    caching: property = ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def colorAndName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def compute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def configCache(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectPlugToValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectToDependNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    connectedNodes: property = ...
    def connectionBroken(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectionMade(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copyInternalData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dependentPlugsReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dependsOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterForMouseMove(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dimmedColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doDrag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doMove(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doPress(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doRelease(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def draw(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def existWithoutInConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def existWithoutOutConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def finishAddingManips(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    frozen: property = ...
    def getCacheSetup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDoubleValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFilesToArchive(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInstancePtr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInternalValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInternalValueInContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPointValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getVectorValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glActiveName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def glFirstHandle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasInvalidationRangeTransformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inheritAttributesFrom(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def internalArrayCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isAbstractClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    isHistoricallyInteresting: property = ...
    def isPassiveOutput(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingTopology(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAssembly: int = ...
    kBlendShape: int = ...
    kCameraSetNode: int = ...
    kClientDeviceNode: int = ...
    kConstraintNode: int = ...
    kDefaultScheduling: int = ...
    kDeformerNode: int = ...
    kDependNode: int = ...
    kEmitterNode: int = ...
    kEvaluatedDirectly: int = ...
    kEvaluatedIndirectly: int = ...
    kFieldNode: int = ...
    kFluidEmitterNode: int = ...
    kGeometryFilter: int = ...
    kGloballySerial: int = ...
    kGloballySerialize: int = ...
    kHardwareShader: int = ...
    kHwShaderNode: int = ...
    kIkSolverNode: int = ...
    kImagePlaneNode: int = ...
    kLast: int = ...
    kLeaveDirty: int = ...
    kLocatorNode: int = ...
    kManipContainer: int = ...
    kManipulatorNode: int = ...
    kMotionPathNode: int = ...
    kObjectSet: int = ...
    kParallel: int = ...
    kParticleAttributeMapperNode: int = ...
    kPostEvaluationTypeLast: int = ...
    kSchedulingTypeLast: int = ...
    kSerial: int = ...
    kSerialize: int = ...
    kSkinCluster: int = ...
    kSpringNode: int = ...
    kSurfaceShape: int = ...
    kThreadedDeviceNode: int = ...
    kTransformNode: int = ...
    kUntrusted: int = ...
    def labelBackgroundColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def labelColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def legalConnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def legalDisconnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def lineColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def mainColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    message: property = ...
    def mouseDown(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def mousePosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def mouseRay(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def mouseRayWorld(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def mouseUp(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def newManipulator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def passThroughToMany(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def passThroughToOne(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postConstructor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postEvaluation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def preEvaluation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def prevColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registerForMouseMove(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def schedulingType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def selectedColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDependentsDirty(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoubleValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExistWithoutInConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExistWithoutOutConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setHandleColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInstancePtr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternalValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternalValueInContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPointValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setVectorValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shouldDrawHandleAsSelected(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shouldSave(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    state: property = ...
    def thisMObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transformInvalidationRange(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def xColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def yColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def zColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MPxManipulatorNode_className(*args: Any, **kwargs: Any) -> Any: ...
def MPxManipulatorNode_newManipulator(*args: Any, **kwargs: Any) -> Any: ...
class MPxMaterialInformation(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    def __disown__(self: Self) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    def computeMaterial(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectAsTexture(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kOverrideDraw: int = ...
    kSimpleMaterial: int = ...
    kTexture: int = ...
    def materialInfoIsDirty(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def textureDisconnected(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def useMaterialAsTexture(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MPxMayaAsciiFilter(MPxFileTranslator):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    def __disown__(self: Self) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    def allowMultipleFileOptimization(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeOpened(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def defaultExtension(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fileAccessMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def filter(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def haveNamespaceSupport(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def haveReadMethod(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def haveReferenceMethod(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def haveWriteMethod(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def identifyFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kCouldBeMyFileType: int = ...
    kExportAccessMode: int = ...
    kExportActiveAccessMode: int = ...
    kImportAccessMode: int = ...
    kIsMyFileType: int = ...
    kNotMyFileType: int = ...
    kOpenAccessMode: int = ...
    kReferenceAccessMode: int = ...
    kSaveAccessMode: int = ...
    kUnknownAccessMode: int = ...
    def processReadOptions(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def processWriteOptions(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reader(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def writePostConnectAttrsBlock(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def writePostCreateNodesBlock(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def writePostHeader(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def writePostRequires(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def writePreConnectAttrsBlock(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def writePreCreateNodesBlock(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def writePreTrailer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def writer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def writesConnectAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def writesCreateNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def writesDisconnectAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def writesFileReference(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def writesMetadata(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def writesParentNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def writesRequirements(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def writesSelectNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def writesSetAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MPxMayaAsciiFilterOutput(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lshift__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    thisown: property = ...

class MPxMidiInputDevice(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    def __disown__(self: Self) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def closeDevice(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deviceState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doButtonEvents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doMovementEvents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getMessage(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def nameAxes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def nameButtons(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def openDevice(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def sendMessage(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MPxMidiInputDevice_className(*args: Any, **kwargs: Any) -> Any: ...
class MPxModelEditorCommand(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    def __disown__(self: Self) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    def _parser(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _syntax(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def appendSyntax(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doEditFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doQueryFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def editorCommandName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def editorMenuScriptName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def makeModelView(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def modelView(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setResult(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def skipFlagForCreate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MPxModelEditorCommand_className(*args: Any, **kwargs: Any) -> Any: ...
class MPxMotionPathNode(MPxNode):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    def __disown__(self: Self) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    def _doNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _forceCache(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _setMPSafe(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    allCoordinates: property = ...
    def attributeAffects(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    bank: property = ...
    bankScale: property = ...
    bankThreshold: property = ...
    def banking(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    caching: property = ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def compute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def configCache(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectionBroken(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectionMade(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copyInternalData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dependsOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def evaluatePath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def existWithoutInConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def existWithoutOutConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    flowNode: property = ...
    follow: property = ...
    fractionMode: property = ...
    def fractionalToParametric(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    frontAxis: property = ...
    frontTwist: property = ...
    frozen: property = ...
    def getCacheSetup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFilesToArchive(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInternalValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInternalValueInContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getVectors(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasInvalidationRangeTransformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inheritAttributesFrom(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def internalArrayCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    inverseFront: property = ...
    inverseUp: property = ...
    def isAbstractClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    isHistoricallyInteresting: property = ...
    def isPassiveOutput(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingTopology(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAssembly: int = ...
    kBlendShape: int = ...
    kCameraSetNode: int = ...
    kClientDeviceNode: int = ...
    kConstraintNode: int = ...
    kDefaultScheduling: int = ...
    kDeformerNode: int = ...
    kDependNode: int = ...
    kEmitterNode: int = ...
    kEvaluatedDirectly: int = ...
    kEvaluatedIndirectly: int = ...
    kFieldNode: int = ...
    kFluidEmitterNode: int = ...
    kGeometryFilter: int = ...
    kGloballySerial: int = ...
    kGloballySerialize: int = ...
    kHardwareShader: int = ...
    kHwShaderNode: int = ...
    kIkSolverNode: int = ...
    kImagePlaneNode: int = ...
    kLast: int = ...
    kLeaveDirty: int = ...
    kLocatorNode: int = ...
    kManipContainer: int = ...
    kManipulatorNode: int = ...
    kMotionPathNode: int = ...
    kObjectSet: int = ...
    kParallel: int = ...
    kParticleAttributeMapperNode: int = ...
    kPostEvaluationTypeLast: int = ...
    kSchedulingTypeLast: int = ...
    kSerial: int = ...
    kSerialize: int = ...
    kSkinCluster: int = ...
    kSpringNode: int = ...
    kSurfaceShape: int = ...
    kThreadedDeviceNode: int = ...
    kTransformNode: int = ...
    kUntrusted: int = ...
    kUpNormal: int = ...
    kUpObject: int = ...
    kUpObjectRotation: int = ...
    kUpScene: int = ...
    kUpVector: int = ...
    def legalConnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def legalDisconnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def matrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    message: property = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    normal: property = ...
    orientMatrix: property = ...
    orientationMarkerTime: property = ...
    def parametricToFractional(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def passThroughToMany(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def passThroughToOne(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    pathGeometry: property = ...
    def position(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    positionMarkerTime: property = ...
    def postConstructor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postEvaluation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def preEvaluation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    rotate: property = ...
    rotateOrder: property = ...
    rotateX: property = ...
    rotateY: property = ...
    rotateZ: property = ...
    def schedulingType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDependentsDirty(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExistWithoutInConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExistWithoutOutConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternalValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternalValueInContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shouldSave(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    sideTwist: property = ...
    state: property = ...
    def thisMObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transformInvalidationRange(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    uValue: property = ...
    upAxis: property = ...
    upTwist: property = ...
    updateOrientationMarkers: property = ...
    worldUpMatrix: property = ...
    worldUpType: property = ...
    worldUpVector: property = ...
    worldUpVectorX: property = ...
    worldUpVectorY: property = ...
    worldUpVectorZ: property = ...
    def wraparoundFractionalValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    xCoordinate: property = ...
    yCoordinate: property = ...
    zCoordinate: property = ...

class MPxMultiPolyTweakUVCommand(MPxCommand):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    def __disown__(self: Self) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    def appendToResult(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clearResult(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def commandString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentDoubleResult(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentIntResult(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentResultType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentStringResult(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def displayError(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def displayInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def displayWarning(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doIt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCurrentResult(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getTweakedUVs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasSyntax(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isCurrentResultArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isHistoryOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isUndoable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kDouble: int = ...
    kLong: int = ...
    kNoArg: int = ...
    kString: int = ...
    def newSyntax(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parseSyntax(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def preProcessUVs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def redoIt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCommandString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setHistoryOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setResult(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUndoable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def syntax(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def undoIt(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MPxMultiPolyTweakUVCommand_newSyntax(*args: Any, **kwargs: Any) -> Any: ...
class MPxNode(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    def __disown__(self: Self) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    def _doNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _forceCache(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _setMPSafe(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeAffects(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    caching: property = ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def compute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def configCache(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectionBroken(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectionMade(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copyInternalData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dependsOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def existWithoutInConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def existWithoutOutConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    frozen: property = ...
    def getCacheSetup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFilesToArchive(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInternalValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInternalValueInContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasInvalidationRangeTransformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inheritAttributesFrom(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def internalArrayCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isAbstractClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    isHistoricallyInteresting: property = ...
    def isPassiveOutput(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingTopology(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAssembly: int = ...
    kBlendShape: int = ...
    kCameraSetNode: int = ...
    kClientDeviceNode: int = ...
    kConstraintNode: int = ...
    kDefaultScheduling: int = ...
    kDeformerNode: int = ...
    kDependNode: int = ...
    kEmitterNode: int = ...
    kEvaluatedDirectly: int = ...
    kEvaluatedIndirectly: int = ...
    kFieldNode: int = ...
    kFluidEmitterNode: int = ...
    kGeometryFilter: int = ...
    kGloballySerial: int = ...
    kGloballySerialize: int = ...
    kHardwareShader: int = ...
    kHwShaderNode: int = ...
    kIkSolverNode: int = ...
    kImagePlaneNode: int = ...
    kLast: int = ...
    kLeaveDirty: int = ...
    kLocatorNode: int = ...
    kManipContainer: int = ...
    kManipulatorNode: int = ...
    kMotionPathNode: int = ...
    kObjectSet: int = ...
    kParallel: int = ...
    kParticleAttributeMapperNode: int = ...
    kPostEvaluationTypeLast: int = ...
    kSchedulingTypeLast: int = ...
    kSerial: int = ...
    kSerialize: int = ...
    kSkinCluster: int = ...
    kSpringNode: int = ...
    kSurfaceShape: int = ...
    kThreadedDeviceNode: int = ...
    kTransformNode: int = ...
    kUntrusted: int = ...
    def legalConnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def legalDisconnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    message: property = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def passThroughToMany(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def passThroughToOne(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postConstructor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postEvaluation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def preEvaluation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def schedulingType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDependentsDirty(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExistWithoutInConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExistWithoutOutConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternalValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternalValueInContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shouldSave(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    state: property = ...
    def thisMObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transformInvalidationRange(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MPxNode_addAttribute(*args: Any, **kwargs: Any) -> Any: ...
def MPxNode_attributeAffects(*args: Any, **kwargs: Any) -> Any: ...
def MPxNode_className(*args: Any, **kwargs: Any) -> Any: ...
def MPxNode_inheritAttributesFrom(*args: Any, **kwargs: Any) -> Any: ...
class MPxObjectSet(MPxNode):
    DNSetMembers: property = ...
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    def __disown__(self: Self) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    def _doNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _forceCache(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _setMPSafe(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    annotation: property = ...
    def attributeAffects(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    caching: property = ...
    def canBeDeleted(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def compute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def configCache(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectionBroken(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectionMade(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copyInternalData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    dagSetMembers: property = ...
    def dependsOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    edgesOnlySet: property = ...
    editPointsOnlySet: property = ...
    def existWithoutInConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def existWithoutOutConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    facetsOnlySet: property = ...
    frozen: property = ...
    def getCacheSetup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFilesToArchive(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInternalValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInternalValueInContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    groupNodes: property = ...
    def hasInvalidationRangeTransformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inheritAttributesFrom(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def internalArrayCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isAbstractClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    isHistoricallyInteresting: property = ...
    isLayer: property = ...
    def isPassiveOutput(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingTopology(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAssembly: int = ...
    kBlendShape: int = ...
    kCameraSetNode: int = ...
    kClientDeviceNode: int = ...
    kConstraintNode: int = ...
    kDefaultScheduling: int = ...
    kDeformerNode: int = ...
    kDependNode: int = ...
    kEmitterNode: int = ...
    kEvaluatedDirectly: int = ...
    kEvaluatedIndirectly: int = ...
    kFieldNode: int = ...
    kFluidEmitterNode: int = ...
    kGeometryFilter: int = ...
    kGloballySerial: int = ...
    kGloballySerialize: int = ...
    kHardwareShader: int = ...
    kHwShaderNode: int = ...
    kIkSolverNode: int = ...
    kImagePlaneNode: int = ...
    kLast: int = ...
    kLeaveDirty: int = ...
    kLocatorNode: int = ...
    kManipContainer: int = ...
    kManipulatorNode: int = ...
    kMotionPathNode: int = ...
    kObjectSet: int = ...
    kParallel: int = ...
    kParticleAttributeMapperNode: int = ...
    kPostEvaluationTypeLast: int = ...
    kSchedulingTypeLast: int = ...
    kSerial: int = ...
    kSerialize: int = ...
    kSkinCluster: int = ...
    kSpringNode: int = ...
    kSurfaceShape: int = ...
    kThreadedDeviceNode: int = ...
    kTransformNode: int = ...
    kUntrusted: int = ...
    def legalConnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def legalDisconnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    memberWireframeColor: property = ...
    message: property = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    partition: property = ...
    def passThroughToMany(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def passThroughToOne(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postConstructor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postEvaluation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def preEvaluation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    renderableOnlySet: property = ...
    def schedulingType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDependentsDirty(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExistWithoutInConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExistWithoutOutConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternalValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternalValueInContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shouldSave(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    state: property = ...
    def thisMObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transformInvalidationRange(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    usedByNodes: property = ...
    verticesOnlySet: property = ...

def MPxObjectSet_className(*args: Any, **kwargs: Any) -> Any: ...
class MPxParticleAttributeMapperNode(MPxNode):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    def __disown__(self: Self) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    def _doNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _forceCache(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _setMPSafe(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeAffects(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    caching: property = ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def compute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    computeNode: property = ...
    computeNodeColor: property = ...
    computeNodeColorB: property = ...
    computeNodeColorG: property = ...
    computeNodeColorR: property = ...
    def configCache(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectionBroken(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectionMade(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copyInternalData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dependsOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def existWithoutInConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def existWithoutOutConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    frozen: property = ...
    def getCacheSetup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFilesToArchive(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInternalValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInternalValueInContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasInvalidationRangeTransformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inheritAttributesFrom(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def internalArrayCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isAbstractClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    isHistoricallyInteresting: property = ...
    def isPassiveOutput(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingTopology(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAssembly: int = ...
    kBlendShape: int = ...
    kCameraSetNode: int = ...
    kClientDeviceNode: int = ...
    kConstraintNode: int = ...
    kDefaultScheduling: int = ...
    kDeformerNode: int = ...
    kDependNode: int = ...
    kEmitterNode: int = ...
    kEvaluatedDirectly: int = ...
    kEvaluatedIndirectly: int = ...
    kFieldNode: int = ...
    kFluidEmitterNode: int = ...
    kGeometryFilter: int = ...
    kGloballySerial: int = ...
    kGloballySerialize: int = ...
    kHardwareShader: int = ...
    kHwShaderNode: int = ...
    kIkSolverNode: int = ...
    kImagePlaneNode: int = ...
    kLast: int = ...
    kLeaveDirty: int = ...
    kLocatorNode: int = ...
    kManipContainer: int = ...
    kManipulatorNode: int = ...
    kMotionPathNode: int = ...
    kObjectSet: int = ...
    kParallel: int = ...
    kParticleAttributeMapperNode: int = ...
    kPostEvaluationTypeLast: int = ...
    kSchedulingTypeLast: int = ...
    kSerial: int = ...
    kSerialize: int = ...
    kSkinCluster: int = ...
    kSpringNode: int = ...
    kSurfaceShape: int = ...
    kThreadedDeviceNode: int = ...
    kTransformNode: int = ...
    kUntrusted: int = ...
    def legalConnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def legalDisconnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    message: property = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    outColorPP: property = ...
    outMaxValue: property = ...
    outMinValue: property = ...
    outValuePP: property = ...
    def passThroughToMany(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def passThroughToOne(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postConstructor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postEvaluation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def preEvaluation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def schedulingType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDependentsDirty(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExistWithoutInConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExistWithoutOutConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternalValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternalValueInContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shouldSave(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    state: property = ...
    def thisMObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    time: property = ...
    def transformInvalidationRange(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    uCoordPP: property = ...
    vCoordPP: property = ...

def MPxParticleAttributeMapperNode_className(*args: Any, **kwargs: Any) -> Any: ...
class MPxPolyTrg(MPxNode):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    def __disown__(self: Self) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    def _doNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _forceCache(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _setMPSafe(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeAffects(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    caching: property = ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def compute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def configCache(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectionBroken(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectionMade(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copyInternalData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dependsOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def existWithoutInConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def existWithoutOutConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    frozen: property = ...
    def getCacheSetup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFilesToArchive(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInternalValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInternalValueInContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasInvalidationRangeTransformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inheritAttributesFrom(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def internalArrayCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isAbstractClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    isHistoricallyInteresting: property = ...
    def isPassiveOutput(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingTopology(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAssembly: int = ...
    kBlendShape: int = ...
    kCameraSetNode: int = ...
    kClientDeviceNode: int = ...
    kConstraintNode: int = ...
    kDefaultScheduling: int = ...
    kDeformerNode: int = ...
    kDependNode: int = ...
    kEmitterNode: int = ...
    kEvaluatedDirectly: int = ...
    kEvaluatedIndirectly: int = ...
    kFieldNode: int = ...
    kFluidEmitterNode: int = ...
    kGeometryFilter: int = ...
    kGloballySerial: int = ...
    kGloballySerialize: int = ...
    kHardwareShader: int = ...
    kHwShaderNode: int = ...
    kIkSolverNode: int = ...
    kImagePlaneNode: int = ...
    kLast: int = ...
    kLeaveDirty: int = ...
    kLocatorNode: int = ...
    kManipContainer: int = ...
    kManipulatorNode: int = ...
    kMotionPathNode: int = ...
    kObjectSet: int = ...
    kParallel: int = ...
    kParticleAttributeMapperNode: int = ...
    kPostEvaluationTypeLast: int = ...
    kSchedulingTypeLast: int = ...
    kSerial: int = ...
    kSerialize: int = ...
    kSkinCluster: int = ...
    kSpringNode: int = ...
    kSurfaceShape: int = ...
    kThreadedDeviceNode: int = ...
    kTransformNode: int = ...
    kUntrusted: int = ...
    def legalConnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def legalDisconnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    message: property = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def passThroughToMany(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def passThroughToOne(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postConstructor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postEvaluation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def preEvaluation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registerTrgFunction(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def schedulingType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDependentsDirty(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExistWithoutInConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExistWithoutOutConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternalValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternalValueInContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shouldSave(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    state: property = ...
    def thisMObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transformInvalidationRange(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def unregisterTrgFunction(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MPxPolyTweakUVCommand(MPxCommand):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    def __disown__(self: Self) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    def appendToResult(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clearResult(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def commandString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentDoubleResult(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentIntResult(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentResultType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentStringResult(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def displayError(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def displayInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def displayWarning(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doIt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCurrentResult(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getTweakedUVs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasSyntax(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isCurrentResultArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isHistoryOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isUndoable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kDouble: int = ...
    kLong: int = ...
    kNoArg: int = ...
    kString: int = ...
    def newSyntax(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parseSyntax(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def redoIt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCommandString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setHistoryOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setResult(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUndoable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def syntax(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def undoIt(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MPxPolyTweakUVCommand_newSyntax(*args: Any, **kwargs: Any) -> Any: ...
class MPxPolyTweakUVInteractiveCommand(MPxToolCommand):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    def __disown__(self: Self) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    def _doFinalize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def appendToResult(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cancel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clearResult(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def commandString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentDoubleResult(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentIntResult(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentResultType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentStringResult(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def displayError(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def displayInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def displayWarning(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doIt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def finalize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCurrentResult(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasSyntax(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isCurrentResultArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isHistoryOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isUndoable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kDouble: int = ...
    kLong: int = ...
    kNoArg: int = ...
    kString: int = ...
    def redoIt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCommandString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setHistoryOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setResult(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUVs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUndoable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def syntax(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def undoIt(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MPxPolyTweakUVInteractiveCommand_className(*args: Any, **kwargs: Any) -> Any: ...
class MPxRenderPassImpl(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    def __disown__(self: Self) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    def frameBufferSemantic(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDefaultType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getNumChannels(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isCompatible(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kBit: int = ...
    kColorSemantic: int = ...
    kDepthSemantic: int = ...
    kDirectionVectorSemantic: int = ...
    kFloat16: int = ...
    kFloat32: int = ...
    kFloat64: int = ...
    kInt16: int = ...
    kInt32: int = ...
    kInt64: int = ...
    kInt8: int = ...
    kInvalidSemantic: int = ...
    kLabelSemantic: int = ...
    kMaskSemantic: int = ...
    kOther: int = ...
    kOtherSemantic: int = ...
    kUInt16: int = ...
    kUInt32: int = ...
    kUInt64: int = ...
    kUInt8: int = ...
    kVectorSemantic: int = ...
    def perLightPassContributionSupported(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def typesSupported(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MPxRepresentation(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    def __disown__(self: Self) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    def _getAssembly(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def activate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canApplyEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inactivate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MPxSelectionContext(MPxContext):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    def __disown__(self: Self) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    def _beginMarquee(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _dragMarquee(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _ignoreEntry(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _isSelecting(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _lastDragPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _newToolCommand(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _releaseMarquee(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _setCursor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _setHelpString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _setTitleString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _startPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def abortAction(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addManipulator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def argTypeNumericalInput(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def completeAction(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteAction(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteManipulators(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doDrag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doEnterRegion(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doHold(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doPress(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doPtrMoved(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doRelease(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def feedbackNumericalInput(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def helpStateHasChanged(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def image(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kImage1: int = ...
    kImage2: int = ...
    kImage3: int = ...
    def newToolCommand(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def processNumericalInput(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAllowDoubleClickAction(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAllowPaintSelect(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAllowPreSelectHilight(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAllowSoftSelect(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAllowSymmetry(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setImage(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def stringClassName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def toolOffCleanup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def toolOnSetup(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MPxSelectionContext_className(*args: Any, **kwargs: Any) -> Any: ...
class MPxSkinCluster(MPxGeometryFilter):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    def __disown__(self: Self) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    def _doNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _forceCache(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _setMPSafe(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def accessoryAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def accessoryNodeSetup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeAffects(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    bindPreMatrix: property = ...
    caching: property = ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    componentTagExpression: property = ...
    def compute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def configCache(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectionBroken(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectionMade(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copyInternalData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deform(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dependsOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    envelope: property = ...
    def existWithoutInConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def existWithoutOutConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    frozen: property = ...
    def getCacheSetup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDeformationDetails(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFilesToArchive(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFixedSetupData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getGeometryIterator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInternalValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInternalValueInContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    groupId: property = ...
    def hasInvalidationRangeTransformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inheritAttributesFrom(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    input: property = ...
    inputGeom: property = ...
    def internalArrayCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isAbstractClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    isHistoricallyInteresting: property = ...
    def isPassiveOutput(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingTopology(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAssembly: int = ...
    kBlendShape: int = ...
    kCameraSetNode: int = ...
    kClientDeviceNode: int = ...
    kConstraintNode: int = ...
    kDefaultScheduling: int = ...
    kDeformerNode: int = ...
    kDeformsAll: int = ...
    kDeformsColors: int = ...
    kDeformsUVs: int = ...
    kDependNode: int = ...
    kEmitterNode: int = ...
    kEvaluatedDirectly: int = ...
    kEvaluatedIndirectly: int = ...
    kFieldNode: int = ...
    kFluidEmitterNode: int = ...
    kGeometryFilter: int = ...
    kGloballySerial: int = ...
    kGloballySerialize: int = ...
    kHardwareShader: int = ...
    kHwShaderNode: int = ...
    kIkSolverNode: int = ...
    kImagePlaneNode: int = ...
    kLast: int = ...
    kLeaveDirty: int = ...
    kLocatorNode: int = ...
    kManipContainer: int = ...
    kManipulatorNode: int = ...
    kMotionPathNode: int = ...
    kObjectSet: int = ...
    kParallel: int = ...
    kParticleAttributeMapperNode: int = ...
    kPostEvaluationTypeLast: int = ...
    kSchedulingTypeLast: int = ...
    kSerial: int = ...
    kSerialize: int = ...
    kSkinCluster: int = ...
    kSpringNode: int = ...
    kSurfaceShape: int = ...
    kThreadedDeviceNode: int = ...
    kTransformNode: int = ...
    kUntrusted: int = ...
    def legalConnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def legalDisconnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    matrix: property = ...
    message: property = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    outputGeom: property = ...
    def passThroughToMany(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def passThroughToOne(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postConstructor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postEvaluation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def preEvaluation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def schedulingType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDeformationDetails(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDependentsDirty(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExistWithoutInConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExistWithoutOutConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternalValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternalValueInContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setModifiedCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseExistingConnectionWhenSetEditing(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shouldSave(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    state: property = ...
    def thisMObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transformInvalidationRange(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    weightList: property = ...
    def weightValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    weights: property = ...

def MPxSkinCluster_className(*args: Any, **kwargs: Any) -> Any: ...
class MPxSpringNode(MPxNode):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    def __disown__(self: Self) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    def _doNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _forceCache(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _setMPSafe(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def applySpringLaw(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeAffects(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    caching: property = ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def compute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def configCache(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectionBroken(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectionMade(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copyInternalData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dependsOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def existWithoutInConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def existWithoutOutConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    frozen: property = ...
    def getCacheSetup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFilesToArchive(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInternalValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInternalValueInContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasInvalidationRangeTransformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inheritAttributesFrom(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def internalArrayCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isAbstractClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    isHistoricallyInteresting: property = ...
    def isPassiveOutput(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingTopology(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAssembly: int = ...
    kBlendShape: int = ...
    kCameraSetNode: int = ...
    kClientDeviceNode: int = ...
    kConstraintNode: int = ...
    kDefaultScheduling: int = ...
    kDeformerNode: int = ...
    kDependNode: int = ...
    kEmitterNode: int = ...
    kEvaluatedDirectly: int = ...
    kEvaluatedIndirectly: int = ...
    kFieldNode: int = ...
    kFluidEmitterNode: int = ...
    kGeometryFilter: int = ...
    kGloballySerial: int = ...
    kGloballySerialize: int = ...
    kHardwareShader: int = ...
    kHwShaderNode: int = ...
    kIkSolverNode: int = ...
    kImagePlaneNode: int = ...
    kLast: int = ...
    kLeaveDirty: int = ...
    kLocatorNode: int = ...
    kManipContainer: int = ...
    kManipulatorNode: int = ...
    kMotionPathNode: int = ...
    kObjectSet: int = ...
    kParallel: int = ...
    kParticleAttributeMapperNode: int = ...
    kPostEvaluationTypeLast: int = ...
    kSchedulingTypeLast: int = ...
    kSerial: int = ...
    kSerialize: int = ...
    kSkinCluster: int = ...
    kSpringNode: int = ...
    kSurfaceShape: int = ...
    kThreadedDeviceNode: int = ...
    kTransformNode: int = ...
    kUntrusted: int = ...
    def legalConnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def legalDisconnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    mDeltaTime: property = ...
    mEnd1Weight: property = ...
    mEnd2Weight: property = ...
    message: property = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def passThroughToMany(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def passThroughToOne(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postConstructor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postEvaluation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def preEvaluation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def schedulingType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDependentsDirty(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExistWithoutInConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExistWithoutOutConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternalValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternalValueInContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shouldSave(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    state: property = ...
    def thisMObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transformInvalidationRange(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MPxSpringNode_className(*args: Any, **kwargs: Any) -> Any: ...
class MPxSurfaceShape(MPxNode):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    def __disown__(self: Self) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    def _doNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _forceCache(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _setMPSafe(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def acceptsGeometryIterator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def activeComponents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeAffects(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def boundingBox(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    boundingBoxCenterX: property = ...
    boundingBoxCenterY: property = ...
    boundingBoxCenterZ: property = ...
    def cachedShapeAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    caching: property = ...
    def canMakeLive(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    center: property = ...
    def childChanged(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def closestPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def componentToPlugs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def compute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def configCache(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectionBroken(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectionMade(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def convertToTweakNodePlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copyInternalData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createFullRenderGroup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createFullVertexGroup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteComponents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dependsOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def evalNodeAffectsDrawDb(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def excludeAsPluginShape(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def existWithoutInConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def existWithoutOutConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    frozen: property = ...
    def geometryData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def geometryIteratorSetup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCacheSetup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getComponentSelectionMask(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFilesToArchive(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInternalValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInternalValueInContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getShapeSelectionMask(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getWorldMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasActiveComponents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasInvalidationRangeTransformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inheritAttributesFrom(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    instObjGroups: property = ...
    intermediateObject: property = ...
    def internalArrayCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    inverseMatrix: property = ...
    def isAbstractClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isBounded(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    isHistoricallyInteresting: property = ...
    def isPassiveOutput(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isRenderable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    isTemplated: property = ...
    def isTrackingTopology(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAssembly: int = ...
    kBlendShape: int = ...
    kBoundingBoxChanged: int = ...
    kCameraSetNode: int = ...
    kClientDeviceNode: int = ...
    kConstraintNode: int = ...
    kDefaultScheduling: int = ...
    kDeformerNode: int = ...
    kDependNode: int = ...
    kEmitterNode: int = ...
    kEvaluatedDirectly: int = ...
    kEvaluatedIndirectly: int = ...
    kFieldNode: int = ...
    kFluidEmitterNode: int = ...
    kGeometryFilter: int = ...
    kGloballySerial: int = ...
    kGloballySerialize: int = ...
    kHardwareShader: int = ...
    kHwShaderNode: int = ...
    kIkSolverNode: int = ...
    kImagePlaneNode: int = ...
    kLast: int = ...
    kLeaveDirty: int = ...
    kLocatorNode: int = ...
    kManipContainer: int = ...
    kManipulatorNode: int = ...
    kMatchInvalidAttribute: int = ...
    kMatchInvalidAttributeDim: int = ...
    kMatchInvalidAttributeIndex: int = ...
    kMatchInvalidAttributeRange: int = ...
    kMatchInvalidName: int = ...
    kMatchNone: int = ...
    kMatchOk: int = ...
    kMatchTooMany: int = ...
    kMotionPathNode: int = ...
    kNoPointCaching: int = ...
    kNormal: int = ...
    kObjectChanged: int = ...
    kObjectSet: int = ...
    kParallel: int = ...
    kParticleAttributeMapperNode: int = ...
    kPostEvaluationTypeLast: int = ...
    kRestorePoints: int = ...
    kSavePoints: int = ...
    kSchedulingTypeLast: int = ...
    kSerial: int = ...
    kSerialize: int = ...
    kSkinCluster: int = ...
    kSpringNode: int = ...
    kSurfaceShape: int = ...
    kThreadedDeviceNode: int = ...
    kTransformNode: int = ...
    kTransformOriginalPoints: int = ...
    kUTangent: int = ...
    kUVNTriad: int = ...
    kUntrusted: int = ...
    kUpdatePoints: int = ...
    kVTangent: int = ...
    def legalConnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def legalDisconnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def localShapeInAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def localShapeOutAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    mControlPoints: property = ...
    mControlValueX: property = ...
    mControlValueY: property = ...
    mControlValueZ: property = ...
    mHasHistoryOnCreate: property = ...
    def match(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def matchComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    matrix: property = ...
    message: property = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def newControlPointComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    nodeBoundingBox: property = ...
    nodeBoundingBoxMax: property = ...
    nodeBoundingBoxMaxX: property = ...
    nodeBoundingBoxMaxY: property = ...
    nodeBoundingBoxMaxZ: property = ...
    nodeBoundingBoxMin: property = ...
    nodeBoundingBoxMinX: property = ...
    nodeBoundingBoxMinY: property = ...
    nodeBoundingBoxMinZ: property = ...
    nodeBoundingBoxSize: property = ...
    nodeBoundingBoxSizeX: property = ...
    nodeBoundingBoxSizeY: property = ...
    nodeBoundingBoxSizeZ: property = ...
    objectColor: property = ...
    objectGroupColor: property = ...
    objectGroupId: property = ...
    objectGroups: property = ...
    objectGrpCompList: property = ...
    parentInverseMatrix: property = ...
    parentMatrix: property = ...
    def passThroughToMany(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def passThroughToOne(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pointAtParm(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postConstructor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postEvaluation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def preEvaluation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def renderGroupComponentType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def schedulingType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDependentsDirty(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExistWithoutInConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExistWithoutOutConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternalValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternalValueInContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRenderable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shouldSave(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    state: property = ...
    def thisMObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transformInvalidationRange(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def transformUsing(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def tweakUsing(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def undeleteComponents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    useObjectColor: property = ...
    def vertexOffsetDirection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    visibility: property = ...
    def weightedTransformUsing(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def weightedTweakUsing(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    worldInverseMatrix: property = ...
    worldMatrix: property = ...
    def worldShapeOutAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MPxSurfaceShapeUI(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    def __disown__(self: Self) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    def canDrawUV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def draw(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawUV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDrawData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDrawRequests(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kSelectMeshEdges: int = ...
    kSelectMeshFaces: int = ...
    kSelectMeshUVs: int = ...
    kSelectMeshVerts: int = ...
    def material(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def materials(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def select(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def selectUV(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def snap(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def surfaceShape(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def surfaceShapeUI(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MPxSurfaceShapeUI_className(*args: Any, **kwargs: Any) -> Any: ...
def MPxSurfaceShapeUI_surfaceShapeUI(*args: Any, **kwargs: Any) -> Any: ...
def MPxSurfaceShape_className(*args: Any, **kwargs: Any) -> Any: ...
class MPxTexContext(MPxContext):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    def __disown__(self: Self) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    def _beginMarquee(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _dragMarquee(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _ignoreEntry(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _newToolCommand(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _releaseMarquee(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _setCursor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _setHelpString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _setTitleString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def abortAction(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addManipulator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def argTypeNumericalInput(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def completeAction(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteAction(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteManipulators(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doDrag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doEnterRegion(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doHold(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doPress(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doPtrMoved(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doRelease(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def feedbackNumericalInput(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getMarqueeSelection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def helpStateHasChanged(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def image(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kImage1: int = ...
    kImage2: int = ...
    kImage3: int = ...
    def newToolCommand(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def portSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def portToView(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def processNumericalInput(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setImage(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def stringClassName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def toolOffCleanup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def toolOnSetup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def viewRect(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def viewToPort(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MPxTexContext_className(*args: Any, **kwargs: Any) -> Any: ...
def MPxTexContext_getMarqueeSelection(*args: Any, **kwargs: Any) -> Any: ...
class MPxToolCommand(MPxCommand):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    def __disown__(self: Self) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    def _doFinalize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def appendToResult(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cancel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clearResult(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def commandString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentDoubleResult(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentIntResult(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentResultType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentStringResult(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def displayError(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def displayInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def displayWarning(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def doIt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def finalize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCurrentResult(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasSyntax(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isCurrentResultArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isHistoryOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isUndoable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kDouble: int = ...
    kLong: int = ...
    kNoArg: int = ...
    kString: int = ...
    def redoIt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCommandString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setHistoryOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setResult(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUndoable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def syntax(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def undoIt(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MPxToolCommand_className(*args: Any, **kwargs: Any) -> Any: ...
class MPxTransform(MPxNode):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    def __disown__(self: Self) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    def _dirtyMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _dirtyRotateOrientation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _dirtyRotatePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _dirtyRotatePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _dirtyRotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _dirtyScale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _dirtyScalePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _dirtyScalePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _dirtyShear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _dirtyTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _doNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _forceCache(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def _setMPSafe(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def applyRotateOrientationLocks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def applyRotatePivotLocks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def applyRotatePivotLocksTranslate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def applyRotationLimits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def applyRotationLocks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def applyScaleLimits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def applyScaleLocks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def applyScaleLocksPivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def applyScaleLocksPivotTranslate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def applyShearLocks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def applyTranslationLimits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def applyTranslationLocks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeAffects(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    baseTransformationMatrix: property = ...
    def boundingBox(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    boundingBoxCenterX: property = ...
    boundingBoxCenterY: property = ...
    boundingBoxCenterZ: property = ...
    caching: property = ...
    center: property = ...
    def checkAndSetRotateOrientation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def checkAndSetRotatePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def checkAndSetRotatePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def checkAndSetRotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def checkAndSetScale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def checkAndSetScalePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def checkAndSetScalePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def checkAndSetShear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def checkAndSetTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clearLimits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def compute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def computeLocalTransformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def configCache(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectionBroken(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectionMade(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copyInternalData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createTransformationMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dependsOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    displayHandle: property = ...
    displayLocalAxis: property = ...
    displayRotatePivot: property = ...
    displayScalePivot: property = ...
    drawOverride: property = ...
    dynamics: property = ...
    def enableLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def existWithoutInConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def existWithoutOutConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    frozen: property = ...
    geometry: property = ...
    def getCacheSetup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getEulerRotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFilesToArchive(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInternalValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInternalValueInContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getMatrixInverse(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPreRotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getRotateOrientation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getRotatePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getRotatePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getRotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getRotationOrder(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getScale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getScalePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getScalePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getShear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    ghosting: property = ...
    def hasInvalidationRangeTransformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    identification: property = ...
    def inheritAttributesFrom(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    inheritsTransform: property = ...
    instObjGroups: property = ...
    intermediateObject: property = ...
    def internalArrayCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    inverseMatrix: property = ...
    def isAbstractClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isBounded(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    isHistoricallyInteresting: property = ...
    def isLimited(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNonAffineMatricesEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isPassiveOutput(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    isTemplated: property = ...
    def isTrackingTopology(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAssembly: int = ...
    kBlendShape: int = ...
    kCameraSetNode: int = ...
    kClientDeviceNode: int = ...
    kConstraintNode: int = ...
    kDefaultScheduling: int = ...
    kDeformerNode: int = ...
    kDependNode: int = ...
    kEmitterNode: int = ...
    kEvaluatedDirectly: int = ...
    kEvaluatedIndirectly: int = ...
    kFieldNode: int = ...
    kFluidEmitterNode: int = ...
    kGeometryFilter: int = ...
    kGloballySerial: int = ...
    kGloballySerialize: int = ...
    kHardwareShader: int = ...
    kHwShaderNode: int = ...
    kIkSolverNode: int = ...
    kImagePlaneNode: int = ...
    kLast: int = ...
    kLeaveDirty: int = ...
    kLocatorNode: int = ...
    kManipContainer: int = ...
    kManipulatorNode: int = ...
    kMotionPathNode: int = ...
    kObjectSet: int = ...
    kParallel: int = ...
    kParticleAttributeMapperNode: int = ...
    kPostEvaluationTypeLast: int = ...
    kSchedulingTypeLast: int = ...
    kSerial: int = ...
    kSerialize: int = ...
    kSkinCluster: int = ...
    kSpringNode: int = ...
    kSurfaceShape: int = ...
    kThreadedDeviceNode: int = ...
    kTransformNode: int = ...
    kUntrusted: int = ...
    layerOverrideColor: property = ...
    layerRenderable: property = ...
    def legalConnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def legalDisconnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def limitValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    lodVisibility: property = ...
    matrix: property = ...
    maxRotLimit: property = ...
    maxRotLimitEnable: property = ...
    maxRotXLimit: property = ...
    maxRotXLimitEnable: property = ...
    maxRotYLimit: property = ...
    maxRotYLimitEnable: property = ...
    maxRotZLimit: property = ...
    maxRotZLimitEnable: property = ...
    maxScaleLimit: property = ...
    maxScaleLimitEnable: property = ...
    maxScaleXLimit: property = ...
    maxScaleXLimitEnable: property = ...
    maxScaleYLimit: property = ...
    maxScaleYLimitEnable: property = ...
    maxScaleZLimit: property = ...
    maxScaleZLimitEnable: property = ...
    maxTransLimit: property = ...
    maxTransLimitEnable: property = ...
    maxTransXLimit: property = ...
    maxTransXLimitEnable: property = ...
    maxTransYLimit: property = ...
    maxTransYLimitEnable: property = ...
    maxTransZLimit: property = ...
    maxTransZLimitEnable: property = ...
    message: property = ...
    minRotLimit: property = ...
    minRotLimitEnable: property = ...
    minRotXLimit: property = ...
    minRotXLimitEnable: property = ...
    minRotYLimit: property = ...
    minRotYLimitEnable: property = ...
    minRotZLimit: property = ...
    minRotZLimitEnable: property = ...
    minScaleLimit: property = ...
    minScaleLimitEnable: property = ...
    minScaleXLimit: property = ...
    minScaleXLimitEnable: property = ...
    minScaleYLimit: property = ...
    minScaleYLimitEnable: property = ...
    minScaleZLimit: property = ...
    minScaleZLimitEnable: property = ...
    minTransLimit: property = ...
    minTransLimitEnable: property = ...
    minTransXLimit: property = ...
    minTransXLimitEnable: property = ...
    minTransYLimit: property = ...
    minTransYLimitEnable: property = ...
    minTransZLimit: property = ...
    minTransZLimitEnable: property = ...
    def mustCallValidateAndSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    nodeBoundingBox: property = ...
    nodeBoundingBoxMax: property = ...
    nodeBoundingBoxMaxX: property = ...
    nodeBoundingBoxMaxY: property = ...
    nodeBoundingBoxMaxZ: property = ...
    nodeBoundingBoxMin: property = ...
    nodeBoundingBoxMinX: property = ...
    nodeBoundingBoxMinY: property = ...
    nodeBoundingBoxMinZ: property = ...
    nodeBoundingBoxSize: property = ...
    nodeBoundingBoxSizeX: property = ...
    nodeBoundingBoxSizeY: property = ...
    nodeBoundingBoxSizeZ: property = ...
    objectColor: property = ...
    objectGroupColor: property = ...
    objectGroupId: property = ...
    objectGroups: property = ...
    objectGrpCompList: property = ...
    offsetParentMatrix: property = ...
    overrideColor: property = ...
    overrideDisplayType: property = ...
    overrideEnabled: property = ...
    overrideLevelOfDetail: property = ...
    overridePlayback: property = ...
    overrideShading: property = ...
    overrideTexturing: property = ...
    overrideVisibility: property = ...
    parentInverseMatrix: property = ...
    parentMatrix: property = ...
    def passThroughToMany(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def passThroughToOne(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postConstructor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postEvaluation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def preEvaluation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    renderInfo: property = ...
    renderLayerColor: property = ...
    renderLayerId: property = ...
    renderLayerInfo: property = ...
    renderLayerRenderable: property = ...
    def resetTransformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    rotate: property = ...
    rotateAxis: property = ...
    rotateAxisX: property = ...
    rotateAxisY: property = ...
    rotateAxisZ: property = ...
    def rotateBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    rotateOrder: property = ...
    rotatePivot: property = ...
    rotatePivotTranslate: property = ...
    rotatePivotTranslateX: property = ...
    rotatePivotTranslateY: property = ...
    rotatePivotTranslateZ: property = ...
    rotatePivotX: property = ...
    rotatePivotY: property = ...
    rotatePivotZ: property = ...
    rotateQuaternion: property = ...
    rotateQuaternionW: property = ...
    rotateQuaternionX: property = ...
    rotateQuaternionY: property = ...
    rotateQuaternionZ: property = ...
    def rotateTo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    rotateX: property = ...
    rotateY: property = ...
    rotateZ: property = ...
    rotationInterpolation: property = ...
    scale: property = ...
    def scaleBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    scalePivot: property = ...
    scalePivotTranslate: property = ...
    scalePivotTranslateX: property = ...
    scalePivotTranslateY: property = ...
    scalePivotTranslateZ: property = ...
    scalePivotX: property = ...
    scalePivotY: property = ...
    scalePivotZ: property = ...
    def scaleTo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    scaleX: property = ...
    scaleY: property = ...
    scaleZ: property = ...
    def schedulingType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    selectHandle: property = ...
    selectHandleX: property = ...
    selectHandleY: property = ...
    selectHandleZ: property = ...
    def setDependentsDirty(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExistWithoutInConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExistWithoutOutConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternalValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternalValueInContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setNonAffineMatricesEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotateOrientation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotatePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotatePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotationOrder(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScalePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScalePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    shear: property = ...
    def shearBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shearTo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    shearXY: property = ...
    shearXZ: property = ...
    shearYZ: property = ...
    def shouldSave(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    showManipDefault: property = ...
    specifiedManipLocation: property = ...
    state: property = ...
    def thisMObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    transMinusRotatePivot: property = ...
    transMinusRotatePivotX: property = ...
    transMinusRotatePivotY: property = ...
    transMinusRotatePivotZ: property = ...
    def transformInvalidationRange(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def transformationMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def transformationMatrixPtr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    translate: property = ...
    def translateBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def translateTo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    translateX: property = ...
    translateY: property = ...
    translateZ: property = ...
    def treatAsTransform(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def updateMatrixAttrs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    useObjectColor: property = ...
    def validateAndSetValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    visibility: property = ...
    worldInverseMatrix: property = ...
    worldMatrix: property = ...
    xformMatrix: property = ...

def MPxTransform_className(*args: Any, **kwargs: Any) -> Any: ...
def MPxTransform_isNonAffineMatricesEnabled(*args: Any, **kwargs: Any) -> Any: ...
def MPxTransform_mustCallValidateAndSet(*args: Any, **kwargs: Any) -> Any: ...
def MPxTransform_setNonAffineMatricesEnabled(*args: Any, **kwargs: Any) -> Any: ...
class MPxTransformationMatrix(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    def __disown__(self: Self) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    __hash__: NoneType = ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    def asInterpolationMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asMatrixInverse(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asRotateMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asRotateMatrixInverse(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asScaleMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asScaleMatrixInverse(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asTransformationMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    baseTransformationMatrixId: property = ...
    def convertEulerRotationOrder(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def convertTransformationRotationOrder(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copyValues(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def creator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def decomposeMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def eulerRotateOrientation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def eulerRotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    identity: MPxTransformationMatrix = ...
    def isEquivalent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def preRotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reverse(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateOrientation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotatePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotatePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateTo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotationOrder(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scaleBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scalePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scalePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scaleTo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotateOrientation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotatePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotatePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotationOrder(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScalePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScalePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shearBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shearTo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transformBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def translateBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def translateTo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def translation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def unSquishIt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def unSquishMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MPxTransformationMatrix_convertEulerRotationOrder(*args: Any, **kwargs: Any) -> Any: ...
def MPxTransformationMatrix_convertTransformationRotationOrder(*args: Any, **kwargs: Any) -> Any: ...
def MPxTransformationMatrix_creator(*args: Any, **kwargs: Any) -> Any: ...
class MPxUIControl(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    def __disown__(self: Self) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MPxUIControl_className(*args: Any, **kwargs: Any) -> Any: ...
class MPxUITableControl(MPxUIControl):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    def __disown__(self: Self) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    def addToSelection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allowEdit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allowSelection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cellString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clearSelection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def collapseOrExpandRow(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCellColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isSelected(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAllLabels: int = ...
    kColumnLabel: int = ...
    kNoLabel: int = ...
    kRowLabel: int = ...
    def labelString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numberOfColumns(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numberOfRows(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def redrawCells(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def redrawLabels(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeFromSelection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setNumberOfColumns(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setNumberOfRows(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSelection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def suspendUpdates(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MPxUITableControl_className(*args: Any, **kwargs: Any) -> Any: ...
class MaterialInputData(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    ambient: property = ...
    diffuse: property = ...
    emission: property = ...
    hasTransparency: property = ...
    shininess: property = ...
    specular: property = ...
    thisown: property = ...

PLUGIN_COMPANY: str
class _SwigNonDynamicMeta:
    @property
    def __abstractmethods__(*args: Any, **kwargs: Any) -> Any: ...
    @__abstractmethods__.setter
    def __abstractmethods__(*args: Any, **kwargs: Any) -> Any: ...
    class type:
        @property
        def __abstractmethods__(*args: Any, **kwargs: Any) -> Any: ...
        @__abstractmethods__.setter
        def __abstractmethods__(*args: Any, **kwargs: Any) -> Any: ...
        class object:
            def __delattr__(self: Self, name: Any) -> Any:
                """Implement delattr(self, name)."""
                ...
            def __dir__(self: Self) -> Any:
                """Default dir() implementation."""
                ...
            __doc__: str = ...
            def __eq__(self: Self, value: Any) -> Any:
                """Return self==value."""
                ...
            def __format__(self: Self, format_spec: Any) -> Any:
                """Default object formatter."""
                ...
            def __ge__(self: Self, value: Any) -> Any:
                """Return self>=value."""
                ...
            def __getattribute__(self: Self, name: Any) -> Any:
                """Return getattr(self, name)."""
                ...
            def __gt__(self: Self, value: Any) -> Any:
                """Return self>value."""
                ...
            def __hash__(self: Self) -> Any:
                """Return hash(self)."""
                ...
            def __init__(self: Self, args: Any, kwargs: Any) -> Any:
                """Initialize self.  See help(type(self)) for accurate signature."""
                ...
            def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
                """This method is called when a class is subclassed.

                The default implementation does nothing. It may be
                overridden to extend subclasses.
                """
                ...
            def __le__(self: Self, value: Any) -> Any:
                """Return self<=value."""
                ...
            def __lt__(self: Self, value: Any) -> Any:
                """Return self<value."""
                ...
            def __ne__(self: Self, value: Any) -> Any:
                """Return self!=value."""
                ...
            def __new__(self: Self, args: Any, kwargs: Any) -> Any:
                """Create and return a new object.  See help(type) for accurate signature."""
                ...
            def __reduce__(self: Self) -> Any:
                """Helper for pickle."""
                ...
            def __reduce_ex__(self: Self, protocol: Any) -> Any:
                """Helper for pickle."""
                ...
            def __repr__(self: Self) -> Any:
                """Return repr(self)."""
                ...
            def __setattr__(self: Self, name: Any, value: Any) -> Any:
                """Implement setattr(self, name, value)."""
                ...
            def __sizeof__(self: Self) -> Any:
                """Size of object in memory, in bytes."""
                ...
            def __str__(self: Self) -> Any:
                """Return str(self)."""
                ...
            def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
                """Abstract classes can override this to customize issubclass().

                This is invoked early on by abc.ABCMeta.__subclasscheck__().
                It should return True, False or NotImplemented.  If it returns
                NotImplemented, the normal algorithm is used.  Otherwise, it
                overrides the normal algorithm (and the outcome is cached).
                """
                ...

        __bases__: tuple = ...
        __basicsize__: int = ...
        def __call__(self: Self, args: Any, kwargs: Any) -> Any:
            """Call self as a function."""
            ...
        def __delattr__(self: Self, name: Any) -> Any:
            """Implement delattr(self, name)."""
            ...
        __dict__: mappingproxy = ...
        __dictoffset__: int = ...
        def __dir__(self: Self) -> Any:
            """Specialized __dir__ implementation for types."""
            ...
        __doc__: str = ...
        def __eq__(self: Self, value: Any) -> Any:
            """Return self==value."""
            ...
        __flags__: int = ...
        def __format__(self: Self, format_spec: Any) -> Any:
            """Default object formatter."""
            ...
        def __ge__(self: Self, value: Any) -> Any:
            """Return self>=value."""
            ...
        def __getattribute__(self: Self, name: Any) -> Any:
            """Return getattr(self, name)."""
            ...
        def __gt__(self: Self, value: Any) -> Any:
            """Return self>value."""
            ...
        def __hash__(self: Self) -> Any:
            """Return hash(self)."""
            ...
        def __init__(self: Self, args: Any, kwargs: Any) -> Any:
            """Initialize self.  See help(type(self)) for accurate signature."""
            ...
        def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
            """This method is called when a class is subclassed.

            The default implementation does nothing. It may be
            overridden to extend subclasses.
            """
            ...
        def __instancecheck__(self: Self, instance: Any) -> Any:
            """Check if an object is an instance."""
            ...
        __itemsize__: int = ...
        def __le__(self: Self, value: Any) -> Any:
            """Return self<=value."""
            ...
        def __lt__(self: Self, value: Any) -> Any:
            """Return self<value."""
            ...
        __module__: str = ...
        __mro__: tuple = ...
        __name__: str = ...
        def __ne__(self: Self, value: Any) -> Any:
            """Return self!=value."""
            ...
        def __new__(self: Self, args: Any, kwargs: Any) -> Any:
            """Create and return a new object.  See help(type) for accurate signature."""
            ...
        def __prepare__(self: Self, *args: Any, **kwargs: Any) -> Any:
            """__prepare__() -> dict
            used to create the namespace for the class statement
            """
            ...
        __qualname__: str = ...
        def __reduce__(self: Self) -> Any:
            """Helper for pickle."""
            ...
        def __reduce_ex__(self: Self, protocol: Any) -> Any:
            """Helper for pickle."""
            ...
        def __repr__(self: Self) -> Any:
            """Return repr(self)."""
            ...
        def __setattr__(self: Self, name: Any, value: Any) -> Any:
            """Implement setattr(self, name, value)."""
            ...
        def __sizeof__(self: Self) -> Any:
            """Return memory consumption of the type object."""
            ...
        def __str__(self: Self) -> Any:
            """Return str(self)."""
            ...
        def __subclasscheck__(self: Self, subclass: Any) -> Any:
            """Check if a class is a subclass."""
            ...
        def __subclasses__(self: Self) -> Any:
            """Return a list of immediate subclasses."""
            ...
        def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
            """Abstract classes can override this to customize issubclass().

            This is invoked early on by abc.ABCMeta.__subclasscheck__().
            It should return True, False or NotImplemented.  If it returns
            NotImplemented, the normal algorithm is used.  Otherwise, it
            overrides the normal algorithm (and the outcome is cached).
            """
            ...
        __text_signature__: NoneType = ...
        __weakrefoffset__: int = ...
        def mro(self: Self) -> Any:
            """Return a type's method resolution order."""
            ...

    __bases__: tuple = ...
    __basicsize__: int = ...
    def __call__(self: Self, args: Any, kwargs: Any) -> Any:
        """Call self as a function."""
        ...
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    __dictoffset__: int = ...
    def __dir__(self: Self) -> Any:
        """Specialized __dir__ implementation for types."""
        ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    __flags__: int = ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""
        ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __instancecheck__(self: Self, instance: Any) -> Any:
        """Check if an object is an instance."""
        ...
    __itemsize__: int = ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    __mro__: tuple = ...
    __name__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __prepare__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """__prepare__() -> dict
        used to create the namespace for the class statement
        """
        ...
    __qualname__: str = ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any:
        """Return repr(self)."""
        ...
    def __setattr__(self: Self, cls: Any, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any:
        """Return memory consumption of the type object."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasscheck__(self: Self, subclass: Any) -> Any:
        """Check if a class is a subclass."""
        ...
    def __subclasses__(self: Self) -> Any:
        """Return a list of immediate subclasses."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    __text_signature__: NoneType = ...
    __weakrefoffset__: int = ...
    def mro(self: Self) -> Any:
        """Return a type's method resolution order."""
        ...

__builtins__: dict
__cached__: str
__doc__: NoneType
__file__: str
__loader__: SourcelessFileLoader
__name__: str
__package__: str
__spec__: ModuleSpec
def _swig_add_metaclass(metaclass: Any) -> Any:
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    ...
def SWIG_PyInstanceMethod_New(*args: Any, **kwargs: Any) -> Any: ...
def SWIG_PyStaticMethod_New(*args: Any, **kwargs: Any) -> Any: ...
_swig_python_version_info: version_info
def _swig_repr(self: Self) -> Any: ...
def _swig_setattr_nondynamic_class_variable(set: Any) -> Any: ...
def _swig_setattr_nondynamic_instance_variable(set: Any) -> Any: ...
def asHashable(mpxObj: Any) -> Any: ...
def asMPxPtr(mpxObj: Any) -> Any: ...
class boolPtr(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def boolPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
class charPtr(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def charPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
cvar: swigvarlink
class doublePtr(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def doublePtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
class floatPtr(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def floatPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
def getLockCaptureCount(*args: Any, **kwargs: Any) -> Any: ...
class intPtr(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def intPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
class shortPtr(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def shortPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
class uCharPtr(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def uCharPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
class uIntPtr(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
        ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
        ...
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
        ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
        ...
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
        ...
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
        ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
        ...
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
        ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
        ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
        ...
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
        ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
        ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
        ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
        ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
        ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
        ...
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
        ...
    def __str__(self: Self) -> Any:
        """Return str(self)."""
        ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
        ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
        ...
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def uIntPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...