from __future__ import annotations

# fmt: off
from typing import *
from typing_extensions import Self
from maya.OpenMaya import *

if TYPE_CHECKING:
    from _typeshed import Incomplete


def MAnimControl_animationEndTime(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_animationStartTime(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_autoKeyMode(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_currentTime(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_globalInTangentType(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_globalOutTangentType(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_isPlaying(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_isScrubbing(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_isValid(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_maxTime(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_minTime(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_playBackward(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_playForward(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_playbackBy(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_playbackMode(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_playbackSpeed(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_setAnimationEndTime(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_setAnimationStartEndTime(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_setAnimationStartTime(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_setAutoKeyMode(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_setCurrentTime(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_setGlobalInTangentType(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_setGlobalOutTangentType(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_setMaxTime(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_setMinMaxTime(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_setMinTime(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_setPlaybackBy(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_setPlaybackMode(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_setPlaybackSpeed(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_setViewMode(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_setWeightedTangents(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_stop(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_viewMode(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_weightedTangents(*args: Any, **kwargs: Any) -> Any: ...
def MAnimCurveChange_className(*args: Any, **kwargs: Any) -> Any: ...
def MAnimCurveClipboardItemArray_className(*args: Any, **kwargs: Any) -> Any: ...
def MAnimCurveClipboardItem_className(*args: Any, **kwargs: Any) -> Any: ...
def MAnimCurveClipboard_theAPIClipboard(*args: Any, **kwargs: Any) -> Any: ...
def MAnimMessage_addAnimCurveEditedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MAnimMessage_addAnimKeyframeEditCheckCallback(*args: Any, **kwargs: Any) -> Any: ...
def MAnimMessage_addAnimKeyframeEditedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MAnimMessage_addDisableImplicitControlCallback(*args: Any, **kwargs: Any) -> Any: ...
def MAnimMessage_addNodeAnimKeyframeEditedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MAnimMessage_addPostBakeResultsCallback(*args: Any, **kwargs: Any) -> Any: ...
def MAnimMessage_addPreBakeResultsCallback(*args: Any, **kwargs: Any) -> Any: ...
def MAnimMessage_className(*args: Any, **kwargs: Any) -> Any: ...
def MAnimMessage_flushAnimKeyframeEditedCallbacks(*args: Any, **kwargs: Any) -> Any: ...
def MAnimUtil_className(*args: Any, **kwargs: Any) -> Any: ...
def MAnimUtil_findAnimatablePlugs(*args: Any, **kwargs: Any) -> Any: ...
def MAnimUtil_findAnimatedPlugs(*args: Any, **kwargs: Any) -> Any: ...
def MAnimUtil_findAnimation(*args: Any, **kwargs: Any) -> Any: ...
def MAnimUtil_findAnimationLayers(*args: Any, **kwargs: Any) -> Any: ...
def MAnimUtil_findConstraint(*args: Any, **kwargs: Any) -> Any: ...
def MAnimUtil_findSetDrivenKeyAnimation(*args: Any, **kwargs: Any) -> Any: ...
def MAnimUtil_isAnimated(*args: Any, **kwargs: Any) -> Any: ...
def MFnAnimCurve_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnBlendShapeDeformer_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnCharacter_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnClip_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnGeometryFilter_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnHikEffector_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnIkEffector_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnIkHandle_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnIkJoint_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnIkSolver_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnKeyframeDeltaAddRemove_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnKeyframeDeltaBlockAddRemove_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnKeyframeDeltaBreakdown_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnKeyframeDeltaInfType_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnKeyframeDeltaMove_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnKeyframeDeltaScale_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnKeyframeDeltaTangent_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnKeyframeDeltaWeighted_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnKeyframeDelta_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnLatticeDeformer_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnLattice_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnMotionPath_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnSkinCluster_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnWeightGeometryFilter_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnWireDeformer_className(*args: Any, **kwargs: Any) -> Any: ...
def MIkHandleGroup_className(*args: Any, **kwargs: Any) -> Any: ...
def MIkSystem_className(*args: Any, **kwargs: Any) -> Any: ...
def MIkSystem_findSolver(*args: Any, **kwargs: Any) -> Any: ...
def MIkSystem_getSolvers(*args: Any, **kwargs: Any) -> Any: ...
def MIkSystem_isGlobalSnap(*args: Any, **kwargs: Any) -> Any: ...
def MIkSystem_isGlobalSolve(*args: Any, **kwargs: Any) -> Any: ...
def MIkSystem_setGlobalSnap(*args: Any, **kwargs: Any) -> Any: ...
def MIkSystem_setGlobalSolve(*args: Any, **kwargs: Any) -> Any: ...
def MItKeyframe_className(*args: Any, **kwargs: Any) -> Any: ...
def boolPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
def charPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
def doublePtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
def floatPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
def intPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
def shortPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
def uCharPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
def uIntPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
class MAnimControl:
    def animationEndTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def animationStartTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def autoKeyMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def globalInTangentType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def globalOutTangentType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isPlaying(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isScrubbing(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kPlaybackLoop: int = ...
    kPlaybackOnce: int = ...
    kPlaybackOscillate: int = ...
    kPlaybackViewActive: int = ...
    kPlaybackViewAll: int = ...
    def maxTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def minTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def playBackward(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def playForward(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def playbackBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def playbackMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def playbackSpeed(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAnimationEndTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAnimationStartEndTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAnimationStartTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAutoKeyMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCurrentTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setGlobalInTangentType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setGlobalOutTangentType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMinMaxTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMinTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPlaybackBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPlaybackMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPlaybackSpeed(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setViewMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setWeightedTangents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def stop(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def viewMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def weightedTangents(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MAnimCurveChange:
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInteractive(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def redoIt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInteractive(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def undoIt(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MAnimCurveClipboard:
    def clear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clipboardItems(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def endTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def endUnitlessInput(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isEmpty(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def startTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def startUnitlessInput(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def theAPIClipboard(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MAnimCurveClipboardItem:
    def animCurve(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def animCurveType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fullAttributeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAddressingInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def leafAttributeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def nodeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAddressingInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAnimCurve(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setNameInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MAnimCurveClipboardItemArray:
    def append(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSizeIncrement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def sizeIncrement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MAnimMessage(MMessage):
    def addAnimCurveEditedCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAnimKeyframeEditCheckCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAnimKeyframeEditedCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addDisableImplicitControlCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addNodeAnimKeyframeEditedCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addPostBakeResultsCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addPreBakeResultsCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def flushAnimKeyframeEditedCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MAnimUtil:
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAnimatablePlugs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAnimatedPlugs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAnimationLayers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findConstraint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findSetDrivenKeyAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isAnimated(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnAnimCurve(MFnDependencyNode):
    def addKey(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addKeyframe(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addKeys(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addKeysWithTangents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def animCurveType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def evaluate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def find(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findClosest(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getTangent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inTangentType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def insertKey(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isBreakdown(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isStatic(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTimeInput(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isUnitlessInput(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isWeighted(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kTangentAuto: int = ...
    kTangentAutoCustom: int = ...
    kTangentAutoEase: int = ...
    kTangentAutoMix: int = ...
    kTangentCustomEnd: int = ...
    kTangentCustomStart: int = ...
    kTangentShared1: int = ...
    kTangentShared2: int = ...
    kTangentShared3: int = ...
    kTangentShared4: int = ...
    kTangentShared5: int = ...
    kTangentShared6: int = ...
    kTangentShared7: int = ...
    kTangentShared8: int = ...
    kTangentStepNext: int = ...
    kTangentTypeCount: int = ...
    def numKeyframes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numKeys(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def outTangentType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postInfinityType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def preInfinityType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAngle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInTangentType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIsBreakdown(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIsWeighted(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setOutTangentType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPostInfinityType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPreInfinityType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTangent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTangentTypes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTangentsLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUnitlessInput(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setWeight(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setWeightsLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def tangentsLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def time(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def timedAnimCurveTypeForPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def unitlessAnimCurveTypeForPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def unitlessInput(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def weightsLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFnBlendShapeDeformer(MFnDependencyNode):
    def addBaseObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addTarget(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def envelope(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getBaseObjects(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getTargets(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def historyLocation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numWeights(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def origin(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeTarget(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setEnvelope(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setOrigin(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setWeight(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def targetItemIndexList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def weight(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def weightIndexList(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFnCharacter(MFnSet):
    def addCurveToClip(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attachInstanceToCharacter(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attachSourceToCharacter(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def blendExists(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createBlend(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getBlend(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getBlendClips(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getBlendCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCharacterThatOwnsPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getClipScheduler(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getMemberPlugs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getScheduledClip(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getScheduledClipCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getSourceClip(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getSourceClipCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getSubCharacters(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeBlend(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnClip(MFnDependencyNode):
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createInstancedClip(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createSourceClip(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAbsolute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAbsoluteChannelSettings(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCycle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getMemberAnimCurves(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPostCycle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPreCycle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getScale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getSourceDuration(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getSourceStart(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getStartFrame(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getTrack(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getWeight(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstancedClip(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isPose(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAbsolute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAbsoluteChannelSettings(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCycle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPoseClip(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPostCycle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPreCycle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSourceData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setStartFrame(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTrack(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setWeight(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def sourceClip(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnGeometryFilter(MFnDependencyNode):
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deformerSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def envelope(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getComponentAtIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInputGeometry(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getOutputGeometry(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPathAtIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def groupIdAtIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def indexForGroupId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def indexForOutputConnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def indexForOutputShape(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inputShapeAtIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numOutputConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def outputShapeAtIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setEnvelope(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnHikEffector(MFnTransform):
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAuxiliaryEffectors(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getEffColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPivotOffset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setEffColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPivotOffset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnIkEffector(MFnTransform):
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnIkHandle(MFnTransform):
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getEffector(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getStartJoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def poWeight(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def priority(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setEffector(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPOWeight(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPriority(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSolver(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setStartJoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setStartJointAndEffector(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setStickiness(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setWeight(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def solver(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def stickiness(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def weight(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFnIkJoint(MFnTransform):
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDegreesOfFreedom(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getOrientation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPreferedAngle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPreferredAngle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getScaleOrientation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getSegmentScale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getStiffness(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hikJointName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def maxRotateDampXRange(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def maxRotateDampXStrength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def maxRotateDampYRange(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def maxRotateDampYStrength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def maxRotateDampZRange(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def maxRotateDampZStrength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def minRotateDampXRange(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def minRotateDampXStrength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def minRotateDampYRange(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def minRotateDampYStrength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def minRotateDampZRange(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def minRotateDampZStrength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDegreesOfFreedom(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxRotateDampXRange(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxRotateDampXStrength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxRotateDampYRange(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxRotateDampYStrength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxRotateDampZRange(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxRotateDampZStrength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMinRotateDampXRange(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMinRotateDampXStrength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMinRotateDampYRange(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMinRotateDampYStrength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMinRotateDampZRange(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMinRotateDampZStrength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setOrientation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPreferedAngle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPreferredAngle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScaleOrientation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSegmentScale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setStiffness(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnIkSolver(MFnDependencyNode):
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def maxIterations(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxIterations(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTolerance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def tolerance(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFnKeyframeDelta(MFnBase):
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def keyIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def paramCurve(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnKeyframeDeltaAddRemove(MFnKeyframeDelta):
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deltaType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAdded: int = ...
    kRemoved: int = ...
    kReplaced: int = ...
    def replacedValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def time(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFnKeyframeDeltaBlockAddRemove(MFnKeyframeDelta):
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deltaType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def endTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getTimes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getValues(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAdded: int = ...
    kRemoved: int = ...
    def numKeys(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def startTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnKeyframeDeltaBreakdown(MFnKeyframeDelta):
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isBreakdown(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def wasBreakdown(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFnKeyframeDeltaInfType(MFnKeyframeDelta):
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentInfinityType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isPreInfinity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def previousInfinityType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnKeyframeDeltaMove(MFnKeyframeDelta):
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def previousIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def previousTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def previousValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnKeyframeDeltaScale(MFnKeyframeDelta):
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentEndTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentStartTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def endTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pivotTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def startTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnKeyframeDeltaTangent(MFnKeyframeDelta):
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentTangentType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCurrentPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPreviousPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInTangent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def previousTangentType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnKeyframeDeltaWeighted(MFnKeyframeDelta):
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def wasWeighted(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFnLattice(MFnDagNode):
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDivisions(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def point(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDivisions(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnLatticeDeformer(MFnDependencyNode):
    def addGeometry(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def baseLattice(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deformLattice(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedGeometry(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDivisions(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeGeometry(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def resetLattice(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDivisions(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnMotionPath(MFnDependencyNode):
    def addAnimatedObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def bank(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def bankScale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def bankThreshold(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def follow(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def followAxis(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAnimatedObjects(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getOrientationMarker(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPositionMarker(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inverseNormal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numOrientationMarkers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numPositionMarkers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pathObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setBank(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setBankScale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setBankThreshold(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFollow(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFollowAxis(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInverseNormal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPathObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUEnd(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUStart(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUTimeEnd(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUTimeStart(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUpAxis(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseNormal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def uEnd(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uStart(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uTimeEnd(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uTimeStart(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def upAxis(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def useNormal(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFnSkinCluster(MFnGeometryFilter):
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getBlendWeights(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPointsAffectedByInfluence(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getWeights(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def indexForInfluenceObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def influenceObjects(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setBlendWeights(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setWeights(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnWeightGeometryFilter(MFnGeometryFilter):
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getWeightPlugStrings(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getWeights(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setWeight(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def weightPlugStrings(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFnWireDeformer(MFnDependencyNode):
    def addGeometry(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addWire(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def crossingEffect(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def envelope(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedGeometry(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDropoffLocator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def holdingShape(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def localIntensity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numDropoffLocators(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numWires(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeGeometry(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCrossingEffect(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDropoffLocator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setEnvelope(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setHoldingShape(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLocalIntensity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setWireDropOffDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setWireScale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def wire(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def wireDropOffDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def wireScale(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MIkHandleGroup:
    def checkEffectorAtGoal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dofCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def handle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def handleCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def priority(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPriority(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSolverID(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def solve(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def solverID(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def solverPriority(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MIkSystem:
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findSolver(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getSolvers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isGlobalSnap(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isGlobalSolve(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setGlobalSnap(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setGlobalSolve(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MItKeyframe:
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getTangentIn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getTangentOut(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inTangentType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDone(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kTangentAuto: int = ...
    kTangentAutoCustom: int = ...
    kTangentAutoEase: int = ...
    kTangentAutoMix: int = ...
    kTangentClamped: int = ...
    kTangentFast: int = ...
    kTangentFixed: int = ...
    kTangentFlat: int = ...
    kTangentGlobal: int = ...
    kTangentLinear: int = ...
    kTangentPlateau: int = ...
    kTangentSlow: int = ...
    kTangentSmooth: int = ...
    kTangentStep: int = ...
    kTangentStepNext: int = ...
    def next(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def outTangentType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInTangentType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setOutTangentType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTangentsLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def tangentsLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def time(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class boolPtr:
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class charPtr:
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class doublePtr:
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class floatPtr:
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class intPtr:
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class shortPtr:
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class uCharPtr:
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class uIntPtr:
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...
