from typing import *
from typing_extensions import Self
from _typeshed import Incomplete

MAYA_API_VERSION: int
MAYA_APP_VERSION: int
MAYA_CUSTOM_VERSION: int
MAYA_CUSTOM_VERSION_CLIENT: str
MAYA_CUSTOM_VERSION_MAJOR: int
MAYA_CUSTOM_VERSION_MINOR: int

def MAddRemoveAttrEdit_className(*args: Any, **kwargs: Any) -> Any: ...
def MAngle_className(*args: Any, **kwargs: Any) -> Any: ...
def MAngle_internalToUI(*args: Any, **kwargs: Any) -> Any: ...
def MAngle_internalUnit(*args: Any, **kwargs: Any) -> Any: ...
def MAngle_setInternalUnit(*args: Any, **kwargs: Any) -> Any: ...
def MAngle_setUIUnit(*args: Any, **kwargs: Any) -> Any: ...
def MAngle_uiToInternal(*args: Any, **kwargs: Any) -> Any: ...
def MAngle_uiUnit(*args: Any, **kwargs: Any) -> Any: ...
def MArgDatabase_className(*args: Any, **kwargs: Any) -> Any: ...
def MArgList_className(*args: Any, **kwargs: Any) -> Any: ...
def MArgParser_className(*args: Any, **kwargs: Any) -> Any: ...
def MArrayDataBuilder_className(*args: Any, **kwargs: Any) -> Any: ...
def MArrayDataHandle_className(*args: Any, **kwargs: Any) -> Any: ...
def MAttributeIndex_className(*args: Any, **kwargs: Any) -> Any: ...
def MAttributePatternArray_className(*args: Any, **kwargs: Any) -> Any: ...
def MAttributePattern_attrPattern(*args: Any, **kwargs: Any) -> Any: ...
def MAttributePattern_attrPatternCount(*args: Any, **kwargs: Any) -> Any: ...
def MAttributePattern_className(*args: Any, **kwargs: Any) -> Any: ...
def MAttributePattern_findPattern(*args: Any, **kwargs: Any) -> Any: ...
def MAttributeSpecArray_className(*args: Any, **kwargs: Any) -> Any: ...
def MAttributeSpec_className(*args: Any, **kwargs: Any) -> Any: ...
def MCacheConfigRuleRegistry_className(*args: Any, **kwargs: Any) -> Any: ...
def MCacheConfigRuleRegistry_registerFilter(*args: Any, **kwargs: Any) -> Any: ...
def MCacheConfigRuleRegistry_registeringCallableScript(*args: Any, **kwargs: Any) -> Any: ...
def MCacheConfigRuleRegistry_setRegisteringCallableScript(*args: Any, **kwargs: Any) -> Any: ...
def MCacheConfigRuleRegistry_unregisterFilter(*args: Any, **kwargs: Any) -> Any: ...
def MCacheFormatDescription_className(*args: Any, **kwargs: Any) -> Any: ...
def MCallbackIdArray_className(*args: Any, **kwargs: Any) -> Any: ...
def MCameraMessage_addBeginManipulationCallback(*args: Any, **kwargs: Any) -> Any: ...
def MCameraMessage_addEndManipulationCallback(*args: Any, **kwargs: Any) -> Any: ...
def MCameraMessage_className(*args: Any, **kwargs: Any) -> Any: ...
def MCameraSetMessage_addCameraChangedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MCameraSetMessage_addCameraLayerCallback(*args: Any, **kwargs: Any) -> Any: ...
def MCameraSetMessage_className(*args: Any, **kwargs: Any) -> Any: ...
def MColorArray_className(*args: Any, **kwargs: Any) -> Any: ...
def MCommandMessage_addCommandCallback(*args: Any, **kwargs: Any) -> Any: ...
def MCommandMessage_addCommandOutputCallback(*args: Any, **kwargs: Any) -> Any: ...
def MCommandMessage_addCommandOutputFilterCallback(*args: Any, **kwargs: Any) -> Any: ...
def MCommandMessage_addProcCallback(*args: Any, **kwargs: Any) -> Any: ...
def MCommandMessage_className(*args: Any, **kwargs: Any) -> Any: ...
def MCommandResult_className(*args: Any, **kwargs: Any) -> Any: ...
def MComputation_className(*args: Any, **kwargs: Any) -> Any: ...
def MConditionMessage_addConditionCallback(*args: Any, **kwargs: Any) -> Any: ...
def MConditionMessage_className(*args: Any, **kwargs: Any) -> Any: ...
def MConditionMessage_getConditionNames(*args: Any, **kwargs: Any) -> Any: ...
def MConditionMessage_getConditionState(*args: Any, **kwargs: Any) -> Any: ...
def MConnectDisconnectAttrEdit_className(*args: Any, **kwargs: Any) -> Any: ...
def MContainerMessage_addBoundAttrCallback(*args: Any, **kwargs: Any) -> Any: ...
def MContainerMessage_addPublishAttrCallback(*args: Any, **kwargs: Any) -> Any: ...
def MContainerMessage_className(*args: Any, **kwargs: Any) -> Any: ...
def MCurveAttribute_className(*args: Any, **kwargs: Any) -> Any: ...
def MCurveAttribute_createCurve(*args: Any, **kwargs: Any) -> Any: ...
def MCurveAttribute_createCurveAttr(*args: Any, **kwargs: Any) -> Any: ...
def MDGContext_className(*args: Any, **kwargs: Any) -> Any: ...
def MDGContext_current(*args: Any, **kwargs: Any) -> Any: ...
def MDGMessage_addConnectionCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDGMessage_addDelayedTimeChangeCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDGMessage_addDelayedTimeChangeRunupCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDGMessage_addForceUpdateCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDGMessage_addNodeAddedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDGMessage_addNodeChangeUuidCheckCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDGMessage_addNodeRemovedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDGMessage_addPreConnectionCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDGMessage_addTimeChangeCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDGModifier_className(*args: Any, **kwargs: Any) -> Any: ...
def MDagMessage_addAllDagChangesCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDagMessage_addAllDagChangesDagPathCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDagMessage_addChildAddedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDagMessage_addChildAddedDagPathCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDagMessage_addChildRemovedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDagMessage_addChildRemovedDagPathCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDagMessage_addChildReorderedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDagMessage_addChildReorderedDagPathCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDagMessage_addDagCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDagMessage_addDagDagPathCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDagMessage_addInstanceAddedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDagMessage_addInstanceAddedDagPathCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDagMessage_addInstanceRemovedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDagMessage_addInstanceRemovedDagPathCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDagMessage_addMatrixModifiedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDagMessage_addParentAddedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDagMessage_addParentAddedDagPathCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDagMessage_addParentRemovedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDagMessage_addParentRemovedDagPathCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDagMessage_addWorldMatrixModifiedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MDagMessage_className(*args: Any, **kwargs: Any) -> Any: ...
def MDagModifier_className(*args: Any, **kwargs: Any) -> Any: ...
def MDagPathArray_className(*args: Any, **kwargs: Any) -> Any: ...
def MDagPath_className(*args: Any, **kwargs: Any) -> Any: ...
def MDagPath_getAPathTo(*args: Any, **kwargs: Any) -> Any: ...
def MDagPath_getAllPathsTo(*args: Any, **kwargs: Any) -> Any: ...
def MDagPath_matchTransform(*args: Any, **kwargs: Any) -> Any: ...
def MDataBlock_className(*args: Any, **kwargs: Any) -> Any: ...
def MDataHandle_className(*args: Any, **kwargs: Any) -> Any: ...
def MDistance_className(*args: Any, **kwargs: Any) -> Any: ...
def MDistance_internalToUI(*args: Any, **kwargs: Any) -> Any: ...
def MDistance_internalUnit(*args: Any, **kwargs: Any) -> Any: ...
def MDistance_setInternalUnit(*args: Any, **kwargs: Any) -> Any: ...
def MDistance_setUIUnit(*args: Any, **kwargs: Any) -> Any: ...
def MDistance_uiToInternal(*args: Any, **kwargs: Any) -> Any: ...
def MDistance_uiUnit(*args: Any, **kwargs: Any) -> Any: ...
def MDoubleArray_className(*args: Any, **kwargs: Any) -> Any: ...
def MEdit_className(*args: Any, **kwargs: Any) -> Any: ...
def MEulerRotation_decompose(*args: Any, **kwargs: Any) -> Any: ...
def MEvaluationManager_className(*args: Any, **kwargs: Any) -> Any: ...
def MEvaluationManager_evaluationInExecution(*args: Any, **kwargs: Any) -> Any: ...
def MEvaluationManager_evaluationManagerActive(*args: Any, **kwargs: Any) -> Any: ...
def MEvaluationManager_graphConstructionActive(*args: Any, **kwargs: Any) -> Any: ...
def MEvaluationNodeIterator_className(*args: Any, **kwargs: Any) -> Any: ...
def MEvaluationNode_className(*args: Any, **kwargs: Any) -> Any: ...
def MEventMessage_addEventCallback(*args: Any, **kwargs: Any) -> Any: ...
def MEventMessage_className(*args: Any, **kwargs: Any) -> Any: ...
def MEventMessage_getEventNames(*args: Any, **kwargs: Any) -> Any: ...
def MFcurveEdit_className(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_beforeExportFilename(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_beforeExportUserFileTranslator(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_beforeImportFilename(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_beforeImportUserFileTranslator(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_beforeOpenFilename(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_beforeOpenUserFileTranslator(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_beforeReferenceFilename(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_beforeReferenceUserFileTranslator(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_beforeSaveFilename(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_beforeSaveUserFileTranslator(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_className(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_cleanReference(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_currentFile(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_currentlyReadingFileVersion(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_exportAll(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_exportAnim(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_exportAnimFromReference(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_exportAsReference(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_exportSelected(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_exportSelectedAnim(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_exportSelectedAnimFromReference(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_exportType(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_fileCurrentlyLoading(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_fileType(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_getErrorStatus(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_getFileTypes(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_getFiles(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_getLastTempFile(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_getReferenceConnectionsBroken(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_getReferenceConnectionsMade(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_getReferenceFileByNode(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_getReferenceNodes(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_getReferences(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_importFile(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_isImportingFile(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_isNewingFile(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_isOpeningFile(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_isReadingFile(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_isReferencingFile(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_isSavingReference(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_isWritingFile(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_latestMayaFileVersion(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_loadReference(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_loadReferenceByNode(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_mustRenameToSave(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_mustRenameToSaveMsg(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_newFile(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_open(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_reference(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_removeReference(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_resetError(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_save(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_saveAs(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_saveReference(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_setCurrentFile(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_setError(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_setMustRenameToSave(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_setMustRenameToSaveMsg(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_unloadReference(*args: Any, **kwargs: Any) -> Any: ...
def MFileIO_unloadReferenceByNode(*args: Any, **kwargs: Any) -> Any: ...
def MFileObject_getResolvedFullName(*args: Any, **kwargs: Any) -> Any: ...
def MFileObject_isAbsolutePath(*args: Any, **kwargs: Any) -> Any: ...
def MFloatArray_className(*args: Any, **kwargs: Any) -> Any: ...
def MFloatMatrix_className(*args: Any, **kwargs: Any) -> Any: ...

MFloatMatrix_kTol: float

def MFloatPointArray_className(*args: Any, **kwargs: Any) -> Any: ...
def MFloatPoint_className(*args: Any, **kwargs: Any) -> Any: ...

MFloatPoint_kTol: float

def MFloatVectorArray_className(*args: Any, **kwargs: Any) -> Any: ...

MFloatVector_kTol: float

def MFnAmbientLight_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnAnisotropyShader_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnAreaLight_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnArrayAttrsData_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnAssembly_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnAssembly_getTopLevelAssemblies(*args: Any, **kwargs: Any) -> Any: ...
def MFnAttribute_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnBase_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnBase_isValid(*args: Any, **kwargs: Any) -> Any: ...
def MFnBase_typeString(*args: Any, **kwargs: Any) -> Any: ...
def MFnBlinnShader_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnCameraSet_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnCamera_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnComponentListData_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnComponent_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnCompoundAttribute_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnContainerNode_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnContainerNode_getCurrentAsMObject(*args: Any, **kwargs: Any) -> Any: ...
def MFnDagNode_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnData_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnDependencyNode_allocateFlag(*args: Any, **kwargs: Any) -> Any: ...
def MFnDependencyNode_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnDependencyNode_classification(*args: Any, **kwargs: Any) -> Any: ...
def MFnDependencyNode_deallocateAllFlags(*args: Any, **kwargs: Any) -> Any: ...
def MFnDependencyNode_deallocateFlag(*args: Any, **kwargs: Any) -> Any: ...
def MFnDependencyNode_enableDGTiming(*args: Any, **kwargs: Any) -> Any: ...
def MFnDirectionalLight_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnDoubleArrayData_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnDoubleIndexedComponent_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnEnumAttribute_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnExpression_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnFloatArrayData_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnGenericAttribute_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnGeometryData_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnIntArrayData_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnLambertShader_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnLatticeData_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnLayeredShader_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnLightDataAttribute_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnLight_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnMatrixArrayData_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnMatrixAttribute_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnMatrixData_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnMeshData_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnMesh_autoUniformGridParams(*args: Any, **kwargs: Any) -> Any: ...
def MFnMesh_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnMesh_clearGlobalIntersectionAcceleratorInfo(*args: Any, **kwargs: Any) -> Any: ...
def MFnMesh_componentTypeFromName(*args: Any, **kwargs: Any) -> Any: ...
def MFnMesh_componentTypeName(*args: Any, **kwargs: Any) -> Any: ...
def MFnMesh_globalIntersectionAcceleratorsInfo(*args: Any, **kwargs: Any) -> Any: ...
def MFnMesh_polyTriangulate(*args: Any, **kwargs: Any) -> Any: ...
def MFnMesh_uniformGridParams(*args: Any, **kwargs: Any) -> Any: ...
def MFnMessageAttribute_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnNonAmbientLight_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnNonExtendedLight_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnNumericAttribute_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnNumericData_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnNurbsCurveData_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnNurbsCurve_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnNurbsSurfaceData_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnNurbsSurface_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnPartition_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnPhongEShader_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnPhongShader_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnPluginData_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnPointArrayData_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnPointLight_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnReference_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnReference_ignoreReferenceEdits(*args: Any, **kwargs: Any) -> Any: ...
def MFnReference_setIgnoreReferenceEdits(*args: Any, **kwargs: Any) -> Any: ...
def MFnReflectShader_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnSet_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnSingleIndexedComponent_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnSphereData_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnSpotLight_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnStandardSurfaceShader_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnStringArrayData_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnStringData_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnSubdData_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnSubdNames_base(*args: Any, **kwargs: Any) -> Any: ...
def MFnSubdNames_baseFaceId(*args: Any, **kwargs: Any) -> Any: ...
def MFnSubdNames_baseFaceIdFromIndex(*args: Any, **kwargs: Any) -> Any: ...
def MFnSubdNames_baseFaceIdFromLong(*args: Any, **kwargs: Any) -> Any: ...
def MFnSubdNames_baseFaceIndex(*args: Any, **kwargs: Any) -> Any: ...
def MFnSubdNames_baseFaceIndexFromId(*args: Any, **kwargs: Any) -> Any: ...
def MFnSubdNames_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnSubdNames_corner(*args: Any, **kwargs: Any) -> Any: ...
def MFnSubdNames_first(*args: Any, **kwargs: Any) -> Any: ...
def MFnSubdNames_fromMUint64(*args: Any, **kwargs: Any) -> Any: ...
def MFnSubdNames_fromSelectionIndices(*args: Any, **kwargs: Any) -> Any: ...
def MFnSubdNames_level(*args: Any, **kwargs: Any) -> Any: ...
def MFnSubdNames_levelOneFaceAsLong(*args: Any, **kwargs: Any) -> Any: ...
def MFnSubdNames_levelOneFaceId(*args: Any, **kwargs: Any) -> Any: ...
def MFnSubdNames_levelOneFaceIdFromIndex(*args: Any, **kwargs: Any) -> Any: ...
def MFnSubdNames_levelOneFaceIdFromLong(*args: Any, **kwargs: Any) -> Any: ...
def MFnSubdNames_levelOneFaceIndexFromId(*args: Any, **kwargs: Any) -> Any: ...
def MFnSubdNames_nonBaseFaceEdges(*args: Any, **kwargs: Any) -> Any: ...
def MFnSubdNames_nonBaseFaceVertices(*args: Any, **kwargs: Any) -> Any: ...
def MFnSubdNames_parentFaceId(*args: Any, **kwargs: Any) -> Any: ...
def MFnSubdNames_path(*args: Any, **kwargs: Any) -> Any: ...
def MFnSubdNames_toMUint64(*args: Any, **kwargs: Any) -> Any: ...
def MFnSubdNames_toSelectionIndices(*args: Any, **kwargs: Any) -> Any: ...
def MFnSubd_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnTransform_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnTripleIndexedComponent_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnTypedAttribute_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnUInt64ArrayData_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnUint64SingleIndexedComponent_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnUnitAttribute_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnVectorArrayData_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnVolumeLight_className(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_addToModel(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_addToModelAt(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_animSelectionMask(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_apiVersion(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_className(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_clearSelectionList(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_closeErrorLog(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_componentSelectionMask(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_currentToolContext(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_customVersion(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_customVersionClient(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_customVersionMajor(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_customVersionMinor(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_customVersionString(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_defaultErrorLogPathName(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_deleteNode(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_disableStow(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_displayError(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_displayInfo(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_displayWarning(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_doErrorLogEntry(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_errorLogPathName(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_errorLoggingIsOn(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_executeCommand(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_executeCommandOnIdle(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_executeCommandStringResult(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_executePythonCommand(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_executePythonCommandOnIdle(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_executePythonCommandStringResult(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_getAbsolutePathToResources(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_getActiveSelectionList(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_getAssociatedSets(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_getFunctionSetList(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_getHiliteList(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_getLiveList(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_getPreselectionHiliteList(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_getRichSelection(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_getSelectionListByName(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_getUILanguage(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_initOptionVar(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_isCustomVersion(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_isDefaultLanguage(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_isInCrashHandler(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_isRedoing(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_isSelected(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_isUndoing(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_isYAxisUp(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_isZAxisUp(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_mayaFeatureSet(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_mayaName(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_mayaState(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_mayaVersion(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_miscSelectionMask(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_objectSelectionMask(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_optionVarDoubleValue(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_optionVarExists(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_optionVarIntValue(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_optionVarStringValue(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_removeFromModel(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_removeOptionVar(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_resetToDefaultErrorLogPathName(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_select(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_selectByName(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_selectCommand(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_selectFromScreen(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_selectionMethod(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_selectionMode(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_setActiveSelectionList(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_setAnimSelectionMask(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_setComponentSelectionMask(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_setDisableStow(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_setDisplayCVs(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_setErrorLogPathName(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_setHiliteList(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_setMiscSelectionMask(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_setObjectSelectionMask(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_setOptionVarValue(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_setPreselectionHiliteList(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_setRichSelection(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_setSelectionMode(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_setTrackSelectionOrderEnabled(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_setYAxisUp(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_setZAxisUp(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_sourceFile(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_startErrorLogging(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_stopErrorLogging(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_trackSelectionOrderEnabled(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_unselect(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_unselectByName(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_upAxis(*args: Any, **kwargs: Any) -> Any: ...
def MGlobal_viewFrame(*args: Any, **kwargs: Any) -> Any: ...
def MIffFile_className(*args: Any, **kwargs: Any) -> Any: ...
def MImage_className(*args: Any, **kwargs: Any) -> Any: ...
def MImage_filterExists(*args: Any, **kwargs: Any) -> Any: ...
def MInt64Array_className(*args: Any, **kwargs: Any) -> Any: ...
def MIntArray_className(*args: Any, **kwargs: Any) -> Any: ...
def MItCurveCV_className(*args: Any, **kwargs: Any) -> Any: ...
def MItDag_className(*args: Any, **kwargs: Any) -> Any: ...
def MItDependencyGraph_className(*args: Any, **kwargs: Any) -> Any: ...
def MItDependencyNodes_className(*args: Any, **kwargs: Any) -> Any: ...
def MItEdits_className(*args: Any, **kwargs: Any) -> Any: ...
def MItGeometry_className(*args: Any, **kwargs: Any) -> Any: ...
def MItInstancer_className(*args: Any, **kwargs: Any) -> Any: ...
def MItMeshEdge_className(*args: Any, **kwargs: Any) -> Any: ...
def MItMeshFaceVertex_className(*args: Any, **kwargs: Any) -> Any: ...
def MItMeshPolygon_className(*args: Any, **kwargs: Any) -> Any: ...
def MItMeshVertex_className(*args: Any, **kwargs: Any) -> Any: ...
def MItSelectionList_className(*args: Any, **kwargs: Any) -> Any: ...
def MItSubdEdge_className(*args: Any, **kwargs: Any) -> Any: ...
def MItSubdFace_className(*args: Any, **kwargs: Any) -> Any: ...
def MItSubdVertex_className(*args: Any, **kwargs: Any) -> Any: ...
def MItSurfaceCV_className(*args: Any, **kwargs: Any) -> Any: ...
def MLockMessage_className(*args: Any, **kwargs: Any) -> Any: ...
def MLockMessage_setNodeLockDAGQueryCallback(*args: Any, **kwargs: Any) -> Any: ...
def MLockMessage_setNodeLockQueryCallback(*args: Any, **kwargs: Any) -> Any: ...
def MLockMessage_setPlugLockQueryCallback(*args: Any, **kwargs: Any) -> Any: ...
def MMatrixArray_className(*args: Any, **kwargs: Any) -> Any: ...
def MMatrix_className(*args: Any, **kwargs: Any) -> Any: ...

MMatrix_kTol: float

def MMeshIntersector_className(*args: Any, **kwargs: Any) -> Any: ...
def MMeshSmoothOptions_className(*args: Any, **kwargs: Any) -> Any: ...
def MMessage_className(*args: Any, **kwargs: Any) -> Any: ...
def MMessage_currentCallbackId(*args: Any, **kwargs: Any) -> Any: ...
def MMessage_getCallableInfo(*args: Any, **kwargs: Any) -> Any: ...
def MMessage_nodeCallbacks(*args: Any, **kwargs: Any) -> Any: ...
def MMessage_registeringCallableScript(*args: Any, **kwargs: Any) -> Any: ...
def MMessage_removeCallback(*args: Any, **kwargs: Any) -> Any: ...
def MMessage_removeCallbacks(*args: Any, **kwargs: Any) -> Any: ...
def MMessage_setCallableInfo(*args: Any, **kwargs: Any) -> Any: ...
def MMessage_setRegisteringCallableScript(*args: Any, **kwargs: Any) -> Any: ...
def MMessage_stealCallableInfo(*args: Any, **kwargs: Any) -> Any: ...
def MMessage_stopRegisteringCallableScript(*args: Any, **kwargs: Any) -> Any: ...
def MModelMessage_addAfterDuplicateCallback(*args: Any, **kwargs: Any) -> Any: ...
def MModelMessage_addBeforeDuplicateCallback(*args: Any, **kwargs: Any) -> Any: ...
def MModelMessage_addCallback(*args: Any, **kwargs: Any) -> Any: ...
def MModelMessage_addNodeAddedToModelCallback(*args: Any, **kwargs: Any) -> Any: ...
def MModelMessage_addNodeRemovedFromModelCallback(*args: Any, **kwargs: Any) -> Any: ...
def MModelMessage_className(*args: Any, **kwargs: Any) -> Any: ...
def MNamespace_addNamespace(*args: Any, **kwargs: Any) -> Any: ...
def MNamespace_className(*args: Any, **kwargs: Any) -> Any: ...
def MNamespace_currentNamespace(*args: Any, **kwargs: Any) -> Any: ...
def MNamespace_getNamespaceFromName(*args: Any, **kwargs: Any) -> Any: ...
def MNamespace_getNamespaceObjects(*args: Any, **kwargs: Any) -> Any: ...
def MNamespace_getNamespaces(*args: Any, **kwargs: Any) -> Any: ...
def MNamespace_makeNamepathAbsolute(*args: Any, **kwargs: Any) -> Any: ...
def MNamespace_moveNamespace(*args: Any, **kwargs: Any) -> Any: ...
def MNamespace_namespaceExists(*args: Any, **kwargs: Any) -> Any: ...
def MNamespace_parentNamespace(*args: Any, **kwargs: Any) -> Any: ...
def MNamespace_relativeNames(*args: Any, **kwargs: Any) -> Any: ...
def MNamespace_removeNamespace(*args: Any, **kwargs: Any) -> Any: ...
def MNamespace_renameNamespace(*args: Any, **kwargs: Any) -> Any: ...
def MNamespace_rootNamespace(*args: Any, **kwargs: Any) -> Any: ...
def MNamespace_setCurrentNamespace(*args: Any, **kwargs: Any) -> Any: ...
def MNamespace_setRelativeNames(*args: Any, **kwargs: Any) -> Any: ...
def MNamespace_stripNamespaceFromName(*args: Any, **kwargs: Any) -> Any: ...
def MNamespace_validateName(*args: Any, **kwargs: Any) -> Any: ...
def MNodeCacheDisablingInfoHelper_setUnsafeNode(*args: Any, **kwargs: Any) -> Any: ...
def MNodeCacheDisablingInfoHelper_setUnsafeValue(*args: Any, **kwargs: Any) -> Any: ...
def MNodeCacheDisablingInfoHelper_testAnimatedAttribute(*args: Any, **kwargs: Any) -> Any: ...
def MNodeCacheDisablingInfoHelper_testBooleanAttribute(*args: Any, **kwargs: Any) -> Any: ...
def MNodeClass_className(*args: Any, **kwargs: Any) -> Any: ...
def MNodeMessage_addAttributeAddedOrRemovedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MNodeMessage_addAttributeChangedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MNodeMessage_addKeyableChangeOverride(*args: Any, **kwargs: Any) -> Any: ...
def MNodeMessage_addNameChangedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MNodeMessage_addNodeAboutToDeleteCallback(*args: Any, **kwargs: Any) -> Any: ...
def MNodeMessage_addNodeDestroyedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MNodeMessage_addNodeDirtyCallback(*args: Any, **kwargs: Any) -> Any: ...
def MNodeMessage_addNodeDirtyPlugCallback(*args: Any, **kwargs: Any) -> Any: ...
def MNodeMessage_addNodePreRemovalCallback(*args: Any, **kwargs: Any) -> Any: ...
def MNodeMessage_addUuidChangedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MNodeMessage_className(*args: Any, **kwargs: Any) -> Any: ...
def MNurbsIntersector_className(*args: Any, **kwargs: Any) -> Any: ...
def MObjectArray_className(*args: Any, **kwargs: Any) -> Any: ...
def MObjectHandle_objectHashCode(*args: Any, **kwargs: Any) -> Any: ...
def MObjectSetMessage_addSetMembersModifiedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MObjectSetMessage_className(*args: Any, **kwargs: Any) -> Any: ...
def MParentingEdit_className(*args: Any, **kwargs: Any) -> Any: ...
def MPlane_className(*args: Any, **kwargs: Any) -> Any: ...
def MPlugArray_className(*args: Any, **kwargs: Any) -> Any: ...
def MPlug_className(*args: Any, **kwargs: Any) -> Any: ...
def MPointArray_className(*args: Any, **kwargs: Any) -> Any: ...
def MPoint_className(*args: Any, **kwargs: Any) -> Any: ...

MPoint_kTol: float

def MPolyMessage_addColorSetChangedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MPolyMessage_addPolyComponentIdChangedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MPolyMessage_addPolyTopologyChangedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MPolyMessage_addUVSetChangedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MPolyMessage_className(*args: Any, **kwargs: Any) -> Any: ...
def MPolyMessage_deletedId(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_addCategory(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_categoryRecording(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_className(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_eventBegin(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_eventDataAvailable(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_eventEnd(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_getAllCategories(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_getBufferSize(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_getCPUId(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_getCategoryIndex(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_getCategoryInfo(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_getCategoryName(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_getColor(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_getDescription(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_getEventCategory(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_getEventCount(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_getEventDuration(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_getEventName(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_getEventTime(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_getNumberOfCPUs(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_getThreadDuration(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_getThreadId(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_isDataFromFile(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_isSignalEvent(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_loadRecording(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_recordingActive(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_removeCategory(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_resetRecording(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_saveRecording(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_setBufferSize(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_setCategoryRecording(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_setRecordingActive(*args: Any, **kwargs: Any) -> Any: ...
def MProfiler_signalEvent(*args: Any, **kwargs: Any) -> Any: ...
def MProfilingContextManager(categoryId: Any, colorIndex: Any, eventName: Any, description: Any = ..., associatedNode: Any = ...) -> Any:
    """Context manager that defines a profiling scope around a block of code.

    Parameters
    ----------
    categoryId : int
            The index of the category which the event belongs to.
    colorIndex : MProfiler.ProfilingColor
            The color to draw the profiling result in Profiler Window.
    eventName : string
            The name of the event.
    description : string (optional)
            Description of the event.
    associatedNode : MObject (optional)
            The dependency node associated with the event.

    Example
    -------
    >>> import maya.OpenMaya as OM
    >>> categoryIndex = OM.MProfiler.addCategory("Python Scripts")
    >>> def Factorial(number):
    ...     # Instrument the following block of code:
    ...     with OM.MProfilingContextManager(categoryIndex, OM.MProfiler.kColorE_L1, "Factorial", "FactorialDesc"):
    ...             result = 1
    ...             for i in xrange(2, number+1):
    ...                     result *= i
    ...     return result
    ...
    >>>
    """

def MProfilingScope_className(*args: Any, **kwargs: Any) -> Any: ...
def MRampAttribute_className(*args: Any, **kwargs: Any) -> Any: ...
def MRampAttribute_createColorRamp(*args: Any, **kwargs: Any) -> Any: ...
def MRampAttribute_createCurveRamp(*args: Any, **kwargs: Any) -> Any: ...
def MRampAttribute_createRamp(*args: Any, **kwargs: Any) -> Any: ...
def MRenderPassDef_className(*args: Any, **kwargs: Any) -> Any: ...
def MRenderPassRegistry_className(*args: Any, **kwargs: Any) -> Any: ...
def MRenderPassRegistry_getRenderPassDefinition(*args: Any, **kwargs: Any) -> Any: ...
def MRenderPassRegistry_registerRenderPassDefinition(*args: Any, **kwargs: Any) -> Any: ...
def MRichSelection_className(*args: Any, **kwargs: Any) -> Any: ...
def MSceneMessage_addCallback(*args: Any, **kwargs: Any) -> Any: ...
def MSceneMessage_addCheckCallback(*args: Any, **kwargs: Any) -> Any: ...
def MSceneMessage_addCheckFileCallback(*args: Any, **kwargs: Any) -> Any: ...
def MSceneMessage_addCheckReferenceCallback(*args: Any, **kwargs: Any) -> Any: ...
def MSceneMessage_addConnectionFailedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MSceneMessage_addNamespaceRenamedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MSceneMessage_addReferenceCallback(*args: Any, **kwargs: Any) -> Any: ...
def MSceneMessage_addStringArrayCallback(*args: Any, **kwargs: Any) -> Any: ...
def MSceneMessage_className(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_createFloatArrayFromList(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_createFloatMatrixFromList(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_createIntArrayFromList(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_createMatrixFromList(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getBool(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getBoolArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getChar(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getCharArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getDouble(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getDouble2ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getDouble3ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getDouble4ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getDoubleArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getFloat(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getFloat2ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getFloat3ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getFloat4ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getFloatArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getInt(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getInt2ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getInt3ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getInt4ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getIntArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getShort(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getShort2ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getShort3ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getShort4ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getShortArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getUchar(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getUcharArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getUint(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getUint2ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getUint3ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getUint4ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getUintArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_getUshortArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setBool(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setBoolArray(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setChar(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setCharArray(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setDouble(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setDouble2ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setDouble3ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setDouble4ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setDoubleArray(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setFloat(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setFloat2ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setFloat3ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setFloat4ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setFloatArray(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setInt(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setInt2ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setInt3ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setInt4ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setIntArray(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setShort(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setShort2ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setShort3ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setShort4ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setShortArray(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setUchar(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setUcharArray(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setUint(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setUint2ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setUint3ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setUint4ArrayItem(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setUintArray(*args: Any, **kwargs: Any) -> Any: ...
def MScriptUtil_setUshortArray(*args: Any, **kwargs: Any) -> Any: ...
def MSelectionList_className(*args: Any, **kwargs: Any) -> Any: ...
def MSelectionMask_deregisterSelectionType(*args: Any, **kwargs: Any) -> Any: ...
def MSelectionMask_getSelectionTypePriority(*args: Any, **kwargs: Any) -> Any: ...
def MSelectionMask_registerSelectionType(*args: Any, **kwargs: Any) -> Any: ...
def MSetAttrEdit_className(*args: Any, **kwargs: Any) -> Any: ...
def MStreamUtils_readChar(*args: Any, **kwargs: Any) -> Any: ...
def MStreamUtils_readCharBuffer(*args: Any, **kwargs: Any) -> Any: ...
def MStreamUtils_readDouble(*args: Any, **kwargs: Any) -> Any: ...
def MStreamUtils_readFloat(*args: Any, **kwargs: Any) -> Any: ...
def MStreamUtils_readInt(*args: Any, **kwargs: Any) -> Any: ...
def MStreamUtils_stdErrorStream(*args: Any, **kwargs: Any) -> Any: ...
def MStreamUtils_stdOutStream(*args: Any, **kwargs: Any) -> Any: ...
def MStreamUtils_writeChar(*args: Any, **kwargs: Any) -> Any: ...
def MStreamUtils_writeCharBuffer(*args: Any, **kwargs: Any) -> Any: ...
def MStreamUtils_writeDouble(*args: Any, **kwargs: Any) -> Any: ...
def MStreamUtils_writeFloat(*args: Any, **kwargs: Any) -> Any: ...
def MStreamUtils_writeInt(*args: Any, **kwargs: Any) -> Any: ...
def MSyntax_className(*args: Any, **kwargs: Any) -> Any: ...
def MTesselationParams_className(*args: Any, **kwargs: Any) -> Any: ...
def MTimeArray_className(*args: Any, **kwargs: Any) -> Any: ...
def MTime_className(*args: Any, **kwargs: Any) -> Any: ...
def MTime_setUIUnit(*args: Any, **kwargs: Any) -> Any: ...
def MTime_ticksPerSecond(*args: Any, **kwargs: Any) -> Any: ...
def MTime_uiUnit(*args: Any, **kwargs: Any) -> Any: ...
def MTimerMessage_addTimerCallback(*args: Any, **kwargs: Any) -> Any: ...
def MTimerMessage_className(*args: Any, **kwargs: Any) -> Any: ...
def MTimerMessage_setSleepCallback(*args: Any, **kwargs: Any) -> Any: ...
def MTimerMessage_sleepCallback(*args: Any, **kwargs: Any) -> Any: ...
def MTransformationMatrix_className(*args: Any, **kwargs: Any) -> Any: ...

MTransformationMatrix_kTol: float

def MTrimBoundaryArray_className(*args: Any, **kwargs: Any) -> Any: ...
def MTypeId_className(*args: Any, **kwargs: Any) -> Any: ...
def MURI_className(*args: Any, **kwargs: Any) -> Any: ...
def MURI_isValidURI(*args: Any, **kwargs: Any) -> Any: ...
def MUint64Array_className(*args: Any, **kwargs: Any) -> Any: ...
def MUintArray_className(*args: Any, **kwargs: Any) -> Any: ...
def MUserData_className(*args: Any, **kwargs: Any) -> Any: ...
def MUserEventMessage_addUserEventCallback(*args: Any, **kwargs: Any) -> Any: ...
def MUserEventMessage_className(*args: Any, **kwargs: Any) -> Any: ...
def MUserEventMessage_deregisterUserEvent(*args: Any, **kwargs: Any) -> Any: ...
def MUserEventMessage_isUserEvent(*args: Any, **kwargs: Any) -> Any: ...
def MUserEventMessage_postUserEvent(*args: Any, **kwargs: Any) -> Any: ...
def MUserEventMessage_registerUserEvent(*args: Any, **kwargs: Any) -> Any: ...
def MUuid_className(*args: Any, **kwargs: Any) -> Any: ...
def MVectorArray_className(*args: Any, **kwargs: Any) -> Any: ...

MVector_kTol: float

def MWeight_className(*args: Any, **kwargs: Any) -> Any: ...

NULL: int
STRICT: int
__builtins__: dict
__cached__: str
__doc__: NoneType
__file__: str
__loader__: SourcelessFileLoader
__name__: str
__package__: str
__spec__: ModuleSpec

def _swig_add_metaclass(metaclass: Any) -> Any:
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""

def SWIG_PyInstanceMethod_New(*args: Any, **kwargs: Any) -> Any: ...
def SWIG_PyStaticMethod_New(*args: Any, **kwargs: Any) -> Any: ...

_swig_python_version_info: version_info

def _swig_repr(self) -> Any: ...
def _swig_setattr_nondynamic_class_variable(set: Any) -> Any: ...
def _swig_setattr_nondynamic_instance_variable(set: Any) -> Any: ...
def boolPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
def boolRefValue(ptr: Any) -> Any: ...
def charPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
def charRefValue(ptr: Any) -> Any: ...
def createBoolRef() -> Any: ...
def createCharRef() -> Any: ...
def createDoubleRef() -> Any: ...
def createFloatRef() -> Any: ...
def createIntRef() -> Any: ...
def createShortRef() -> Any: ...
def createUCharRef() -> Any: ...
def createUIntRef() -> Any: ...

cvar: swigvarlink

def doublePtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
def doubleRefValue(ptr: Any) -> Any: ...
def floatPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
def floatRefValue(ptr: Any) -> Any: ...
def intPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
def intRefValue(ptr: Any) -> Any: ...

kDefaultNodeType: str
kEulerRotationEpsilon: float
kMFnMeshInstanceUnspecified: int
kMFnMeshPointTolerance: float
kMFnMeshTolerance: float
kMFnNurbsEpsilon: float
kMFnSubdPointTolerance: float
kMFnSubdTolerance: float
kQuaternionEpsilon: float
kUnknownParameter: str

def setRefValue(refObject: Any, value: Any) -> Any: ...
def shortPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
def shortRefValue(ptr: Any) -> Any: ...
def uCharPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
def uCharRefValue(ptr: Any) -> Any: ...
def uIntPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
def uIntRefValue(ptr: Any) -> Any: ...

class MEdit:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any, kwargs: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def editType(self, *args: Any, **kwargs: Any) -> Any: ...
    def getString(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasEditData(self, *args: Any, **kwargs: Any) -> Any: ...
    def isApplied(self, *args: Any, **kwargs: Any) -> Any: ...
    def isFailed(self, *args: Any, **kwargs: Any) -> Any: ...
    def isTopLevel(self, *args: Any, **kwargs: Any) -> Any: ...
    kAddRemoveAttrEdit: int = ...
    kConnectDisconnectEdit: int = ...
    kFcurveEdit: int = ...
    kNullEdit: int = ...
    kParentEdit: int = ...
    kSetAttrEdit: int = ...
    def matches(self, *args: Any, **kwargs: Any) -> Any: ...
    def setApplied(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFailed(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MAddRemoveAttrEdit(MEdit):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeName(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def isAttributeAdded(self, *args: Any, **kwargs: Any) -> Any: ...
    def node(self, *args: Any, **kwargs: Any) -> Any: ...
    def nodeName(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MAngle:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    def __init_subclass__(self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def asAngMinutes(self, *args: Any, **kwargs: Any) -> Any: ...
    def asAngSeconds(self, *args: Any, **kwargs: Any) -> Any: ...
    def asDegrees(self, *args: Any, **kwargs: Any) -> Any: ...
    def asRadians(self, *args: Any, **kwargs: Any) -> Any: ...
    def asUnits(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def internalToUI(self, *args: Any, **kwargs: Any) -> Any: ...
    def internalUnit(self, *args: Any, **kwargs: Any) -> Any: ...
    kAngMinutes: int = ...
    kAngSeconds: int = ...
    kDegrees: int = ...
    kInvalid: int = ...
    kLast: int = ...
    kRadians: int = ...
    def setInternalUnit(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUIUnit(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUnit(self, *args: Any, **kwargs: Any) -> Any: ...
    def setValue(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def uiToInternal(self, *args: Any, **kwargs: Any) -> Any: ...
    def uiUnit(self, *args: Any, **kwargs: Any) -> Any: ...
    def unit(self, *args: Any, **kwargs: Any) -> Any: ...
    def value(self, *args: Any, **kwargs: Any) -> Any: ...

class MArgParser:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def commandArgumentBool(self, *args: Any, **kwargs: Any) -> Any: ...
    def commandArgumentDouble(self, *args: Any, **kwargs: Any) -> Any: ...
    def commandArgumentInt(self, *args: Any, **kwargs: Any) -> Any: ...
    def commandArgumentMAngle(self, *args: Any, **kwargs: Any) -> Any: ...
    def commandArgumentMDistance(self, *args: Any, **kwargs: Any) -> Any: ...
    def commandArgumentMTime(self, *args: Any, **kwargs: Any) -> Any: ...
    def commandArgumentString(self, *args: Any, **kwargs: Any) -> Any: ...
    def flagArgumentBool(self, *args: Any, **kwargs: Any) -> Any: ...
    def flagArgumentDouble(self, *args: Any, **kwargs: Any) -> Any: ...
    def flagArgumentInt(self, *args: Any, **kwargs: Any) -> Any: ...
    def flagArgumentMAngle(self, *args: Any, **kwargs: Any) -> Any: ...
    def flagArgumentMDistance(self, *args: Any, **kwargs: Any) -> Any: ...
    def flagArgumentMTime(self, *args: Any, **kwargs: Any) -> Any: ...
    def flagArgumentString(self, *args: Any, **kwargs: Any) -> Any: ...
    def getFlagArgumentList(self, *args: Any, **kwargs: Any) -> Any: ...
    def getFlagArgumentPosition(self, *args: Any, **kwargs: Any) -> Any: ...
    def getObjects(self, *args: Any, **kwargs: Any) -> Any: ...
    def isEdit(self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self, *args: Any, **kwargs: Any) -> Any: ...
    def isQuery(self, *args: Any, **kwargs: Any) -> Any: ...
    def numberOfFlagUses(self, *args: Any, **kwargs: Any) -> Any: ...
    def numberOfFlagsUsed(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MArgDatabase(MArgParser):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __init_subclass__(self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def getCommandArgument(self, *args: Any, **kwargs: Any) -> Any: ...
    def getFlagArgument(self, *args: Any, **kwargs: Any) -> Any: ...
    def getObjects(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MArgList:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    def __init_subclass__(self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addArg(self, *args: Any, **kwargs: Any) -> Any: ...
    def asAngle(self, *args: Any, **kwargs: Any) -> Any: ...
    def asBool(self, *args: Any, **kwargs: Any) -> Any: ...
    def asDistance(self, *args: Any, **kwargs: Any) -> Any: ...
    def asDouble(self, *args: Any, **kwargs: Any) -> Any: ...
    def asDoubleArray(self, *args: Any, **kwargs: Any) -> Any: ...
    def asInt(self, *args: Any, **kwargs: Any) -> Any: ...
    def asIntArray(self, *args: Any, **kwargs: Any) -> Any: ...
    def asMatrix(self, *args: Any, **kwargs: Any) -> Any: ...
    def asPoint(self, *args: Any, **kwargs: Any) -> Any: ...
    def asString(self, *args: Any, **kwargs: Any) -> Any: ...
    def asStringArray(self, *args: Any, **kwargs: Any) -> Any: ...
    def asTime(self, *args: Any, **kwargs: Any) -> Any: ...
    def asVector(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def flagIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    kInvalidArgIndex: int = ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MArrayDataBuilder:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addElement(self, *args: Any, **kwargs: Any) -> Any: ...
    def addElementArray(self, *args: Any, **kwargs: Any) -> Any: ...
    def addLast(self, *args: Any, **kwargs: Any) -> Any: ...
    def addLastArray(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def elementCount(self, *args: Any, **kwargs: Any) -> Any: ...
    def growArray(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeElement(self, *args: Any, **kwargs: Any) -> Any: ...
    def setGrowSize(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MArrayDataHandle:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def builder(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def elementCount(self, *args: Any, **kwargs: Any) -> Any: ...
    def elementIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def inputArrayValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def inputValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def jumpToArrayElement(self, *args: Any, **kwargs: Any) -> Any: ...
    def jumpToElement(self, *args: Any, **kwargs: Any) -> Any: ...
    def next(self, *args: Any, **kwargs: Any) -> Any: ...
    def outputArrayValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def outputValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    def setAllClean(self, *args: Any, **kwargs: Any) -> Any: ...
    def setClean(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MAttributeIndex:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __eq__(self, *args: Any, **kwargs: Any) -> Any: ...
    __hash__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __ne__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __subclasshook__(self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def getLower(self, *args: Any, **kwargs: Any) -> Any: ...
    def getUpper(self, *args: Any, **kwargs: Any) -> Any: ...
    def getValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasLowerBound(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasRange(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUpperBound(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasValidRange(self, *args: Any, **kwargs: Any) -> Any: ...
    def isBounded(self, *args: Any, **kwargs: Any) -> Any: ...
    kFloat: int = ...
    kInteger: int = ...
    def setLower(self, *args: Any, **kwargs: Any) -> Any: ...
    def setType(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUpper(self, *args: Any, **kwargs: Any) -> Any: ...
    def setValue(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self, *args: Any, **kwargs: Any) -> Any: ...

class MAttributePattern:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __eq__(self, *args: Any, **kwargs: Any) -> Any: ...
    __hash__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __subclasshook__(self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addRootAttr(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def attrPattern(self, *args: Any, **kwargs: Any) -> Any: ...
    def attrPatternCount(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def findPattern(self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeRootAttr(self, *args: Any, **kwargs: Any) -> Any: ...
    def rootAttr(self, *args: Any, **kwargs: Any) -> Any: ...
    def rootAttrCount(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MAttributePatternArray:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __getitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __init_subclass__(self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def append(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    def sizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MAttributeSpec:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __eq__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __getitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    __hash__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def dimensions(self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDimensions(self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MAttributeSpecArray:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __getitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def append(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    def sizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MBoundingBox:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def center(self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self, *args: Any, **kwargs: Any) -> Any: ...
    def contains(self, *args: Any, **kwargs: Any) -> Any: ...
    def depth(self, *args: Any, **kwargs: Any) -> Any: ...
    def expand(self, *args: Any, **kwargs: Any) -> Any: ...
    def height(self, *args: Any, **kwargs: Any) -> Any: ...
    def intersects(self, *args: Any, **kwargs: Any) -> Any: ...
    def max(self, *args: Any, **kwargs: Any) -> Any: ...
    def min(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transformUsing(self, *args: Any, **kwargs: Any) -> Any: ...
    def width(self, *args: Any, **kwargs: Any) -> Any: ...

class MCacheConfigRuleRegistry:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any, kwargs: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def registerFilter(self, *args: Any, **kwargs: Any) -> Any: ...
    def registeringCallableScript(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRegisteringCallableScript(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def unregisterFilter(self, *args: Any, **kwargs: Any) -> Any: ...

class MCacheFormatDescription:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any, kwargs: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addChannel(self, *args: Any, **kwargs: Any) -> Any: ...
    def addDescriptionInfo(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def getChannelDataType(self, *args: Any, **kwargs: Any) -> Any: ...
    def getChannelEndTime(self, *args: Any, **kwargs: Any) -> Any: ...
    def getChannelInterpretation(self, *args: Any, **kwargs: Any) -> Any: ...
    def getChannelName(self, *args: Any, **kwargs: Any) -> Any: ...
    def getChannelSamplingRate(self, *args: Any, **kwargs: Any) -> Any: ...
    def getChannelSamplingType(self, *args: Any, **kwargs: Any) -> Any: ...
    def getChannelStartTime(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDescriptionInfo(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDistribution(self, *args: Any, **kwargs: Any) -> Any: ...
    def getNumChannels(self, *args: Any, **kwargs: Any) -> Any: ...
    def getStartAndEndTimes(self, *args: Any, **kwargs: Any) -> Any: ...
    def getTimePerFrame(self, *args: Any, **kwargs: Any) -> Any: ...
    kDouble: int = ...
    kDoubleArray: int = ...
    kDoubleVectorArray: int = ...
    kFloatArray: int = ...
    kFloatVectorArray: int = ...
    kInt32Array: int = ...
    kIrregular: int = ...
    kNoFile: int = ...
    kOneFile: int = ...
    kOneFilePerFrame: int = ...
    kRegular: int = ...
    kUnknownData: int = ...
    def setDistribution(self, *args: Any, **kwargs: Any) -> Any: ...
    def setTimePerFrame(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MCacheSchema:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any, kwargs: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def add(self, *args: Any, **kwargs: Any) -> Any: ...
    def attributes(self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MCacheSchemaAttributesIterator:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def advance(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def done(self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MCacheSchemaAttributesIteratorSentinel:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    def __init_subclass__(self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    thisown: property = ...

class MCacheSchemaAttributesRange:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any, kwargs: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def begin(self, *args: Any, **kwargs: Any) -> Any: ...
    def end(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MCallbackIdArray:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __getitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def append(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    def sizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MMessage:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def currentCallbackId(self, *args: Any, **kwargs: Any) -> Any: ...
    def getCallableInfo(self, *args: Any, **kwargs: Any) -> Any: ...
    kDefaultAction: int = ...
    kDoAction: int = ...
    kDoNotDoAction: int = ...
    def nodeCallbacks(self, *args: Any, **kwargs: Any) -> Any: ...
    def registeringCallableScript(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallbacks(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCallableInfo(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRegisteringCallableScript(self, *args: Any, **kwargs: Any) -> Any: ...
    def stealCallableInfo(self, *args: Any, **kwargs: Any) -> Any: ...
    def stopRegisteringCallableScript(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MCameraMessage(MMessage):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __init_subclass__(self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addBeginManipulationCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addEndManipulationCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MCameraSetMessage(MMessage):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addCameraChangedCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addCameraLayerCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MClosedTimeInterval:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def empty(self, *args: Any, **kwargs: Any) -> Any: ...
    max: property = ...
    min: property = ...
    thisown: property = ...

class MColor:
    def __add__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __call__(self, *args: Any, **kwargs: Any) -> Any: ...
    __dict__: mappingproxy = ...
    def __div__(self, args: Any) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __getitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    __hash__: NoneType = ...
    def __iadd__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __idiv__(self, args: Any) -> Any: ...
    def __imul__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __itruediv__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __mul__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __ne__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __neg__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __sub__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __truediv__(self, args: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    a: property = ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    b: property = ...
    g: property = ...
    def get(self, *args: Any, **kwargs: Any) -> Any: ...
    kCMY: int = ...
    kCMYK: int = ...
    kHSV: int = ...
    def kOpaqueBlack(self, *args: Any, **kwargs: Any) -> Any: ...
    kRGB: int = ...
    r: property = ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MColorArray:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __getitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def append(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    def sizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MCommandMessage(MMessage):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addCommandCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addCommandOutputCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addCommandOutputFilterCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addProcCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    kError: int = ...
    kResult: int = ...
    kStackTrace: int = ...
    kWarning: int = ...
    thisown: property = ...

class MCommandResult:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def getResult(self, *args: Any, **kwargs: Any) -> Any: ...
    kDouble: int = ...
    kDoubleArray: int = ...
    kInt: int = ...
    kInt64: int = ...
    kInt64Array: int = ...
    kIntArray: int = ...
    kInvalid: int = ...
    kMatrix: int = ...
    kMatrixArray: int = ...
    kString: int = ...
    kStringArray: int = ...
    kVector: int = ...
    kVectorArray: int = ...
    def resultType(self, *args: Any, **kwargs: Any) -> Any: ...
    def stringResult(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MComputation:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def beginComputation(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def endComputation(self, *args: Any, **kwargs: Any) -> Any: ...
    def isInterruptRequested(self, *args: Any, **kwargs: Any) -> Any: ...
    def progress(self, *args: Any, **kwargs: Any) -> Any: ...
    def progressMax(self, *args: Any, **kwargs: Any) -> Any: ...
    def progressMin(self, *args: Any, **kwargs: Any) -> Any: ...
    def setProgress(self, *args: Any, **kwargs: Any) -> Any: ...
    def setProgressRange(self, *args: Any, **kwargs: Any) -> Any: ...
    def setProgressStatus(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MConditionMessage(MMessage):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addConditionCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def getConditionNames(self, *args: Any, **kwargs: Any) -> Any: ...
    def getConditionState(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MConnectDisconnectAttrEdit(MEdit):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def dstPlug(self, *args: Any, **kwargs: Any) -> Any: ...
    def dstPlugName(self, *args: Any, **kwargs: Any) -> Any: ...
    def isConnection(self, *args: Any, **kwargs: Any) -> Any: ...
    def srcPlug(self, *args: Any, **kwargs: Any) -> Any: ...
    def srcPlugName(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MContainerMessage(MMessage):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addBoundAttrCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addPublishAttrCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MCurveAttribute:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addEntries(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def createCurve(self, *args: Any, **kwargs: Any) -> Any: ...
    def createCurveAttr(self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteEntries(self, *args: Any, **kwargs: Any) -> Any: ...
    def getEntries(self, *args: Any, **kwargs: Any) -> Any: ...
    def getNumEntries(self, *args: Any, **kwargs: Any) -> Any: ...
    def getValueAtPosition(self, *args: Any, **kwargs: Any) -> Any: ...
    def getValuesAtPositions(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def pack(self, *args: Any, **kwargs: Any) -> Any: ...
    def sampleValueCurve(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCurve(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPositionAtIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def setValueAtIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def sort(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MDAGDrawOverrideInfo:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    fDisplayType: property = ...
    fEnableShading: property = ...
    fEnableTexturing: property = ...
    fEnableVisible: property = ...
    fLOD: property = ...
    fOverrideEnabled: property = ...
    fPlaybackVisible: property = ...
    kDisplayTypeNormal: int = ...
    kDisplayTypeReference: int = ...
    kDisplayTypeTemplate: int = ...
    kLODBoundingBox: int = ...
    kLODFull: int = ...
    thisown: property = ...

class MDGContext:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def current(self, *args: Any, **kwargs: Any) -> Any: ...
    fsNormal: property = ...
    def getTime(self, *args: Any, **kwargs: Any) -> Any: ...
    def isCurrent(self, *args: Any, **kwargs: Any) -> Any: ...
    def isNormal(self, *args: Any, **kwargs: Any) -> Any: ...
    def makeCurrent(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MDGContextGuard:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    thisown: property = ...

class MDGMessage(MMessage):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addConnectionCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addDelayedTimeChangeCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addDelayedTimeChangeRunupCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addForceUpdateCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addNodeAddedCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addNodeChangeUuidCheckCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addNodeRemovedCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addPreConnectionCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addTimeChangeCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MDGModifier:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def addExtensionAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def commandToExecute(self, *args: Any, **kwargs: Any) -> Any: ...
    def connect(self, *args: Any, **kwargs: Any) -> Any: ...
    def createNode(self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteMetadata(self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteNode(self, *args: Any, **kwargs: Any) -> Any: ...
    def disconnect(self, *args: Any, **kwargs: Any) -> Any: ...
    def doIt(self, *args: Any, **kwargs: Any) -> Any: ...
    def linkExtensionAttributeToPlugin(self, *args: Any, **kwargs: Any) -> Any: ...
    def newPlugValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def newPlugValueBool(self, *args: Any, **kwargs: Any) -> Any: ...
    def newPlugValueChar(self, *args: Any, **kwargs: Any) -> Any: ...
    def newPlugValueDouble(self, *args: Any, **kwargs: Any) -> Any: ...
    def newPlugValueFloat(self, *args: Any, **kwargs: Any) -> Any: ...
    def newPlugValueInt(self, *args: Any, **kwargs: Any) -> Any: ...
    def newPlugValueInt64(self, *args: Any, **kwargs: Any) -> Any: ...
    def newPlugValueMAngle(self, *args: Any, **kwargs: Any) -> Any: ...
    def newPlugValueMDistance(self, *args: Any, **kwargs: Any) -> Any: ...
    def newPlugValueMTime(self, *args: Any, **kwargs: Any) -> Any: ...
    def newPlugValueShort(self, *args: Any, **kwargs: Any) -> Any: ...
    def newPlugValueString(self, *args: Any, **kwargs: Any) -> Any: ...
    def pythonCommandToExecute(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeExtensionAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeExtensionAttributeIfUnset(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeMultiInstance(self, *args: Any, **kwargs: Any) -> Any: ...
    def renameAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def renameNode(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMetadata(self, *args: Any, **kwargs: Any) -> Any: ...
    def setNodeLockState(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def undoIt(self, *args: Any, **kwargs: Any) -> Any: ...
    def unlinkExtensionAttributeFromPlugin(self, *args: Any, **kwargs: Any) -> Any: ...

class MDagMessage(MMessage):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __init_subclass__(self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __subclasshook__(self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addAllDagChangesCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addAllDagChangesDagPathCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addChildAddedCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addChildAddedDagPathCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addChildRemovedCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addChildRemovedDagPathCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addChildReorderedCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addChildReorderedDagPathCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addDagCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addDagDagPathCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addInstanceAddedCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addInstanceAddedDagPathCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addInstanceRemovedCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addInstanceRemovedDagPathCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addMatrixModifiedCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addParentAddedCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addParentAddedDagPathCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addParentRemovedCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addParentRemovedDagPathCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addWorldMatrixModifiedCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    kAll: int = ...
    kChildRemoved: int = ...
    kChildReordered: int = ...
    kInstanceAdded: int = ...
    kInstanceRemoved: int = ...
    kInvalidMsg: int = ...
    kLast: int = ...
    kRotateOrder: int = ...
    kRotateOrient: int = ...
    kRotateOrientX: int = ...
    kRotateOrientY: int = ...
    kRotateOrientZ: int = ...
    kRotatePivot: int = ...
    kRotatePivotTrans: int = ...
    kRotatePivotX: int = ...
    kRotatePivotY: int = ...
    kRotatePivotZ: int = ...
    kRotateTransX: int = ...
    kRotateTransY: int = ...
    kRotateTransZ: int = ...
    kRotateX: int = ...
    kRotateY: int = ...
    kRotateZ: int = ...
    kRotation: int = ...
    kScale: int = ...
    kScalePivot: int = ...
    kScalePivotTrans: int = ...
    kScalePivotX: int = ...
    kScalePivotY: int = ...
    kScalePivotZ: int = ...
    kScaleTransX: int = ...
    kScaleTransY: int = ...
    kScaleTransZ: int = ...
    kScaleZ: int = ...
    kShear: int = ...
    kShearXY: int = ...
    kShearXZ: int = ...
    kShearYZ: int = ...
    kTranslateX: int = ...
    kTranslateY: int = ...
    kTranslateZ: int = ...
    kTranslation: int = ...
    thisown: property = ...

class MDagModifier(MDGModifier):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def createNode(self, *args: Any, **kwargs: Any) -> Any: ...
    def reparentNode(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MDagPath:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __eq__(self, *args: Any, **kwargs: Any) -> Any: ...
    __hash__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def apiType(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self, *args: Any, **kwargs: Any) -> Any: ...
    def childCount(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def exclusiveMatrix(self, *args: Any, **kwargs: Any) -> Any: ...
    def exclusiveMatrixInverse(self, *args: Any, **kwargs: Any) -> Any: ...
    def extendToShape(self, *args: Any, **kwargs: Any) -> Any: ...
    def extendToShapeDirectlyBelow(self, *args: Any, **kwargs: Any) -> Any: ...
    def fullPathName(self, *args: Any, **kwargs: Any) -> Any: ...
    def getAPathTo(self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllPathsBelow(self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllPathsTo(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDisplayStatus(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDrawOverrideInfo(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPath(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasFn(self, *args: Any, **kwargs: Any) -> Any: ...
    def inclusiveMatrix(self, *args: Any, **kwargs: Any) -> Any: ...
    def inclusiveMatrixInverse(self, *args: Any, **kwargs: Any) -> Any: ...
    def instanceNumber(self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanced(self, *args: Any, **kwargs: Any) -> Any: ...
    def isTemplated(self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self, *args: Any, **kwargs: Any) -> Any: ...
    def isVisible(self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    def matchTransform(self, *args: Any, **kwargs: Any) -> Any: ...
    def node(self, *args: Any, **kwargs: Any) -> Any: ...
    def numberOfShapesDirectlyBelow(self, *args: Any, **kwargs: Any) -> Any: ...
    def partialPathName(self, *args: Any, **kwargs: Any) -> Any: ...
    def pathCount(self, *args: Any, **kwargs: Any) -> Any: ...
    def pop(self, *args: Any, **kwargs: Any) -> Any: ...
    def push(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transform(self, *args: Any, **kwargs: Any) -> Any: ...

class MDagPathArray:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __getitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __init_subclass__(self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def append(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    def sizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MDataBlock:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def context(self, *args: Any, **kwargs: Any) -> Any: ...
    def inputArrayValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def inputValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def isClean(self, *args: Any, **kwargs: Any) -> Any: ...
    def outputArrayValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def outputValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def setClean(self, *args: Any, **kwargs: Any) -> Any: ...
    def setContext(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MDataHandle:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def acceptedTypeIds(self, *args: Any, **kwargs: Any) -> Any: ...
    def asAddr(self, *args: Any, **kwargs: Any) -> Any: ...
    def asAngle(self, *args: Any, **kwargs: Any) -> Any: ...
    def asBool(self, *args: Any, **kwargs: Any) -> Any: ...
    def asChar(self, *args: Any, **kwargs: Any) -> Any: ...
    def asDistance(self, *args: Any, **kwargs: Any) -> Any: ...
    def asDouble(self, *args: Any, **kwargs: Any) -> Any: ...
    def asDouble2(self, *args: Any, **kwargs: Any) -> Any: ...
    def asDouble3(self, *args: Any, **kwargs: Any) -> Any: ...
    def asDouble4(self, *args: Any, **kwargs: Any) -> Any: ...
    def asFalloffFunction(self, *args: Any, **kwargs: Any) -> Any: ...
    def asFloat(self, *args: Any, **kwargs: Any) -> Any: ...
    def asFloat2(self, *args: Any, **kwargs: Any) -> Any: ...
    def asFloat3(self, *args: Any, **kwargs: Any) -> Any: ...
    def asFloatMatrix(self, *args: Any, **kwargs: Any) -> Any: ...
    def asFloatVector(self, *args: Any, **kwargs: Any) -> Any: ...
    def asGenericBool(self, *args: Any, **kwargs: Any) -> Any: ...
    def asGenericChar(self, *args: Any, **kwargs: Any) -> Any: ...
    def asGenericDouble(self, *args: Any, **kwargs: Any) -> Any: ...
    def asGenericFloat(self, *args: Any, **kwargs: Any) -> Any: ...
    def asGenericInt(self, *args: Any, **kwargs: Any) -> Any: ...
    def asGenericInt64(self, *args: Any, **kwargs: Any) -> Any: ...
    def asGenericShort(self, *args: Any, **kwargs: Any) -> Any: ...
    def asInt(self, *args: Any, **kwargs: Any) -> Any: ...
    def asInt2(self, *args: Any, **kwargs: Any) -> Any: ...
    def asInt3(self, *args: Any, **kwargs: Any) -> Any: ...
    def asInt64(self, *args: Any, **kwargs: Any) -> Any: ...
    def asLong(self, *args: Any, **kwargs: Any) -> Any: ...
    def asLong2(self, *args: Any, **kwargs: Any) -> Any: ...
    def asLong3(self, *args: Any, **kwargs: Any) -> Any: ...
    def asMatrix(self, *args: Any, **kwargs: Any) -> Any: ...
    def asMesh(self, *args: Any, **kwargs: Any) -> Any: ...
    def asMeshTransformed(self, *args: Any, **kwargs: Any) -> Any: ...
    def asNurbsCurve(self, *args: Any, **kwargs: Any) -> Any: ...
    def asNurbsCurveTransformed(self, *args: Any, **kwargs: Any) -> Any: ...
    def asNurbsSurface(self, *args: Any, **kwargs: Any) -> Any: ...
    def asNurbsSurfaceTransformed(self, *args: Any, **kwargs: Any) -> Any: ...
    def asPluginData(self, *args: Any, **kwargs: Any) -> Any: ...
    def asShort(self, *args: Any, **kwargs: Any) -> Any: ...
    def asShort2(self, *args: Any, **kwargs: Any) -> Any: ...
    def asShort3(self, *args: Any, **kwargs: Any) -> Any: ...
    def asString(self, *args: Any, **kwargs: Any) -> Any: ...
    def asSubdSurface(self, *args: Any, **kwargs: Any) -> Any: ...
    def asSubdSurfaceTransformed(self, *args: Any, **kwargs: Any) -> Any: ...
    def asTime(self, *args: Any, **kwargs: Any) -> Any: ...
    def asUChar(self, *args: Any, **kwargs: Any) -> Any: ...
    def asVector(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self, *args: Any, **kwargs: Any) -> Any: ...
    def copyWritable(self, *args: Any, **kwargs: Any) -> Any: ...
    def data(self, *args: Any, **kwargs: Any) -> Any: ...
    def datablock(self, *args: Any, **kwargs: Any) -> Any: ...
    def geometryTransformMatrix(self, *args: Any, **kwargs: Any) -> Any: ...
    def isGeneric(self, *args: Any, **kwargs: Any) -> Any: ...
    def isNumeric(self, *args: Any, **kwargs: Any) -> Any: ...
    def numericType(self, *args: Any, **kwargs: Any) -> Any: ...
    def set2Double(self, *args: Any, **kwargs: Any) -> Any: ...
    def set2Float(self, *args: Any, **kwargs: Any) -> Any: ...
    def set2Int(self, *args: Any, **kwargs: Any) -> Any: ...
    def set2Short(self, *args: Any, **kwargs: Any) -> Any: ...
    def set3Double(self, *args: Any, **kwargs: Any) -> Any: ...
    def set3Float(self, *args: Any, **kwargs: Any) -> Any: ...
    def set3Int(self, *args: Any, **kwargs: Any) -> Any: ...
    def set3Short(self, *args: Any, **kwargs: Any) -> Any: ...
    def set4Double(self, *args: Any, **kwargs: Any) -> Any: ...
    def setBool(self, *args: Any, **kwargs: Any) -> Any: ...
    def setChar(self, *args: Any, **kwargs: Any) -> Any: ...
    def setClean(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDouble(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFloat(self, *args: Any, **kwargs: Any) -> Any: ...
    def setGenericBool(self, *args: Any, **kwargs: Any) -> Any: ...
    def setGenericChar(self, *args: Any, **kwargs: Any) -> Any: ...
    def setGenericDouble(self, *args: Any, **kwargs: Any) -> Any: ...
    def setGenericFloat(self, *args: Any, **kwargs: Any) -> Any: ...
    def setGenericInt(self, *args: Any, **kwargs: Any) -> Any: ...
    def setGenericInt64(self, *args: Any, **kwargs: Any) -> Any: ...
    def setGenericShort(self, *args: Any, **kwargs: Any) -> Any: ...
    def setInt(self, *args: Any, **kwargs: Any) -> Any: ...
    def setInt64(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMAngle(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMDistance(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMFloatMatrix(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMFloatVector(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMMatrix(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMObject(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMPxData(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMTime(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMVector(self, *args: Any, **kwargs: Any) -> Any: ...
    def setShort(self, *args: Any, **kwargs: Any) -> Any: ...
    def setString(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self, *args: Any, **kwargs: Any) -> Any: ...

class MDistance:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def asCentimeters(self, *args: Any, **kwargs: Any) -> Any: ...
    def asFeet(self, *args: Any, **kwargs: Any) -> Any: ...
    def asInches(self, *args: Any, **kwargs: Any) -> Any: ...
    def asKilometers(self, *args: Any, **kwargs: Any) -> Any: ...
    def asMeters(self, *args: Any, **kwargs: Any) -> Any: ...
    def asMiles(self, *args: Any, **kwargs: Any) -> Any: ...
    def asMillimeters(self, *args: Any, **kwargs: Any) -> Any: ...
    def asUnits(self, *args: Any, **kwargs: Any) -> Any: ...
    def asYards(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def internalToUI(self, *args: Any, **kwargs: Any) -> Any: ...
    def internalUnit(self, *args: Any, **kwargs: Any) -> Any: ...
    kCentimeters: int = ...
    kFeet: int = ...
    kInches: int = ...
    kInvalid: int = ...
    kKilometers: int = ...
    kLast: int = ...
    kMeters: int = ...
    kMiles: int = ...
    kMillimeters: int = ...
    kYards: int = ...
    def setInternalUnit(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUIUnit(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUnit(self, *args: Any, **kwargs: Any) -> Any: ...
    def setValue(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def uiToInternal(self, *args: Any, **kwargs: Any) -> Any: ...
    def uiUnit(self, *args: Any, **kwargs: Any) -> Any: ...
    def unit(self, *args: Any, **kwargs: Any) -> Any: ...
    def value(self, *args: Any, **kwargs: Any) -> Any: ...

class MDoubleArray:
    def __add__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __delitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __eq__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __getitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    __hash__: NoneType = ...
    def __iadd__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __len__(self, *args: Any, **kwargs: Any) -> Any: ...
    __module__: str = ...
    def __ne__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __radd__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __setitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def append(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    def sizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MEulerRotation:
    def __add__(self, *args: Any, **kwargs: Any) -> Any: ...
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __eq__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __getitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    __hash__: NoneType = ...
    def __iadd__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __imul__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __isub__(self, *args: Any, **kwargs: Any) -> Any: ...
    __module__: str = ...
    def __mul__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __ne__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __neg__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __sub__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def alternateSolution(self, *args: Any, **kwargs: Any) -> Any: ...
    def asMatrix(self, *args: Any, **kwargs: Any) -> Any: ...
    def asQuaternion(self, *args: Any, **kwargs: Any) -> Any: ...
    def asVector(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def bound(self, *args: Any, **kwargs: Any) -> Any: ...
    def boundIt(self, *args: Any, **kwargs: Any) -> Any: ...
    def closestCut(self, *args: Any, **kwargs: Any) -> Any: ...
    def closestSolution(self, *args: Any, **kwargs: Any) -> Any: ...
    def decompose(self, *args: Any, **kwargs: Any) -> Any: ...
    identity: MEulerRotation = ...
    def incrementalRotateBy(self, *args: Any, **kwargs: Any) -> Any: ...
    def inverse(self, *args: Any, **kwargs: Any) -> Any: ...
    def invertIt(self, *args: Any, **kwargs: Any) -> Any: ...
    def isEquivalent(self, *args: Any, **kwargs: Any) -> Any: ...
    def isZero(self, *args: Any, **kwargs: Any) -> Any: ...
    kXYZ: int = ...
    kXZY: int = ...
    kYXZ: int = ...
    kYZX: int = ...
    kZXY: int = ...
    kZYX: int = ...
    order: property = ...
    def reorder(self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderIt(self, *args: Any, **kwargs: Any) -> Any: ...
    def setToAlternateSolution(self, *args: Any, **kwargs: Any) -> Any: ...
    def setToClosestCut(self, *args: Any, **kwargs: Any) -> Any: ...
    def setToClosestSolution(self, *args: Any, **kwargs: Any) -> Any: ...
    def setValue(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    x: property = ...
    y: property = ...
    z: property = ...

class MEvaluationManager:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any, kwargs: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def evaluationInExecution(self, *args: Any, **kwargs: Any) -> Any: ...
    def evaluationManagerActive(self, *args: Any, **kwargs: Any) -> Any: ...
    def graphConstructionActive(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MEvaluationNode:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def child(self, *args: Any, **kwargs: Any) -> Any: ...
    def childCount(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def connect(self, *args: Any, **kwargs: Any) -> Any: ...
    def datablock(self, *args: Any, **kwargs: Any) -> Any: ...
    def dependencyNode(self, *args: Any, **kwargs: Any) -> Any: ...
    def dirtyPlug(self, *args: Any, **kwargs: Any) -> Any: ...
    def dirtyPlugExists(self, *args: Any, **kwargs: Any) -> Any: ...
    def iterator(self, *args: Any, **kwargs: Any) -> Any: ...
    def parent(self, *args: Any, **kwargs: Any) -> Any: ...
    def parentCount(self, *args: Any, **kwargs: Any) -> Any: ...
    def skipEvaluation(self, *args: Any, **kwargs: Any) -> Any: ...
    def skippingEvaluation(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MEvaluationNodeIterator:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def isDone(self, *args: Any, **kwargs: Any) -> Any: ...
    def next(self, *args: Any, **kwargs: Any) -> Any: ...
    def plug(self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MEventMessage(MMessage):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addEventCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def getEventNames(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFcurveEdit(MEdit):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any, kwargs: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def fcurve(self, *args: Any, **kwargs: Any) -> Any: ...
    def fcurveName(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFileIO:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def beforeExportFilename(self, *args: Any, **kwargs: Any) -> Any: ...
    def beforeExportUserFileTranslator(self, *args: Any, **kwargs: Any) -> Any: ...
    def beforeImportFilename(self, *args: Any, **kwargs: Any) -> Any: ...
    def beforeImportUserFileTranslator(self, *args: Any, **kwargs: Any) -> Any: ...
    def beforeOpenFilename(self, *args: Any, **kwargs: Any) -> Any: ...
    def beforeOpenUserFileTranslator(self, *args: Any, **kwargs: Any) -> Any: ...
    def beforeReferenceFilename(self, *args: Any, **kwargs: Any) -> Any: ...
    def beforeReferenceUserFileTranslator(self, *args: Any, **kwargs: Any) -> Any: ...
    def beforeSaveFilename(self, *args: Any, **kwargs: Any) -> Any: ...
    def beforeSaveUserFileTranslator(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def cleanReference(self, *args: Any, **kwargs: Any) -> Any: ...
    def currentFile(self, *args: Any, **kwargs: Any) -> Any: ...
    def currentlyReadingFileVersion(self, *args: Any, **kwargs: Any) -> Any: ...
    def exportAll(self, *args: Any, **kwargs: Any) -> Any: ...
    def exportAnim(self, *args: Any, **kwargs: Any) -> Any: ...
    def exportAnimFromReference(self, *args: Any, **kwargs: Any) -> Any: ...
    def exportAsReference(self, *args: Any, **kwargs: Any) -> Any: ...
    def exportSelected(self, *args: Any, **kwargs: Any) -> Any: ...
    def exportSelectedAnim(self, *args: Any, **kwargs: Any) -> Any: ...
    def exportSelectedAnimFromReference(self, *args: Any, **kwargs: Any) -> Any: ...
    def exportType(self, *args: Any, **kwargs: Any) -> Any: ...
    def fileCurrentlyLoading(self, *args: Any, **kwargs: Any) -> Any: ...
    def fileType(self, *args: Any, **kwargs: Any) -> Any: ...
    def getErrorStatus(self, *args: Any, **kwargs: Any) -> Any: ...
    def getFileTypes(self, *args: Any, **kwargs: Any) -> Any: ...
    def getFiles(self, *args: Any, **kwargs: Any) -> Any: ...
    def getLastTempFile(self, *args: Any, **kwargs: Any) -> Any: ...
    def getReferenceConnectionsBroken(self, *args: Any, **kwargs: Any) -> Any: ...
    def getReferenceConnectionsMade(self, *args: Any, **kwargs: Any) -> Any: ...
    def getReferenceFileByNode(self, *args: Any, **kwargs: Any) -> Any: ...
    def getReferenceNodes(self, *args: Any, **kwargs: Any) -> Any: ...
    def getReferences(self, *args: Any, **kwargs: Any) -> Any: ...
    def importFile(self, *args: Any, **kwargs: Any) -> Any: ...
    def isImportingFile(self, *args: Any, **kwargs: Any) -> Any: ...
    def isNewingFile(self, *args: Any, **kwargs: Any) -> Any: ...
    def isOpeningFile(self, *args: Any, **kwargs: Any) -> Any: ...
    def isReadingFile(self, *args: Any, **kwargs: Any) -> Any: ...
    def isReferencingFile(self, *args: Any, **kwargs: Any) -> Any: ...
    def isSavingReference(self, *args: Any, **kwargs: Any) -> Any: ...
    def isWritingFile(self, *args: Any, **kwargs: Any) -> Any: ...
    kExportTypeAll: int = ...
    kExportTypeAnim: int = ...
    kExportTypeAnimFromReference: int = ...
    kExportTypeAsReference: int = ...
    kExportTypeEdits: int = ...
    kExportTypePrefObjects: int = ...
    kExportTypeSelected: int = ...
    kForceDeleteNamespaceContent: int = ...
    kLoadAllReferences: int = ...
    kLoadDefault: int = ...
    kLoadNoReferences: int = ...
    kMergeNamespaceWithParentNamespace: int = ...
    kMergeNamespaceWithRootNamespace: int = ...
    kRemoveNamespaceIfEmpty: int = ...
    kVersion2008: int = ...
    kVersion2009: int = ...
    kVersion2010: int = ...
    kVersion2011: int = ...
    kVersion2012: int = ...
    kVersion2013: int = ...
    kVersion2014: int = ...
    kVersion2015: int = ...
    kVersion2016: int = ...
    kVersion2016R2: int = ...
    kVersion2017: int = ...
    kVersion2017Update3: int = ...
    kVersion2017Update4: int = ...
    kVersion2018: int = ...
    kVersion2018Update2: int = ...
    kVersion2018Update3: int = ...
    kVersion2018Update4: int = ...
    kVersion2019: int = ...
    kVersion2020: int = ...
    kVersion2022: int = ...
    kVersion2023: int = ...
    kVersion4_0: int = ...
    kVersion4_5: int = ...
    kVersion5_0: int = ...
    kVersion6_0: int = ...
    kVersion6_5: int = ...
    kVersion7_0: int = ...
    kVersion8_0: int = ...
    kVersion8_5: int = ...
    def latestMayaFileVersion(self, *args: Any, **kwargs: Any) -> Any: ...
    def loadReference(self, *args: Any, **kwargs: Any) -> Any: ...
    def loadReferenceByNode(self, *args: Any, **kwargs: Any) -> Any: ...
    def mustRenameToSave(self, *args: Any, **kwargs: Any) -> Any: ...
    def mustRenameToSaveMsg(self, *args: Any, **kwargs: Any) -> Any: ...
    def newFile(self, *args: Any, **kwargs: Any) -> Any: ...
    def open(self, *args: Any, **kwargs: Any) -> Any: ...
    def reference(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeReference(self, *args: Any, **kwargs: Any) -> Any: ...
    def resetError(self, *args: Any, **kwargs: Any) -> Any: ...
    def save(self, *args: Any, **kwargs: Any) -> Any: ...
    def saveAs(self, *args: Any, **kwargs: Any) -> Any: ...
    def saveReference(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCurrentFile(self, *args: Any, **kwargs: Any) -> Any: ...
    def setError(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMustRenameToSave(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMustRenameToSaveMsg(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def unloadReference(self, *args: Any, **kwargs: Any) -> Any: ...
    def unloadReferenceByNode(self, *args: Any, **kwargs: Any) -> Any: ...

class MFileObject:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def exists(self, *args: Any, **kwargs: Any) -> Any: ...
    def expandedFullName(self, *args: Any, **kwargs: Any) -> Any: ...
    def expandedPath(self, *args: Any, **kwargs: Any) -> Any: ...
    def fullName(self, *args: Any, **kwargs: Any) -> Any: ...
    def getResolvedFullName(self, *args: Any, **kwargs: Any) -> Any: ...
    def isAbsolutePath(self, *args: Any, **kwargs: Any) -> Any: ...
    def isSet(self, *args: Any, **kwargs: Any) -> Any: ...
    def ithFullName(self, *args: Any, **kwargs: Any) -> Any: ...
    def ithPath(self, *args: Any, **kwargs: Any) -> Any: ...
    kBaseName: int = ...
    kDirMap: int = ...
    kExact: int = ...
    kInputFile: int = ...
    kInputReference: int = ...
    kNone: int = ...
    kReferenceMappings: int = ...
    kRelative: int = ...
    kStrict: int = ...
    def name(self, *args: Any, **kwargs: Any) -> Any: ...
    def overrideResolvedFullName(self, *args: Any, **kwargs: Any) -> Any: ...
    def path(self, *args: Any, **kwargs: Any) -> Any: ...
    def pathCount(self, *args: Any, **kwargs: Any) -> Any: ...
    def rawFullName(self, *args: Any, **kwargs: Any) -> Any: ...
    def rawName(self, *args: Any, **kwargs: Any) -> Any: ...
    def rawPath(self, *args: Any, **kwargs: Any) -> Any: ...
    def rawURI(self, *args: Any, **kwargs: Any) -> Any: ...
    def resolveMethod(self, *args: Any, **kwargs: Any) -> Any: ...
    def resolvedFullName(self, *args: Any, **kwargs: Any) -> Any: ...
    def resolvedName(self, *args: Any, **kwargs: Any) -> Any: ...
    def resolvedPath(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFullName(self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRawFullName(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRawName(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRawPath(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRawURI(self, *args: Any, **kwargs: Any) -> Any: ...
    def setResolveMethod(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFloatArray:
    def __add__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __delitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __eq__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __getitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    __hash__: NoneType = ...
    def __iadd__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __len__(self, *args: Any, **kwargs: Any) -> Any: ...
    __module__: str = ...
    def __ne__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __radd__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __setitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def append(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    def sizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFloatMatrix:
    def __add__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __call__(self, *args: Any, **kwargs: Any) -> Any: ...
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __eq__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __getitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    __hash__: NoneType = ...
    def __iadd__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __imul__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __isub__(self, *args: Any, **kwargs: Any) -> Any: ...
    __module__: str = ...
    def __mul__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __ne__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __sub__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def adjoint(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def det3x3(self, *args: Any, **kwargs: Any) -> Any: ...
    def det4x4(self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self, *args: Any, **kwargs: Any) -> Any: ...
    def homogenize(self, *args: Any, **kwargs: Any) -> Any: ...
    def inverse(self, *args: Any, **kwargs: Any) -> Any: ...
    def isEquivalent(self, *args: Any, **kwargs: Any) -> Any: ...
    matrix: property = ...
    def setToIdentity(self, *args: Any, **kwargs: Any) -> Any: ...
    def setToProduct(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transpose(self, *args: Any, **kwargs: Any) -> Any: ...

class MFloatPoint:
    def __add__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __call__(self, *args: Any, **kwargs: Any) -> Any: ...
    __dict__: mappingproxy = ...
    def __div__(self, args: Any) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __getitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    __hash__: NoneType = ...
    def __iadd__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __imul__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __isub__(self, *args: Any, **kwargs: Any) -> Any: ...
    __module__: str = ...
    def __mul__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __ne__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __sub__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __truediv__(self, args: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def cartesianize(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def distanceTo(self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self, *args: Any, **kwargs: Any) -> Any: ...
    def homogenize(self, *args: Any, **kwargs: Any) -> Any: ...
    def isEquivalent(self, *args: Any, **kwargs: Any) -> Any: ...
    def origin(self, *args: Any, **kwargs: Any) -> Any: ...
    def rationalize(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCast(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    w: property = ...
    x: property = ...
    y: property = ...
    z: property = ...

class MFloatPointArray:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __getitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def append(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    def sizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFloatVector:
    def __add__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __call__(self, *args: Any, **kwargs: Any) -> Any: ...
    __dict__: mappingproxy = ...
    def __div__(self, args: Any) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __getitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    __hash__: NoneType = ...
    def __iadd__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __idiv__(self, args: Any) -> Any: ...
    def __imul__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __isub__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __itruediv__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __mul__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __ne__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __neg__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __sub__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __truediv__(self, args: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def __xor__(self, *args: Any, **kwargs: Any) -> Any: ...
    def angle(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self, *args: Any, **kwargs: Any) -> Any: ...
    def isEquivalent(self, *args: Any, **kwargs: Any) -> Any: ...
    def isParallel(self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    def normal(self, *args: Any, **kwargs: Any) -> Any: ...
    def normalize(self, *args: Any, **kwargs: Any) -> Any: ...
    def one(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    x: property = ...
    def xAxis(self, *args: Any, **kwargs: Any) -> Any: ...
    def xNegAxis(self, *args: Any, **kwargs: Any) -> Any: ...
    y: property = ...
    def yAxis(self, *args: Any, **kwargs: Any) -> Any: ...
    def yNegAxis(self, *args: Any, **kwargs: Any) -> Any: ...
    z: property = ...
    def zAxis(self, *args: Any, **kwargs: Any) -> Any: ...
    def zNegAxis(self, *args: Any, **kwargs: Any) -> Any: ...
    def zero(self, *args: Any, **kwargs: Any) -> Any: ...

class MFloatVectorArray:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __getitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def append(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    def sizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFn:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    kAISEnvFacade: int = ...
    kAddDoubleLinear: int = ...
    kAdskMaterial: int = ...
    kAffect: int = ...
    kAimConstraint: int = ...
    kAimMatrix: int = ...
    kAir: int = ...
    kAlignCurve: int = ...
    kAlignManip: int = ...
    kAlignSurface: int = ...
    kAmbientLight: int = ...
    kAngle: int = ...
    kAngleBetween: int = ...
    kAnimBlend: int = ...
    kAnimBlendInOut: int = ...
    kAnimCurve: int = ...
    kAnimCurveTimeToAngular: int = ...
    kAnimCurveTimeToDistance: int = ...
    kAnimCurveTimeToTime: int = ...
    kAnimCurveTimeToUnitless: int = ...
    kAnimCurveUnitlessToAngular: int = ...
    kAnimCurveUnitlessToDistance: int = ...
    kAnimCurveUnitlessToTime: int = ...
    kAnimCurveUnitlessToUnitless: int = ...
    kAnimLayer: int = ...
    kAnisotropy: int = ...
    kAnnotation: int = ...
    kAnyGeometryVarGroup: int = ...
    kArcLength: int = ...
    kAreaLight: int = ...
    kArrayMapper: int = ...
    kArrowManip: int = ...
    kArubaTesselate: int = ...
    kAssembly: int = ...
    kAsset: int = ...
    kAttachCurve: int = ...
    kAttachSurface: int = ...
    kAttribute: int = ...
    kAttribute2Double: int = ...
    kAttribute2Float: int = ...
    kAttribute2Int: int = ...
    kAttribute2Long: int = ...
    kAttribute2Short: int = ...
    kAttribute3Double: int = ...
    kAttribute3Float: int = ...
    kAttribute3Int: int = ...
    kAttribute3Long: int = ...
    kAttribute3Short: int = ...
    kAttribute4Double: int = ...
    kAudio: int = ...
    kAverageCurveManip: int = ...
    kAvgCurves: int = ...
    kAvgNurbsSurfacePoints: int = ...
    kAvgSurfacePoints: int = ...
    kAxesActionManip: int = ...
    kBackground: int = ...
    kBallProjectionManip: int = ...
    kBarnDoorManip: int = ...
    kBase: int = ...
    kBaseLattice: int = ...
    kBendLattice: int = ...
    kBevel: int = ...
    kBevelManip: int = ...
    kBevelPlus: int = ...
    kBezierCurve: int = ...
    kBezierCurveData: int = ...
    kBezierCurveToNurbs: int = ...
    kBinaryData: int = ...
    kBirailSrf: int = ...
    kBlend: int = ...
    kBlendColorSet: int = ...
    kBlendColors: int = ...
    kBlendDevice: int = ...
    kBlendFalloff: int = ...
    kBlendManip: int = ...
    kBlendMatrix: int = ...
    kBlendNodeAdditiveRotation: int = ...
    kBlendNodeAdditiveScale: int = ...
    kBlendNodeBase: int = ...
    kBlendNodeBoolean: int = ...
    kBlendNodeDouble: int = ...
    kBlendNodeDoubleAngle: int = ...
    kBlendNodeDoubleLinear: int = ...
    kBlendNodeEnum: int = ...
    kBlendNodeFloat: int = ...
    kBlendNodeFloatAngle: int = ...
    kBlendNodeFloatLinear: int = ...
    kBlendNodeInt16: int = ...
    kBlendNodeInt32: int = ...
    kBlendNodeTime: int = ...
    kBlendShape: int = ...
    kBlendTwoAttr: int = ...
    kBlendWeighted: int = ...
    kBlindData: int = ...
    kBlindDataTemplate: int = ...
    kBlinn: int = ...
    kBlinnMaterial: int = ...
    kBoundary: int = ...
    kBox: int = ...
    kBoxData: int = ...
    kBrownian: int = ...
    kBrush: int = ...
    kBulge: int = ...
    kBulgeLattice: int = ...
    kBump: int = ...
    kBump3d: int = ...
    kButtonManip: int = ...
    kCacheBase: int = ...
    kCacheBlend: int = ...
    kCacheFile: int = ...
    kCacheTrack: int = ...
    kCacheableNode: int = ...
    kCaddyManipBase: int = ...
    kCamera: int = ...
    kCameraManip: int = ...
    kCameraPlaneManip: int = ...
    kCameraSet: int = ...
    kCameraView: int = ...
    kCenterManip: int = ...
    kChainToSpline: int = ...
    kCharacter: int = ...
    kCharacterMap: int = ...
    kCharacterMappingData: int = ...
    kCharacterOffset: int = ...
    kChecker: int = ...
    kChoice: int = ...
    kChooser: int = ...
    kCircle: int = ...
    kCircleManip: int = ...
    kCirclePointManip: int = ...
    kCircleSweepManip: int = ...
    kClampColor: int = ...
    kClientDevice: int = ...
    kClip: int = ...
    kClipGhostShape: int = ...
    kClipLibrary: int = ...
    kClipScheduler: int = ...
    kClipToGhostData: int = ...
    kCloseCurve: int = ...
    kCloseSurface: int = ...
    kClosestPointOnMesh: int = ...
    kClosestPointOnSurface: int = ...
    kCloth: int = ...
    kCloud: int = ...
    kCluster: int = ...
    kClusterFilter: int = ...
    kClusterFlexor: int = ...
    kCoiManip: int = ...
    kCollision: int = ...
    kColorBackground: int = ...
    kColorMgtGlobals: int = ...
    kColorProfile: int = ...
    kCombinationShape: int = ...
    kCommCornerManip: int = ...
    kCommCornerOperManip: int = ...
    kCommEdgeOperManip: int = ...
    kCommEdgePtManip: int = ...
    kCommEdgeSegmentManip: int = ...
    kComponent: int = ...
    kComponentFalloff: int = ...
    kComponentListData: int = ...
    kComponentManip: int = ...
    kComponentMatch: int = ...
    kComposeMatrix: int = ...
    kCompoundAttribute: int = ...
    kConcentricProjectionManip: int = ...
    kCondition: int = ...
    kCone: int = ...
    kConstraint: int = ...
    kContainer: int = ...
    kContainerBase: int = ...
    kContourProjectionManip: int = ...
    kContrast: int = ...
    kControl: int = ...
    kControllerTag: int = ...
    kCopyColorSet: int = ...
    kCopyUVSet: int = ...
    kCpManip: int = ...
    kCrater: int = ...
    kCreaseSet: int = ...
    kCreate: int = ...
    kCreateBPManip: int = ...
    kCreateBezierManip: int = ...
    kCreateCVManip: int = ...
    kCreateColorSet: int = ...
    kCreateEPManip: int = ...
    kCreateSectionManip: int = ...
    kCreateUVSet: int = ...
    kCrossSectionEditManip: int = ...
    kCrossSectionManager: int = ...
    kCubicProjectionManip: int = ...
    kCurve: int = ...
    kCurveCVComponent: int = ...
    kCurveCurveIntersect: int = ...
    kCurveEPComponent: int = ...
    kCurveEdManip: int = ...
    kCurveFromMeshCoM: int = ...
    kCurveFromMeshEdge: int = ...
    kCurveFromSubdivEdge: int = ...
    kCurveFromSubdivFace: int = ...
    kCurveFromSurface: int = ...
    kCurveFromSurfaceBnd: int = ...
    kCurveFromSurfaceCoS: int = ...
    kCurveFromSurfaceIso: int = ...
    kCurveInfo: int = ...
    kCurveKnotComponent: int = ...
    kCurveNormalizerAngle: int = ...
    kCurveNormalizerLinear: int = ...
    kCurveParamComponent: int = ...
    kCurveSegmentManip: int = ...
    kCurveVarGroup: int = ...
    kCustomEvaluatorClusterNode: int = ...
    kCylinder: int = ...
    kCylindricalProjectionManip: int = ...
    kDOF: int = ...
    kDPbirailSrf: int = ...
    kDagContainer: int = ...
    kDagNode: int = ...
    kDagPose: int = ...
    kDagSelectionItem: int = ...
    kData: int = ...
    kData2Double: int = ...
    kData2Float: int = ...
    kData2Int: int = ...
    kData2Long: int = ...
    kData2Short: int = ...
    kData3Double: int = ...
    kData3Float: int = ...
    kData3Int: int = ...
    kData3Long: int = ...
    kData3Short: int = ...
    kData4Double: int = ...
    kDblTrsManip: int = ...
    kDecayRegionCapComponent: int = ...
    kDecayRegionComponent: int = ...
    kDecomposeMatrix: int = ...
    kDefaultLightList: int = ...
    kDeformBend: int = ...
    kDeformBendManip: int = ...
    kDeformFlare: int = ...
    kDeformFlareManip: int = ...
    kDeformFunc: int = ...
    kDeformSine: int = ...
    kDeformSineManip: int = ...
    kDeformSquash: int = ...
    kDeformSquashManip: int = ...
    kDeformTwist: int = ...
    kDeformTwistManip: int = ...
    kDeformWave: int = ...
    kDeformWaveManip: int = ...
    kDeleteColorSet: int = ...
    kDeleteComponent: int = ...
    kDeleteUVSet: int = ...
    kDeltaMush: int = ...
    kDependencyNode: int = ...
    kDetachCurve: int = ...
    kDetachSurface: int = ...
    kDiffuseMaterial: int = ...
    kDimension: int = ...
    kDimensionManip: int = ...
    kDirectedDisc: int = ...
    kDirectionManip: int = ...
    kDirectionalLight: int = ...
    kDiscManip: int = ...
    kDiskCache: int = ...
    kDispatchCompute: int = ...
    kDisplacementShader: int = ...
    kDisplayLayer: int = ...
    kDisplayLayerManager: int = ...
    kDistance: int = ...
    kDistanceBetween: int = ...
    kDistanceManip: int = ...
    kDofManip: int = ...
    kDoubleAngleAttribute: int = ...
    kDoubleArrayData: int = ...
    kDoubleIndexedComponent: int = ...
    kDoubleLinearAttribute: int = ...
    kDoubleShadingSwitch: int = ...
    kDrag: int = ...
    kDropOffFunction: int = ...
    kDropoffLocator: int = ...
    kDropoffManip: int = ...
    kDummy: int = ...
    kDummyConnectable: int = ...
    kDynAirManip: int = ...
    kDynArrayAttrsData: int = ...
    kDynAttenuationManip: int = ...
    kDynBase: int = ...
    kDynBaseFieldManip: int = ...
    kDynEmitterManip: int = ...
    kDynFieldsManip: int = ...
    kDynGlobals: int = ...
    kDynNewtonManip: int = ...
    kDynParticleSetComponent: int = ...
    kDynSpreadManip: int = ...
    kDynSweptGeometryData: int = ...
    kDynTurbulenceManip: int = ...
    kDynamicConstraint: int = ...
    kDynamicsController: int = ...
    kEdgeComponent: int = ...
    kEditCurve: int = ...
    kEditCurveManip: int = ...
    kEditMetadata: int = ...
    kEditsManager: int = ...
    kEmitter: int = ...
    kEnableManip: int = ...
    kEnumAttribute: int = ...
    kEnvBall: int = ...
    kEnvChrome: int = ...
    kEnvCube: int = ...
    kEnvFacade: int = ...
    kEnvFogMaterial: int = ...
    kEnvFogShape: int = ...
    kEnvSky: int = ...
    kEnvSphere: int = ...
    kExplodeNurbsShell: int = ...
    kExpression: int = ...
    kExtendCurve: int = ...
    kExtendCurveDistanceManip: int = ...
    kExtendSurface: int = ...
    kExtendSurfaceDistanceManip: int = ...
    kExtract: int = ...
    kExtrude: int = ...
    kExtrudeManip: int = ...
    kFFD: int = ...
    kFFblendSrf: int = ...
    kFFfilletSrf: int = ...
    kFacade: int = ...
    kFalloffEval: int = ...
    kFfdDualBase: int = ...
    kField: int = ...
    kFileBackground: int = ...
    kFileTexture: int = ...
    kFilletCurve: int = ...
    kFilter: int = ...
    kFilterClosestSample: int = ...
    kFilterEuler: int = ...
    kFilterSimplify: int = ...
    kFitBspline: int = ...
    kFixedLineManip: int = ...
    kFlexor: int = ...
    kFloatAngleAttribute: int = ...
    kFloatArrayData: int = ...
    kFloatLinearAttribute: int = ...
    kFloatMatrixAttribute: int = ...
    kFloatVectorArrayData: int = ...
    kFlow: int = ...
    kFluid: int = ...
    kFluidData: int = ...
    kFluidEmitter: int = ...
    kFluidGeom: int = ...
    kFluidTexture2D: int = ...
    kFluidTexture3D: int = ...
    kFollicle: int = ...
    kForceUpdateManip: int = ...
    kFosterParent: int = ...
    kFourByFourMatrix: int = ...
    kFractal: int = ...
    kFreePointManip: int = ...
    kFreePointTriadManip: int = ...
    kGammaCorrect: int = ...
    kGenericAttribute: int = ...
    kGeoConnectable: int = ...
    kGeoConnector: int = ...
    kGeomBind: int = ...
    kGeometric: int = ...
    kGeometryConstraint: int = ...
    kGeometryData: int = ...
    kGeometryFilt: int = ...
    kGeometryOnLineManip: int = ...
    kGeometryVarGroup: int = ...
    kGlobalCacheControls: int = ...
    kGlobalStitch: int = ...
    kGranite: int = ...
    kGravity: int = ...
    kGreasePencilSequence: int = ...
    kGreasePlane: int = ...
    kGreasePlaneRenderShape: int = ...
    kGrid: int = ...
    kGroundPlane: int = ...
    kGroupId: int = ...
    kGroupParts: int = ...
    kGuide: int = ...
    kGuideLine: int = ...
    kHairConstraint: int = ...
    kHairSystem: int = ...
    kHairTubeShader: int = ...
    kHandleRotateManip: int = ...
    kHardenPointCurve: int = ...
    kHardwareReflectionMap: int = ...
    kHardwareRenderGlobals: int = ...
    kHardwareRenderingGlobals: int = ...
    kHeightField: int = ...
    kHikEffector: int = ...
    kHikFKJoint: int = ...
    kHikFloorContactMarker: int = ...
    kHikGroundPlane: int = ...
    kHikHandle: int = ...
    kHikIKEffector: int = ...
    kHikSolver: int = ...
    kHistorySwitch: int = ...
    kHsvToRgb: int = ...
    kHwShaderNode: int = ...
    kHyperGraphInfo: int = ...
    kHyperLayout: int = ...
    kHyperLayoutDG: int = ...
    kHyperView: int = ...
    kIkEffector: int = ...
    kIkHandle: int = ...
    kIkRPManip: int = ...
    kIkSolver: int = ...
    kIkSplineManip: int = ...
    kIkSystem: int = ...
    kIllustratorCurve: int = ...
    kImageAdd: int = ...
    kImageBlur: int = ...
    kImageColorCorrect: int = ...
    kImageData: int = ...
    kImageDepth: int = ...
    kImageDiff: int = ...
    kImageDisplay: int = ...
    kImageFilter: int = ...
    kImageLoad: int = ...
    kImageMotionBlur: int = ...
    kImageMultiply: int = ...
    kImageNetDest: int = ...
    kImageNetSrc: int = ...
    kImageOver: int = ...
    kImagePlane: int = ...
    kImageRender: int = ...
    kImageSave: int = ...
    kImageSource: int = ...
    kImageUnder: int = ...
    kImageView: int = ...
    kImplicitCone: int = ...
    kImplicitSphere: int = ...
    kInsertKnotCrv: int = ...
    kInsertKnotSrf: int = ...
    kInstancer: int = ...
    kInt64ArrayData: int = ...
    kIntArrayData: int = ...
    kIntersectSurface: int = ...
    kInvalid: int = ...
    kIsoparmComponent: int = ...
    kIsoparmManip: int = ...
    kItemList: int = ...
    kJiggleDeformer: int = ...
    kJoint: int = ...
    kJointCluster: int = ...
    kJointClusterManip: int = ...
    kJointTranslateManip: int = ...
    kKeyframeDelta: int = ...
    kKeyframeDeltaAddRemove: int = ...
    kKeyframeDeltaBlockAddRemove: int = ...
    kKeyframeDeltaBreakdown: int = ...
    kKeyframeDeltaInfType: int = ...
    kKeyframeDeltaMove: int = ...
    kKeyframeDeltaScale: int = ...
    kKeyframeDeltaTangent: int = ...
    kKeyframeDeltaWeighted: int = ...
    kKeyframeRegionManip: int = ...
    kKeyingGroup: int = ...
    kLambert: int = ...
    kLambertMaterial: int = ...
    kLast: int = ...
    kLattice: int = ...
    kLatticeComponent: int = ...
    kLatticeData: int = ...
    kLatticeGeom: int = ...
    kLayeredShader: int = ...
    kLayeredTexture: int = ...
    kLeastSquares: int = ...
    kLeather: int = ...
    kLight: int = ...
    kLightDataAttribute: int = ...
    kLightFogMaterial: int = ...
    kLightInfo: int = ...
    kLightLink: int = ...
    kLightList: int = ...
    kLightManip: int = ...
    kLightProjectionGeometry: int = ...
    kLightSource: int = ...
    kLightSourceMaterial: int = ...
    kLimitManip: int = ...
    kLineArrowManip: int = ...
    kLineManip: int = ...
    kLineModifier: int = ...
    kLinearLight: int = ...
    kLocator: int = ...
    kLodGroup: int = ...
    kLodThresholds: int = ...
    kLookAt: int = ...
    kLuminance: int = ...
    kMCsolver: int = ...
    kMPbirailSrf: int = ...
    kMakeGroup: int = ...
    kMandelbrot: int = ...
    kMandelbrot3D: int = ...
    kManip2DContainer: int = ...
    kManipContainer: int = ...
    kManipulator: int = ...
    kManipulator2D: int = ...
    kManipulator3D: int = ...
    kMarble: int = ...
    kMarker: int = ...
    kMarkerManip: int = ...
    kMaterial: int = ...
    kMaterialFacade: int = ...
    kMaterialInfo: int = ...
    kMaterialTemplate: int = ...
    kMatrixAdd: int = ...
    kMatrixArrayData: int = ...
    kMatrixAttribute: int = ...
    kMatrixData: int = ...
    kMatrixFloatData: int = ...
    kMatrixHold: int = ...
    kMatrixMult: int = ...
    kMatrixPass: int = ...
    kMatrixWtAdd: int = ...
    kMembrane: int = ...
    kMentalRayTexture: int = ...
    kMergeVertsToolManip: int = ...
    kMesh: int = ...
    kMeshComponent: int = ...
    kMeshData: int = ...
    kMeshEdgeComponent: int = ...
    kMeshFaceVertComponent: int = ...
    kMeshFrEdgeComponent: int = ...
    kMeshGeom: int = ...
    kMeshMapComponent: int = ...
    kMeshPolygonComponent: int = ...
    kMeshVarGroup: int = ...
    kMeshVertComponent: int = ...
    kMeshVtxFaceComponent: int = ...
    kMessageAttribute: int = ...
    kMidModifier: int = ...
    kMidModifierWithMatrix: int = ...
    kModel: int = ...
    kModifyEdgeBaseManip: int = ...
    kModifyEdgeCrvManip: int = ...
    kModifyEdgeManip: int = ...
    kMorph: int = ...
    kMotionPath: int = ...
    kMotionPathManip: int = ...
    kMountain: int = ...
    kMoveUVShellManip2D: int = ...
    kMoveVertexManip: int = ...
    kMultDoubleLinear: int = ...
    kMultiSubVertexComponent: int = ...
    kMultilisterLight: int = ...
    kMultiplyDivide: int = ...
    kMute: int = ...
    kNBase: int = ...
    kNCloth: int = ...
    kNComponent: int = ...
    kNId: int = ...
    kNIdData: int = ...
    kNLE: int = ...
    kNObject: int = ...
    kNObjectData: int = ...
    kNParticle: int = ...
    kNRigid: int = ...
    kNamedObject: int = ...
    kNearestPointOnCurve: int = ...
    kNewton: int = ...
    kNodeGraphEditorBookmarkInfo: int = ...
    kNodeGraphEditorBookmarks: int = ...
    kNodeGraphEditorInfo: int = ...
    kNoise: int = ...
    kNonAmbientLight: int = ...
    kNonDagSelectionItem: int = ...
    kNonExtendedLight: int = ...
    kNonLinear: int = ...
    kNormalConstraint: int = ...
    kNucleus: int = ...
    kNumericAttribute: int = ...
    kNumericData: int = ...
    kNurbsBoolean: int = ...
    kNurbsCircular2PtArc: int = ...
    kNurbsCircular3PtArc: int = ...
    kNurbsCube: int = ...
    kNurbsCurve: int = ...
    kNurbsCurveData: int = ...
    kNurbsCurveGeom: int = ...
    kNurbsCurveToBezier: int = ...
    kNurbsPlane: int = ...
    kNurbsSquare: int = ...
    kNurbsSurface: int = ...
    kNurbsSurfaceData: int = ...
    kNurbsSurfaceGeom: int = ...
    kNurbsTesselate: int = ...
    kNurbsToSubdiv: int = ...
    kObjectAttrFilter: int = ...
    kObjectBinFilter: int = ...
    kObjectFilter: int = ...
    kObjectMultiFilter: int = ...
    kObjectNameFilter: int = ...
    kObjectRenderFilter: int = ...
    kObjectScriptFilter: int = ...
    kObjectTypeFilter: int = ...
    kOcean: int = ...
    kOceanDeformer: int = ...
    kOceanShader: int = ...
    kOffsetCos: int = ...
    kOffsetCosManip: int = ...
    kOffsetCurve: int = ...
    kOffsetCurveManip: int = ...
    kOffsetSurface: int = ...
    kOffsetSurfaceManip: int = ...
    kOldGeometryConstraint: int = ...
    kOpaqueAttribute: int = ...
    kOpticalFX: int = ...
    kOrientConstraint: int = ...
    kOrientationComponent: int = ...
    kOrientationLocator: int = ...
    kOrientationMarker: int = ...
    kOrthoGrid: int = ...
    kPASolver: int = ...
    kPairBlend: int = ...
    kParamDimension: int = ...
    kParentConstraint: int = ...
    kParticle: int = ...
    kParticleAgeMapper: int = ...
    kParticleCloud: int = ...
    kParticleColorMapper: int = ...
    kParticleIncandecenceMapper: int = ...
    kParticleSamplerInfo: int = ...
    kParticleTransparencyMapper: int = ...
    kPartition: int = ...
    kPassContributionMap: int = ...
    kPfxGeometry: int = ...
    kPfxHair: int = ...
    kPfxToon: int = ...
    kPhong: int = ...
    kPhongExplorer: int = ...
    kPhongMaterial: int = ...
    kPickMatrix: int = ...
    kPivotComponent: int = ...
    kPivotManip2D: int = ...
    kPlace2dTexture: int = ...
    kPlace3dTexture: int = ...
    kPlanarProjectionManip: int = ...
    kPlanarTrimSrf: int = ...
    kPlane: int = ...
    kPlugin: int = ...
    kPluginBlendShape: int = ...
    kPluginCameraSet: int = ...
    kPluginClientDevice: int = ...
    kPluginConstraintNode: int = ...
    kPluginData: int = ...
    kPluginDeformerNode: int = ...
    kPluginDependNode: int = ...
    kPluginEmitterNode: int = ...
    kPluginFieldNode: int = ...
    kPluginGeometryData: int = ...
    kPluginGeometryFilter: int = ...
    kPluginHardwareShader: int = ...
    kPluginHwShaderNode: int = ...
    kPluginIkSolver: int = ...
    kPluginImagePlaneNode: int = ...
    kPluginLocatorNode: int = ...
    kPluginManipContainer: int = ...
    kPluginManipulatorNode: int = ...
    kPluginMotionPathNode: int = ...
    kPluginObjectSet: int = ...
    kPluginParticleAttributeMapperNode: int = ...
    kPluginShape: int = ...
    kPluginSkinCluster: int = ...
    kPluginSpringNode: int = ...
    kPluginThreadedDevice: int = ...
    kPluginTransformNode: int = ...
    kPlusMinusAverage: int = ...
    kPointArrayData: int = ...
    kPointConstraint: int = ...
    kPointLight: int = ...
    kPointManip: int = ...
    kPointMatrixMult: int = ...
    kPointOnCurveInfo: int = ...
    kPointOnCurveManip: int = ...
    kPointOnLineManip: int = ...
    kPointOnPolyConstraint: int = ...
    kPointOnSurfaceInfo: int = ...
    kPointOnSurfaceManip: int = ...
    kPoleVectorConstraint: int = ...
    kPolyAppend: int = ...
    kPolyAppendVertex: int = ...
    kPolyArrow: int = ...
    kPolyAutoProj: int = ...
    kPolyAutoProjManip: int = ...
    kPolyAverageVertex: int = ...
    kPolyBevel: int = ...
    kPolyBevel2: int = ...
    kPolyBevel3: int = ...
    kPolyBlindData: int = ...
    kPolyBoolOp: int = ...
    kPolyBridgeEdge: int = ...
    kPolyCBoolOp: int = ...
    kPolyCaddyManip: int = ...
    kPolyChipOff: int = ...
    kPolyCircularize: int = ...
    kPolyClean: int = ...
    kPolyCloseBorder: int = ...
    kPolyCollapseEdge: int = ...
    kPolyCollapseF: int = ...
    kPolyColorDel: int = ...
    kPolyColorMod: int = ...
    kPolyColorPerVertex: int = ...
    kPolyComponentData: int = ...
    kPolyCone: int = ...
    kPolyConnectComponents: int = ...
    kPolyContourProj: int = ...
    kPolyCreaseEdge: int = ...
    kPolyCreateFacet: int = ...
    kPolyCreateToolManip: int = ...
    kPolyCreator: int = ...
    kPolyCube: int = ...
    kPolyCut: int = ...
    kPolyCutManip: int = ...
    kPolyCutManipContainer: int = ...
    kPolyCylProj: int = ...
    kPolyCylinder: int = ...
    kPolyDelEdge: int = ...
    kPolyDelFacet: int = ...
    kPolyDelVertex: int = ...
    kPolyDuplicateEdge: int = ...
    kPolyEdgeToCurve: int = ...
    kPolyEditEdgeFlow: int = ...
    kPolyExtrudeEdge: int = ...
    kPolyExtrudeFacet: int = ...
    kPolyExtrudeManip: int = ...
    kPolyExtrudeManipContainer: int = ...
    kPolyExtrudeVertex: int = ...
    kPolyFlipEdge: int = ...
    kPolyFlipUV: int = ...
    kPolyHelix: int = ...
    kPolyHoleFace: int = ...
    kPolyLayoutUV: int = ...
    kPolyMapCut: int = ...
    kPolyMapDel: int = ...
    kPolyMapSew: int = ...
    kPolyMapSewMove: int = ...
    kPolyMappingManip: int = ...
    kPolyMergeEdge: int = ...
    kPolyMergeFacet: int = ...
    kPolyMergeUV: int = ...
    kPolyMergeVert: int = ...
    kPolyMesh: int = ...
    kPolyMirror: int = ...
    kPolyMirrorManipContainer: int = ...
    kPolyModifierManip: int = ...
    kPolyModifierManipContainer: int = ...
    kPolyMoveEdge: int = ...
    kPolyMoveFacet: int = ...
    kPolyMoveFacetUV: int = ...
    kPolyMoveUV: int = ...
    kPolyMoveUVManip: int = ...
    kPolyMoveVertex: int = ...
    kPolyMoveVertexManip: int = ...
    kPolyMoveVertexUV: int = ...
    kPolyNormal: int = ...
    kPolyNormalPerVertex: int = ...
    kPolyNormalizeUV: int = ...
    kPolyPassThru: int = ...
    kPolyPinUV: int = ...
    kPolyPipe: int = ...
    kPolyPlanProj: int = ...
    kPolyPlatonicSolid: int = ...
    kPolyPoke: int = ...
    kPolyPokeManip: int = ...
    kPolyPrimitive: int = ...
    kPolyPrimitiveMisc: int = ...
    kPolyPrism: int = ...
    kPolyProj: int = ...
    kPolyProjectCurve: int = ...
    kPolyProjectionManip: int = ...
    kPolyPyramid: int = ...
    kPolyQuad: int = ...
    kPolyReduce: int = ...
    kPolyRemesh: int = ...
    kPolySelectEditFeedbackManip: int = ...
    kPolySeparate: int = ...
    kPolySewEdge: int = ...
    kPolySmooth: int = ...
    kPolySmoothFacet: int = ...
    kPolySmoothProxy: int = ...
    kPolySoftEdge: int = ...
    kPolySphProj: int = ...
    kPolySphere: int = ...
    kPolySpinEdge: int = ...
    kPolySplit: int = ...
    kPolySplitEdge: int = ...
    kPolySplitRing: int = ...
    kPolySplitToolManip: int = ...
    kPolySplitVert: int = ...
    kPolyStraightenUVBorder: int = ...
    kPolySubdEdge: int = ...
    kPolySubdFacet: int = ...
    kPolyToSubdiv: int = ...
    kPolyToolFeedbackManip: int = ...
    kPolyToolFeedbackShape: int = ...
    kPolyTorus: int = ...
    kPolyTransfer: int = ...
    kPolyTriangulate: int = ...
    kPolyTweak: int = ...
    kPolyTweakUV: int = ...
    kPolyUVRectangle: int = ...
    kPolyUnite: int = ...
    kPolyVertexNormalManip: int = ...
    kPolyWedgeFace: int = ...
    kPoseInterpolatorManager: int = ...
    kPositionMarker: int = ...
    kPostProcessList: int = ...
    kPrecompExport: int = ...
    kPrimitive: int = ...
    kPrimitiveFalloff: int = ...
    kProjectCurve: int = ...
    kProjectTangent: int = ...
    kProjectTangentManip: int = ...
    kProjection: int = ...
    kProjectionManip: int = ...
    kProjectionMultiManip: int = ...
    kProjectionUVManip: int = ...
    kPropModManip: int = ...
    kPropMoveTriadManip: int = ...
    kProximityFalloff: int = ...
    kProximityPin: int = ...
    kProximityWrap: int = ...
    kProxy: int = ...
    kProxyManager: int = ...
    kPsdFileTexture: int = ...
    kQuadPtOnLineManip: int = ...
    kQuadShadingSwitch: int = ...
    kRBFsurface: int = ...
    kRPsolver: int = ...
    kRadial: int = ...
    kRadius: int = ...
    kRamp: int = ...
    kRampBackground: int = ...
    kRampShader: int = ...
    kRbfSrfManip: int = ...
    kReForm: int = ...
    kRebuildCurve: int = ...
    kRebuildSurface: int = ...
    kRecord: int = ...
    kReference: int = ...
    kReflect: int = ...
    kRemapColor: int = ...
    kRemapHsv: int = ...
    kRemapValue: int = ...
    kRenderBox: int = ...
    kRenderCone: int = ...
    kRenderGlobals: int = ...
    kRenderGlobalsList: int = ...
    kRenderLayer: int = ...
    kRenderLayerManager: int = ...
    kRenderPass: int = ...
    kRenderPassSet: int = ...
    kRenderQuality: int = ...
    kRenderRect: int = ...
    kRenderSetup: int = ...
    kRenderSphere: int = ...
    kRenderTarget: int = ...
    kRenderUtilityList: int = ...
    kRenderedImageSource: int = ...
    kRenderingList: int = ...
    kReorderUVSet: int = ...
    kResolution: int = ...
    kResultCurve: int = ...
    kResultCurveTimeToAngular: int = ...
    kResultCurveTimeToDistance: int = ...
    kResultCurveTimeToTime: int = ...
    kResultCurveTimeToUnitless: int = ...
    kReverse: int = ...
    kReverseCrvManip: int = ...
    kReverseCurve: int = ...
    kReverseCurveManip: int = ...
    kReverseSurface: int = ...
    kReverseSurfaceManip: int = ...
    kRevolve: int = ...
    kRevolveManip: int = ...
    kRevolvedPrimitive: int = ...
    kRevolvedPrimitiveManip: int = ...
    kRgbToHsv: int = ...
    kRigid: int = ...
    kRigidConstraint: int = ...
    kRigidDeform: int = ...
    kRigidSolver: int = ...
    kRock: int = ...
    kRotateBoxManip: int = ...
    kRotateLimitsManip: int = ...
    kRotateManip: int = ...
    kRotateUVManip2D: int = ...
    kRoundConstantRadius: int = ...
    kRoundConstantRadiusManip: int = ...
    kRoundRadiusCrvManip: int = ...
    kRoundRadiusManip: int = ...
    kSCsolver: int = ...
    kSPbirailSrf: int = ...
    kSamplerInfo: int = ...
    kScaleConstraint: int = ...
    kScaleLimitsManip: int = ...
    kScaleManip: int = ...
    kScalePointManip: int = ...
    kScaleUVManip2D: int = ...
    kScalingBoxManip: int = ...
    kScreenAlignedCircleManip: int = ...
    kScript: int = ...
    kScriptManip: int = ...
    kSculpt: int = ...
    kSectionManip: int = ...
    kSelectionItem: int = ...
    kSelectionList: int = ...
    kSelectionListData: int = ...
    kSelectionListOperator: int = ...
    kSequenceManager: int = ...
    kSequencer: int = ...
    kSet: int = ...
    kSetGroupComponent: int = ...
    kSetRange: int = ...
    kSfRevolveManip: int = ...
    kShaderGlow: int = ...
    kShaderList: int = ...
    kShadingEngine: int = ...
    kShadingMap: int = ...
    kShape: int = ...
    kShapeEditorManager: int = ...
    kShapeFragment: int = ...
    kShot: int = ...
    kShrinkWrapFilter: int = ...
    kSimpleVolumeShader: int = ...
    kSingleIndexedComponent: int = ...
    kSingleShadingSwitch: int = ...
    kSketchPlane: int = ...
    kSkin: int = ...
    kSkinBinding: int = ...
    kSkinClusterFilter: int = ...
    kSkinShader: int = ...
    kSl60: int = ...
    kSmear: int = ...
    kSmoothCurve: int = ...
    kSmoothTangentSrf: int = ...
    kSnapUVManip2D: int = ...
    kSnapshot: int = ...
    kSnapshotPath: int = ...
    kSnapshotShape: int = ...
    kSnow: int = ...
    kSoftMod: int = ...
    kSoftModFilter: int = ...
    kSoftModManip: int = ...
    kSolidFractal: int = ...
    kSolidify: int = ...
    kSphere: int = ...
    kSphereData: int = ...
    kSphericalProjectionManip: int = ...
    kSplineSolver: int = ...
    kSpotCylinderManip: int = ...
    kSpotLight: int = ...
    kSpotManip: int = ...
    kSpring: int = ...
    kSprite: int = ...
    kSquareSrf: int = ...
    kSquareSrfManip: int = ...
    kStandardSurface: int = ...
    kStateManip: int = ...
    kStencil: int = ...
    kStereoCameraMaster: int = ...
    kStitchAsNurbsShell: int = ...
    kStitchSrf: int = ...
    kStitchSrfManip: int = ...
    kStoryBoard: int = ...
    kStringArrayData: int = ...
    kStringData: int = ...
    kStringShadingSwitch: int = ...
    kStroke: int = ...
    kStrokeGlobals: int = ...
    kStucco: int = ...
    kStudioClearCoat: int = ...
    kStyleCurve: int = ...
    kSubCurve: int = ...
    kSubSurface: int = ...
    kSubVertexComponent: int = ...
    kSubdAddTopology: int = ...
    kSubdAutoProj: int = ...
    kSubdBlindData: int = ...
    kSubdBoolean: int = ...
    kSubdCleanTopology: int = ...
    kSubdCloseBorder: int = ...
    kSubdDelFace: int = ...
    kSubdExtrudeFace: int = ...
    kSubdHierBlind: int = ...
    kSubdLayoutUV: int = ...
    kSubdMapCut: int = ...
    kSubdMapSewMove: int = ...
    kSubdMappingManip: int = ...
    kSubdMergeVert: int = ...
    kSubdModifier: int = ...
    kSubdModifyEdge: int = ...
    kSubdMoveEdge: int = ...
    kSubdMoveFace: int = ...
    kSubdMoveVertex: int = ...
    kSubdPlanProj: int = ...
    kSubdProjectionManip: int = ...
    kSubdSplitFace: int = ...
    kSubdSubdivideFace: int = ...
    kSubdTweak: int = ...
    kSubdTweakUV: int = ...
    kSubdiv: int = ...
    kSubdivCVComponent: int = ...
    kSubdivCollapse: int = ...
    kSubdivCompId: int = ...
    kSubdivData: int = ...
    kSubdivEdgeComponent: int = ...
    kSubdivFaceComponent: int = ...
    kSubdivGeom: int = ...
    kSubdivMapComponent: int = ...
    kSubdivReverseFaces: int = ...
    kSubdivSurfaceVarGroup: int = ...
    kSubdivToNurbs: int = ...
    kSubdivToPoly: int = ...
    kSubsetFalloff: int = ...
    kSummaryObject: int = ...
    kSuper: int = ...
    kSurface: int = ...
    kSurfaceCVComponent: int = ...
    kSurfaceEPComponent: int = ...
    kSurfaceEdManip: int = ...
    kSurfaceFaceComponent: int = ...
    kSurfaceInfo: int = ...
    kSurfaceKnotComponent: int = ...
    kSurfaceLuminance: int = ...
    kSurfaceRangeComponent: int = ...
    kSurfaceShader: int = ...
    kSurfaceVarGroup: int = ...
    kSymmetryConstraint: int = ...
    kSymmetryLocator: int = ...
    kSymmetryMapCurve: int = ...
    kSymmetryMapVector: int = ...
    kTangentConstraint: int = ...
    kTension: int = ...
    kTexLattice: int = ...
    kTexLatticeDeformManip: int = ...
    kTexSmoothManip: int = ...
    kTexSmudgeUVManip: int = ...
    kTextButtonManip: int = ...
    kTextCurves: int = ...
    kTextManip: int = ...
    kTexture2d: int = ...
    kTexture3d: int = ...
    kTextureBakeSet: int = ...
    kTextureDeformer: int = ...
    kTextureDeformerHandle: int = ...
    kTextureEnv: int = ...
    kTextureList: int = ...
    kTextureManip3D: int = ...
    kThreadedDevice: int = ...
    kThreePointArcManip: int = ...
    kTime: int = ...
    kTimeAttribute: int = ...
    kTimeEditor: int = ...
    kTimeEditorAnimSource: int = ...
    kTimeEditorClip: int = ...
    kTimeEditorClipBase: int = ...
    kTimeEditorClipEvaluator: int = ...
    kTimeEditorInterpolator: int = ...
    kTimeEditorTracks: int = ...
    kTimeFunction: int = ...
    kTimeToUnitConversion: int = ...
    kTimeWarp: int = ...
    kToggleManip: int = ...
    kToggleOnLineManip: int = ...
    kToolContext: int = ...
    kToonLineAttributes: int = ...
    kTorus: int = ...
    kTowPointManip: int = ...
    kTowPointOnCurveManip: int = ...
    kTowPointOnSurfaceManip: int = ...
    kTrackInfoManager: int = ...
    kTransferAttributes: int = ...
    kTransferFalloff: int = ...
    kTransform: int = ...
    kTransformBoxManip: int = ...
    kTransformGeometry: int = ...
    kTranslateBoxManip: int = ...
    kTranslateLimitsManip: int = ...
    kTranslateManip: int = ...
    kTranslateManip2D: int = ...
    kTranslateUVManip: int = ...
    kTranslateUVManip2D: int = ...
    kTriadManip: int = ...
    kTrim: int = ...
    kTrimLocator: int = ...
    kTrimManip: int = ...
    kTrimWithBoundaries: int = ...
    kTriplanarProjectionManip: int = ...
    kTripleIndexedComponent: int = ...
    kTripleShadingSwitch: int = ...
    kTrsInsertManip: int = ...
    kTrsManip: int = ...
    kTrsTransManip: int = ...
    kTrsXformManip: int = ...
    kTurbulence: int = ...
    kTweak: int = ...
    kTwoPointArcManip: int = ...
    kTxSl: int = ...
    kTypedAttribute: int = ...
    kUInt64ArrayData: int = ...
    kUVManip2D: int = ...
    kUVPin: int = ...
    kUfeProxyTransform: int = ...
    kUint64SingleIndexedComponent: int = ...
    kUintArrayData: int = ...
    kUnderWorld: int = ...
    kUniform: int = ...
    kUniformFalloff: int = ...
    kUnitAttribute: int = ...
    kUnitConversion: int = ...
    kUnitToTimeConversion: int = ...
    kUnknown: int = ...
    kUnknownDag: int = ...
    kUnknownTransform: int = ...
    kUntrim: int = ...
    kUnused1: int = ...
    kUnused2: int = ...
    kUnused3: int = ...
    kUnused4: int = ...
    kUnused5: int = ...
    kUnused6: int = ...
    kUseBackground: int = ...
    kUvChooser: int = ...
    kVectorArrayData: int = ...
    kVectorProduct: int = ...
    kVertexBakeSet: int = ...
    kVertexWeightSet: int = ...
    kViewColorManager: int = ...
    kViewManip: int = ...
    kVolumeAxis: int = ...
    kVolumeBindManip: int = ...
    kVolumeFog: int = ...
    kVolumeLight: int = ...
    kVolumeNoise: int = ...
    kVolumeShader: int = ...
    kVortex: int = ...
    kWater: int = ...
    kWeightFunctionData: int = ...
    kWeightGeometryFilt: int = ...
    kWire: int = ...
    kWood: int = ...
    kWorld: int = ...
    kWrapFilter: int = ...
    kWriteToColorBuffer: int = ...
    kWriteToDepthBuffer: int = ...
    kWriteToFrameBuffer: int = ...
    kWriteToLabelBuffer: int = ...
    kWriteToVectorBuffer: int = ...
    kXformManip: int = ...
    kXsectionSubdivEdit: int = ...
    nodeType: property = ...
    thisown: property = ...

class MFnBase:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any, kwargs: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self, *args: Any, **kwargs: Any) -> Any: ...

class MFnDependencyNode(MFnBase):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __init_subclass__(self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def absoluteName(self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self, *args: Any, **kwargs: Any) -> Any: ...
    def enableDGTiming(self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedByAttributes(self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self, *args: Any, **kwargs: Any) -> Any: ...
    def icon(self, *args: Any, **kwargs: Any) -> Any: ...
    def isDefaultNode(self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self, *args: Any, **kwargs: Any) -> Any: ...
    def isFromReferencedFile(self, *args: Any, **kwargs: Any) -> Any: ...
    def isLocked(self, *args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def isShared(self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self, *args: Any, **kwargs: Any) -> Any: ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNormalAttr: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    def name(self, *args: Any, **kwargs: Any) -> Any: ...
    def parentNamespace(self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginName(self, *args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self, *args: Any, **kwargs: Any) -> Any: ...
    def setIcon(self, *args: Any, **kwargs: Any) -> Any: ...
    def setLocked(self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def typeId(self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self, *args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self, *args: Any, **kwargs: Any) -> Any: ...

class MFnDagNode(MFnDependencyNode):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def activeColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def addChild(self, *args: Any, **kwargs: Any) -> Any: ...
    def boundingBox(self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self, *args: Any, **kwargs: Any) -> Any: ...
    def childCount(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def dagPath(self, *args: Any, **kwargs: Any) -> Any: ...
    def dagRoot(self, *args: Any, **kwargs: Any) -> Any: ...
    def dormantColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideEnabled(self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsReference(self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsTemplate(self, *args: Any, **kwargs: Any) -> Any: ...
    def duplicate(self, *args: Any, **kwargs: Any) -> Any: ...
    def fullPathName(self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllPaths(self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedSetsAndMembers(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPath(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasChild(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasParent(self, *args: Any, **kwargs: Any) -> Any: ...
    def hiliteColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def inModel(self, *args: Any, **kwargs: Any) -> Any: ...
    def inUnderWorld(self, *args: Any, **kwargs: Any) -> Any: ...
    def instanceCount(self, *args: Any, **kwargs: Any) -> Any: ...
    def isChildOf(self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanceable(self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanced(self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstancedAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def isIntermediateObject(self, *args: Any, **kwargs: Any) -> Any: ...
    def isParentOf(self, *args: Any, **kwargs: Any) -> Any: ...
    kNextPos: int = ...
    def model(self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorRGB(self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorType(self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupComponent(self, *args: Any, **kwargs: Any) -> Any: ...
    def parent(self, *args: Any, **kwargs: Any) -> Any: ...
    def parentCount(self, *args: Any, **kwargs: Any) -> Any: ...
    def partialPathName(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChild(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChildAt(self, *args: Any, **kwargs: Any) -> Any: ...
    def setInstanceable(self, *args: Any, **kwargs: Any) -> Any: ...
    def setIntermediateObject(self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColorType(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseObjectColor(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transformationMatrix(self, *args: Any, **kwargs: Any) -> Any: ...
    def usingHiliteColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def usingObjectColor(self, *args: Any, **kwargs: Any) -> Any: ...

class MFnLight(MFnDagNode):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def centerOfIllumination(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def color(self, *args: Any, **kwargs: Any) -> Any: ...
    def intensity(self, *args: Any, **kwargs: Any) -> Any: ...
    def lightAmbient(self, *args: Any, **kwargs: Any) -> Any: ...
    def lightDiffuse(self, *args: Any, **kwargs: Any) -> Any: ...
    def lightDirection(self, *args: Any, **kwargs: Any) -> Any: ...
    def lightIntensity(self, *args: Any, **kwargs: Any) -> Any: ...
    def lightSpecular(self, *args: Any, **kwargs: Any) -> Any: ...
    def numShadowSamples(self, *args: Any, **kwargs: Any) -> Any: ...
    def opticalFXvisibility(self, *args: Any, **kwargs: Any) -> Any: ...
    def rayDepthLimit(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCenterOfIllumination(self, *args: Any, **kwargs: Any) -> Any: ...
    def setColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def setIntensity(self, *args: Any, **kwargs: Any) -> Any: ...
    def setNumShadowSamples(self, *args: Any, **kwargs: Any) -> Any: ...
    def setOpticalFXvisibility(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRayDepthLimit(self, *args: Any, **kwargs: Any) -> Any: ...
    def setShadowColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseRayTraceShadows(self, *args: Any, **kwargs: Any) -> Any: ...
    def shadowColor(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def useRayTraceShadows(self, *args: Any, **kwargs: Any) -> Any: ...

class MFnAmbientLight(MFnLight):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def ambientShade(self, *args: Any, **kwargs: Any) -> Any: ...
    def castSoftShadows(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def setAmbientShade(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCastSoftShadows(self, *args: Any, **kwargs: Any) -> Any: ...
    def setShadowRadius(self, *args: Any, **kwargs: Any) -> Any: ...
    def shadowRadius(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnAnisotropyShader(MFnDependencyNode):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __init_subclass__(self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def anisotropicReflectivity(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def correlationX(self, *args: Any, **kwargs: Any) -> Any: ...
    def correlationY(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def refractiveIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateAngle(self, *args: Any, **kwargs: Any) -> Any: ...
    def roughness(self, *args: Any, **kwargs: Any) -> Any: ...
    def setAnisotropicReflectivity(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCorrelationX(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCorrelationY(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRefractiveIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotateAngle(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRoughness(self, *args: Any, **kwargs: Any) -> Any: ...
    def setTangentUCamera(self, *args: Any, **kwargs: Any) -> Any: ...
    def setTangentVCamera(self, *args: Any, **kwargs: Any) -> Any: ...
    def tangentUCamera(self, *args: Any, **kwargs: Any) -> Any: ...
    def tangentVCamera(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnNonAmbientLight(MFnLight):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def decayRate(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDecayRate(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnNonExtendedLight(MFnNonAmbientLight):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def castSoftShadows(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def depthMapBias(self, *args: Any, **kwargs: Any) -> Any: ...
    def depthMapFilterSize(self, *args: Any, **kwargs: Any) -> Any: ...
    def depthMapFocus(self, *args: Any, **kwargs: Any) -> Any: ...
    def depthMapResolution(self, *args: Any, **kwargs: Any) -> Any: ...
    def depthMapWidthFocus(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCastSoftShadows(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDepthMapBias(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDepthMapFilterSize(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDepthMapFocus(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDepthMapResolution(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDepthMapWidthFocus(self, *args: Any, **kwargs: Any) -> Any: ...
    def setShadowRadius(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseDepthMapAutoFocus(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseDepthMapShadows(self, *args: Any, **kwargs: Any) -> Any: ...
    def shadowRadius(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def useDepthMapAutoFocus(self, *args: Any, **kwargs: Any) -> Any: ...
    def useDepthMapShadows(self, *args: Any, **kwargs: Any) -> Any: ...

class MFnAreaLight(MFnNonExtendedLight):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnData(MFnBase):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    kAny: int = ...
    kComponentList: int = ...
    kDoubleArray: int = ...
    kDynArrayAttrs: int = ...
    kDynSweptGeometry: int = ...
    kFalloffFunction: int = ...
    kFloatArray: int = ...
    kIntArray: int = ...
    kInvalid: int = ...
    kLast: int = ...
    kLattice: int = ...
    kMatrix: int = ...
    kMatrixArray: int = ...
    kMesh: int = ...
    kNId: int = ...
    kNObject: int = ...
    kNumeric: int = ...
    kNurbsCurve: int = ...
    kNurbsSurface: int = ...
    kPlugin: int = ...
    kPluginGeometry: int = ...
    kPointArray: int = ...
    kSphere: int = ...
    kString: int = ...
    kStringArray: int = ...
    kSubdSurface: int = ...
    kVectorArray: int = ...
    thisown: property = ...

class MFnArrayAttrsData(MFnData):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def checkArrayExist(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self, *args: Any, **kwargs: Any) -> Any: ...
    def count(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def doubleArray(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDoubleData(self, *args: Any, **kwargs: Any) -> Any: ...
    def getIntData(self, *args: Any, **kwargs: Any) -> Any: ...
    def getStringData(self, *args: Any, **kwargs: Any) -> Any: ...
    def getVectorData(self, *args: Any, **kwargs: Any) -> Any: ...
    def intArray(self, *args: Any, **kwargs: Any) -> Any: ...
    def list(self, *args: Any, **kwargs: Any) -> Any: ...
    def stringArray(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def vectorArray(self, *args: Any, **kwargs: Any) -> Any: ...

class MFnAssembly(MFnDagNode):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __init_subclass__(self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def activate(self, *args: Any, **kwargs: Any) -> Any: ...
    def activateNonRecursive(self, *args: Any, **kwargs: Any) -> Any: ...
    def canActivate(self, *args: Any, **kwargs: Any) -> Any: ...
    def canRepApplyEdits(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def createRepresentation(self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteAllRepresentations(self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteRepresentation(self, *args: Any, **kwargs: Any) -> Any: ...
    def getAbsoluteRepNamespace(self, *args: Any, **kwargs: Any) -> Any: ...
    def getActive(self, *args: Any, **kwargs: Any) -> Any: ...
    def getInitialRep(self, *args: Any, **kwargs: Any) -> Any: ...
    def getParentAssembly(self, *args: Any, **kwargs: Any) -> Any: ...
    def getRepLabel(self, *args: Any, **kwargs: Any) -> Any: ...
    def getRepNamespace(self, *args: Any, **kwargs: Any) -> Any: ...
    def getRepType(self, *args: Any, **kwargs: Any) -> Any: ...
    def getRepresentations(self, *args: Any, **kwargs: Any) -> Any: ...
    def getSubAssemblies(self, *args: Any, **kwargs: Any) -> Any: ...
    def getTopLevelAssemblies(self, *args: Any, **kwargs: Any) -> Any: ...
    def handlesAddEdits(self, *args: Any, **kwargs: Any) -> Any: ...
    def importFile(self, *args: Any, **kwargs: Any) -> Any: ...
    def isActive(self, *args: Any, **kwargs: Any) -> Any: ...
    def isTopLevel(self, *args: Any, **kwargs: Any) -> Any: ...
    def postLoad(self, *args: Any, **kwargs: Any) -> Any: ...
    def repTypes(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRepLabel(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRepName(self, *args: Any, **kwargs: Any) -> Any: ...
    def supportsEdits(self, *args: Any, **kwargs: Any) -> Any: ...
    def supportsMemberChanges(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnAttribute(MFnBase):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def accepts(self, *args: Any, **kwargs: Any) -> Any: ...
    def acceptsAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def addToCategory(self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAppearance(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def disconnectBehavior(self, *args: Any, **kwargs: Any) -> Any: ...
    def getAddAttrCmd(self, *args: Any, **kwargs: Any) -> Any: ...
    def getCategories(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasCategory(self, *args: Any, **kwargs: Any) -> Any: ...
    def indexMatters(self, *args: Any, **kwargs: Any) -> Any: ...
    def internal(self, *args: Any, **kwargs: Any) -> Any: ...
    def isAffectsWorldSpace(self, *args: Any, **kwargs: Any) -> Any: ...
    def isArray(self, *args: Any, **kwargs: Any) -> Any: ...
    def isCached(self, *args: Any, **kwargs: Any) -> Any: ...
    def isChannelBoxFlagSet(self, *args: Any, **kwargs: Any) -> Any: ...
    def isConnectable(self, *args: Any, **kwargs: Any) -> Any: ...
    def isDynamic(self, *args: Any, **kwargs: Any) -> Any: ...
    def isExtension(self, *args: Any, **kwargs: Any) -> Any: ...
    def isHidden(self, *args: Any, **kwargs: Any) -> Any: ...
    def isIndeterminant(self, *args: Any, **kwargs: Any) -> Any: ...
    def isKeyable(self, *args: Any, **kwargs: Any) -> Any: ...
    def isProxyAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def isReadable(self, *args: Any, **kwargs: Any) -> Any: ...
    def isRenderSource(self, *args: Any, **kwargs: Any) -> Any: ...
    def isStorable(self, *args: Any, **kwargs: Any) -> Any: ...
    def isUsedAsColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def isUsedAsFilename(self, *args: Any, **kwargs: Any) -> Any: ...
    def isWorldSpace(self, *args: Any, **kwargs: Any) -> Any: ...
    def isWritable(self, *args: Any, **kwargs: Any) -> Any: ...
    kDelete: int = ...
    kNothing: int = ...
    kReset: int = ...
    def name(self, *args: Any, **kwargs: Any) -> Any: ...
    def parent(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeFromCategory(self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAppearance(self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsWorldSpace(self, *args: Any, **kwargs: Any) -> Any: ...
    def setArray(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCached(self, *args: Any, **kwargs: Any) -> Any: ...
    def setChannelBox(self, *args: Any, **kwargs: Any) -> Any: ...
    def setConnectable(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDisconnectBehavior(self, *args: Any, **kwargs: Any) -> Any: ...
    def setHidden(self, *args: Any, **kwargs: Any) -> Any: ...
    def setIndeterminant(self, *args: Any, **kwargs: Any) -> Any: ...
    def setIndexMatters(self, *args: Any, **kwargs: Any) -> Any: ...
    def setInternal(self, *args: Any, **kwargs: Any) -> Any: ...
    def setKeyable(self, *args: Any, **kwargs: Any) -> Any: ...
    def setNiceNameOverride(self, *args: Any, **kwargs: Any) -> Any: ...
    def setProxyAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def setReadable(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRenderSource(self, *args: Any, **kwargs: Any) -> Any: ...
    def setStorable(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUsedAsColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUsedAsFilename(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUsesArrayDataBuilder(self, *args: Any, **kwargs: Any) -> Any: ...
    def setWorldSpace(self, *args: Any, **kwargs: Any) -> Any: ...
    def setWritable(self, *args: Any, **kwargs: Any) -> Any: ...
    def shortName(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def usesArrayDataBuilder(self, *args: Any, **kwargs: Any) -> Any: ...

class MFnLambertShader(MFnDependencyNode):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def ambientColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def color(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def diffuseCoeff(self, *args: Any, **kwargs: Any) -> Any: ...
    def glowIntensity(self, *args: Any, **kwargs: Any) -> Any: ...
    def hideSource(self, *args: Any, **kwargs: Any) -> Any: ...
    def incandescence(self, *args: Any, **kwargs: Any) -> Any: ...
    def refractedRayDepthLimit(self, *args: Any, **kwargs: Any) -> Any: ...
    def refractiveIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def rtRefractedColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def setAmbientColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def setColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDiffuseCoeff(self, *args: Any, **kwargs: Any) -> Any: ...
    def setGlowIntensity(self, *args: Any, **kwargs: Any) -> Any: ...
    def setHideSource(self, *args: Any, **kwargs: Any) -> Any: ...
    def setIncandescence(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRefractedRayDepthLimit(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRefractiveIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRtRefractedColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def setTranslucenceCoeff(self, *args: Any, **kwargs: Any) -> Any: ...
    def setTransparency(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def translucenceCoeff(self, *args: Any, **kwargs: Any) -> Any: ...
    def transparency(self, *args: Any, **kwargs: Any) -> Any: ...

class MFnReflectShader(MFnLambertShader):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def reflectedColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def reflectedRayDepthLimit(self, *args: Any, **kwargs: Any) -> Any: ...
    def reflectivity(self, *args: Any, **kwargs: Any) -> Any: ...
    def setReflectedColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def setReflectedRayDepthLimit(self, *args: Any, **kwargs: Any) -> Any: ...
    def setReflectivity(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSpecularColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def specularColor(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnBlinnShader(MFnReflectShader):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def eccentricity(self, *args: Any, **kwargs: Any) -> Any: ...
    def setEccentricity(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSpecularRollOff(self, *args: Any, **kwargs: Any) -> Any: ...
    def specularRollOff(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnCamera(MFnDagNode):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def aspectRatio(self, *args: Any, **kwargs: Any) -> Any: ...
    def cameraScale(self, *args: Any, **kwargs: Any) -> Any: ...
    def centerOfInterest(self, *args: Any, **kwargs: Any) -> Any: ...
    def centerOfInterestPoint(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def computeDepthOfField(self, *args: Any, **kwargs: Any) -> Any: ...
    def copyViewFrom(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def eyePoint(self, *args: Any, **kwargs: Any) -> Any: ...
    def fStop(self, *args: Any, **kwargs: Any) -> Any: ...
    def farClippingPlane(self, *args: Any, **kwargs: Any) -> Any: ...
    def farFocusDistance(self, *args: Any, **kwargs: Any) -> Any: ...
    def filmFit(self, *args: Any, **kwargs: Any) -> Any: ...
    def filmFitOffset(self, *args: Any, **kwargs: Any) -> Any: ...
    def filmRollOrder(self, *args: Any, **kwargs: Any) -> Any: ...
    def filmRollValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def filmTranslateH(self, *args: Any, **kwargs: Any) -> Any: ...
    def filmTranslateV(self, *args: Any, **kwargs: Any) -> Any: ...
    def focalLength(self, *args: Any, **kwargs: Any) -> Any: ...
    def focusDistance(self, *args: Any, **kwargs: Any) -> Any: ...
    def getAspectRatioLimits(self, *args: Any, **kwargs: Any) -> Any: ...
    def getFilmApertureLimits(self, *args: Any, **kwargs: Any) -> Any: ...
    def getFilmFrustum(self, *args: Any, **kwargs: Any) -> Any: ...
    def getFocalLengthLimits(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPortFieldOfView(self, *args: Any, **kwargs: Any) -> Any: ...
    def getRenderingFrustum(self, *args: Any, **kwargs: Any) -> Any: ...
    def getViewParameters(self, *args: Any, **kwargs: Any) -> Any: ...
    def getViewingFrustum(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasSamePerspective(self, *args: Any, **kwargs: Any) -> Any: ...
    def horizontalFieldOfView(self, *args: Any, **kwargs: Any) -> Any: ...
    def horizontalFilmAperture(self, *args: Any, **kwargs: Any) -> Any: ...
    def horizontalFilmOffset(self, *args: Any, **kwargs: Any) -> Any: ...
    def horizontalPan(self, *args: Any, **kwargs: Any) -> Any: ...
    def horizontalRollPivot(self, *args: Any, **kwargs: Any) -> Any: ...
    def horizontalShake(self, *args: Any, **kwargs: Any) -> Any: ...
    def isClippingPlanes(self, *args: Any, **kwargs: Any) -> Any: ...
    def isDepthOfField(self, *args: Any, **kwargs: Any) -> Any: ...
    def isDisplayFilmGate(self, *args: Any, **kwargs: Any) -> Any: ...
    def isDisplayGateMask(self, *args: Any, **kwargs: Any) -> Any: ...
    def isMotionBlur(self, *args: Any, **kwargs: Any) -> Any: ...
    def isOrtho(self, *args: Any, **kwargs: Any) -> Any: ...
    def isVerticalLock(self, *args: Any, **kwargs: Any) -> Any: ...
    def lensSqueezeRatio(self, *args: Any, **kwargs: Any) -> Any: ...
    def nearClippingPlane(self, *args: Any, **kwargs: Any) -> Any: ...
    def nearFocusDistance(self, *args: Any, **kwargs: Any) -> Any: ...
    def orthoWidth(self, *args: Any, **kwargs: Any) -> Any: ...
    def overscan(self, *args: Any, **kwargs: Any) -> Any: ...
    def panZoomEnabled(self, *args: Any, **kwargs: Any) -> Any: ...
    def postProjectionMatrix(self, *args: Any, **kwargs: Any) -> Any: ...
    def postScale(self, *args: Any, **kwargs: Any) -> Any: ...
    def preScale(self, *args: Any, **kwargs: Any) -> Any: ...
    def projectionMatrix(self, *args: Any, **kwargs: Any) -> Any: ...
    def renderPanZoom(self, *args: Any, **kwargs: Any) -> Any: ...
    def rightDirection(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    def setAspectRatio(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCameraScale(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCenterOfInterest(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCenterOfInterestPoint(self, *args: Any, **kwargs: Any) -> Any: ...
    def setClippingPlanes(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDepthOfField(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDisplayFilmGate(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDisplayGateMask(self, *args: Any, **kwargs: Any) -> Any: ...
    def setEyePoint(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFStop(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFarClippingPlane(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFarFocusDistance(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFilmFit(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFilmFitOffset(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFilmRollOrder(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFilmRollValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFilmTranslateH(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFilmTranslateV(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFocalLength(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFocusDistance(self, *args: Any, **kwargs: Any) -> Any: ...
    def setHorizontalFieldOfView(self, *args: Any, **kwargs: Any) -> Any: ...
    def setHorizontalFilmAperture(self, *args: Any, **kwargs: Any) -> Any: ...
    def setHorizontalFilmOffset(self, *args: Any, **kwargs: Any) -> Any: ...
    def setHorizontalPan(self, *args: Any, **kwargs: Any) -> Any: ...
    def setHorizontalRollPivot(self, *args: Any, **kwargs: Any) -> Any: ...
    def setHorizontalShake(self, *args: Any, **kwargs: Any) -> Any: ...
    def setIsOrtho(self, *args: Any, **kwargs: Any) -> Any: ...
    def setLensSqueezeRatio(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMotionBlur(self, *args: Any, **kwargs: Any) -> Any: ...
    def setNearClippingPlane(self, *args: Any, **kwargs: Any) -> Any: ...
    def setNearFarClippingPlanes(self, *args: Any, **kwargs: Any) -> Any: ...
    def setNearFocusDistance(self, *args: Any, **kwargs: Any) -> Any: ...
    def setOrthoWidth(self, *args: Any, **kwargs: Any) -> Any: ...
    def setOverscan(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPanZoomEnabled(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPostScale(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPreScale(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRenderPanZoom(self, *args: Any, **kwargs: Any) -> Any: ...
    def setShakeEnabled(self, *args: Any, **kwargs: Any) -> Any: ...
    def setShakeOverscan(self, *args: Any, **kwargs: Any) -> Any: ...
    def setShakeOverscanEnabled(self, *args: Any, **kwargs: Any) -> Any: ...
    def setShutterAngle(self, *args: Any, **kwargs: Any) -> Any: ...
    def setStereoHIT(self, *args: Any, **kwargs: Any) -> Any: ...
    def setStereoHITEnabled(self, *args: Any, **kwargs: Any) -> Any: ...
    def setTumblePivot(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUsePivotAsLocalSpace(self, *args: Any, **kwargs: Any) -> Any: ...
    def setVerticalFieldOfView(self, *args: Any, **kwargs: Any) -> Any: ...
    def setVerticalFilmAperture(self, *args: Any, **kwargs: Any) -> Any: ...
    def setVerticalFilmOffset(self, *args: Any, **kwargs: Any) -> Any: ...
    def setVerticalLock(self, *args: Any, **kwargs: Any) -> Any: ...
    def setVerticalPan(self, *args: Any, **kwargs: Any) -> Any: ...
    def setVerticalRollPivot(self, *args: Any, **kwargs: Any) -> Any: ...
    def setVerticalShake(self, *args: Any, **kwargs: Any) -> Any: ...
    def setZoom(self, *args: Any, **kwargs: Any) -> Any: ...
    def shakeEnabled(self, *args: Any, **kwargs: Any) -> Any: ...
    def shakeOverscan(self, *args: Any, **kwargs: Any) -> Any: ...
    def shakeOverscanEnabled(self, *args: Any, **kwargs: Any) -> Any: ...
    def shutterAngle(self, *args: Any, **kwargs: Any) -> Any: ...
    def stereoHIT(self, *args: Any, **kwargs: Any) -> Any: ...
    def stereoHITEnabled(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def tumblePivot(self, *args: Any, **kwargs: Any) -> Any: ...
    def unnormalizedFarClippingPlane(self, *args: Any, **kwargs: Any) -> Any: ...
    def unnormalizedNearClippingPlane(self, *args: Any, **kwargs: Any) -> Any: ...
    def upDirection(self, *args: Any, **kwargs: Any) -> Any: ...
    def usePivotAsLocalSpace(self, *args: Any, **kwargs: Any) -> Any: ...
    def verticalFieldOfView(self, *args: Any, **kwargs: Any) -> Any: ...
    def verticalFilmAperture(self, *args: Any, **kwargs: Any) -> Any: ...
    def verticalFilmOffset(self, *args: Any, **kwargs: Any) -> Any: ...
    def verticalPan(self, *args: Any, **kwargs: Any) -> Any: ...
    def verticalRollPivot(self, *args: Any, **kwargs: Any) -> Any: ...
    def verticalShake(self, *args: Any, **kwargs: Any) -> Any: ...
    def viewDirection(self, *args: Any, **kwargs: Any) -> Any: ...
    def zoom(self, *args: Any, **kwargs: Any) -> Any: ...

class MFnCameraSet(MFnDependencyNode):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def appendLayer(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteLayer(self, *args: Any, **kwargs: Any) -> Any: ...
    def getLayerCamera(self, *args: Any, **kwargs: Any) -> Any: ...
    def getLayerClearDepthValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def getLayerOrder(self, *args: Any, **kwargs: Any) -> Any: ...
    def getLayerSceneData(self, *args: Any, **kwargs: Any) -> Any: ...
    def getNumLayers(self, *args: Any, **kwargs: Any) -> Any: ...
    def getSortedIndices(self, *args: Any, **kwargs: Any) -> Any: ...
    def insertLayer(self, *args: Any, **kwargs: Any) -> Any: ...
    def isLayerActive(self, *args: Any, **kwargs: Any) -> Any: ...
    def setLayerActive(self, *args: Any, **kwargs: Any) -> Any: ...
    def setLayerCamera(self, *args: Any, **kwargs: Any) -> Any: ...
    def setLayerClearDepthValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def setLayerOrder(self, *args: Any, **kwargs: Any) -> Any: ...
    def setLayerSceneData(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnComponent(MFnBase):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def componentType(self, *args: Any, **kwargs: Any) -> Any: ...
    def elementCount(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasWeights(self, *args: Any, **kwargs: Any) -> Any: ...
    def isComplete(self, *args: Any, **kwargs: Any) -> Any: ...
    def isEmpty(self, *args: Any, **kwargs: Any) -> Any: ...
    def isEqual(self, *args: Any, **kwargs: Any) -> Any: ...
    def setComplete(self, *args: Any, **kwargs: Any) -> Any: ...
    def setWeight(self, *args: Any, **kwargs: Any) -> Any: ...
    def setWeights(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def weight(self, *args: Any, **kwargs: Any) -> Any: ...

class MFnComponentListData(MFnData):
    __dict__: mappingproxy = ...
    def __getitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def add(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def has(self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnCompoundAttribute(MFnAttribute):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addChild(self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def getAddAttrCmds(self, *args: Any, **kwargs: Any) -> Any: ...
    def numChildren(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChild(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnContainerNode(MFnDependencyNode):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self, *args: Any, **kwargs: Any) -> Any: ...
    def getCurrentAsMObject(self, *args: Any, **kwargs: Any) -> Any: ...
    def getMembers(self, *args: Any, **kwargs: Any) -> Any: ...
    def getParentContainer(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPublishedNames(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPublishedNodes(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPublishedPlugs(self, *args: Any, **kwargs: Any) -> Any: ...
    def getRootTransform(self, *args: Any, **kwargs: Any) -> Any: ...
    def getSubcontainers(self, *args: Any, **kwargs: Any) -> Any: ...
    def isCurrent(self, *args: Any, **kwargs: Any) -> Any: ...
    def makeCurrent(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnDirectionalLight(MFnNonExtendedLight):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def setShadowAngle(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseLightPosition(self, *args: Any, **kwargs: Any) -> Any: ...
    def shadowAngle(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def useLightPosition(self, *args: Any, **kwargs: Any) -> Any: ...

class MFnDoubleArrayData(MFnData):
    __dict__: mappingproxy = ...
    def __getitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def array(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def copyTo(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnDoubleIndexedComponent(MFnComponent):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addElement(self, *args: Any, **kwargs: Any) -> Any: ...
    def addElements(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def getCompleteData(self, *args: Any, **kwargs: Any) -> Any: ...
    def getElement(self, *args: Any, **kwargs: Any) -> Any: ...
    def getElements(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCompleteData(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnEnumAttribute(MFnAttribute):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addField(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def defaultValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def fieldIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def fieldName(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDefault(self, *args: Any, **kwargs: Any) -> Any: ...
    def getMax(self, *args: Any, **kwargs: Any) -> Any: ...
    def getMin(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDefault(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnExpression(MFnDependencyNode):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def evaluate(self, *args: Any, **kwargs: Any) -> Any: ...
    def expression(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDefaultObject(self, *args: Any, **kwargs: Any) -> Any: ...
    def isAnimated(self, *args: Any, **kwargs: Any) -> Any: ...
    def setAnimated(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDefaultObject(self, *args: Any, **kwargs: Any) -> Any: ...
    def setExpression(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUnitConversion(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def unitConversion(self, *args: Any, **kwargs: Any) -> Any: ...

class MFnFloatArrayData(MFnData):
    __dict__: mappingproxy = ...
    def __getitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def array(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def copyTo(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnGenericAttribute(MFnAttribute):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addAccept(self, *args: Any, **kwargs: Any) -> Any: ...
    def addDataAccept(self, *args: Any, **kwargs: Any) -> Any: ...
    def addNumericDataAccept(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAccept(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeDataAccept(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeNumericDataAccept(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnGeometryData(MFnData):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addComponentTag(self, *args: Any, **kwargs: Any) -> Any: ...
    def addObjectGroup(self, *args: Any, **kwargs: Any) -> Any: ...
    def addObjectGroupComponent(self, *args: Any, **kwargs: Any) -> Any: ...
    def changeObjectGroupId(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def componentTagCategory(self, *args: Any, **kwargs: Any) -> Any: ...
    def componentTagContents(self, *args: Any, **kwargs: Any) -> Any: ...
    def componentTagExpressionSubsetState(self, *args: Any, **kwargs: Any) -> Any: ...
    def componentTagType(self, *args: Any, **kwargs: Any) -> Any: ...
    def componentTags(self, *args: Any, **kwargs: Any) -> Any: ...
    def copyObjectGroups(self, *args: Any, **kwargs: Any) -> Any: ...
    def getMatrix(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasComponentTag(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObjectGroup(self, *args: Any, **kwargs: Any) -> Any: ...
    def matrixIsIdentity(self, *args: Any, **kwargs: Any) -> Any: ...
    def matrixIsNotIdentity(self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroup(self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupComponent(self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupCount(self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupSubsetState(self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupType(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeComponentTag(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeObjectGroup(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeObjectGroupComponent(self, *args: Any, **kwargs: Any) -> Any: ...
    def renameComponentTag(self, *args: Any, **kwargs: Any) -> Any: ...
    def resolveComponentTagExpression(self, *args: Any, **kwargs: Any) -> Any: ...
    def setComponentTagContents(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMatrix(self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectGroupComponent(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnIntArrayData(MFnData):
    __dict__: mappingproxy = ...
    def __getitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def array(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def copyTo(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnLatticeData(MFnGeometryData):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def lattice(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnLayeredShader(MFnDependencyNode):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def color(self, *args: Any, **kwargs: Any) -> Any: ...
    def compositingFlag(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def glowColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def hardwareColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def hardwareShader(self, *args: Any, **kwargs: Any) -> Any: ...
    def setColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCompositingFlag(self, *args: Any, **kwargs: Any) -> Any: ...
    def setGlowColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def setHardwareColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def setHardwareShader(self, *args: Any, **kwargs: Any) -> Any: ...
    def setTransparency(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transparency(self, *args: Any, **kwargs: Any) -> Any: ...

class MFnLightDataAttribute(MFnAttribute):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDefault(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDefault(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnMatrixArrayData(MFnData):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def array(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def copyTo(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnMatrixAttribute(MFnAttribute):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDefault(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDefault(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnMatrixData(MFnData):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def isTransformation(self, *args: Any, **kwargs: Any) -> Any: ...
    def matrix(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transformation(self, *args: Any, **kwargs: Any) -> Any: ...

class MFnMesh(MFnDagNode):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addHoles(self, *args: Any, **kwargs: Any) -> Any: ...
    def addPolygon(self, *args: Any, **kwargs: Any) -> Any: ...
    def allIntersections(self, *args: Any, **kwargs: Any) -> Any: ...
    def anyIntersection(self, *args: Any, **kwargs: Any) -> Any: ...
    def assignColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def assignColors(self, *args: Any, **kwargs: Any) -> Any: ...
    def assignUV(self, *args: Any, **kwargs: Any) -> Any: ...
    def assignUVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def autoUniformGridParams(self, *args: Any, **kwargs: Any) -> Any: ...
    def binaryBlindDataComponentId(self, *args: Any, **kwargs: Any) -> Any: ...
    def booleanOp(self, *args: Any, **kwargs: Any) -> Any: ...
    def booleanOps(self, *args: Any, **kwargs: Any) -> Any: ...
    def cachedIntersectionAcceleratorInfo(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def cleanupEdgeSmoothing(self, *args: Any, **kwargs: Any) -> Any: ...
    def clearBlindData(self, *args: Any, **kwargs: Any) -> Any: ...
    def clearColors(self, *args: Any, **kwargs: Any) -> Any: ...
    def clearGlobalIntersectionAcceleratorInfo(self, *args: Any, **kwargs: Any) -> Any: ...
    def clearUVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def closestIntersection(self, *args: Any, **kwargs: Any) -> Any: ...
    def collapseEdges(self, *args: Any, **kwargs: Any) -> Any: ...
    def collapseFaces(self, *args: Any, **kwargs: Any) -> Any: ...
    def componentTypeFromName(self, *args: Any, **kwargs: Any) -> Any: ...
    def componentTypeName(self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self, *args: Any, **kwargs: Any) -> Any: ...
    def copyInPlace(self, *args: Any, **kwargs: Any) -> Any: ...
    def copyUVSetWithName(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def createBlindDataType(self, *args: Any, **kwargs: Any) -> Any: ...
    def createColorSetDataMesh(self, *args: Any, **kwargs: Any) -> Any: ...
    def createColorSetWithName(self, *args: Any, **kwargs: Any) -> Any: ...
    def createColorSetWithNameDataMesh(self, *args: Any, **kwargs: Any) -> Any: ...
    def createInPlace(self, *args: Any, **kwargs: Any) -> Any: ...
    def createUVSetDataMeshWithName(self, *args: Any, **kwargs: Any) -> Any: ...
    def createUVSetWithName(self, *args: Any, **kwargs: Any) -> Any: ...
    def currentColorSetName(self, *args: Any, **kwargs: Any) -> Any: ...
    def currentUVSetName(self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteColorSet(self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteEdge(self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteFace(self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteUVSet(self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteVertex(self, *args: Any, **kwargs: Any) -> Any: ...
    def displayColors(self, *args: Any, **kwargs: Any) -> Any: ...
    def duplicateFaces(self, *args: Any, **kwargs: Any) -> Any: ...
    def edgeBorderInfo(self, *args: Any, **kwargs: Any) -> Any: ...
    def extractFaces(self, *args: Any, **kwargs: Any) -> Any: ...
    def extrudeEdges(self, *args: Any, **kwargs: Any) -> Any: ...
    def extrudeFaces(self, *args: Any, **kwargs: Any) -> Any: ...
    def freeCachedIntersectionAccelerator(self, *args: Any, **kwargs: Any) -> Any: ...
    def generateSmoothMesh(self, *args: Any, **kwargs: Any) -> Any: ...
    def getAssignedUVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def getAssociatedColorSetInstances(self, *args: Any, **kwargs: Any) -> Any: ...
    def getAssociatedUVSetInstances(self, *args: Any, **kwargs: Any) -> Any: ...
    def getAssociatedUVSetTextures(self, *args: Any, **kwargs: Any) -> Any: ...
    def getAxisAtPoint(self, *args: Any, **kwargs: Any) -> Any: ...
    def getBinaryBlindData(self, *args: Any, **kwargs: Any) -> Any: ...
    def getBinormals(self, *args: Any, **kwargs: Any) -> Any: ...
    def getBlindDataAttrNames(self, *args: Any, **kwargs: Any) -> Any: ...
    def getBlindDataFaceVertexIndices(self, *args: Any, **kwargs: Any) -> Any: ...
    def getBlindDataTypes(self, *args: Any, **kwargs: Any) -> Any: ...
    def getBoolBlindData(self, *args: Any, **kwargs: Any) -> Any: ...
    def getCheckSamePointTwice(self, *args: Any, **kwargs: Any) -> Any: ...
    def getClosestNormal(self, *args: Any, **kwargs: Any) -> Any: ...
    def getClosestPoint(self, *args: Any, **kwargs: Any) -> Any: ...
    def getClosestPointAndNormal(self, *args: Any, **kwargs: Any) -> Any: ...
    def getClosestUVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def getColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def getColorIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def getColorRepresentation(self, *args: Any, **kwargs: Any) -> Any: ...
    def getColorSetFamilyNames(self, *args: Any, **kwargs: Any) -> Any: ...
    def getColorSetNames(self, *args: Any, **kwargs: Any) -> Any: ...
    def getColorSetsInFamily(self, *args: Any, **kwargs: Any) -> Any: ...
    def getColors(self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedShaders(self, *args: Any, **kwargs: Any) -> Any: ...
    def getCreaseEdges(self, *args: Any, **kwargs: Any) -> Any: ...
    def getCreaseVertices(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDoubleBlindData(self, *args: Any, **kwargs: Any) -> Any: ...
    def getEdgeVertices(self, *args: Any, **kwargs: Any) -> Any: ...
    def getFaceNormalIds(self, *args: Any, **kwargs: Any) -> Any: ...
    def getFaceUVSetNames(self, *args: Any, **kwargs: Any) -> Any: ...
    def getFaceVertexBinormal(self, *args: Any, **kwargs: Any) -> Any: ...
    def getFaceVertexBinormals(self, *args: Any, **kwargs: Any) -> Any: ...
    def getFaceVertexBlindDataIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def getFaceVertexColorIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def getFaceVertexColors(self, *args: Any, **kwargs: Any) -> Any: ...
    def getFaceVertexNormal(self, *args: Any, **kwargs: Any) -> Any: ...
    def getFaceVertexNormals(self, *args: Any, **kwargs: Any) -> Any: ...
    def getFaceVertexTangent(self, *args: Any, **kwargs: Any) -> Any: ...
    def getFaceVertexTangents(self, *args: Any, **kwargs: Any) -> Any: ...
    def getFloatBlindData(self, *args: Any, **kwargs: Any) -> Any: ...
    def getHoles(self, *args: Any, **kwargs: Any) -> Any: ...
    def getIntBlindData(self, *args: Any, **kwargs: Any) -> Any: ...
    def getInvisibleFaces(self, *args: Any, **kwargs: Any) -> Any: ...
    def getMeshShellsIds(self, *args: Any, **kwargs: Any) -> Any: ...
    def getNormalIds(self, *args: Any, **kwargs: Any) -> Any: ...
    def getNormals(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPinUVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPoint(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPointAtUV(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPoints(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPointsAtUV(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPolygonNormal(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPolygonTriangleVertices(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPolygonUV(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPolygonUVid(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPolygonVertices(self, *args: Any, **kwargs: Any) -> Any: ...
    def getRawDoublePoints(self, *args: Any, **kwargs: Any) -> Any: ...
    def getRawNormals(self, *args: Any, **kwargs: Any) -> Any: ...
    def getRawPoints(self, *args: Any, **kwargs: Any) -> Any: ...
    def getRawUVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def getSmoothMeshDisplayOptions(self, *args: Any, **kwargs: Any) -> Any: ...
    def getStringBlindData(self, *args: Any, **kwargs: Any) -> Any: ...
    def getTangentId(self, *args: Any, **kwargs: Any) -> Any: ...
    def getTangents(self, *args: Any, **kwargs: Any) -> Any: ...
    def getTriangleOffsets(self, *args: Any, **kwargs: Any) -> Any: ...
    def getTriangles(self, *args: Any, **kwargs: Any) -> Any: ...
    def getUV(self, *args: Any, **kwargs: Any) -> Any: ...
    def getUVAtPoint(self, *args: Any, **kwargs: Any) -> Any: ...
    def getUVBorderEdges(self, *args: Any, **kwargs: Any) -> Any: ...
    def getUVSetFamilyNames(self, *args: Any, **kwargs: Any) -> Any: ...
    def getUVSetNames(self, *args: Any, **kwargs: Any) -> Any: ...
    def getUVSetsInFamily(self, *args: Any, **kwargs: Any) -> Any: ...
    def getUVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def getUvShellsIds(self, *args: Any, **kwargs: Any) -> Any: ...
    def getVertexColors(self, *args: Any, **kwargs: Any) -> Any: ...
    def getVertexNormal(self, *args: Any, **kwargs: Any) -> Any: ...
    def getVertexNormals(self, *args: Any, **kwargs: Any) -> Any: ...
    def getVertices(self, *args: Any, **kwargs: Any) -> Any: ...
    def globalIntersectionAcceleratorsInfo(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAlphaChannels(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasBlindData(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasBlindDataComponentId(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasColorChannels(self, *args: Any, **kwargs: Any) -> Any: ...
    def intersect(self, *args: Any, **kwargs: Any) -> Any: ...
    def intersectFaceAtUV(self, *args: Any, **kwargs: Any) -> Any: ...
    def isBlindDataTypeUsed(self, *args: Any, **kwargs: Any) -> Any: ...
    def isColorClamped(self, *args: Any, **kwargs: Any) -> Any: ...
    def isColorSetPerInstance(self, *args: Any, **kwargs: Any) -> Any: ...
    def isEdgeSmooth(self, *args: Any, **kwargs: Any) -> Any: ...
    def isNormalLocked(self, *args: Any, **kwargs: Any) -> Any: ...
    def isPolygonConvex(self, *args: Any, **kwargs: Any) -> Any: ...
    def isPolygonUVReversed(self, *args: Any, **kwargs: Any) -> Any: ...
    def isRightHandedTangent(self, *args: Any, **kwargs: Any) -> Any: ...
    def isUVSetPerInstance(self, *args: Any, **kwargs: Any) -> Any: ...
    kGeomBorder: int = ...
    kUVBorder: int = ...
    def lockFaceVertexNormals(self, *args: Any, **kwargs: Any) -> Any: ...
    def lockVertexNormals(self, *args: Any, **kwargs: Any) -> Any: ...
    def numColorSets(self, *args: Any, **kwargs: Any) -> Any: ...
    def numColors(self, *args: Any, **kwargs: Any) -> Any: ...
    def numEdges(self, *args: Any, **kwargs: Any) -> Any: ...
    def numFaceVertices(self, *args: Any, **kwargs: Any) -> Any: ...
    def numNormals(self, *args: Any, **kwargs: Any) -> Any: ...
    def numPolygons(self, *args: Any, **kwargs: Any) -> Any: ...
    def numUVSets(self, *args: Any, **kwargs: Any) -> Any: ...
    def numUVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def numVertices(self, *args: Any, **kwargs: Any) -> Any: ...
    def onBoundary(self, *args: Any, **kwargs: Any) -> Any: ...
    def polyTriangulate(self, *args: Any, **kwargs: Any) -> Any: ...
    def polygonVertexCount(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeFaceColors(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeFaceVertexColors(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeVertexColors(self, *args: Any, **kwargs: Any) -> Any: ...
    def renameUVSet(self, *args: Any, **kwargs: Any) -> Any: ...
    def setBinaryBlindData(self, *args: Any, **kwargs: Any) -> Any: ...
    def setBoolBlindData(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCheckSamePointTwice(self, *args: Any, **kwargs: Any) -> Any: ...
    def setColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def setColors(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCreaseEdges(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCreaseVertices(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCurrentColorSetName(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCurrentUVSetName(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDisplayColors(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoubleBlindData(self, *args: Any, **kwargs: Any) -> Any: ...
    def setEdgeSmoothing(self, *args: Any, **kwargs: Any) -> Any: ...
    def setEdgeSmoothings(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFaceColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFaceColors(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFaceVertexColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFaceVertexColors(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFaceVertexNormal(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFaceVertexNormals(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFloatBlindData(self, *args: Any, **kwargs: Any) -> Any: ...
    def setIntBlindData(self, *args: Any, **kwargs: Any) -> Any: ...
    def setInvisibleFaces(self, *args: Any, **kwargs: Any) -> Any: ...
    def setIsColorClamped(self, *args: Any, **kwargs: Any) -> Any: ...
    def setNormals(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPinUVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPoint(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPoints(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSmoothMeshDisplayOptions(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSomeColors(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSomeUVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def setStringBlindData(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUV(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def setVertexColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def setVertexColors(self, *args: Any, **kwargs: Any) -> Any: ...
    def setVertexNormal(self, *args: Any, **kwargs: Any) -> Any: ...
    def setVertexNormals(self, *args: Any, **kwargs: Any) -> Any: ...
    def sortIntersectionFaceTriIds(self, *args: Any, **kwargs: Any) -> Any: ...
    def split(self, *args: Any, **kwargs: Any) -> Any: ...
    def stringBlindDataComponentId(self, *args: Any, **kwargs: Any) -> Any: ...
    def subdivideEdges(self, *args: Any, **kwargs: Any) -> Any: ...
    def subdivideFaces(self, *args: Any, **kwargs: Any) -> Any: ...
    def syncObject(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def uniformGridParams(self, *args: Any, **kwargs: Any) -> Any: ...
    def unlockFaceVertexNormals(self, *args: Any, **kwargs: Any) -> Any: ...
    def unlockVertexNormals(self, *args: Any, **kwargs: Any) -> Any: ...
    def updateSurface(self, *args: Any, **kwargs: Any) -> Any: ...

class MFnMeshData(MFnGeometryData):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnMessageAttribute(MFnAttribute):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnNumericAttribute(MFnAttribute):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def createAddr(self, *args: Any, **kwargs: Any) -> Any: ...
    def createColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def createPoint(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDefault(self, *args: Any, **kwargs: Any) -> Any: ...
    def getMax(self, *args: Any, **kwargs: Any) -> Any: ...
    def getMin(self, *args: Any, **kwargs: Any) -> Any: ...
    def getSoftMax(self, *args: Any, **kwargs: Any) -> Any: ...
    def getSoftMin(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasMax(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasMin(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasSoftMax(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasSoftMin(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDefault(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMax(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMin(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSoftMax(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSoftMin(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def unitType(self, *args: Any, **kwargs: Any) -> Any: ...

class MFnNumericData(MFnData):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def getData2Double(self, *args: Any, **kwargs: Any) -> Any: ...
    def getData2Float(self, *args: Any, **kwargs: Any) -> Any: ...
    def getData2Int(self, *args: Any, **kwargs: Any) -> Any: ...
    def getData2Short(self, *args: Any, **kwargs: Any) -> Any: ...
    def getData3Double(self, *args: Any, **kwargs: Any) -> Any: ...
    def getData3Float(self, *args: Any, **kwargs: Any) -> Any: ...
    def getData3Int(self, *args: Any, **kwargs: Any) -> Any: ...
    def getData3Short(self, *args: Any, **kwargs: Any) -> Any: ...
    def getData4Double(self, *args: Any, **kwargs: Any) -> Any: ...
    def numericType(self, *args: Any, **kwargs: Any) -> Any: ...
    def setData2Double(self, *args: Any, **kwargs: Any) -> Any: ...
    def setData2Float(self, *args: Any, **kwargs: Any) -> Any: ...
    def setData2Int(self, *args: Any, **kwargs: Any) -> Any: ...
    def setData2Short(self, *args: Any, **kwargs: Any) -> Any: ...
    def setData3Double(self, *args: Any, **kwargs: Any) -> Any: ...
    def setData3Float(self, *args: Any, **kwargs: Any) -> Any: ...
    def setData3Int(self, *args: Any, **kwargs: Any) -> Any: ...
    def setData3Short(self, *args: Any, **kwargs: Any) -> Any: ...
    def setData4Double(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnNurbsCurve(MFnDagNode):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def area(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def closestPoint(self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def createWithEditPoints(self, *args: Any, **kwargs: Any) -> Any: ...
    def cv(self, *args: Any, **kwargs: Any) -> Any: ...
    def cvs(self, *args: Any, **kwargs: Any) -> Any: ...
    def degree(self, *args: Any, **kwargs: Any) -> Any: ...
    def distanceToPoint(self, *args: Any, **kwargs: Any) -> Any: ...
    def findLengthFromParam(self, *args: Any, **kwargs: Any) -> Any: ...
    def findParamFromLength(self, *args: Any, **kwargs: Any) -> Any: ...
    def form(self, *args: Any, **kwargs: Any) -> Any: ...
    def getCV(self, *args: Any, **kwargs: Any) -> Any: ...
    def getCVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDerivativesAtParm(self, *args: Any, **kwargs: Any) -> Any: ...
    def getKnotDomain(self, *args: Any, **kwargs: Any) -> Any: ...
    def getKnots(self, *args: Any, **kwargs: Any) -> Any: ...
    def getParamAtPoint(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPointAtParam(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasHistoryOnCreate(self, *args: Any, **kwargs: Any) -> Any: ...
    def isParamOnCurve(self, *args: Any, **kwargs: Any) -> Any: ...
    def isPlanar(self, *args: Any, **kwargs: Any) -> Any: ...
    def isPointOnCurve(self, *args: Any, **kwargs: Any) -> Any: ...
    def knot(self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    def makeMultipleEndKnots(self, *args: Any, **kwargs: Any) -> Any: ...
    def normal(self, *args: Any, **kwargs: Any) -> Any: ...
    def numCVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def numKnots(self, *args: Any, **kwargs: Any) -> Any: ...
    def numSpans(self, *args: Any, **kwargs: Any) -> Any: ...
    def rebuild(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeKnot(self, *args: Any, **kwargs: Any) -> Any: ...
    def reverse(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCV(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def setKnot(self, *args: Any, **kwargs: Any) -> Any: ...
    def setKnots(self, *args: Any, **kwargs: Any) -> Any: ...
    def tangent(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def updateCurve(self, *args: Any, **kwargs: Any) -> Any: ...

class MFnNurbsCurveData(MFnGeometryData):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnNurbsSurface(MFnDagNode):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def area(self, *args: Any, **kwargs: Any) -> Any: ...
    def assignUV(self, *args: Any, **kwargs: Any) -> Any: ...
    def assignUVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def boundaryType(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def clearUVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def closestPoint(self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def cv(self, *args: Any, **kwargs: Any) -> Any: ...
    def cvsInU(self, *args: Any, **kwargs: Any) -> Any: ...
    def cvsInV(self, *args: Any, **kwargs: Any) -> Any: ...
    def degreeU(self, *args: Any, **kwargs: Any) -> Any: ...
    def degreeV(self, *args: Any, **kwargs: Any) -> Any: ...
    def distanceToPoint(self, *args: Any, **kwargs: Any) -> Any: ...
    def edge(self, *args: Any, **kwargs: Any) -> Any: ...
    def formInU(self, *args: Any, **kwargs: Any) -> Any: ...
    def formInV(self, *args: Any, **kwargs: Any) -> Any: ...
    def getAssignedUVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def getCV(self, *args: Any, **kwargs: Any) -> Any: ...
    def getCVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedShaders(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDataObject(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDerivativesAtParm(self, *args: Any, **kwargs: Any) -> Any: ...
    def getKnotDomain(self, *args: Any, **kwargs: Any) -> Any: ...
    def getKnotsInU(self, *args: Any, **kwargs: Any) -> Any: ...
    def getKnotsInV(self, *args: Any, **kwargs: Any) -> Any: ...
    def getParamAtPoint(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPatchUV(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPatchUVid(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPatchUVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPointAtParam(self, *args: Any, **kwargs: Any) -> Any: ...
    def getTangents(self, *args: Any, **kwargs: Any) -> Any: ...
    def getTrimBoundaries(self, *args: Any, **kwargs: Any) -> Any: ...
    def getUV(self, *args: Any, **kwargs: Any) -> Any: ...
    def getUVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasHistoryOnCreate(self, *args: Any, **kwargs: Any) -> Any: ...
    def intersect(self, *args: Any, **kwargs: Any) -> Any: ...
    def isBezier(self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlipNorm(self, *args: Any, **kwargs: Any) -> Any: ...
    def isFoldedOnBispan(self, *args: Any, **kwargs: Any) -> Any: ...
    def isKnotU(self, *args: Any, **kwargs: Any) -> Any: ...
    def isKnotV(self, *args: Any, **kwargs: Any) -> Any: ...
    def isParamOnSurface(self, *args: Any, **kwargs: Any) -> Any: ...
    def isPointInTrimmedRegion(self, *args: Any, **kwargs: Any) -> Any: ...
    def isPointOnSurface(self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrimmedSurface(self, *args: Any, **kwargs: Any) -> Any: ...
    def isUniform(self, *args: Any, **kwargs: Any) -> Any: ...
    def knotInU(self, *args: Any, **kwargs: Any) -> Any: ...
    def knotInV(self, *args: Any, **kwargs: Any) -> Any: ...
    def normal(self, *args: Any, **kwargs: Any) -> Any: ...
    def numBoundaries(self, *args: Any, **kwargs: Any) -> Any: ...
    def numCVsInU(self, *args: Any, **kwargs: Any) -> Any: ...
    def numCVsInV(self, *args: Any, **kwargs: Any) -> Any: ...
    def numEdges(self, *args: Any, **kwargs: Any) -> Any: ...
    def numKnotsInU(self, *args: Any, **kwargs: Any) -> Any: ...
    def numKnotsInV(self, *args: Any, **kwargs: Any) -> Any: ...
    def numNonZeroSpansInU(self, *args: Any, **kwargs: Any) -> Any: ...
    def numNonZeroSpansInV(self, *args: Any, **kwargs: Any) -> Any: ...
    def numPatches(self, *args: Any, **kwargs: Any) -> Any: ...
    def numPatchesInU(self, *args: Any, **kwargs: Any) -> Any: ...
    def numPatchesInV(self, *args: Any, **kwargs: Any) -> Any: ...
    def numRegions(self, *args: Any, **kwargs: Any) -> Any: ...
    def numSpansInU(self, *args: Any, **kwargs: Any) -> Any: ...
    def numSpansInV(self, *args: Any, **kwargs: Any) -> Any: ...
    def numUVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def projectCurve(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeKnotInU(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeKnotInV(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeOneKnotInU(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeOneKnotInV(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCV(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def setKnotInU(self, *args: Any, **kwargs: Any) -> Any: ...
    def setKnotInV(self, *args: Any, **kwargs: Any) -> Any: ...
    def setKnotsInU(self, *args: Any, **kwargs: Any) -> Any: ...
    def setKnotsInV(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUV(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def tesselate(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def trim(self, *args: Any, **kwargs: Any) -> Any: ...
    def trimWithBoundaries(self, *args: Any, **kwargs: Any) -> Any: ...
    def updateSurface(self, *args: Any, **kwargs: Any) -> Any: ...

class MFnNurbsSurfaceData(MFnGeometryData):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnPartition(MFnDependencyNode):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addMember(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def isRenderPartition(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeMember(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnPhongEShader(MFnDependencyNode):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def highlightSize(self, *args: Any, **kwargs: Any) -> Any: ...
    def roughness(self, *args: Any, **kwargs: Any) -> Any: ...
    def setHighlightSize(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRoughness(self, *args: Any, **kwargs: Any) -> Any: ...
    def setWhiteness(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def whiteness(self, *args: Any, **kwargs: Any) -> Any: ...

class MFnPhongShader(MFnReflectShader):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def cosPower(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCosPower(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnPluginData(MFnData):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def constData(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def data(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def typeId(self, *args: Any, **kwargs: Any) -> Any: ...

class MFnPointArrayData(MFnData):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def array(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def copyTo(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnPointLight(MFnNonExtendedLight):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnReference(MFnDependencyNode):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def associatedNamespace(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def containsNode(self, *args: Any, **kwargs: Any) -> Any: ...
    def containsNodeExactly(self, *args: Any, **kwargs: Any) -> Any: ...
    def fileName(self, *args: Any, **kwargs: Any) -> Any: ...
    def ignoreReferenceEdits(self, *args: Any, **kwargs: Any) -> Any: ...
    def isExportEditsFile(self, *args: Any, **kwargs: Any) -> Any: ...
    def isLoaded(self, *args: Any, **kwargs: Any) -> Any: ...
    def isLocked(self, *args: Any, **kwargs: Any) -> Any: ...
    def isValidReference(self, *args: Any, **kwargs: Any) -> Any: ...
    def nodes(self, *args: Any, **kwargs: Any) -> Any: ...
    def parentAssembly(self, *args: Any, **kwargs: Any) -> Any: ...
    def parentFileName(self, *args: Any, **kwargs: Any) -> Any: ...
    def parentReference(self, *args: Any, **kwargs: Any) -> Any: ...
    def setIgnoreReferenceEdits(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnSet(MFnDependencyNode):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addMember(self, *args: Any, **kwargs: Any) -> Any: ...
    def addMembers(self, *args: Any, **kwargs: Any) -> Any: ...
    def annotation(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def getIntersection(self, *args: Any, **kwargs: Any) -> Any: ...
    def getMemberPaths(self, *args: Any, **kwargs: Any) -> Any: ...
    def getMembers(self, *args: Any, **kwargs: Any) -> Any: ...
    def getUnion(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasRestrictions(self, *args: Any, **kwargs: Any) -> Any: ...
    def intersectsWith(self, *args: Any, **kwargs: Any) -> Any: ...
    def isMember(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeMember(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeMembers(self, *args: Any, **kwargs: Any) -> Any: ...
    def restriction(self, *args: Any, **kwargs: Any) -> Any: ...
    def setAnnotation(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnSingleIndexedComponent(MFnComponent):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addElement(self, *args: Any, **kwargs: Any) -> Any: ...
    def addElements(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def element(self, *args: Any, **kwargs: Any) -> Any: ...
    def elementMax(self, *args: Any, **kwargs: Any) -> Any: ...
    def getCompleteData(self, *args: Any, **kwargs: Any) -> Any: ...
    def getElements(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCompleteData(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnSphereData(MFnData):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def radius(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRadius(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnSpotLight(MFnNonExtendedLight):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def barnDoorAngle(self, *args: Any, **kwargs: Any) -> Any: ...
    def barnDoors(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def coneAngle(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def dropOff(self, *args: Any, **kwargs: Any) -> Any: ...
    def endDistance(self, *args: Any, **kwargs: Any) -> Any: ...
    def penumbraAngle(self, *args: Any, **kwargs: Any) -> Any: ...
    def setBarnDoorAngle(self, *args: Any, **kwargs: Any) -> Any: ...
    def setBarnDoors(self, *args: Any, **kwargs: Any) -> Any: ...
    def setConeAngle(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDropOff(self, *args: Any, **kwargs: Any) -> Any: ...
    def setEndDistance(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPenumbraAngle(self, *args: Any, **kwargs: Any) -> Any: ...
    def setStartDistance(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseDecayRegions(self, *args: Any, **kwargs: Any) -> Any: ...
    def startDistance(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def useDecayRegions(self, *args: Any, **kwargs: Any) -> Any: ...

class MFnStandardSurfaceShader(MFnDependencyNode):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def base(self, *args: Any, **kwargs: Any) -> Any: ...
    def baseColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def coat(self, *args: Any, **kwargs: Any) -> Any: ...
    def coatAffectColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def coatAffectRoughness(self, *args: Any, **kwargs: Any) -> Any: ...
    def coatAnisotropy(self, *args: Any, **kwargs: Any) -> Any: ...
    def coatColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def coatIOR(self, *args: Any, **kwargs: Any) -> Any: ...
    def coatRotation(self, *args: Any, **kwargs: Any) -> Any: ...
    def coatRoughness(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def diffuseRoughness(self, *args: Any, **kwargs: Any) -> Any: ...
    def emission(self, *args: Any, **kwargs: Any) -> Any: ...
    def emissionColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def metalness(self, *args: Any, **kwargs: Any) -> Any: ...
    def opacity(self, *args: Any, **kwargs: Any) -> Any: ...
    def setBase(self, *args: Any, **kwargs: Any) -> Any: ...
    def setBaseColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCoat(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCoatAffectColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCoatAffectRoughness(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCoatAnisotropy(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCoatColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCoatIOR(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCoatRotation(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCoatRoughness(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDiffuseRoughness(self, *args: Any, **kwargs: Any) -> Any: ...
    def setEmission(self, *args: Any, **kwargs: Any) -> Any: ...
    def setEmissionColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMetalness(self, *args: Any, **kwargs: Any) -> Any: ...
    def setOpacity(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSheen(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSheenColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSheenRoughness(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSpecular(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSpecularAnisotropy(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSpecularColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSpecularIOR(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSpecularRotation(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSpecularRoughness(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSubsurface(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSubsurfaceAnisotropy(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSubsurfaceColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSubsurfaceRadius(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSubsurfaceScale(self, *args: Any, **kwargs: Any) -> Any: ...
    def setThinFilmIOR(self, *args: Any, **kwargs: Any) -> Any: ...
    def setThinFilmThickness(self, *args: Any, **kwargs: Any) -> Any: ...
    def setThinWalled(self, *args: Any, **kwargs: Any) -> Any: ...
    def setTransmission(self, *args: Any, **kwargs: Any) -> Any: ...
    def setTransmissionColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def setTransmissionDepth(self, *args: Any, **kwargs: Any) -> Any: ...
    def setTransmissionDispersion(self, *args: Any, **kwargs: Any) -> Any: ...
    def setTransmissionExtraRoughness(self, *args: Any, **kwargs: Any) -> Any: ...
    def setTransmissionScatter(self, *args: Any, **kwargs: Any) -> Any: ...
    def setTransmissionScatterAnisotropy(self, *args: Any, **kwargs: Any) -> Any: ...
    def sheen(self, *args: Any, **kwargs: Any) -> Any: ...
    def sheenColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def sheenRoughness(self, *args: Any, **kwargs: Any) -> Any: ...
    def specular(self, *args: Any, **kwargs: Any) -> Any: ...
    def specularAnisotropy(self, *args: Any, **kwargs: Any) -> Any: ...
    def specularColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def specularIOR(self, *args: Any, **kwargs: Any) -> Any: ...
    def specularRotation(self, *args: Any, **kwargs: Any) -> Any: ...
    def specularRoughness(self, *args: Any, **kwargs: Any) -> Any: ...
    def subsurface(self, *args: Any, **kwargs: Any) -> Any: ...
    def subsurfaceAnisotropy(self, *args: Any, **kwargs: Any) -> Any: ...
    def subsurfaceColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def subsurfaceRadius(self, *args: Any, **kwargs: Any) -> Any: ...
    def subsurfaceScale(self, *args: Any, **kwargs: Any) -> Any: ...
    def thinFilmIOR(self, *args: Any, **kwargs: Any) -> Any: ...
    def thinFilmThickness(self, *args: Any, **kwargs: Any) -> Any: ...
    def thinWalled(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transmission(self, *args: Any, **kwargs: Any) -> Any: ...
    def transmissionColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def transmissionDepth(self, *args: Any, **kwargs: Any) -> Any: ...
    def transmissionDispersion(self, *args: Any, **kwargs: Any) -> Any: ...
    def transmissionExtraRoughness(self, *args: Any, **kwargs: Any) -> Any: ...
    def transmissionScatter(self, *args: Any, **kwargs: Any) -> Any: ...
    def transmissionScatterAnisotropy(self, *args: Any, **kwargs: Any) -> Any: ...

class MFnStringArrayData(MFnData):
    __dict__: mappingproxy = ...
    def __getitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def array(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def copyTo(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnStringData(MFnData):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    def string(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnSubd(MFnDagNode):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def collapse(self, *args: Any, **kwargs: Any) -> Any: ...
    def convertToNurbs(self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self, *args: Any, **kwargs: Any) -> Any: ...
    def creasesClearAll(self, *args: Any, **kwargs: Any) -> Any: ...
    def creasesGetAll(self, *args: Any, **kwargs: Any) -> Any: ...
    def creasesSetAll(self, *args: Any, **kwargs: Any) -> Any: ...
    def createBaseMesh(self, *args: Any, **kwargs: Any) -> Any: ...
    def edgeAdjacentPolygon(self, *args: Any, **kwargs: Any) -> Any: ...
    def edgeBetween(self, *args: Any, **kwargs: Any) -> Any: ...
    def edgeChildren(self, *args: Any, **kwargs: Any) -> Any: ...
    def edgeCount(self, *args: Any, **kwargs: Any) -> Any: ...
    def edgeCreaseRelevant(self, *args: Any, **kwargs: Any) -> Any: ...
    def edgeIsBoundary(self, *args: Any, **kwargs: Any) -> Any: ...
    def edgeIsCreased(self, *args: Any, **kwargs: Any) -> Any: ...
    def edgeIsValid(self, *args: Any, **kwargs: Any) -> Any: ...
    def edgeSetCrease(self, *args: Any, **kwargs: Any) -> Any: ...
    def edgeVertices(self, *args: Any, **kwargs: Any) -> Any: ...
    def editsPending(self, *args: Any, **kwargs: Any) -> Any: ...
    def editsUpdateAll(self, *args: Any, **kwargs: Any) -> Any: ...
    def evaluateNormal(self, *args: Any, **kwargs: Any) -> Any: ...
    def evaluatePosition(self, *args: Any, **kwargs: Any) -> Any: ...
    def evaluatePositionAndNormal(self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedShaders(self, *args: Any, **kwargs: Any) -> Any: ...
    def getCubicSpline(self, *args: Any, **kwargs: Any) -> Any: ...
    def levelFullySubdivideTo(self, *args: Any, **kwargs: Any) -> Any: ...
    def levelMaxAllowed(self, *args: Any, **kwargs: Any) -> Any: ...
    def levelMaxCurrent(self, *args: Any, **kwargs: Any) -> Any: ...
    def polygonBaseMeshAdd(self, *args: Any, **kwargs: Any) -> Any: ...
    def polygonBaseMeshAddWithUVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def polygonChildren(self, *args: Any, **kwargs: Any) -> Any: ...
    def polygonCount(self, *args: Any, **kwargs: Any) -> Any: ...
    def polygonCountMaxWithGivenBaseMesh(self, *args: Any, **kwargs: Any) -> Any: ...
    def polygonEdgeCount(self, *args: Any, **kwargs: Any) -> Any: ...
    def polygonEdges(self, *args: Any, **kwargs: Any) -> Any: ...
    def polygonGetCenterUV(self, *args: Any, **kwargs: Any) -> Any: ...
    def polygonGetVertexUVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def polygonHasChildren(self, *args: Any, **kwargs: Any) -> Any: ...
    def polygonHasVertexUVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def polygonIsValid(self, *args: Any, **kwargs: Any) -> Any: ...
    def polygonSetUseUVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def polygonSetVertexUVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def polygonSubdivide(self, *args: Any, **kwargs: Any) -> Any: ...
    def polygonVertexCount(self, *args: Any, **kwargs: Any) -> Any: ...
    def polygonVertices(self, *args: Any, **kwargs: Any) -> Any: ...
    def tesselate(self, *args: Any, **kwargs: Any) -> Any: ...
    def tessellateViaNurbs(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def updateAllEditsAndCreases(self, *args: Any, **kwargs: Any) -> Any: ...
    def updateSubdSurface(self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexAdjacentVertices(self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexBaseIndexFromVertexId(self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexBaseMeshAdd(self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexBaseMeshAddWithIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexBaseMeshGet(self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexBaseMeshGetWithId(self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexBaseMeshSet(self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexBaseMeshSetWithId(self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexChildren(self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexCount(self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexCreaseRelevant(self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexEditGet(self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexEditSet(self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexEditsClearAllNonBase(self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexEditsGetAllNonBase(self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexEditsSetAllNonBase(self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexIdFromBaseVertexIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexIncidentEdges(self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexIncidentPolygons(self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexIsBoundary(self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexIsCreased(self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexIsValid(self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexNormal(self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexPositionGet(self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexPositionGetNoEdit(self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexPositionSet(self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexSetCrease(self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexValence(self, *args: Any, **kwargs: Any) -> Any: ...

class MFnSubdData(MFnGeometryData):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnSubdNames:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def base(self, *args: Any, **kwargs: Any) -> Any: ...
    def baseFaceId(self, *args: Any, **kwargs: Any) -> Any: ...
    def baseFaceIdFromIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def baseFaceIdFromLong(self, *args: Any, **kwargs: Any) -> Any: ...
    def baseFaceIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def baseFaceIndexFromId(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def corner(self, *args: Any, **kwargs: Any) -> Any: ...
    def first(self, *args: Any, **kwargs: Any) -> Any: ...
    def fromMUint64(self, *args: Any, **kwargs: Any) -> Any: ...
    def fromSelectionIndices(self, *args: Any, **kwargs: Any) -> Any: ...
    def level(self, *args: Any, **kwargs: Any) -> Any: ...
    def levelOneFaceAsLong(self, *args: Any, **kwargs: Any) -> Any: ...
    def levelOneFaceId(self, *args: Any, **kwargs: Any) -> Any: ...
    def levelOneFaceIdFromIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def levelOneFaceIdFromLong(self, *args: Any, **kwargs: Any) -> Any: ...
    def levelOneFaceIndexFromId(self, *args: Any, **kwargs: Any) -> Any: ...
    def nonBaseFaceEdges(self, *args: Any, **kwargs: Any) -> Any: ...
    def nonBaseFaceVertices(self, *args: Any, **kwargs: Any) -> Any: ...
    def parentFaceId(self, *args: Any, **kwargs: Any) -> Any: ...
    def path(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def toMUint64(self, *args: Any, **kwargs: Any) -> Any: ...
    def toSelectionIndices(self, *args: Any, **kwargs: Any) -> Any: ...

class MFnTransform(MFnDagNode):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def clearRestPosition(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def enableLimit(self, *args: Any, **kwargs: Any) -> Any: ...
    def getRotation(self, *args: Any, **kwargs: Any) -> Any: ...
    def getRotationQuaternion(self, *args: Any, **kwargs: Any) -> Any: ...
    def getScale(self, *args: Any, **kwargs: Any) -> Any: ...
    def getShear(self, *args: Any, **kwargs: Any) -> Any: ...
    def getTranslation(self, *args: Any, **kwargs: Any) -> Any: ...
    def isLimited(self, *args: Any, **kwargs: Any) -> Any: ...
    kRotateMaxX: int = ...
    kRotateMaxY: int = ...
    kRotateMaxZ: int = ...
    kRotateMinX: int = ...
    kRotateMinY: int = ...
    kRotateMinZ: int = ...
    kShearMaxYZ: int = ...
    kShearMinYZ: int = ...
    kTranslateMaxX: int = ...
    kTranslateMaxY: int = ...
    kTranslateMaxZ: int = ...
    kTranslateMinX: int = ...
    kTranslateMinY: int = ...
    kTranslateMinZ: int = ...
    def limitValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def resetFromRestPosition(self, *args: Any, **kwargs: Any) -> Any: ...
    def restPosition(self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateBy(self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateByQuaternion(self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateOrientation(self, *args: Any, **kwargs: Any) -> Any: ...
    def rotatePivot(self, *args: Any, **kwargs: Any) -> Any: ...
    def rotatePivotTranslation(self, *args: Any, **kwargs: Any) -> Any: ...
    def rotationOrder(self, *args: Any, **kwargs: Any) -> Any: ...
    def scaleBy(self, *args: Any, **kwargs: Any) -> Any: ...
    def scalePivot(self, *args: Any, **kwargs: Any) -> Any: ...
    def scalePivotTranslation(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    def setLimit(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRestPosition(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotateOrientation(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotatePivot(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotatePivotTranslation(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotation(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotationOrder(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotationQuaternion(self, *args: Any, **kwargs: Any) -> Any: ...
    def setScale(self, *args: Any, **kwargs: Any) -> Any: ...
    def setScalePivot(self, *args: Any, **kwargs: Any) -> Any: ...
    def setScalePivotTranslation(self, *args: Any, **kwargs: Any) -> Any: ...
    def setShear(self, *args: Any, **kwargs: Any) -> Any: ...
    def setTranslation(self, *args: Any, **kwargs: Any) -> Any: ...
    def shearBy(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transformation(self, *args: Any, **kwargs: Any) -> Any: ...
    def translateBy(self, *args: Any, **kwargs: Any) -> Any: ...
    def translation(self, *args: Any, **kwargs: Any) -> Any: ...

class MFnTripleIndexedComponent(MFnComponent):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addElement(self, *args: Any, **kwargs: Any) -> Any: ...
    def addElements(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def getCompleteData(self, *args: Any, **kwargs: Any) -> Any: ...
    def getElement(self, *args: Any, **kwargs: Any) -> Any: ...
    def getElements(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCompleteData(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnTypedAttribute(MFnAttribute):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def attrType(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDefault(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDefault(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnUInt64ArrayData(MFnData):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def array(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def copyTo(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnUint64SingleIndexedComponent(MFnComponent):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addElement(self, *args: Any, **kwargs: Any) -> Any: ...
    def addElements(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def element(self, *args: Any, **kwargs: Any) -> Any: ...
    def getCompleteData(self, *args: Any, **kwargs: Any) -> Any: ...
    def getElements(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCompleteData(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnUnitAttribute(MFnAttribute):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDefault(self, *args: Any, **kwargs: Any) -> Any: ...
    def getMax(self, *args: Any, **kwargs: Any) -> Any: ...
    def getMin(self, *args: Any, **kwargs: Any) -> Any: ...
    def getSoftMax(self, *args: Any, **kwargs: Any) -> Any: ...
    def getSoftMin(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasMax(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasMin(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasSoftMax(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasSoftMin(self, *args: Any, **kwargs: Any) -> Any: ...
    kLast: int = ...
    kTime: int = ...
    def setDefault(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMax(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMin(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSoftMax(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSoftMin(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def unitType(self, *args: Any, **kwargs: Any) -> Any: ...

class MFnVectorArrayData(MFnData):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def array(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def copyTo(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnVolumeLight(MFnPointLight):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def arc(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def colorRamp(self, *args: Any, **kwargs: Any) -> Any: ...
    def coneEndRadius(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def emitAmbient(self, *args: Any, **kwargs: Any) -> Any: ...
    def lightShape(self, *args: Any, **kwargs: Any) -> Any: ...
    def penumbraRamp(self, *args: Any, **kwargs: Any) -> Any: ...
    def setArc(self, *args: Any, **kwargs: Any) -> Any: ...
    def setConeEndRadius(self, *args: Any, **kwargs: Any) -> Any: ...
    def setEmitAmbient(self, *args: Any, **kwargs: Any) -> Any: ...
    def setLightShape(self, *args: Any, **kwargs: Any) -> Any: ...
    def setShadowAngle(self, *args: Any, **kwargs: Any) -> Any: ...
    def setVolumeLightDirection(self, *args: Any, **kwargs: Any) -> Any: ...
    def shadowAngle(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def volumeLightDirection(self, *args: Any, **kwargs: Any) -> Any: ...

class MGlobal:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addToModel(self, *args: Any, **kwargs: Any) -> Any: ...
    def addToModelAt(self, *args: Any, **kwargs: Any) -> Any: ...
    def animSelectionMask(self, *args: Any, **kwargs: Any) -> Any: ...
    def apiVersion(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def clearSelectionList(self, *args: Any, **kwargs: Any) -> Any: ...
    def closeErrorLog(self, *args: Any, **kwargs: Any) -> Any: ...
    def componentSelectionMask(self, *args: Any, **kwargs: Any) -> Any: ...
    def currentToolContext(self, *args: Any, **kwargs: Any) -> Any: ...
    def customVersion(self, *args: Any, **kwargs: Any) -> Any: ...
    def customVersionClient(self, *args: Any, **kwargs: Any) -> Any: ...
    def customVersionMajor(self, *args: Any, **kwargs: Any) -> Any: ...
    def customVersionMinor(self, *args: Any, **kwargs: Any) -> Any: ...
    def customVersionString(self, *args: Any, **kwargs: Any) -> Any: ...
    def defaultErrorLogPathName(self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteNode(self, *args: Any, **kwargs: Any) -> Any: ...
    def disableStow(self, *args: Any, **kwargs: Any) -> Any: ...
    def displayError(self, *args: Any, **kwargs: Any) -> Any: ...
    def displayInfo(self, *args: Any, **kwargs: Any) -> Any: ...
    def displayWarning(self, *args: Any, **kwargs: Any) -> Any: ...
    def doErrorLogEntry(self, *args: Any, **kwargs: Any) -> Any: ...
    def errorLogPathName(self, *args: Any, **kwargs: Any) -> Any: ...
    def errorLoggingIsOn(self, *args: Any, **kwargs: Any) -> Any: ...
    def executeCommand(self, *args: Any, **kwargs: Any) -> Any: ...
    def executeCommandOnIdle(self, *args: Any, **kwargs: Any) -> Any: ...
    def executeCommandStringResult(self, *args: Any, **kwargs: Any) -> Any: ...
    def executePythonCommand(self, *args: Any, **kwargs: Any) -> Any: ...
    def executePythonCommandOnIdle(self, *args: Any, **kwargs: Any) -> Any: ...
    def executePythonCommandStringResult(self, *args: Any, **kwargs: Any) -> Any: ...
    def getAbsolutePathToResources(self, *args: Any, **kwargs: Any) -> Any: ...
    def getActiveSelectionList(self, *args: Any, **kwargs: Any) -> Any: ...
    def getAssociatedSets(self, *args: Any, **kwargs: Any) -> Any: ...
    def getFunctionSetList(self, *args: Any, **kwargs: Any) -> Any: ...
    def getHiliteList(self, *args: Any, **kwargs: Any) -> Any: ...
    def getLiveList(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPreselectionHiliteList(self, *args: Any, **kwargs: Any) -> Any: ...
    def getRichSelection(self, *args: Any, **kwargs: Any) -> Any: ...
    def getSelectionListByName(self, *args: Any, **kwargs: Any) -> Any: ...
    def getUILanguage(self, *args: Any, **kwargs: Any) -> Any: ...
    def initOptionVar(self, *args: Any, **kwargs: Any) -> Any: ...
    def isCustomVersion(self, *args: Any, **kwargs: Any) -> Any: ...
    def isDefaultLanguage(self, *args: Any, **kwargs: Any) -> Any: ...
    def isInCrashHandler(self, *args: Any, **kwargs: Any) -> Any: ...
    def isRedoing(self, *args: Any, **kwargs: Any) -> Any: ...
    def isSelected(self, *args: Any, **kwargs: Any) -> Any: ...
    def isUndoing(self, *args: Any, **kwargs: Any) -> Any: ...
    def isYAxisUp(self, *args: Any, **kwargs: Any) -> Any: ...
    def isZAxisUp(self, *args: Any, **kwargs: Any) -> Any: ...
    kAddToHeadOfList: int = ...
    kAddToList: int = ...
    kBaseUIMode: int = ...
    kBatch: int = ...
    kComplete: int = ...
    kInteractive: int = ...
    kLibraryApp: int = ...
    kRemoveFromList: int = ...
    kReplaceList: int = ...
    kRestricted: int = ...
    kSelectComponentMode: int = ...
    kSelectLeafMode: int = ...
    kSelectObjectMode: int = ...
    kSelectRootMode: int = ...
    kSelectTemplateMode: int = ...
    kSurfaceSelectMethod: int = ...
    kWireframeSelectMethod: int = ...
    kXORWithList: int = ...
    def mayaFeatureSet(self, *args: Any, **kwargs: Any) -> Any: ...
    def mayaName(self, *args: Any, **kwargs: Any) -> Any: ...
    def mayaState(self, *args: Any, **kwargs: Any) -> Any: ...
    def mayaVersion(self, *args: Any, **kwargs: Any) -> Any: ...
    def miscSelectionMask(self, *args: Any, **kwargs: Any) -> Any: ...
    def objectSelectionMask(self, *args: Any, **kwargs: Any) -> Any: ...
    def optionVarDoubleValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def optionVarExists(self, *args: Any, **kwargs: Any) -> Any: ...
    def optionVarIntValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def optionVarStringValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeFromModel(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeOptionVar(self, *args: Any, **kwargs: Any) -> Any: ...
    def resetToDefaultErrorLogPathName(self, *args: Any, **kwargs: Any) -> Any: ...
    def select(self, *args: Any, **kwargs: Any) -> Any: ...
    def selectByName(self, *args: Any, **kwargs: Any) -> Any: ...
    def selectCommand(self, *args: Any, **kwargs: Any) -> Any: ...
    def selectFromScreen(self, *args: Any, **kwargs: Any) -> Any: ...
    def selectionMethod(self, *args: Any, **kwargs: Any) -> Any: ...
    def selectionMode(self, *args: Any, **kwargs: Any) -> Any: ...
    def setActiveSelectionList(self, *args: Any, **kwargs: Any) -> Any: ...
    def setAnimSelectionMask(self, *args: Any, **kwargs: Any) -> Any: ...
    def setComponentSelectionMask(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDisableStow(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDisplayCVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def setErrorLogPathName(self, *args: Any, **kwargs: Any) -> Any: ...
    def setHiliteList(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMiscSelectionMask(self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectSelectionMask(self, *args: Any, **kwargs: Any) -> Any: ...
    def setOptionVarValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPreselectionHiliteList(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRichSelection(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSelectionMode(self, *args: Any, **kwargs: Any) -> Any: ...
    def setTrackSelectionOrderEnabled(self, *args: Any, **kwargs: Any) -> Any: ...
    def setYAxisUp(self, *args: Any, **kwargs: Any) -> Any: ...
    def setZAxisUp(self, *args: Any, **kwargs: Any) -> Any: ...
    def sourceFile(self, *args: Any, **kwargs: Any) -> Any: ...
    def startErrorLogging(self, *args: Any, **kwargs: Any) -> Any: ...
    def stopErrorLogging(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def trackSelectionOrderEnabled(self, *args: Any, **kwargs: Any) -> Any: ...
    def unselect(self, *args: Any, **kwargs: Any) -> Any: ...
    def unselectByName(self, *args: Any, **kwargs: Any) -> Any: ...
    def upAxis(self, *args: Any, **kwargs: Any) -> Any: ...
    def viewFrame(self, *args: Any, **kwargs: Any) -> Any: ...

class MIffFile:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def beginGet(self, *args: Any, **kwargs: Any) -> Any: ...
    def beginReadGroup(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def close(self, *args: Any, **kwargs: Any) -> Any: ...
    def endGet(self, *args: Any, **kwargs: Any) -> Any: ...
    def endReadGroup(self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self, *args: Any, **kwargs: Any) -> Any: ...
    def getChunk(self, *args: Any, **kwargs: Any) -> Any: ...
    def iffGetFloat(self, *args: Any, **kwargs: Any) -> Any: ...
    def iffGetInt(self, *args: Any, **kwargs: Any) -> Any: ...
    def iffGetShort(self, *args: Any, **kwargs: Any) -> Any: ...
    def isActive(self, *args: Any, **kwargs: Any) -> Any: ...
    def open(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MIffTag:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __eq__(self, *args: Any, **kwargs: Any) -> Any: ...
    __hash__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    kCAT: MIffTag = ...
    kCAT4: MIffTag = ...
    kCAT8: MIffTag = ...
    kFOR4: MIffTag = ...
    kFOR8: MIffTag = ...
    kFORM: MIffTag = ...
    kLIS4: MIffTag = ...
    kLIS8: MIffTag = ...
    kLIST: MIffTag = ...
    kPRO4: MIffTag = ...
    kPRO8: MIffTag = ...
    kPROP: MIffTag = ...
    thisown: property = ...

class MImage:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def convertPixelFormat(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def depth(self, *args: Any, **kwargs: Any) -> Any: ...
    def depthMap(self, *args: Any, **kwargs: Any) -> Any: ...
    def filter(self, *args: Any, **kwargs: Any) -> Any: ...
    def filterExists(self, *args: Any, **kwargs: Any) -> Any: ...
    def floatPixels(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDepthMapRange(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDepthMapSize(self, *args: Any, **kwargs: Any) -> Any: ...
    def getSize(self, *args: Any, **kwargs: Any) -> Any: ...
    def haveDepth(self, *args: Any, **kwargs: Any) -> Any: ...
    def isRGBA(self, *args: Any, **kwargs: Any) -> Any: ...
    kByte: int = ...
    kFloat: int = ...
    kHeightFieldBumpFormat: int = ...
    kNoFormat: int = ...
    kNormalMapBumpFormat: int = ...
    kUnknown: int = ...
    kUnknownFormat: int = ...
    def pixelType(self, *args: Any, **kwargs: Any) -> Any: ...
    def pixels(self, *args: Any, **kwargs: Any) -> Any: ...
    def readDepthMap(self, *args: Any, **kwargs: Any) -> Any: ...
    def readFromFile(self, *args: Any, **kwargs: Any) -> Any: ...
    def readFromTextureNode(self, *args: Any, **kwargs: Any) -> Any: ...
    def release(self, *args: Any, **kwargs: Any) -> Any: ...
    def resize(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDepthMap(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFloatPixels(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPixels(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRGBA(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def verticalFlip(self, *args: Any, **kwargs: Any) -> Any: ...
    def writeToFile(self, *args: Any, **kwargs: Any) -> Any: ...
    def writeToFileWithDepth(self, *args: Any, **kwargs: Any) -> Any: ...

class MImageFileInfo:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def channels(self, *args: Any, **kwargs: Any) -> Any: ...
    def hardwareType(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAlpha(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasMipMaps(self, *args: Any, **kwargs: Any) -> Any: ...
    def height(self, *args: Any, **kwargs: Any) -> Any: ...
    def imageType(self, *args: Any, **kwargs: Any) -> Any: ...
    kHwTexture1D: int = ...
    kHwTexture2D: int = ...
    kHwTexture3D: int = ...
    kHwTextureCubeMap: int = ...
    kHwTextureRectangle: int = ...
    kHwTextureUnknown: int = ...
    kImageTypeBump: int = ...
    kImageTypeColor: int = ...
    kImageTypeNormal: int = ...
    kImageTypeUnknown: int = ...
    def numberOfImages(self, *args: Any, **kwargs: Any) -> Any: ...
    def pixelType(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def width(self, *args: Any, **kwargs: Any) -> Any: ...

class MInt64Array:
    def __add__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __delitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __eq__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __getitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    __hash__: NoneType = ...
    def __iadd__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __len__(self, *args: Any, **kwargs: Any) -> Any: ...
    __module__: str = ...
    def __ne__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __radd__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __setitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def append(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    def sizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MIntArray:
    def __add__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __delitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __eq__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __getitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    __hash__: NoneType = ...
    def __iadd__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __len__(self, *args: Any, **kwargs: Any) -> Any: ...
    __module__: str = ...
    def __ne__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __radd__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __setitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def append(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    def sizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MItCurveCV:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __next__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def currentItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def cv(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasHistoryOnCreate(self, *args: Any, **kwargs: Any) -> Any: ...
    def index(self, *args: Any, **kwargs: Any) -> Any: ...
    def isDone(self, *args: Any, **kwargs: Any) -> Any: ...
    def next(self, *args: Any, **kwargs: Any) -> Any: ...
    def position(self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPosition(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def translateBy(self, *args: Any, **kwargs: Any) -> Any: ...
    def updateCurve(self, *args: Any, **kwargs: Any) -> Any: ...

class MItDag:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __next__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def currentItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def depth(self, *args: Any, **kwargs: Any) -> Any: ...
    def fullPathName(self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllPaths(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPath(self, *args: Any, **kwargs: Any) -> Any: ...
    def getType(self, *args: Any, **kwargs: Any) -> Any: ...
    def instanceCount(self, *args: Any, **kwargs: Any) -> Any: ...
    def isDone(self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanced(self, *args: Any, **kwargs: Any) -> Any: ...
    def item(self, *args: Any, **kwargs: Any) -> Any: ...
    kBreadthFirst: int = ...
    kDepthFirst: int = ...
    kInvalidType: int = ...
    def next(self, *args: Any, **kwargs: Any) -> Any: ...
    def partialPathName(self, *args: Any, **kwargs: Any) -> Any: ...
    def prune(self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self, *args: Any, **kwargs: Any) -> Any: ...
    def root(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def traverseUnderWorld(self, *args: Any, **kwargs: Any) -> Any: ...
    def willTraverseUnderWorld(self, *args: Any, **kwargs: Any) -> Any: ...

class MItDependencyGraph:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __next__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def atNodeLevel(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def currentDirection(self, *args: Any, **kwargs: Any) -> Any: ...
    def currentFilter(self, *args: Any, **kwargs: Any) -> Any: ...
    def currentItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def currentLevel(self, *args: Any, **kwargs: Any) -> Any: ...
    def currentRelationship(self, *args: Any, **kwargs: Any) -> Any: ...
    def currentTraversal(self, *args: Any, **kwargs: Any) -> Any: ...
    def disablePruningOnFilter(self, *args: Any, **kwargs: Any) -> Any: ...
    def enablePruningOnFilter(self, *args: Any, **kwargs: Any) -> Any: ...
    def getNodePath(self, *args: Any, **kwargs: Any) -> Any: ...
    def getNodesVisited(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPlugPath(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPlugsVisited(self, *args: Any, **kwargs: Any) -> Any: ...
    def isDirectionDownStream(self, *args: Any, **kwargs: Any) -> Any: ...
    def isDone(self, *args: Any, **kwargs: Any) -> Any: ...
    def isPruningOnFilter(self, *args: Any, **kwargs: Any) -> Any: ...
    def isTraversalDepthFirst(self, *args: Any, **kwargs: Any) -> Any: ...
    def isTraversingOverWorldSpaceDependents(self, *args: Any, **kwargs: Any) -> Any: ...
    kBreadthFirst: int = ...
    kConnectedTo: int = ...
    kDependsOn: int = ...
    kDepthFirst: int = ...
    kDownstream: int = ...
    kEvaluationGraph: int = ...
    kNodeLevel: int = ...
    kPlugLevel: int = ...
    kUpstream: int = ...
    def next(self, *args: Any, **kwargs: Any) -> Any: ...
    def nodeDepth(self, *args: Any, **kwargs: Any) -> Any: ...
    def previousPlug(self, *args: Any, **kwargs: Any) -> Any: ...
    def prune(self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self, *args: Any, **kwargs: Any) -> Any: ...
    def resetFilter(self, *args: Any, **kwargs: Any) -> Any: ...
    def resetTo(self, *args: Any, **kwargs: Any) -> Any: ...
    def rootNode(self, *args: Any, **kwargs: Any) -> Any: ...
    def rootPlug(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCurrentFilter(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCurrentRelationship(self, *args: Any, **kwargs: Any) -> Any: ...
    def setTraversalOverWorldSpaceDependents(self, *args: Any, **kwargs: Any) -> Any: ...
    def thisNode(self, *args: Any, **kwargs: Any) -> Any: ...
    def thisNodeHasUnknownType(self, *args: Any, **kwargs: Any) -> Any: ...
    def thisPlug(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def toggleDirection(self, *args: Any, **kwargs: Any) -> Any: ...
    def toggleLevel(self, *args: Any, **kwargs: Any) -> Any: ...
    def toggleTraversal(self, *args: Any, **kwargs: Any) -> Any: ...

class MItDependencyNodes:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __next__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def isDone(self, *args: Any, **kwargs: Any) -> Any: ...
    def item(self, *args: Any, **kwargs: Any) -> Any: ...
    def next(self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self, *args: Any, **kwargs: Any) -> Any: ...
    def thisNode(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MItEdits:
    ALL_EDITS: int = ...
    SUCCESSFUL_EDITS: int = ...
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __next__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addRemoveAttrEdit(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def connectDisconnectEdit(self, *args: Any, **kwargs: Any) -> Any: ...
    def currentEditString(self, *args: Any, **kwargs: Any) -> Any: ...
    def currentEditType(self, *args: Any, **kwargs: Any) -> Any: ...
    def edit(self, *args: Any, **kwargs: Any) -> Any: ...
    def fcurveEdit(self, *args: Any, **kwargs: Any) -> Any: ...
    def isDone(self, *args: Any, **kwargs: Any) -> Any: ...
    def isReverse(self, *args: Any, **kwargs: Any) -> Any: ...
    kForward: int = ...
    kReverse: int = ...
    def next(self, *args: Any, **kwargs: Any) -> Any: ...
    def parentingEdit(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCurrentEdit(self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self, *args: Any, **kwargs: Any) -> Any: ...
    def setAttrEdit(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MItGeometry:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __next__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def allPositions(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def component(self, *args: Any, **kwargs: Any) -> Any: ...
    def count(self, *args: Any, **kwargs: Any) -> Any: ...
    def currentItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def exactCount(self, *args: Any, **kwargs: Any) -> Any: ...
    def index(self, *args: Any, **kwargs: Any) -> Any: ...
    def isDone(self, *args: Any, **kwargs: Any) -> Any: ...
    def next(self, *args: Any, **kwargs: Any) -> Any: ...
    def normal(self, *args: Any, **kwargs: Any) -> Any: ...
    def position(self, *args: Any, **kwargs: Any) -> Any: ...
    def positionIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self, *args: Any, **kwargs: Any) -> Any: ...
    def setAllPositions(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPosition(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def weight(self, *args: Any, **kwargs: Any) -> Any: ...

class MItInstancer:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __next__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def instancer(self, *args: Any, **kwargs: Any) -> Any: ...
    def instancerId(self, *args: Any, **kwargs: Any) -> Any: ...
    def instancerPath(self, *args: Any, **kwargs: Any) -> Any: ...
    def isDone(self, *args: Any, **kwargs: Any) -> Any: ...
    def matrix(self, *args: Any, **kwargs: Any) -> Any: ...
    def next(self, *args: Any, **kwargs: Any) -> Any: ...
    def nextInstancer(self, *args: Any, **kwargs: Any) -> Any: ...
    def nextParticle(self, *args: Any, **kwargs: Any) -> Any: ...
    def particleId(self, *args: Any, **kwargs: Any) -> Any: ...
    def path(self, *args: Any, **kwargs: Any) -> Any: ...
    def pathId(self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MItMeshEdge:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __next__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def center(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def cleanupSmoothing(self, *args: Any, **kwargs: Any) -> Any: ...
    def connectedToEdge(self, *args: Any, **kwargs: Any) -> Any: ...
    def connectedToFace(self, *args: Any, **kwargs: Any) -> Any: ...
    def count(self, *args: Any, **kwargs: Any) -> Any: ...
    def currentItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def edge(self, *args: Any, **kwargs: Any) -> Any: ...
    def geomChanged(self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedEdges(self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedFaces(self, *args: Any, **kwargs: Any) -> Any: ...
    def getLength(self, *args: Any, **kwargs: Any) -> Any: ...
    def index(self, *args: Any, **kwargs: Any) -> Any: ...
    def isDone(self, *args: Any, **kwargs: Any) -> Any: ...
    def isSmooth(self, *args: Any, **kwargs: Any) -> Any: ...
    def next(self, *args: Any, **kwargs: Any) -> Any: ...
    def numConnectedEdges(self, *args: Any, **kwargs: Any) -> Any: ...
    def numConnectedFaces(self, *args: Any, **kwargs: Any) -> Any: ...
    def onBoundary(self, *args: Any, **kwargs: Any) -> Any: ...
    def point(self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self, *args: Any, **kwargs: Any) -> Any: ...
    def setIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPoint(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSmoothing(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def updateSurface(self, *args: Any, **kwargs: Any) -> Any: ...

class MItMeshFaceVertex:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __next__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def currentItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def faceId(self, *args: Any, **kwargs: Any) -> Any: ...
    def faceVertId(self, *args: Any, **kwargs: Any) -> Any: ...
    def faceVertex(self, *args: Any, **kwargs: Any) -> Any: ...
    def geomChanged(self, *args: Any, **kwargs: Any) -> Any: ...
    def getBinormal(self, *args: Any, **kwargs: Any) -> Any: ...
    def getColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def getColorIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def getNormal(self, *args: Any, **kwargs: Any) -> Any: ...
    def getTangent(self, *args: Any, **kwargs: Any) -> Any: ...
    def getUV(self, *args: Any, **kwargs: Any) -> Any: ...
    def getUVIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def isDone(self, *args: Any, **kwargs: Any) -> Any: ...
    def next(self, *args: Any, **kwargs: Any) -> Any: ...
    def normalId(self, *args: Any, **kwargs: Any) -> Any: ...
    def position(self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self, *args: Any, **kwargs: Any) -> Any: ...
    def setIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def tangentId(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def updateSurface(self, *args: Any, **kwargs: Any) -> Any: ...
    def vertId(self, *args: Any, **kwargs: Any) -> Any: ...

class MItMeshPolygon:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __next__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def center(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def count(self, *args: Any, **kwargs: Any) -> Any: ...
    def currentItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def geomChanged(self, *args: Any, **kwargs: Any) -> Any: ...
    def getArea(self, *args: Any, **kwargs: Any) -> Any: ...
    def getAxisAtUV(self, *args: Any, **kwargs: Any) -> Any: ...
    def getColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def getColorIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def getColorIndices(self, *args: Any, **kwargs: Any) -> Any: ...
    def getColors(self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedEdges(self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedFaces(self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedVertices(self, *args: Any, **kwargs: Any) -> Any: ...
    def getEdges(self, *args: Any, **kwargs: Any) -> Any: ...
    def getNormal(self, *args: Any, **kwargs: Any) -> Any: ...
    def getNormals(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPointAtUV(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPoints(self, *args: Any, **kwargs: Any) -> Any: ...
    def getTriangle(self, *args: Any, **kwargs: Any) -> Any: ...
    def getTriangles(self, *args: Any, **kwargs: Any) -> Any: ...
    def getUV(self, *args: Any, **kwargs: Any) -> Any: ...
    def getUVArea(self, *args: Any, **kwargs: Any) -> Any: ...
    def getUVAtPoint(self, *args: Any, **kwargs: Any) -> Any: ...
    def getUVIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def getUVSetNames(self, *args: Any, **kwargs: Any) -> Any: ...
    def getUVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def getVertices(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasValidTriangulation(self, *args: Any, **kwargs: Any) -> Any: ...
    def index(self, *args: Any, **kwargs: Any) -> Any: ...
    def isConnectedToEdge(self, *args: Any, **kwargs: Any) -> Any: ...
    def isConnectedToFace(self, *args: Any, **kwargs: Any) -> Any: ...
    def isConnectedToVertex(self, *args: Any, **kwargs: Any) -> Any: ...
    def isConvex(self, *args: Any, **kwargs: Any) -> Any: ...
    def isDone(self, *args: Any, **kwargs: Any) -> Any: ...
    def isHoled(self, *args: Any, **kwargs: Any) -> Any: ...
    def isLamina(self, *args: Any, **kwargs: Any) -> Any: ...
    def isPlanar(self, *args: Any, **kwargs: Any) -> Any: ...
    def isStarlike(self, *args: Any, **kwargs: Any) -> Any: ...
    def isUVReversed(self, *args: Any, **kwargs: Any) -> Any: ...
    def next(self, *args: Any, **kwargs: Any) -> Any: ...
    def normalIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def numColors(self, *args: Any, **kwargs: Any) -> Any: ...
    def numConnectedEdges(self, *args: Any, **kwargs: Any) -> Any: ...
    def numConnectedFaces(self, *args: Any, **kwargs: Any) -> Any: ...
    def numTriangles(self, *args: Any, **kwargs: Any) -> Any: ...
    def onBoundary(self, *args: Any, **kwargs: Any) -> Any: ...
    def point(self, *args: Any, **kwargs: Any) -> Any: ...
    def polygon(self, *args: Any, **kwargs: Any) -> Any: ...
    def polygonVertexCount(self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self, *args: Any, **kwargs: Any) -> Any: ...
    def setIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPoint(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPoints(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUV(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def tangentIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def updateSurface(self, *args: Any, **kwargs: Any) -> Any: ...
    def vertexIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def zeroArea(self, *args: Any, **kwargs: Any) -> Any: ...
    def zeroUVArea(self, *args: Any, **kwargs: Any) -> Any: ...

class MItMeshVertex:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __next__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def connectedToEdge(self, *args: Any, **kwargs: Any) -> Any: ...
    def connectedToFace(self, *args: Any, **kwargs: Any) -> Any: ...
    def count(self, *args: Any, **kwargs: Any) -> Any: ...
    def currentItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def geomChanged(self, *args: Any, **kwargs: Any) -> Any: ...
    def getColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def getColorIndices(self, *args: Any, **kwargs: Any) -> Any: ...
    def getColors(self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedEdges(self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedFaces(self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedVertices(self, *args: Any, **kwargs: Any) -> Any: ...
    def getNormal(self, *args: Any, **kwargs: Any) -> Any: ...
    def getNormalIndices(self, *args: Any, **kwargs: Any) -> Any: ...
    def getNormals(self, *args: Any, **kwargs: Any) -> Any: ...
    def getOppositeVertex(self, *args: Any, **kwargs: Any) -> Any: ...
    def getUV(self, *args: Any, **kwargs: Any) -> Any: ...
    def getUVIndices(self, *args: Any, **kwargs: Any) -> Any: ...
    def getUVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def index(self, *args: Any, **kwargs: Any) -> Any: ...
    def isDone(self, *args: Any, **kwargs: Any) -> Any: ...
    def next(self, *args: Any, **kwargs: Any) -> Any: ...
    def numConnectedEdges(self, *args: Any, **kwargs: Any) -> Any: ...
    def numConnectedFaces(self, *args: Any, **kwargs: Any) -> Any: ...
    def numUVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def onBoundary(self, *args: Any, **kwargs: Any) -> Any: ...
    def position(self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self, *args: Any, **kwargs: Any) -> Any: ...
    def setIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPosition(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUV(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUVs(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def translateBy(self, *args: Any, **kwargs: Any) -> Any: ...
    def updateSurface(self, *args: Any, **kwargs: Any) -> Any: ...
    def vertex(self, *args: Any, **kwargs: Any) -> Any: ...

class MItSelectionList:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __next__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDagPath(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDependNode(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPlug(self, *args: Any, **kwargs: Any) -> Any: ...
    def getStrings(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasComponents(self, *args: Any, **kwargs: Any) -> Any: ...
    def isDone(self, *args: Any, **kwargs: Any) -> Any: ...
    def itemType(self, *args: Any, **kwargs: Any) -> Any: ...
    kAnimSelectionItem: int = ...
    kDNselectionItem: int = ...
    kDagSelectionItem: int = ...
    kPlugSelectionItem: int = ...
    kUnknownItem: int = ...
    def next(self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFilter(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MItSubdEdge:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __next__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def index(self, *args: Any, **kwargs: Any) -> Any: ...
    def isBoundary(self, *args: Any, **kwargs: Any) -> Any: ...
    def isDone(self, *args: Any, **kwargs: Any) -> Any: ...
    def isSharp(self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self, *args: Any, **kwargs: Any) -> Any: ...
    def level(self, *args: Any, **kwargs: Any) -> Any: ...
    def next(self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self, *args: Any, **kwargs: Any) -> Any: ...
    def setLevel(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSharpness(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MItSubdFace:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __next__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def index(self, *args: Any, **kwargs: Any) -> Any: ...
    def isDone(self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self, *args: Any, **kwargs: Any) -> Any: ...
    def level(self, *args: Any, **kwargs: Any) -> Any: ...
    def next(self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self, *args: Any, **kwargs: Any) -> Any: ...
    def setLevel(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MItSubdVertex:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __next__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def index(self, *args: Any, **kwargs: Any) -> Any: ...
    def isDone(self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self, *args: Any, **kwargs: Any) -> Any: ...
    def level(self, *args: Any, **kwargs: Any) -> Any: ...
    def next(self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self, *args: Any, **kwargs: Any) -> Any: ...
    def setLevel(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MItSurfaceCV:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __next__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def currentItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def cv(self, *args: Any, **kwargs: Any) -> Any: ...
    def getIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasHistoryOnCreate(self, *args: Any, **kwargs: Any) -> Any: ...
    def index(self, *args: Any, **kwargs: Any) -> Any: ...
    def isDone(self, *args: Any, **kwargs: Any) -> Any: ...
    def isRowDone(self, *args: Any, **kwargs: Any) -> Any: ...
    def next(self, *args: Any, **kwargs: Any) -> Any: ...
    def nextRow(self, *args: Any, **kwargs: Any) -> Any: ...
    def position(self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPosition(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def translateBy(self, *args: Any, **kwargs: Any) -> Any: ...
    def updateSurface(self, *args: Any, **kwargs: Any) -> Any: ...

class MIteratorType:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def filterListEnabled(self, *args: Any, **kwargs: Any) -> Any: ...
    def getFilterList(self, *args: Any, **kwargs: Any) -> Any: ...
    def getFilterType(self, *args: Any, **kwargs: Any) -> Any: ...
    def getObjectType(self, *args: Any, **kwargs: Any) -> Any: ...
    kMDagPathObject: int = ...
    kMObject: int = ...
    kMPlugObject: int = ...
    def setFilterList(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFilterType(self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectType(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MLockMessage(MMessage):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    kAddAttr: int = ...
    kChildReorder: int = ...
    kCreateChildInstance: int = ...
    kCreateNodeInstance: int = ...
    kCreateParentInstance: int = ...
    kLast: int = ...
    kLastDAG: int = ...
    kLastPlug: int = ...
    kLockAttr: int = ...
    kLockNode: int = ...
    kPlugAttrValChange: int = ...
    kPlugConnect: int = ...
    kPlugDisconnect: int = ...
    kPlugRemoveAttr: int = ...
    kPlugRenameAttr: int = ...
    kRemoveAttr: int = ...
    kRenameAttr: int = ...
    kReparent: int = ...
    kUnlockAttr: int = ...
    kUnlockNode: int = ...
    def setNodeLockDAGQueryCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def setNodeLockQueryCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPlugLockQueryCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MMatrix:
    def __add__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __call__(self, *args: Any, **kwargs: Any) -> Any: ...
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __eq__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __getitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    __hash__: NoneType = ...
    def __iadd__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __imul__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __isub__(self, *args: Any, **kwargs: Any) -> Any: ...
    __module__: str = ...
    def __mul__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __ne__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __sub__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def adjoint(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def det3x3(self, *args: Any, **kwargs: Any) -> Any: ...
    def det4x4(self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self, *args: Any, **kwargs: Any) -> Any: ...
    def homogenize(self, *args: Any, **kwargs: Any) -> Any: ...
    def identity(self, *args: Any, **kwargs: Any) -> Any: ...
    def inverse(self, *args: Any, **kwargs: Any) -> Any: ...
    def isEquivalent(self, *args: Any, **kwargs: Any) -> Any: ...
    def isSingular(self, *args: Any, **kwargs: Any) -> Any: ...
    matrix: property = ...
    def setToIdentity(self, *args: Any, **kwargs: Any) -> Any: ...
    def setToProduct(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transpose(self, *args: Any, **kwargs: Any) -> Any: ...

class MMatrixArray:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __getitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def append(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    def sizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MMeshIntersector:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def getClosestPoint(self, *args: Any, **kwargs: Any) -> Any: ...
    def isCreated(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MMeshIsectAccelParams:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    thisown: property = ...

class MMeshSmoothOptions:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def boundaryRule(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def divisions(self, *args: Any, **kwargs: Any) -> Any: ...
    kAlwaysSharp: int = ...
    kCatmullClark: int = ...
    kChaikin: int = ...
    kCreaseAll: int = ...
    kCreaseEdge: int = ...
    kInvalid: int = ...
    kInvalidBoundary: int = ...
    kInvalidCreaseMethod: int = ...
    kInvalidSubdivision: int = ...
    kLast: int = ...
    kLastBoundary: int = ...
    kLastCreaseMethod: int = ...
    kLastSubdivision: int = ...
    kLegacy: int = ...
    kNone: int = ...
    kNormal: int = ...
    kOpenSubdivCatmullClarkAdaptive: int = ...
    kOpenSubdivCatmullClarkUniform: int = ...
    kSharpEdges: int = ...
    kSharpEdgesAndCorners: int = ...
    def keepBorderEdge(self, *args: Any, **kwargs: Any) -> Any: ...
    def keepHardEdge(self, *args: Any, **kwargs: Any) -> Any: ...
    def openSubdivCreaseMethod(self, *args: Any, **kwargs: Any) -> Any: ...
    def openSubdivFaceVaryingBoundary(self, *args: Any, **kwargs: Any) -> Any: ...
    def openSubdivSmoothTriangles(self, *args: Any, **kwargs: Any) -> Any: ...
    def openSubdivVertexBoundary(self, *args: Any, **kwargs: Any) -> Any: ...
    def propEdgeHardness(self, *args: Any, **kwargs: Any) -> Any: ...
    def setBoundaryRule(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDivisions(self, *args: Any, **kwargs: Any) -> Any: ...
    def setKeepBorderEdge(self, *args: Any, **kwargs: Any) -> Any: ...
    def setKeepHardEdge(self, *args: Any, **kwargs: Any) -> Any: ...
    def setOpenSubdivCreaseMethod(self, *args: Any, **kwargs: Any) -> Any: ...
    def setOpenSubdivFaceVaryingBoundary(self, *args: Any, **kwargs: Any) -> Any: ...
    def setOpenSubdivSmoothTriangles(self, *args: Any, **kwargs: Any) -> Any: ...
    def setOpenSubdivVertexBoundary(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPropEdgeHardness(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSmoothUVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSmoothness(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSubdivisionType(self, *args: Any, **kwargs: Any) -> Any: ...
    def smoothUVs(self, *args: Any, **kwargs: Any) -> Any: ...
    def smoothness(self, *args: Any, **kwargs: Any) -> Any: ...
    def subdivisionType(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MMessageNode:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    fClientPtr: property = ...
    fHeadNode: property = ...
    fId: property = ...
    fNextNode: property = ...
    fServerPtr: property = ...
    fSubClientPtr: property = ...
    isValid: property = ...
    thisown: property = ...

class MModelMessage(MMessage):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addAfterDuplicateCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addBeforeDuplicateCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addNodeAddedToModelCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addNodeRemovedFromModelCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MNamespace:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addNamespace(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def currentNamespace(self, *args: Any, **kwargs: Any) -> Any: ...
    def getNamespaceFromName(self, *args: Any, **kwargs: Any) -> Any: ...
    def getNamespaceObjects(self, *args: Any, **kwargs: Any) -> Any: ...
    def getNamespaces(self, *args: Any, **kwargs: Any) -> Any: ...
    def makeNamepathAbsolute(self, *args: Any, **kwargs: Any) -> Any: ...
    def moveNamespace(self, *args: Any, **kwargs: Any) -> Any: ...
    def namespaceExists(self, *args: Any, **kwargs: Any) -> Any: ...
    def parentNamespace(self, *args: Any, **kwargs: Any) -> Any: ...
    def relativeNames(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeNamespace(self, *args: Any, **kwargs: Any) -> Any: ...
    def renameNamespace(self, *args: Any, **kwargs: Any) -> Any: ...
    def rootNamespace(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCurrentNamespace(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRelativeNames(self, *args: Any, **kwargs: Any) -> Any: ...
    def stripNamespaceFromName(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def validateName(self, *args: Any, **kwargs: Any) -> Any: ...

class MNodeCacheDisablingInfo:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any, kwargs: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def getCacheDisabled(self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCacheDisabled(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMitigation(self, *args: Any, **kwargs: Any) -> Any: ...
    def setReason(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MNodeCacheDisablingInfoHelper:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    kLastConnectionTest: int = ...
    kTestDefaultValue: int = ...
    kTestDirtyPlug: int = ...
    kTestHierarchy: int = ...
    kTestPlug: int = ...
    def setUnsafeNode(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUnsafeValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def testAnimatedAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def testBooleanAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MNodeCacheSetupInfo:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any, kwargs: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def getPreference(self, *args: Any, **kwargs: Any) -> Any: ...
    def getRequirement(self, *args: Any, **kwargs: Any) -> Any: ...
    kLastPreference: int = ...
    kLastRequirement: int = ...
    kSimulationSupport: int = ...
    kWantToCacheByDefault: int = ...
    def setPreference(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRequirement(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MNodeClass:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addExtensionAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def addToClassification(self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self, *args: Any, **kwargs: Any) -> Any: ...
    def getAttributes(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginName(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeExtensionAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeExtensionAttributeIfUnset(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeFromClassification(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def typeId(self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self, *args: Any, **kwargs: Any) -> Any: ...

class MNodeMessage(MMessage):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttributeAddedOrRemovedCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttributeChangedCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addKeyableChangeOverride(self, *args: Any, **kwargs: Any) -> Any: ...
    def addNameChangedCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addNodeAboutToDeleteCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addNodeDestroyedCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addNodeDirtyCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addNodeDirtyPlugCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addNodePreRemovalCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addUuidChangedCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    kAttributeAdded: int = ...
    kAttributeArrayAdded: int = ...
    kAttributeArrayRemoved: int = ...
    kAttributeEval: int = ...
    kAttributeKeyable: int = ...
    kAttributeLocked: int = ...
    kAttributeRemoved: int = ...
    kAttributeRenamed: int = ...
    kAttributeSet: int = ...
    kAttributeUnkeyable: int = ...
    kAttributeUnlocked: int = ...
    kIncomingDirection: int = ...
    kKeyChangeLast: int = ...
    kLast: int = ...
    kOtherPlugSet: int = ...
    thisown: property = ...

class MNurbsIntersector:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self, *args: Any, **kwargs: Any) -> Any: ...
    def getClosestPoint(self, *args: Any, **kwargs: Any) -> Any: ...
    def getIntersect(self, *args: Any, **kwargs: Any) -> Any: ...
    def getIntersects(self, *args: Any, **kwargs: Any) -> Any: ...
    def isCreated(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MObject:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __eq__(self, *args: Any, **kwargs: Any) -> Any: ...
    __hash__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __ne__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def apiType(self, *args: Any, **kwargs: Any) -> Any: ...
    def apiTypeStr(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasFn(self, *args: Any, **kwargs: Any) -> Any: ...
    def isNull(self, *args: Any, **kwargs: Any) -> Any: ...
    kNullObj: property = ...
    thisown: property = ...

class MObjectArray:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __getitem__(self, args: Any) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def append(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    def sizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MObjectHandle:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __eq__(self, *args: Any, **kwargs: Any) -> Any: ...
    __hash__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __ne__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def hashCode(self, *args: Any, **kwargs: Any) -> Any: ...
    def isAlive(self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self, *args: Any, **kwargs: Any) -> Any: ...
    def objectHashCode(self, *args: Any, **kwargs: Any) -> Any: ...
    def objectRef(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MObjectSetMessage(MMessage):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addSetMembersModifiedCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MParentingEdit(MEdit):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any, kwargs: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def parent(self, *args: Any, **kwargs: Any) -> Any: ...
    def parentName(self, *args: Any, **kwargs: Any) -> Any: ...
    def parentedObject(self, *args: Any, **kwargs: Any) -> Any: ...
    def parentedObjectName(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MPlane:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def directedDistance(self, *args: Any, **kwargs: Any) -> Any: ...
    def distance(self, *args: Any, **kwargs: Any) -> Any: ...
    def normal(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPlane(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MPlug:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __eq__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __getitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    __hash__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __ne__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def array(self, *args: Any, **kwargs: Any) -> Any: ...
    def asBool(self, *args: Any, **kwargs: Any) -> Any: ...
    def asChar(self, *args: Any, **kwargs: Any) -> Any: ...
    def asDouble(self, *args: Any, **kwargs: Any) -> Any: ...
    def asFloat(self, *args: Any, **kwargs: Any) -> Any: ...
    def asInt(self, *args: Any, **kwargs: Any) -> Any: ...
    def asInt64(self, *args: Any, **kwargs: Any) -> Any: ...
    def asMAngle(self, *args: Any, **kwargs: Any) -> Any: ...
    def asMDataHandle(self, *args: Any, **kwargs: Any) -> Any: ...
    def asMDistance(self, *args: Any, **kwargs: Any) -> Any: ...
    def asMObject(self, *args: Any, **kwargs: Any) -> Any: ...
    def asMTime(self, *args: Any, **kwargs: Any) -> Any: ...
    def asShort(self, *args: Any, **kwargs: Any) -> Any: ...
    def asString(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def connectedTo(self, *args: Any, **kwargs: Any) -> Any: ...
    def connectionByPhysicalIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def constructHandle(self, *args: Any, **kwargs: Any) -> Any: ...
    def destinations(self, *args: Any, **kwargs: Any) -> Any: ...
    def destinationsWithConversions(self, *args: Any, **kwargs: Any) -> Any: ...
    def destructHandle(self, *args: Any, **kwargs: Any) -> Any: ...
    def elementByLogicalIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def elementByPhysicalIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def evaluateNumElements(self, *args: Any, **kwargs: Any) -> Any: ...
    def getExistingArrayAttributeIndices(self, *args: Any, **kwargs: Any) -> Any: ...
    def getSetAttrCmds(self, *args: Any, **kwargs: Any) -> Any: ...
    def info(self, *args: Any, **kwargs: Any) -> Any: ...
    def isArray(self, *args: Any, **kwargs: Any) -> Any: ...
    def isCachingFlagSet(self, *args: Any, **kwargs: Any) -> Any: ...
    def isChannelBoxFlagSet(self, *args: Any, **kwargs: Any) -> Any: ...
    def isChild(self, *args: Any, **kwargs: Any) -> Any: ...
    def isCompound(self, *args: Any, **kwargs: Any) -> Any: ...
    def isConnected(self, *args: Any, **kwargs: Any) -> Any: ...
    def isDefaultValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def isDestination(self, *args: Any, **kwargs: Any) -> Any: ...
    def isDynamic(self, *args: Any, **kwargs: Any) -> Any: ...
    def isElement(self, *args: Any, **kwargs: Any) -> Any: ...
    def isFreeToChange(self, *args: Any, **kwargs: Any) -> Any: ...
    def isFromReferencedFile(self, *args: Any, **kwargs: Any) -> Any: ...
    def isIgnoredWhenRendering(self, *args: Any, **kwargs: Any) -> Any: ...
    def isKeyable(self, *args: Any, **kwargs: Any) -> Any: ...
    def isLocked(self, *args: Any, **kwargs: Any) -> Any: ...
    def isNetworked(self, *args: Any, **kwargs: Any) -> Any: ...
    def isNull(self, *args: Any, **kwargs: Any) -> Any: ...
    def isProcedural(self, *args: Any, **kwargs: Any) -> Any: ...
    def isProxy(self, *args: Any, **kwargs: Any) -> Any: ...
    def isSource(self, *args: Any, **kwargs: Any) -> Any: ...
    kAll: int = ...
    kChanged: int = ...
    kChildrenNotFreeToChange: int = ...
    kFreeToChange: int = ...
    kLastAttrSelector: int = ...
    kNonDefault: int = ...
    kNotFreeToChange: int = ...
    def logicalIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self, *args: Any, **kwargs: Any) -> Any: ...
    def node(self, *args: Any, **kwargs: Any) -> Any: ...
    def numChildren(self, *args: Any, **kwargs: Any) -> Any: ...
    def numConnectedChildren(self, *args: Any, **kwargs: Any) -> Any: ...
    def numConnectedElements(self, *args: Any, **kwargs: Any) -> Any: ...
    def numElements(self, *args: Any, **kwargs: Any) -> Any: ...
    def parent(self, *args: Any, **kwargs: Any) -> Any: ...
    def partialName(self, *args: Any, **kwargs: Any) -> Any: ...
    def proxied(self, *args: Any, **kwargs: Any) -> Any: ...
    def selectAncestorLogicalIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def setAttribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def setBool(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCaching(self, *args: Any, **kwargs: Any) -> Any: ...
    def setChannelBox(self, *args: Any, **kwargs: Any) -> Any: ...
    def setChar(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDouble(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFloat(self, *args: Any, **kwargs: Any) -> Any: ...
    def setInt(self, *args: Any, **kwargs: Any) -> Any: ...
    def setInt64(self, *args: Any, **kwargs: Any) -> Any: ...
    def setKeyable(self, *args: Any, **kwargs: Any) -> Any: ...
    def setLocked(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMAngle(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMDataHandle(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMDistance(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMObject(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMPxData(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMTime(self, *args: Any, **kwargs: Any) -> Any: ...
    def setNumElements(self, *args: Any, **kwargs: Any) -> Any: ...
    def setShort(self, *args: Any, **kwargs: Any) -> Any: ...
    def setString(self, *args: Any, **kwargs: Any) -> Any: ...
    def source(self, *args: Any, **kwargs: Any) -> Any: ...
    def sourceWithConversion(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MPlugArray:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __getitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def append(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    def sizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MPoint:
    def __add__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __call__(self, *args: Any, **kwargs: Any) -> Any: ...
    __dict__: mappingproxy = ...
    def __div__(self, args: Any) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __getitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    __hash__: NoneType = ...
    def __iadd__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __imul__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __isub__(self, *args: Any, **kwargs: Any) -> Any: ...
    __module__: str = ...
    def __mul__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __ne__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __sub__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __truediv__(self, args: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def cartesianize(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def distanceTo(self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self, *args: Any, **kwargs: Any) -> Any: ...
    def homogenize(self, *args: Any, **kwargs: Any) -> Any: ...
    def isEquivalent(self, *args: Any, **kwargs: Any) -> Any: ...
    def origin(self, *args: Any, **kwargs: Any) -> Any: ...
    def rationalize(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    w: property = ...
    x: property = ...
    y: property = ...
    z: property = ...

class MPointArray:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __getitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def append(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    def sizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MPointOnMesh:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def faceIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def getBarycentricCoords(self, *args: Any, **kwargs: Any) -> Any: ...
    def getNormal(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPoint(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def triangleIndex(self, *args: Any, **kwargs: Any) -> Any: ...

class MPointOnNurbs:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPoint(self, *args: Any, **kwargs: Any) -> Any: ...
    def getUV(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MPolyMessage(MMessage):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addColorSetChangedCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addPolyComponentIdChangedCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addPolyTopologyChangedCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addUVSetChangedCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def deletedId(self, *args: Any, **kwargs: Any) -> Any: ...
    kLastErrorIndex: int = ...
    thisown: property = ...

class MProfiler:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any, kwargs: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addCategory(self, *args: Any, **kwargs: Any) -> Any: ...
    def categoryRecording(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def eventBegin(self, *args: Any, **kwargs: Any) -> Any: ...
    def eventDataAvailable(self, *args: Any, **kwargs: Any) -> Any: ...
    def eventEnd(self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllCategories(self, *args: Any, **kwargs: Any) -> Any: ...
    def getBufferSize(self, *args: Any, **kwargs: Any) -> Any: ...
    def getCPUId(self, *args: Any, **kwargs: Any) -> Any: ...
    def getCategoryIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def getCategoryInfo(self, *args: Any, **kwargs: Any) -> Any: ...
    def getCategoryName(self, *args: Any, **kwargs: Any) -> Any: ...
    def getColor(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDescription(self, *args: Any, **kwargs: Any) -> Any: ...
    def getEventCategory(self, *args: Any, **kwargs: Any) -> Any: ...
    def getEventCount(self, *args: Any, **kwargs: Any) -> Any: ...
    def getEventDuration(self, *args: Any, **kwargs: Any) -> Any: ...
    def getEventName(self, *args: Any, **kwargs: Any) -> Any: ...
    def getEventTime(self, *args: Any, **kwargs: Any) -> Any: ...
    def getNumberOfCPUs(self, *args: Any, **kwargs: Any) -> Any: ...
    def getThreadDuration(self, *args: Any, **kwargs: Any) -> Any: ...
    def getThreadId(self, *args: Any, **kwargs: Any) -> Any: ...
    def isDataFromFile(self, *args: Any, **kwargs: Any) -> Any: ...
    def isSignalEvent(self, *args: Any, **kwargs: Any) -> Any: ...
    kColorA_L1: int = ...
    kColorA_L2: int = ...
    kColorA_L3: int = ...
    kColorB_L1: int = ...
    kColorB_L2: int = ...
    kColorB_L3: int = ...
    kColorC_L1: int = ...
    kColorC_L2: int = ...
    kColorC_L3: int = ...
    kColorCount: int = ...
    kColorD_L1: int = ...
    kColorD_L2: int = ...
    kColorD_L3: int = ...
    kColorE_L1: int = ...
    kColorE_L2: int = ...
    kColorE_L3: int = ...
    kColorG_L1: int = ...
    kColorG_L2: int = ...
    kColorG_L3: int = ...
    def loadRecording(self, *args: Any, **kwargs: Any) -> Any: ...
    def recordingActive(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCategory(self, *args: Any, **kwargs: Any) -> Any: ...
    def resetRecording(self, *args: Any, **kwargs: Any) -> Any: ...
    def saveRecording(self, *args: Any, **kwargs: Any) -> Any: ...
    def setBufferSize(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCategoryRecording(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRecordingActive(self, *args: Any, **kwargs: Any) -> Any: ...
    def signalEvent(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MProfilingScope:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MQuaternion:
    def __add__(self, *args: Any, **kwargs: Any) -> Any: ...
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __eq__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __getitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    __hash__: NoneType = ...
    def __imul__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __mul__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __ne__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __neg__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __sub__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def asEulerRotation(self, *args: Any, **kwargs: Any) -> Any: ...
    def asMatrix(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def conjugate(self, *args: Any, **kwargs: Any) -> Any: ...
    def conjugateIt(self, *args: Any, **kwargs: Any) -> Any: ...
    def exp(self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self, *args: Any, **kwargs: Any) -> Any: ...
    def getAxisAngle(self, *args: Any, **kwargs: Any) -> Any: ...
    identity: MQuaternion = ...
    def inverse(self, *args: Any, **kwargs: Any) -> Any: ...
    def invertIt(self, *args: Any, **kwargs: Any) -> Any: ...
    def isEquivalent(self, *args: Any, **kwargs: Any) -> Any: ...
    def log(self, *args: Any, **kwargs: Any) -> Any: ...
    def negateIt(self, *args: Any, **kwargs: Any) -> Any: ...
    def normal(self, *args: Any, **kwargs: Any) -> Any: ...
    def normalizeIt(self, *args: Any, **kwargs: Any) -> Any: ...
    def scaleIt(self, *args: Any, **kwargs: Any) -> Any: ...
    def setAxisAngle(self, *args: Any, **kwargs: Any) -> Any: ...
    def setToXAxis(self, *args: Any, **kwargs: Any) -> Any: ...
    def setToYAxis(self, *args: Any, **kwargs: Any) -> Any: ...
    def setToZAxis(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    w: property = ...
    x: property = ...
    y: property = ...
    z: property = ...

class MRampAttribute:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addEntries(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def createColorRamp(self, *args: Any, **kwargs: Any) -> Any: ...
    def createCurveRamp(self, *args: Any, **kwargs: Any) -> Any: ...
    def createRamp(self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteEntries(self, *args: Any, **kwargs: Any) -> Any: ...
    def getColorAtPosition(self, *args: Any, **kwargs: Any) -> Any: ...
    def getEntries(self, *args: Any, **kwargs: Any) -> Any: ...
    def getNumEntries(self, *args: Any, **kwargs: Any) -> Any: ...
    def getValueAtPosition(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def isColorRamp(self, *args: Any, **kwargs: Any) -> Any: ...
    def isCurveRamp(self, *args: Any, **kwargs: Any) -> Any: ...
    kLinear: int = ...
    kNone: int = ...
    kSmooth: int = ...
    kSpline: int = ...
    def pack(self, *args: Any, **kwargs: Any) -> Any: ...
    def sampleColorRamp(self, *args: Any, **kwargs: Any) -> Any: ...
    def sampleValueRamp(self, *args: Any, **kwargs: Any) -> Any: ...
    def setColorAtIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def setInterpolationAtIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPositionAtIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRamp(self, *args: Any, **kwargs: Any) -> Any: ...
    def setValueAtIndex(self, *args: Any, **kwargs: Any) -> Any: ...
    def sort(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MRenderPassDef:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any, kwargs: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addDoubleParameter(self, *args: Any, **kwargs: Any) -> Any: ...
    def addFloatParameter(self, *args: Any, **kwargs: Any) -> Any: ...
    def addIntParameter(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def getAttributeType(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDescription(self, *args: Any, **kwargs: Any) -> Any: ...
    def getGroup(self, *args: Any, **kwargs: Any) -> Any: ...
    def getID(self, *args: Any, **kwargs: Any) -> Any: ...
    def getImplementation(self, *args: Any, **kwargs: Any) -> Any: ...
    def getName(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MRenderPassRegistry:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any, kwargs: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def getRenderPassDefinition(self, *args: Any, **kwargs: Any) -> Any: ...
    def registerRenderPassDefinition(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MRichSelection:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self, *args: Any, **kwargs: Any) -> Any: ...
    def getSelection(self, *args: Any, **kwargs: Any) -> Any: ...
    def getSymmetry(self, *args: Any, **kwargs: Any) -> Any: ...
    def getSymmetryMatrix(self, *args: Any, **kwargs: Any) -> Any: ...
    def getSymmetryPlane(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSelection(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MSceneMessage(MMessage):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addCheckCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addCheckFileCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addCheckReferenceCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addConnectionFailedCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addNamespaceRenamedCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addReferenceCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def addStringArrayCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    kAfterCreateReference: int = ...
    kAfterCreateReferenceAndRecordEdits: int = ...
    kAfterExport: int = ...
    kAfterExportReference: int = ...
    kAfterFileRead: int = ...
    kAfterImport: int = ...
    kAfterImportReference: int = ...
    kAfterLoadReference: int = ...
    kAfterLoadReferenceAndRecordEdits: int = ...
    kAfterOpen: int = ...
    kAfterPluginLoad: int = ...
    kAfterPluginUnload: int = ...
    kAfterReference: int = ...
    kAfterRemoveReference: int = ...
    kAfterSave: int = ...
    kAfterSceneReadAndRecordEdits: int = ...
    kAfterSoftwareFrameRender: int = ...
    kAfterSoftwareRender: int = ...
    kAfterUnloadReference: int = ...
    kBeforeCreateReference: int = ...
    kBeforeCreateReferenceAndRecordEdits: int = ...
    kBeforeCreateReferenceCheck: int = ...
    kBeforeExport: int = ...
    kBeforeExportCheck: int = ...
    kBeforeExportReference: int = ...
    kBeforeFileRead: int = ...
    kBeforeImport: int = ...
    kBeforeImportCheck: int = ...
    kBeforeImportReference: int = ...
    kBeforeLoadReference: int = ...
    kBeforeLoadReferenceAndRecordEdits: int = ...
    kBeforeLoadReferenceCheck: int = ...
    kBeforeNewCheck: int = ...
    kBeforeOpen: int = ...
    kBeforeOpenCheck: int = ...
    kBeforePluginLoad: int = ...
    kBeforePluginUnload: int = ...
    kBeforeReference: int = ...
    kBeforeReferenceCheck: int = ...
    kBeforeRemoveReference: int = ...
    kBeforeSave: int = ...
    kBeforeSaveCheck: int = ...
    kBeforeSoftwareFrameRender: int = ...
    kBeforeSoftwareRender: int = ...
    kBeforeUnloadReference: int = ...
    kExportStarted: int = ...
    kLast: int = ...
    kMayaExiting: int = ...
    kMayaInitialized: int = ...
    kSoftwareRenderInterrupted: int = ...
    thisown: property = ...

class MScriptUtil:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def asBool(self, *args: Any, **kwargs: Any) -> Any: ...
    def asBoolPtr(self, *args: Any, **kwargs: Any) -> Any: ...
    def asCharPtr(self, *args: Any, **kwargs: Any) -> Any: ...
    def asDouble(self, *args: Any, **kwargs: Any) -> Any: ...
    def asDouble2Ptr(self, *args: Any, **kwargs: Any) -> Any: ...
    def asDouble3Ptr(self, *args: Any, **kwargs: Any) -> Any: ...
    def asDouble4Ptr(self, *args: Any, **kwargs: Any) -> Any: ...
    def asDoublePtr(self, *args: Any, **kwargs: Any) -> Any: ...
    def asFloat(self, *args: Any, **kwargs: Any) -> Any: ...
    def asFloat2Ptr(self, *args: Any, **kwargs: Any) -> Any: ...
    def asFloat3Ptr(self, *args: Any, **kwargs: Any) -> Any: ...
    def asFloat4Ptr(self, *args: Any, **kwargs: Any) -> Any: ...
    def asFloatPtr(self, *args: Any, **kwargs: Any) -> Any: ...
    def asInt(self, *args: Any, **kwargs: Any) -> Any: ...
    def asInt2Ptr(self, *args: Any, **kwargs: Any) -> Any: ...
    def asInt3Ptr(self, *args: Any, **kwargs: Any) -> Any: ...
    def asInt4Ptr(self, *args: Any, **kwargs: Any) -> Any: ...
    def asIntPtr(self, *args: Any, **kwargs: Any) -> Any: ...
    def asShort(self, *args: Any, **kwargs: Any) -> Any: ...
    def asShort2Ptr(self, *args: Any, **kwargs: Any) -> Any: ...
    def asShort3Ptr(self, *args: Any, **kwargs: Any) -> Any: ...
    def asShort4Ptr(self, *args: Any, **kwargs: Any) -> Any: ...
    def asShortPtr(self, *args: Any, **kwargs: Any) -> Any: ...
    def asUcharPtr(self, *args: Any, **kwargs: Any) -> Any: ...
    def asUint(self, *args: Any, **kwargs: Any) -> Any: ...
    def asUint2Ptr(self, *args: Any, **kwargs: Any) -> Any: ...
    def asUint3Ptr(self, *args: Any, **kwargs: Any) -> Any: ...
    def asUint4Ptr(self, *args: Any, **kwargs: Any) -> Any: ...
    def asUintPtr(self, *args: Any, **kwargs: Any) -> Any: ...
    def asUshortPtr(self, *args: Any, **kwargs: Any) -> Any: ...
    def createFloatArrayFromList(self, *args: Any, **kwargs: Any) -> Any: ...
    def createFloatMatrixFromList(self, *args: Any, **kwargs: Any) -> Any: ...
    def createFromDouble(self, *args: Any, **kwargs: Any) -> Any: ...
    def createFromInt(self, *args: Any, **kwargs: Any) -> Any: ...
    def createFromList(self, *args: Any, **kwargs: Any) -> Any: ...
    def createIntArrayFromList(self, *args: Any, **kwargs: Any) -> Any: ...
    def createMatrixFromList(self, *args: Any, **kwargs: Any) -> Any: ...
    def getBool(self, *args: Any, **kwargs: Any) -> Any: ...
    def getBoolArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def getChar(self, *args: Any, **kwargs: Any) -> Any: ...
    def getCharArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDouble(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDouble2ArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDouble3ArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDouble4ArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDoubleArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def getFloat(self, *args: Any, **kwargs: Any) -> Any: ...
    def getFloat2ArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def getFloat3ArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def getFloat4ArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def getFloatArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def getInt(self, *args: Any, **kwargs: Any) -> Any: ...
    def getInt2ArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def getInt3ArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def getInt4ArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def getIntArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def getShort(self, *args: Any, **kwargs: Any) -> Any: ...
    def getShort2ArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def getShort3ArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def getShort4ArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def getShortArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def getUchar(self, *args: Any, **kwargs: Any) -> Any: ...
    def getUcharArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def getUint(self, *args: Any, **kwargs: Any) -> Any: ...
    def getUint2ArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def getUint3ArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def getUint4ArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def getUintArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def getUshortArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def setBool(self, *args: Any, **kwargs: Any) -> Any: ...
    def setBoolArray(self, *args: Any, **kwargs: Any) -> Any: ...
    def setChar(self, *args: Any, **kwargs: Any) -> Any: ...
    def setCharArray(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDouble(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDouble2ArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDouble3ArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDouble4ArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoubleArray(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFloat(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFloat2ArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFloat3ArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFloat4ArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFloatArray(self, *args: Any, **kwargs: Any) -> Any: ...
    def setInt(self, *args: Any, **kwargs: Any) -> Any: ...
    def setInt2ArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def setInt3ArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def setInt4ArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def setIntArray(self, *args: Any, **kwargs: Any) -> Any: ...
    def setShort(self, *args: Any, **kwargs: Any) -> Any: ...
    def setShort2ArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def setShort3ArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def setShort4ArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def setShortArray(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUchar(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUcharArray(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUint(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUint2ArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUint3ArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUint4ArrayItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUintArray(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUshortArray(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MSelectionList:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def add(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDagPath(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDependNode(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPlug(self, *args: Any, **kwargs: Any) -> Any: ...
    def getSelectionStrings(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def hasItemPartly(self, *args: Any, **kwargs: Any) -> Any: ...
    def intersect(self, *args: Any, **kwargs: Any) -> Any: ...
    def isEmpty(self, *args: Any, **kwargs: Any) -> Any: ...
    kMergeNormal: int = ...
    kRemoveFromList: int = ...
    kXORWithList: int = ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    def merge(self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self, *args: Any, **kwargs: Any) -> Any: ...
    def replace(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def toggle(self, *args: Any, **kwargs: Any) -> Any: ...

class MSelectionMask:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __or__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addMask(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterSelectionType(self, *args: Any, **kwargs: Any) -> Any: ...
    def getSelectionTypePriority(self, *args: Any, **kwargs: Any) -> Any: ...
    def intersects(self, *args: Any, **kwargs: Any) -> Any: ...
    kSelectAnimAny: int = ...
    kSelectAnimCurves: int = ...
    kSelectAnimInTangents: int = ...
    kSelectAnimKeyframes: int = ...
    kSelectAnimMask: int = ...
    kSelectAnimOutTangents: int = ...
    kSelectCVs: int = ...
    kSelectCameras: int = ...
    kSelectClusters: int = ...
    kSelectCollisionModels: int = ...
    kSelectComponentsMask: int = ...
    kSelectCurveKnots: int = ...
    kSelectCurveParmPoints: int = ...
    kSelectCurves: int = ...
    kSelectCurvesOnSurfaces: int = ...
    kSelectDynamicConstraints: int = ...
    kSelectEdges: int = ...
    kSelectEditPoints: int = ...
    kSelectEmitters: int = ...
    kSelectFacets: int = ...
    kSelectFields: int = ...
    kSelectFluids: int = ...
    kSelectFollicles: int = ...
    kSelectGuideLines: int = ...
    kSelectHairSystems: int = ...
    kSelectHandles: int = ...
    kSelectHulls: int = ...
    kSelectIkEndEffectors: int = ...
    kSelectIkHandles: int = ...
    kSelectIsoparms: int = ...
    kSelectJointPivots: int = ...
    kSelectJoints: int = ...
    kSelectLatticePoints: int = ...
    kSelectLattices: int = ...
    kSelectLights: int = ...
    kSelectLocalAxis: int = ...
    kSelectLocators: int = ...
    kSelectManipulators: int = ...
    kSelectMeshComponents: int = ...
    kSelectMeshEdges: int = ...
    kSelectMeshFaces: int = ...
    kSelectMeshFreeEdges: int = ...
    kSelectMeshLines: int = ...
    kSelectMeshUVs: int = ...
    kSelectMeshVerts: int = ...
    kSelectMeshes: int = ...
    kSelectNCloths: int = ...
    kSelectNParticles: int = ...
    kSelectNRigids: int = ...
    kSelectNurbsCurves: int = ...
    kSelectNurbsSurfaces: int = ...
    kSelectObjectGroups: int = ...
    kSelectObjectsMask: int = ...
    kSelectOrientationLocators: int = ...
    kSelectPPStrokes: int = ...
    kSelectParticleShapes: int = ...
    kSelectParticles: int = ...
    kSelectPivots: int = ...
    kSelectPointsForGravity: int = ...
    kSelectPointsOnCurvesForGravity: int = ...
    kSelectPointsOnSurfacesForGravity: int = ...
    kSelectRigidBodies: int = ...
    kSelectRigidConstraints: int = ...
    kSelectRotatePivots: int = ...
    kSelectScalePivots: int = ...
    kSelectSculpts: int = ...
    kSelectSelectHandles: int = ...
    kSelectSketchPlanes: int = ...
    kSelectSprings: int = ...
    kSelectSubdiv: int = ...
    kSelectSubdivMeshEdges: int = ...
    kSelectSubdivMeshFaces: int = ...
    kSelectSubdivMeshMaps: int = ...
    kSelectSubdivMeshPoints: int = ...
    kSelectSurfaceEdge: int = ...
    kSelectSurfaceKnots: int = ...
    kSelectSurfaceParmPoints: int = ...
    kSelectSurfaceRange: int = ...
    kSelectSurfaces: int = ...
    kSelectTemplates: int = ...
    kSelectTextures: int = ...
    kSelectUVLocators: int = ...
    kSelectVertices: int = ...
    kSelectXYZLocators: int = ...
    def registerSelectionType(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMask(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MSetAttrEdit(MEdit):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any, kwargs: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def plug(self, *args: Any, **kwargs: Any) -> Any: ...
    def plugName(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MSpace:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    kInvalid: int = ...
    kLast: int = ...
    kObject: int = ...
    kPostTransform: int = ...
    kPreTransform: int = ...
    kTransform: int = ...
    kWorld: int = ...
    thisown: property = ...

class MStreamUtils:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def readChar(self, *args: Any, **kwargs: Any) -> Any: ...
    def readCharBuffer(self, *args: Any, **kwargs: Any) -> Any: ...
    def readDouble(self, *args: Any, **kwargs: Any) -> Any: ...
    def readFloat(self, *args: Any, **kwargs: Any) -> Any: ...
    def readInt(self, *args: Any, **kwargs: Any) -> Any: ...
    def stdErrorStream(self, *args: Any, **kwargs: Any) -> Any: ...
    def stdOutStream(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def writeChar(self, *args: Any, **kwargs: Any) -> Any: ...
    def writeCharBuffer(self, *args: Any, **kwargs: Any) -> Any: ...
    def writeDouble(self, *args: Any, **kwargs: Any) -> Any: ...
    def writeFloat(self, *args: Any, **kwargs: Any) -> Any: ...
    def writeInt(self, *args: Any, **kwargs: Any) -> Any: ...

class MSyntax:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addArg(self, *args: Any, **kwargs: Any) -> Any: ...
    def addFlag(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def canEdit(self, *args: Any, **kwargs: Any) -> Any: ...
    def canQuery(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def enableEdit(self, *args: Any, **kwargs: Any) -> Any: ...
    def enableQuery(self, *args: Any, **kwargs: Any) -> Any: ...
    kAngle: int = ...
    kBoolean: int = ...
    kDistance: int = ...
    kDouble: int = ...
    kInvalidArgType: int = ...
    kInvalidObjectFormat: int = ...
    kLastArgType: int = ...
    kLastObjectFormat: int = ...
    kLong: int = ...
    kNoArg: int = ...
    kNone: int = ...
    kSelectionItem: int = ...
    kSelectionList: int = ...
    kString: int = ...
    kStringObjects: int = ...
    kTime: int = ...
    kUnsigned: int = ...
    def makeFlagMultiUse(self, *args: Any, **kwargs: Any) -> Any: ...
    def makeFlagQueryWithFullArgs(self, *args: Any, **kwargs: Any) -> Any: ...
    def maxObjects(self, *args: Any, **kwargs: Any) -> Any: ...
    def minObjects(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxObjects(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMinObjects(self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectType(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def useSelectionAsDefault(self, *args: Any, **kwargs: Any) -> Any: ...

class MTesselationParams:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    fsDefaultTesselationParams: property = ...
    kGeneralFormat: int = ...
    kLastFlag: int = ...
    kQuads: int = ...
    kSpanEquiSpaced: int = ...
    kStandardFitFormat: int = ...
    kSurface3DDistance: int = ...
    kSurface3DEquiSpaced: int = ...
    kSurfaceEquiSpaced: int = ...
    kTriangleCountFormat: int = ...
    kTriangles: int = ...
    kUseChordHeightRatio: int = ...
    kUseEdgeSmooth: int = ...
    kUseFractionalTolerance: int = ...
    kUseMaxEdgeLength: int = ...
    kUseMaxNumberPolys: int = ...
    kUseMaxSubdivisionLevel: int = ...
    kUseMaxUVRectangleSize: int = ...
    kUseMinEdgeLength: int = ...
    kUseMinScreenSize: int = ...
    kUseRelativeTolerance: int = ...
    kUseTriangleEdgeSwapping: int = ...
    def set3DDelta(self, *args: Any, **kwargs: Any) -> Any: ...
    def setBoundingBoxDiagonal(self, *args: Any, **kwargs: Any) -> Any: ...
    def setChordHeightRatio(self, *args: Any, **kwargs: Any) -> Any: ...
    def setEdgeSmoothFactor(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFitTolerance(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFormatType(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxEdgeLength(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxNumberPolys(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxSubdivisionLevel(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxUVRectangleSize(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMinEdgeLength(self, *args: Any, **kwargs: Any) -> Any: ...
    def setMinScreenSize(self, *args: Any, **kwargs: Any) -> Any: ...
    def setOutputType(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRelativeFitTolerance(self, *args: Any, **kwargs: Any) -> Any: ...
    def setStdChordHeightRatio(self, *args: Any, **kwargs: Any) -> Any: ...
    def setStdFractionalTolerance(self, *args: Any, **kwargs: Any) -> Any: ...
    def setStdMinEdgeLength(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSubdivisionFlag(self, *args: Any, **kwargs: Any) -> Any: ...
    def setTriangleCount(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUDistanceFraction(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUIsoparmType(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUNumber(self, *args: Any, **kwargs: Any) -> Any: ...
    def setVDistanceFraction(self, *args: Any, **kwargs: Any) -> Any: ...
    def setVIsoparmType(self, *args: Any, **kwargs: Any) -> Any: ...
    def setVNumber(self, *args: Any, **kwargs: Any) -> Any: ...
    def setWorldspaceToScreenTransform(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MTime:
    def __add__(self, *args: Any, **kwargs: Any) -> Any: ...
    __dict__: mappingproxy = ...
    def __div__(self, args: Any) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __ge__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __gt__(self, *args: Any, **kwargs: Any) -> Any: ...
    __hash__: NoneType = ...
    def __iadd__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __idiv__(self, args: Any) -> Any: ...
    def __imul__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __isub__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __itruediv__(self, args: Any) -> Any: ...
    def __le__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __lt__(self, *args: Any, **kwargs: Any) -> Any: ...
    __module__: str = ...
    def __mul__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __ne__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __sub__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __truediv__(self, args: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def asUnits(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self, *args: Any, **kwargs: Any) -> Any: ...
    k100FPS: int = ...
    k10FPS: int = ...
    k1200FPS: int = ...
    k120FPS: int = ...
    k125FPS: int = ...
    k12FPS: int = ...
    k1500FPS: int = ...
    k150FPS: int = ...
    k15FPS: int = ...
    k16FPS: int = ...
    k2000FPS: int = ...
    k200FPS: int = ...
    k20FPS: int = ...
    k23_976FPS: int = ...
    k240FPS: int = ...
    k24FPS: int = ...
    k250FPS: int = ...
    k25FPS: int = ...
    k29_97DF: int = ...
    k29_97FPS: int = ...
    k2FPS: int = ...
    k3000FPS: int = ...
    k300FPS: int = ...
    k30FPS: int = ...
    k375FPS: int = ...
    k3FPS: int = ...
    k400FPS: int = ...
    k40FPS: int = ...
    k44100FPS: int = ...
    k47_952FPS: int = ...
    k48000FPS: int = ...
    k48FPS: int = ...
    k4FPS: int = ...
    k500FPS: int = ...
    k50FPS: int = ...
    k59_94FPS: int = ...
    k5FPS: int = ...
    k6000FPS: int = ...
    k600FPS: int = ...
    k60FPS: int = ...
    k6FPS: int = ...
    k750FPS: int = ...
    k75FPS: int = ...
    k80FPS: int = ...
    k8FPS: int = ...
    k90FPS: int = ...
    kFilm: int = ...
    kGames: int = ...
    kHours: int = ...
    kInvalid: int = ...
    kLast: int = ...
    kMilliseconds: int = ...
    kMinutes: int = ...
    kNTSCField: int = ...
    kNTSCFrame: int = ...
    kPALField: int = ...
    kPALFrame: int = ...
    kSeconds: int = ...
    kShowScan: int = ...
    kUserDef: int = ...
    def setUIUnit(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUnit(self, *args: Any, **kwargs: Any) -> Any: ...
    def setValue(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def ticksPerSecond(self, *args: Any, **kwargs: Any) -> Any: ...
    def uiUnit(self, *args: Any, **kwargs: Any) -> Any: ...
    def unit(self, *args: Any, **kwargs: Any) -> Any: ...
    def value(self, *args: Any, **kwargs: Any) -> Any: ...

class MTimeArray:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __getitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def append(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    def sizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MTimeRange:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __eq__(self, *args: Any, **kwargs: Any) -> Any: ...
    __hash__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __ne__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __or__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def bounds(self, *args: Any, **kwargs: Any) -> Any: ...
    def contains(self, *args: Any, **kwargs: Any) -> Any: ...
    def empty(self, *args: Any, **kwargs: Any) -> Any: ...
    def intersects(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MTimer:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __eq__(self, *args: Any, **kwargs: Any) -> Any: ...
    __hash__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __ne__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def beginTimer(self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self, *args: Any, **kwargs: Any) -> Any: ...
    def elapsedTime(self, *args: Any, **kwargs: Any) -> Any: ...
    def endTimer(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MTimerMessage(MMessage):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addTimerCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSleepCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def sleepCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MTransformationMatrix:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __eq__(self, *args: Any, **kwargs: Any) -> Any: ...
    __hash__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __ne__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addRotation(self, *args: Any, **kwargs: Any) -> Any: ...
    def addRotationQuaternion(self, *args: Any, **kwargs: Any) -> Any: ...
    def addScale(self, *args: Any, **kwargs: Any) -> Any: ...
    def addShear(self, *args: Any, **kwargs: Any) -> Any: ...
    def addTranslation(self, *args: Any, **kwargs: Any) -> Any: ...
    def asMatrix(self, *args: Any, **kwargs: Any) -> Any: ...
    def asMatrixInverse(self, *args: Any, **kwargs: Any) -> Any: ...
    def asRotateMatrix(self, *args: Any, **kwargs: Any) -> Any: ...
    def asScaleMatrix(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def eulerRotation(self, *args: Any, **kwargs: Any) -> Any: ...
    def getRotation(self, *args: Any, **kwargs: Any) -> Any: ...
    def getRotationQuaternion(self, *args: Any, **kwargs: Any) -> Any: ...
    def getScale(self, *args: Any, **kwargs: Any) -> Any: ...
    def getShear(self, *args: Any, **kwargs: Any) -> Any: ...
    def getTranslation(self, *args: Any, **kwargs: Any) -> Any: ...
    identity: MTransformationMatrix = ...
    def isEquivalent(self, *args: Any, **kwargs: Any) -> Any: ...
    kInvalid: int = ...
    kLast: int = ...
    kXYZ: int = ...
    kXZY: int = ...
    kYXZ: int = ...
    kYZX: int = ...
    kZXY: int = ...
    kZYX: int = ...
    def reorderRotation(self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateBy(self, *args: Any, **kwargs: Any) -> Any: ...
    def rotatePivot(self, *args: Any, **kwargs: Any) -> Any: ...
    def rotatePivotTranslation(self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateTo(self, *args: Any, **kwargs: Any) -> Any: ...
    def rotation(self, *args: Any, **kwargs: Any) -> Any: ...
    def rotationOrder(self, *args: Any, **kwargs: Any) -> Any: ...
    def rotationOrientation(self, *args: Any, **kwargs: Any) -> Any: ...
    def scalePivot(self, *args: Any, **kwargs: Any) -> Any: ...
    def scalePivotTranslation(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotatePivot(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotatePivotTranslation(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotation(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotationOrientation(self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotationQuaternion(self, *args: Any, **kwargs: Any) -> Any: ...
    def setScale(self, *args: Any, **kwargs: Any) -> Any: ...
    def setScalePivot(self, *args: Any, **kwargs: Any) -> Any: ...
    def setScalePivotTranslation(self, *args: Any, **kwargs: Any) -> Any: ...
    def setShear(self, *args: Any, **kwargs: Any) -> Any: ...
    def setToRotationAxis(self, *args: Any, **kwargs: Any) -> Any: ...
    def setTranslation(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def translation(self, *args: Any, **kwargs: Any) -> Any: ...

class MTrimBoundaryArray:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __getitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def append(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self, *args: Any, **kwargs: Any) -> Any: ...
    def getMergedBoundary(self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self, *args: Any, **kwargs: Any) -> Any: ...
    def reserve(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    def size(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MTypeId:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __eq__(self, *args: Any, **kwargs: Any) -> Any: ...
    __hash__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __ne__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def id(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MURI:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __eq__(self, *args: Any, **kwargs: Any) -> Any: ...
    __hash__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __ne__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addQueryItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def asString(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllQueryItemKeys(self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllQueryItemValues(self, *args: Any, **kwargs: Any) -> Any: ...
    def getAuthority(self, *args: Any, **kwargs: Any) -> Any: ...
    def getDirectory(self, *args: Any, **kwargs: Any) -> Any: ...
    def getFileName(self, *args: Any, **kwargs: Any) -> Any: ...
    def getFragment(self, *args: Any, **kwargs: Any) -> Any: ...
    def getHost(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPassword(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPath(self, *args: Any, **kwargs: Any) -> Any: ...
    def getPort(self, *args: Any, **kwargs: Any) -> Any: ...
    def getQueryItemValue(self, *args: Any, **kwargs: Any) -> Any: ...
    def getQueryPairDelimiter(self, *args: Any, **kwargs: Any) -> Any: ...
    def getQueryValueDelimiter(self, *args: Any, **kwargs: Any) -> Any: ...
    def getScheme(self, *args: Any, **kwargs: Any) -> Any: ...
    def getUserInfo(self, *args: Any, **kwargs: Any) -> Any: ...
    def getUserName(self, *args: Any, **kwargs: Any) -> Any: ...
    def isEmpty(self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self, *args: Any, **kwargs: Any) -> Any: ...
    def isValidURI(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAllQueryItems(self, *args: Any, **kwargs: Any) -> Any: ...
    def removeQueryItem(self, *args: Any, **kwargs: Any) -> Any: ...
    def setAuthority(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDirectory(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFileName(self, *args: Any, **kwargs: Any) -> Any: ...
    def setFragment(self, *args: Any, **kwargs: Any) -> Any: ...
    def setHost(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPassword(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPath(self, *args: Any, **kwargs: Any) -> Any: ...
    def setPort(self, *args: Any, **kwargs: Any) -> Any: ...
    def setQueryDelimiters(self, *args: Any, **kwargs: Any) -> Any: ...
    def setScheme(self, *args: Any, **kwargs: Any) -> Any: ...
    def setURI(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUserInfo(self, *args: Any, **kwargs: Any) -> Any: ...
    def setUserName(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MUint64Array:
    def __add__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __delitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __eq__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __getitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    __hash__: NoneType = ...
    def __iadd__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __len__(self, *args: Any, **kwargs: Any) -> Any: ...
    __module__: str = ...
    def __ne__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __radd__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __setitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def append(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    def sizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MUintArray:
    def __add__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __delitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __eq__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __getitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    __hash__: NoneType = ...
    def __iadd__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __len__(self, *args: Any, **kwargs: Any) -> Any: ...
    __module__: str = ...
    def __ne__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __radd__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __setitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def append(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    def sizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MUserData:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteAfterUse(self, *args: Any, **kwargs: Any) -> Any: ...
    def setDeleteAfterUse(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MUserEventMessage(MMessage):
    __dict__: mappingproxy = ...
    def __init__(self, args: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def addUserEventCallback(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterUserEvent(self, *args: Any, **kwargs: Any) -> Any: ...
    def isUserEvent(self, *args: Any, **kwargs: Any) -> Any: ...
    def postUserEvent(self, *args: Any, **kwargs: Any) -> Any: ...
    def registerUserEvent(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MUuid:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __eq__(self, *args: Any, **kwargs: Any) -> Any: ...
    __hash__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __ne__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def asString(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self, *args: Any, **kwargs: Any) -> Any: ...
    def generate(self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def valid(self, *args: Any, **kwargs: Any) -> Any: ...

class MVector:
    def __add__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __call__(self, *args: Any, **kwargs: Any) -> Any: ...
    __dict__: mappingproxy = ...
    def __div__(self, args: Any) -> Any: ...
    __doc__: NoneType = ...
    def __eq__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __getitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    __hash__: NoneType = ...
    def __iadd__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __idiv__(self, args: Any) -> Any: ...
    def __imul__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    def __isub__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __itruediv__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __mul__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __ne__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __neg__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __repr__(self) -> Any: ...
    def __sub__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __truediv__(self, args: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def __xor__(self, *args: Any, **kwargs: Any) -> Any: ...
    def angle(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self, *args: Any, **kwargs: Any) -> Any: ...
    def isEquivalent(self, *args: Any, **kwargs: Any) -> Any: ...
    def isParallel(self, *args: Any, **kwargs: Any) -> Any: ...
    kWaxis: int = ...
    kXaxis: int = ...
    kYaxis: int = ...
    kZaxis: int = ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    def normal(self, *args: Any, **kwargs: Any) -> Any: ...
    def normalize(self, *args: Any, **kwargs: Any) -> Any: ...
    def one(self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateBy(self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateTo(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transformAsNormal(self, *args: Any, **kwargs: Any) -> Any: ...
    x: property = ...
    def xAxis(self, *args: Any, **kwargs: Any) -> Any: ...
    def xNegAxis(self, *args: Any, **kwargs: Any) -> Any: ...
    y: property = ...
    def yAxis(self, *args: Any, **kwargs: Any) -> Any: ...
    def yNegAxis(self, *args: Any, **kwargs: Any) -> Any: ...
    z: property = ...
    def zAxis(self, *args: Any, **kwargs: Any) -> Any: ...
    def zNegAxis(self, *args: Any, **kwargs: Any) -> Any: ...
    def zero(self, *args: Any, **kwargs: Any) -> Any: ...

class MVectorArray:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __getitem__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def append(self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self, *args: Any, **kwargs: Any) -> Any: ...
    def get(self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    def sizeIncrement(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MWeight:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self, *args: Any, **kwargs: Any) -> Any: ...
    def influence(self, *args: Any, **kwargs: Any) -> Any: ...
    def seam(self, *args: Any, **kwargs: Any) -> Any: ...
    def setInfluence(self, *args: Any, **kwargs: Any) -> Any: ...
    def setSeam(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class _SwigNonDynamicMeta(type):
    __bases__: tuple = ...
    __dict__: mappingproxy = ...
    __doc__: str = ...
    __module__: str = ...
    __mro__: tuple = ...
    __name__: str = ...
    __qualname__: str = ...
    def __setattr__(self, cls: Any, name: Any, value: Any) -> Any: ...

class array2dDouble:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def get(self, *args: Any, **kwargs: Any) -> Any: ...
    def getptr(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class array2dFloat:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def get(self, *args: Any, **kwargs: Any) -> Any: ...
    def getptr(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class array3dDouble:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def get(self, *args: Any, **kwargs: Any) -> Any: ...
    def getptr(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class array3dFloat:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def get(self, *args: Any, **kwargs: Any) -> Any: ...
    def getptr(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class array3dInt:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def get(self, *args: Any, **kwargs: Any) -> Any: ...
    def getptr(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class array4dDouble:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def get(self, *args: Any, **kwargs: Any) -> Any: ...
    def getptr(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class array4dFloat:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def get(self, *args: Any, **kwargs: Any) -> Any: ...
    def getptr(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class array4dInt:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def get(self, *args: Any, **kwargs: Any) -> Any: ...
    def getptr(self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class boolPtr:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self, *args: Any, **kwargs: Any) -> Any: ...

class charPtr:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self, *args: Any, **kwargs: Any) -> Any: ...

class doublePtr:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self, *args: Any, **kwargs: Any) -> Any: ...

class floatPtr:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self, *args: Any, **kwargs: Any) -> Any: ...

class intPtr:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self, *args: Any, **kwargs: Any) -> Any: ...

class shortPtr:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self, *args: Any, **kwargs: Any) -> Any: ...

class uCharPtr:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self, *args: Any, **kwargs: Any) -> Any: ...

class uIntPtr:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self) -> Any: ...
    def __swig_destroy__(self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self, *args: Any, **kwargs: Any) -> Any: ...
