# fmt: off
from typing import *
from typing_extensions import Self
from _typeshed import Incomplete


class MayaGuiLogHandler(Handler):
    def __delattr__(self: Self, name: Any) -> Any: ...
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any: ...
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any: ...
    def _at_fork_reinit(self: Self) -> Any: ...
    def acquire(self: Self) -> Any: ...
    def addFilter(self: Self, filter: Any) -> Any: ...
    def close(self: Self) -> Any: ...
    def createLock(self: Self) -> Any: ...
    def emit(self: Self, record: Any) -> Any: ...
    def filter(self: Self, record: Any) -> Any: ...
    def flush(self: Self) -> Any: ...
    def format(self: Self, record: Any) -> Any: ...
    def get_name(self: Self) -> Any: ...
    def handle(self: Self, record: Any) -> Any: ...
    def handleError(self: Self, record: Any) -> Any: ...
    name: property = ...
    def release(self: Self) -> Any: ...
    def removeFilter(self: Self, filter: Any) -> Any: ...
    def setFormatter(self: Self, fmt: Any) -> Any: ...
    def setLevel(self: Self, level: Any) -> Any: ...
    def set_name(self: Self, name: Any) -> Any: ...

class Output(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def flush(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    softspace: member_descriptor = ...
    def write(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def writelines(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class StringTable(object):
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __delitem__(self: Self, key: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __getitem__(self: Self, key: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __len__(self: Self) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __setitem__(self: Self, key: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...

__cached__: str
__doc__: str
__file__: str
__loader__: SourceFileLoader
__name__: str
__package__: str
__spec__: ModuleSpec
def _decodeStack(tbStack: Any) -> Any: ...
def _dumpCurrentFrames() -> Any: ...
def _fixConsoleLineNumbers(tbStack: Any) -> Any: ...
def formatGuiException(exceptionType: Any, exceptionObject: Any, traceBack: Any, detail: Any = ...) -> Any: ...
def formatGuiResult(obj: Any) -> Any: ...
def _guiExceptHook(exceptionType: Any, exceptionObject: Any, traceBack: Any, detail: Any = ...) -> Any: ...
_guiLogHandler: NoneType
def _guiResultHook(obj: Any) -> Any: ...
def _mayadisplayhook(*args: Any, **kwargs: Any) -> Any: ...
def _overriden_import(*args: Any, **kwargs: Any) -> Any: ...
def _prefixTraceStack(tbStack: Any, prefix: Any = ...) -> Any: ...
_shellLogHandler: StreamHandler
_shellStdoutLogHandler: NoneType
def abs_over(*args: Any, **kwargs: Any) -> Any: ...
def all_over(*args: Any, **kwargs: Any) -> Any: ...
def any_over(*args: Any, **kwargs: Any) -> Any: ...
def ascii_over(*args: Any, **kwargs: Any) -> Any: ...
def bin_over(*args: Any, **kwargs: Any) -> Any: ...
def bool_over(*args: Any, **kwargs: Any) -> Any: ...
def breakpoint_over(*args: Any, **kwargs: Any) -> Any: ...
def bytearray_over(*args: Any, **kwargs: Any) -> Any: ...
def bytes_over(*args: Any, **kwargs: Any) -> Any: ...
def callable_over(*args: Any, **kwargs: Any) -> Any: ...
def chr_over(*args: Any, **kwargs: Any) -> Any: ...
def classmethod_over(*args: Any, **kwargs: Any) -> Any: ...
def compile_over(*args: Any, **kwargs: Any) -> Any: ...
def complex_over(*args: Any, **kwargs: Any) -> Any: ...
def delattr_over(*args: Any, **kwargs: Any) -> Any: ...
def dict_over(*args: Any, **kwargs: Any) -> Any: ...
def dir_over(*args: Any, **kwargs: Any) -> Any: ...
def divmod_over(*args: Any, **kwargs: Any) -> Any: ...
def enumerate_over(*args: Any, **kwargs: Any) -> Any: ...
def eval_over(*args: Any, **kwargs: Any) -> Any: ...
def exec_over(*args: Any, **kwargs: Any) -> Any: ...
def execfile(filename: Any, myglobals: Any = ..., mylocals: Any = ...) -> Any: ...
def executeDeferred(*args: Any, **kwargs: Any) -> Any: ...
def executeInMainThreadWithResult(*args: Any, **kwargs: Any) -> Any: ...
def filter_over(*args: Any, **kwargs: Any) -> Any: ...
def float_over(*args: Any, **kwargs: Any) -> Any: ...
def formatGuiException(exceptionType: Any, exceptionObject: Any, traceBack: Any, detail: Any = ...) -> Any: ...
def formatGuiResult(obj: Any) -> Any: ...
def format_over(*args: Any, **kwargs: Any) -> Any: ...
def frozenset_over(*args: Any, **kwargs: Any) -> Any: ...
class futureStr(object):
    def __add__(self: Self, value: Any) -> Any: ...
    def __contains__(self: Self, key: Any) -> Any: ...
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __getitem__(self: Self, key: Any) -> Any: ...
    def __getnewargs__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __iter__(self: Self) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __len__(self: Self) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __mod__(self: Self, value: Any) -> Any: ...
    def __mul__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __rmod__(self: Self, value: Any) -> Any: ...
    def __rmul__(self: Self, value: Any) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def capitalize(self: Self) -> Any: ...
    def casefold(self: Self) -> Any: ...
    def center(self: Self, width: Any, fillchar: Any = ...) -> Any: ...
    def count(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def encode(self: Self, encoding: Any = ..., errors: Any = ...) -> Any: ...
    def endswith(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def expandtabs(self: Self, tabsize: Any = ...) -> Any: ...
    def find(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def format(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def format_map(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def index(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isalnum(self: Self) -> Any: ...
    def isalpha(self: Self) -> Any: ...
    def isascii(self: Self) -> Any: ...
    def isdecimal(self: Self) -> Any: ...
    def isdigit(self: Self) -> Any: ...
    def isidentifier(self: Self) -> Any: ...
    def islower(self: Self) -> Any: ...
    def isnumeric(self: Self) -> Any: ...
    def isprintable(self: Self) -> Any: ...
    def isspace(self: Self) -> Any: ...
    def istitle(self: Self) -> Any: ...
    def isupper(self: Self) -> Any: ...
    def join(self: Self, iterable: Any) -> Any: ...
    def ljust(self: Self, width: Any, fillchar: Any = ...) -> Any: ...
    def lower(self: Self) -> Any: ...
    def lstrip(self: Self, chars: Any = ...) -> Any: ...
    def maketrans(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def partition(self: Self, sep: Any) -> Any: ...
    def removeprefix(self: Self, prefix: Any) -> Any: ...
    def removesuffix(self: Self, suffix: Any) -> Any: ...
    def replace(self: Self, old: Any, new: Any, count: Any = ...) -> Any: ...
    def rfind(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rindex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rjust(self: Self, width: Any, fillchar: Any = ...) -> Any: ...
    def rpartition(self: Self, sep: Any) -> Any: ...
    def rsplit(self: Self, sep: Any = ..., maxsplit: Any = ...) -> Any: ...
    def rstrip(self: Self, chars: Any = ...) -> Any: ...
    def split(self: Self, sep: Any = ..., maxsplit: Any = ...) -> Any: ...
    def splitlines(self: Self, keepends: Any = ...) -> Any: ...
    def startswith(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def strip(self: Self, chars: Any = ...) -> Any: ...
    def swapcase(self: Self) -> Any: ...
    def title(self: Self) -> Any: ...
    def translate(self: Self, table: Any) -> Any: ...
    def upper(self: Self) -> Any: ...
    def zfill(self: Self, width: Any) -> Any: ...

def getPossibleCompletions(input: Any) -> Any: ...
def getattr_over(*args: Any, **kwargs: Any) -> Any: ...
def globals_over(*args: Any, **kwargs: Any) -> Any: ...
def guiLogHandler() -> Any: ...
def hasattr_over(*args: Any, **kwargs: Any) -> Any: ...
def hash_over(*args: Any, **kwargs: Any) -> Any: ...
def helpNonVerbose(thing: Any, title: Any = ..., forceload: Any = ...) -> Any: ...
def help_over(*args: Any, **kwargs: Any) -> Any: ...
def hex_over(*args: Any, **kwargs: Any) -> Any: ...
def id_over(*args: Any, **kwargs: Any) -> Any: ...
def input_over(*args: Any, **kwargs: Any) -> Any: ...
def int_over(*args: Any, **kwargs: Any) -> Any: ...
def isinstance_over(*args: Any, **kwargs: Any) -> Any: ...
def issubclass_over(*args: Any, **kwargs: Any) -> Any: ...
def iter_over(*args: Any, **kwargs: Any) -> Any: ...
def len_over(*args: Any, **kwargs: Any) -> Any: ...
def list_over(*args: Any, **kwargs: Any) -> Any: ...
def loadStringResourcesForFile(scriptPath: Any, fullModulePath: Any, resourceFileName: Any) -> Any: ...
def loadStringResourcesForModule(moduleName: Any) -> Any: ...
def locals_over(*args: Any, **kwargs: Any) -> Any: ...
def map_over(*args: Any, **kwargs: Any) -> Any: ...
def max_over(*args: Any, **kwargs: Any) -> Any: ...
def memoryview_over(*args: Any, **kwargs: Any) -> Any: ...
def min_over(*args: Any, **kwargs: Any) -> Any: ...
def next_over(*args: Any, **kwargs: Any) -> Any: ...
def object_over(*args: Any, **kwargs: Any) -> Any: ...
def oct_over(*args: Any, **kwargs: Any) -> Any: ...
def open_over(*args: Any, **kwargs: Any) -> Any: ...
def ord_over(*args: Any, **kwargs: Any) -> Any: ...
os_environ: _Environ
def pow_over(*args: Any, **kwargs: Any) -> Any: ...
def print_over(*args: Any, **kwargs: Any) -> Any: ...
def processIdleEvents(*args: Any, **kwargs: Any) -> Any: ...
def property_over(*args: Any, **kwargs: Any) -> Any: ...
class range(object):
    def __bool__(self: Self) -> Any: ...
    def __contains__(self: Self, key: Any) -> Any: ...
    def __delattr__(self: Self, name: Any) -> Any: ...
    def __dir__(self: Self) -> Any: ...
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any: ...
    def __ge__(self: Self, value: Any) -> Any: ...
    def __getattribute__(self: Self, name: Any) -> Any: ...
    def __getitem__(self: Self, key: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any: ...
    def __hash__(self: Self) -> Any: ...
    def __init__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __iter__(self: Self) -> Any: ...
    def __le__(self: Self, value: Any) -> Any: ...
    def __len__(self: Self) -> Any: ...
    def __lt__(self: Self, value: Any) -> Any: ...
    def __ne__(self: Self, value: Any) -> Any: ...
    def __new__(self: Self, args: Any, kwargs: Any) -> Any: ...
    def __reduce__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __reduce_ex__(self: Self, protocol: Any) -> Any: ...
    def __repr__(self: Self) -> Any: ...
    def __reversed__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any: ...
    def __str__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def count(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def index(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    start: member_descriptor = ...
    step: member_descriptor = ...
    stop: member_descriptor = ...

def range_over(*args: Any, **kwargs: Any) -> Any: ...
def repr_over(*args: Any, **kwargs: Any) -> Any: ...
def reversed_over(*args: Any, **kwargs: Any) -> Any: ...
def round_over(*args: Any, **kwargs: Any) -> Any: ...
def set_over(*args: Any, **kwargs: Any) -> Any: ...
def setattr_over(*args: Any, **kwargs: Any) -> Any: ...
def shellLogHandler() -> Any: ...
def slice_over(*args: Any, **kwargs: Any) -> Any: ...
def sorted_over(*args: Any, **kwargs: Any) -> Any: ...
def staticmethod_over(*args: Any, **kwargs: Any) -> Any: ...
def str_over(*args: Any, **kwargs: Any) -> Any: ...
def sum_over(*args: Any, **kwargs: Any) -> Any: ...
def super_over(*args: Any, **kwargs: Any) -> Any: ...
def tuple_over(*args: Any, **kwargs: Any) -> Any: ...
def type_over(*args: Any, **kwargs: Any) -> Any: ...
def vars_over(*args: Any, **kwargs: Any) -> Any: ...
def zip_over(*args: Any, **kwargs: Any) -> Any: ...