# fmt: off
from typing import *
from typing_extensions import Self
from _typeshed import Incomplete


class MDynSweptLine(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def normal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def tangent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def vertex(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MDynSweptLine_className(*args: Any, **kwargs: Any) -> Any: ...
class MDynSweptTriangle(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def area(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def normal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def normalToPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def uvPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def vertex(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MDynSweptTriangle_className(*args: Any, **kwargs: Any) -> Any: ...
class MDynamicsUtil(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addNodeTypeToRunup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def evalDynamics2dTexture(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasValidDynamics2dTexture(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inRunup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeNodeTypeFromRunup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def runupIfRequired(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MDynamicsUtil_addNodeTypeToRunup(*args: Any, **kwargs: Any) -> Any: ...
def MDynamicsUtil_evalDynamics2dTexture(*args: Any, **kwargs: Any) -> Any: ...
def MDynamicsUtil_hasValidDynamics2dTexture(*args: Any, **kwargs: Any) -> Any: ...
def MDynamicsUtil_inRunup(*args: Any, **kwargs: Any) -> Any: ...
def MDynamicsUtil_removeNodeTypeFromRunup(*args: Any, **kwargs: Any) -> Any: ...
def MDynamicsUtil_runupIfRequired(*args: Any, **kwargs: Any) -> Any: ...
class MFnAirField(MFnField):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def activeColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attenuation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def boundingBox(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def childCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def componentOnly(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagRoot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def direction(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dormantColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsReference(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsTemplate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def duplicate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableDGTiming(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableSpread(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def falloffCurve(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fullPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedByAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllPaths(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedSetsAndMembers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getForceAtPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasParent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def icon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inModel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inUnderWorld(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inheritRotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inheritVelocity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def instanceCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isChildOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDefaultNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFalloffCurveConstantOne(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFromReferencedFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanceable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanced(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstancedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isIntermediateObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isParentOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isShared(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNextPos: int = ...
    kNormalAttr: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    kUseDefaultColor: int = ...
    kUseIndexColor: int = ...
    kUseRGBColor: int = ...
    def magnitude(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def maxDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def model(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorRGB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def partialPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def perVertex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChildAt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAttenuation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setComponentOnly(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDirection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setEnableSpread(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIcon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInheritRotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInheritVelocity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInstanceable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIntermediateObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMagnitude(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColorType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPerVertex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSpeed(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSpread(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseMaxDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def speed(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def spread(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transformationMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def useMaxDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingHiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnAirField_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnDragField(MFnField):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def activeColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attenuation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def boundingBox(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def childCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagRoot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def direction(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dormantColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsReference(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsTemplate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def duplicate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableDGTiming(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def falloffCurve(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fullPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedByAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllPaths(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedSetsAndMembers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getForceAtPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasParent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def icon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inModel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inUnderWorld(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def instanceCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isChildOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDefaultNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFalloffCurveConstantOne(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFromReferencedFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanceable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanced(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstancedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isIntermediateObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isParentOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isShared(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNextPos: int = ...
    kNormalAttr: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    kUseDefaultColor: int = ...
    kUseIndexColor: int = ...
    kUseRGBColor: int = ...
    def magnitude(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def maxDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def model(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorRGB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def partialPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def perVertex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChildAt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAttenuation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDirection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIcon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInstanceable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIntermediateObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMagnitude(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColorType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPerVertex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseDirection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseMaxDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transformationMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def useDirection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def useMaxDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingHiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnDragField_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnDynSweptGeometryData(MFnData):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAny: int = ...
    kComponentList: int = ...
    kDoubleArray: int = ...
    kDynArrayAttrs: int = ...
    kDynSweptGeometry: int = ...
    kFalloffFunction: int = ...
    kFloatArray: int = ...
    kIntArray: int = ...
    kInvalid: int = ...
    kLast: int = ...
    kLattice: int = ...
    kMatrix: int = ...
    kMatrixArray: int = ...
    kMesh: int = ...
    kNId: int = ...
    kNObject: int = ...
    kNumeric: int = ...
    kNurbsCurve: int = ...
    kNurbsSurface: int = ...
    kPlugin: int = ...
    kPluginGeometry: int = ...
    kPointArray: int = ...
    kSphere: int = ...
    kString: int = ...
    kStringArray: int = ...
    kSubdSurface: int = ...
    kVectorArray: int = ...
    def lineCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def sweptLine(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def sweptTriangle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def triangleCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnDynSweptGeometryData_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnField(MFnDagNode):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def activeColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attenuation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def boundingBox(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def childCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagRoot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dormantColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsReference(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsTemplate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def duplicate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableDGTiming(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def falloffCurve(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fullPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedByAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllPaths(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedSetsAndMembers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getForceAtPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasParent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def icon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inModel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inUnderWorld(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def instanceCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isChildOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDefaultNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFalloffCurveConstantOne(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFromReferencedFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanceable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanced(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstancedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isIntermediateObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isParentOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isShared(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNextPos: int = ...
    kNormalAttr: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    kUseDefaultColor: int = ...
    kUseIndexColor: int = ...
    kUseRGBColor: int = ...
    def magnitude(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def maxDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def model(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorRGB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def partialPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def perVertex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChildAt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAttenuation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIcon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInstanceable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIntermediateObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMagnitude(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColorType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPerVertex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseMaxDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transformationMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def useMaxDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingHiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnField_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnFluid(MFnDagNode):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def activeColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def boundingBox(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def childCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create2D(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create3D(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagRoot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def density(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dormantColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsReference(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsTemplate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def duplicate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def emitIntoArrays(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableDGTiming(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def expandToInclude(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def falloff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fuel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fullPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedByAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllPaths(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getColorMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getColors(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedSetsAndMembers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCoordinateMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCoordinates(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDensityMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDimensions(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFalloffMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getForceAtPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFuelMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getResolution(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getTemperatureMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getVelocity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getVelocityMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def gridSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasParent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def icon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inModel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inUnderWorld(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def index(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def instanceCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isAutoResize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isChildOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDefaultNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFromReferencedFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanceable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanced(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstancedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isIntermediateObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isParentOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isResizeToEmitter(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isShared(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kCenterGradient: int = ...
    kConstant: int = ...
    kDynamicColorGrid: int = ...
    kDynamicGrid: int = ...
    kExtensionAttr: int = ...
    kFixed: int = ...
    kGradient: int = ...
    kGrid: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNegXGradient: int = ...
    kNegYGradient: int = ...
    kNegZGradient: int = ...
    kNextPos: int = ...
    kNoFalloffGrid: int = ...
    kNormalAttr: int = ...
    kStaticColorGrid: int = ...
    kStaticFalloffGrid: int = ...
    kStaticGrid: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    kUseDefaultColor: int = ...
    kUseIndexColor: int = ...
    kUseRGBColor: int = ...
    kUseShadingColor: int = ...
    kXGradient: int = ...
    kYGradient: int = ...
    kZGradient: int = ...
    kZero: int = ...
    def model(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorRGB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def partialPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pressure(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChildAt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setColorMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCoordinateMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDensityMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFalloffMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFuelMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIcon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInstanceable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIntermediateObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColorType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTemperatureMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setVelocityMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def temperature(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def toGridIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def transformationMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def updateGrid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingHiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def velocityGridSizes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def voxelCenterPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnFluid_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnGravityField(MFnField):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def activeColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attenuation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def boundingBox(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def childCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagRoot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def direction(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dormantColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsReference(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsTemplate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def duplicate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableDGTiming(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def falloffCurve(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fullPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedByAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllPaths(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedSetsAndMembers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getForceAtPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasParent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def icon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inModel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inUnderWorld(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def instanceCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isChildOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDefaultNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFalloffCurveConstantOne(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFromReferencedFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanceable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanced(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstancedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isIntermediateObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isParentOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isShared(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNextPos: int = ...
    kNormalAttr: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    kUseDefaultColor: int = ...
    kUseIndexColor: int = ...
    kUseRGBColor: int = ...
    def magnitude(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def maxDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def model(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorRGB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def partialPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def perVertex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChildAt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAttenuation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDirection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIcon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInstanceable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIntermediateObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMagnitude(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColorType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPerVertex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseMaxDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transformationMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def useMaxDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingHiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnGravityField_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnInstancer(MFnDagNode):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def activeColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allInstances(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def boundingBox(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def childCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagRoot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dormantColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsReference(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsTemplate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def duplicate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableDGTiming(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fullPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedByAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllPaths(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedSetsAndMembers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasParent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def icon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inModel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inUnderWorld(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def instanceCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def instancesForParticle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isChildOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDefaultNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFromReferencedFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanceable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanced(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstancedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isIntermediateObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isParentOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isShared(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNextPos: int = ...
    kNormalAttr: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    kUseDefaultColor: int = ...
    kUseIndexColor: int = ...
    kUseRGBColor: int = ...
    def model(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorRGB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def partialPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def particleCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChildAt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIcon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInstanceable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIntermediateObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColorType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transformationMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingHiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnInstancer_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnNIdData(MFnData):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getObjectPtr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAny: int = ...
    kComponentList: int = ...
    kDoubleArray: int = ...
    kDynArrayAttrs: int = ...
    kDynSweptGeometry: int = ...
    kFalloffFunction: int = ...
    kFloatArray: int = ...
    kIntArray: int = ...
    kInvalid: int = ...
    kLast: int = ...
    kLattice: int = ...
    kMatrix: int = ...
    kMatrixArray: int = ...
    kMesh: int = ...
    kNId: int = ...
    kNObject: int = ...
    kNumeric: int = ...
    kNurbsCurve: int = ...
    kNurbsSurface: int = ...
    kPlugin: int = ...
    kPluginGeometry: int = ...
    kPointArray: int = ...
    kSphere: int = ...
    kString: int = ...
    kStringArray: int = ...
    kSubdSurface: int = ...
    kVectorArray: int = ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnNIdData_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnNObjectData(MFnData):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getClothObjectPtr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCollide(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getParticleObjectPtr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getRigidObjectPtr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isCached(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAny: int = ...
    kComponentList: int = ...
    kDoubleArray: int = ...
    kDynArrayAttrs: int = ...
    kDynSweptGeometry: int = ...
    kFalloffFunction: int = ...
    kFloatArray: int = ...
    kIntArray: int = ...
    kInvalid: int = ...
    kLast: int = ...
    kLattice: int = ...
    kMatrix: int = ...
    kMatrixArray: int = ...
    kMesh: int = ...
    kNId: int = ...
    kNObject: int = ...
    kNumeric: int = ...
    kNurbsCurve: int = ...
    kNurbsSurface: int = ...
    kPlugin: int = ...
    kPluginGeometry: int = ...
    kPointArray: int = ...
    kSphere: int = ...
    kString: int = ...
    kStringArray: int = ...
    kSubdSurface: int = ...
    kVectorArray: int = ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCached(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectPtr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnNObjectData_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnNewtonField(MFnField):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def activeColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attenuation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def boundingBox(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def childCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagRoot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dormantColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsReference(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsTemplate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def duplicate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableDGTiming(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def falloffCurve(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fullPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedByAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllPaths(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedSetsAndMembers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getForceAtPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasParent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def icon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inModel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inUnderWorld(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def instanceCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isChildOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDefaultNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFalloffCurveConstantOne(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFromReferencedFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanceable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanced(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstancedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isIntermediateObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isParentOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isShared(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNextPos: int = ...
    kNormalAttr: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    kUseDefaultColor: int = ...
    kUseIndexColor: int = ...
    kUseRGBColor: int = ...
    def magnitude(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def maxDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def minDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def model(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorRGB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def partialPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def perVertex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChildAt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAttenuation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIcon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInstanceable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIntermediateObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMagnitude(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMinDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColorType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPerVertex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseMaxDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transformationMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def useMaxDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingHiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnNewtonField_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnParticleSystem(MFnDagNode):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def acceleration(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def activeColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def age(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def betterIllum(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def boundingBox(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def castsShadows(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def childCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def count(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagRoot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deformedParticleShape(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def disableCloudAxis(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dormantColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsReference(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsTemplate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def duplicate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def emission(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def emit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableDGTiming(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def evaluateDynamics(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def flatShaded(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fullPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedByAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllPaths(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedSetsAndMembers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPerParticleAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasEmission(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasLifespan(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasOpacity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasParent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasRgb(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def icon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inModel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inUnderWorld(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def instanceCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isChildOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDefaultNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDeformedParticleShape(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFromReferencedFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanceable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanced(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstancedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isIntermediateObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isParentOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isPerParticleDoubleAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isPerParticleIntAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isPerParticleVectorAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isShared(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kBlobby: int = ...
    kCloud: int = ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kMultiPoint: int = ...
    kMultiStreak: int = ...
    kNextPos: int = ...
    kNormalAttr: int = ...
    kNumeric: int = ...
    kPoints: int = ...
    kSpheres: int = ...
    kSprites: int = ...
    kStreak: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    kTube: int = ...
    kUseDefaultColor: int = ...
    kUseIndexColor: int = ...
    kUseRGBColor: int = ...
    def lifespan(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def mass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def model(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorRGB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def opacity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def originalParticleShape(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def partialPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def particleIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def particleName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def position(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def position0(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def position1(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def primaryVisibility(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def radius(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def radius0(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def radius1(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def receiveShadows(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChildAt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def renderType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rgb(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def saveInitialState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIcon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInstanceable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIntermediateObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColorType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPerParticleAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def surfaceShading(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def tailSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def threshold(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def transformationMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingHiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def velocity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def visibleInReflections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def visibleInRefractions(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnParticleSystem_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnPfxGeometry(MFnDagNode):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def activeColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def boundingBox(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def childCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagRoot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dormantColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsReference(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsTemplate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def duplicate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableDGTiming(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fullPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedByAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllPaths(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getBoundingBox(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedSetsAndMembers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getLineData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasParent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def icon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inModel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inUnderWorld(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def instanceCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isChildOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDefaultNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFromReferencedFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanceable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanced(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstancedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isIntermediateObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isParentOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isShared(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNextPos: int = ...
    kNormalAttr: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    kUseDefaultColor: int = ...
    kUseIndexColor: int = ...
    kUseRGBColor: int = ...
    def model(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorRGB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def partialPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChildAt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIcon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInstanceable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIntermediateObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColorType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transformationMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingHiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnPfxGeometry_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnRadialField(MFnField):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def activeColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attenuation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def boundingBox(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def childCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagRoot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dormantColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsReference(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsTemplate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def duplicate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableDGTiming(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def falloffCurve(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fullPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedByAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllPaths(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedSetsAndMembers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getForceAtPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasParent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def icon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inModel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inUnderWorld(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def instanceCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isChildOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDefaultNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFalloffCurveConstantOne(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFromReferencedFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanceable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanced(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstancedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isIntermediateObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isParentOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isShared(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNextPos: int = ...
    kNormalAttr: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    kUseDefaultColor: int = ...
    kUseIndexColor: int = ...
    kUseRGBColor: int = ...
    def magnitude(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def maxDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def model(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorRGB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def partialPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def perVertex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def radialType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChildAt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAttenuation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIcon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInstanceable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIntermediateObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMagnitude(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColorType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPerVertex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseMaxDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transformationMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def useMaxDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingHiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnRadialField_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnTurbulenceField(MFnField):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def activeColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attenuation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def boundingBox(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def childCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagRoot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dormantColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsReference(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsTemplate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def duplicate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableDGTiming(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def falloffCurve(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def frequency(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fullPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedByAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllPaths(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedSetsAndMembers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getForceAtPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasParent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def icon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inModel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inUnderWorld(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def instanceCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isChildOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDefaultNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFalloffCurveConstantOne(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFromReferencedFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanceable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanced(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstancedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isIntermediateObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isParentOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isShared(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNextPos: int = ...
    kNormalAttr: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    kUseDefaultColor: int = ...
    kUseIndexColor: int = ...
    kUseRGBColor: int = ...
    def magnitude(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def maxDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def model(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorRGB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def partialPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def perVertex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def phase(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChildAt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAttenuation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFrequency(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIcon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInstanceable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIntermediateObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMagnitude(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColorType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPerVertex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPhase(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseMaxDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transformationMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def useMaxDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingHiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnTurbulenceField_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnUniformField(MFnField):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def activeColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attenuation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def boundingBox(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def childCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagRoot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def direction(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dormantColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsReference(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsTemplate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def duplicate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableDGTiming(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def falloffCurve(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fullPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedByAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllPaths(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedSetsAndMembers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getForceAtPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasParent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def icon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inModel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inUnderWorld(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def instanceCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isChildOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDefaultNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFalloffCurveConstantOne(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFromReferencedFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanceable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanced(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstancedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isIntermediateObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isParentOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isShared(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNextPos: int = ...
    kNormalAttr: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    kUseDefaultColor: int = ...
    kUseIndexColor: int = ...
    kUseRGBColor: int = ...
    def magnitude(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def maxDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def model(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorRGB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def partialPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def perVertex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChildAt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAttenuation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDirection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIcon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInstanceable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIntermediateObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMagnitude(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColorType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPerVertex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseMaxDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transformationMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def useMaxDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingHiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnUniformField_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnVolumeAxisField(MFnField):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def activeColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attenuation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def boundingBox(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def childCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagRoot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def detailTurbulence(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def direction(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def directionalSpeed(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dormantColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsReference(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsTemplate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def duplicate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableDGTiming(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def falloffCurve(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fullPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedByAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllPaths(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedSetsAndMembers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getForceAtPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasParent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def icon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inModel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inUnderWorld(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def instanceCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def invertAttenuation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isChildOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDefaultNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFalloffCurveConstantOne(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFromReferencedFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanceable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanced(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstancedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isIntermediateObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isParentOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isShared(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNextPos: int = ...
    kNormalAttr: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    kUseDefaultColor: int = ...
    kUseIndexColor: int = ...
    kUseRGBColor: int = ...
    def magnitude(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def maxDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def model(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorRGB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def partialPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def perVertex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChildAt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAttenuation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDirection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDirectionalSpeed(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIcon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInstanceable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIntermediateObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInvertAttenuation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMagnitude(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColorType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPerVertex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSpeedAlongAxis(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSpeedAroundAxis(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSpeedAwayFromAxis(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSpeedAwayFromCenter(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTurbulence(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTurbulenceFrequency(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTurbulenceOffset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTurbulenceSpeed(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseMaxDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def speedAlongAxis(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def speedAroundAxis(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def speedAwayFromAxis(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def speedAwayFromCenter(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transformationMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def turbulence(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def turbulenceFrequency(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def turbulenceOffset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def turbulenceSpeed(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def useMaxDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingHiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnVolumeAxisField_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnVortexField(MFnField):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def activeColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attenuation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def axis(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def boundingBox(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def childCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagRoot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dormantColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsReference(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsTemplate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def duplicate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableDGTiming(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def falloffCurve(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fullPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedByAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllPaths(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedSetsAndMembers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getForceAtPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasParent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def icon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inModel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inUnderWorld(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def instanceCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isChildOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDefaultNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFalloffCurveConstantOne(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFromReferencedFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanceable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanced(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstancedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isIntermediateObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isParentOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isShared(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNextPos: int = ...
    kNormalAttr: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    kUseDefaultColor: int = ...
    kUseIndexColor: int = ...
    kUseRGBColor: int = ...
    def magnitude(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def maxDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def model(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorRGB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def partialPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def perVertex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChildAt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAttenuation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAxis(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIcon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInstanceable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIntermediateObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMagnitude(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColorType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPerVertex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseMaxDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transformationMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def useMaxDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingHiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnVortexField_className(*args: Any, **kwargs: Any) -> Any: ...
class MHairSystem(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCollisionObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFollicle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registerCollisionSolverCollide(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registerCollisionSolverPreFrame(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registeringCallableScript(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRegisteringCallableScript(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def unregisterCollisionSolverCollide(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def unregisterCollisionSolverPreFrame(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MHairSystem_className(*args: Any, **kwargs: Any) -> Any: ...
def MHairSystem_getCollisionObject(*args: Any, **kwargs: Any) -> Any: ...
def MHairSystem_getFollicle(*args: Any, **kwargs: Any) -> Any: ...
def MHairSystem_registerCollisionSolverCollide(*args: Any, **kwargs: Any) -> Any: ...
def MHairSystem_registerCollisionSolverPreFrame(*args: Any, **kwargs: Any) -> Any: ...
def MHairSystem_registeringCallableScript(*args: Any, **kwargs: Any) -> Any: ...
def MHairSystem_setRegisteringCallableScript(*args: Any, **kwargs: Any) -> Any: ...
def MHairSystem_unregisterCollisionSolverCollide(*args: Any, **kwargs: Any) -> Any: ...
def MHairSystem_unregisterCollisionSolverPreFrame(*args: Any, **kwargs: Any) -> Any: ...
class MRenderLine(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFlatness(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getIncandescence(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getLine(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getParameter(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getTransparency(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getTwist(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getWidth(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MRenderLineArray(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def renderLine(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MRenderLineArray_className(*args: Any, **kwargs: Any) -> Any: ...
def MRenderLine_className(*args: Any, **kwargs: Any) -> Any: ...
class MnCloth(MnObject):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def createNCloth(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getBounce(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFriction(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInverseMass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getNumVertices(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPositions(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getThickness(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getVelocities(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAddCrossLinks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAirTightness(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setBendAngleDropoff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setBendAngleScale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setBendResistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setBendRestAngleFromPositions(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setBounce(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCollisionFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setComputeRestAngles(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setComputeRestLength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDamping(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDisableGravity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDragAndLift(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFriction(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIncompressibility(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInputMeshAttractAndRigidStrength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInputMeshAttractDamping(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInputMeshAttractPositions(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInverseMass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLinksRestLengthFromPositions(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxIterations(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxSelfCollisionIterations(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPositions(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPressure(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPressureDamping(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPumpRate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRestitutionAngle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRestitutionTension(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSealHoles(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSelfCollideWidth(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSelfCollisionFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSelfCollisionSoftness(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSelfCrossoverPush(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSelfTrappedCheck(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setShearResistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setStartPressure(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setStretchAndCompressionResistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTangentialDrag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setThickness(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTopology(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTrackVolume(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setVelocities(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MnObject(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    thisown: property = ...

class MnParticle(MnObject):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def createNParticle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getBounce(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFriction(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInverseMass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getNumVertices(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPositions(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getThickness(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getVelocities(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setBounce(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCollide(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDamping(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDisableGravity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDragAndLift(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFriction(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIncompressibility(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInverseMass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLiquidRadiusScale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLiquidSimulation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxIterations(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxSelfCollisionIterations(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPositions(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRestDensity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSelfCollide(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSelfCollideWidth(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSelfCollisionSoftness(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSurfaceTension(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setThickness(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTopology(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setVelocities(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setViscosity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MnRigid(MnObject):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def createNRigid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getBounce(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFriction(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInverseMass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getNumVertices(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPositions(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getThickness(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getVelocities(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setBounce(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCollisionFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFriction(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPositions(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setThickness(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTopology(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setVelocities(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MnSolver(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addNObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createNSolver(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def makeAllCollide(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAllCollisions(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeNObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAirDensity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDisabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setGravity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setGravityDir(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxIterations(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setStartTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSubsteps(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setWindDir(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setWindNoiseIntensity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setWindSpeed(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def solve(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class _SwigNonDynamicMeta:
    @property
    def __abstractmethods__(*args: Any, **kwargs: Any) -> Any: ...
    @__abstractmethods__.setter
    def __abstractmethods__(*args: Any, **kwargs: Any) -> Any: ...
    class type:
        @property
        def __abstractmethods__(*args: Any, **kwargs: Any) -> Any: ...
        @__abstractmethods__.setter
        def __abstractmethods__(*args: Any, **kwargs: Any) -> Any: ...
        class object:
            def __delattr__(self: Self, name: Any) -> Any:
                """Implement delattr(self, name)."""
            def __dir__(self: Self) -> Any:
                """Default dir() implementation."""
            __doc__: str = ...
            def __eq__(self: Self, value: Any) -> Any:
                """Return self==value."""
            def __format__(self: Self, format_spec: Any) -> Any:
                """Default object formatter."""
            def __ge__(self: Self, value: Any) -> Any:
                """Return self>=value."""
            def __getattribute__(self: Self, name: Any) -> Any:
                """Return getattr(self, name)."""
            def __gt__(self: Self, value: Any) -> Any:
                """Return self>value."""
            def __hash__(self: Self) -> Any:
                """Return hash(self)."""
            def __init__(self: Self, args: Any, kwargs: Any) -> Any:
                """Initialize self.  See help(type(self)) for accurate signature."""
            def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
                """This method is called when a class is subclassed.

                The default implementation does nothing. It may be
                overridden to extend subclasses.
                """
            def __le__(self: Self, value: Any) -> Any:
                """Return self<=value."""
            def __lt__(self: Self, value: Any) -> Any:
                """Return self<value."""
            def __ne__(self: Self, value: Any) -> Any:
                """Return self!=value."""
            def __new__(self: Self, args: Any, kwargs: Any) -> Any:
                """Create and return a new object.  See help(type) for accurate signature."""
            def __reduce__(self: Self) -> Any:
                """Helper for pickle."""
            def __reduce_ex__(self: Self, protocol: Any) -> Any:
                """Helper for pickle."""
            def __repr__(self: Self) -> Any:
                """Return repr(self)."""
            def __setattr__(self: Self, name: Any, value: Any) -> Any:
                """Implement setattr(self, name, value)."""
            def __sizeof__(self: Self) -> Any:
                """Size of object in memory, in bytes."""
            def __str__(self: Self) -> Any:
                """Return str(self)."""
            def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
                """Abstract classes can override this to customize issubclass().

                This is invoked early on by abc.ABCMeta.__subclasscheck__().
                It should return True, False or NotImplemented.  If it returns
                NotImplemented, the normal algorithm is used.  Otherwise, it
                overrides the normal algorithm (and the outcome is cached).
                """

        __bases__: tuple = ...
        __basicsize__: int = ...
        def __call__(self: Self, args: Any, kwargs: Any) -> Any:
            """Call self as a function."""
        def __delattr__(self: Self, name: Any) -> Any:
            """Implement delattr(self, name)."""
        __dict__: mappingproxy = ...
        __dictoffset__: int = ...
        def __dir__(self: Self) -> Any:
            """Specialized __dir__ implementation for types."""
        __doc__: str = ...
        def __eq__(self: Self, value: Any) -> Any:
            """Return self==value."""
        __flags__: int = ...
        def __format__(self: Self, format_spec: Any) -> Any:
            """Default object formatter."""
        def __ge__(self: Self, value: Any) -> Any:
            """Return self>=value."""
        def __getattribute__(self: Self, name: Any) -> Any:
            """Return getattr(self, name)."""
        def __gt__(self: Self, value: Any) -> Any:
            """Return self>value."""
        def __hash__(self: Self) -> Any:
            """Return hash(self)."""
        def __init__(self: Self, args: Any, kwargs: Any) -> Any:
            """Initialize self.  See help(type(self)) for accurate signature."""
        def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
            """This method is called when a class is subclassed.

            The default implementation does nothing. It may be
            overridden to extend subclasses.
            """
        def __instancecheck__(self: Self, instance: Any) -> Any:
            """Check if an object is an instance."""
        __itemsize__: int = ...
        def __le__(self: Self, value: Any) -> Any:
            """Return self<=value."""
        def __lt__(self: Self, value: Any) -> Any:
            """Return self<value."""
        __module__: str = ...
        __mro__: tuple = ...
        __name__: str = ...
        def __ne__(self: Self, value: Any) -> Any:
            """Return self!=value."""
        def __new__(self: Self, args: Any, kwargs: Any) -> Any:
            """Create and return a new object.  See help(type) for accurate signature."""
        def __prepare__(self: Self, *args: Any, **kwargs: Any) -> Any:
            """__prepare__() -> dict
            used to create the namespace for the class statement
            """
        __qualname__: str = ...
        def __reduce__(self: Self) -> Any:
            """Helper for pickle."""
        def __reduce_ex__(self: Self, protocol: Any) -> Any:
            """Helper for pickle."""
        def __repr__(self: Self) -> Any:
            """Return repr(self)."""
        def __setattr__(self: Self, name: Any, value: Any) -> Any:
            """Implement setattr(self, name, value)."""
        def __sizeof__(self: Self) -> Any:
            """Return memory consumption of the type object."""
        def __str__(self: Self) -> Any:
            """Return str(self)."""
        def __subclasscheck__(self: Self, subclass: Any) -> Any:
            """Check if a class is a subclass."""
        def __subclasses__(self: Self) -> Any:
            """Return a list of immediate subclasses."""
        def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
            """Abstract classes can override this to customize issubclass().

            This is invoked early on by abc.ABCMeta.__subclasscheck__().
            It should return True, False or NotImplemented.  If it returns
            NotImplemented, the normal algorithm is used.  Otherwise, it
            overrides the normal algorithm (and the outcome is cached).
            """
        __text_signature__: NoneType = ...
        __weakrefoffset__: int = ...
        def mro(self: Self) -> Any:
            """Return a type's method resolution order."""

    __bases__: tuple = ...
    __basicsize__: int = ...
    def __call__(self: Self, args: Any, kwargs: Any) -> Any:
        """Call self as a function."""
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    __dictoffset__: int = ...
    def __dir__(self: Self) -> Any:
        """Specialized __dir__ implementation for types."""
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    __flags__: int = ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any, kwargs: Any) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __instancecheck__(self: Self, instance: Any) -> Any:
        """Check if an object is an instance."""
    __itemsize__: int = ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    __mro__: tuple = ...
    __name__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __prepare__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """__prepare__() -> dict
        used to create the namespace for the class statement
        """
    __qualname__: str = ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any:
        """Return repr(self)."""
    def __setattr__(self: Self, cls: Any, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any:
        """Return memory consumption of the type object."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasscheck__(self: Self, subclass: Any) -> Any:
        """Check if a class is a subclass."""
    def __subclasses__(self: Self) -> Any:
        """Return a list of immediate subclasses."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    __text_signature__: NoneType = ...
    __weakrefoffset__: int = ...
    def mro(self: Self) -> Any:
        """Return a type's method resolution order."""

__builtins__: dict
__cached__: str
__doc__: NoneType
__file__: str
__loader__: SourcelessFileLoader
__name__: str
__package__: str
__spec__: ModuleSpec
def _swig_add_metaclass(metaclass: Any) -> Any:
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
def SWIG_PyInstanceMethod_New(*args: Any, **kwargs: Any) -> Any: ...
def SWIG_PyStaticMethod_New(*args: Any, **kwargs: Any) -> Any: ...
_swig_python_version_info: version_info
def _swig_repr(self: Self) -> Any: ...
def _swig_setattr_nondynamic_class_variable(set: Any) -> Any: ...
def _swig_setattr_nondynamic_instance_variable(set: Any) -> Any: ...
class boolPtr(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def boolPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
class charPtr(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def charPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
class doublePtr(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def doublePtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
class floatPtr(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def floatPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
class intPtr(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def intPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
class shortPtr(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def shortPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
class uCharPtr(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def uCharPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
class uIntPtr(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def uIntPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...