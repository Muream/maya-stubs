# fmt: off
from typing import *
from typing_extensions import Self
from _typeshed import Incomplete


def MDynSweptLine_className(*args: Any, **kwargs: Any) -> Any: ...
def MDynSweptTriangle_className(*args: Any, **kwargs: Any) -> Any: ...
def MDynamicsUtil_addNodeTypeToRunup(*args: Any, **kwargs: Any) -> Any: ...
def MDynamicsUtil_evalDynamics2dTexture(*args: Any, **kwargs: Any) -> Any: ...
def MDynamicsUtil_hasValidDynamics2dTexture(*args: Any, **kwargs: Any) -> Any: ...
def MDynamicsUtil_inRunup(*args: Any, **kwargs: Any) -> Any: ...
def MDynamicsUtil_removeNodeTypeFromRunup(*args: Any, **kwargs: Any) -> Any: ...
def MDynamicsUtil_runupIfRequired(*args: Any, **kwargs: Any) -> Any: ...
def MFnAirField_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnDragField_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnDynSweptGeometryData_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnField_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnFluid_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnGravityField_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnInstancer_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnNIdData_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnNObjectData_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnNewtonField_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnParticleSystem_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnPfxGeometry_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnRadialField_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnTurbulenceField_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnUniformField_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnVolumeAxisField_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnVortexField_className(*args: Any, **kwargs: Any) -> Any: ...
def MHairSystem_className(*args: Any, **kwargs: Any) -> Any: ...
def MHairSystem_getCollisionObject(*args: Any, **kwargs: Any) -> Any: ...
def MHairSystem_getFollicle(*args: Any, **kwargs: Any) -> Any: ...
def MHairSystem_registerCollisionSolverCollide(*args: Any, **kwargs: Any) -> Any: ...
def MHairSystem_registerCollisionSolverPreFrame(*args: Any, **kwargs: Any) -> Any: ...
def MHairSystem_registeringCallableScript(*args: Any, **kwargs: Any) -> Any: ...
def MHairSystem_setRegisteringCallableScript(*args: Any, **kwargs: Any) -> Any: ...
def MHairSystem_unregisterCollisionSolverCollide(*args: Any, **kwargs: Any) -> Any: ...
def MHairSystem_unregisterCollisionSolverPreFrame(*args: Any, **kwargs: Any) -> Any: ...
def MRenderLineArray_className(*args: Any, **kwargs: Any) -> Any: ...
def MRenderLine_className(*args: Any, **kwargs: Any) -> Any: ...
__builtins__: dict
__cached__: str
__doc__: NoneType
__file__: str
__loader__: SourcelessFileLoader
__name__: str
__package__: str
__spec__: ModuleSpec
def _swig_add_metaclass(metaclass: Any) -> Any:
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
def SWIG_PyInstanceMethod_New(*args: Any, **kwargs: Any) -> Any: ...
def SWIG_PyStaticMethod_New(*args: Any, **kwargs: Any) -> Any: ...
_swig_python_version_info: version_info
def _swig_repr(self: Self) -> Any: ...
def _swig_setattr_nondynamic_class_variable(set: Any) -> Any: ...
def _swig_setattr_nondynamic_instance_variable(set: Any) -> Any: ...
def boolPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
def charPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
def doublePtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
def floatPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
def intPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
def shortPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
def uCharPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
def uIntPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
class MDynSweptLine:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self: Self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self: Self) -> Any: ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def normal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def tangent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def vertex(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MDynSweptTriangle:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self: Self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self: Self) -> Any: ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def area(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def normal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def normalToPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def uvPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def vertex(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MDynamicsUtil:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self: Self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self: Self) -> Any: ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addNodeTypeToRunup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def evalDynamics2dTexture(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasValidDynamics2dTexture(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inRunup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeNodeTypeFromRunup(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def runupIfRequired(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnField(MFnDagNode):
    __dict__: mappingproxy = ...
    def __init__(self: Self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self: Self) -> Any: ...
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attenuation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def falloffCurve(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getForceAtPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFalloffCurveConstantOne(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def magnitude(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def maxDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def perVertex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAttenuation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMagnitude(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPerVertex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseMaxDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def useMaxDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFnAirField(MFnField):
    __dict__: mappingproxy = ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def componentOnly(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def direction(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableSpread(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inheritRotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inheritVelocity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setComponentOnly(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDirection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setEnableSpread(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInheritRotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInheritVelocity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSpeed(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSpread(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def speed(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def spread(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnDragField(MFnField):
    __dict__: mappingproxy = ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def direction(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDirection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseDirection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def useDirection(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFnDynSweptGeometryData(MFnData):
    __dict__: mappingproxy = ...
    def __init__(self: Self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self: Self) -> Any: ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def lineCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def sweptLine(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def sweptTriangle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def triangleCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFnFluid(MFnDagNode):
    __dict__: mappingproxy = ...
    def __init__(self: Self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self: Self) -> Any: ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create2D(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create3D(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def density(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def emitIntoArrays(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def expandToInclude(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def falloff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fuel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getColorMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getColors(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCoordinateMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCoordinates(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDensityMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDimensions(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFalloffMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getForceAtPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFuelMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getResolution(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getTemperatureMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getVelocity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getVelocityMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def gridSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def index(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isAutoResize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isResizeToEmitter(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pressure(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setColorMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCoordinateMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDensityMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFalloffMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFuelMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTemperatureMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setVelocityMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def temperature(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def toGridIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def updateGrid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def velocityGridSizes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def voxelCenterPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFnGravityField(MFnField):
    __dict__: mappingproxy = ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def direction(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDirection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnInstancer(MFnDagNode):
    __dict__: mappingproxy = ...
    def __init__(self: Self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self: Self) -> Any: ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allInstances(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def instancesForParticle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def particleCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnNIdData(MFnData):
    __dict__: mappingproxy = ...
    def __init__(self: Self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self: Self) -> Any: ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getObjectPtr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnNObjectData(MFnData):
    __dict__: mappingproxy = ...
    def __init__(self: Self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self: Self) -> Any: ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getClothObjectPtr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCollide(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getParticleObjectPtr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getRigidObjectPtr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isCached(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCached(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectPtr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnNewtonField(MFnField):
    __dict__: mappingproxy = ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def minDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMinDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnParticleSystem(MFnDagNode):
    __dict__: mappingproxy = ...
    def __init__(self: Self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self: Self) -> Any: ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def acceleration(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def age(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def betterIllum(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def castsShadows(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def count(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deformedParticleShape(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def disableCloudAxis(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def emission(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def emit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def evaluateDynamics(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def flatShaded(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPerParticleAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasEmission(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasLifespan(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasOpacity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasRgb(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDeformedParticleShape(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isPerParticleDoubleAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isPerParticleIntAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isPerParticleVectorAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def lifespan(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def mass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def opacity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def originalParticleShape(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def particleIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def particleName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def position(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def position0(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def position1(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def primaryVisibility(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def radius(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def radius0(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def radius1(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def receiveShadows(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def renderType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rgb(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def saveInitialState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPerParticleAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def surfaceShading(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def tailSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def threshold(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def velocity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def visibleInReflections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def visibleInRefractions(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFnPfxGeometry(MFnDagNode):
    __dict__: mappingproxy = ...
    def __init__(self: Self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self: Self) -> Any: ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getBoundingBox(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getLineData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnRadialField(MFnField):
    __dict__: mappingproxy = ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def radialType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnTurbulenceField(MFnField):
    __dict__: mappingproxy = ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def frequency(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def phase(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFrequency(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPhase(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnUniformField(MFnField):
    __dict__: mappingproxy = ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def direction(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDirection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnVolumeAxisField(MFnField):
    __dict__: mappingproxy = ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def detailTurbulence(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def direction(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def directionalSpeed(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def invertAttenuation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDirection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDirectionalSpeed(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInvertAttenuation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSpeedAlongAxis(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSpeedAroundAxis(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSpeedAwayFromAxis(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSpeedAwayFromCenter(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTurbulence(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTurbulenceFrequency(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTurbulenceOffset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTurbulenceSpeed(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def speedAlongAxis(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def speedAroundAxis(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def speedAwayFromAxis(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def speedAwayFromCenter(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def turbulence(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def turbulenceFrequency(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def turbulenceOffset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def turbulenceSpeed(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFnVortexField(MFnField):
    __dict__: mappingproxy = ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def axis(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAxis(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MHairSystem:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self: Self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self: Self) -> Any: ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCollisionObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFollicle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registerCollisionSolverCollide(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registerCollisionSolverPreFrame(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registeringCallableScript(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRegisteringCallableScript(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def unregisterCollisionSolverCollide(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def unregisterCollisionSolverPreFrame(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MRenderLine:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self: Self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self: Self) -> Any: ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFlatness(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getIncandescence(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getLine(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getParameter(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getTransparency(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getTwist(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getWidth(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MRenderLineArray:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self: Self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self: Self) -> Any: ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteArray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def renderLine(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MnObject:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self: Self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self: Self) -> Any: ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    thisown: property = ...

class MnCloth(MnObject):
    __dict__: mappingproxy = ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createNCloth(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getBounce(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFriction(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInverseMass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getNumVertices(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPositions(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getThickness(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getVelocities(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAddCrossLinks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAirTightness(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setBendAngleDropoff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setBendAngleScale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setBendResistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setBendRestAngleFromPositions(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setBounce(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCollisionFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setComputeRestAngles(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setComputeRestLength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDamping(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDisableGravity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDragAndLift(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFriction(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIncompressibility(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInputMeshAttractAndRigidStrength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInputMeshAttractDamping(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInputMeshAttractPositions(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInverseMass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLinksRestLengthFromPositions(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxIterations(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxSelfCollisionIterations(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPositions(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPressure(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPressureDamping(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPumpRate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRestitutionAngle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRestitutionTension(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSealHoles(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSelfCollideWidth(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSelfCollisionFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSelfCollisionSoftness(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSelfCrossoverPush(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSelfTrappedCheck(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setShearResistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setStartPressure(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setStretchAndCompressionResistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTangentialDrag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setThickness(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTopology(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTrackVolume(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setVelocities(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MnParticle(MnObject):
    __dict__: mappingproxy = ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createNParticle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getBounce(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFriction(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInverseMass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getNumVertices(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPositions(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getThickness(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getVelocities(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setBounce(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCollide(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDamping(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDisableGravity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDragAndLift(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFriction(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIncompressibility(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInverseMass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLiquidRadiusScale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLiquidSimulation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxIterations(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxSelfCollisionIterations(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPositions(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRestDensity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSelfCollide(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSelfCollideWidth(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSelfCollisionSoftness(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSurfaceTension(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setThickness(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTopology(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setVelocities(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setViscosity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MnRigid(MnObject):
    __dict__: mappingproxy = ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createNRigid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getBounce(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getFriction(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInverseMass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getNumVertices(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPositions(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getThickness(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getVelocities(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setBounce(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCollisionFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFriction(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPositions(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setThickness(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTopology(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setVelocities(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MnSolver:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self: Self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self: Self) -> Any: ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addNObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createNSolver(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def makeAllCollide(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAllCollisions(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeNObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAirDensity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDisabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setGravity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setGravityDir(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxIterations(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setStartTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSubsteps(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setWindDir(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setWindNoiseIntensity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setWindSpeed(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def solve(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class _SwigNonDynamicMeta(type):
    __bases__: tuple = ...
    __dict__: mappingproxy = ...
    __doc__: str = ...
    __module__: str = ...
    __mro__: tuple = ...
    __name__: str = ...
    __qualname__: str = ...
    def __setattr__(self: Self, cls: Any, name: Any, value: Any) -> Any: ...

class boolPtr:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self: Self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self: Self) -> Any: ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class charPtr:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self: Self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self: Self) -> Any: ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class doublePtr:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self: Self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self: Self) -> Any: ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class floatPtr:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self: Self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self: Self) -> Any: ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class intPtr:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self: Self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self: Self) -> Any: ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class shortPtr:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self: Self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self: Self) -> Any: ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class uCharPtr:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self: Self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self: Self) -> Any: ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class uIntPtr:
    __dict__: mappingproxy = ...
    __doc__: NoneType = ...
    def __init__(self: Self, args: Any) -> Any: ...
    __module__: str = ...
    def __repr__(self: Self) -> Any: ...
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...
