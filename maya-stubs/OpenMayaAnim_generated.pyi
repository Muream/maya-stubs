# fmt: off
from typing import *
from typing_extensions import Self
from _typeshed import Incomplete


class MAnimControl(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def animationEndTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def animationStartTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def autoKeyMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def globalInTangentType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def globalOutTangentType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isPlaying(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isScrubbing(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kPlaybackLoop: int = ...
    kPlaybackOnce: int = ...
    kPlaybackOscillate: int = ...
    kPlaybackViewActive: int = ...
    kPlaybackViewAll: int = ...
    def maxTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def minTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def playBackward(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def playForward(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def playbackBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def playbackMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def playbackSpeed(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAnimationEndTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAnimationStartEndTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAnimationStartTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAutoKeyMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCurrentTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setGlobalInTangentType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setGlobalOutTangentType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMinMaxTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMinTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPlaybackBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPlaybackMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPlaybackSpeed(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setViewMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setWeightedTangents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def stop(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def viewMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def weightedTangents(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MAnimControl_animationEndTime(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_animationStartTime(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_autoKeyMode(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_currentTime(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_globalInTangentType(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_globalOutTangentType(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_isPlaying(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_isScrubbing(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_isValid(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_maxTime(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_minTime(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_playBackward(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_playForward(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_playbackBy(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_playbackMode(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_playbackSpeed(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_setAnimationEndTime(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_setAnimationStartEndTime(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_setAnimationStartTime(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_setAutoKeyMode(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_setCurrentTime(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_setGlobalInTangentType(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_setGlobalOutTangentType(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_setMaxTime(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_setMinMaxTime(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_setMinTime(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_setPlaybackBy(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_setPlaybackMode(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_setPlaybackSpeed(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_setViewMode(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_setWeightedTangents(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_stop(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_viewMode(*args: Any, **kwargs: Any) -> Any: ...
def MAnimControl_weightedTangents(*args: Any, **kwargs: Any) -> Any: ...
class MAnimCurveChange(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInteractive(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def redoIt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInteractive(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def undoIt(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MAnimCurveChange_className(*args: Any, **kwargs: Any) -> Any: ...
class MAnimCurveClipboard(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def clear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clipboardItems(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def endTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def endUnitlessInput(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isEmpty(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def startTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def startUnitlessInput(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def theAPIClipboard(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MAnimCurveClipboardItem(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    __hash__: NoneType = ...
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def animCurve(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def animCurveType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fullAttributeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAddressingInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def leafAttributeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def nodeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAddressingInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAnimCurve(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setNameInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MAnimCurveClipboardItemArray(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __getitem__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def append(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSizeIncrement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def sizeIncrement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MAnimCurveClipboardItemArray_className(*args: Any, **kwargs: Any) -> Any: ...
def MAnimCurveClipboardItem_className(*args: Any, **kwargs: Any) -> Any: ...
def MAnimCurveClipboard_theAPIClipboard(*args: Any, **kwargs: Any) -> Any: ...
class MAnimMessage(MMessage):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def addAnimCurveEditedCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAnimKeyframeEditCheckCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAnimKeyframeEditedCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addDisableImplicitControlCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addNodeAnimKeyframeEditedCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addPostBakeResultsCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addPreBakeResultsCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentCallbackId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def flushAnimKeyframeEditedCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCallableInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kDefaultAction: int = ...
    kDoAction: int = ...
    kDoNotDoAction: int = ...
    def nodeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registeringCallableScript(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCallableInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRegisteringCallableScript(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def stealCallableInfo(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def stopRegisteringCallableScript(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MAnimMessage_addAnimCurveEditedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MAnimMessage_addAnimKeyframeEditCheckCallback(*args: Any, **kwargs: Any) -> Any: ...
def MAnimMessage_addAnimKeyframeEditedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MAnimMessage_addDisableImplicitControlCallback(*args: Any, **kwargs: Any) -> Any: ...
def MAnimMessage_addNodeAnimKeyframeEditedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MAnimMessage_addPostBakeResultsCallback(*args: Any, **kwargs: Any) -> Any: ...
def MAnimMessage_addPreBakeResultsCallback(*args: Any, **kwargs: Any) -> Any: ...
def MAnimMessage_className(*args: Any, **kwargs: Any) -> Any: ...
def MAnimMessage_flushAnimKeyframeEditedCallbacks(*args: Any, **kwargs: Any) -> Any: ...
class MAnimUtil(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAnimatablePlugs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAnimatedPlugs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAnimationLayers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findConstraint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findSetDrivenKeyAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isAnimated(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MAnimUtil_className(*args: Any, **kwargs: Any) -> Any: ...
def MAnimUtil_findAnimatablePlugs(*args: Any, **kwargs: Any) -> Any: ...
def MAnimUtil_findAnimatedPlugs(*args: Any, **kwargs: Any) -> Any: ...
def MAnimUtil_findAnimation(*args: Any, **kwargs: Any) -> Any: ...
def MAnimUtil_findAnimationLayers(*args: Any, **kwargs: Any) -> Any: ...
def MAnimUtil_findConstraint(*args: Any, **kwargs: Any) -> Any: ...
def MAnimUtil_findSetDrivenKeyAnimation(*args: Any, **kwargs: Any) -> Any: ...
def MAnimUtil_isAnimated(*args: Any, **kwargs: Any) -> Any: ...
class MFnAnimCurve(MFnDependencyNode):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addKey(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addKeyframe(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addKeys(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addKeysWithTangents(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def animCurveType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableDGTiming(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def evaluate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def find(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findClosest(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedByAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getTangent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def icon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inTangentType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def insertKey(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isBreakdown(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDefaultNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFromReferencedFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isShared(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isStatic(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTimeInput(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isUnitlessInput(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isWeighted(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAnimCurveTA: int = ...
    kAnimCurveTL: int = ...
    kAnimCurveTT: int = ...
    kAnimCurveTU: int = ...
    kAnimCurveUA: int = ...
    kAnimCurveUL: int = ...
    kAnimCurveUT: int = ...
    kAnimCurveUU: int = ...
    kAnimCurveUnknown: int = ...
    kConstant: int = ...
    kCycle: int = ...
    kCycleRelative: int = ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kLinear: int = ...
    kLocalDynamicAttr: int = ...
    kNormalAttr: int = ...
    kOscillate: int = ...
    kTangentAuto: int = ...
    kTangentAutoCustom: int = ...
    kTangentAutoEase: int = ...
    kTangentAutoMix: int = ...
    kTangentClamped: int = ...
    kTangentCustomEnd: int = ...
    kTangentCustomStart: int = ...
    kTangentFast: int = ...
    kTangentFixed: int = ...
    kTangentFlat: int = ...
    kTangentGlobal: int = ...
    kTangentLinear: int = ...
    kTangentPlateau: int = ...
    kTangentShared1: int = ...
    kTangentShared2: int = ...
    kTangentShared3: int = ...
    kTangentShared4: int = ...
    kTangentShared5: int = ...
    kTangentShared6: int = ...
    kTangentShared7: int = ...
    kTangentShared8: int = ...
    kTangentSlow: int = ...
    kTangentSmooth: int = ...
    kTangentStep: int = ...
    kTangentStepNext: int = ...
    kTangentTypeCount: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numKeyframes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numKeys(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def outTangentType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def postInfinityType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def preInfinityType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAngle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIcon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInTangentType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIsBreakdown(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIsWeighted(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setOutTangentType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPostInfinityType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPreInfinityType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTangent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTangentTypes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTangentsLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUnitlessInput(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setWeight(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setWeightsLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def tangentsLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def time(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def timedAnimCurveTypeForPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def unitlessAnimCurveTypeForPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def unitlessInput(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def weightsLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnAnimCurve_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnBlendShapeDeformer(MFnDependencyNode):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addBaseObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addTarget(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableDGTiming(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def envelope(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedByAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getBaseObjects(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getTargets(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def historyLocation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def icon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDefaultNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFromReferencedFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isShared(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kExtensionAttr: int = ...
    kFrontOfChain: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kLocalOrigin: int = ...
    kNormal: int = ...
    kNormalAttr: int = ...
    kObject: int = ...
    kOther: int = ...
    kPost: int = ...
    kTangent: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    kWorldOrigin: int = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numWeights(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def origin(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeTarget(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setEnvelope(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIcon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setOrigin(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setWeight(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def targetItemIndexList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def weight(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def weightIndexList(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnBlendShapeDeformer_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnCharacter(MFnSet):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addCurveToClip(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addMember(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addMembers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def annotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attachInstanceToCharacter(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attachSourceToCharacter(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def blendExists(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createBlend(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableDGTiming(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedByAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getBlend(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getBlendClips(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getBlendCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCharacterThatOwnsPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getClipScheduler(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getIntersection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getMemberPaths(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getMemberPlugs(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getMembers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getScheduledClip(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getScheduledClipCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getSourceClip(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getSourceClipCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getSubCharacters(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getUnion(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasRestrictions(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def icon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def intersectsWith(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDefaultNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFromReferencedFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isMember(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isShared(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kEdgesOnly: int = ...
    kEditPointsOnly: int = ...
    kExtensionAttr: int = ...
    kFacetsOnly: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNone: int = ...
    kNormalAttr: int = ...
    kRenderableOnly: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    kVerticesOnly: int = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeBlend(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeMember(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeMembers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def restriction(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAnnotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIcon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnCharacter_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnClip(MFnDependencyNode):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createInstancedClip(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createSourceClip(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableDGTiming(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAbsolute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAbsoluteChannelSettings(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedByAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCycle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getMemberAnimCurves(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPostCycle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPreCycle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getScale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getSourceDuration(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getSourceStart(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getStartFrame(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getTrack(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getWeight(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def icon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDefaultNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFromReferencedFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstancedClip(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isPose(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isShared(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNormalAttr: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAbsolute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAbsoluteChannelSettings(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCycle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIcon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPoseClip(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPostCycle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPreCycle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSourceData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setStartFrame(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTrack(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setWeight(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def sourceClip(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnClip_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnGeometryFilter(MFnDependencyNode):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deformerSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableDGTiming(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def envelope(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedByAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getComponentAtIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInputGeometry(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getOutputGeometry(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPathAtIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def groupIdAtIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def icon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def indexForGroupId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def indexForOutputConnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def indexForOutputShape(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inputShapeAtIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDefaultNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFromReferencedFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isShared(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNormalAttr: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numOutputConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def outputShapeAtIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setEnvelope(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIcon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnGeometryFilter_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnHikEffector(MFnTransform):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def activeColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def boundingBox(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def childCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clearRestPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagRoot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dormantColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsReference(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsTemplate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def duplicate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableDGTiming(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fullPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedByAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllPaths(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAuxiliaryEffectors(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedSetsAndMembers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getEffColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPivotOffset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getRotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getRotationQuaternion(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getScale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getShear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasParent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def icon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inModel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inUnderWorld(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def instanceCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isChildOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDefaultNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFromReferencedFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanceable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanced(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstancedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isIntermediateObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLimited(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isParentOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isShared(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNextPos: int = ...
    kNormalAttr: int = ...
    kRotateMaxX: int = ...
    kRotateMaxY: int = ...
    kRotateMaxZ: int = ...
    kRotateMinX: int = ...
    kRotateMinY: int = ...
    kRotateMinZ: int = ...
    kScaleMaxX: int = ...
    kScaleMaxY: int = ...
    kScaleMaxZ: int = ...
    kScaleMinX: int = ...
    kScaleMinY: int = ...
    kScaleMinZ: int = ...
    kShearMaxXY: int = ...
    kShearMaxXZ: int = ...
    kShearMaxYZ: int = ...
    kShearMinXY: int = ...
    kShearMinXZ: int = ...
    kShearMinYZ: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    kTranslateMaxX: int = ...
    kTranslateMaxY: int = ...
    kTranslateMaxZ: int = ...
    kTranslateMinX: int = ...
    kTranslateMinY: int = ...
    kTranslateMinZ: int = ...
    kUseDefaultColor: int = ...
    kUseIndexColor: int = ...
    kUseRGBColor: int = ...
    def limitValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def model(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorRGB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def partialPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChildAt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def resetFromRestPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def restPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateByQuaternion(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateOrientation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotatePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotatePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotationOrder(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scaleBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scalePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scalePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setEffColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIcon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInstanceable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIntermediateObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColorType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPivotOffset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRestPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotateOrientation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotatePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotatePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotationOrder(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotationQuaternion(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScalePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScalePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setShear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shearBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def transformationMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def translateBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def translation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingHiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnHikEffector_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnIkEffector(MFnTransform):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def activeColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def boundingBox(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def childCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clearRestPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagRoot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dormantColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsReference(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsTemplate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def duplicate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableDGTiming(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fullPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedByAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllPaths(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedSetsAndMembers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getRotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getRotationQuaternion(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getScale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getShear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasParent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def icon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inModel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inUnderWorld(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def instanceCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isChildOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDefaultNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFromReferencedFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanceable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanced(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstancedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isIntermediateObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLimited(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isParentOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isShared(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNextPos: int = ...
    kNormalAttr: int = ...
    kRotateMaxX: int = ...
    kRotateMaxY: int = ...
    kRotateMaxZ: int = ...
    kRotateMinX: int = ...
    kRotateMinY: int = ...
    kRotateMinZ: int = ...
    kScaleMaxX: int = ...
    kScaleMaxY: int = ...
    kScaleMaxZ: int = ...
    kScaleMinX: int = ...
    kScaleMinY: int = ...
    kScaleMinZ: int = ...
    kShearMaxXY: int = ...
    kShearMaxXZ: int = ...
    kShearMaxYZ: int = ...
    kShearMinXY: int = ...
    kShearMinXZ: int = ...
    kShearMinYZ: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    kTranslateMaxX: int = ...
    kTranslateMaxY: int = ...
    kTranslateMaxZ: int = ...
    kTranslateMinX: int = ...
    kTranslateMinY: int = ...
    kTranslateMinZ: int = ...
    kUseDefaultColor: int = ...
    kUseIndexColor: int = ...
    kUseRGBColor: int = ...
    def limitValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def model(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorRGB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def partialPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChildAt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def resetFromRestPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def restPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateByQuaternion(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateOrientation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotatePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotatePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotationOrder(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scaleBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scalePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scalePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIcon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInstanceable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIntermediateObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColorType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRestPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotateOrientation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotatePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotatePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotationOrder(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotationQuaternion(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScalePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScalePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setShear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shearBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def transformationMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def translateBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def translation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingHiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnIkEffector_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnIkHandle(MFnTransform):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def activeColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def boundingBox(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def childCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clearRestPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagRoot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dormantColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsReference(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsTemplate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def duplicate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableDGTiming(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fullPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedByAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllPaths(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedSetsAndMembers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getEffector(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getRotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getRotationQuaternion(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getScale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getShear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getStartJoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasParent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def icon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inModel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inUnderWorld(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def instanceCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isChildOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDefaultNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFromReferencedFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanceable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanced(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstancedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isIntermediateObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLimited(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isParentOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isShared(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNextPos: int = ...
    kNormalAttr: int = ...
    kRotateMaxX: int = ...
    kRotateMaxY: int = ...
    kRotateMaxZ: int = ...
    kRotateMinX: int = ...
    kRotateMinY: int = ...
    kRotateMinZ: int = ...
    kScaleMaxX: int = ...
    kScaleMaxY: int = ...
    kScaleMaxZ: int = ...
    kScaleMinX: int = ...
    kScaleMinY: int = ...
    kScaleMinZ: int = ...
    kShearMaxXY: int = ...
    kShearMaxXZ: int = ...
    kShearMaxYZ: int = ...
    kShearMinXY: int = ...
    kShearMinXZ: int = ...
    kShearMinYZ: int = ...
    kStickyOff: int = ...
    kStickyOn: int = ...
    kSuperSticky: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    kTranslateMaxX: int = ...
    kTranslateMaxY: int = ...
    kTranslateMaxZ: int = ...
    kTranslateMinX: int = ...
    kTranslateMinY: int = ...
    kTranslateMinZ: int = ...
    kUseDefaultColor: int = ...
    kUseIndexColor: int = ...
    kUseRGBColor: int = ...
    def limitValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def model(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorRGB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def partialPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def poWeight(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def priority(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChildAt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def resetFromRestPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def restPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateByQuaternion(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateOrientation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotatePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotatePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotationOrder(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scaleBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scalePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scalePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setEffector(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIcon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInstanceable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIntermediateObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColorType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPOWeight(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPriority(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRestPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotateOrientation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotatePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotatePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotationOrder(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotationQuaternion(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScalePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScalePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setShear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSolver(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setStartJoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setStartJointAndEffector(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setStickiness(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setWeight(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shearBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def solver(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def stickiness(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def transformationMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def translateBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def translation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingHiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def weight(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnIkHandle_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnIkJoint(MFnTransform):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def activeColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def boundingBox(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def childCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clearRestPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagRoot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dormantColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsReference(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsTemplate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def duplicate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableDGTiming(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fullPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedByAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllPaths(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedSetsAndMembers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDegreesOfFreedom(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getOrientation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPreferedAngle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPreferredAngle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getRotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getRotationQuaternion(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getScale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getScaleOrientation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getSegmentScale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getShear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getStiffness(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasParent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hikJointName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def icon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inModel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inUnderWorld(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def instanceCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isChildOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDefaultNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFromReferencedFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanceable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanced(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstancedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isIntermediateObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLimited(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isParentOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isShared(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNextPos: int = ...
    kNone: int = ...
    kNormalAttr: int = ...
    kRotateMaxX: int = ...
    kRotateMaxY: int = ...
    kRotateMaxZ: int = ...
    kRotateMinX: int = ...
    kRotateMinY: int = ...
    kRotateMinZ: int = ...
    kScaleMaxX: int = ...
    kScaleMaxY: int = ...
    kScaleMaxZ: int = ...
    kScaleMinX: int = ...
    kScaleMinY: int = ...
    kScaleMinZ: int = ...
    kShearMaxXY: int = ...
    kShearMaxXZ: int = ...
    kShearMaxYZ: int = ...
    kShearMinXY: int = ...
    kShearMinXZ: int = ...
    kShearMinYZ: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    kTranslateMaxX: int = ...
    kTranslateMaxY: int = ...
    kTranslateMaxZ: int = ...
    kTranslateMinX: int = ...
    kTranslateMinY: int = ...
    kTranslateMinZ: int = ...
    kUseDefaultColor: int = ...
    kUseIndexColor: int = ...
    kUseRGBColor: int = ...
    kXAxis: int = ...
    kYAxis: int = ...
    kZAxis: int = ...
    def limitValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def maxRotateDampXRange(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def maxRotateDampXStrength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def maxRotateDampYRange(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def maxRotateDampYStrength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def maxRotateDampZRange(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def maxRotateDampZStrength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def minRotateDampXRange(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def minRotateDampXStrength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def minRotateDampYRange(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def minRotateDampYStrength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def minRotateDampZRange(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def minRotateDampZStrength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def model(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorRGB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def partialPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChildAt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def resetFromRestPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def restPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateByQuaternion(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateOrientation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotatePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotatePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotationOrder(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scaleBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scalePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scalePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDegreesOfFreedom(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIcon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInstanceable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIntermediateObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLimit(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxRotateDampXRange(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxRotateDampXStrength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxRotateDampYRange(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxRotateDampYStrength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxRotateDampZRange(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxRotateDampZStrength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMinRotateDampXRange(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMinRotateDampXStrength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMinRotateDampYRange(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMinRotateDampYStrength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMinRotateDampZRange(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMinRotateDampZStrength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColorType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setOrientation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPreferedAngle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPreferredAngle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRestPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotateOrientation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotatePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotatePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotationOrder(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotationQuaternion(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScaleOrientation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScalePivot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScalePivotTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSegmentScale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setShear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setStiffness(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTranslation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shearBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def transformationMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def translateBy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def translation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingHiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnIkJoint_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnIkSolver(MFnDependencyNode):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableDGTiming(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedByAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def icon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDefaultNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFromReferencedFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isShared(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNormalAttr: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    def maxIterations(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIcon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxIterations(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTolerance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def tolerance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnIkSolver_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnKeyframeDelta(MFnBase):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def keyIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def paramCurve(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFnKeyframeDeltaAddRemove(MFnKeyframeDelta):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deltaType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAdded: int = ...
    kRemoved: int = ...
    kReplaced: int = ...
    def keyIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def paramCurve(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def replacedValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def time(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnKeyframeDeltaAddRemove_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnKeyframeDeltaBlockAddRemove(MFnKeyframeDelta):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deltaType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def endTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getTimes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getValues(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAdded: int = ...
    kRemoved: int = ...
    def keyIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numKeys(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def paramCurve(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def startTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnKeyframeDeltaBlockAddRemove_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnKeyframeDeltaBreakdown(MFnKeyframeDelta):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isBreakdown(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def keyIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def paramCurve(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def wasBreakdown(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnKeyframeDeltaBreakdown_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnKeyframeDeltaInfType(MFnKeyframeDelta):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentInfinityType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isPreInfinity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def keyIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def paramCurve(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def previousInfinityType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnKeyframeDeltaInfType_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnKeyframeDeltaMove(MFnKeyframeDelta):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def keyIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def paramCurve(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def previousIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def previousTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def previousValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnKeyframeDeltaMove_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnKeyframeDeltaScale(MFnKeyframeDelta):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentEndTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentStartTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def endTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def keyIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def paramCurve(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pivotTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def startTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnKeyframeDeltaScale_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnKeyframeDeltaTangent(MFnKeyframeDelta):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentTangentType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCurrentPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPreviousPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInTangent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def keyIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def paramCurve(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def previousTangentType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnKeyframeDeltaTangent_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnKeyframeDeltaWeighted(MFnKeyframeDelta):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def keyIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def paramCurve(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def wasWeighted(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnKeyframeDeltaWeighted_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnKeyframeDelta_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnLattice(MFnDagNode):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def activeColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def boundingBox(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def child(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def childCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dagRoot(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dormantColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsReference(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawOverrideIsTemplate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def duplicate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableDGTiming(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fullPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedByAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAllPaths(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnectedSetsAndMembers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDivisions(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasParent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def icon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inModel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inUnderWorld(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def instanceCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isChildOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDefaultNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFromReferencedFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanceable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstanced(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInstancedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isIntermediateObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isParentOf(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isShared(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNextPos: int = ...
    kNormalAttr: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    kUseDefaultColor: int = ...
    kUseIndexColor: int = ...
    kUseRGBColor: int = ...
    def model(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorRGB(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectColorType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectGroupComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def partialPathName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def point(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChild(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeChildAt(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDivisions(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIcon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInstanceable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIntermediateObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectColorType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def transformationMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingHiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingObjectColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFnLatticeDeformer(MFnDependencyNode):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addGeometry(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def baseLattice(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deformLattice(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableDGTiming(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedByAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedGeometry(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDivisions(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def icon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDefaultNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFromReferencedFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isShared(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNormalAttr: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeGeometry(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def resetLattice(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDivisions(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIcon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnLatticeDeformer_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnLattice_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnMotionPath(MFnDependencyNode):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAnimatedObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def bank(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def bankScale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def bankThreshold(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableDGTiming(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def follow(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def followAxis(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedByAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAnimatedObjects(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getOrientationMarker(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPositionMarker(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def icon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inverseNormal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDefaultNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFromReferencedFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isShared(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNormalAttr: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    kXaxis: int = ...
    kYaxis: int = ...
    kZaxis: int = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numOrientationMarkers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numPositionMarkers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pathObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setBank(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setBankScale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setBankThreshold(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFollow(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFollowAxis(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIcon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInverseNormal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPathObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUEnd(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUStart(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUTimeEnd(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUTimeStart(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUpAxis(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUseNormal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uEnd(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uStart(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uTimeEnd(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uTimeStart(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def upAxis(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def useNormal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnMotionPath_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnSkinCluster(MFnGeometryFilter):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deformerSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableDGTiming(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def envelope(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedByAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getBlendWeights(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getComponentAtIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInputGeometry(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getOutputGeometry(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPathAtIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPointsAffectedByInfluence(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getWeights(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def groupIdAtIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def icon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def indexForGroupId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def indexForInfluenceObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def indexForOutputConnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def indexForOutputShape(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def influenceObjects(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inputShapeAtIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDefaultNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFromReferencedFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isShared(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNormalAttr: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numOutputConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def outputShapeAtIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setBlendWeights(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setEnvelope(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIcon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setWeights(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnSkinCluster_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnWeightGeometryFilter(MFnGeometryFilter):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deformerSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableDGTiming(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def envelope(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedByAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getComponentAtIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getInputGeometry(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getOutputGeometry(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPathAtIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getWeightPlugStrings(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getWeights(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def groupIdAtIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def icon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def indexForGroupId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def indexForOutputConnection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def indexForOutputShape(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inputShapeAtIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDefaultNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFromReferencedFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isShared(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNormalAttr: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numOutputConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def outputShapeAtIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setEnvelope(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIcon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setWeight(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def weightPlugStrings(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnWeightGeometryFilter_className(*args: Any, **kwargs: Any) -> Any: ...
class MFnWireDeformer(MFnDependencyNode):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def absoluteName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addGeometry(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addWire(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def affectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def allocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeClass(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def attributeCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def canBeWritten(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def classification(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def crossingEffect(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateAllFlags(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deallocateFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbackIds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgCallbacks(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOff(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerQueryState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dgTimerReset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def enableDGTiming(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def envelope(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedByAttributes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAffectedGeometry(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAliasList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getConnections(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDropoffLocator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def holdingShape(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def icon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDefaultNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFlagSet(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isFromReferencedFile(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNewAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isShared(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTrackingEdits(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kExtensionAttr: int = ...
    kInvalidAttr: int = ...
    kLocalDynamicAttr: int = ...
    kNormalAttr: int = ...
    kTimerInvalidState: int = ...
    kTimerMetric_callback: int = ...
    kTimerMetric_callbackNotViaAPI: int = ...
    kTimerMetric_callbackViaAPI: int = ...
    kTimerMetric_compute: int = ...
    kTimerMetric_computeDuringCallback: int = ...
    kTimerMetric_computeNotDuringCallback: int = ...
    kTimerMetric_dirty: int = ...
    kTimerMetric_draw: int = ...
    kTimerMetric_fetch: int = ...
    kTimerMetrics: int = ...
    kTimerOff: int = ...
    kTimerOn: int = ...
    kTimerType_count: int = ...
    kTimerType_inclusive: int = ...
    kTimerType_self: int = ...
    kTimerTypes: int = ...
    kTimerUninitialized: int = ...
    def localIntensity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numDropoffLocators(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numWires(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def object(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parentNamespace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def plugsAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def removeGeometry(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reorderedAttribute(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAffectsAnimation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAlias(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCrossingEffect(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDoNotWrite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDropoffLocator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setEnvelope(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setExternalContentForFileAttr(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setHoldingShape(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIcon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLocalIntensity(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setWireDropOffDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setWireScale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def type(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeId(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def typeString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uniqueName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def uuid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def wire(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def wireDropOffDistance(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def wireScale(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MFnWireDeformer_className(*args: Any, **kwargs: Any) -> Any: ...
class MIkHandleGroup(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def checkEffectorAtGoal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dofCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def handle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def handleCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def priority(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPriority(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSolverID(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def solve(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def solverID(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def solverPriority(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MIkHandleGroup_className(*args: Any, **kwargs: Any) -> Any: ...
class MIkSystem(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findSolver(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getSolvers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isGlobalSnap(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isGlobalSolve(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setGlobalSnap(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setGlobalSolve(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

def MIkSystem_className(*args: Any, **kwargs: Any) -> Any: ...
def MIkSystem_findSolver(*args: Any, **kwargs: Any) -> Any: ...
def MIkSystem_getSolvers(*args: Any, **kwargs: Any) -> Any: ...
def MIkSystem_isGlobalSnap(*args: Any, **kwargs: Any) -> Any: ...
def MIkSystem_isGlobalSolve(*args: Any, **kwargs: Any) -> Any: ...
def MIkSystem_setGlobalSnap(*args: Any, **kwargs: Any) -> Any: ...
def MIkSystem_setGlobalSolve(*args: Any, **kwargs: Any) -> Any: ...
class MItKeyframe(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __next__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getTangentIn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getTangentOut(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inTangentType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDone(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kTangentAuto: int = ...
    kTangentAutoCustom: int = ...
    kTangentAutoEase: int = ...
    kTangentAutoMix: int = ...
    kTangentClamped: int = ...
    kTangentFast: int = ...
    kTangentFixed: int = ...
    kTangentFlat: int = ...
    kTangentGlobal: int = ...
    kTangentLinear: int = ...
    kTangentPlateau: int = ...
    kTangentSlow: int = ...
    kTangentSmooth: int = ...
    kTangentStep: int = ...
    kTangentStepNext: int = ...
    def next(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def outTangentType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInTangentType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setOutTangentType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTangentsLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTime(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def tangentsLocked(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def time(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def MItKeyframe_className(*args: Any, **kwargs: Any) -> Any: ...
class _SwigNonDynamicMeta:
    @property
    def __abstractmethods__(*args: Any, **kwargs: Any) -> Any: ...
    @__abstractmethods__.setter
    def __abstractmethods__(*args: Any, **kwargs: Any) -> Any: ...
    class type:
        @property
        def __abstractmethods__(*args: Any, **kwargs: Any) -> Any: ...
        @__abstractmethods__.setter
        def __abstractmethods__(*args: Any, **kwargs: Any) -> Any: ...
        class object:
            def __delattr__(self: Self, name: Any) -> Any:
                """Implement delattr(self, name)."""
            def __dir__(self: Self) -> Any:
                """Default dir() implementation."""
            __doc__: str = ...
            def __eq__(self: Self, value: Any) -> Any:
                """Return self==value."""
            def __format__(self: Self, format_spec: Any) -> Any:
                """Default object formatter."""
            def __ge__(self: Self, value: Any) -> Any:
                """Return self>=value."""
            def __getattribute__(self: Self, name: Any) -> Any:
                """Return getattr(self, name)."""
            def __gt__(self: Self, value: Any) -> Any:
                """Return self>value."""
            def __hash__(self: Self) -> Any:
                """Return hash(self)."""
            def __init__(self: Self, args: Any, kwargs: Any) -> Any:
                """Initialize self.  See help(type(self)) for accurate signature."""
            def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
                """This method is called when a class is subclassed.

                The default implementation does nothing. It may be
                overridden to extend subclasses.
                """
            def __le__(self: Self, value: Any) -> Any:
                """Return self<=value."""
            def __lt__(self: Self, value: Any) -> Any:
                """Return self<value."""
            def __ne__(self: Self, value: Any) -> Any:
                """Return self!=value."""
            def __new__(self: Self, args: Any, kwargs: Any) -> Any:
                """Create and return a new object.  See help(type) for accurate signature."""
            def __reduce__(self: Self) -> Any:
                """Helper for pickle."""
            def __reduce_ex__(self: Self, protocol: Any) -> Any:
                """Helper for pickle."""
            def __repr__(self: Self) -> Any:
                """Return repr(self)."""
            def __setattr__(self: Self, name: Any, value: Any) -> Any:
                """Implement setattr(self, name, value)."""
            def __sizeof__(self: Self) -> Any:
                """Size of object in memory, in bytes."""
            def __str__(self: Self) -> Any:
                """Return str(self)."""
            def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
                """Abstract classes can override this to customize issubclass().

                This is invoked early on by abc.ABCMeta.__subclasscheck__().
                It should return True, False or NotImplemented.  If it returns
                NotImplemented, the normal algorithm is used.  Otherwise, it
                overrides the normal algorithm (and the outcome is cached).
                """

        __bases__: tuple = ...
        __basicsize__: int = ...
        def __call__(self: Self, args: Any, kwargs: Any) -> Any:
            """Call self as a function."""
        def __delattr__(self: Self, name: Any) -> Any:
            """Implement delattr(self, name)."""
        __dict__: mappingproxy = ...
        __dictoffset__: int = ...
        def __dir__(self: Self) -> Any:
            """Specialized __dir__ implementation for types."""
        __doc__: str = ...
        def __eq__(self: Self, value: Any) -> Any:
            """Return self==value."""
        __flags__: int = ...
        def __format__(self: Self, format_spec: Any) -> Any:
            """Default object formatter."""
        def __ge__(self: Self, value: Any) -> Any:
            """Return self>=value."""
        def __getattribute__(self: Self, name: Any) -> Any:
            """Return getattr(self, name)."""
        def __gt__(self: Self, value: Any) -> Any:
            """Return self>value."""
        def __hash__(self: Self) -> Any:
            """Return hash(self)."""
        def __init__(self: Self, args: Any, kwargs: Any) -> Any:
            """Initialize self.  See help(type(self)) for accurate signature."""
        def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
            """This method is called when a class is subclassed.

            The default implementation does nothing. It may be
            overridden to extend subclasses.
            """
        def __instancecheck__(self: Self, instance: Any) -> Any:
            """Check if an object is an instance."""
        __itemsize__: int = ...
        def __le__(self: Self, value: Any) -> Any:
            """Return self<=value."""
        def __lt__(self: Self, value: Any) -> Any:
            """Return self<value."""
        __module__: str = ...
        __mro__: tuple = ...
        __name__: str = ...
        def __ne__(self: Self, value: Any) -> Any:
            """Return self!=value."""
        def __new__(self: Self, args: Any, kwargs: Any) -> Any:
            """Create and return a new object.  See help(type) for accurate signature."""
        def __prepare__(self: Self, *args: Any, **kwargs: Any) -> Any:
            """__prepare__() -> dict
            used to create the namespace for the class statement
            """
        __qualname__: str = ...
        def __reduce__(self: Self) -> Any:
            """Helper for pickle."""
        def __reduce_ex__(self: Self, protocol: Any) -> Any:
            """Helper for pickle."""
        def __repr__(self: Self) -> Any:
            """Return repr(self)."""
        def __setattr__(self: Self, name: Any, value: Any) -> Any:
            """Implement setattr(self, name, value)."""
        def __sizeof__(self: Self) -> Any:
            """Return memory consumption of the type object."""
        def __str__(self: Self) -> Any:
            """Return str(self)."""
        def __subclasscheck__(self: Self, subclass: Any) -> Any:
            """Check if a class is a subclass."""
        def __subclasses__(self: Self) -> Any:
            """Return a list of immediate subclasses."""
        def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
            """Abstract classes can override this to customize issubclass().

            This is invoked early on by abc.ABCMeta.__subclasscheck__().
            It should return True, False or NotImplemented.  If it returns
            NotImplemented, the normal algorithm is used.  Otherwise, it
            overrides the normal algorithm (and the outcome is cached).
            """
        __text_signature__: NoneType = ...
        __weakrefoffset__: int = ...
        def mro(self: Self) -> Any:
            """Return a type's method resolution order."""

    __bases__: tuple = ...
    __basicsize__: int = ...
    def __call__(self: Self, args: Any, kwargs: Any) -> Any:
        """Call self as a function."""
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    __dictoffset__: int = ...
    def __dir__(self: Self) -> Any:
        """Specialized __dir__ implementation for types."""
    __doc__: str = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    __flags__: int = ...
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any, kwargs: Any) -> Any:
        """Initialize self.  See help(type(self)) for accurate signature."""
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __instancecheck__(self: Self, instance: Any) -> Any:
        """Check if an object is an instance."""
    __itemsize__: int = ...
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    __mro__: tuple = ...
    __name__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __prepare__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """__prepare__() -> dict
        used to create the namespace for the class statement
        """
    __qualname__: str = ...
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any:
        """Return repr(self)."""
    def __setattr__(self: Self, cls: Any, name: Any, value: Any) -> Any: ...
    def __sizeof__(self: Self) -> Any:
        """Return memory consumption of the type object."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasscheck__(self: Self, subclass: Any) -> Any:
        """Check if a class is a subclass."""
    def __subclasses__(self: Self) -> Any:
        """Return a list of immediate subclasses."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    __text_signature__: NoneType = ...
    __weakrefoffset__: int = ...
    def mro(self: Self) -> Any:
        """Return a type's method resolution order."""

__builtins__: dict
__cached__: str
__doc__: NoneType
__file__: str
__loader__: SourcelessFileLoader
__name__: str
__package__: str
__spec__: ModuleSpec
def _swig_add_metaclass(metaclass: Any) -> Any:
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
def SWIG_PyInstanceMethod_New(*args: Any, **kwargs: Any) -> Any: ...
def SWIG_PyStaticMethod_New(*args: Any, **kwargs: Any) -> Any: ...
_swig_python_version_info: version_info
def _swig_repr(self: Self) -> Any: ...
def _swig_setattr_nondynamic_class_variable(set: Any) -> Any: ...
def _swig_setattr_nondynamic_instance_variable(set: Any) -> Any: ...
class boolPtr(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def boolPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
class charPtr(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def charPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
class doublePtr(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def doublePtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
class floatPtr(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def floatPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
class intPtr(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def intPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
class shortPtr(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def shortPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
class uCharPtr(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def uCharPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
class uIntPtr(object):
    def __delattr__(self: Self, name: Any) -> Any:
        """Implement delattr(self, name)."""
    __dict__: mappingproxy = ...
    def __dir__(self: Self) -> Any:
        """Default dir() implementation."""
    __doc__: NoneType = ...
    def __eq__(self: Self, value: Any) -> Any:
        """Return self==value."""
    def __format__(self: Self, format_spec: Any) -> Any:
        """Default object formatter."""
    def __ge__(self: Self, value: Any) -> Any:
        """Return self>=value."""
    def __getattribute__(self: Self, name: Any) -> Any:
        """Return getattr(self, name)."""
    def __gt__(self: Self, value: Any) -> Any:
        """Return self>value."""
    def __hash__(self: Self) -> Any:
        """Return hash(self)."""
    def __init__(self: Self, args: Any) -> Any: ...
    def __init_subclass__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """This method is called when a class is subclassed.

        The default implementation does nothing. It may be
        overridden to extend subclasses.
        """
    def __le__(self: Self, value: Any) -> Any:
        """Return self<=value."""
    def __lt__(self: Self, value: Any) -> Any:
        """Return self<value."""
    __module__: str = ...
    def __ne__(self: Self, value: Any) -> Any:
        """Return self!=value."""
    def __new__(self: Self, args: Any, kwargs: Any) -> Any:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self: Self) -> Any:
        """Helper for pickle."""
    def __reduce_ex__(self: Self, protocol: Any) -> Any:
        """Helper for pickle."""
    def __repr__(self: Self) -> Any: ...
    def __setattr__(self: Self, name: Any, value: Any) -> Any:
        """Implement setattr(self, name, value)."""
    def __sizeof__(self: Self) -> Any:
        """Size of object in memory, in bytes."""
    def __str__(self: Self) -> Any:
        """Return str(self)."""
    def __subclasshook__(self: Self, *args: Any, **kwargs: Any) -> Any:
        """Abstract classes can override this to customize issubclass().

        This is invoked early on by abc.ABCMeta.__subclasscheck__().
        It should return True, False or NotImplemented.  If it returns
        NotImplemented, the normal algorithm is used.  Otherwise, it
        overrides the normal algorithm (and the outcome is cached).
        """
    def __swig_destroy__(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    @__weakref__.setter
    def __weakref__(*args: Any, **kwargs: Any) -> Any:
        """list of weak references to the object (if defined)"""
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...

def uIntPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...