from typing import *
from _typeshed import Incomplete


def ATOMTemplate() -> Any: ...
def AbortCurrentTool() -> Any: ...
def ActivateGlobalScreenSlider() -> Any: ...
def ActivateGlobalScreenSliderModeMarkingMenu() -> Any: ...
def ActivateViewport20() -> Any: ...
def AddAnimationOffset() -> Any: ...
def AddAnimationOffsetOptions() -> Any: ...
def AddAttribute() -> Any: ...
def AddBlendShape() -> Any: ...
def AddBlendShapeOptions() -> Any: ...
def AddBoatLocator() -> Any: ...
def AddBoatLocatorOptions() -> Any: ...
def AddCombinationTarget() -> Any: ...
def AddCombinationTargetOptions() -> Any: ...
def AddCurvesToHairSystem() -> Any: ...
def AddDivisions() -> Any: ...
def AddDivisionsOptions() -> Any: ...
def AddDynamicBuoy() -> Any: ...
def AddDynamicBuoyOptions() -> Any: ...
def AddEdgeDivisions() -> Any: ...
def AddEdgeDivisionsOptions() -> Any: ...
def AddFaceDivisions() -> Any: ...
def AddFaceDivisionsOptions() -> Any: ...
def AddFloorContactPlane() -> Any: ...
def AddHolder() -> Any: ...
def AddHolderOptions() -> Any: ...
def AddInBetweenTargetShape() -> Any: ...
def AddInBetweenTargetShapeOptions() -> Any: ...
def AddInbetween() -> Any: ...
def AddInfluence() -> Any: ...
def AddInfluenceOptions() -> Any: ...
def AddKeyToolActivate() -> Any: ...
def AddKeyToolDeactivate() -> Any: ...
def AddKeysTool() -> Any: ...
def AddKeysToolOptions() -> Any: ...
def AddOceanDynamicLocator() -> Any: ...
def AddOceanDynamicLocatorOptions() -> Any: ...
def AddOceanPreviewPlane() -> Any: ...
def AddOceanSurfaceLocator() -> Any: ...
def AddPfxToHairSystem() -> Any: ...
def AddPointsTool() -> Any: ...
def AddPondBoatLocator() -> Any: ...
def AddPondBoatLocatorOptions() -> Any: ...
def AddPondDynamicBuoy() -> Any: ...
def AddPondDynamicBuoyOptions() -> Any: ...
def AddPondDynamicLocator() -> Any: ...
def AddPondDynamicLocatorOptions() -> Any: ...
def AddPondSurfaceLocator() -> Any: ...
def AddSelectionAsCombinationTarget() -> Any: ...
def AddSelectionAsCombinationTargetOptions() -> Any: ...
def AddSelectionAsInBetweenTargetShape() -> Any: ...
def AddSelectionAsInBetweenTargetShapeOptions() -> Any: ...
def AddSelectionAsTargetShape() -> Any: ...
def AddSelectionAsTargetShapeOptions() -> Any: ...
def AddShrinkWrapSurfaces() -> Any: ...
def AddTargetShape() -> Any: ...
def AddTargetShapeOptions() -> Any: ...
def AddTimeWarp() -> Any: ...
def AddToCharacterSet() -> Any: ...
def AddToContainer() -> Any: ...
def AddToContainerOptions() -> Any: ...
def AddToCurrentScene3dsMax() -> Any: ...
def AddToCurrentSceneFlame() -> Any: ...
def AddToCurrentSceneFlare() -> Any: ...
def AddToCurrentSceneMotionBuilder() -> Any: ...
def AddToCurrentSceneMudbox() -> Any: ...
def AddTweak() -> Any: ...
def AddWire() -> Any: ...
def AddWireOptions() -> Any: ...
def AddWrapInfluence() -> Any: ...
def AffectSelectedObject() -> Any: ...
def AimConstraint() -> Any: ...
def AimConstraintOptions() -> Any: ...
def Air() -> Any: ...
def AirOptions() -> Any: ...
def AlignCameraToPolygon() -> Any: ...
def AlignCurve() -> Any: ...
def AlignCurveOptions() -> Any: ...
def AlignObjects() -> Any: ...
def AlignSurfaces() -> Any: ...
def AlignSurfacesOptions() -> Any: ...
def AlignUV() -> Any: ...
def AlignUVOptions() -> Any: ...
def AnimLayerRelationshipEditor() -> Any: ...
def AnimationSnapshot() -> Any: ...
def AnimationSnapshotOptions() -> Any: ...
def AnimationSweep() -> Any: ...
def AnimationSweepOptions() -> Any: ...
def AnimationTurntable() -> Any: ...
def AnimationTurntableOptions() -> Any: ...
def AppendToHairCache() -> Any: ...
def AppendToHairCacheOptions() -> Any: ...
def AppendToPolygonTool() -> Any: ...
def AppendToPolygonToolOptions() -> Any: ...
def ApplySettingsToLastStroke() -> Any: ...
def ApplySettingsToSelectedStroke() -> Any: ...
def ArcLengthTool() -> Any: ...
def ArchiveScene() -> Any: ...
def ArchiveSceneOptions() -> Any: ...
def Art3dPaintTool() -> Any: ...
def Art3dPaintToolOptions() -> Any: ...
def ArtPaintAttrTool() -> Any: ...
def ArtPaintAttrToolOptions() -> Any: ...
def ArtPaintBlendShapeWeightsTool() -> Any: ...
def ArtPaintBlendShapeWeightsToolOptions() -> Any: ...
def ArtPaintSelectTool() -> Any: ...
def ArtPaintSelectToolOptions() -> Any: ...
def ArtPaintSkinWeightsTool() -> Any: ...
def ArtPaintSkinWeightsToolOptions() -> Any: ...
def AssetEditor() -> Any: ...
def AssignBrushToHairSystem() -> Any: ...
def AssignBrushToPfxToon() -> Any: ...
def AssignHairConstraint() -> Any: ...
def AssignHairConstraintOptions() -> Any: ...
def AssignNewMaterial() -> Any: ...
def AssignNewPfxToon() -> Any: ...
def AssignNewSet() -> Any: ...
def AssignOfflineFile() -> Any: ...
def AssignOfflineFileFromRefEd() -> Any: ...
def AssignOfflineFileFromRefEdOptions() -> Any: ...
def AssignOfflineFileOptions() -> Any: ...
def AssignTemplate() -> Any: ...
def AssignTemplateOptions() -> Any: ...
def AssignToonShaderCircleHighlight() -> Any: ...
def AssignToonShaderDarkProfile() -> Any: ...
def AssignToonShaderLightAngle() -> Any: ...
def AssignToonShaderRimLight() -> Any: ...
def AssignToonShaderShadedBrightness() -> Any: ...
def AssignToonShaderSolid() -> Any: ...
def AssignToonShaderThreeToneBrightness() -> Any: ...
def AssumePreferredAngle() -> Any: ...
def AssumePreferredAngleOptions() -> Any: ...
def AttachBrushToCurves() -> Any: ...
def AttachCurve() -> Any: ...
def AttachCurveOptions() -> Any: ...
def AttachSelectedAsSourceField() -> Any: ...
def AttachSubdivSurface() -> Any: ...
def AttachSubdivSurfaceOptions() -> Any: ...
def AttachSurfaceWithoutMoving() -> Any: ...
def AttachSurfaces() -> Any: ...
def AttachSurfacesOptions() -> Any: ...
def AttachToPath() -> Any: ...
def AttachToPathOptions() -> Any: ...
def AttributeEditor() -> Any: ...
def AutoPaintMarkingMenu() -> Any: ...
def AutoPaintMarkingMenuPopDown() -> Any: ...
def AutoProjection() -> Any: ...
def AutoProjectionOptions() -> Any: ...
def AutoSeamUVs() -> Any: ...
def AutoSeamUVsOptions() -> Any: ...
def AutobindContainer() -> Any: ...
def AutobindContainerOptions() -> Any: ...
def AveragePolygonNormals() -> Any: ...
def AveragePolygonNormalsOptions() -> Any: ...
def AverageVertex() -> Any: ...
def BakeAllNonDefHistory() -> Any: ...
def BakeChannel() -> Any: ...
def BakeChannelOptions() -> Any: ...
def BakeCustomPivot() -> Any: ...
def BakeCustomPivotOptions() -> Any: ...
def BakeDeformerTool() -> Any: ...
def BakeNonDefHistory() -> Any: ...
def BakeNonDefHistoryOptions() -> Any: ...
def BakeSimulation() -> Any: ...
def BakeSimulationOptions() -> Any: ...
def BakeSpringAnimation() -> Any: ...
def BakeSpringAnimationOptions() -> Any: ...
def BakeSurfaceToTexture() -> Any: ...
def BakeTopologyToTargets() -> Any: ...
def BaseLevelComponentDisplay() -> Any: ...
def BatchBake() -> Any: ...
def BatchBakeOptions() -> Any: ...
def BatchRender() -> Any: ...
def BatchRenderOptions() -> Any: ...
def Bend() -> Any: ...
def BendCurves() -> Any: ...
def BendCurvesOptions() -> Any: ...
def BendOptions() -> Any: ...
def BestPlaneTexturingTool() -> Any: ...
def Bevel() -> Any: ...
def BevelOptions() -> Any: ...
def BevelPlus() -> Any: ...
def BevelPlusOptions() -> Any: ...
def BevelPolygon() -> Any: ...
def BevelPolygonOptions() -> Any: ...
def BezierCurveToNurbs() -> Any: ...
def BezierPresetBezier() -> Any: ...
def BezierPresetBezierCorner() -> Any: ...
def BezierPresetCorner() -> Any: ...
def BezierSetAnchorBroken() -> Any: ...
def BezierSetAnchorEven() -> Any: ...
def BezierSetAnchorSmooth() -> Any: ...
def BezierSetAnchorUneven() -> Any: ...
def Birail1() -> Any: ...
def Birail1Options() -> Any: ...
def Birail2() -> Any: ...
def Birail2Options() -> Any: ...
def Birail3() -> Any: ...
def Birail3Options() -> Any: ...
def BlendShapeEditor() -> Any: ...
def BlindDataEditor() -> Any: ...
def BookmarkManager() -> Any: ...
def BothProxySubdivDisplay() -> Any: ...
def Boundary() -> Any: ...
def BoundaryOptions() -> Any: ...
def BreakLightLinks() -> Any: ...
def BreakRigidBodyConnection() -> Any: ...
def BreakShadowLinks() -> Any: ...
def BreakStereoRigs() -> Any: ...
def BreakTangent() -> Any: ...
def BreakTangents() -> Any: ...
def BridgeEdge() -> Any: ...
def BridgeEdgeOptions() -> Any: ...
def BridgeOrFill() -> Any: ...
def BrushAnimationMarkingMenu() -> Any: ...
def BrushAnimationMarkingMenuPopDown() -> Any: ...
def BrushPresetBlend() -> Any: ...
def BrushPresetBlendOff() -> Any: ...
def BrushPresetBlendShading() -> Any: ...
def BrushPresetBlendShadingOff() -> Any: ...
def BrushPresetBlendShape() -> Any: ...
def BrushPresetBlendShapeOff() -> Any: ...
def BrushPresetReplaceShading() -> Any: ...
def BrushPresetReplaceShadingOff() -> Any: ...
def BufferCurveSnapshot() -> Any: ...
def CVCurveTool() -> Any: ...
def CVCurveToolOptions() -> Any: ...
def CVHardness() -> Any: ...
def CVHardnessOptions() -> Any: ...
def CameraModeOrthographic() -> Any: ...
def CameraModePerspective() -> Any: ...
def CameraModeToggle() -> Any: ...
def CameraRemoveAll() -> Any: ...
def CameraRemoveAllForAll() -> Any: ...
def CameraRemoveFromExclusive() -> Any: ...
def CameraRemoveFromHidden() -> Any: ...
def CameraSetEditor() -> Any: ...
def CancelBatchRender() -> Any: ...
def CenterPivot() -> Any: ...
def CenterViewOfSelection() -> Any: ...
def ChamferVertex() -> Any: ...
def ChamferVertexOptions() -> Any: ...
def ChangeAnimPrefs() -> Any: ...
def ChangeColorPrefs() -> Any: ...
def ChangeEdgeWidth() -> Any: ...
def ChangeNormalSize() -> Any: ...
def ChangeUIPrefs() -> Any: ...
def ChangeUVSize() -> Any: ...
def ChangeVertexSize() -> Any: ...
def ChannelControlEditor() -> Any: ...
def CharacterAnimationEditor() -> Any: ...
def CharacterMapper() -> Any: ...
def CharacterSetEditor() -> Any: ...
def CircularFillet() -> Any: ...
def CircularFilletOptions() -> Any: ...
def CleanupPolygon() -> Any: ...
def CleanupPolygonOptions() -> Any: ...
def ClearCurrentCharacterList() -> Any: ...
def ClearCurrentContainer() -> Any: ...
def ClearInitialState() -> Any: ...
def ClearPaintEffectsView() -> Any: ...
def CloseFrontWindow() -> Any: ...
def ClosestPointOn() -> Any: ...
def ClosestPointOnOptions() -> Any: ...
def ClusterCurve() -> Any: ...
def CoarseLevelComponentDisplay() -> Any: ...
def CoarsenSelectedComponents() -> Any: ...
def CoarserSubdivLevel() -> Any: ...
def CollapseSubdivSurfaceHierarchy() -> Any: ...
def CollapseSubdivSurfaceHierarchyOptions() -> Any: ...
def ColorPreferencesWindow() -> Any: ...
def CombinePolygons() -> Any: ...
def CombinePolygonsOptions() -> Any: ...
def CommandShell() -> Any: ...
def CommandWindow() -> Any: ...
def CompleteCurrentTool() -> Any: ...
def ComponentEditor() -> Any: ...
def ConformPolygon() -> Any: ...
def ConformPolygonNormals() -> Any: ...
def ConformPolygonOptions() -> Any: ...
def ConnectComponents() -> Any: ...
def ConnectComponentsOptions() -> Any: ...
def ConnectJoint() -> Any: ...
def ConnectJointOptions() -> Any: ...
def ConnectNodeToIKFK() -> Any: ...
def ConnectToTime() -> Any: ...
def ConnectionEditor() -> Any: ...
def ContentBrowserLayout() -> Any: ...
def ContentBrowserWindow() -> Any: ...
def ConvertHairSelectionToConstraints() -> Any: ...
def ConvertHairSelectionToCurrentPositions() -> Any: ...
def ConvertHairSelectionToFollicles() -> Any: ...
def ConvertHairSelectionToHairSystems() -> Any: ...
def ConvertHairSelectionToRestCurveEndCVs() -> Any: ...
def ConvertHairSelectionToRestCurves() -> Any: ...
def ConvertHairSelectionToStartAndRestCurveEndCVs() -> Any: ...
def ConvertHairSelectionToStartCurveEndCVs() -> Any: ...
def ConvertHairSelectionToStartCurves() -> Any: ...
def ConvertInstanceToObject() -> Any: ...
def ConvertPaintEffectsToPoly() -> Any: ...
def ConvertPaintEffectsToPolyOptions() -> Any: ...
def ConvertSelectionToContainedEdges() -> Any: ...
def ConvertSelectionToContainedFaces() -> Any: ...
def ConvertSelectionToEdgePerimeter() -> Any: ...
def ConvertSelectionToEdges() -> Any: ...
def ConvertSelectionToFacePerimeter() -> Any: ...
def ConvertSelectionToFaces() -> Any: ...
def ConvertSelectionToShell() -> Any: ...
def ConvertSelectionToShellBorder() -> Any: ...
def ConvertSelectionToUVBorder() -> Any: ...
def ConvertSelectionToUVEdgeLoop() -> Any: ...
def ConvertSelectionToUVPerimeter() -> Any: ...
def ConvertSelectionToUVShell() -> Any: ...
def ConvertSelectionToUVShellBorder() -> Any: ...
def ConvertSelectionToUVs() -> Any: ...
def ConvertSelectionToVertexFaces() -> Any: ...
def ConvertSelectionToVertexPerimeter() -> Any: ...
def ConvertSelectionToVertices() -> Any: ...
def ConvertToBreakdown() -> Any: ...
def ConvertToFrozen() -> Any: ...
def ConvertToKey() -> Any: ...
def ConvertTypeCapsToCurves() -> Any: ...
def CopyFlexor() -> Any: ...
def CopyKeys() -> Any: ...
def CopyKeysOptions() -> Any: ...
def CopyMeshAttributes() -> Any: ...
def CopySelected() -> Any: ...
def CopySkinWeights() -> Any: ...
def CopySkinWeightsOptions() -> Any: ...
def CopyUVs() -> Any: ...
def CopyUVsToUVSet() -> Any: ...
def CopyUVsToUVSetOptions() -> Any: ...
def CopyVertexSkinWeights() -> Any: ...
def CopyVertexWeights() -> Any: ...
def CreaseProxyEdgeTool() -> Any: ...
def CreaseProxyEdgeToolOptions() -> Any: ...
def Create2DContainer() -> Any: ...
def Create2DContainerEmitter() -> Any: ...
def Create2DContainerEmitterOptions() -> Any: ...
def Create2DContainerOptions() -> Any: ...
def Create3DContainer() -> Any: ...
def Create3DContainerEmitter() -> Any: ...
def Create3DContainerEmitterOptions() -> Any: ...
def Create3DContainerOptions() -> Any: ...
def CreateActiveRigidBody() -> Any: ...
def CreateActiveRigidBodyOptions() -> Any: ...
def CreateAmbientLight() -> Any: ...
def CreateAmbientLightOptions() -> Any: ...
def CreateAnnotateNode() -> Any: ...
def CreateAreaLight() -> Any: ...
def CreateAreaLightOptions() -> Any: ...
def CreateBarrierConstraint() -> Any: ...
def CreateBarrierConstraintOptions() -> Any: ...
def CreateBezierCurveTool() -> Any: ...
def CreateBezierCurveToolOptions() -> Any: ...
def CreateBindingSet() -> Any: ...
def CreateBlendShape() -> Any: ...
def CreateBlendShapeOptions() -> Any: ...
def CreateCameraAim() -> Any: ...
def CreateCameraAimOptions() -> Any: ...
def CreateCameraAimUp() -> Any: ...
def CreateCameraAimUpOptions() -> Any: ...
def CreateCameraFromView() -> Any: ...
def CreateCameraOnly() -> Any: ...
def CreateCameraOnlyOptions() -> Any: ...
def CreateCharacter() -> Any: ...
def CreateCharacterOptions() -> Any: ...
def CreateClip() -> Any: ...
def CreateClipOptions() -> Any: ...
def CreateCluster() -> Any: ...
def CreateClusterOptions() -> Any: ...
def CreateConstraint() -> Any: ...
def CreateConstraintClip() -> Any: ...
def CreateConstraintClipOptions() -> Any: ...
def CreateConstraintOptions() -> Any: ...
def CreateConstructionPlane() -> Any: ...
def CreateConstructionPlaneOptions() -> Any: ...
def CreateContainer() -> Any: ...
def CreateContainerOptions() -> Any: ...
def CreateControlRig() -> Any: ...
def CreateCreaseSet() -> Any: ...
def CreateCreaseSetOptions() -> Any: ...
def CreateCurveField() -> Any: ...
def CreateCurveFromPoly() -> Any: ...
def CreateCurveFromPolyOptions() -> Any: ...
def CreateDagContainer() -> Any: ...
def CreateDagContainerOptions() -> Any: ...
def CreateDirectionalLight() -> Any: ...
def CreateDirectionalLightOptions() -> Any: ...
def CreateDiskCache() -> Any: ...
def CreateDiskCacheOptions() -> Any: ...
def CreateEmitter() -> Any: ...
def CreateEmitterOptions() -> Any: ...
def CreateEmptyGroup() -> Any: ...
def CreateEmptySet() -> Any: ...
def CreateEmptySetOptions() -> Any: ...
def CreateEmptyUVSet() -> Any: ...
def CreateEmptyUVSetOptions() -> Any: ...
def CreateExpressionClip() -> Any: ...
def CreateExpressionClipOptions() -> Any: ...
def CreateFlexorWindow() -> Any: ...
def CreateFluidCache() -> Any: ...
def CreateFluidCacheOptions() -> Any: ...
def CreateHair() -> Any: ...
def CreateHairCache() -> Any: ...
def CreateHairCacheOptions() -> Any: ...
def CreateHairOptions() -> Any: ...
def CreateHingeConstraint() -> Any: ...
def CreateHingeConstraintOptions() -> Any: ...
def CreateIllustratorCurves() -> Any: ...
def CreateIllustratorCurvesOptions() -> Any: ...
def CreateImagePlane() -> Any: ...
def CreateImagePlaneOptions() -> Any: ...
def CreateJiggleDeformer() -> Any: ...
def CreateJiggleOptions() -> Any: ...
def CreateLattice() -> Any: ...
def CreateLatticeOptions() -> Any: ...
def CreateLineModifier() -> Any: ...
def CreateLocator() -> Any: ...
def CreateMotionTrail() -> Any: ...
def CreateMotionTrailOptions() -> Any: ...
def CreateMultiStereoRig() -> Any: ...
def CreateNSoftBody() -> Any: ...
def CreateNSoftBodyOptions() -> Any: ...
def CreateNURBSCircle() -> Any: ...
def CreateNURBSCircleOptions() -> Any: ...
def CreateNURBSCone() -> Any: ...
def CreateNURBSConeOptions() -> Any: ...
def CreateNURBSCube() -> Any: ...
def CreateNURBSCubeOptions() -> Any: ...
def CreateNURBSCylinder() -> Any: ...
def CreateNURBSCylinderOptions() -> Any: ...
def CreateNURBSPlane() -> Any: ...
def CreateNURBSPlaneOptions() -> Any: ...
def CreateNURBSSphere() -> Any: ...
def CreateNURBSSphereOptions() -> Any: ...
def CreateNURBSSquare() -> Any: ...
def CreateNURBSSquareOptions() -> Any: ...
def CreateNURBSTorus() -> Any: ...
def CreateNURBSTorusOptions() -> Any: ...
def CreateNailConstraint() -> Any: ...
def CreateNailConstraintOptions() -> Any: ...
def CreateNodeWindow() -> Any: ...
def CreateOcean() -> Any: ...
def CreateOceanOptions() -> Any: ...
def CreateOceanWake() -> Any: ...
def CreateOceanWakeOptions() -> Any: ...
def CreatePSDTextureItem() -> Any: ...
def CreateParticleDiskCache() -> Any: ...
def CreateParticleDiskCacheOptions() -> Any: ...
def CreatePartition() -> Any: ...
def CreatePartitionOptions() -> Any: ...
def CreatePassiveRigidBody() -> Any: ...
def CreatePassiveRigidBodyOptions() -> Any: ...
def CreatePinConstraint() -> Any: ...
def CreatePinConstraintOptions() -> Any: ...
def CreatePlatonicSolid() -> Any: ...
def CreatePlatonicSolidOptions() -> Any: ...
def CreatePointLight() -> Any: ...
def CreatePointLightOptions() -> Any: ...
def CreatePolyFromPreview() -> Any: ...
def CreatePolygonCone() -> Any: ...
def CreatePolygonConeOptions() -> Any: ...
def CreatePolygonCube() -> Any: ...
def CreatePolygonCubeOptions() -> Any: ...
def CreatePolygonCylinder() -> Any: ...
def CreatePolygonCylinderOptions() -> Any: ...
def CreatePolygonDisc() -> Any: ...
def CreatePolygonDiscOptions() -> Any: ...
def CreatePolygonGear() -> Any: ...
def CreatePolygonGearOptions() -> Any: ...
def CreatePolygonHelix() -> Any: ...
def CreatePolygonHelixOptions() -> Any: ...
def CreatePolygonPipe() -> Any: ...
def CreatePolygonPipeOptions() -> Any: ...
def CreatePolygonPlane() -> Any: ...
def CreatePolygonPlaneOptions() -> Any: ...
def CreatePolygonPlatonic() -> Any: ...
def CreatePolygonPlatonicOptions() -> Any: ...
def CreatePolygonPrism() -> Any: ...
def CreatePolygonPrismOptions() -> Any: ...
def CreatePolygonPyramid() -> Any: ...
def CreatePolygonPyramidOptions() -> Any: ...
def CreatePolygonSVG() -> Any: ...
def CreatePolygonSoccerBall() -> Any: ...
def CreatePolygonSoccerBallOptions() -> Any: ...
def CreatePolygonSphere() -> Any: ...
def CreatePolygonSphereOptions() -> Any: ...
def CreatePolygonSphericalHarmonics() -> Any: ...
def CreatePolygonSphericalHarmonicsOptions() -> Any: ...
def CreatePolygonSuperEllipse() -> Any: ...
def CreatePolygonSuperEllipseOptions() -> Any: ...
def CreatePolygonTool() -> Any: ...
def CreatePolygonToolOptions() -> Any: ...
def CreatePolygonTorus() -> Any: ...
def CreatePolygonTorusOptions() -> Any: ...
def CreatePolygonType() -> Any: ...
def CreatePolygonUltraShape() -> Any: ...
def CreatePolygonUltraShapeOptions() -> Any: ...
def CreatePond() -> Any: ...
def CreatePondOptions() -> Any: ...
def CreatePose() -> Any: ...
def CreatePoseInterpolator() -> Any: ...
def CreatePoseInterpolatorOptions() -> Any: ...
def CreatePoseOptions() -> Any: ...
def CreateQuickSelectSet() -> Any: ...
def CreateReference() -> Any: ...
def CreateReferenceOptions() -> Any: ...
def CreateRigidBodySolver() -> Any: ...
def CreateSculptDeformer() -> Any: ...
def CreateSculptDeformerOptions() -> Any: ...
def CreateSet() -> Any: ...
def CreateSetOptions() -> Any: ...
def CreateShot() -> Any: ...
def CreateShotOptions() -> Any: ...
def CreateShrinkWrap() -> Any: ...
def CreateShrinkWrapOptions() -> Any: ...
def CreateSoftBody() -> Any: ...
def CreateSoftBodyOptions() -> Any: ...
def CreateSpotLight() -> Any: ...
def CreateSpotLightOptions() -> Any: ...
def CreateSpring() -> Any: ...
def CreateSpringConstraint() -> Any: ...
def CreateSpringConstraintOptions() -> Any: ...
def CreateSpringOptions() -> Any: ...
def CreateStereoRig() -> Any: ...
def CreateSubCharacter() -> Any: ...
def CreateSubCharacterOptions() -> Any: ...
def CreateSubdivCone() -> Any: ...
def CreateSubdivCube() -> Any: ...
def CreateSubdivCylinder() -> Any: ...
def CreateSubdivPlane() -> Any: ...
def CreateSubdivRegion() -> Any: ...
def CreateSubdivSphere() -> Any: ...
def CreateSubdivSurface() -> Any: ...
def CreateSubdivSurfaceOptions() -> Any: ...
def CreateSubdivSurfacePoly() -> Any: ...
def CreateSubdivSurfacePolyOptions() -> Any: ...
def CreateSubdivTorus() -> Any: ...
def CreateText() -> Any: ...
def CreateTextOptions() -> Any: ...
def CreateTextureDeformer() -> Any: ...
def CreateTextureDeformerOptions() -> Any: ...
def CreateTextureReferenceObject() -> Any: ...
def CreateTimeSliderBookmark() -> Any: ...
def CreateUVShellAlongBorder() -> Any: ...
def CreateUVsBasedOnCamera() -> Any: ...
def CreateUVsBasedOnCameraOptions() -> Any: ...
def CreateVolumeCone() -> Any: ...
def CreateVolumeCube() -> Any: ...
def CreateVolumeLight() -> Any: ...
def CreateVolumeLightOptions() -> Any: ...
def CreateVolumeSphere() -> Any: ...
def CreateWake() -> Any: ...
def CreateWakeOptions() -> Any: ...
def CreateWrap() -> Any: ...
def CreateWrapOptions() -> Any: ...
def CurlCurves() -> Any: ...
def CurlCurvesOptions() -> Any: ...
def CurveEditTool() -> Any: ...
def CurveFillet() -> Any: ...
def CurveFilletOptions() -> Any: ...
def CurveFlow() -> Any: ...
def CurveFlowOptions() -> Any: ...
def CurveSmoothnessCoarse() -> Any: ...
def CurveSmoothnessFine() -> Any: ...
def CurveSmoothnessMedium() -> Any: ...
def CurveSmoothnessRough() -> Any: ...
def CurveUtilitiesMarkingMenu() -> Any: ...
def CurveUtilitiesMarkingMenuPopDown() -> Any: ...
def CurveWarp() -> Any: ...
def CustomNURBSComponentsOptions() -> Any: ...
def CustomNURBSSmoothness() -> Any: ...
def CustomNURBSSmoothnessOptions() -> Any: ...
def CustomPolygonDisplay() -> Any: ...
def CustomPolygonDisplayOptions() -> Any: ...
def CutCurve() -> Any: ...
def CutCurveOptions() -> Any: ...
def CutKeys() -> Any: ...
def CutKeysOptions() -> Any: ...
def CutPolygon() -> Any: ...
def CutPolygonOptions() -> Any: ...
def CutSelected() -> Any: ...
def CutUVs() -> Any: ...
def CutUVs3D() -> Any: ...
def CutUVsWithoutHotkey() -> Any: ...
def CycleBackgroundColor() -> Any: ...
def CycleDisplayMode() -> Any: ...
def CycleIKHandleStickyState() -> Any: ...
def CycleThroughCameras() -> Any: ...
def DeactivateGlobalScreenSlider() -> Any: ...
def DeactivateGlobalScreenSliderModeMarkingMenu() -> Any: ...
def DecreaseCheckerDensity() -> Any: ...
def DecreaseExposureCoarse() -> Any: ...
def DecreaseExposureFine() -> Any: ...
def DecreaseGammaCoarse() -> Any: ...
def DecreaseGammaFine() -> Any: ...
def DecreaseManipulatorSize() -> Any: ...
def DecrementFluidCenter() -> Any: ...
def DefaultQualityDisplay() -> Any: ...
def DeformerSetEditor() -> Any: ...
def Delete() -> Any: ...
def DeleteAllBookmarks() -> Any: ...
def DeleteAllCameras() -> Any: ...
def DeleteAllChannels() -> Any: ...
def DeleteAllClips() -> Any: ...
def DeleteAllClusters() -> Any: ...
def DeleteAllConstraints() -> Any: ...
def DeleteAllContainers() -> Any: ...
def DeleteAllControllers() -> Any: ...
def DeleteAllDynamicConstraints() -> Any: ...
def DeleteAllExpressions() -> Any: ...
def DeleteAllFluids() -> Any: ...
def DeleteAllFurs() -> Any: ...
def DeleteAllHistory() -> Any: ...
def DeleteAllIKHandles() -> Any: ...
def DeleteAllImagePlanes() -> Any: ...
def DeleteAllJoints() -> Any: ...
def DeleteAllLattices() -> Any: ...
def DeleteAllLights() -> Any: ...
def DeleteAllMotionPaths() -> Any: ...
def DeleteAllNCloths() -> Any: ...
def DeleteAllNParticles() -> Any: ...
def DeleteAllNRigids() -> Any: ...
def DeleteAllNonLinearDeformers() -> Any: ...
def DeleteAllParticles() -> Any: ...
def DeleteAllPoses() -> Any: ...
def DeleteAllRigidBodies() -> Any: ...
def DeleteAllRigidConstraints() -> Any: ...
def DeleteAllSculptObjects() -> Any: ...
def DeleteAllShadingGroupsAndMaterials() -> Any: ...
def DeleteAllSounds() -> Any: ...
def DeleteAllStaticChannels() -> Any: ...
def DeleteAllStrokes() -> Any: ...
def DeleteAllWires() -> Any: ...
def DeleteAttribute() -> Any: ...
def DeleteChannels() -> Any: ...
def DeleteChannelsOptions() -> Any: ...
def DeleteConstraints() -> Any: ...
def DeleteCurrentBookmark() -> Any: ...
def DeleteCurrentColorSet() -> Any: ...
def DeleteCurrentSet() -> Any: ...
def DeleteCurrentUVSet() -> Any: ...
def DeleteCurrentWorkspace() -> Any: ...
def DeleteEdge() -> Any: ...
def DeleteEntireHairSystem() -> Any: ...
def DeleteExpressions() -> Any: ...
def DeleteExpressionsOptions() -> Any: ...
def DeleteHair() -> Any: ...
def DeleteHairCache() -> Any: ...
def DeleteHistory() -> Any: ...
def DeleteKeys() -> Any: ...
def DeleteKeysOptions() -> Any: ...
def DeleteMemoryCaching() -> Any: ...
def DeleteMotionPaths() -> Any: ...
def DeletePolyElements() -> Any: ...
def DeleteRigidBodies() -> Any: ...
def DeleteSelectedContainers() -> Any: ...
def DeleteStaticChannels() -> Any: ...
def DeleteStaticChannelsOptions() -> Any: ...
def DeleteSurfaceFlow() -> Any: ...
def DeleteSurfaceFlowOptions() -> Any: ...
def DeleteTextureReferenceObject() -> Any: ...
def DeleteTimeWarp() -> Any: ...
def DeleteUVs() -> Any: ...
def DeleteUVsWithoutHotkey() -> Any: ...
def DeleteUnknownNodes() -> Any: ...
def DeleteVertex() -> Any: ...
def DeltaMush() -> Any: ...
def DeltaMushOptions() -> Any: ...
def DetachComponent() -> Any: ...
def DetachCurve() -> Any: ...
def DetachCurveOptions() -> Any: ...
def DetachEdgeComponent() -> Any: ...
def DetachSkeleton() -> Any: ...
def DetachSkeletonJoints() -> Any: ...
def DetachSkin() -> Any: ...
def DetachSkinOptions() -> Any: ...
def DetachSurfaces() -> Any: ...
def DetachSurfacesOptions() -> Any: ...
def DetachVertexComponent() -> Any: ...
def DeviceEditor() -> Any: ...
def DisableAll() -> Any: ...
def DisableAllCaches() -> Any: ...
def DisableAllGeometryCache() -> Any: ...
def DisableConstraints() -> Any: ...
def DisableExpressions() -> Any: ...
def DisableFluids() -> Any: ...
def DisableGlobalStitch() -> Any: ...
def DisableIKSolvers() -> Any: ...
def DisableMemoryCaching() -> Any: ...
def DisableParticles() -> Any: ...
def DisableRigidBodies() -> Any: ...
def DisableSelectedIKHandles() -> Any: ...
def DisableSnapshots() -> Any: ...
def DisableTimeChangeUndoConsolidation() -> Any: ...
def DisableWeightNrm() -> Any: ...
def DisconnectJoint() -> Any: ...
def DisplacementToPolygon() -> Any: ...
def DisplayCurrentHairCurves() -> Any: ...
def DisplayHairCurves() -> Any: ...
def DisplayHairCurvesCurrentAndRest() -> Any: ...
def DisplayHairCurvesCurrentAndStart() -> Any: ...
def DisplayHairCurvesRestPosition() -> Any: ...
def DisplayHairCurvesStart() -> Any: ...
def DisplayIntermediateObjects() -> Any: ...
def DisplayLayerEditorWindow() -> Any: ...
def DisplayLight() -> Any: ...
def DisplayShaded() -> Any: ...
def DisplayShadedAndTextured() -> Any: ...
def DisplayShadingMarkingMenu() -> Any: ...
def DisplayShadingMarkingMenuPopDown() -> Any: ...
def DisplaySmoothShaded() -> Any: ...
def DisplayUVShaded() -> Any: ...
def DisplayUVWireframe() -> Any: ...
def DisplayViewport() -> Any: ...
def DisplayWireframe() -> Any: ...
def DistanceTool() -> Any: ...
def DistributeShells() -> Any: ...
def DistributeShellsOptions() -> Any: ...
def DistributeUVs() -> Any: ...
def DistributeUVsOptions() -> Any: ...
def DollyTool() -> Any: ...
def DopeSheetEditor() -> Any: ...
def DownloadBonusTools() -> Any: ...
def Drag() -> Any: ...
def DragOptions() -> Any: ...
def Duplicate() -> Any: ...
def DuplicateCurve() -> Any: ...
def DuplicateCurveOptions() -> Any: ...
def DuplicateEdges() -> Any: ...
def DuplicateEdgesOptions() -> Any: ...
def DuplicateFace() -> Any: ...
def DuplicateFaceOptions() -> Any: ...
def DuplicateNURBSPatches() -> Any: ...
def DuplicateNURBSPatchesOptions() -> Any: ...
def DuplicateSpecial() -> Any: ...
def DuplicateSpecialOptions() -> Any: ...
def DuplicateWithTransform() -> Any: ...
def DynamicRelationshipEditor() -> Any: ...
def EPCurveTool() -> Any: ...
def EPCurveToolOptions() -> Any: ...
def EditAssignedSet() -> Any: ...
def EditBookmark() -> Any: ...
def EditCharacterAttributes() -> Any: ...
def EditFluidResolution() -> Any: ...
def EditFluidResolutionOptions() -> Any: ...
def EditMembershipTool() -> Any: ...
def EditNormalizationGroups() -> Any: ...
def EditOversamplingForCacheSettings() -> Any: ...
def EditPSDTextureItem() -> Any: ...
def EditPolygonType() -> Any: ...
def EditTexture() -> Any: ...
def EmitFluidFromObject() -> Any: ...
def EmitFluidFromObjectOptions() -> Any: ...
def EmitFromObject() -> Any: ...
def EmitFromObjectOptions() -> Any: ...
def EnableAll() -> Any: ...
def EnableAllCaches() -> Any: ...
def EnableAllGeometryCache() -> Any: ...
def EnableConstraints() -> Any: ...
def EnableDynamicConstraints() -> Any: ...
def EnableExpressions() -> Any: ...
def EnableFluids() -> Any: ...
def EnableGlobalStitch() -> Any: ...
def EnableIKSolvers() -> Any: ...
def EnableMemoryCaching() -> Any: ...
def EnableNCloths() -> Any: ...
def EnableNParticles() -> Any: ...
def EnableNRigids() -> Any: ...
def EnableNucleuses() -> Any: ...
def EnableParticles() -> Any: ...
def EnableRigidBodies() -> Any: ...
def EnableSelectTool() -> Any: ...
def EnableSelectedIKHandles() -> Any: ...
def EnableSnapshots() -> Any: ...
def EnableTimeChangeUndoConsolidation() -> Any: ...
def EnableTimeWarp() -> Any: ...
def EnableWeightNrm() -> Any: ...
def EnableWeightPostNrm() -> Any: ...
def EnterConnectTool() -> Any: ...
def EnterEditMode() -> Any: ...
def EnterEditModePress() -> Any: ...
def EnterEditModeRelease() -> Any: ...
def EvaluationToolkit() -> Any: ...
def ExpandSelectedComponents() -> Any: ...
def Export() -> Any: ...
def ExportAnim() -> Any: ...
def ExportDeformerWeights() -> Any: ...
def ExportDeformerWeightsOptions() -> Any: ...
def ExportOfflineFile() -> Any: ...
def ExportOfflineFileFromRefEd() -> Any: ...
def ExportOfflineFileFromRefEdOptions() -> Any: ...
def ExportOfflineFileOptions() -> Any: ...
def ExportOptions() -> Any: ...
def ExportProxyContainer() -> Any: ...
def ExportProxyContainerOptions() -> Any: ...
def ExportSelection() -> Any: ...
def ExportSelectionOptions() -> Any: ...
def ExportSkinWeightMaps() -> Any: ...
def ExportSkinWeightMapsOptions() -> Any: ...
def ExpressionEditor() -> Any: ...
def ExtendCurve() -> Any: ...
def ExtendCurveOnSurface() -> Any: ...
def ExtendCurveOnSurfaceOptions() -> Any: ...
def ExtendCurveOptions() -> Any: ...
def ExtendFluid() -> Any: ...
def ExtendFluidOptions() -> Any: ...
def ExtendSurfaces() -> Any: ...
def ExtendSurfacesOptions() -> Any: ...
def ExtractFace() -> Any: ...
def ExtractFaceOptions() -> Any: ...
def ExtractSubdivSurfaceVertices() -> Any: ...
def ExtractSubdivSurfaceVerticesOptions() -> Any: ...
def Extrude() -> Any: ...
def ExtrudeEdge() -> Any: ...
def ExtrudeEdgeOptions() -> Any: ...
def ExtrudeFace() -> Any: ...
def ExtrudeFaceOptions() -> Any: ...
def ExtrudeOptions() -> Any: ...
def ExtrudeVertex() -> Any: ...
def ExtrudeVertexOptions() -> Any: ...
def FBIKLabelArm() -> Any: ...
def FBIKLabelBigToe() -> Any: ...
def FBIKLabelCenter() -> Any: ...
def FBIKLabelCollar() -> Any: ...
def FBIKLabelElbow() -> Any: ...
def FBIKLabelExtraFinger() -> Any: ...
def FBIKLabelFingerBase() -> Any: ...
def FBIKLabelFoot() -> Any: ...
def FBIKLabelFootThumb() -> Any: ...
def FBIKLabelHand() -> Any: ...
def FBIKLabelHead() -> Any: ...
def FBIKLabelHip() -> Any: ...
def FBIKLabelIndex() -> Any: ...
def FBIKLabelIndexToe() -> Any: ...
def FBIKLabelKnee() -> Any: ...
def FBIKLabelLeft() -> Any: ...
def FBIKLabelLeg() -> Any: ...
def FBIKLabelMiddleFinger() -> Any: ...
def FBIKLabelMiddleToe() -> Any: ...
def FBIKLabelNeck() -> Any: ...
def FBIKLabelNone() -> Any: ...
def FBIKLabelPinky() -> Any: ...
def FBIKLabelPinkyToe() -> Any: ...
def FBIKLabelRight() -> Any: ...
def FBIKLabelRingFinger() -> Any: ...
def FBIKLabelRingToe() -> Any: ...
def FBIKLabelRoot() -> Any: ...
def FBIKLabelShoulder() -> Any: ...
def FBIKLabelSpine() -> Any: ...
def FBIKLabelThumb() -> Any: ...
def FBIKLabelToeBase() -> Any: ...
def FilePathEditor() -> Any: ...
def FillHole() -> Any: ...
def FilletBlendTool() -> Any: ...
def FilletBlendToolOptions() -> Any: ...
def FineLevelComponentDisplay() -> Any: ...
def Fire() -> Any: ...
def FireOptions() -> Any: ...
def Fireworks() -> Any: ...
def FireworksOptions() -> Any: ...
def FitBSpline() -> Any: ...
def FitBSplineOptions() -> Any: ...
def Flare() -> Any: ...
def FlareOptions() -> Any: ...
def FlipMesh() -> Any: ...
def FlipTriangleEdge() -> Any: ...
def FlipTubeDirection() -> Any: ...
def FlipUVs() -> Any: ...
def FlipUVsOptions() -> Any: ...
def FloatSelectedObjects() -> Any: ...
def FloatSelectedObjectsOptions() -> Any: ...
def FloatSelectedPondObjects() -> Any: ...
def FloatSelectedPondObjectsOptions() -> Any: ...
def FloodSurfaces() -> Any: ...
def FlowPathObject() -> Any: ...
def FlowPathObjectOptions() -> Any: ...
def FluidEmitter() -> Any: ...
def FluidEmitterOptions() -> Any: ...
def FluidGradients() -> Any: ...
def FluidGradientsOptions() -> Any: ...
def FluidsToPolygons() -> Any: ...
def FourViewArrangement() -> Any: ...
def FourViewLayout() -> Any: ...
def FrameAll() -> Any: ...
def FrameAllInAllViews() -> Any: ...
def FrameNextTimeSliderBookmark() -> Any: ...
def FramePreviousTimeSliderBookmark() -> Any: ...
def FrameSelected() -> Any: ...
def FrameSelected2() -> Any: ...
def FrameSelectedInAllViews() -> Any: ...
def FrameSelectedWithoutChildren() -> Any: ...
def FrameSelectedWithoutChildrenInAllViews() -> Any: ...
def FrameTimeSliderBookmark() -> Any: ...
def FreeTangentWeight() -> Any: ...
def FreeformFillet() -> Any: ...
def FreeformFilletOptions() -> Any: ...
def FreezeTransformations() -> Any: ...
def FreezeTransformationsOptions() -> Any: ...
def FrontPerspViewLayout() -> Any: ...
def FullCreaseSubdivSurface() -> Any: ...
def FullHotboxDisplay() -> Any: ...
def GameExporterWnd() -> Any: ...
def GeometryConstraint() -> Any: ...
def GeometryConstraintOptions() -> Any: ...
def GeometryToBoundingBox() -> Any: ...
def GeometryToBoundingBoxOptions() -> Any: ...
def GetCartoonExample() -> Any: ...
def GetFluidExample() -> Any: ...
def GetHairExample() -> Any: ...
def GetOceanPondExample() -> Any: ...
def GetSettingsFromSelectedStroke() -> Any: ...
def GetToonExample() -> Any: ...
def GlobalDiskCacheControl() -> Any: ...
def GlobalStitch() -> Any: ...
def GlobalStitchOptions() -> Any: ...
def GoToBindPose() -> Any: ...
def GoToDefaultView() -> Any: ...
def GoToMaxFrame() -> Any: ...
def GoToMinFrame() -> Any: ...
def GoToNextDrivenKey() -> Any: ...
def GoToPreviousDrivenKey() -> Any: ...
def GoToWorkingFrame() -> Any: ...
def Goal() -> Any: ...
def GoalOptions() -> Any: ...
def GraphCopy() -> Any: ...
def GraphCopyOptions() -> Any: ...
def GraphCut() -> Any: ...
def GraphCutOptions() -> Any: ...
def GraphDelete() -> Any: ...
def GraphDeleteOptions() -> Any: ...
def GraphEditor() -> Any: ...
def GraphEditorAbsoluteView() -> Any: ...
def GraphEditorAlwaysDisplayTangents() -> Any: ...
def GraphEditorDisableCurveSelection() -> Any: ...
def GraphEditorDisplayTangentActive() -> Any: ...
def GraphEditorDisplayValues() -> Any: ...
def GraphEditorEnableCurveSelection() -> Any: ...
def GraphEditorFrameAll() -> Any: ...
def GraphEditorFrameCenterView() -> Any: ...
def GraphEditorFramePlaybackRange() -> Any: ...
def GraphEditorFrameSelected() -> Any: ...
def GraphEditorLockChannel() -> Any: ...
def GraphEditorNeverDisplayTangents() -> Any: ...
def GraphEditorNormalizedView() -> Any: ...
def GraphEditorStackedView() -> Any: ...
def GraphEditorUnlockChannel() -> Any: ...
def GraphEditorValueLinesToggle() -> Any: ...
def GraphPaste() -> Any: ...
def GraphPasteOptions() -> Any: ...
def GraphSnap() -> Any: ...
def GraphSnapOptions() -> Any: ...
def Gravity() -> Any: ...
def GravityOptions() -> Any: ...
def GreasePencilTool() -> Any: ...
def GridOptions() -> Any: ...
def GridUV() -> Any: ...
def GridUVOptions() -> Any: ...
def Group() -> Any: ...
def GroupOptions() -> Any: ...
def GrowLoopPolygonSelectionRegion() -> Any: ...
def GrowPolygonSelectionRegion() -> Any: ...
def HIKBodyPartMode() -> Any: ...
def HIKCharacterControlsTool() -> Any: ...
def HIKCycleMode() -> Any: ...
def HIKFullBodyMode() -> Any: ...
def HIKLiveConnectionTool() -> Any: ...
def HIKPinRotate() -> Any: ...
def HIKPinTranslate() -> Any: ...
def HIKSelectedMode() -> Any: ...
def HIKSetBodyPartKey() -> Any: ...
def HIKSetFullBodyKey() -> Any: ...
def HIKSetSelectionKey() -> Any: ...
def HIKToggleReleasePinning() -> Any: ...
def HairScaleTool() -> Any: ...
def HairUVSetLinkingEditor() -> Any: ...
def HardwareRenderBuffer() -> Any: ...
def Help() -> Any: ...
def HideAll() -> Any: ...
def HideAllLabels() -> Any: ...
def HideBoundingBox() -> Any: ...
def HideCameraManipulators() -> Any: ...
def HideCameras() -> Any: ...
def HideClusters() -> Any: ...
def HideControllers() -> Any: ...
def HideDeformers() -> Any: ...
def HideDeformingGeometry() -> Any: ...
def HideDynamicConstraints() -> Any: ...
def HideFluids() -> Any: ...
def HideFollicles() -> Any: ...
def HideFur() -> Any: ...
def HideGeometry() -> Any: ...
def HideHairSystems() -> Any: ...
def HideHotbox() -> Any: ...
def HideIKHandles() -> Any: ...
def HideIntermediateObjects() -> Any: ...
def HideJoints() -> Any: ...
def HideKinematics() -> Any: ...
def HideLattices() -> Any: ...
def HideLightManipulators() -> Any: ...
def HideLights() -> Any: ...
def HideManipulators() -> Any: ...
def HideMarkers() -> Any: ...
def HideNCloths() -> Any: ...
def HideNParticles() -> Any: ...
def HideNRigids() -> Any: ...
def HideNURBSCurves() -> Any: ...
def HideNURBSSurfaces() -> Any: ...
def HideNonlinears() -> Any: ...
def HideObjectGeometry() -> Any: ...
def HidePlanes() -> Any: ...
def HidePolygonSurfaces() -> Any: ...
def HideSculptObjects() -> Any: ...
def HideSelectedObjects() -> Any: ...
def HideSmoothSkinInfluences() -> Any: ...
def HideStrokeControlCurves() -> Any: ...
def HideStrokePathCurves() -> Any: ...
def HideStrokes() -> Any: ...
def HideSubdivSurfaces() -> Any: ...
def HideTexturePlacements() -> Any: ...
def HideUIElements() -> Any: ...
def HideUnselectedCVs() -> Any: ...
def HideUnselectedObjects() -> Any: ...
def HideWrapInfluences() -> Any: ...
def HighQualityDisplay() -> Any: ...
def HighlightWhatsNew() -> Any: ...
def HoldCurrentKeys() -> Any: ...
def HotkeyPreferencesWindow() -> Any: ...
def HyperGraphPanelRedoViewChange() -> Any: ...
def HyperGraphPanelUndoViewChange() -> Any: ...
def HypergraphDGWindow() -> Any: ...
def HypergraphDecreaseDepth() -> Any: ...
def HypergraphHierarchyWindow() -> Any: ...
def HypergraphIncreaseDepth() -> Any: ...
def HypergraphWindow() -> Any: ...
def HypershadeAddOnNodeCreate() -> Any: ...
def HypershadeAdditiveGraphingMode() -> Any: ...
def HypershadeAutoSizeNodes() -> Any: ...
def HypershadeCloseActiveTab() -> Any: ...
def HypershadeCloseAllTabs() -> Any: ...
def HypershadeCollapseAsset() -> Any: ...
def HypershadeConnectSelected() -> Any: ...
def HypershadeConvertPSDToFileTexture() -> Any: ...
def HypershadeConvertPSDToLayeredTexture() -> Any: ...
def HypershadeConvertToFileTexture() -> Any: ...
def HypershadeConvertToFileTextureOptionBox() -> Any: ...
def HypershadeCreateAsset() -> Any: ...
def HypershadeCreateContainerOptions() -> Any: ...
def HypershadeCreateNewTab() -> Any: ...
def HypershadeCreatePSDFile() -> Any: ...
def HypershadeCreateTab() -> Any: ...
def HypershadeDeleteAllBakeSets() -> Any: ...
def HypershadeDeleteAllCamerasAndImagePlanes() -> Any: ...
def HypershadeDeleteAllLights() -> Any: ...
def HypershadeDeleteAllShadingGroupsAndMaterials() -> Any: ...
def HypershadeDeleteAllTextures() -> Any: ...
def HypershadeDeleteAllUtilities() -> Any: ...
def HypershadeDeleteDuplicateShadingNetworks() -> Any: ...
def HypershadeDeleteNodes() -> Any: ...
def HypershadeDeleteSelected() -> Any: ...
def HypershadeDeleteUnusedNodes() -> Any: ...
def HypershadeDisplayAllShapes() -> Any: ...
def HypershadeDisplayAsExtraLargeSwatches() -> Any: ...
def HypershadeDisplayAsIcons() -> Any: ...
def HypershadeDisplayAsLargeSwatches() -> Any: ...
def HypershadeDisplayAsList() -> Any: ...
def HypershadeDisplayAsMediumSwatches() -> Any: ...
def HypershadeDisplayAsSmallSwatches() -> Any: ...
def HypershadeDisplayInterestingShapes() -> Any: ...
def HypershadeDisplayNoShapes() -> Any: ...
def HypershadeDuplicateShadingNetwork() -> Any: ...
def HypershadeDuplicateWithConnections() -> Any: ...
def HypershadeDuplicateWithoutNetwork() -> Any: ...
def HypershadeEditPSDFile() -> Any: ...
def HypershadeEditTexture() -> Any: ...
def HypershadeExpandAsset() -> Any: ...
def HypershadeExportSelectedNetwork() -> Any: ...
def HypershadeFrameAll() -> Any: ...
def HypershadeFrameSelected() -> Any: ...
def HypershadeGraphAddSelected() -> Any: ...
def HypershadeGraphClearGraph() -> Any: ...
def HypershadeGraphDownstream() -> Any: ...
def HypershadeGraphMaterialsOnSelectedObjects() -> Any: ...
def HypershadeGraphRearrange() -> Any: ...
def HypershadeGraphRemoveDownstream() -> Any: ...
def HypershadeGraphRemoveSelected() -> Any: ...
def HypershadeGraphRemoveUnselected() -> Any: ...
def HypershadeGraphRemoveUpstream() -> Any: ...
def HypershadeGraphUpDownstream() -> Any: ...
def HypershadeGraphUpstream() -> Any: ...
def HypershadeGridToggleSnap() -> Any: ...
def HypershadeGridToggleVisibility() -> Any: ...
def HypershadeHideAttributes() -> Any: ...
def HypershadeImport() -> Any: ...
def HypershadeIncreaseTraversalDepth() -> Any: ...
def HypershadeMoveTabDown() -> Any: ...
def HypershadeMoveTabLeft() -> Any: ...
def HypershadeMoveTabRight() -> Any: ...
def HypershadeMoveTabUp() -> Any: ...
def HypershadeOpenBinsWindow() -> Any: ...
def HypershadeOpenBrowserWindow() -> Any: ...
def HypershadeOpenConnectWindow() -> Any: ...
def HypershadeOpenCreateWindow() -> Any: ...
def HypershadeOpenGraphEditorWindow() -> Any: ...
def HypershadeOpenMaterialViewerWindow() -> Any: ...
def HypershadeOpenModelEditorWindow() -> Any: ...
def HypershadeOpenOutlinerWindow() -> Any: ...
def HypershadeOpenPropertyEditorWindow() -> Any: ...
def HypershadeOpenRenderViewWindow() -> Any: ...
def HypershadeOpenSpreadSheetWindow() -> Any: ...
def HypershadeOpenUVEditorWindow() -> Any: ...
def HypershadeOutlinerPerspLayout() -> Any: ...
def HypershadePerspLayout() -> Any: ...
def HypershadePickWalkDown() -> Any: ...
def HypershadePickWalkLeft() -> Any: ...
def HypershadePickWalkRight() -> Any: ...
def HypershadePickWalkUp() -> Any: ...
def HypershadePinByDefault() -> Any: ...
def HypershadePinSelected() -> Any: ...
def HypershadePublishConnections() -> Any: ...
def HypershadeReduceTraversalDepth() -> Any: ...
def HypershadeRefreshAllSwatchesOnDisk() -> Any: ...
def HypershadeRefreshFileListing() -> Any: ...
def HypershadeRefreshSelectedSwatches() -> Any: ...
def HypershadeRefreshSelectedSwatchesOnDisk() -> Any: ...
def HypershadeRemoveAsset() -> Any: ...
def HypershadeRemoveTab() -> Any: ...
def HypershadeRenameActiveTab() -> Any: ...
def HypershadeRenameTab() -> Any: ...
def HypershadeRenderPerspLayout() -> Any: ...
def HypershadeRenderTextureRange() -> Any: ...
def HypershadeRenderTextureRangeOptions() -> Any: ...
def HypershadeRestoreLastClosedTab() -> Any: ...
def HypershadeRevertSelectedSwatches() -> Any: ...
def HypershadeRevertToDefaultTabs() -> Any: ...
def HypershadeSaveSwatchesToDisk() -> Any: ...
def HypershadeSelectBakeSets() -> Any: ...
def HypershadeSelectCamerasAndImagePlanes() -> Any: ...
def HypershadeSelectConnected() -> Any: ...
def HypershadeSelectDownStream() -> Any: ...
def HypershadeSelectLights() -> Any: ...
def HypershadeSelectMaterialsFromObjects() -> Any: ...
def HypershadeSelectObjectsWithMaterials() -> Any: ...
def HypershadeSelectShadingGroupsAndMaterials() -> Any: ...
def HypershadeSelectTextures() -> Any: ...
def HypershadeSelectUpStream() -> Any: ...
def HypershadeSelectUtilities() -> Any: ...
def HypershadeSetLargeNodeSwatchSize() -> Any: ...
def HypershadeSetSmallNodeSwatchSize() -> Any: ...
def HypershadeSetTraversalDepthUnlim() -> Any: ...
def HypershadeSetTraversalDepthZero() -> Any: ...
def HypershadeShapeMenuStateAll() -> Any: ...
def HypershadeShapeMenuStateAllExceptShadingGroupMembers() -> Any: ...
def HypershadeShapeMenuStateNoShapes() -> Any: ...
def HypershadeShowAllAttrs() -> Any: ...
def HypershadeShowConnectedAttrs() -> Any: ...
def HypershadeShowCustomAttrs() -> Any: ...
def HypershadeShowDirectoriesAndFiles() -> Any: ...
def HypershadeShowDirectoriesOnly() -> Any: ...
def HypershadeSortByName() -> Any: ...
def HypershadeSortByTime() -> Any: ...
def HypershadeSortByType() -> Any: ...
def HypershadeSortReverseOrder() -> Any: ...
def HypershadeTestTexture() -> Any: ...
def HypershadeTestTextureOptions() -> Any: ...
def HypershadeToggleAttrFilter() -> Any: ...
def HypershadeToggleCrosshairOnEdgeDragging() -> Any: ...
def HypershadeToggleNodeSwatchSize() -> Any: ...
def HypershadeToggleNodeTitleMode() -> Any: ...
def HypershadeToggleShowNamespace() -> Any: ...
def HypershadeToggleTransformDisplay() -> Any: ...
def HypershadeToggleUseAssetsAndPublishedAttributes() -> Any: ...
def HypershadeToggleZoomIn() -> Any: ...
def HypershadeToggleZoomOut() -> Any: ...
def HypershadeTransferAttributeValues() -> Any: ...
def HypershadeTransferAttributeValuesOptions() -> Any: ...
def HypershadeUnpinSelected() -> Any: ...
def HypershadeUpdatePSDNetworks() -> Any: ...
def HypershadeWindow() -> Any: ...
def IKHandleTool() -> Any: ...
def IKHandleToolOptions() -> Any: ...
def IKSplineHandleTool() -> Any: ...
def IKSplineHandleToolOptions() -> Any: ...
def IPROptions() -> Any: ...
def IPRRenderIntoNewWindow() -> Any: ...
def IgnoreHardwareShader() -> Any: ...
def IkHdsWin() -> Any: ...
def IkfkjdsWin() -> Any: ...
def Import() -> Any: ...
def ImportAnim() -> Any: ...
def ImportDeformerWeights() -> Any: ...
def ImportDeformerWeightsOptions() -> Any: ...
def ImportOptions() -> Any: ...
def ImportSkinWeightMaps() -> Any: ...
def ImportWorkspaceFiles() -> Any: ...
def InTangentAuto() -> Any: ...
def InTangentAutoCustom() -> Any: ...
def InTangentAutoCustomOptions() -> Any: ...
def InTangentAutoEase() -> Any: ...
def InTangentAutoMix() -> Any: ...
def InTangentClamped() -> Any: ...
def InTangentFixed() -> Any: ...
def InTangentFlat() -> Any: ...
def InTangentLinear() -> Any: ...
def InTangentPlateau() -> Any: ...
def InTangentSpline() -> Any: ...
def InTangentStepNext() -> Any: ...
def InTangentStepped() -> Any: ...
def IncreaseCheckerDensity() -> Any: ...
def IncreaseExposureCoarse() -> Any: ...
def IncreaseExposureFine() -> Any: ...
def IncreaseGammaCoarse() -> Any: ...
def IncreaseGammaFine() -> Any: ...
def IncreaseManipulatorSize() -> Any: ...
def IncrementAndSave() -> Any: ...
def IncrementFluidCenter() -> Any: ...
def InitialFluidStates() -> Any: ...
def InitialFluidStatesOptions() -> Any: ...
def InsertEdgeLoopTool() -> Any: ...
def InsertEdgeLoopToolOptions() -> Any: ...
def InsertIsoparms() -> Any: ...
def InsertIsoparmsOptions() -> Any: ...
def InsertJointTool() -> Any: ...
def InsertKey() -> Any: ...
def InsertKeyRotate() -> Any: ...
def InsertKeyScale() -> Any: ...
def InsertKeyToolActivate() -> Any: ...
def InsertKeyToolDeactivate() -> Any: ...
def InsertKeyTranslate() -> Any: ...
def InsertKeysTool() -> Any: ...
def InsertKeysToolOptions() -> Any: ...
def InsertKnot() -> Any: ...
def InsertKnotOptions() -> Any: ...
def InteractiveBindSkin() -> Any: ...
def InteractiveBindSkinOptions() -> Any: ...
def InteractivePlayback() -> Any: ...
def InteractiveSplitTool() -> Any: ...
def InteractiveSplitToolOptions() -> Any: ...
def IntersectCurve() -> Any: ...
def IntersectCurveOptions() -> Any: ...
def IntersectSurfaces() -> Any: ...
def IntersectSurfacesOptions() -> Any: ...
def InvertSelection() -> Any: ...
def JdsWin() -> Any: ...
def JointTool() -> Any: ...
def JointToolOptions() -> Any: ...
def KeyBlendShapeTargetsWeight() -> Any: ...
def KeyframeTangentMarkingMenu() -> Any: ...
def KeyframeTangentMarkingMenuPopDown() -> Any: ...
def LODGenerateMeshes() -> Any: ...
def LODGenerateMeshesOptions() -> Any: ...
def LabelBasedOnJointNames() -> Any: ...
def LassoTool() -> Any: ...
def LastActionTool() -> Any: ...
def LatticeDeformKeysTool() -> Any: ...
def LatticeDeformKeysToolOptions() -> Any: ...
def LatticeUVTool() -> Any: ...
def LatticeUVToolOptions() -> Any: ...
def LayerRelationshipEditor() -> Any: ...
def LayoutUV() -> Any: ...
def LayoutUVAlong() -> Any: ...
def LayoutUVAlongOptions() -> Any: ...
def LayoutUVOptions() -> Any: ...
def LayoutUVRectangle() -> Any: ...
def LevelOfDetailGroup() -> Any: ...
def LevelOfDetailGroupOptions() -> Any: ...
def LevelOfDetailUngroup() -> Any: ...
def LightCentricLightLinkingEditor() -> Any: ...
def Lightning() -> Any: ...
def LightningOptions() -> Any: ...
def LockCamera() -> Any: ...
def LockContainer() -> Any: ...
def LockCurveLength() -> Any: ...
def LockNormals() -> Any: ...
def LockTangentWeight() -> Any: ...
def Loft() -> Any: ...
def LoftOptions() -> Any: ...
def LongPolygonNormals() -> Any: ...
def LookAtSelection() -> Any: ...
def LoopBrushAnimation() -> Any: ...
def LoopBrushAnimationOptions() -> Any: ...
def LowQualityDisplay() -> Any: ...
def MakeBoats() -> Any: ...
def MakeBoatsOptions() -> Any: ...
def MakeBrushSpring() -> Any: ...
def MakeBrushSpringOptions() -> Any: ...
def MakeCollide() -> Any: ...
def MakeCollideHair() -> Any: ...
def MakeCollideOptions() -> Any: ...
def MakeCurvesDynamic() -> Any: ...
def MakeCurvesDynamicOptions() -> Any: ...
def MakeFluidCollide() -> Any: ...
def MakeFluidCollideOptions() -> Any: ...
def MakeHoleTool() -> Any: ...
def MakeHoleToolOptions() -> Any: ...
def MakeLightLinks() -> Any: ...
def MakeLive() -> Any: ...
def MakeMotionField() -> Any: ...
def MakeMotorBoats() -> Any: ...
def MakeMotorBoatsOptions() -> Any: ...
def MakePaintable() -> Any: ...
def MakePondBoats() -> Any: ...
def MakePondBoatsOptions() -> Any: ...
def MakePondMotorBoats() -> Any: ...
def MakePondMotorBoatsOptions() -> Any: ...
def MakePressureCurve() -> Any: ...
def MakePressureCurveOptions() -> Any: ...
def MakeShadowLinks() -> Any: ...
def MakeStereoLinks() -> Any: ...
def MakeUVInstanceCurrent() -> Any: ...
def MapUVBorder() -> Any: ...
def MapUVBorderOptions() -> Any: ...
def MarkingMenuPopDown() -> Any: ...
def MarkingMenuPreferencesWindow() -> Any: ...
def MatchPivots() -> Any: ...
def MatchPivotsOptions() -> Any: ...
def MatchRotation() -> Any: ...
def MatchRotationOptions() -> Any: ...
def MatchScaling() -> Any: ...
def MatchScalingOptions() -> Any: ...
def MatchTransform() -> Any: ...
def MatchTransformOptions() -> Any: ...
def MatchTranslation() -> Any: ...
def MatchTranslationOptions() -> Any: ...
def MatchUVs() -> Any: ...
def MatchUVsOptions() -> Any: ...
def MediumPolygonNormals() -> Any: ...
def MediumQualityDisplay() -> Any: ...
def MergeCharacterSet() -> Any: ...
def MergeEdgeTool() -> Any: ...
def MergeEdgeToolOptions() -> Any: ...
def MergeMultipleEdges() -> Any: ...
def MergeMultipleEdgesOptions() -> Any: ...
def MergeToCenter() -> Any: ...
def MergeUV() -> Any: ...
def MergeUVOptions() -> Any: ...
def MergeVertexTool() -> Any: ...
def MergeVertexToolOptions() -> Any: ...
def MergeVertices() -> Any: ...
def MergeVerticesOptions() -> Any: ...
def MinimizeApplication() -> Any: ...
def MirrorCutPolygonGeometry() -> Any: ...
def MirrorCutPolygonGeometryOptions() -> Any: ...
def MirrorDeformerWeights() -> Any: ...
def MirrorDeformerWeightsOptions() -> Any: ...
def MirrorJoint() -> Any: ...
def MirrorJointOptions() -> Any: ...
def MirrorPolygonGeometry() -> Any: ...
def MirrorPolygonGeometryOptions() -> Any: ...
def MirrorSkinWeights() -> Any: ...
def MirrorSkinWeightsOptions() -> Any: ...
def MirrorSubdivSurface() -> Any: ...
def MirrorSubdivSurfaceOptions() -> Any: ...
def ModelingPanelRedoViewChange() -> Any: ...
def ModelingPanelUndoViewChange() -> Any: ...
def ModifyConstraintAxis() -> Any: ...
def ModifyConstraintAxisOptions() -> Any: ...
def ModifyCurrentSet() -> Any: ...
def ModifyDisplacementPress() -> Any: ...
def ModifyDisplacementRelease() -> Any: ...
def ModifyLowerRadiusPress() -> Any: ...
def ModifyLowerRadiusRelease() -> Any: ...
def ModifyOpacityPress() -> Any: ...
def ModifyOpacityRelease() -> Any: ...
def ModifyPaintValuePress() -> Any: ...
def ModifyPaintValueRelease() -> Any: ...
def ModifyStampDepthPress() -> Any: ...
def ModifyStampDepthRelease() -> Any: ...
def ModifyUVVectorPress() -> Any: ...
def ModifyUVVectorRelease() -> Any: ...
def ModifyUpperRadiusPress() -> Any: ...
def ModifyUpperRadiusRelease() -> Any: ...
def Morph() -> Any: ...
def MorphOptions() -> Any: ...
def MotionLibraryEditor() -> Any: ...
def MoveCacheToInput() -> Any: ...
def MoveCurveSeam() -> Any: ...
def MoveDown() -> Any: ...
def MoveIKtoFK() -> Any: ...
def MoveInfluence() -> Any: ...
def MoveLeft() -> Any: ...
def MoveNearestPickedKeyToolActivate() -> Any: ...
def MoveNearestPickedKeyToolDeactivate() -> Any: ...
def MoveNormalTool() -> Any: ...
def MoveNormalToolOptions() -> Any: ...
def MovePolygonComponent() -> Any: ...
def MovePolygonComponentOptions() -> Any: ...
def MoveRight() -> Any: ...
def MoveRotateScaleTool() -> Any: ...
def MoveRotateScaleToolToggleSnapMode() -> Any: ...
def MoveRotateScaleToolToggleSnapRelativeMode() -> Any: ...
def MoveSewUVs() -> Any: ...
def MoveSkinJointsTool() -> Any: ...
def MoveSkinJointsToolOptions() -> Any: ...
def MoveSurfaceSeam() -> Any: ...
def MoveTool() -> Any: ...
def MoveToolOptions() -> Any: ...
def MoveUVTool() -> Any: ...
def MoveUp() -> Any: ...
def MultiCutTool() -> Any: ...
def NCreateEmitter() -> Any: ...
def NCreateEmitterOptions() -> Any: ...
def NEmitFromObject() -> Any: ...
def NEmitFromObjectOptions() -> Any: ...
def NParticleStyleBalls() -> Any: ...
def NParticleStyleCloud() -> Any: ...
def NParticleStylePoints() -> Any: ...
def NParticleStyleThickCloud() -> Any: ...
def NParticleStyleWater() -> Any: ...
def NParticleToPolygons() -> Any: ...
def NParticleTool() -> Any: ...
def NParticleToolOptions() -> Any: ...
def NURBSSmoothnessFine() -> Any: ...
def NURBSSmoothnessFineOptions() -> Any: ...
def NURBSSmoothnessHull() -> Any: ...
def NURBSSmoothnessHullOptions() -> Any: ...
def NURBSSmoothnessMedium() -> Any: ...
def NURBSSmoothnessMediumOptions() -> Any: ...
def NURBSSmoothnessRough() -> Any: ...
def NURBSSmoothnessRoughOptions() -> Any: ...
def NURBSTexturePlacementTool() -> Any: ...
def NURBSTexturePlacementToolOptions() -> Any: ...
def NURBSToPolygons() -> Any: ...
def NURBSToPolygonsOptions() -> Any: ...
def NamespaceEditor() -> Any: ...
def NewScene() -> Any: ...
def NewSceneOptions() -> Any: ...
def Newton() -> Any: ...
def NewtonOptions() -> Any: ...
def NextFrame() -> Any: ...
def NextGreasePencilFrame() -> Any: ...
def NextKey() -> Any: ...
def NextManipulatorHandle() -> Any: ...
def NextSkinPaintMode() -> Any: ...
def NextTimeSliderBookmark() -> Any: ...
def NextViewArrangement() -> Any: ...
def NodeEditorAddIterationStatePorts() -> Any: ...
def NodeEditorAddOnNodeCreate() -> Any: ...
def NodeEditorAdditiveGraphingMode() -> Any: ...
def NodeEditorAutoSizeNodes() -> Any: ...
def NodeEditorBackToParent() -> Any: ...
def NodeEditorCloseActiveTab() -> Any: ...
def NodeEditorCloseAllTabs() -> Any: ...
def NodeEditorConnectNodeOnCreation() -> Any: ...
def NodeEditorConnectOnDrop() -> Any: ...
def NodeEditorConnectSelectedNodes() -> Any: ...
def NodeEditorConnectionStyleBezier() -> Any: ...
def NodeEditorConnectionStyleCorner() -> Any: ...
def NodeEditorConnectionStyleSShape() -> Any: ...
def NodeEditorConnectionStyleStraight() -> Any: ...
def NodeEditorCopy() -> Any: ...
def NodeEditorCopyConnectionsOnPaste() -> Any: ...
def NodeEditorCreateCompound() -> Any: ...
def NodeEditorCreateDoWhileCompound() -> Any: ...
def NodeEditorCreateForEachCompound() -> Any: ...
def NodeEditorCreateIterateCompound() -> Any: ...
def NodeEditorCreateNodePopup() -> Any: ...
def NodeEditorCreateTab() -> Any: ...
def NodeEditorCut() -> Any: ...
def NodeEditorDeleteNodes() -> Any: ...
def NodeEditorDiveIntoCompound() -> Any: ...
def NodeEditorExplodeCompound() -> Any: ...
def NodeEditorExtendToShapes() -> Any: ...
def NodeEditorGraphAddSelected() -> Any: ...
def NodeEditorGraphAllShapes() -> Any: ...
def NodeEditorGraphAllShapesExceptShading() -> Any: ...
def NodeEditorGraphClearGraph() -> Any: ...
def NodeEditorGraphDownstream() -> Any: ...
def NodeEditorGraphNoShapes() -> Any: ...
def NodeEditorGraphRearrange() -> Any: ...
def NodeEditorGraphRemoveDownstream() -> Any: ...
def NodeEditorGraphRemoveSelected() -> Any: ...
def NodeEditorGraphRemoveUnselected() -> Any: ...
def NodeEditorGraphRemoveUpstream() -> Any: ...
def NodeEditorGraphUpDownstream() -> Any: ...
def NodeEditorGraphUpstream() -> Any: ...
def NodeEditorGridToggleCrosshairOnEdgeDragging() -> Any: ...
def NodeEditorGridToggleSnap() -> Any: ...
def NodeEditorGridToggleVisibility() -> Any: ...
def NodeEditorHideAttributes() -> Any: ...
def NodeEditorHighlightConnectionsOnNodeSelection() -> Any: ...
def NodeEditorIncreaseTraversalDepth() -> Any: ...
def NodeEditorLayout() -> Any: ...
def NodeEditorPaste() -> Any: ...
def NodeEditorPickWalkDown() -> Any: ...
def NodeEditorPickWalkLeft() -> Any: ...
def NodeEditorPickWalkRight() -> Any: ...
def NodeEditorPickWalkUp() -> Any: ...
def NodeEditorPinByDefault() -> Any: ...
def NodeEditorPinSelected() -> Any: ...
def NodeEditorPublishCompound() -> Any: ...
def NodeEditorRedockTornOffTab() -> Any: ...
def NodeEditorReduceTraversalDepth() -> Any: ...
def NodeEditorRenameActiveTab() -> Any: ...
def NodeEditorRenderSwatches() -> Any: ...
def NodeEditorRestoreLastClosedTab() -> Any: ...
def NodeEditorSelectConnected() -> Any: ...
def NodeEditorSelectDownStream() -> Any: ...
def NodeEditorSelectUpStream() -> Any: ...
def NodeEditorSetLargeNodeSwatchSize() -> Any: ...
def NodeEditorSetSmallNodeSwatchSize() -> Any: ...
def NodeEditorSetTraversalDepthUnlim() -> Any: ...
def NodeEditorSetTraversalDepthZero() -> Any: ...
def NodeEditorShapeMenuStateAll() -> Any: ...
def NodeEditorShapeMenuStateAllExceptShadingGroupMembers() -> Any: ...
def NodeEditorShapeMenuStateNoShapes() -> Any: ...
def NodeEditorShowAllAttrs() -> Any: ...
def NodeEditorShowAllCustomAttrs() -> Any: ...
def NodeEditorShowConnectedAttrs() -> Any: ...
def NodeEditorShowCustomAttrs() -> Any: ...
def NodeEditorToggleAttrFilter() -> Any: ...
def NodeEditorToggleConsistentNodeNameSize() -> Any: ...
def NodeEditorToggleCreateNodePane() -> Any: ...
def NodeEditorToggleLockUnlock() -> Any: ...
def NodeEditorToggleNodeSelectedPins() -> Any: ...
def NodeEditorToggleNodeSwatchSize() -> Any: ...
def NodeEditorToggleNodeTitleMode() -> Any: ...
def NodeEditorToggleShowNamespace() -> Any: ...
def NodeEditorToggleSyncedSelection() -> Any: ...
def NodeEditorToggleUseAssetsAndPublishedAttributes() -> Any: ...
def NodeEditorToggleZoomIn() -> Any: ...
def NodeEditorToggleZoomOut() -> Any: ...
def NodeEditorTransforms() -> Any: ...
def NodeEditorUnpinSelected() -> Any: ...
def NodeEditorWindow() -> Any: ...
def NonSacredTool() -> Any: ...
def NonWeightedTangents() -> Any: ...
def NormalConstraint() -> Any: ...
def NormalConstraintOptions() -> Any: ...
def NormalizeUVs() -> Any: ...
def NormalizeUVsOptions() -> Any: ...
def NormalizeWeights() -> Any: ...
def NudgeSelectedKeysBackward() -> Any: ...
def NudgeSelectedKeysForward() -> Any: ...
def NurbsCurveToBezier() -> Any: ...
def ObjectCentricLightLinkingEditor() -> Any: ...
def OffsetCurve() -> Any: ...
def OffsetCurveOnSurface() -> Any: ...
def OffsetCurveOnSurfaceOptions() -> Any: ...
def OffsetCurveOptions() -> Any: ...
def OffsetEdgeLoopTool() -> Any: ...
def OffsetEdgeLoopToolOptions() -> Any: ...
def OffsetSurfaces() -> Any: ...
def OffsetSurfacesOptions() -> Any: ...
def OpenAELiveLink() -> Any: ...
def OpenAREACommunity() -> Any: ...
def OpenAREAForums() -> Any: ...
def OpenAutodeskAccount() -> Any: ...
def OpenAutodeskExchange() -> Any: ...
def OpenAutodeskStore() -> Any: ...
def OpenBifContentBrowser() -> Any: ...
def OpenBrowserSetupAssistant() -> Any: ...
def OpenBugReport() -> Any: ...
def OpenChannelBox() -> Any: ...
def OpenChannelsLayers() -> Any: ...
def OpenCharacterGenerator() -> Any: ...
def OpenCloseCurve() -> Any: ...
def OpenCloseCurveOptions() -> Any: ...
def OpenCloseSurfaces() -> Any: ...
def OpenCloseSurfacesOptions() -> Any: ...
def OpenColorSetEditor() -> Any: ...
def OpenContentBrowser() -> Any: ...
def OpenCreaseEditor() -> Any: ...
def OpenDGProfiler() -> Any: ...
def OpenDesktopAnalytics() -> Any: ...
def OpenFBXReview() -> Any: ...
def OpenFacebook() -> Any: ...
def OpenFeatureRequest() -> Any: ...
def OpenHomePage() -> Any: ...
def OpenLayerEditor() -> Any: ...
def OpenLearningChannel() -> Any: ...
def OpenLearningPath() -> Any: ...
def OpenLightEditor() -> Any: ...
def OpenMASHContentBrowser() -> Any: ...
def OpenMelCmdRef() -> Any: ...
def OpenMenuFinder() -> Any: ...
def OpenModelingToolkit() -> Any: ...
def OpenNodeAttrRef() -> Any: ...
def OpenProductResearch() -> Any: ...
def OpenPyCmdRef() -> Any: ...
def OpenReleaseNotes() -> Any: ...
def OpenScene() -> Any: ...
def OpenSceneOptions() -> Any: ...
def OpenStartupMovies() -> Any: ...
def OpenStereoRigManager() -> Any: ...
def OpenSupportCenter() -> Any: ...
def OpenTimeSliderPrefs() -> Any: ...
def OpenTinkercad() -> Any: ...
def OpenTrialTutorials() -> Any: ...
def OpenTutorials() -> Any: ...
def OpenViewportPrefs() -> Any: ...
def OpenVisorForMeshes() -> Any: ...
def OpenXGenEditor() -> Any: ...
def OptimizeScene() -> Any: ...
def OptimizeSceneOptions() -> Any: ...
def OptimzeUVs() -> Any: ...
def OptimzeUVsOptions() -> Any: ...
def OrientConstraint() -> Any: ...
def OrientConstraintOptions() -> Any: ...
def OrientJoint() -> Any: ...
def OrientJointOptions() -> Any: ...
def OutTangentAuto() -> Any: ...
def OutTangentAutoCustom() -> Any: ...
def OutTangentAutoCustomOptions() -> Any: ...
def OutTangentAutoEase() -> Any: ...
def OutTangentAutoMix() -> Any: ...
def OutTangentClamped() -> Any: ...
def OutTangentFixed() -> Any: ...
def OutTangentFlat() -> Any: ...
def OutTangentLinear() -> Any: ...
def OutTangentPlateau() -> Any: ...
def OutTangentSpline() -> Any: ...
def OutTangentStepNext() -> Any: ...
def OutTangentStepped() -> Any: ...
def OutlinerCollapseAllItems() -> Any: ...
def OutlinerCollapseAllSelectedItems() -> Any: ...
def OutlinerDoHide() -> Any: ...
def OutlinerExpandAllItems() -> Any: ...
def OutlinerExpandAllSelectedItems() -> Any: ...
def OutlinerRenameSelectedItem() -> Any: ...
def OutlinerRevealSelected() -> Any: ...
def OutlinerToggleAssignedMaterials() -> Any: ...
def OutlinerToggleAttributes() -> Any: ...
def OutlinerToggleAutoExpandLayers() -> Any: ...
def OutlinerToggleConnected() -> Any: ...
def OutlinerToggleDAGOnly() -> Any: ...
def OutlinerToggleIgnoreHidden() -> Any: ...
def OutlinerToggleIgnoreUseColor() -> Any: ...
def OutlinerToggleNamespace() -> Any: ...
def OutlinerToggleOrganizeByClip() -> Any: ...
def OutlinerToggleOrganizeByLayer() -> Any: ...
def OutlinerToggleReferenceMembers() -> Any: ...
def OutlinerToggleReferenceNodes() -> Any: ...
def OutlinerToggleSetMembers() -> Any: ...
def OutlinerToggleShapes() -> Any: ...
def OutlinerToggleShowMuteInformation() -> Any: ...
def OutlinerToggleTimeEditor() -> Any: ...
def OutlinerUnhide() -> Any: ...
def OutlinerWindow() -> Any: ...
def OutputWindow() -> Any: ...
def PFXUVSetLinkingEditor() -> Any: ...
def PaintCacheTool() -> Any: ...
def PaintCacheToolOptions() -> Any: ...
def PaintClusterWeightsTool() -> Any: ...
def PaintClusterWeightsToolOptions() -> Any: ...
def PaintDeltaMushWeightsTool() -> Any: ...
def PaintDeltaMushWeightsToolOptions() -> Any: ...
def PaintEffectPanelActivate() -> Any: ...
def PaintEffectPanelDeactivate() -> Any: ...
def PaintEffectsGlobalSettings() -> Any: ...
def PaintEffectsMeshQuality() -> Any: ...
def PaintEffectsPanel() -> Any: ...
def PaintEffectsToCurve() -> Any: ...
def PaintEffectsToCurveOptions() -> Any: ...
def PaintEffectsToNurbs() -> Any: ...
def PaintEffectsToNurbsOptions() -> Any: ...
def PaintEffectsToPoly() -> Any: ...
def PaintEffectsToPolyOptions() -> Any: ...
def PaintEffectsTool() -> Any: ...
def PaintEffectsToolOptions() -> Any: ...
def PaintEffectsWindow() -> Any: ...
def PaintFluidsTool() -> Any: ...
def PaintFluidsToolOptions() -> Any: ...
def PaintGeomCacheTool() -> Any: ...
def PaintGeomCacheToolOptions() -> Any: ...
def PaintGrid() -> Any: ...
def PaintGridOptions() -> Any: ...
def PaintHairBaldness() -> Any: ...
def PaintHairColor() -> Any: ...
def PaintHairFollicles() -> Any: ...
def PaintHairFolliclesOptions() -> Any: ...
def PaintHairSpecularColor() -> Any: ...
def PaintJiggleWeightsTool() -> Any: ...
def PaintJiggleWeightsToolOptions() -> Any: ...
def PaintLatticeWeightsTool() -> Any: ...
def PaintLatticeWeightsToolOptions() -> Any: ...
def PaintNonlinearWeightsTool() -> Any: ...
def PaintNonlinearWeightsToolOptions() -> Any: ...
def PaintOnPaintableObjects() -> Any: ...
def PaintOnViewPlane() -> Any: ...
def PaintOperationMarkingMenuPress() -> Any: ...
def PaintOperationMarkingMenuRelease() -> Any: ...
def PaintProximityWrapWeightsTool() -> Any: ...
def PaintProximityWrapWeightsToolOptions() -> Any: ...
def PaintRandom() -> Any: ...
def PaintRandomOptions() -> Any: ...
def PaintReduceWeightsTool() -> Any: ...
def PaintReduceWeightsToolOptions() -> Any: ...
def PaintSetMembershipTool() -> Any: ...
def PaintSetMembershipToolOptions() -> Any: ...
def PaintShrinkWrapWeightsTool() -> Any: ...
def PaintShrinkWrapWeightsToolOptions() -> Any: ...
def PaintSoftWeights() -> Any: ...
def PaintSoftWeightsOptions() -> Any: ...
def PaintTensionWeightsTool() -> Any: ...
def PaintTensionWeightsToolOptions() -> Any: ...
def PaintTextureDeformerWeightsTool() -> Any: ...
def PaintTextureDeformerWeightsToolOptions() -> Any: ...
def PaintToonBorderColor() -> Any: ...
def PaintToonCreaseColor() -> Any: ...
def PaintToonLineOffset() -> Any: ...
def PaintToonLineOpacity() -> Any: ...
def PaintToonLineWidth() -> Any: ...
def PaintToonProfileColor() -> Any: ...
def PaintTransferAttributes() -> Any: ...
def PaintVertexColorTool() -> Any: ...
def PaintVertexColorToolOptions() -> Any: ...
def PaintWireWeightsTool() -> Any: ...
def PaintWireWeightsToolOptions() -> Any: ...
def PanZoomTool() -> Any: ...
def PanePop() -> Any: ...
def PanelPreferencesWindow() -> Any: ...
def ParameterTool() -> Any: ...
def Parent() -> Any: ...
def ParentBaseWire() -> Any: ...
def ParentBaseWireOptions() -> Any: ...
def ParentConstraint() -> Any: ...
def ParentConstraintOptions() -> Any: ...
def ParentOptions() -> Any: ...
def PartSpriteWizard() -> Any: ...
def PartialCreaseSubdivSurface() -> Any: ...
def ParticleCollisionEvents() -> Any: ...
def ParticleFill() -> Any: ...
def ParticleFillOptions() -> Any: ...
def ParticleInstancer() -> Any: ...
def ParticleInstancerOptions() -> Any: ...
def ParticleTool() -> Any: ...
def ParticleToolOptions() -> Any: ...
def PartitionEditor() -> Any: ...
def PasteKeys() -> Any: ...
def PasteKeysOptions() -> Any: ...
def PasteSelected() -> Any: ...
def PasteUVs() -> Any: ...
def PasteVertexSkinWeights() -> Any: ...
def PasteVertexWeights() -> Any: ...
def PauseViewportEval() -> Any: ...
def PencilCurveTool() -> Any: ...
def PencilCurveToolOptions() -> Any: ...
def PerPointEmissionRates() -> Any: ...
def PerformExportToBackburner() -> Any: ...
def PerformPrecompExport() -> Any: ...
def PerformPrecompExportOptions() -> Any: ...
def PerformTessellationSetup() -> Any: ...
def PerformTessellationSetupOptions() -> Any: ...
def PerformanceSettingsWindow() -> Any: ...
def PerspGraphHypergraphLayout() -> Any: ...
def PerspGraphLayout() -> Any: ...
def PerspGraphOutlinerLayout() -> Any: ...
def PerspRelationshipEditorLayout() -> Any: ...
def PerspTextureLayout() -> Any: ...
def PfxBrushTransfer() -> Any: ...
def PfxFlipTubeDir() -> Any: ...
def PfxGetBrush() -> Any: ...
def PfxMakeCollide() -> Any: ...
def PfxPresetBlend() -> Any: ...
def PfxSetLineModifierObject() -> Any: ...
def PickColorActivate() -> Any: ...
def PickColorDeactivate() -> Any: ...
def PickWalkDown() -> Any: ...
def PickWalkDownSelect() -> Any: ...
def PickWalkIn() -> Any: ...
def PickWalkLeft() -> Any: ...
def PickWalkLeftSelect() -> Any: ...
def PickWalkOut() -> Any: ...
def PickWalkRight() -> Any: ...
def PickWalkRightSelect() -> Any: ...
def PickWalkStopAtTransform() -> Any: ...
def PickWalkUp() -> Any: ...
def PickWalkUpSelect() -> Any: ...
def PickWalkUseController() -> Any: ...
def PinSelection() -> Any: ...
def PinSelectionOptions() -> Any: ...
def PixelMoveDown() -> Any: ...
def PixelMoveLeft() -> Any: ...
def PixelMoveRight() -> Any: ...
def PixelMoveUp() -> Any: ...
def Planar() -> Any: ...
def PlanarOptions() -> Any: ...
def PlaybackBackward() -> Any: ...
def PlaybackForward() -> Any: ...
def PlaybackFree() -> Any: ...
def PlaybackLoopContinuous() -> Any: ...
def PlaybackLoopOnce() -> Any: ...
def PlaybackLoopOscillate() -> Any: ...
def PlaybackPefRealtime() -> Any: ...
def PlaybackRangeAnimStartEnd() -> Any: ...
def PlaybackRangeEnabledClips() -> Any: ...
def PlaybackRangeHighlight() -> Any: ...
def PlaybackRangeMinMax() -> Any: ...
def PlaybackRangePrefs() -> Any: ...
def PlaybackRangeSound() -> Any: ...
def PlaybackRangeStartEnd() -> Any: ...
def PlaybackRealtime() -> Any: ...
def PlaybackSteppedPreview() -> Any: ...
def PlaybackStop() -> Any: ...
def PlaybackToggle() -> Any: ...
def PlayblastOptions() -> Any: ...
def PlayblastWindow() -> Any: ...
def PlayblastWindowOptions() -> Any: ...
def PluginManager() -> Any: ...
def PointConstraint() -> Any: ...
def PointConstraintOptions() -> Any: ...
def PointOnCurve() -> Any: ...
def PointOnCurveOptions() -> Any: ...
def PointOnPolyConstraint() -> Any: ...
def PointOnPolyConstraintOptions() -> Any: ...
def PokePolygon() -> Any: ...
def PokePolygonOptions() -> Any: ...
def PoleVectorConstraint() -> Any: ...
def PoleVectorConstraintOptions() -> Any: ...
def PolyAssignSubdivHole() -> Any: ...
def PolyAssignSubdivHoleOptions() -> Any: ...
def PolyBrushMarkingMenu() -> Any: ...
def PolyBrushMarkingMenuPopDown() -> Any: ...
def PolyCircularize() -> Any: ...
def PolyCircularizeOptions() -> Any: ...
def PolyConvertToLoopAndDelete() -> Any: ...
def PolyConvertToLoopAndDuplicate() -> Any: ...
def PolyConvertToRingAndCollapse() -> Any: ...
def PolyConvertToRingAndSplit() -> Any: ...
def PolyCreaseTool() -> Any: ...
def PolyCreaseToolOptions() -> Any: ...
def PolyDisplayReset() -> Any: ...
def PolyEditEdgeFlow() -> Any: ...
def PolyEditEdgeFlowOptions() -> Any: ...
def PolyExtrude() -> Any: ...
def PolyExtrudeEdges() -> Any: ...
def PolyExtrudeEdgesOptions() -> Any: ...
def PolyExtrudeFaces() -> Any: ...
def PolyExtrudeFacesOptions() -> Any: ...
def PolyExtrudeOptions() -> Any: ...
def PolyExtrudeVertices() -> Any: ...
def PolyExtrudeVerticesOptions() -> Any: ...
def PolyMerge() -> Any: ...
def PolyMergeEdges() -> Any: ...
def PolyMergeEdgesOptions() -> Any: ...
def PolyMergeOptions() -> Any: ...
def PolyMergeVertices() -> Any: ...
def PolyMergeVerticesOptions() -> Any: ...
def PolyRemesh() -> Any: ...
def PolyRemeshOptions() -> Any: ...
def PolyRemoveAllCrease() -> Any: ...
def PolyRemoveCrease() -> Any: ...
def PolyRetopo() -> Any: ...
def PolyRetopoOptions() -> Any: ...
def PolySelectTool() -> Any: ...
def PolySelectToolOptions() -> Any: ...
def PolySpinEdgeBackward() -> Any: ...
def PolySpinEdgeForward() -> Any: ...
def PolygonApplyColor() -> Any: ...
def PolygonApplyColorOptions() -> Any: ...
def PolygonBooleanDifference() -> Any: ...
def PolygonBooleanDifferenceOptions() -> Any: ...
def PolygonBooleanIntersection() -> Any: ...
def PolygonBooleanIntersectionOptions() -> Any: ...
def PolygonBooleanUnion() -> Any: ...
def PolygonBooleanUnionOptions() -> Any: ...
def PolygonClearClipboard() -> Any: ...
def PolygonClearClipboardOptions() -> Any: ...
def PolygonCollapse() -> Any: ...
def PolygonCollapseEdges() -> Any: ...
def PolygonCollapseFaces() -> Any: ...
def PolygonCopy() -> Any: ...
def PolygonCopyOptions() -> Any: ...
def PolygonHardenEdge() -> Any: ...
def PolygonNormalEditTool() -> Any: ...
def PolygonPaste() -> Any: ...
def PolygonPasteOptions() -> Any: ...
def PolygonSelectionConstraints() -> Any: ...
def PolygonSoftenEdge() -> Any: ...
def PolygonSoftenHarden() -> Any: ...
def PolygonSoftenHardenOptions() -> Any: ...
def PoseEditor() -> Any: ...
def PoseInterpolatorNewGroup() -> Any: ...
def PositionAlongCurve() -> Any: ...
def PostInfinityConstant() -> Any: ...
def PostInfinityCycle() -> Any: ...
def PostInfinityCycleOffset() -> Any: ...
def PostInfinityLinear() -> Any: ...
def PostInfinityOscillate() -> Any: ...
def PreInfinityConstant() -> Any: ...
def PreInfinityCycle() -> Any: ...
def PreInfinityCycleOffset() -> Any: ...
def PreInfinityLinear() -> Any: ...
def PreInfinityOscillate() -> Any: ...
def PreferencesWindow() -> Any: ...
def PrefixHierarchyNames() -> Any: ...
def PreflightPolygon() -> Any: ...
def PreflightPolygonOptions() -> Any: ...
def PrelightPolygon() -> Any: ...
def PrelightPolygonOptions() -> Any: ...
def PreloadReferenceEditor() -> Any: ...
def PresetBlendingWindow() -> Any: ...
def PrevSkinPaintMode() -> Any: ...
def PreviousFrame() -> Any: ...
def PreviousGreasePencilFrame() -> Any: ...
def PreviousKey() -> Any: ...
def PreviousManipulatorHandle() -> Any: ...
def PreviousTimeSliderBookmark() -> Any: ...
def PreviousViewArrangement() -> Any: ...
def ProductInformation() -> Any: ...
def ProfilerTool() -> Any: ...
def ProfilerToolCategoryView() -> Any: ...
def ProfilerToolCpuView() -> Any: ...
def ProfilerToolHideSelected() -> Any: ...
def ProfilerToolHideSelectedRepetition() -> Any: ...
def ProfilerToolReset() -> Any: ...
def ProfilerToolShowAll() -> Any: ...
def ProfilerToolShowSelected() -> Any: ...
def ProfilerToolShowSelectedRepetition() -> Any: ...
def ProfilerToolThreadView() -> Any: ...
def ProfilerToolToggleRecording() -> Any: ...
def ProjectCurveOnMesh() -> Any: ...
def ProjectCurveOnMeshOptions() -> Any: ...
def ProjectCurveOnSurface() -> Any: ...
def ProjectCurveOnSurfaceOptions() -> Any: ...
def ProjectTangent() -> Any: ...
def ProjectTangentOptions() -> Any: ...
def ProjectWindow() -> Any: ...
def ProportionalModificationTool() -> Any: ...
def ProximityPin() -> Any: ...
def ProximityPinOptions() -> Any: ...
def ProximityWrap() -> Any: ...
def ProximityWrapEdit() -> Any: ...
def ProximityWrapOptions() -> Any: ...
def PruneCluster() -> Any: ...
def PruneLattice() -> Any: ...
def PruneSculpt() -> Any: ...
def PruneSmallWeights() -> Any: ...
def PruneSmallWeightsOptions() -> Any: ...
def PruneWire() -> Any: ...
def PublishAttributes() -> Any: ...
def PublishAttributesOptions() -> Any: ...
def PublishChildAnchor() -> Any: ...
def PublishChildAnchorOptions() -> Any: ...
def PublishConnections() -> Any: ...
def PublishConnectionsOptions() -> Any: ...
def PublishNode() -> Any: ...
def PublishParentAnchor() -> Any: ...
def PublishParentAnchorOptions() -> Any: ...
def PublishRootTransform() -> Any: ...
def PublishRootTransformOptions() -> Any: ...
def QuadDrawTool() -> Any: ...
def Quadrangulate() -> Any: ...
def QuadrangulateOptions() -> Any: ...
def QualityDisplayMarkingMenu() -> Any: ...
def QualityDisplayMarkingMenuPopDown() -> Any: ...
def QuickCreateTimeSliderBookmark() -> Any: ...
def QuickRigEditor() -> Any: ...
def Quit() -> Any: ...
def Radial() -> Any: ...
def RadialOptions() -> Any: ...
def RaiseApplicationWindows() -> Any: ...
def RaiseMainWindow() -> Any: ...
def RandomizeFollicles() -> Any: ...
def RandomizeFolliclesOptions() -> Any: ...
def RandomizeShells() -> Any: ...
def RandomizeShellsOptions() -> Any: ...
def ReassignBoneLatticeJoint() -> Any: ...
def ReattachSkeleton() -> Any: ...
def ReattachSkeletonJoints() -> Any: ...
def RebuildCurve() -> Any: ...
def RebuildCurveOptions() -> Any: ...
def RebuildSurfaces() -> Any: ...
def RebuildSurfacesOptions() -> Any: ...
def RecentCommandsWindow() -> Any: ...
def Redo() -> Any: ...
def RedoPreviousIPRRender() -> Any: ...
def RedoPreviousRender() -> Any: ...
def RedoViewChange() -> Any: ...
def ReducePolygon() -> Any: ...
def ReducePolygonOptions() -> Any: ...
def ReferenceEditor() -> Any: ...
def RefineSelectedComponents() -> Any: ...
def RegionKeysTool() -> Any: ...
def RelaxInitialState() -> Any: ...
def RelaxInitialStateOptions() -> Any: ...
def RelaxUVShell() -> Any: ...
def RelaxUVShellOptions() -> Any: ...
def RemoveBindingSet() -> Any: ...
def RemoveBlendShape() -> Any: ...
def RemoveBlendShapeOptions() -> Any: ...
def RemoveBrushSharing() -> Any: ...
def RemoveConstraintTarget() -> Any: ...
def RemoveConstraintTargetOptions() -> Any: ...
def RemoveFromCharacterSet() -> Any: ...
def RemoveFromContainer() -> Any: ...
def RemoveFromContainerOptions() -> Any: ...
def RemoveInbetween() -> Any: ...
def RemoveInfluence() -> Any: ...
def RemoveJoint() -> Any: ...
def RemoveLatticeTweaks() -> Any: ...
def RemoveMaterialSoloing() -> Any: ...
def RemoveNewPfxToon() -> Any: ...
def RemoveShrinkWrapInnerObject() -> Any: ...
def RemoveShrinkWrapSurfaces() -> Any: ...
def RemoveShrinkWrapTarget() -> Any: ...
def RemoveSubdivProxyMirror() -> Any: ...
def RemoveSubdivProxyMirrorOptions() -> Any: ...
def RemoveUnusedInfluences() -> Any: ...
def RemoveWire() -> Any: ...
def RemoveWireOptions() -> Any: ...
def RemoveWrapInfluence() -> Any: ...
def RenameAttribute() -> Any: ...
def RenameCurrentColorSet() -> Any: ...
def RenameCurrentSet() -> Any: ...
def RenameCurrentUVSet() -> Any: ...
def RenameJointsFromLabels() -> Any: ...
def RenderDiagnostics() -> Any: ...
def RenderFlagsWindow() -> Any: ...
def RenderGlobalsWindow() -> Any: ...
def RenderIntoNewWindow() -> Any: ...
def RenderLayerEditorWindow() -> Any: ...
def RenderLayerRelationshipEditor() -> Any: ...
def RenderOptions() -> Any: ...
def RenderPassSetEditor() -> Any: ...
def RenderSequence() -> Any: ...
def RenderSequenceOptions() -> Any: ...
def RenderSetupWindow() -> Any: ...
def RenderTextureRange() -> Any: ...
def RenderTextureRangeOptions() -> Any: ...
def RenderViewNextImage() -> Any: ...
def RenderViewPrevImage() -> Any: ...
def RenderViewWindow() -> Any: ...
def ReorderVertex() -> Any: ...
def RepeatLast() -> Any: ...
def RepeatLastActionAtMousePosition() -> Any: ...
def ReplaceObjects() -> Any: ...
def ReplaceObjectsOptions() -> Any: ...
def RerootSkeleton() -> Any: ...
def ResampleCurve() -> Any: ...
def ResampleCurveOptions() -> Any: ...
def ResetCurrentWorkspace() -> Any: ...
def ResetDisplay() -> Any: ...
def ResetLattice() -> Any: ...
def ResetReflectionOptions() -> Any: ...
def ResetSoftSelectOptions() -> Any: ...
def ResetTemplateBrush() -> Any: ...
def ResetTransformations() -> Any: ...
def ResetTransformationsOptions() -> Any: ...
def ResetViewport() -> Any: ...
def ResetWeightsToDefault() -> Any: ...
def ResetWire() -> Any: ...
def ResetWireOptions() -> Any: ...
def ResolveInterpenetration() -> Any: ...
def ResolveInterpenetrationOptions() -> Any: ...
def RestoreUIElements() -> Any: ...
def RetimeKeysTool() -> Any: ...
def RetimeKeysToolOptions() -> Any: ...
def ReverseCurve() -> Any: ...
def ReverseCurveOptions() -> Any: ...
def ReversePolygonNormals() -> Any: ...
def ReversePolygonNormalsOptions() -> Any: ...
def ReverseSurfaceDirection() -> Any: ...
def ReverseSurfaceDirectionOptions() -> Any: ...
def ReverseToonObjects() -> Any: ...
def Revolve() -> Any: ...
def RevolveOptions() -> Any: ...
def RigidBindSkin() -> Any: ...
def RigidBindSkinOptions() -> Any: ...
def RigidBodySolver() -> Any: ...
def Rivet() -> Any: ...
def RotateTool() -> Any: ...
def RotateToolMarkingMenu() -> Any: ...
def RotateToolMarkingMenuPopDown() -> Any: ...
def RotateToolOptions() -> Any: ...
def RotateToolWithSnapMarkingMenu() -> Any: ...
def RotateToolWithSnapMarkingMenuPopDown() -> Any: ...
def RotateUVTool() -> Any: ...
def RotateUVs() -> Any: ...
def RotateUVsOptions() -> Any: ...
def RoundTool() -> Any: ...
def RoundToolOptions() -> Any: ...
def STRSTweakModeOff() -> Any: ...
def STRSTweakModeOn() -> Any: ...
def STRSTweakModeToggle() -> Any: ...
def SaveBrushPreset() -> Any: ...
def SaveCurrentLayout() -> Any: ...
def SaveCurrentWorkspace() -> Any: ...
def SaveFluidStateAs() -> Any: ...
def SaveInitialStateAll() -> Any: ...
def SavePreferences() -> Any: ...
def SaveScene() -> Any: ...
def SaveSceneAs() -> Any: ...
def SaveSceneAsOptions() -> Any: ...
def SaveSceneOptions() -> Any: ...
def ScaleConstraint() -> Any: ...
def ScaleConstraintOptions() -> Any: ...
def ScaleCurvature() -> Any: ...
def ScaleCurvatureOptions() -> Any: ...
def ScaleKeys() -> Any: ...
def ScaleKeysOptions() -> Any: ...
def ScaleTool() -> Any: ...
def ScaleToolMarkingMenu() -> Any: ...
def ScaleToolMarkingMenuPopDown() -> Any: ...
def ScaleToolOptions() -> Any: ...
def ScaleToolWithSnapMarkingMenu() -> Any: ...
def ScaleToolWithSnapMarkingMenuPopDown() -> Any: ...
def ScaleUVTool() -> Any: ...
def ScriptEditor() -> Any: ...
def ScriptPaintTool() -> Any: ...
def ScriptPaintToolOptions() -> Any: ...
def SculptGeometryTool() -> Any: ...
def SculptGeometryToolOptions() -> Any: ...
def SculptMeshActivateBrushSize() -> Any: ...
def SculptMeshActivateBrushStrength() -> Any: ...
def SculptMeshDeactivateBrushSize() -> Any: ...
def SculptMeshDeactivateBrushStrength() -> Any: ...
def SculptMeshFrame() -> Any: ...
def SculptMeshInvertFreeze() -> Any: ...
def SculptMeshUnfreezeAll() -> Any: ...
def SculptPolygonsTool() -> Any: ...
def SculptPolygonsToolOptions() -> Any: ...
def SculptReferenceVectorMarkingMenuPress() -> Any: ...
def SculptReferenceVectorMarkingMenuRelease() -> Any: ...
def SculptSubdivsTool() -> Any: ...
def SculptSubdivsToolOptions() -> Any: ...
def SculptSurfacesTool() -> Any: ...
def SculptSurfacesToolOptions() -> Any: ...
def SearchAndReplaceNames() -> Any: ...
def SelectAll() -> Any: ...
def SelectAllAssets() -> Any: ...
def SelectAllBrushes() -> Any: ...
def SelectAllCameras() -> Any: ...
def SelectAllClusters() -> Any: ...
def SelectAllDynamicConstraints() -> Any: ...
def SelectAllFluids() -> Any: ...
def SelectAllFollicles() -> Any: ...
def SelectAllFurs() -> Any: ...
def SelectAllGeometry() -> Any: ...
def SelectAllHairSystem() -> Any: ...
def SelectAllIKHandles() -> Any: ...
def SelectAllImagePlanes() -> Any: ...
def SelectAllInput() -> Any: ...
def SelectAllJoints() -> Any: ...
def SelectAllLattices() -> Any: ...
def SelectAllLights() -> Any: ...
def SelectAllMarkingMenu() -> Any: ...
def SelectAllMarkingMenuPopDown() -> Any: ...
def SelectAllNCloths() -> Any: ...
def SelectAllNParticles() -> Any: ...
def SelectAllNRigids() -> Any: ...
def SelectAllNURBSCurves() -> Any: ...
def SelectAllNURBSSurfaces() -> Any: ...
def SelectAllOutput() -> Any: ...
def SelectAllParticles() -> Any: ...
def SelectAllPolygonGeometry() -> Any: ...
def SelectAllRigidBodies() -> Any: ...
def SelectAllRigidConstraints() -> Any: ...
def SelectAllSculptObjects() -> Any: ...
def SelectAllStrokes() -> Any: ...
def SelectAllSubdivGeometry() -> Any: ...
def SelectAllTransforms() -> Any: ...
def SelectAllWires() -> Any: ...
def SelectBorderEdgeTool() -> Any: ...
def SelectBrushNames() -> Any: ...
def SelectCVSelectionBoundary() -> Any: ...
def SelectCVsMask() -> Any: ...
def SelectComponentToolMarkingMenu() -> Any: ...
def SelectComponentToolMarkingMenuPopDown() -> Any: ...
def SelectContainerContents() -> Any: ...
def SelectContiguousEdges() -> Any: ...
def SelectContiguousEdgesOptions() -> Any: ...
def SelectCurveCVsAll() -> Any: ...
def SelectCurveCVsFirst() -> Any: ...
def SelectCurveCVsLast() -> Any: ...
def SelectCurvePointsMask() -> Any: ...
def SelectEdgeLoop() -> Any: ...
def SelectEdgeLoopSp() -> Any: ...
def SelectEdgeMask() -> Any: ...
def SelectEdgeRing() -> Any: ...
def SelectEdgeRingSp() -> Any: ...
def SelectFacePath() -> Any: ...
def SelectFacetMask() -> Any: ...
def SelectHierarchy() -> Any: ...
def SelectHullsMask() -> Any: ...
def SelectIsolate() -> Any: ...
def SelectLightsIlluminatingObject() -> Any: ...
def SelectLightsShadowingObject() -> Any: ...
def SelectLinesMask() -> Any: ...
def SelectMaskToolMarkingMenu() -> Any: ...
def SelectMaskToolMarkingMenuPopDown() -> Any: ...
def SelectMeshUVShell() -> Any: ...
def SelectMultiComponentMask() -> Any: ...
def SelectNextIntermediatObject() -> Any: ...
def SelectNextKey() -> Any: ...
def SelectNone() -> Any: ...
def SelectObjectsIlluminatedByLight() -> Any: ...
def SelectObjectsShadowedByLight() -> Any: ...
def SelectPointsMask() -> Any: ...
def SelectPolygonSelectionBoundary() -> Any: ...
def SelectPolygonToolMarkingMenu() -> Any: ...
def SelectPolygonToolMarkingMenuPopDown() -> Any: ...
def SelectPreviousKey() -> Any: ...
def SelectPreviousObjects3dsMax() -> Any: ...
def SelectPreviousObjectsFlame() -> Any: ...
def SelectPreviousObjectsFlare() -> Any: ...
def SelectPreviousObjectsMotionBuilder() -> Any: ...
def SelectPreviousObjectsMudbox() -> Any: ...
def SelectSharedColorInstances() -> Any: ...
def SelectSharedUVInstances() -> Any: ...
def SelectShortestEdgePathTool() -> Any: ...
def SelectSimilar() -> Any: ...
def SelectSimilarOptions() -> Any: ...
def SelectSurfaceBorder() -> Any: ...
def SelectSurfaceBorderOptions() -> Any: ...
def SelectSurfacePointsMask() -> Any: ...
def SelectTextureReferenceObject() -> Any: ...
def SelectTimeWarp() -> Any: ...
def SelectToggleMode() -> Any: ...
def SelectTool() -> Any: ...
def SelectToolMarkingMenu() -> Any: ...
def SelectToolMarkingMenuPopDown() -> Any: ...
def SelectToolOptionsMarkingMenu() -> Any: ...
def SelectToolOptionsMarkingMenuPopDown() -> Any: ...
def SelectUVBackFacingComponents() -> Any: ...
def SelectUVBorder() -> Any: ...
def SelectUVBorderComponents() -> Any: ...
def SelectUVFrontFacingComponents() -> Any: ...
def SelectUVMask() -> Any: ...
def SelectUVNonOverlappingComponents() -> Any: ...
def SelectUVNonOverlappingComponentsPerObject() -> Any: ...
def SelectUVOverlappingComponents() -> Any: ...
def SelectUVOverlappingComponentsPerObject() -> Any: ...
def SelectUVShell() -> Any: ...
def SelectUVTool() -> Any: ...
def SelectUnmappedFaces() -> Any: ...
def SelectVertexFaceMask() -> Any: ...
def SelectVertexMask() -> Any: ...
def SendAsNewScene3dsMax() -> Any: ...
def SendAsNewSceneFlame() -> Any: ...
def SendAsNewSceneFlare() -> Any: ...
def SendAsNewSceneMotionBuilder() -> Any: ...
def SendAsNewSceneMudbox() -> Any: ...
def SeparatePolygon() -> Any: ...
def SequenceEditor() -> Any: ...
def SetActiveKey() -> Any: ...
def SetAlignTool() -> Any: ...
def SetAsCombinationTarget() -> Any: ...
def SetAsCombinationTargetOptions() -> Any: ...
def SetBreakdownKey() -> Any: ...
def SetBreakdownKeyOptions() -> Any: ...
def SetCMCAmbient() -> Any: ...
def SetCMCAmbientDiffuse() -> Any: ...
def SetCMCDiffuse() -> Any: ...
def SetCMCEmission() -> Any: ...
def SetCMCNone() -> Any: ...
def SetCMCSpecular() -> Any: ...
def SetCurrentColorSet() -> Any: ...
def SetCurrentUVSet() -> Any: ...
def SetCutSewUVTool() -> Any: ...
def SetDefaultManipMove() -> Any: ...
def SetDefaultManipNone() -> Any: ...
def SetDefaultManipRotate() -> Any: ...
def SetDefaultManipScale() -> Any: ...
def SetDefaultManipTransform() -> Any: ...
def SetDrivenKey() -> Any: ...
def SetEditor() -> Any: ...
def SetExclusiveToCamera() -> Any: ...
def SetFluidAttrFromCurve() -> Any: ...
def SetFluidAttrFromCurveOptions() -> Any: ...
def SetFocusToCommandLine() -> Any: ...
def SetFocusToNumericInputLine() -> Any: ...
def SetFullBodyIKKeys() -> Any: ...
def SetFullBodyIKKeysAll() -> Any: ...
def SetFullBodyIKKeysBodyPart() -> Any: ...
def SetFullBodyIKKeysKeyToPin() -> Any: ...
def SetFullBodyIKKeysOptions() -> Any: ...
def SetFullBodyIKKeysSelected() -> Any: ...
def SetHairRestPositionFromCurrent() -> Any: ...
def SetHairRestPositionFromStart() -> Any: ...
def SetHairStartPositionFromCurrent() -> Any: ...
def SetHairStartPositionFromRest() -> Any: ...
def SetHiddenFromCamera() -> Any: ...
def SetIKFKKeyframe() -> Any: ...
def SetInitialState() -> Any: ...
def SetInitialStateOptions() -> Any: ...
def SetKey() -> Any: ...
def SetKeyAnimated() -> Any: ...
def SetKeyOptions() -> Any: ...
def SetKeyPath() -> Any: ...
def SetKeyRotate() -> Any: ...
def SetKeyScale() -> Any: ...
def SetKeyTranslate() -> Any: ...
def SetKeyVertexColor() -> Any: ...
def SetKeyframeForVertexColor() -> Any: ...
def SetMBSAdd() -> Any: ...
def SetMBSAverage() -> Any: ...
def SetMBSDivide() -> Any: ...
def SetMBSModulate2() -> Any: ...
def SetMBSMultiply() -> Any: ...
def SetMBSOverwrite() -> Any: ...
def SetMBSSubtract() -> Any: ...
def SetMaxInfluences() -> Any: ...
def SetMeshAmplifyTool() -> Any: ...
def SetMeshBulgeTool() -> Any: ...
def SetMeshCloneTargetTool() -> Any: ...
def SetMeshEraseTool() -> Any: ...
def SetMeshFillTool() -> Any: ...
def SetMeshFlattenTool() -> Any: ...
def SetMeshFoamyTool() -> Any: ...
def SetMeshFreezeTool() -> Any: ...
def SetMeshGrabTool() -> Any: ...
def SetMeshGrabUVTool() -> Any: ...
def SetMeshImprintTool() -> Any: ...
def SetMeshKnifeTool() -> Any: ...
def SetMeshMaskTool() -> Any: ...
def SetMeshPinchTool() -> Any: ...
def SetMeshRelaxTool() -> Any: ...
def SetMeshRepeatTool() -> Any: ...
def SetMeshScrapeTool() -> Any: ...
def SetMeshSculptTool() -> Any: ...
def SetMeshSmearTool() -> Any: ...
def SetMeshSmoothTargetTool() -> Any: ...
def SetMeshSmoothTool() -> Any: ...
def SetMeshSprayTool() -> Any: ...
def SetMeshWaxTool() -> Any: ...
def SetNClothStartFromMesh() -> Any: ...
def SetNormalAngle() -> Any: ...
def SetPassiveKey() -> Any: ...
def SetPreferredAngle() -> Any: ...
def SetPreferredAngleOptions() -> Any: ...
def SetProject() -> Any: ...
def SetReFormTool() -> Any: ...
def SetRestPosition() -> Any: ...
def SetRigidBodyCollision() -> Any: ...
def SetRigidBodyInterpenetration() -> Any: ...
def SetShrinkWrapInnerObject() -> Any: ...
def SetShrinkWrapTarget() -> Any: ...
def SetSnapTogetherTool() -> Any: ...
def SetSnapTogetherToolOptions() -> Any: ...
def SetStrokeControlCurves() -> Any: ...
def SetTimecode() -> Any: ...
def SetToFaceNormals() -> Any: ...
def SetToFaceNormalsOptions() -> Any: ...
def SetVertexNormal() -> Any: ...
def SetVertexNormalOptions() -> Any: ...
def SetWireframeColor() -> Any: ...
def SetWorkingFrame() -> Any: ...
def SetupAnimatedDisplacement() -> Any: ...
def SewUVs() -> Any: ...
def SewUVs3D() -> Any: ...
def SewUVsWithoutHotkey() -> Any: ...
def ShadingGroupAttributeEditor() -> Any: ...
def ShapeEditor() -> Any: ...
def ShapeEditorDuplicateTarget() -> Any: ...
def ShapeEditorNewGroup() -> Any: ...
def ShapeEditorSelectNone() -> Any: ...
def ShareColorInstances() -> Any: ...
def ShareOneBrush() -> Any: ...
def ShareUVInstances() -> Any: ...
def Shatter() -> Any: ...
def ShatterOptions() -> Any: ...
def ShelfPreferencesWindow() -> Any: ...
def ShortPolygonNormals() -> Any: ...
def ShotPlaylistEditor() -> Any: ...
def ShowAll() -> Any: ...
def ShowAllComponents() -> Any: ...
def ShowAllEditedComponents() -> Any: ...
def ShowAllLabels() -> Any: ...
def ShowAllPolyComponents() -> Any: ...
def ShowAllUI() -> Any: ...
def ShowAnimationUI() -> Any: ...
def ShowAttributeEditorOrChannelBox() -> Any: ...
def ShowBaseWire() -> Any: ...
def ShowBatchRender() -> Any: ...
def ShowBoundingBox() -> Any: ...
def ShowCameraManipulators() -> Any: ...
def ShowCameras() -> Any: ...
def ShowClusters() -> Any: ...
def ShowControllers() -> Any: ...
def ShowDeformers() -> Any: ...
def ShowDeformingGeometry() -> Any: ...
def ShowDynamicConstraints() -> Any: ...
def ShowDynamicsUI() -> Any: ...
def ShowFluids() -> Any: ...
def ShowFollicles() -> Any: ...
def ShowFur() -> Any: ...
def ShowGeometry() -> Any: ...
def ShowHairSystems() -> Any: ...
def ShowHotbox() -> Any: ...
def ShowIKHandles() -> Any: ...
def ShowJoints() -> Any: ...
def ShowKinematics() -> Any: ...
def ShowLastHidden() -> Any: ...
def ShowLattices() -> Any: ...
def ShowLightManipulators() -> Any: ...
def ShowLights() -> Any: ...
def ShowManipulatorTool() -> Any: ...
def ShowManipulators() -> Any: ...
def ShowMarkers() -> Any: ...
def ShowMeshAmplifyToolOptions() -> Any: ...
def ShowMeshBulgeToolOptions() -> Any: ...
def ShowMeshCloneTargetToolOptions() -> Any: ...
def ShowMeshEraseToolOptions() -> Any: ...
def ShowMeshFillToolOptions() -> Any: ...
def ShowMeshFlattenToolOptions() -> Any: ...
def ShowMeshFoamyToolOptions() -> Any: ...
def ShowMeshFreezeToolOptions() -> Any: ...
def ShowMeshGrabToolOptions() -> Any: ...
def ShowMeshGrabUVToolOptions() -> Any: ...
def ShowMeshImprintToolOptions() -> Any: ...
def ShowMeshKnifeToolOptions() -> Any: ...
def ShowMeshMaskToolOptions() -> Any: ...
def ShowMeshPinchToolOptions() -> Any: ...
def ShowMeshRelaxToolOptions() -> Any: ...
def ShowMeshRepeatToolOptions() -> Any: ...
def ShowMeshScrapeToolOptions() -> Any: ...
def ShowMeshSculptToolOptions() -> Any: ...
def ShowMeshSmearToolOptions() -> Any: ...
def ShowMeshSmoothTargetToolOptions() -> Any: ...
def ShowMeshSmoothToolOptions() -> Any: ...
def ShowMeshSprayToolOptions() -> Any: ...
def ShowMeshWaxToolOptions() -> Any: ...
def ShowModelingUI() -> Any: ...
def ShowNCloths() -> Any: ...
def ShowNParticles() -> Any: ...
def ShowNRigids() -> Any: ...
def ShowNURBSCurves() -> Any: ...
def ShowNURBSSurfaces() -> Any: ...
def ShowNonlinears() -> Any: ...
def ShowObjectGeometry() -> Any: ...
def ShowPlanes() -> Any: ...
def ShowPolygonSurfaces() -> Any: ...
def ShowRenderingUI() -> Any: ...
def ShowResultsOptions() -> Any: ...
def ShowRiggingUI() -> Any: ...
def ShowSculptObjects() -> Any: ...
def ShowSelectedObjects() -> Any: ...
def ShowShadingGroupAttributeEditor() -> Any: ...
def ShowSmoothSkinInfluences() -> Any: ...
def ShowStrokeControlCurves() -> Any: ...
def ShowStrokePathCurves() -> Any: ...
def ShowStrokes() -> Any: ...
def ShowSubdivSurfaces() -> Any: ...
def ShowSurfaceCVs() -> Any: ...
def ShowTexturePlacements() -> Any: ...
def ShowUIElements() -> Any: ...
def ShowWhatsNew() -> Any: ...
def ShowWrapInfluences() -> Any: ...
def ShrinkLoopPolygonSelectionRegion() -> Any: ...
def ShrinkPolygonSelectionRegion() -> Any: ...
def SimplifyCurve() -> Any: ...
def SimplifyCurveOptions() -> Any: ...
def SimplifyStrokePathCurves() -> Any: ...
def Sine() -> Any: ...
def SineOptions() -> Any: ...
def SinglePerspectiveViewLayout() -> Any: ...
def SingleViewArrangement() -> Any: ...
def SlideEdgeTool() -> Any: ...
def SlideEdgeToolOptions() -> Any: ...
def Smoke() -> Any: ...
def SmokeOptions() -> Any: ...
def SmoothBindSkin() -> Any: ...
def SmoothBindSkinOptions() -> Any: ...
def SmoothCurve() -> Any: ...
def SmoothCurveOptions() -> Any: ...
def SmoothHairCurves() -> Any: ...
def SmoothHairCurvesOptions() -> Any: ...
def SmoothPolygon() -> Any: ...
def SmoothPolygonOptions() -> Any: ...
def SmoothProxy() -> Any: ...
def SmoothProxyOptions() -> Any: ...
def SmoothSkinWeights() -> Any: ...
def SmoothSkinWeightsOptions() -> Any: ...
def SmoothTangent() -> Any: ...
def SmoothingDisplayShowBoth() -> Any: ...
def SmoothingDisplayToggle() -> Any: ...
def SmoothingLevelDecrease() -> Any: ...
def SmoothingLevelIncrease() -> Any: ...
def Snap2PointsTo2Points() -> Any: ...
def Snap2PointsTo2PointsOptions() -> Any: ...
def Snap3PointsTo3Points() -> Any: ...
def Snap3PointsTo3PointsOptions() -> Any: ...
def SnapKeys() -> Any: ...
def SnapKeysOptions() -> Any: ...
def SnapPointToPoint() -> Any: ...
def SnapPointToPointOptions() -> Any: ...
def SnapRotation() -> Any: ...
def SnapTimeToSelection() -> Any: ...
def SnapToCurve() -> Any: ...
def SnapToCurvePress() -> Any: ...
def SnapToCurveRelease() -> Any: ...
def SnapToGrid() -> Any: ...
def SnapToGridPress() -> Any: ...
def SnapToGridRelease() -> Any: ...
def SnapToMeshCenter() -> Any: ...
def SnapToMeshCenterPress() -> Any: ...
def SnapToMeshCenterRelease() -> Any: ...
def SnapToPixel() -> Any: ...
def SnapToPoint() -> Any: ...
def SnapToPointPress() -> Any: ...
def SnapToPointRelease() -> Any: ...
def SoftModDeformer() -> Any: ...
def SoftModDeformerOptions() -> Any: ...
def SoftModTool() -> Any: ...
def SoftModToolOptions() -> Any: ...
def Solidify() -> Any: ...
def SolidifyOptions() -> Any: ...
def SoloLastOutput() -> Any: ...
def SoloMaterial() -> Any: ...
def SplitEdge() -> Any: ...
def SplitEdgeRingTool() -> Any: ...
def SplitEdgeRingToolOptions() -> Any: ...
def SplitMeshWithProjectedCurve() -> Any: ...
def SplitMeshWithProjectedCurveOptions() -> Any: ...
def SplitPolygonTool() -> Any: ...
def SplitPolygonToolOptions() -> Any: ...
def SplitUV() -> Any: ...
def SplitVertex() -> Any: ...
def SpreadSheetEditor() -> Any: ...
def SquareSurface() -> Any: ...
def SquareSurfaceOptions() -> Any: ...
def Squash() -> Any: ...
def SquashOptions() -> Any: ...
def StitchEdgesTool() -> Any: ...
def StitchEdgesToolOptions() -> Any: ...
def StitchSurfacePoints() -> Any: ...
def StitchSurfacePointsOptions() -> Any: ...
def StitchTogether() -> Any: ...
def StitchTogetherOptions() -> Any: ...
def StraightenCurves() -> Any: ...
def StraightenCurvesOptions() -> Any: ...
def StraightenUVBorder() -> Any: ...
def StraightenUVBorderOptions() -> Any: ...
def SubdCutUVs() -> Any: ...
def SubdivProxy() -> Any: ...
def SubdivProxyOptions() -> Any: ...
def SubdivSmoothnessFine() -> Any: ...
def SubdivSmoothnessFineOptions() -> Any: ...
def SubdivSmoothnessHull() -> Any: ...
def SubdivSmoothnessHullOptions() -> Any: ...
def SubdivSmoothnessMedium() -> Any: ...
def SubdivSmoothnessMediumOptions() -> Any: ...
def SubdivSmoothnessRough() -> Any: ...
def SubdivSmoothnessRoughOptions() -> Any: ...
def SubdivSurfaceCleanTopology() -> Any: ...
def SubdivSurfaceHierarchyMode() -> Any: ...
def SubdivSurfaceMatchTopology() -> Any: ...
def SubdivSurfacePolygonProxyMode() -> Any: ...
def SubdivToNURBS() -> Any: ...
def SubdivToNURBSOptions() -> Any: ...
def SubdividePolygon() -> Any: ...
def SubdividePolygonOptions() -> Any: ...
def SubstituteGeometry() -> Any: ...
def SubstituteGeometryOptions() -> Any: ...
def SurfaceBooleanIntersectTool() -> Any: ...
def SurfaceBooleanIntersectToolOptions() -> Any: ...
def SurfaceBooleanSubtractTool() -> Any: ...
def SurfaceBooleanSubtractToolOptions() -> Any: ...
def SurfaceBooleanUnionTool() -> Any: ...
def SurfaceBooleanUnionToolOptions() -> Any: ...
def SurfaceEditingTool() -> Any: ...
def SurfaceEditingToolOptions() -> Any: ...
def SurfaceFlow() -> Any: ...
def SurfaceFlowOptions() -> Any: ...
def SwapBlendShape() -> Any: ...
def SwapBlendShapeOptions() -> Any: ...
def SwapBufferCurve() -> Any: ...
def Symmetrize() -> Any: ...
def SymmetrizeSelection() -> Any: ...
def SymmetrizeUV() -> Any: ...
def SymmetrizeUVBrushSizeOff() -> Any: ...
def SymmetrizeUVBrushSizeOn() -> Any: ...
def SymmetrizeUVOptions() -> Any: ...
def TagAsController() -> Any: ...
def TagAsControllerParent() -> Any: ...
def TangentAuto() -> Any: ...
def TangentAutoCustom() -> Any: ...
def TangentAutoCustomOptions() -> Any: ...
def TangentAutoEase() -> Any: ...
def TangentAutoMix() -> Any: ...
def TangentClamped() -> Any: ...
def TangentConstraint() -> Any: ...
def TangentConstraintOptions() -> Any: ...
def TangentFixed() -> Any: ...
def TangentFlat() -> Any: ...
def TangentLinear() -> Any: ...
def TangentPlateau() -> Any: ...
def TangentSpline() -> Any: ...
def TangentStepNext() -> Any: ...
def TangentStepped() -> Any: ...
def TanimLayer(*args, **kwargs) -> Any: ...
def TemplateBrushSettings() -> Any: ...
def TemplateObject() -> Any: ...
def Tension() -> Any: ...
def TensionOptions() -> Any: ...
def TesselateSubdivSurface() -> Any: ...
def TesselateSubdivSurfaceOptions() -> Any: ...
def TestTexture() -> Any: ...
def TestTextureOptions() -> Any: ...
def TexSculptActivateBrushSize() -> Any: ...
def TexSculptActivateBrushStrength() -> Any: ...
def TexSculptDeactivateBrushSize() -> Any: ...
def TexSculptDeactivateBrushStrength() -> Any: ...
def TexSculptInvertPin() -> Any: ...
def TexSculptUnpinAll() -> Any: ...
def TexSewActivateBrushSize() -> Any: ...
def TexSewDeactivateBrushSize() -> Any: ...
def TextureCentricUVLinkingEditor() -> Any: ...
def TextureToGeometry() -> Any: ...
def TextureToGeometryOptions() -> Any: ...
def TextureViewWindow() -> Any: ...
def ThreeBottomSplitViewArrangement() -> Any: ...
def ThreeLeftSplitViewArrangement() -> Any: ...
def ThreePointArcTool() -> Any: ...
def ThreePointArcToolOptions() -> Any: ...
def ThreeRightSplitViewArrangement() -> Any: ...
def ThreeTopSplitViewArrangement() -> Any: ...
def TimeDraggerToolActivate() -> Any: ...
def TimeDraggerToolDeactivate() -> Any: ...
def TimeEditorAddToSoloSelectedTracks() -> Any: ...
def TimeEditorClipHoldToggle() -> Any: ...
def TimeEditorClipLoopToggle() -> Any: ...
def TimeEditorClipRazor() -> Any: ...
def TimeEditorClipResetTiming() -> Any: ...
def TimeEditorClipScaleEnd() -> Any: ...
def TimeEditorClipScaleStart() -> Any: ...
def TimeEditorClipScaleToggle() -> Any: ...
def TimeEditorClipTrimEnd() -> Any: ...
def TimeEditorClipTrimStart() -> Any: ...
def TimeEditorClipTrimToggle() -> Any: ...
def TimeEditorCopyClips() -> Any: ...
def TimeEditorCreateAdditiveLayer() -> Any: ...
def TimeEditorCreateAnimTracksAtEnd() -> Any: ...
def TimeEditorCreateAudioClip() -> Any: ...
def TimeEditorCreateAudioTracksAtEnd() -> Any: ...
def TimeEditorCreateClip() -> Any: ...
def TimeEditorCreateClipOptions() -> Any: ...
def TimeEditorCreateGroupFromSelection() -> Any: ...
def TimeEditorCreateOverrideLayer() -> Any: ...
def TimeEditorCreatePoseClip() -> Any: ...
def TimeEditorCreatePoseClipOptions() -> Any: ...
def TimeEditorCutClips() -> Any: ...
def TimeEditorDeleteClips() -> Any: ...
def TimeEditorDeleteSelectedTracks() -> Any: ...
def TimeEditorExplodeGroup() -> Any: ...
def TimeEditorExportSelection() -> Any: ...
def TimeEditorExportSelectionOpt() -> Any: ...
def TimeEditorFbxExportAll() -> Any: ...
def TimeEditorFrameAll() -> Any: ...
def TimeEditorFrameCenterView() -> Any: ...
def TimeEditorFramePlaybackRange() -> Any: ...
def TimeEditorFrameSelected() -> Any: ...
def TimeEditorGhostTrackToggle() -> Any: ...
def TimeEditorImportAnimation() -> Any: ...
def TimeEditorKeepTransitionsTogglePress() -> Any: ...
def TimeEditorKeepTransitionsToggleRelease() -> Any: ...
def TimeEditorMuteSelectedTracks() -> Any: ...
def TimeEditorOpenContentBrowser() -> Any: ...
def TimeEditorPasteClips() -> Any: ...
def TimeEditorRealTimeRefreshToggle() -> Any: ...
def TimeEditorRippleEditTogglePress() -> Any: ...
def TimeEditorRippleEditToggleRelease() -> Any: ...
def TimeEditorSceneAuthoringToggle() -> Any: ...
def TimeEditorSetKey() -> Any: ...
def TimeEditorSetZeroKey() -> Any: ...
def TimeEditorSoloSelectedTracks() -> Any: ...
def TimeEditorToggleMuteSelectedTracks() -> Any: ...
def TimeEditorToggleSnapToClipPress() -> Any: ...
def TimeEditorToggleSnapToClipRelease() -> Any: ...
def TimeEditorToggleSoloSelectedTracks() -> Any: ...
def TimeEditorToggleTimeCursorPress() -> Any: ...
def TimeEditorToggleTimeCursorRelease() -> Any: ...
def TimeEditorUnmuteAllTracks() -> Any: ...
def TimeEditorUnmuteSelectedTracks() -> Any: ...
def TimeEditorUnsoloAllTracks() -> Any: ...
def TimeEditorWindow() -> Any: ...
def ToggleAnimationDetails() -> Any: ...
def ToggleAttributeEditor() -> Any: ...
def ToggleAutoActivateBodyPart() -> Any: ...
def ToggleAutoFrame() -> Any: ...
def ToggleAutoFrameTime() -> Any: ...
def ToggleAutoSmooth() -> Any: ...
def ToggleBackfaceCulling() -> Any: ...
def ToggleBackfaceGeometry() -> Any: ...
def ToggleBookmarkVisibility() -> Any: ...
def ToggleBorderEdges() -> Any: ...
def ToggleCVs() -> Any: ...
def ToggleCameraNames() -> Any: ...
def ToggleCapsLockDisplay() -> Any: ...
def ToggleChannelBox() -> Any: ...
def ToggleChannelsLayers() -> Any: ...
def ToggleCharacterControls() -> Any: ...
def ToggleColorFeedback() -> Any: ...
def ToggleCommandLine() -> Any: ...
def ToggleCompIDs() -> Any: ...
def ToggleContainerCentric() -> Any: ...
def ToggleCreaseEdges() -> Any: ...
def ToggleCreaseVertices() -> Any: ...
def ToggleCreateNurbsPrimitivesAsTool() -> Any: ...
def ToggleCreatePolyPrimitivesAsTool() -> Any: ...
def ToggleCullingVertices() -> Any: ...
def ToggleCurrentContainerHud() -> Any: ...
def ToggleCurrentFrame() -> Any: ...
def ToggleCustomNURBSComponents() -> Any: ...
def ToggleDisplacement() -> Any: ...
def ToggleDisplayColorsAttr() -> Any: ...
def ToggleDisplayGradient() -> Any: ...
def ToggleEdgeIDs() -> Any: ...
def ToggleEdgeMetadata() -> Any: ...
def ToggleEditPivot() -> Any: ...
def ToggleEditPoints() -> Any: ...
def ToggleEffectsMeshDisplay() -> Any: ...
def ToggleEvaluationManagerVisibility() -> Any: ...
def ToggleFaceIDs() -> Any: ...
def ToggleFaceMetadata() -> Any: ...
def ToggleFaceNormalDisplay() -> Any: ...
def ToggleFaceNormals() -> Any: ...
def ToggleFastInteraction() -> Any: ...
def ToggleFkIk() -> Any: ...
def ToggleFocalLength() -> Any: ...
def ToggleFrameRate() -> Any: ...
def ToggleFullScreenMode() -> Any: ...
def ToggleGrid() -> Any: ...
def ToggleHelpLine() -> Any: ...
def ToggleHikDetails() -> Any: ...
def ToggleHoleFaces() -> Any: ...
def ToggleHulls() -> Any: ...
def ToggleIKAllowRotation() -> Any: ...
def ToggleIKHandleSnap() -> Any: ...
def ToggleIKSolvers() -> Any: ...
def ToggleImagePlaneOptionCmd() -> Any: ...
def ToggleInViewEditor() -> Any: ...
def ToggleInViewMessage() -> Any: ...
def ToggleIsolateSelect() -> Any: ...
def ToggleJointLabels() -> Any: ...
def ToggleKeepHardEdgeCulling() -> Any: ...
def ToggleKeepWireCulling() -> Any: ...
def ToggleLatticePoints() -> Any: ...
def ToggleLatticeShape() -> Any: ...
def ToggleLayerBar() -> Any: ...
def ToggleLocalRotationAxes() -> Any: ...
def ToggleMainMenubar() -> Any: ...
def ToggleMaterialLoadingDetailsVisibility() -> Any: ...
def ToggleMeshEdges() -> Any: ...
def ToggleMeshFaces() -> Any: ...
def ToggleMeshMaps() -> Any: ...
def ToggleMeshPoints() -> Any: ...
def ToggleMeshUVBorders() -> Any: ...
def ToggleMetadata() -> Any: ...
def ToggleModelEditorBars() -> Any: ...
def ToggleModelingToolkit() -> Any: ...
def ToggleMultiColorFeedback() -> Any: ...
def ToggleNormals() -> Any: ...
def ToggleNurbsCurvesOptionCmd() -> Any: ...
def ToggleNurbsPrimitivesAsToolExitOnComplete() -> Any: ...
def ToggleObjectDetails() -> Any: ...
def ToggleOppositeFlagOfSelectedShapes() -> Any: ...
def ToggleOriginAxis() -> Any: ...
def ToggleOutliner() -> Any: ...
def TogglePaintAtDepth() -> Any: ...
def TogglePaintOnPaintableObjects() -> Any: ...
def TogglePanZoomPress() -> Any: ...
def TogglePanZoomRelease() -> Any: ...
def TogglePanelMenubar() -> Any: ...
def ToggleParticleCount() -> Any: ...
def TogglePolyCount() -> Any: ...
def TogglePolyDisplayEdges() -> Any: ...
def TogglePolyDisplayHardEdges() -> Any: ...
def TogglePolyDisplayHardEdgesColor() -> Any: ...
def TogglePolyDisplayLimitToSelected() -> Any: ...
def TogglePolyDisplaySoftEdges() -> Any: ...
def TogglePolyNonPlanarFaceDisplay() -> Any: ...
def TogglePolyPrimitivesAsToolExitOnComplete() -> Any: ...
def TogglePolyUVsCreateShader() -> Any: ...
def TogglePolygonFaceCenters() -> Any: ...
def TogglePolygonFaceTriangles() -> Any: ...
def TogglePolygonFaceTrianglesDisplay() -> Any: ...
def TogglePolygonsOptionCmd() -> Any: ...
def ToggleProxyDisplay() -> Any: ...
def ToggleRangeSlider() -> Any: ...
def ToggleReflection() -> Any: ...
def ToggleRotationPivots() -> Any: ...
def ToggleScalePivots() -> Any: ...
def ToggleSceneTimecode() -> Any: ...
def ToggleSelectDetails() -> Any: ...
def ToggleSelectedLabels() -> Any: ...
def ToggleSelectionHandles() -> Any: ...
def ToggleShelf() -> Any: ...
def ToggleShowBufferCurves() -> Any: ...
def ToggleShowResults() -> Any: ...
def ToggleSoftEdges() -> Any: ...
def ToggleStatusLine() -> Any: ...
def ToggleSubdDetails() -> Any: ...
def ToggleSurfaceFaceCenters() -> Any: ...
def ToggleSurfaceOrigin() -> Any: ...
def ToggleSymmetryDisplay() -> Any: ...
def ToggleTangentDisplay() -> Any: ...
def ToggleTextureBorder() -> Any: ...
def ToggleTextureBorderEdges() -> Any: ...
def ToggleTimeSlider() -> Any: ...
def ToggleToolMessage() -> Any: ...
def ToggleToolSettings() -> Any: ...
def ToggleToolbox() -> Any: ...
def ToggleUIElements() -> Any: ...
def ToggleUVDistortion() -> Any: ...
def ToggleUVEditorIsolateSelectHUD() -> Any: ...
def ToggleUVEditorUVPositionHUD() -> Any: ...
def ToggleUVEditorUVStatisticsHUD() -> Any: ...
def ToggleUVEditorUVStatisticsHUDOptions() -> Any: ...
def ToggleUVIsolateViewSelected() -> Any: ...
def ToggleUVShellBorder() -> Any: ...
def ToggleUVTextureImage() -> Any: ...
def ToggleUVs() -> Any: ...
def ToggleUnsharedUVs() -> Any: ...
def ToggleUseDefaultMaterial() -> Any: ...
def ToggleVertIDs() -> Any: ...
def ToggleVertMetadata() -> Any: ...
def ToggleVertexNormalDisplay() -> Any: ...
def ToggleVertices() -> Any: ...
def ToggleViewAxis() -> Any: ...
def ToggleViewCube() -> Any: ...
def ToggleViewportRenderer() -> Any: ...
def ToggleVisibilityAndKeepSelection() -> Any: ...
def ToggleVisibilityAndKeepSelectionOptions() -> Any: ...
def ToggleWireframeInArtisan() -> Any: ...
def ToggleWireframeOnShadedCmd() -> Any: ...
def ToggleZoomInMode() -> Any: ...
def ToolSettingsWindow() -> Any: ...
def TrackTool() -> Any: ...
def TransferAttributeValues() -> Any: ...
def TransferAttributeValuesOptions() -> Any: ...
def TransferAttributes() -> Any: ...
def TransferShadingSets() -> Any: ...
def TransferVertexOrder() -> Any: ...
def TransformNoSelectOffTool() -> Any: ...
def TransformNoSelectOnTool() -> Any: ...
def TransformPolygonComponent() -> Any: ...
def TransformPolygonComponentOptions() -> Any: ...
def TranslateToolMarkingMenu() -> Any: ...
def TranslateToolMarkingMenuPopDown() -> Any: ...
def TranslateToolWithSnapMarkingMenu() -> Any: ...
def TranslateToolWithSnapMarkingMenuPopDown() -> Any: ...
def TransplantHair() -> Any: ...
def TransplantHairOptions() -> Any: ...
def TrenderSetupStates(*args, **kwargs) -> Any: ...
def Triangulate() -> Any: ...
def TrimTool() -> Any: ...
def TrimToolOptions() -> Any: ...
def TruncateHairCache() -> Any: ...
def TumbleTool() -> Any: ...
def Turbulence() -> Any: ...
def TurbulenceOptions() -> Any: ...
def Twist() -> Any: ...
def TwistOptions() -> Any: ...
def TwoPointArcTool() -> Any: ...
def TwoPointArcToolOptions() -> Any: ...
def TwoSideBySideViewArrangement() -> Any: ...
def TwoStackedViewArrangement() -> Any: ...
def U3DBrushPressureOff() -> Any: ...
def U3DBrushPressureOn() -> Any: ...
def U3DBrushSizeOff() -> Any: ...
def U3DBrushSizeOn() -> Any: ...
def UIModeMarkingMenu() -> Any: ...
def UIModeMarkingMenuPopDown() -> Any: ...
def UVAutomaticProjection() -> Any: ...
def UVAutomaticProjectionOptions() -> Any: ...
def UVCameraBasedProjection() -> Any: ...
def UVCameraBasedProjectionOptions() -> Any: ...
def UVCentricUVLinkingEditor() -> Any: ...
def UVContourStretchProjection() -> Any: ...
def UVContourStretchProjectionOptions() -> Any: ...
def UVCreateSnapshot() -> Any: ...
def UVCylindricProjection() -> Any: ...
def UVCylindricProjectionOptions() -> Any: ...
def UVEditorFrameAll() -> Any: ...
def UVEditorFrameSelected() -> Any: ...
def UVEditorInvertPin() -> Any: ...
def UVEditorResetAllToDefault() -> Any: ...
def UVEditorToggleTextureBorderDisplay() -> Any: ...
def UVEditorUnpinAll() -> Any: ...
def UVGatherShells() -> Any: ...
def UVIsolateLoadSet() -> Any: ...
def UVNormalBasedProjection() -> Any: ...
def UVNormalBasedProjectionOptions() -> Any: ...
def UVOrientShells() -> Any: ...
def UVPin() -> Any: ...
def UVPinOptions() -> Any: ...
def UVPlanarProjection() -> Any: ...
def UVPlanarProjectionOptions() -> Any: ...
def UVSetEditor() -> Any: ...
def UVSnapTogether() -> Any: ...
def UVSnapTogetherOptions() -> Any: ...
def UVSphericalProjection() -> Any: ...
def UVSphericalProjectionOptions() -> Any: ...
def UVStackSimilarShells() -> Any: ...
def UVStackSimilarShellsOptions() -> Any: ...
def UVStraighten() -> Any: ...
def UVStraightenOptions() -> Any: ...
def UVUnstackShells() -> Any: ...
def UVUnstackShellsOptions() -> Any: ...
def UncreaseSubdivSurface() -> Any: ...
def Undo() -> Any: ...
def UndoCanvas() -> Any: ...
def UndoViewChange() -> Any: ...
def UnfoldPackUVs3DInCurrentTile() -> Any: ...
def UnfoldPackUVs3DInEmptyTile() -> Any: ...
def UnfoldUV() -> Any: ...
def UnfoldUVOptions() -> Any: ...
def Ungroup() -> Any: ...
def UngroupOptions() -> Any: ...
def Uniform() -> Any: ...
def UniformOptions() -> Any: ...
def UnifyTangents() -> Any: ...
def UnitizeUVs() -> Any: ...
def UnitizeUVsOptions() -> Any: ...
def UniversalManip() -> Any: ...
def UniversalManipOptions() -> Any: ...
def UnlockContainer() -> Any: ...
def UnlockCurveLength() -> Any: ...
def UnlockNormals() -> Any: ...
def UnmirrorSmoothProxy() -> Any: ...
def UnmirrorSmoothProxyOptions() -> Any: ...
def Unparent() -> Any: ...
def UnparentOptions() -> Any: ...
def UnpinSelection() -> Any: ...
def UnpublishAttributes() -> Any: ...
def UnpublishChildAnchor() -> Any: ...
def UnpublishNode() -> Any: ...
def UnpublishParentAnchor() -> Any: ...
def UnpublishRootTransform() -> Any: ...
def UntemplateObject() -> Any: ...
def UntrimSurfaces() -> Any: ...
def UntrimSurfacesOptions() -> Any: ...
def UpdateBindingSet() -> Any: ...
def UpdateBindingSetOptions() -> Any: ...
def UpdateBookmarkWithSelection() -> Any: ...
def UpdateCurrentScene3dsMax() -> Any: ...
def UpdateCurrentSceneFlame() -> Any: ...
def UpdateCurrentSceneFlare() -> Any: ...
def UpdateCurrentSceneMotionBuilder() -> Any: ...
def UpdateCurrentSceneMudbox() -> Any: ...
def UpdateEraseSurface() -> Any: ...
def UpdatePSDTextureItem() -> Any: ...
def UpdateReferenceSurface() -> Any: ...
def UpdateSnapshot() -> Any: ...
def UseHardwareShader() -> Any: ...
def UseSelectedEmitter() -> Any: ...
def VertexNormalEditTool() -> Any: ...
def ViewAlongAxisNegativeX() -> Any: ...
def ViewAlongAxisNegativeY() -> Any: ...
def ViewAlongAxisNegativeZ() -> Any: ...
def ViewAlongAxisX() -> Any: ...
def ViewAlongAxisY() -> Any: ...
def ViewAlongAxisZ() -> Any: ...
def ViewImage() -> Any: ...
def ViewSequence() -> Any: ...
def ViewportEnableSmoothing() -> Any: ...
def VisorWindow() -> Any: ...
def VisualizeMetadataOptions() -> Any: ...
def VolumeAxis() -> Any: ...
def VolumeAxisOptions() -> Any: ...
def VolumeSkinBinding() -> Any: ...
def VolumeSkinBindingOptions() -> Any: ...
def Vortex() -> Any: ...
def VortexOptions() -> Any: ...
def WalkTool() -> Any: ...
def WarpImage() -> Any: ...
def WarpImageOptions() -> Any: ...
def Wave() -> Any: ...
def WaveOptions() -> Any: ...
def WedgePolygon() -> Any: ...
def WedgePolygonOptions() -> Any: ...
def WeightHammer() -> Any: ...
def WeightedTangents() -> Any: ...
def WhatsNewHighlightingOff() -> Any: ...
def WhatsNewHighlightingOn() -> Any: ...
def WhatsNewStartupDialogOff() -> Any: ...
def WhatsNewStartupDialogOn() -> Any: ...
def WireDropoffLocator() -> Any: ...
def WireDropoffLocatorOptions() -> Any: ...
def WireTool() -> Any: ...
def WireToolOptions() -> Any: ...
def WrinkleTool() -> Any: ...
def WrinkleToolOptions() -> Any: ...
def XgCreateIgSplineEditor() -> Any: ...
def XgmCreateInteractiveGroomSplines() -> Any: ...
def XgmCreateInteractiveGroomSplinesOption() -> Any: ...
def XgmSetClumpBrushTool() -> Any: ...
def XgmSetClumpBrushToolOption() -> Any: ...
def XgmSetCombBrushTool() -> Any: ...
def XgmSetCombBrushToolOption() -> Any: ...
def XgmSetCutBrushTool() -> Any: ...
def XgmSetCutBrushToolOption() -> Any: ...
def XgmSetDensityBrushTool() -> Any: ...
def XgmSetDensityBrushToolOption() -> Any: ...
def XgmSetDirectionBrushTool() -> Any: ...
def XgmSetDirectionBrushToolOption() -> Any: ...
def XgmSetFreezeBrushTool() -> Any: ...
def XgmSetFreezeBrushToolOption() -> Any: ...
def XgmSetGrabBrushTool() -> Any: ...
def XgmSetGrabBrushToolOption() -> Any: ...
def XgmSetLengthBrushTool() -> Any: ...
def XgmSetLengthBrushToolOption() -> Any: ...
def XgmSetNoiseBrushTool() -> Any: ...
def XgmSetNoiseBrushToolOption() -> Any: ...
def XgmSetPartBrushTool() -> Any: ...
def XgmSetPartBrushToolOption() -> Any: ...
def XgmSetPlaceBrushTool() -> Any: ...
def XgmSetPlaceBrushToolOption() -> Any: ...
def XgmSetSelectBrushTool() -> Any: ...
def XgmSetSelectBrushToolOption() -> Any: ...
def XgmSetSmoothBrushTool() -> Any: ...
def XgmSetSmoothBrushToolOption() -> Any: ...
def XgmSetWidthBrushTool() -> Any: ...
def XgmSetWidthBrushToolOption() -> Any: ...
def XgmSplineCacheCreate() -> Any: ...
def XgmSplineCacheCreateOptions() -> Any: ...
def XgmSplineCacheDelete() -> Any: ...
def XgmSplineCacheDeleteNodesAhead() -> Any: ...
def XgmSplineCacheDeleteOptions() -> Any: ...
def XgmSplineCacheDisableSelectedCache() -> Any: ...
def XgmSplineCacheEnableSelectedCache() -> Any: ...
def XgmSplineCacheExport() -> Any: ...
def XgmSplineCacheExportOptions() -> Any: ...
def XgmSplineCacheImport() -> Any: ...
def XgmSplineCacheImportOptions() -> Any: ...
def XgmSplineCacheReplace() -> Any: ...
def XgmSplineCacheReplaceOptions() -> Any: ...
def XgmSplineGeometryConvert() -> Any: ...
def XgmSplinePresetExport() -> Any: ...
def XgmSplinePresetImport() -> Any: ...
def XgmSplineSelectConvertToFreeze() -> Any: ...
def XgmSplineSelectReplaceBySelectedFaces() -> Any: ...
def ZoomTool() -> Any: ...
def aaf2fcp(deleteFile: bool, dstPath: str, getFileName: int, progress: int, srcFile: str, terminate: int, waitCompletion: int) -> Any: ...
def about(query: bool, application: bool, apiVersion: bool, batch: bool, buildDirectory: bool, buildVariant: bool, cutIdentifier: bool, currentDate: bool, compositingManager: bool, connected: bool, codeset: bool, currentTime: bool, ctime: bool, customVersion: bool, customVersionClient: bool, customVersionMajor: bool, customVersionMinor: bool, customVersionString: bool, date: bool, environmentFile: bool, evalVersion: bool, file: bool, fontInfo: bool, helpDataDirectory: bool, ioVersion: bool, irix: bool, installedVersion: bool, linux64: bool, linux: bool, languageResources: bool, localizedResourceLocation: bool, ltVersion: bool, liveUpdate: bool, macOS: bool, majorVersion: bool, minorVersion: bool, ntOS: bool, operatingSystem: bool, operatingSystemVersion: bool, product: bool, preferences: bool, macOSppc: bool, patchVersion: bool, qtVersion: bool, tablet: bool, tabletMode: bool, uiLanguageIsLocalized: bool, uiLanguage: bool, uiLanguageForStartup: bool, uiLocaleLanguage: bool, version: bool, win64: bool, windows: bool, windowManager: bool, is64: bool, macOSx86: bool) -> Any: ...
def addAttr(edit: bool, query: bool, attributeType: str, binaryTag: str, cachedInternally: bool, category: List[str], disconnectBehaviour: int, dataType: List[str], defaultValue: float, enumName: str, exists: bool, fromPlugin: bool, hidden: bool, hasMinValue: bool, hasSoftMinValue: bool, hasSoftMaxValue: bool, hasMaxValue: bool, indexMatters: bool, internalSet: bool, keyable: bool, longName: str, multi: bool, maxValue: float, minValue: float, numberOfChildren: int, niceName: str, parent: str, proxy: str, readable: bool, storable: bool, softMinValue: float, softMaxValue: float, shortName: str, usedAsColor: bool, usedAsFilename: bool, usedAsProxy: bool, writable: bool, worldSpace: bool) -> Any: ...
def addDynamic() -> Any: ...
def addDynamicAttribute() -> Any: ...
def addExtension(edit: bool, query: bool, attributeType: str, binaryTag: str, cachedInternally: bool, category: List[str], disconnectBehaviour: int, dataType: List[str], defaultValue: float, enumName: str, exists: bool, fromPlugin: bool, hidden: bool, hasMinValue: bool, hasSoftMinValue: bool, hasSoftMaxValue: bool, hasMaxValue: bool, indexMatters: bool, internalSet: bool, keyable: bool, longName: str, multi: bool, maxValue: float, minValue: float, numberOfChildren: int, niceName: str, nodeType: str, parent: str, proxy: str, readable: bool, storable: bool, softMinValue: float, softMaxValue: float, shortName: str, usedAsColor: bool, usedAsFilename: bool, usedAsProxy: bool, writable: bool, worldSpace: bool) -> Any: ...
def addMetadata(query: bool, scene: bool) -> Any: ...
def addPP(attribute: str) -> Any: ...
def adpAnalyticsDialog(activeNotification: bool, desktopAnalytics: bool) -> Any: ...
def adskAsset(query: bool, assetID: str, library: str, resolved: bool) -> Any: ...
def adskAssetLibrary(unloadAll: bool, unload: bool) -> Any: ...
def adskAssetList(infoType: str) -> Any: ...
def adskAssetListUI(query: bool, commandSuffix: str, materialLoaded: bool, uiCommand: str) -> Any: ...
def affectedNet(edit: bool, query: bool, type: str) -> Any: ...
def affects(type: str) -> Any: ...
def agFormatIn(file: str, name: str) -> Any: ...
def agFormatOut(file: str) -> Any: ...
def aimConstraint(edit: bool, query: bool, layer: str, maintainOffset: bool, name: str, remove: bool, skip: List[str], targetList: bool, weight: float, weightAliasList: bool, worldUpObject: str, worldUpType: str) -> Any: ...
def air(edit: bool, query: bool, attenuation: float, directionX: float, directionY: float, directionZ: float, enableSpread: bool, fanSetup: bool, inheritRotation: bool, inheritVelocity: float, magnitude: float, maxDistance: float, name: str, perVertex: bool, speed: float, spread: float, torusSectionRadius: float, velocityComponentOnly: bool, volumeExclusion: bool, volumeShape: str, volumeSweep: float, wakeSetup: bool, windSetup: bool) -> Any: ...
def aliasAttr(edit: bool, query: bool, remove: bool) -> Any: ...
def align(alignToLead: bool, coordinateSystem: str, xAxis: str, yAxis: str, zAxis: str) -> Any: ...
def alignCtx(edit: bool, query: bool, align: bool, anchorFirstObject: bool, history: bool, distribute: bool, exists: bool, image1: str, image2: str, image3: str, name: str, showAlignTouch: bool) -> Any: ...
def alignCurve(edit: bool, query: bool, attach: bool, curvatureContinuity: bool, caching: bool, constructionHistory: bool, curvatureScale1: float, curvatureScale2: float, frozen: bool, joinParameter: float, keepMultipleKnots: bool, name: str, nodeState: int, object: bool, positionalContinuity: bool, positionalContinuityType: int, replaceOriginal: bool, reverse1: bool, reverse2: bool, tangentContinuity: bool, tangentContinuityType: int, tangentScale1: float, tangentScale2: float) -> Any: ...
def alignSurface(edit: bool, query: bool, attach: bool, curvatureContinuity: bool, caching: bool, constructionHistory: bool, curvatureScale1: float, curvatureScale2: float, directionU: bool, frozen: bool, joinParameter: float, keepMultipleKnots: bool, name: str, nodeState: int, object: bool, positionalContinuity: bool, positionalContinuityType: int, replaceOriginal: bool, reverse1: bool, reverse2: bool, swap1: bool, swap2: bool, tangentContinuity: bool, tangentContinuityType: int, tangentScale1: float, tangentScale2: float, twist: bool) -> Any: ...
def allNodeTypes(includeAbstract: bool) -> Any: ...
def ambientLight(edit: bool, query: bool, ambientShade: float, discRadius: float, exclusive: bool, intensity: float, name: str, useRayTraceShadows: bool, shadowDither: float, shadowSamples: int, softShadow: bool) -> Any: ...
def angleBetween(caching: bool, constructionHistory: bool, euler: bool, frozen: bool, name: str, nodeState: int, vector1X: float, vector1Y: float, vector1Z: float, vector2X: float, vector2Y: float, vector2Z: float) -> Any: ...
def animCurveEditor(edit: bool, query: bool, showActiveCurveNames: bool, areCurvesSelected: bool, autoFit: str, autoFitTime: str, constrainDrag: int, classicMode: bool, curvesShown: bool, curvesShownForceUpdate: bool, clipTime: str, control: bool, displayActiveKeys: str, displayActiveKeyTangents: str, denormalizeCurvesCommand: str, displayInfinities: str, displayKeys: str, displayNormalized: bool, defineTemplate: str, docTag: str, displayTangents: str, displayValues: str, exists: bool, filter: str, forceMainConnection: str, highlightAffectedCurves: bool, highlightConnection: str, keyMinScale: float, keyScale: float, keyingTime: str, lookAt: str, lockMainConnection: bool, lockPlayRangeShades: str, menu: Callable, mainListConnection: str, normalizeCurvesCommand: str, outliner: str, parent: str, panel: str, preSelectionHighlight: bool, renormalizeCurves: bool, resultSamples: int, resultScreenSamples: int, resultUpdate: str, smoothness: str, showBufferCurves: str, stackedCurves: bool, stackedCurvesMin: float, showCurveNames: bool, stackedCurvesSpace: float, stackedCurvesMax: float, simpleKeyView: bool, selectionConnection: str, showPlayRangeShades: str, showResults: str, snapTime: str, stateString: bool, showUpstreamCurves: bool, snapValue: str, timelinePositionTop: float, unlockMainConnection: bool, unParent: bool, updateMainConnection: bool, useTemplate: str, viewLeft: float, valueLinesToggle: str, viewRight: float) -> Any: ...
def animDisplay(edit: bool, query: bool, refAnimCurvesEditable: bool, timeCode: str, timeCodeOffset: str, modelUpdate: str) -> Any: ...
def animLayer(edit: bool, query: bool, affectedLayers: bool, addRelatedKG: bool, animCurves: bool, addSelectedObjects: bool, attribute: List[str], baseAnimCurves: bool, bestLayer: bool, blendNodes: bool, bestAnimLayer: bool, children: str, copyAnimation: str, copyNoAnimation: str, collapse: bool, copy: str, extractAnimation: str, excludeBoolean: bool, excludeDynamic: bool, excludeEnum: bool, excludeRotate: bool, excludeScale: bool, excludeTranslate: bool, excludeVisibility: bool, exists: bool, forceUIRebuild: bool, lock: bool, mute: bool, maxLayers: bool, moveLayerAfter: str, moveLayerBefore: str, override: bool, parent: str, preferred: bool, passthrough: bool, root: str, removeAttribute: List[str], removeAllAttributes: bool, solo: bool, selected: bool, forceUIRefresh: bool, weight: float, writeBlendnodeDestinations: bool) -> Any: ...
def animView(edit: bool, query: bool, endTime: int, maxValue: float, minValue: float, nextView: bool, previousView: bool, startTime: int) -> Any: ...
def annotate(text: str) -> Any: ...
def appendListItem() -> Any: ...
def applyAttrPattern(nodeType: str, patternName: str) -> Any: ...
def applyMetadata(format: str, scene: bool, value: str) -> Any: ...
def applyTake(*args, **kwargs) -> Any: ...
def arcLenDimContext(edit: bool, query: bool, history: bool, exists: bool, image1: str, image2: str, image3: str, name: str) -> Any: ...
def arcLengthDimension() -> Any: ...
def arclen(edit: bool, query: bool, caching: bool, constructionHistory: bool, frozen: bool, name: str, nodeState: int) -> Any: ...
def arrayMapper(destAttr: str, inputU: str, inputV: str, mapTo: str, target: List[str], type: str) -> Any: ...
def art3dPaintCtx(*args, **kwargs) -> Any: ...
def artAttr() -> Any: ...
def artAttrCtx(*args, **kwargs) -> Any: ...
def artAttrPaintVertexCtx(*args, **kwargs) -> Any: ...
def artAttrSkinPaintCmd(*args, **kwargs) -> Any: ...
def artAttrSkinPaintCtx(*args, **kwargs) -> Any: ...
def artAttrTool(*args, **kwargs) -> Any: ...
def artBaseCtx(*args, **kwargs) -> Any: ...
def artBuildPaintMenu() -> Any: ...
def artFluidAttr(*args, **kwargs) -> Any: ...
def artFluidAttrCtx(*args, **kwargs) -> Any: ...
def artPuttyCtx(*args, **kwargs) -> Any: ...
def artSelect() -> Any: ...
def artSelectCtx(*args, **kwargs) -> Any: ...
def artSetPaint() -> Any: ...
def artSetPaintCtx(*args, **kwargs) -> Any: ...
def artUserPaintCtx(*args, **kwargs) -> Any: ...
def arubaNurbsToPoly(edit: bool, query: bool, adaptive: bool, caching: bool, chordalDeviation: float, constructionHistory: bool, frozen: bool, minChordLength: float, localSpace: bool, maxChordLength: float, name: str, nodeState: int, normalTolerance: float, object: bool, samples: int, sampleType: int, tolerance: float, useSurfaceShader: bool, worldSpace: bool) -> Any: ...
def assembly(edit: bool, query: bool, active: str, activeLabel: str, postCreateUIProc: Callable, canCreate: str, createOptionBoxProc: Callable, createRepresentation: str, deregister: str, deleteRepresentation: str, defaultType: str, input: str, isAType: str, isTrackingMemberEdits: str, label: str, listRepresentations: bool, listRepTypesProc: Callable, listRepTypes: bool, listTypes: bool, name: str, newRepLabel: str, proc: Callable, repName: str, renameRepresentation: str, repNamespace: str, repTypeLabelProc: Callable) -> Any: ...
def assignCommand(edit: bool, query: bool, addDivider: str, altModifier: bool, annotation: str, command: Callable, commandModifier: bool, ctrlModifier: bool, delete: int, data1: str, data2: str, data3: str, dividerString: str, enableCommandRepeat: bool, factorySettings: bool, index: int, keyString: str, keyArray: bool, keyUp: bool, name: bool, numDividersPreceding: int, numElements: bool, optionModifier: bool, sortByKey: bool, sourceUserCommands: bool) -> Any: ...
def assignInputDevice(*args, **kwargs) -> Any: ...
def assignViewportFactories(edit: bool, query: bool, materialFactory: str, nodeType: str, textureFactory: str) -> Any: ...
def attachCache() -> Any: ...
def attachCurve(edit: bool, query: bool, blendBias: float, blendKnotInsertion: bool, caching: bool, constructionHistory: bool, frozen: bool, keepMultipleKnots: bool, method: int, name: str, nodeState: int, object: bool, parameter: float, replaceOriginal: bool, reverse1: bool, reverse2: bool) -> Any: ...
def attachDeviceAttr(*args, **kwargs) -> Any: ...
def attachFluidCache() -> Any: ...
def attachGeometryCache() -> Any: ...
def attachNclothCache() -> Any: ...
def attachSurface(edit: bool, query: bool, blendBias: float, blendKnotInsertion: bool, caching: bool, constructionHistory: bool, directionU: bool, frozen: bool, keepMultipleKnots: bool, method: int, name: str, nodeState: int, object: bool, parameter: float, replaceOriginal: bool, reverse1: bool, reverse2: bool, swap1: bool, swap2: bool, twist: bool) -> Any: ...
def attrColorSliderGrp(edit: bool, query: bool, adjustableColumn2: int, adjustableColumn3: int, adjustableColumn4: int, adjustableColumn5: int, adjustableColumn6: int, adjustableColumn: int, attrNavDecision: Tuple[str, str], annotation: str, attribute: str, columnAlign: List[Tuple[int, str]], columnAlign2: Tuple[str, str], columnOffset2: Tuple[int, int], columnAttach2: Tuple[str, str], columnWidth: List[Tuple[int, int]], columnWidth1: int, columnWidth2: Tuple[int, int], dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enableKeyboardFocus: bool, enable: bool, exists: bool, fullPathName: bool, height: int, isObscured: bool, label: str, manage: bool, noBackground: bool, numberOfPopupMenus: bool, parent: str, popupMenuArray: bool, preventOverride: bool, showButton: bool, statusBarMessage: str, useTemplate: str, visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def attrCompatibility(addAttr: bool, clear: bool, dumpTable: bool, enable: bool, nodeRename: str, pluginNode: str, renameAttr: str, removeAttr: bool, type: str, version: str) -> Any: ...
def attrControlGrp(edit: bool, query: bool, attribute: str, annotation: str, changeCommand: Callable, enable: bool, exists: bool, hideMapButton: bool, label: str, preventOverride: bool) -> Any: ...
def attrEnumOptionMenu(edit: bool, query: bool, annotation: str, attribute: str, changeCommand: Callable, dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enumeratedItem: List[Tuple[int, str]], enableKeyboardFocus: bool, enable: bool, exists: bool, fullPathName: bool, height: int, isObscured: bool, label: str, manage: bool, noBackground: bool, numberOfPopupMenus: bool, parent: str, popupMenuArray: bool, preventOverride: bool, statusBarMessage: str, useTemplate: str, visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def attrEnumOptionMenuGrp(edit: bool, query: bool, adjustableColumn2: int, adjustableColumn3: int, adjustableColumn4: int, adjustableColumn5: int, adjustableColumn6: int, adjustableColumn: int, annotation: str, attribute: str, columnAlign: List[Tuple[int, str]], columnAlign2: Tuple[str, str], columnOffset2: Tuple[int, int], columnAttach2: Tuple[str, str], columnWidth: List[Tuple[int, int]], columnWidth1: int, columnWidth2: Tuple[int, int], dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enumeratedItem: List[Tuple[int, str]], enableKeyboardFocus: bool, enable: bool, exists: bool, fullPathName: bool, height: int, isObscured: bool, label: str, manage: bool, noBackground: bool, numberOfPopupMenus: bool, parent: str, popupMenuArray: bool, preventOverride: bool, statusBarMessage: str, useTemplate: str, visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def attrFieldGrp(edit: bool, query: bool, adjustableColumn2: int, adjustableColumn3: int, adjustableColumn4: int, adjustableColumn5: int, adjustableColumn6: int, adjustableColumn: int, annotation: str, attribute: str, columnAlign: List[Tuple[int, str]], changeCommand: Callable, columnAlign2: Tuple[str, str], columnOffset2: Tuple[int, int], columnAttach2: Tuple[str, str], columnWidth: List[Tuple[int, int]], columnWidth1: int, columnWidth2: Tuple[int, int], dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, extraButton: bool, extraButtonCommand: Callable, enableBackground: bool, extraButtonIcon: str, enableKeyboardFocus: bool, extraLabel: str, enable: bool, exists: bool, forceAddMapButton: bool, fullPathName: bool, height: int, hideMapButton: bool, isObscured: bool, label: str, manage: bool, maxValue: float, minValue: float, noBackground: bool, numberOfFields: int, numberOfPopupMenus: bool, parent: str, popupMenuArray: bool, preventOverride: bool, precision: int, step: float, statusBarMessage: str, useTemplate: str, visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def attrFieldSliderGrp(edit: bool, query: bool, adjustableColumn2: int, adjustableColumn3: int, adjustableColumn4: int, adjustableColumn5: int, adjustableColumn6: int, adjustableColumn: int, annotation: str, attribute: str, columnAlign: List[Tuple[int, str]], changeCommand: Callable, columnAlign2: Tuple[str, str], columnOffset2: Tuple[int, int], columnAttach2: Tuple[str, str], columnWidth: List[Tuple[int, int]], columnWidth1: int, columnWidth2: Tuple[int, int], dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, extraButton: bool, extraButtonCommand: Callable, enableBackground: bool, extraButtonIcon: str, enableKeyboardFocus: bool, enable: bool, exists: bool, forceAddMapButton: bool, fieldMinValue: float, fieldMaxValue: float, fullPathName: bool, fieldStep: float, height: int, hideMapButton: bool, isObscured: bool, label: str, manage: bool, maxValue: float, minValue: float, noBackground: bool, numberOfPopupMenus: bool, parent: str, popupMenuArray: bool, preventOverride: bool, precision: int, step: float, statusBarMessage: str, sliderMinValue: float, sliderMaxValue: float, sliderStep: float, useTemplate: str, visibleChangeCommand: Callable, visible: bool, vertical: bool, width: int) -> Any: ...
def attrNavigationControlGrp(edit: bool, query: bool, adjustableColumn2: int, adjustableColumn3: int, adjustableColumn4: int, adjustableColumn5: int, adjustableColumn6: int, adjustableColumn: int, attrNavDecision: Tuple[str, str], annotation: str, attribute: str, connectAttrToDropped: str, columnAlign: List[Tuple[int, str]], connectToExisting: str, columnAlign2: Tuple[str, str], createNew: str, connectNodeToDropped: str, columnOffset2: Tuple[int, int], columnAttach2: Tuple[str, str], columnWidth: List[Tuple[int, int]], columnWidth1: int, columnWidth2: Tuple[int, int], disconnect: str, delete: str, dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, defaultTraversal: str, extraButton: bool, extraButtonCommand: Callable, enableBackground: bool, extraButtonIcon: str, enableKeyboardFocus: bool, enable: bool, exists: bool, fullPathName: bool, height: int, ignore: str, ignoreNotSupported: bool, isObscured: bool, label: str, manage: bool, noBackground: bool, notIgnorableMenu: bool, notKeyableMenu: bool, numberOfPopupMenus: bool, parent: str, popupMenuArray: bool, preventOverride: bool, relatedNodes: str, statusBarMessage: str, unignore: str, useTemplate: str, visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def attributeInfo(allAttributes: bool, logicalAnd: bool, bool: bool, enumerated: bool, hidden: bool, internal: bool, inherited: bool, leaf: bool, multi: bool, short: bool, type: str, userInterface: bool, writable: bool) -> Any: ...
def attributeMenu(*args, **kwargs) -> Any: ...
def attributeName(long: bool, leaf: bool, nice: bool, short: bool) -> Any: ...
def attributeQuery(affectsAppearance: bool, attributeType: bool, affectsWorldspace: bool, connectable: bool, channelBox: bool, cachedInternally: bool, categories: bool, enum: bool, exists: bool, hidden: bool, internal: bool, indeterminant: bool, internalGet: bool, indexMatters: bool, internalSet: bool, keyable: bool, listChildren: bool, listDefault: bool, listEnum: bool, longName: bool, listParent: bool, listSiblings: bool, localizedListEnum: bool, multi: bool, maximum: bool, minimum: bool, minExists: bool, message: bool, maxExists: bool, node: str, numberOfChildren: bool, niceName: bool, range: bool, readable: bool, rangeExists: bool, renderSource: bool, softRange: bool, softRangeExists: bool, softMinExists: bool, softMin: bool, softMax: bool, shortName: bool, storable: bool, softMaxExists: bool, typeExact: str, type: str, usedAsColor: bool, usedAsFilename: bool, usesMultiBuilder: bool, writable: bool, worldspace: bool) -> Any: ...
def audioTrack(edit: bool, query: bool, insertTrack: int, lock: bool, mute: bool, numTracks: int, removeEmptyTracks: bool, removeTrack: int, solo: bool, swapTracks: Tuple[int, int], title: str) -> Any: ...
def autoKeyframe(edit: bool, query: bool, addAttr: str, characterOption: str, listAttr: bool, noReset: bool, state: bool) -> Any: ...
def autoPlace(useMouse: bool) -> Any: ...
def autoSave(query: bool, destinationFolder: bool, destination: int, enable: bool, folder: str, interval: float, limitBackups: bool, maxBackups: int, perform: bool, prompt: bool) -> Any: ...
def backgroundEvaluationManager(query: bool, interrupt: bool, mode: str, pause: bool, resume: bool) -> Any: ...
def bakeClip(blend: Tuple[int, int], clipIndex: List[int], keepOriginals: bool, name: str) -> Any: ...
def bakeDeformer(colorizeSkeleton: bool, dstMeshName: str, dstSkeletonName: str, hierarchy: bool, maxInfluences: int, pruneWeights: float, customRangeOfMotion: Incomplete, srcMeshName: str, srcSkeletonName: str, smoothWeights: int) -> Any: ...
def bakePartialHistory(edit: bool, query: bool, allShapes: bool, postSmooth: bool, preCache: bool, prePostDeformers: bool, preDeformers: bool) -> Any: ...
def bakeResults(edit: bool, query: bool, animation: str, bakeOnOverrideLayer: bool, disableImplicitControl: bool, destinationLayer: str, includeUpperBound: bool, minimizeRotation: bool, oversamplingRate: int, preserveOutsideKeys: bool, removeBakedAttributeFromLayer: bool, removeBakedAnimFromLayer: bool, resolveWithoutLayer: List[str], sparseAnimCurveBake: bool, sampleBy: int, simulation: bool) -> Any: ...
def bakeSimulation(edit: bool, query: bool, animation: str, bakeOnOverrideLayer: bool, disableImplicitControl: bool, destinationLayer: str, includeUpperBound: bool, minimizeRotation: bool, oversamplingRate: int, preserveOutsideKeys: bool, removeBakedAttributeFromLayer: bool, removeBakedAnimFromLayer: bool, resolveWithoutLayer: List[str], sparseAnimCurveBake: bool, sampleBy: int, simulation: bool) -> Any: ...
def baseTemplate(edit: bool, query: bool, exists: bool, force: bool, fileName: str, load: bool, silent: bool, unload: bool, viewList: str) -> Any: ...
def baseView(edit: bool, query: bool, itemList: bool, viewLabel: bool, viewDescription: bool, viewList: bool) -> Any: ...
def batchRender(filename: str, melCommand: str, numProcs: int, preRenderCommand: str, renderCommandOptions: str, remoteRenderMachine: str, showImage: bool, status: str, useRemoteRender: bool, useStandalone: bool, verbosity: int) -> Any: ...
def bevel(edit: bool, query: bool, bevelShapeType: int, caching: bool, constructionHistory: bool, cornerType: int, depth: float, extrudeDepth: float, frozen: bool, joinSurfaces: bool, name: str, nodeState: int, numberOfSides: int, object: bool, polygon: int, range: bool, tolerance: float, width: float) -> Any: ...
def bevelPlus(edit: bool, query: bool, bevelInside: bool, capSides: int, caching: bool, constructionHistory: bool, polyOutChordHeightRatio: float, polyOutChordHeight: float, depth: float, extrudeDepth: float, frozen: bool, innerStyle: int, joinSurfaces: bool, name: str, nodeState: int, normalsOutwards: bool, numberOfSides: int, outerStyle: int, polyOutCurveSamples: int, polyOutCurveType: int, polyOutExtrusionSamples: int, polyOutExtrusionType: int, polygon: int, polyOutCount: int, polyOutMethod: int, range: bool, tolerance: float, polyOutUseChordHeight: bool, polyOutUseChordHeightRatio: bool, width: float) -> Any: ...
def bezierAnchorPreset(preset: int) -> Any: ...
def bezierAnchorState(even: bool, smooth: bool) -> Any: ...
def bezierCurveToNurbs() -> Any: ...
def bezierInfo(anchorFromCV: int, cvFromAnchor: int, isAnchorSelected: bool, isTangentSelected: bool, onlyAnchorsSelected: bool, onlyTangentsSelected: bool) -> Any: ...
def binMembership(query: bool, addToBin: str, exists: str, inheritBinsFromNodes: str, isValidBinName: str, listBins: bool, makeExclusive: str, notifyChanged: bool, removeFromBin: str) -> Any: ...
def bindSkin(edit: bool, query: bool, byClosestPoint: bool, byPartition: bool, colorJoints: bool, delete: bool, doNotDescend: bool, enable: bool, name: str, partition: str, toAll: bool, toSkeleton: bool, toSelectedBones: bool, unbind: bool, unbindKeepHistory: bool, unlock: bool) -> Any: ...
def blend(edit: bool, query: bool, autoDirection: bool, caching: bool, crvsInFirstRail: int, constructionHistory: bool, flipLeft: bool, flipRight: bool, frozen: bool, leftParameter: float, multipleKnots: bool, name: str, nodeState: int, object: bool, polygon: int, positionTolerance: float, rightParameter: float, tangentTolerance: float) -> Any: ...
def blend2(edit: bool, query: bool, autoAnchor: bool, autoNormal: bool, caching: bool, crvsInFirstRail: int, constructionHistory: bool, flipLeftNormal: bool, flipRightNormal: bool, frozen: bool, leftAnchor: float, leftEnd: float, leftStart: float, multipleKnots: bool, name: str, nodeState: int, object: bool, polygon: int, positionTolerance: float, rightAnchor: float, rightEnd: float, rightStart: float, reverseLeft: bool, reverseRight: bool, tangentTolerance: float) -> Any: ...
def blendCtx(*args, **kwargs) -> Any: ...
def blendShape(edit: bool, query: bool, after: bool, afterReference: bool, automatic: bool, before: bool, deformerTools: bool, envelope: float, export: str, exportTarget: List[Tuple[int, int]], exclusive: str, frontOfChain: bool, flipTarget: List[Tuple[int, int]], geometry: List[str], geometryIndices: bool, inBetween: bool, inBetweenIndex: int, inBetweenType: str, includeHiddenSelections: bool, ip: str, ignoreSelected: bool, mirrorDirection: int, mergeSource: List[int], mergeTarget: int, mirrorTarget: List[Tuple[int, int]], name: str, normalizationGroups: bool, origin: str, parallel: bool, prune: bool, resetTargetDelta: List[Tuple[int, int]], symmetryAxis: str, suppressDialog: bool, symmetryEdge: List[str], split: bool, symmetrySpace: int, topologyCheck: bool, transform: str, tangentSpace: bool, useComponentTags: bool, weight: List[Tuple[int, float]], weightCount: int) -> Any: ...
def blendShapeEditor(*args, **kwargs) -> Any: ...
def blendShapePanel(*args, **kwargs) -> Any: ...
def blendTwoAttr(edit: bool, query: bool, attribute0: str, attribute1: str, blender: str, controlPoints: bool, driver: int, name: str, shape: bool, time: Incomplete) -> Any: ...
def blindDataType(dataType: List[str], typeId: int, longDataName: List[str], longNames: bool, query: bool, shortDataName: List[str], shortNames: bool, typeNames: bool) -> Any: ...
def boneLattice(edit: bool, query: bool, after: bool, afterReference: bool, before: bool, bicep: float, deformerTools: bool, exclusive: str, frontOfChain: bool, geometry: List[str], geometryIndices: bool, includeHiddenSelections: bool, ignoreSelected: bool, joint: str, lengthIn: float, lengthOut: float, name: str, parallel: bool, prune: bool, split: bool, transform: str, tricep: float, useComponentTags: bool, widthLeft: float, widthRight: float) -> Any: ...
def boundary(edit: bool, query: bool, caching: bool, constructionHistory: bool, endPoint: bool, endPointTolerance: float, frozen: bool, name: str, nodeState: int, object: bool, order: bool, polygon: int, range: bool) -> Any: ...
def boxDollyCtx(edit: bool, query: bool, alternateContext: bool, history: bool, exists: bool, image1: str, image2: str, image3: str, name: str, toolName: str) -> Any: ...
def boxZoomCtx(edit: bool, query: bool, history: bool, exists: bool, image1: str, image2: str, image3: str, name: str, zoomScale: float) -> Any: ...
def bufferCurve(query: bool, animation: str, exists: bool, includeUpperBound: bool, overwrite: bool, swap: bool, useReferencedCurve: bool) -> Any: ...
def buildBookmarkMenu(editor: str, type: str) -> Any: ...
def buildKeyframeMenu() -> Any: ...
def buildSendToBackburnerDialog() -> Any: ...
def button(edit: bool, query: bool, actionIsSubstitute: bool, align: str, annotation: str, actOnPress: bool, command: Callable, dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enableKeyboardFocus: bool, enable: bool, exists: bool, fullPathName: bool, height: int, isObscured: bool, label: str, manage: bool, noBackground: bool, numberOfPopupMenus: bool, parent: str, popupMenuArray: bool, preventOverride: bool, recomputeSize: bool, statusBarMessage: str, useTemplate: str, visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def buttonManip(icon: str) -> Any: ...
def cacheAppend() -> Any: ...
def cacheAppendOpt() -> Any: ...
def cacheEvaluator(edit: bool, query: bool, cacheFillMode: str, cacheFillOrder: str, cachedFrames: bool, cacheInvalidate: Incomplete, creationParameters: bool, cachingPoints: bool, dynamicsAsyncRefresh: bool, delegateEvaluation: bool, dynamicsSupportActive: bool, dynamicsSupportEnabled: bool, flushCache: str, flushCacheSync: bool, flushCacheWait: bool, hybridCacheMode: str, listCachedNodes: bool, listCacheNames: bool, layeredEvaluationActive: bool, layeredEvaluationCachingPoints: bool, layeredEvaluationEnabled: bool, listValueNames: bool, newAction: str, newActionParam: str, newFilter: str, newFilterParam: str, newRule: str, newRuleParam: str, preventFrameSkip: bool, pauseInvalidation: bool, resumeInvalidation: bool, resetRules: bool, resourceUsage: bool, safeMode: bool, safeModeMessages: bool, safeModeTriggered: bool, waitForCache: float) -> Any: ...
def cacheFile(edit: bool, query: bool, attachFile: bool, appendFrame: bool, cacheableAttrs: str, creationChannelName: List[str], createCacheNode: bool, cacheFormat: str, channelIndex: bool, cacheInfo: List[str], channelName: List[str], deleteCachedFrame: bool, descriptionFileName: bool, directory: str, dataSize: bool, doubleToFloat: bool, endTime: int, format: str, geometry: bool, inAttr: List[str], interpEndTime: int, interpStartTime: int, inTangent: str, noBackup: bool, outTangent: str, prefix: bool, pointCount: bool, convertPc2: bool, pc2File: str, refresh: bool, replaceCachedFrame: bool, runupFrames: int, replaceWithoutSimulating: bool, staticCache: bool, singleCache: bool, simulationRate: int, sampleMultiplier: int, startTime: int, worldSpace: bool) -> Any: ...
def cacheFileCombine(edit: bool, query: bool, cacheIndex: bool, channelName: List[str], keepWeights: bool, layerNode: bool, nextAvailable: bool, objectIndex: int) -> Any: ...
def cacheFileMerge(edit: bool, query: bool, endTime: int, geometry: bool, startTime: int) -> Any: ...
def cacheFileTrack(edit: bool, query: bool, insertTrack: int, lock: bool, mute: bool, removeEmptyTracks: bool, removeTrack: int, solo: bool, track: int) -> Any: ...
def caddyManip(*args, **kwargs) -> Any: ...
def callbacks(addCallback: Callable, clearAllCallbacks: bool, clearCallbacks: bool, dumpCallbacks: bool, describeHooks: bool, executeCallbacks: bool, hook: str, listCallbacks: bool, owner: str, removeCallback: Callable) -> Any: ...
def camera(edit: bool, query: bool, aspectRatio: float, centerOfInterest: float, clippingPlanes: bool, cameraScale: float, displayFieldChart: bool, displayFilmGate: bool, displayFilmOrigin: bool, displayFilmPivot: bool, displayGateMask: bool, depthOfField: bool, displayResolution: bool, displaySafeAction: bool, displaySafeTitle: bool, farClipPlane: float, focusDistance: float, filmFit: str, farFocusDistance: float, filmFitOffset: float, focalLength: float, filmRollOrder: str, filmRollValue: float, fStop: float, filmTranslateH: float, filmTranslateV: float, homeCommand: str, horizontalFilmAperture: float, horizontalFilmOffset: float, horizontalFieldOfView: float, stereoHorizontalImageTranslate: float, horizontalPan: float, horizontalRollPivot: float, horizontalShake: float, journalCommand: bool, lensSqueezeRatio: float, lockTransform: bool, motionBlur: bool, name: str, nearClipPlane: float, nearFocusDistance: float, orthographic: bool, overscan: float, orthographicWidth: float, preScale: float, postScale: float, panZoomEnabled: bool, renderPanZoom: bool, shutterAngle: float, startupCamera: bool, shakeEnabled: bool, stereoHorizontalImageTranslateEnabled: bool, shakeOverscan: float, shakeOverscanEnabled: bool, verticalFilmAperture: float, verticalFilmOffset: float, verticalFieldOfView: float, verticalLock: bool, verticalPan: float, verticalRollPivot: float, verticalShake: float, zoom: float) -> Any: ...
def cameraSet(edit: bool, query: bool, active: bool, appendTo: bool, camera: str, clearDepth: bool, deleteLayer: bool, deleteAll: bool, insertAt: bool, name: str, numLayers: bool, order: int, objectSet: str) -> Any: ...
def cameraView(edit: bool, addBookmark: bool, animate: bool, camera: str, name: str, removeBookmark: bool, setCamera: bool, setView: bool, bookmarkType: int) -> Any: ...
def canCreateCaddyManip(*args, **kwargs) -> Any: ...
def canCreateManip() -> Any: ...
def canvas(edit: bool, query: bool, annotation: str, dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enableKeyboardFocus: bool, enable: bool, exists: bool, fullPathName: bool, height: int, isObscured: bool, manage: bool, noBackground: bool, numberOfPopupMenus: bool, parent: str, pressCommand: Callable, popupMenuArray: bool, preventOverride: bool, statusBarMessage: str, useTemplate: str, visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def changeSubdivComponentDisplayLevel(*args, **kwargs) -> Any: ...
def changeSubdivRegion(*args, **kwargs) -> Any: ...
def channelBox(edit: bool, query: bool, attributeEditorMode: bool, attrFilter: str, annotation: str, attrRegex: str, containerAtTop: bool, dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enableKeyboardFocus: bool, enableLabelSelection: bool, enable: bool, exists: bool, fullPathName: bool, fieldWidth: int, height: int, historyObjectList: bool, hyperbolic: bool, inputs: bool, isObscured: bool, longNames: bool, labelWidth: int, manage: bool, maxHeight: int, mainListConnection: str, useManips: str, mainObjectList: bool, maxWidth: int, noBackground: bool, niceNames: bool, numberOfPopupMenus: bool, nodeRegex: str, outputObjectList: bool, outputs: bool, parent: str, popupMenuArray: bool, preventOverride: bool, precision: int, select: List[str], statusBarMessage: str, selectedHistoryAttributes: bool, shapes: bool, selectedMainAttributes: bool, showNamespace: bool, selectedOutputAttributes: bool, shapeObjectList: bool, speed: float, selectedShapeAttributes: bool, showTransforms: bool, takeFocus: bool, update: bool, useTemplate: str, visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def character(edit: bool, query: bool, addElement: str, anyMember: str, addOffsetObject: str, clear: str, characterPlug: bool, excludeDynamic: bool, empty: bool, excludeRotate: bool, excludeScale: bool, excludeTranslate: bool, excludeVisibility: bool, forceElement: str, flatten: str, isIntersecting: str, isMember: str, include: str, intersection: str, library: bool, memberIndex: int, name: str, nodesOnly: bool, noWarnings: bool, offsetNode: bool, remove: str, removeOffsetObject: str, root: str, scheduler: bool, split: str, subtract: str, text: str, userAlias: str, union: str) -> Any: ...
def characterMap(edit: bool, query: bool, mapping: str, mapAttr: Tuple[str, str], mapMethod: str, mapNode: Tuple[str, str], proposedMapping: bool, unmapAttr: Tuple[str, str], unmapNode: Tuple[str, str]) -> Any: ...
def characterize(edit: bool, query: bool, autoActivateBodyPart: bool, addAuxEffector: bool, addFloorContactPlane: bool, attributeFromHIKProperty: str, addMissingEffectors: bool, activatePivot: bool, changePivotPlacement: bool, effectors: str, fkSkeleton: str, attributeFromHIKPropertyMode: str, name: str, pinHandFeet: bool, placeNewPivot: bool, posture: str, sourceSkeleton: str, stancePose: str, type: str) -> Any: ...
def checkBox(edit: bool, query: bool, align: str, annotation: str, changeCommand: Callable, dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, editable: bool, enableKeyboardFocus: bool, enable: bool, exists: bool, fullPathName: bool, height: int, isObscured: bool, label: str, manage: bool, noBackground: bool, numberOfPopupMenus: bool, offCommand: Callable, onCommand: Callable, parent: str, popupMenuArray: bool, preventOverride: bool, recomputeSize: bool, statusBarMessage: str, useTemplate: str, value: bool, visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def checkBoxGrp(edit: bool, query: bool, adjustableColumn2: int, adjustableColumn3: int, adjustableColumn4: int, adjustableColumn5: int, adjustableColumn6: int, adjustableColumn: int, annotation: str, columnAlign: List[Tuple[int, str]], changeCommand: Callable, changeCommand1: Callable, changeCommand2: Callable, changeCommand3: Callable, changeCommand4: Callable, columnAlign2: Tuple[str, str], columnOffset2: Tuple[int, int], columnAttach2: Tuple[str, str], columnWidth: List[Tuple[int, int]], columnWidth1: int, columnWidth2: Tuple[int, int], dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, editable: bool, enableKeyboardFocus: bool, enable: bool, enable1: bool, enable2: bool, enable3: bool, enable4: bool, exists: bool, fullPathName: bool, height: int, isObscured: bool, label: str, label1: str, label2: str, label3: str, label4: str, labelArray2: Tuple[str, str], manage: bool, noBackground: bool, numberOfCheckBoxes: int, numberOfPopupMenus: bool, offCommand1: Callable, offCommand2: Callable, offCommand3: Callable, offCommand4: Callable, offCommand: Callable, onCommand1: Callable, onCommand2: Callable, onCommand3: Callable, onCommand4: Callable, onCommand: Callable, parent: str, popupMenuArray: bool, preventOverride: bool, statusBarMessage: str, useTemplate: str, value1: bool, value2: bool, value3: bool, value4: bool, visibleChangeCommand: Callable, visible: bool, vertical: bool, width: int) -> Any: ...
def checkDefaultRenderGlobals(edit: bool, query: bool) -> Any: ...
def choice(edit: bool, query: bool, controlPoints: bool, index: int, name: str, shape: bool, sourceAttribute: str, selector: str) -> Any: ...
def circle(edit: bool, query: bool, caching: bool, constructionHistory: bool, centerX: float, centerY: float, centerZ: float, degree: int, fixCenter: bool, firstPointX: float, firstPointY: float, firstPointZ: float, frozen: bool, name: str, nodeState: int, normalX: float, normalY: float, normalZ: float, object: bool, radius: float, sections: int, sweep: float, tolerance: float, useTolerance: bool) -> Any: ...
def circularFillet(edit: bool, query: bool, caching: bool, constructionHistory: bool, curveOnSurface: bool, frozen: bool, name: str, nodeState: int, object: bool, primaryRadius: float, positionTolerance: float, secondaryRadius: float, tangentTolerance: float) -> Any: ...
def clearCache(allNodes: bool, computed: bool, dirty: bool) -> Any: ...
def clearDynStartState() -> Any: ...
def clearNClothStartState() -> Any: ...
def clearShear() -> Any: ...
def clip(edit: bool, query: bool, active: str, allAbsolute: bool, absoluteRotations: bool, absolute: bool, allClips: bool, animCurveRange: bool, allRelative: bool, allSourceClips: bool, addTrack: bool, copy: bool, character: bool, constraint: bool, duplicate: bool, defaultAbsolute: bool, endTime: int, expression: bool, isolate: bool, ignoreSubcharacters: bool, leaveOriginal: bool, mapMethod: str, newName: str, paste: bool, pasteInstance: bool, rotationsAbsolute: bool, remove: bool, removeTrack: bool, startTime: int, scheduleClip: bool, sourceClipName: bool, split: int, useChannel: List[str]) -> Any: ...
def clipEditor(edit: bool, query: bool, autoFit: str, autoFitTime: str, clipDropCmd: str, characterOutline: str, clipStyle: int, control: bool, deselectAll: bool, displayActiveKeys: str, displayActiveKeyTangents: str, deleteCmd: str, displayInfinities: str, displayKeys: str, defineTemplate: str, docTag: str, displayTangents: str, displayValues: str, exists: bool, filter: str, frameAll: bool, forceMainConnection: str, frameRange: Tuple[float, float], highlightedBlend: Tuple[str, str], highlightedClip: Tuple[str, str], highlightConnection: str, initialized: bool, lookAt: str, listAllCharacters: bool, listCurrentCharacters: bool, lockMainConnection: bool, menuContext: str, mainListConnection: str, manageSequencer: bool, parent: str, panel: str, selectClip: Tuple[str, str], selectionConnection: str, snapTime: str, stateString: bool, snapValue: str, unlockMainConnection: bool, unParent: bool, updateMainConnection: bool, useTemplate: str) -> Any: ...
def clipEditorCurrentTimeCtx(edit: bool, query: bool, history: bool, exists: bool, image1: str, image2: str, image3: str, name: str) -> Any: ...
def clipMatching(clipDst: Tuple[str, float], clipSrc: Tuple[str, float], matchRotation: int, matchTranslation: int) -> Any: ...
def clipSchedule(edit: bool, query: bool, allAbsolute: bool, allRelative: bool, blend: Tuple[int, int], blendUsingNode: str, cycle: float, character: bool, defaultAbsolute: bool, enable: bool, groupName: str, groupIndex: List[int], group: bool, instance: str, insertTrack: int, lock: bool, listCurves: bool, listPairs: bool, mute: bool, hold: int, postCycle: float, preCycle: float, rotationsAbsolute: bool, removeBlend: Tuple[int, int], removeEmptyTracks: bool, remove: bool, removeTrack: int, start: int, scale: float, sourceClipName: bool, sourceEnd: int, shift: int, shiftIndex: List[int], solo: bool, sourceStart: int, weight: float, weightStyle: int) -> Any: ...
def clipSchedulerOutliner(edit: bool, query: bool, annotation: str, clipScheduler: str, dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enableKeyboardFocus: bool, enable: bool, exists: bool, fullPathName: bool, height: int, isObscured: bool, manage: bool, noBackground: bool, numberOfPopupMenus: bool, parent: str, popupMenuArray: bool, preventOverride: bool, statusBarMessage: str, useTemplate: str, visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def closeCurve(edit: bool, query: bool, blendBias: float, blendKnotInsertion: bool, caching: bool, constructionHistory: bool, curveOnSurface: bool, frozen: bool, name: str, nodeState: int, object: bool, parameter: float, preserveShape: int, replaceOriginal: bool) -> Any: ...
def closeSurface(edit: bool, query: bool, blendBias: float, blendKnotInsertion: bool, caching: bool, constructionHistory: bool, direction: int, frozen: bool, name: str, nodeState: int, object: bool, parameter: float, preserveShape: int, replaceOriginal: bool) -> Any: ...
def cluster(edit: bool, query: bool, after: bool, afterReference: bool, before: bool, bindState: bool, deformerTools: bool, envelope: float, exclusive: str, frontOfChain: bool, geometry: List[str], geometryIndices: bool, includeHiddenSelections: bool, ignoreSelected: bool, name: str, parallel: bool, prune: bool, relative: bool, resetGeometry: bool, split: bool, useComponentTags: bool, weightedNode: Tuple[str, str]) -> Any: ...
def cmdFileOutput(query: bool, close: int, closeAll: bool, status: int) -> Any: ...
def cmdScrollFieldExecuter(edit: bool, query: bool, autoCloseBraces: bool, annotation: str, appendText: str, commandCompletion: bool, currentLine: int, clear: bool, copySelection: bool, cutSelection: bool, dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enableKeyboardFocus: bool, enable: bool, exists: bool, executeAll: bool, execute: bool, fileChangedCommand: Callable, filterKeyPress: Callable, filename: bool, fullPathName: bool, height: int, hasFocus: bool, hasSelection: bool, isObscured: bool, indentSelection: bool, insertText: str, load: bool, loadContents: str, loadFile: str, manage: bool, modificationChangedCommand: Callable, modified: bool, noBackground: bool, numberOfLines: bool, numberOfPopupMenus: bool, objectPathCompletion: bool, parent: str, popupMenuArray: bool, preventOverride: bool, pasteSelection: bool, redo: bool, receiveFocusCommand: Callable, replaceAll: Tuple[str, str], removeStoredContents: str, searchAndSelect: bool, statusBarMessage: str, searchDown: bool, select: Tuple[int, int], selectAll: bool, showLineNumbers: bool, selectedText: bool, searchMatchCase: bool, spacesPerTab: int, source: bool, searchString: str, sourceType: str, storeContents: str, showTooltipHelp: bool, saveSelection: str, saveFile: str, saveSelectionToShelf: bool, searchWraps: bool, text: str, tabsForIndent: bool, textLength: bool, undo: bool, unindentSelection: bool, useTemplate: str, visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def cmdScrollFieldReporter(edit: bool, query: bool, annotation: str, clear: bool, copySelection: bool, cutSelection: bool, dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, echoAllCommands: bool, enableBackground: bool, enableKeyboardFocus: bool, enable: bool, exists: bool, fullPathName: bool, filterSourceType: str, height: int, hasFocus: bool, isObscured: bool, lineNumbers: bool, manage: bool, noBackground: bool, numberOfPopupMenus: bool, parent: str, popupMenuArray: bool, preventOverride: bool, pasteSelection: bool, receiveFocusCommand: Callable, statusBarMessage: str, suppressErrors: bool, suppressInfo: bool, select: Tuple[int, int], selectAll: bool, suppressResults: bool, suppressStackTrace: bool, stackTrace: bool, saveSelection: str, saveSelectionToShelf: bool, suppressWarnings: bool, text: str, textLength: bool, useTemplate: str, visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def cmdShell(edit: bool, query: bool, annotation: str, command: str, clear: bool, dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enableKeyboardFocus: bool, enable: bool, exists: bool, fullPathName: bool, height: int, isObscured: bool, manage: bool, noBackground: bool, numberOfHistoryLines: int, numberOfPopupMenus: bool, numberOfSavedLines: int, parent: str, popupMenuArray: bool, preventOverride: bool, prompt: str, statusBarMessage: str, useTemplate: str, visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def coarsenSubdivSelectionList(*args, **kwargs) -> Any: ...
def collision(edit: bool, query: bool, friction: float, name: str, offset: float, resilience: float) -> Any: ...
def color(userDefined: int) -> Any: ...
def colorAtPoint(minU: float, minV: float, output: str, samplesU: int, samplesV: int, coordU: List[float], coordV: List[float], maxU: float, maxV: float) -> Any: ...
def colorEditor(query: bool, alpha: float, mini: bool, parent: str, position: Tuple[int, int], result: bool) -> Any: ...
def colorIndex(query: bool, hueSaturationValue: bool, resetToFactory: bool, resetToSaved: bool) -> Any: ...
def colorIndexSliderGrp(edit: bool, query: bool, adjustableColumn2: int, adjustableColumn3: int, adjustableColumn4: int, adjustableColumn5: int, adjustableColumn6: int, adjustableColumn: int, annotation: str, columnAlign: List[Tuple[int, str]], changeCommand: Callable, columnAlign2: Tuple[str, str], columnOffset2: Tuple[int, int], columnAttach2: Tuple[str, str], columnWidth: List[Tuple[int, int]], columnWidth1: int, columnWidth2: Tuple[int, int], dragCommand: Callable, dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enableKeyboardFocus: bool, extraLabel: str, enable: bool, exists: bool, forceDragRefresh: bool, fullPathName: bool, height: int, invisible: int, isObscured: bool, label: str, manage: bool, maxValue: int, minValue: int, noBackground: bool, numberOfPopupMenus: bool, parent: str, popupMenuArray: bool, preventOverride: bool, statusBarMessage: str, useTemplate: str, value: int, visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def colorInputWidgetGrp(edit: bool, query: bool, adjustableColumn2: int, adjustableColumn3: int, adjustableColumn4: int, adjustableColumn5: int, adjustableColumn6: int, adjustableColumn: int, annotation: str, columnAlign: List[Tuple[int, str]], changeCommand: Callable, columnAlign2: Tuple[str, str], columnOffset2: Tuple[int, int], columnAttach2: Tuple[str, str], columnWidth: List[Tuple[int, int]], columnWidth1: int, columnWidth2: Tuple[int, int], dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enableKeyboardFocus: bool, enable: bool, exists: bool, fullPathName: bool, height: int, isObscured: bool, label: str, manage: bool, noBackground: bool, numberOfPopupMenus: bool, parent: str, popupMenuArray: bool, preventOverride: bool, statusBarMessage: str, useTemplate: str, visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def colorManagementCatalog(addTransform: str, editUserTransformPath: str, listSupportedExtensions: bool, listTransformConnections: bool, path: str, queryUserTransformPath: bool, removeTransform: str, transformConnection: str, type: str) -> Any: ...
def colorManagementConvert() -> Any: ...
def colorManagementFileRules(edit: bool, query: bool, addRule: str, colorSpace: str, colorSpaceNames: bool, down: str, enabled: bool, evaluate: str, extension: str, load: bool, listRules: bool, pattern: str, restoreDefaults: bool, remove: str, save: bool, moveUp: str) -> Any: ...
def colorManagementPrefs(edit: bool, query: bool, cmConfigFileEnabled: bool, configFilePath: str, configFileVersion: str, colorManageAllNodes: bool, cmEnabled: bool, colorManagedNodes: bool, colorManagePots: bool, colorManagementSDKVersion: str, defaultInputSpaceName: str, displayName: str, displayNames: bool, exportPolicy: str, inhibitEvents: bool, inputSpaceNames: bool, loadedDisplayName: str, loadedDefaultInputSpaceName: str, loadedOutputTransformName: str, loadPolicy: str, loadedRenderingSpaceName: str, loadedViewName: str, loadedViewTransformName: str, missingColorSpaceNodes: bool, ociov2Enabled: bool, ocioRulesEnabled: bool, outputTransformUseColorConversion: bool, outputTransformEnabled: bool, outputTransformName: str, outputTransformNames: bool, outputUseViewTransform: bool, policyFileName: str, popupOnError: bool, restoreDefaults: bool, refresh: bool, renderingSpaceName: str, renderingSpaceNames: bool, viewName: str, viewNames: bool, viewTransformName: str, viewTransformNames: bool) -> Any: ...
def colorSliderButtonGrp(edit: bool, query: bool, adjustableColumn2: int, adjustableColumn3: int, adjustableColumn4: int, adjustableColumn5: int, adjustableColumn6: int, adjustableColumn: int, annotation: str, buttonCommand: Callable, buttonLabel: str, columnAlign: List[Tuple[int, str]], changeCommand: Callable, columnAlign2: Tuple[str, str], columnOffset2: Tuple[int, int], columnAttach2: Tuple[str, str], columnWidth: List[Tuple[int, int]], columnWidth1: int, columnWidth2: Tuple[int, int], dragCommand: Callable, dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enableKeyboardFocus: bool, enable: bool, exists: bool, forceDragRefresh: bool, fullPathName: bool, height: int, image: str, isObscured: bool, label: str, manage: bool, noBackground: bool, numberOfPopupMenus: bool, parent: str, popupMenuArray: bool, preventOverride: bool, symbolButtonCommand: Callable, symbolButtonDisplay: bool, statusBarMessage: str, useTemplate: str, visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def colorSliderGrp(edit: bool, query: bool, adjustableColumn2: int, adjustableColumn3: int, adjustableColumn4: int, adjustableColumn5: int, adjustableColumn6: int, adjustableColumn: int, annotation: str, columnAlign: List[Tuple[int, str]], changeCommand: Callable, columnAlign2: Tuple[str, str], columnOffset2: Tuple[int, int], columnAttach2: Tuple[str, str], columnWidth: List[Tuple[int, int]], columnWidth1: int, columnWidth2: Tuple[int, int], dragCommand: Callable, dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enableKeyboardFocus: bool, enable: bool, exists: bool, forceDragRefresh: bool, fullPathName: bool, height: int, isObscured: bool, label: str, manage: bool, noBackground: bool, numberOfPopupMenus: bool, parent: str, popupMenuArray: bool, preventOverride: bool, statusBarMessage: str, useTemplate: str, visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def columnLayout(edit: bool, query: bool, adjustableColumn: bool, annotation: str, childArray: bool, columnAlign: str, columnAttach: Tuple[str, int], columnOffset: Tuple[str, int], columnWidth: int, dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enableKeyboardFocus: bool, enable: bool, exists: bool, fullPathName: bool, height: int, isObscured: bool, manage: bool, noBackground: bool, numberOfChildren: bool, numberOfPopupMenus: bool, parent: str, popupMenuArray: bool, preventOverride: bool, rowSpacing: int, statusBarMessage: str, useTemplate: str, visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def combinationShape(edit: bool, query: bool, addDriver: bool, allDrivers: bool, combineMethod: int, driverTargetIndex: List[int], driverTargetName: List[str], exist: bool, removeDriver: bool) -> Any: ...
def commandEcho(query: bool, lineNumbers: bool, state: bool) -> Any: ...
def commandLine(edit: bool, query: bool, annotation: str, command: Callable, dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enterCommand: Callable, enableKeyboardFocus: bool, enable: bool, exists: bool, fullPathName: bool, height: int, holdFocus: bool, inputAnnotation: str, isObscured: bool, manage: bool, noBackground: bool, numberOfHistoryLines: int, numberOfPopupMenus: bool, outputAnnotation: str, parent: str, popupMenuArray: bool, preventOverride: bool, statusBarMessage: str, sourceType: str, useTemplate: str, visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def commandLogging(query: bool, historySize: int, logCommands: bool, logFile: str, recordCommands: bool, resetLogFile: bool) -> Any: ...
def commandPort(query: bool, bufferSize: int, close: bool, echoOutput: bool, listPorts: bool, name: str, noreturn: bool, outputVar: str, pickleOutput: bool, prefix: str, returnNumCommands: bool, sourceType: str, securityWarning: bool) -> Any: ...
def componentBox(edit: bool, query: bool, annotation: str, dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enableKeyboardFocus: bool, enable: bool, exists: bool, fullPathName: bool, height: int, isObscured: bool, labelWidth: int, manage: bool, maxHeight: int, maxWidth: int, noBackground: bool, numberOfPopupMenus: bool, parent: str, popupMenuArray: bool, preventOverride: bool, precision: int, rowHeight: int, statusBarMessage: str, selectedAttr: bool, useTemplate: str, visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def componentEditor(edit: bool, query: bool, control: bool, defineTemplate: str, docTag: str, exists: bool, filter: str, floatField: str, forceMainConnection: str, floatSlider: str, highlightConnection: str, hidePathName: bool, hideZeroColumns: bool, justifyHeaders: int, lockMainConnection: bool, lockInput: bool, mainListConnection: str, operationCount: bool, operationLabels: bool, operationType: int, parent: str, panel: str, precision: int, removeTab: str, sortAlpha: bool, selected: bool, selectionConnection: str, showNamespaces: bool, showObjects: bool, setOperationLabel: Tuple[int, str], showSelected: bool, stateString: bool, unlockMainConnection: bool, unParent: bool, updateMainConnection: bool, useTemplate: str) -> Any: ...
def condition(edit: bool, query: bool, dependency: List[str], delete: bool, initialize: bool, script: str, state: bool) -> Any: ...
def cone(edit: bool, query: bool, caching: bool, constructionHistory: bool, degree: int, endSweep: float, frozen: bool, heightRatio: float, name: str, nodeState: int, spans: int, object: bool, useOldInitBehaviour: bool, polygon: int, radius: float, sections: int, startSweep: float, tolerance: float, useTolerance: bool) -> Any: ...
def confirmDialog(annotation: List[str], button: List[str], cancelButton: str, defaultButton: str, dismissString: str, icon: str, message: str, messageAlign: str, parent: str, title: str) -> Any: ...
def connectAttr(force: bool, lock: bool, nextAvailable: bool, referenceDest: str) -> Any: ...
def connectControl(fileName: bool, includeChildren: bool, index: int, preventContextualMenu: bool, preventOverride: bool) -> Any: ...
def connectDynamic(addScriptHandler: Callable, collisions: List[str], delete: bool, emitters: List[str], fields: List[str], removeScriptHandler: int) -> Any: ...
def connectJoint(connectMode: bool, parentMode: bool) -> Any: ...
def connectionInfo(destinationFromSource: bool, getExactDestination: bool, getExactSource: bool, getLockedAncestor: bool, isDestination: bool, isExactDestination: bool, isExactSource: bool, isLocked: bool, isSource: bool, sourceFromDestination: bool) -> Any: ...
def constrain(edit: bool, query: bool, barrier: bool, damping: float, directionalHinge: bool, hinge: bool, interpenetrate: bool, name: str, nail: bool, pinConstraint: bool, restLength: float, spring: bool, stiffness: float) -> Any: ...
def constructionHistory(query: bool, toggle: bool) -> Any: ...
def container(edit: bool, query: bool, bindAttr: Tuple[str, str], current: bool, connectionList: bool, force: bool, includeHierarchyAbove: bool, includeHierarchyBelow: bool, includeNetwork: bool, includeNetworkDetails: List[str], isContainer: bool, includeShaders: bool, includeShapes: bool, includeTransform: bool, name: str, nodeList: bool, nodeNamePrefix: bool, preview: bool, publishAsChild: Tuple[str, str], publishAsParent: Tuple[str, str], parentContainer: bool, publishAndBind: Tuple[str, str], publishConnections: bool, publishName: str, removeContainer: bool, type: str, unbindAttr: Tuple[str, str], unbindAndUnpublish: str, unpublishName: str, unbindChild: str, unbindParent: str, unpublishChild: str, unpublishParent: str, unsortedOrder: bool) -> Any: ...
def containerBind(edit: bool, query: bool, allNames: bool, bindingSetConditions: bool, bindingSetList: bool, force: bool, preview: bool) -> Any: ...
def containerProxy(edit: bool, query: bool, fromTemplate: str, type: str) -> Any: ...
def containerPublish(edit: bool, query: bool, bindNode: Tuple[str, str], bindTemplateStandins: bool, inConnections: bool, mergeShared: bool, outConnections: bool, publishNode: Tuple[str, str], unbindNode: str, unpublishNode: str) -> Any: ...
def containerTemplate(edit: bool, query: bool, addBindingSet: str, allKeyable: bool, attributeList: str, addNames: bool, attribute: List[str], addView: str, baseName: str, bindingSetList: str, childAnchor: bool, delete: bool, expandCompounds: bool, exists: bool, force: bool, fromContainer: str, fileName: str, fromSelection: bool, load: bool, layoutMode: int, parentAnchor: bool, publishedNodeList: str, removeBindingSet: str, rootTransform: bool, removeView: str, save: bool, silent: bool, searchPath: str, templateList: str, unload: bool, updateBindingSet: str, useHierarchy: bool, viewList: str) -> Any: ...
def containerView(edit: bool, query: bool, itemList: bool, viewLabel: bool, viewDescription: bool, viewList: bool) -> Any: ...
def contentBrowser(edit: bool, query: bool, addContentPath: str, control: bool, defineTemplate: str, docTag: str, exists: bool, filter: str, forceMainConnection: str, highlightConnection: str, lockMainConnection: bool, location: str, mainListConnection: str, parent: str, panel: str, preview: bool, removeContentPath: str, refreshTreeView: bool, saveCurrentContext: bool, selectionConnection: str, stateString: bool, thumbnailView: bool, treeView: bool, unlockMainConnection: bool, unParent: bool, updateMainConnection: bool, useTemplate: str) -> Any: ...
def contextInfo(edit: bool, query: bool, c: bool, escapeContext: bool, exists: bool, image1: bool, image2: bool, image3: bool, apiImage1: str, title: bool) -> Any: ...
def control(edit: bool, query: bool, annotation: str, dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enableKeyboardFocus: bool, enable: bool, exists: bool, fullPathName: bool, height: int, isObscured: bool, manage: bool, noBackground: bool, numberOfPopupMenus: bool, parent: str, popupMenuArray: bool, preventOverride: bool, statusBarMessage: str, useTemplate: str, visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def controller(edit: bool, query: bool, allControllers: bool, children: bool, group: bool, isController: str, index: int, parent: bool, pickWalkDown: bool, pickWalkLeft: bool, pickWalkRight: bool, pickWalkUp: bool, unparent: bool) -> Any: ...
def convertIffToPsd(query: bool, iffFileName: str, psdFileName: str, xResolution: int, yResolution: int) -> Any: ...
def convertSolidTx(edit: bool, query: bool, antiAlias: bool, alpha: bool, backgroundMode: str, camera: str, componentRange: bool, doubleSided: bool, force: bool, fileFormat: str, fileImageName: str, fillTextureSeams: bool, fullUvRange: bool, name: str, pixelFormat: str, reuseDepthMap: bool, resolutionX: int, resolutionY: int, shadows: bool, samplePlane: bool, uvBBoxIntersect: bool, uvSetName: str) -> Any: ...
def convertTessellation(allCameras: bool, camera: str) -> Any: ...
def convertUnit(fromUnit: str, toUnit: str) -> Any: ...
def copyAttr(edit: bool, query: bool, attribute: List[str], containerParentChild: bool, inConnections: bool, keepSourceConnections: bool, outConnections: bool, renameTargetContainer: bool, values: bool) -> Any: ...
def copyDeformerWeights(edit: bool, query: bool, destinationDeformer: str, destinationShape: str, mirrorInverse: bool, mirrorMode: str, noMirror: bool, surfaceAssociation: str, sourceDeformer: str, smooth: bool, sourceShape: str, uvSpace: Tuple[str, str]) -> Any: ...
def copyFlexor() -> Any: ...
def copyKey(animLayer: str, animation: str, clipboard: str, forceIndependentEulerAngles: bool, includeUpperBound: bool, option: str) -> Any: ...
def copyNode() -> Any: ...
def copySkinWeights(edit: bool, query: bool, destinationSkin: str, influenceAssociation: List[str], mirrorInverse: bool, mirrorMode: str, noBlendWeight: bool, noMirror: bool, normalize: bool, surfaceAssociation: str, smooth: bool, sampleSpace: int, sourceSkin: str, uvSpace: Tuple[str, str]) -> Any: ...
def crashInfo(query: bool, crashFile: bool, savedBeforeCrash: bool) -> Any: ...
def crashInfoCmd(*args, **kwargs) -> Any: ...
def createAttrPatterns(patternDefinition: str, patternFile: str, patternType: str) -> Any: ...
def createDisplayLayer(empty: bool, makeCurrent: bool, name: str, noRecurse: bool, number: int) -> Any: ...
def createEditor(noCloseOnDelete: bool, queueForDelete: bool) -> Any: ...
def createLayeredPsdFile(*args, **kwargs) -> Any: ...
def createNode(name: str, parent: str, shared: bool, skipSelect: bool) -> Any: ...
def createNurbsCircleCtx(*args, **kwargs) -> Any: ...
def createNurbsConeCtx(*args, **kwargs) -> Any: ...
def createNurbsCubeCtx(*args, **kwargs) -> Any: ...
def createNurbsCylinderCtx(*args, **kwargs) -> Any: ...
def createNurbsPlaneCtx(*args, **kwargs) -> Any: ...
def createNurbsSphereCtx(*args, **kwargs) -> Any: ...
def createNurbsSquareCtx(*args, **kwargs) -> Any: ...
def createNurbsTorusCtx(*args, **kwargs) -> Any: ...
def createPolyConeCtx(*args, **kwargs) -> Any: ...
def createPolyCubeCtx(*args, **kwargs) -> Any: ...
def createPolyCylinderCtx(*args, **kwargs) -> Any: ...
def createPolyHelixCtx(*args, **kwargs) -> Any: ...
def createPolyPipeCtx(*args, **kwargs) -> Any: ...
def createPolyPlaneCtx(*args, **kwargs) -> Any: ...
def createPolyPlatonicSolidCtx(*args, **kwargs) -> Any: ...
def createPolyPrismCtx(*args, **kwargs) -> Any: ...
def createPolyPyramidCtx(*args, **kwargs) -> Any: ...
def createPolySoccerBallCtx(*args, **kwargs) -> Any: ...
def createPolySphereCtx(*args, **kwargs) -> Any: ...
def createPolyTorusCtx(*args, **kwargs) -> Any: ...
def createRenderLayer(empty: bool, g: bool, makeCurrent: bool, name: str, noRecurse: bool, number: int) -> Any: ...
def createSubdivRegion(*args, **kwargs) -> Any: ...
def ctxAbort() -> Any: ...
def ctxCompletion() -> Any: ...
def ctxEditMode(buttonDown: bool, buttonUp: bool) -> Any: ...
def ctxTraverse(down: bool, left: bool, right: bool) -> Any: ...
def currentCtx() -> Any: ...
def currentTime(edit: bool, query: bool, update: bool) -> Any: ...
def currentTimeCtx(edit: bool, query: bool, history: bool, exists: bool, image1: str, image2: str, image3: str, name: str) -> Any: ...
def currentUnit(query: bool, angle: str, fullName: bool, linear: str, time: str, updateAnimation: bool) -> Any: ...
def curve(append: bool, bezier: bool, degree: float, knot: List[float], name: str, objectSpace: bool, periodic: bool, replace: bool, worldSpace: bool) -> Any: ...
def curveAddPtCtx(*args, **kwargs) -> Any: ...
def curveBezierCtx(*args, **kwargs) -> Any: ...
def curveCVCtx(*args, **kwargs) -> Any: ...
def curveEPCtx(*args, **kwargs) -> Any: ...
def curveEditorCtx(*args, **kwargs) -> Any: ...
def curveIntersect(edit: bool, query: bool, caching: bool, constructionHistory: bool, directionX: float, directionY: float, directionZ: float, frozen: bool, nodeState: int, tolerance: float, useDirection: bool) -> Any: ...
def curveMoveEPCtx(*args, **kwargs) -> Any: ...
def curveOnSurface(append: bool, degree: float, knot: List[float], name: str, periodic: bool, replace: bool, positionUV: List[Tuple[float, float]]) -> Any: ...
def curveRGBColor(query: bool, hueSaturationValue: bool, list: bool, listNames: bool, remove: bool, resetToFactory: bool, resetToSaved: bool) -> Any: ...
def curveSketchCtx(*args, **kwargs) -> Any: ...
def cutKey(animation: str, clear: bool, includeUpperBound: bool, option: str, selectKey: bool) -> Any: ...
def cycleCheck(query: bool, children: bool, evaluation: bool, firstCycleOnly: bool, firstPlugPerNode: bool, list: bool, lastPlugPerNode: bool, listSeparator: str, parents: bool, secondary: bool, timeLimit: int) -> Any: ...
def cylinder(edit: bool, query: bool, caching: bool, constructionHistory: bool, degree: int, endSweep: float, frozen: bool, heightRatio: float, name: str, nodeState: int, spans: int, object: bool, polygon: int, radius: float, sections: int, startSweep: float, tolerance: float, useTolerance: bool) -> Any: ...
def dagCommandWrapper() -> Any: ...
def dagObjectCompare(attribute: bool, bail: str, connection: bool, namespace: str, relative: bool, short: bool, type: bool) -> Any: ...
def dagObjectHit(cache: bool, multiple: bool, menu: str, targetSize: int) -> Any: ...
def dagPose(edit: bool, query: bool, addToPose: bool, atPose: bool, bindPose: bool, g: bool, members: bool, name: str, restore: bool, remove: bool, reset: bool, save: bool, selection: bool, worldParent: bool) -> Any: ...
def dataStructure(query: bool, asFile: str, asString: str, dataType: bool, listMemberNames: str, removeAll: bool, remove: bool) -> Any: ...
def date(date: bool, format: str, shortDate: bool, shortTime: bool, time: bool) -> Any: ...
def dbcount(enabled: bool, file: str, keyword: str, list: bool, maxdepth: int, quick: bool, reset: bool, spreadsheet: bool) -> Any: ...
def dbfootprint(query: bool, allObjects: bool, outputFile: str) -> Any: ...
def dbmessage(file: str, list: bool, monitor: bool, type: str) -> Any: ...
def dbpeek(query: bool, allObjects: bool, count: int, evaluationGraph: bool, outputFile: str) -> Any: ...
def dbtrace(query: bool, filter: str, info: bool, mark: bool, output: str, title: str, timed: bool, verbose: bool) -> Any: ...
def debug(*args, **kwargs) -> Any: ...
def debugNamespace(*args, **kwargs) -> Any: ...
def debugVar(*args, **kwargs) -> Any: ...
def defaultLightListCheckBox(*args, **kwargs) -> Any: ...
def defaultNavigation(connectToExisting: bool, createNew: bool, destination: str, defaultAttribute: bool, delete: bool, disconnect: bool, defaultTraversal: bool, defaultWorkingNode: bool, force: bool, ignore: bool, navigatorDecisionString: str, quiet: bool, relatedNodes: bool, source: str, unignore: bool) -> Any: ...
def defineDataServer(*args, **kwargs) -> Any: ...
def defineVirtualDevice(*args, **kwargs) -> Any: ...
def deformableShape(chain: bool, createOriginalGeometry: bool, createUpstreamTagInjectionNode: bool, createTweakNode: bool, frontOfChain: bool, localShapeInAttr: bool, localShapeOutAttr: bool, nodeChain: bool, outputPlugChain: bool, originalGeometry: bool, plugChain: bool, tagInjectionNode: bool, tagInjectionList: bool, tweakNode: bool, upstreamTagInjectionNode: bool, worldShapeOutAttr: bool) -> Any: ...
def deformer(edit: bool, query: bool, after: bool, afterReference: bool, before: bool, deformerTools: bool, exclusive: str, frontOfChain: bool, geometry: List[str], geometryIndices: bool, includeHiddenSelections: bool, ignoreSelected: bool, name: str, parallel: bool, prune: bool, split: bool, type: str, useComponentTags: bool) -> Any: ...
def deformerWeights(edit: bool, query: bool, attribute: List[str], deformer: List[str], defaultValue: float, export: bool, format: str, ignoreName: bool, im: bool, method: str, path: str, positionTolerance: float, remap: List[str], shape: List[str], skip: List[str], vertexConnections: bool, weightPrecision: int, worldSpace: bool, weightTolerance: float) -> Any: ...
def delete(channels: bool, constructionHistory: bool, constraints: bool, expressions: bool, inputConnectionsAndNodes: bool, motionPaths: bool, staticChannels: bool, timeAnimationCurves: bool, unitlessAnimationCurves: bool) -> Any: ...
def deleteAttr(edit: bool, query: bool, attribute: str) -> Any: ...
def deleteAttrPattern(allPatterns: bool, patternName: str, patternType: str) -> Any: ...
def deleteExtension(attribute: str, forceDelete: bool, nodeType: str) -> Any: ...
def deleteGeometryCache() -> Any: ...
def deleteHistoryAheadOfGeomCache() -> Any: ...
def deleteNclothCache() -> Any: ...
def deleteUI(collection: bool, control: bool, editor: bool, layout: bool, menu: bool, menuItem: bool, panelConfig: bool, panel: bool, radioMenuItemCollection: bool, toolContext: bool, uiTemplate: bool, window: bool) -> Any: ...
def deltaMush(edit: bool, query: bool, after: bool, afterReference: bool, before: bool, deformerTools: bool, envelope: float, exclusive: str, frontOfChain: bool, geometry: List[str], geometryIndices: bool, includeHiddenSelections: bool, ignoreSelected: bool, inwardConstraint: float, name: str, outwardConstraint: float, parallel: bool, pinBorderVertices: bool, prune: bool, smoothingIterations: int, split: bool, smoothingStep: float, useComponentTags: bool) -> Any: ...
def detachCurve(edit: bool, query: bool, caching: bool, constructionHistory: bool, curveOnSurface: bool, frozen: bool, keep: List[bool], name: str, nodeState: int, object: bool, parameter: List[float], replaceOriginal: bool) -> Any: ...
def detachDeviceAttr(*args, **kwargs) -> Any: ...
def detachSurface(edit: bool, query: bool, caching: bool, constructionHistory: bool, direction: int, frozen: bool, keep: List[bool], name: str, nodeState: int, object: bool, parameter: List[float], replaceOriginal: bool) -> Any: ...
def deviceEditor(*args, **kwargs) -> Any: ...
def deviceManager(*args, **kwargs) -> Any: ...
def devicePanel(*args, **kwargs) -> Any: ...
def dgControl(*args, **kwargs) -> Any: ...
def dgInfo(allNodes: bool, connections: bool, dirty: bool, nodes: bool, nonDeletable: bool, type: str, outputFile: str, propagation: bool, short: bool, subgraph: bool, size: bool) -> Any: ...
def dgPerformance(*args, **kwargs) -> Any: ...
def dgValidateCurve(allCurves: bool, verbose: bool) -> Any: ...
def dgcontrol(iomode: bool) -> Any: ...
def dgdebug(*args, **kwargs) -> Any: ...
def dgdirty(query: bool, allPlugs: bool, clean: bool, implicit: bool, list: str, propagation: bool, showTiming: bool, verbose: bool) -> Any: ...
def dgeval(verbose: bool) -> Any: ...
def dgfilter(*args, **kwargs) -> Any: ...
def dgmodified() -> Any: ...
def dgstats(*args, **kwargs) -> Any: ...
def dgtimer(query: bool, combineType: bool, hierarchy: bool, hide: List[str], maxDisplay: int, name: str, noHeader: bool, timerOff: bool, overhead: bool, timerOn: bool, reset: bool, returnCode: str, rangeLower: float, rangeUpper: float, returnType: str, show: List[str], sortMetric: str, sortType: str, type: str, threshold: float, trace: bool, updateHeatMap: int, uniqueName: bool) -> Any: ...
def dimWhen(clear: bool, false: bool, true: bool) -> Any: ...
def directConnectPath() -> Any: ...
def directKeyCtx(edit: bool, query: bool, history: bool, exists: bool, image1: str, image2: str, image3: str, name: str, option: str, selectedOnly: bool) -> Any: ...
def directionalLight(edit: bool, query: bool, decayRate: int, discRadius: float, exclusive: bool, intensity: float, name: str, useRayTraceShadows: bool, shadowDither: float, shadowSamples: int, softShadow: bool) -> Any: ...
def dirmap(query: bool, convertDirectory: str, enable: bool, getAllMappings: bool, getMappedDirectory: str, mapDirectory: Tuple[str, str], unmapDirectory: str) -> Any: ...
def disable(value: bool) -> Any: ...
def disableIncorrectNameWarning() -> Any: ...
def disconnectAttr(nextAvailable: bool) -> Any: ...
def disconnectJoint(attachHandleMode: bool, deleteHandleMode: bool) -> Any: ...
def diskCache(query: bool, append: bool, close: str, closeAll: bool, cacheType: str, delete: str, deleteAll: bool, empty: str, emptyAll: bool, enabledCachesOnly: bool, endTime: int, frameRangeType: str, overSample: bool, samplingRate: int, startTime: int, tempDir: bool) -> Any: ...
def dispatchGenericCommand() -> Any: ...
def displacementToPoly(edit: bool, query: bool, findBboxOnly: bool) -> Any: ...
def displayAffected(query: bool) -> Any: ...
def displayColor(query: bool, active: bool, create: bool, dormant: bool, list: bool, queryIndex: int, resetToFactory: bool, resetToSaved: bool) -> Any: ...
def displayCull(query: bool, backFaceCulling: bool) -> Any: ...
def displayLevelOfDetail(query: bool, levelOfDetail: bool) -> Any: ...
def displayPref(query: bool, activeObjectPivots: bool, displayAffected: bool, defaultFontSize: int, displayGradient: bool, fontSettingMode: int, lineWidth: float, maxHardwareTextureResolution: bool, materialLoadingMode: str, maxTextureResolution: int, purgeExistingTextures: bool, regionOfEffect: bool, smallFontSize: int, shadeTemplates: bool, textureDrawPixel: bool, wireframeOnShadedActive: str) -> Any: ...
def displayRGBColor(query: bool, create: bool, hueSaturationValue: bool, list: bool, resetToFactory: bool, resetToSaved: bool) -> Any: ...
def displaySmoothness(query: bool, boundary: bool, defaultCreation: bool, divisionsU: int, divisionsV: int, full: bool, hull: bool, polygonObject: int, pointsShaded: int, pointsWire: int, renderTessellation: bool, simplifyU: int, simplifyV: int) -> Any: ...
def displayStats(query: bool, frameRate: bool) -> Any: ...
def displayString(query: bool, delete: bool, exists: bool, keys: bool, replace: bool, value: str) -> Any: ...
def displaySurface(query: bool, flipNormals: bool, twoSidedLighting: bool, xRay: bool) -> Any: ...
def distanceDimContext(edit: bool, query: bool, history: bool, exists: bool, image1: str, image2: str, image3: str, name: str) -> Any: ...
def distanceDimension() -> Any: ...
def doBlur(colorFile: str, length: float, smooth: float, memCapSize: float, smoothColor: bool, sharpness: float, vectorFile: str) -> Any: ...
def dockControl(edit: bool, query: bool, area: str, allowedArea: List[str], annotation: str, closeCommand: str, content: str, dragCallback: Callable, dropCallback: Callable, dockStation: str, defineTemplate: str, docTag: str, enableBackground: bool, enableKeyboardFocus: bool, enable: bool, enablePopupOption: bool, exists: bool, floatChangeCommand: Callable, fixedHeight: bool, floating: bool, fullPathName: bool, fixedWidth: bool, height: int, isObscured: bool, label: str, manage: bool, moveable: bool, noBackground: bool, numberOfPopupMenus: bool, parent: str, popupMenuArray: bool, preventOverride: bool, r: bool, retain: bool, sizeable: bool, statusBarMessage: str, splitLayout: str, state: str, useTemplate: str, visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def dolly(absolute: bool, distance: float, dollyTowardsCenter: bool, orthoScale: float, relative: bool) -> Any: ...
def dollyCtx(edit: bool, query: bool, alternateContext: bool, boxDollyType: str, centerOfInterestDolly: bool, history: bool, dollyTowardsCenter: bool, exists: bool, image1: str, image2: str, image3: str, localDolly: bool, name: str, orthoZoom: bool, scale: float, toolName: str) -> Any: ...
def dopeSheetEditor(edit: bool, query: bool, autoFit: str, autoFitTime: str, control: bool, displayActiveKeys: str, displayActiveKeyTangents: str, displayInfinities: str, displayKeys: str, defineTemplate: str, docTag: str, displayTangents: str, displayValues: str, exists: bool, filter: str, forceMainConnection: str, hierarchyBelow: bool, highlightConnection: str, lookAt: str, lockMainConnection: bool, mainListConnection: str, outliner: str, parent: str, panel: str, showScene: bool, selectionConnection: str, showSummary: bool, snapTime: str, showTicks: bool, stateString: bool, snapValue: str, unlockMainConnection: bool, unParent: bool, updateMainConnection: bool, useTemplate: str) -> Any: ...
def doubleProfileBirailSurface(edit: bool, query: bool, blendFactor: float, caching: bool, constructionHistory: bool, frozen: bool, name: str, nodeState: int, object: bool, polygon: int, transformMode: int, tangentContinuityProfile1: bool, tangentContinuityProfile2: bool) -> Any: ...
def dpBirailCtx(*args, **kwargs) -> Any: ...
def drag(edit: bool, query: bool, attenuation: float, directionX: float, directionY: float, directionZ: float, magnitude: float, maxDistance: float, name: str, perVertex: bool, torusSectionRadius: float, useDirection: bool, volumeExclusion: bool, volumeShape: str, volumeSweep: float) -> Any: ...
def dragAttrContext(edit: bool, query: bool, history: bool, connectTo: List[str], exists: bool, image1: str, image2: str, image3: str, name: str, reset: bool) -> Any: ...
def draggerContext(edit: bool, query: bool, button: int, history: bool, currentStep: int, cursor: str, dragCommand: Callable, drawString: str, exists: bool, finalize: Callable, holdCommand: Callable, helpString: str, image1: str, image2: str, image3: str, initialize: Callable, modifier: str, name: str, pressCommand: Callable, prePressCommand: Callable, projection: str, releaseCommand: Callable, stepsCount: int, snapping: bool, space: str, undoMode: str) -> Any: ...
def drawExtrudeFacetCtx(*args, **kwargs) -> Any: ...
def dropoffLocator() -> Any: ...
def duplicate(inputConnections: bool, instanceLeaf: bool, name: str, parentOnly: bool, renameChildren: bool, returnRootsOnly: bool, smartTransform: bool, transformsOnly: bool, upstreamNodes: bool) -> Any: ...
def duplicateCurve(edit: bool, query: bool, caching: bool, constructionHistory: bool, frozen: bool, local: bool, maxValue: float, mergeItems: bool, minValue: float, name: str, nodeState: int, object: bool, relative: bool, range: bool) -> Any: ...
def duplicateSurface(edit: bool, query: bool, caching: bool, constructionHistory: bool, faceCountU: int, faceCountV: int, firstFaceU: int, firstFaceV: int, frozen: bool, local: bool, mergeItems: bool, name: str, nodeState: int, object: bool) -> Any: ...
def dynCache() -> Any: ...
def dynControl(autoCreate: bool, oversample: int, particleCache: bool, particleLOD: float, particlesOn: bool, rigidOn: bool, seed: int, startTime: int, traceDepth: int) -> Any: ...
def dynExport(allObjects: bool, attribute: List[str], format: str, minFrame: int, maxFrame: int, overSampling: int, onlyUpdateParticles: bool, path: str) -> Any: ...
def dynExpression(edit: bool, query: bool, creation: bool, runtime: bool, runtimeAfterDynamics: bool, runtimeBeforeDynamics: bool, string: str) -> Any: ...
def dynGlobals(edit: bool, query: bool, active: bool, listAll: bool, overSampling: int) -> Any: ...
def dynPaintCtx(*args, **kwargs) -> Any: ...
def dynPaintEditor(*args, **kwargs) -> Any: ...
def dynParticleCtx(edit: bool, query: bool, conserve: float, history: bool, cursorPlacement: bool, exists: bool, grid: bool, gridSpacing: float, image1: str, image2: str, image3: str, jitterRadius: float, lowerLeftX: float, lowerLeftY: float, lowerLeftZ: float, name: str, nucleus: bool, numJitters: int, particleName: str, sketch: bool, sketchInterval: int, textPlacement: bool, upperRightX: float, upperRightY: float, upperZ: float) -> Any: ...
def dynPref(query: bool, autoCreate: bool, echoCollision: bool, runupFrom: int, runupToCurrentTime: bool, saveOnQuit: bool, saveRuntimeState: bool) -> Any: ...
def dynSelectCtx(*args, **kwargs) -> Any: ...
def dynTestData(arrayAttrs: bool, verbose: bool) -> Any: ...
def dynWireCtx(*args, **kwargs) -> Any: ...
def dynamicConstraintRemove() -> Any: ...
def dynamicLoad(query: bool) -> Any: ...
def editDisplayLayerGlobals(query: bool, baseId: int, currentDisplayLayer: str, mergeType: int, useCurrent: bool) -> Any: ...
def editDisplayLayerMembers(query: bool, fullNames: bool, noRecurse: bool) -> Any: ...
def editImportedStatus() -> Any: ...
def editMetadata(memberName: str, remove: bool, scene: bool, stringValue: List[str], value: List[float]) -> Any: ...
def editRenderLayerAdjustment(query: bool, attributeLog: bool, layer: str, nodeLog: bool, remove: bool) -> Any: ...
def editRenderLayerGlobals(query: bool, baseId: int, currentRenderLayer: str, enableAutoAdjustments: bool, mergeType: int, useCurrent: bool) -> Any: ...
def editRenderLayerMembers(query: bool, fullNames: bool, noRecurse: bool, remove: bool) -> Any: ...
def editor(edit: bool, query: bool, control: bool, defineTemplate: str, docTag: str, exists: bool, filter: str, forceMainConnection: str, highlightConnection: str, lockMainConnection: bool, mainListConnection: str, parent: str, panel: str, selectionConnection: str, stateString: bool, unlockMainConnection: bool, unParent: bool, updateMainConnection: bool, useTemplate: str) -> Any: ...
def editorTemplate(addAdskAssetControls: bool, addComponents: bool, addExtraControls: bool, annotateFieldOnly: bool, annotation: str, addSeparator: bool, beginLayout: str, beginNoOptimize: bool, beginScrollLayout: bool, callCustom: Tuple[Callable, Callable], collapse: bool, debugMode: bool, extraControlsLabel: str, endLayout: bool, endNoOptimize: bool, endScrollLayout: bool, interruptOptimize: bool, label: str, listExtraAttributes: str, preventOverride: bool, queryControl: Tuple[str, str], queryLabel: Tuple[str, str], queryName: Tuple[str, str], removeControl: Tuple[str, str], suppress: str) -> Any: ...
def effector(edit: bool, query: bool, hide: bool, name: str) -> Any: ...
def emit(attribute: List[str], floatValue: List[float], object: str) -> Any: ...
def emitter(edit: bool, query: bool, awayFromCenter: float, awayFromAxis: float, alongAxis: float, aroundAxis: float, cycleEmission: str, cycleInterval: int, directionalSpeed: float, directionX: float, directionY: float, directionZ: float, minDistance: float, maxDistance: float, name: str, normalSpeed: float, needParentUV: bool, rate: float, randomDirection: float, spread: float, speed: float, speedRandom: float, scaleRateByObjectSize: bool, scaleSpeedBySize: bool, tangentSpeed: float, torusSectionRadius: float, type: str, volumeShape: str, volumeSweep: float) -> Any: ...
def enableDevice(*args, **kwargs) -> Any: ...
def encodeString() -> Any: ...
def error(noContext: bool, showLineNumber: bool) -> Any: ...
def eval(undoEnabled: bool) -> Any: ...
def evalContinue() -> Any: ...
def evalDeferred(evaluateNext: bool, lowPriority: bool, lowestPriority: bool, list: bool) -> Any: ...
def evalEcho() -> Any: ...
def evalNoSelectNotify() -> Any: ...
def evaluationManager(query: bool, cycleCluster: str, disableInfo: str, enabled: bool, fallbackTriggered: bool, idleAction: int, idleBuild: bool, invalidate: bool, mode: str, manipulation: bool, manipulationPrevalidation: bool, manipulationReady: bool, empty: bool, nodeTypeGloballySerialize: bool, nodeTypeParallel: bool, nodeTypeSerialize: bool, nodeTypeUntrusted: bool, safeMode: bool) -> Any: ...
def evaluationManagerInternal(query: bool, dataSharing: bool, dataTypeShare: bool) -> Any: ...
def evaluator(query: bool, configuration: List[str], clusters: bool, enable: bool, info: bool, nodeTypeChildren: bool, priority: int) -> Any: ...
def evaluatorInternal(query: bool, ready: bool) -> Any: ...
def event(edit: bool, query: bool, count: int, delete: bool, dieAtCollision: bool, emit: int, idNumber: int, list: bool, name: str, proc: Callable, random: bool, rename: str, select: bool, spread: float, split: int, target: str) -> Any: ...
def exactWorldBoundingBox(calculateExactly: bool, ignoreInvisible: bool) -> Any: ...
def exclusiveLightCheckBox(*args, **kwargs) -> Any: ...
def expandedSelection(depth: int, expansionType: str) -> Any: ...
def exportEdits(query: bool, editCommand: List[str], excludeHierarchy: bool, excludeNode: List[str], exportSelected: bool, force: bool, includeAnimation: bool, includeConstraints: bool, includeDeformers: bool, includeNode: List[str], includeNetwork: bool, includeSetAttrs: bool, includeShaders: bool, onReferenceNode: List[str], includeSetDrivenKeys: bool, selected: bool, type: str) -> Any: ...
def expression(edit: bool, query: bool, attribute: str, alwaysEvaluate: int, animated: int, name: str, object: str, string: str, safe: bool, shortNames: bool, timeDependent: bool, unitConversion: str) -> Any: ...
def expressionEditorListen(listenForAttr: str, listenForExpression: str, listenFile: str, listenForName: str, stopListenForAttr: str, stopListenForExpression: str, stopListenForName: str) -> Any: ...
def extendCurve(edit: bool, query: bool, caching: bool, constructionHistory: bool, curveOnSurface: bool, distance: float, extendMethod: int, extensionType: int, frozen: bool, join: bool, name: str, noChanges: bool, nodeState: int, object: bool, pointX: float, pointY: float, pointZ: float, removeMultipleKnots: bool, range: bool, replaceOriginal: bool, start: int) -> Any: ...
def extendFluid(edit: bool, query: bool, endD: int, endH: int, endW: int, startD: int, startH: int, startW: int) -> Any: ...
def extendSurface(edit: bool, query: bool, caching: bool, constructionHistory: bool, distance: float, extendDirection: int, extendMethod: int, extendSide: int, extensionType: int, frozen: bool, join: bool, name: str, noChanges: bool, nodeState: int, object: bool, replaceOriginal: bool) -> Any: ...
def extrude(edit: bool, query: bool, caching: bool, constructionHistory: bool, degreeAlongLength: int, directionX: float, directionY: float, directionZ: float, extrudeType: int, fixedPath: bool, frozen: bool, length: float, mergeItems: bool, name: str, nodeState: int, object: bool, polygon: int, rebuild: bool, range: bool, rotation: float, reverseSurfaceIfPathReversed: bool, scale: float, subCurveSubSurface: bool, useComponentPivot: int, useProfileNormal: bool) -> Any: ...
def falloffCurve(edit: bool, query: bool, addControlVertex: str, annotation: str, asString: str, changeCommand: Callable, customCurveWidget: int, currentKey: int, currentKeyValue: Tuple[float, float], deleteControlVertex: int, dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enableKeyboardFocus: bool, enable: bool, exists: bool, fullPathName: bool, height: int, isObscured: bool, manage: bool, noBackground: bool, numberOfPopupMenus: bool, optionVar: str, parent: str, popupMenuArray: bool, preventOverride: bool, readOnly: int, statusBarMessage: str, snapToGrid: int, useTemplate: str, visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def falloffCurveAttr(edit: bool, query: bool, addControlVertex: str, annotation: str, asString: str, attribute: str, changeCommand: Callable, customCurveWidget: int, currentKey: int, currentKeyValue: Tuple[float, float], deleteControlVertex: int, dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enableKeyboardFocus: bool, enable: bool, exists: bool, fullPathName: bool, height: int, isObscured: bool, manage: bool, noBackground: bool, numberOfPopupMenus: bool, parent: str, popupMenuArray: bool, preventOverride: bool, readOnly: int, statusBarMessage: str, selectedPositionControl: str, snapToGrid: int, selectedValueControl: str, useTemplate: str, visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def fcheck() -> Any: ...
def file(edit: bool, query: bool, activate: bool, anyModified: bool, absoluteName: bool, activeProxy: bool, applyTo: str, buildLoadSettings: bool, command: Tuple[str, str], constructionHistory: bool, channels: bool, compress: bool, copyNumberList: bool, constraints: bool, cleanReference: str, defaultExtensions: bool, defaultNamespace: bool, deferReference: bool, exportAll: bool, exportAnim: bool, exportAnimFromReference: bool, exportSelectedAnim: bool, editCommand: str, exportAsReference: bool, errorStatus: bool, exportSelected: bool, exportSelectedAnimFromReference: bool, exportSnapshotCallback: Tuple[Callable, str], executeScriptNodes: bool, exportSelectedNoReference: bool, exportSelectedStrict: bool, exportUnloadedReferences: bool, exists: bool, expandName: bool, expressions: bool, exportAsSegment: bool, force: bool, fileMetaData: bool, flushReference: str, groupLocator: bool, groupName: str, groupReference: bool, i: bool, importFrameRate: bool, importReference: bool, importTimeRange: str, ignoreVersion: bool, list: bool, loadAllDeferred: bool, loadAllReferences: bool, lockReference: bool, lockContainerUnpublished: bool, lockFile: bool, lastFileOption: bool, loadNoReferences: bool, location: bool, loadReference: str, loadReferenceDepth: str, loadReferencePreview: str, loadSettings: str, lastTempFile: bool, mergeBaseAnimLayer: bool, modified: bool, mergeNamespacesOnClash: bool, mergeNamespaceWithParent: bool, mergeNamespaceWithRoot: bool, mapPlaceHolderNamespace: List[Tuple[str, str]], moveSelected: bool, newFile: bool, namespace: str, open: bool, options: str, proxyManager: str, prompt: bool, preserveName: bool, parentNamespace: bool, postSaveScript: str, preserveReferences: bool, preSaveScript: str, proxyTag: str, preserveUndo: bool, preview: bool, reference: bool, renameAll: bool, referenceDepthInfo: int, removeDuplicateNetworks: bool, replaceName: List[Tuple[str, str]], resetError: bool, rename: str, returnNewNodes: bool, relativeNamespace: str, renamingPrefixList: bool, renamingPrefix: str, removeReference: bool, renameToSave: bool, reserveNamespaces: bool, save: bool, selectAll: bool, saveDiskCache: str, segment: str, shader: bool, sharedNodes: List[str], shortName: bool, sceneName: bool, swapNamespace: List[Tuple[str, str]], saveReference: bool, sharedReferenceFile: bool, saveReferencesUnloaded: bool, strict: bool, saveTextures: str, type: str, uiConfiguration: bool, uiLoadConfiguration: bool, unresolvedName: bool, usingNamespaces: bool, unloadReference: str, writable: bool, withoutCopyNumber: bool) -> Any: ...
def fileBrowserDialog(actionName: str, dialogStyle: int, fileCommand: Callable, filterList: List[str], fileType: str, includeName: str, mode: int, operationMode: str, tipMessage: str, windowTitle: str) -> Any: ...
def fileDialog(application: bool, defaultFileName: str, directoryMask: str, mode: int, title: str) -> Any: ...
def fileDialog2(buttonBoxOrientation: int, caption: str, cancelCaption: str, startingDirectory: str, dialogStyle: int, fileFilter: str, fileMode: int, fileTypeChanged: Callable, hideFileExtensions: bool, hideNameEdit: bool, optionsUICommit2: Callable, optionsUICancel: Callable, optionsUICommit: Callable, optionsUICreate: Callable, optionsUIInit: Callable, okCaption: str, returnFilter: bool, selectionChanged: Callable, selectFileFilter: str, setProjectBtnEnabled: bool) -> Any: ...
def fileInfo(query: bool, remove: str) -> Any: ...
def filePathEditor(query: bool, attributeOnly: bool, attributeType: str, copyAndRepath: Tuple[str, str], deregisterType: str, force: bool, listRegisteredTypes: bool, preview: bool, repath: str, replaceAll: bool, recursive: bool, relativeNames: bool, refresh: bool, replaceField: str, replaceString: Tuple[str, str], registerType: str, status: bool, temporary: bool, unresolved: bool, withAttribute: bool) -> Any: ...
def filletCurve(edit: bool, query: bool, bias: float, blendControl: bool, caching: bool, constructionHistory: bool, circular: bool, curveParameter1: float, curveParameter2: float, depth: float, freeformBlend: bool, frozen: bool, join: bool, name: str, nodeState: int, object: bool, radius: float, replaceOriginal: bool, trim: bool) -> Any: ...
def filter(*args, **kwargs) -> Any: ...
def filterButterworthCtx(edit: bool, query: bool, apply: bool, history: bool, cutoffFrequency: float, endTime: int, exists: bool, image1: str, image2: str, image3: str, keepKeysOnFrame: bool, name: str, preserveKeyTangent: List[str], startTime: int, selectedKeys: bool, samplingRate: float) -> Any: ...
def filterCurve(cutoffFrequency: float, endTime: int, filter: str, kernel: str, keepKeysOnFrame: bool, keySync: bool, minTimeStep: float, maxTimeStep: float, period: float, preserveKeyTangent: List[str], precisionMode: int, precision: float, startTime: int, sampleCount: int, selectedKeys: bool, samplingRate: float, tolerance: float, timeTolerance: float, useQuaternion: bool, width: int) -> Any: ...
def filterExpand(expand: bool, fullPath: bool, selectionMask: List[int], symActive: bool, symNegative: bool, symPositive: bool, symSeam: bool) -> Any: ...
def filterGaussianCtx(edit: bool, query: bool, apply: bool, history: bool, endTime: int, exists: bool, image1: str, image2: str, image3: str, name: str, startTime: int, sampleCount: int, selectedKeys: bool, useQuaternion: bool, width: int) -> Any: ...
def filterInstances(query: bool, shapes: bool) -> Any: ...
def filterKeyReducerCtx(edit: bool, query: bool, apply: bool, history: bool, endTime: int, exists: bool, image1: str, image2: str, image3: str, keySync: bool, name: str, preserveKeyTangent: List[str], precisionMode: int, precision: float, startTime: int, selectedKeys: bool) -> Any: ...
def filterPeakRemoverCtx(edit: bool, query: bool, apply: bool, history: bool, endTime: int, exists: bool, image1: str, image2: str, image3: str, name: str, startTime: int, selectedKeys: bool) -> Any: ...
def findDeformers() -> Any: ...
def findKeyframe(animation: str, curve: bool, includeUpperBound: bool, timeSlider: bool, which: str) -> Any: ...
def findType(deep: bool, exact: bool, forward: bool, type: str) -> Any: ...
def fitBspline(edit: bool, query: bool, caching: bool, constructionHistory: bool, frozen: bool, keepRange: int, name: str, nodeState: int, object: bool, tolerance: float) -> Any: ...
def flagTest(edit: bool, query: bool, floatRange: List[Incomplete], indexRange: List[Incomplete], noReport: bool, simpleFlag: bool, stringFlag: str, timeRange: List[Incomplete]) -> Any: ...
def flexor(edit: bool, query: bool, atBones: bool, atJoints: bool, deformerCommand: str, list: bool, name: str, noScale: bool, toSkeleton: bool, type: str) -> Any: ...
def floatField(edit: bool, query: bool, annotation: str, changeCommand: Callable, dragCommand: Callable, dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enterCommand: Callable, editable: bool, enableKeyboardFocus: bool, enable: bool, exists: bool, fullPathName: bool, height: int, isObscured: bool, manage: bool, maxValue: float, minValue: float, noBackground: bool, numberOfPopupMenus: bool, parent: str, popupMenuArray: bool, preventOverride: bool, precision: int, receiveFocusCommand: Callable, step: float, statusBarMessage: str, showTrailingZeros: bool, useTemplate: str, value: float, visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def floatFieldGrp(edit: bool, query: bool, adjustableColumn2: int, adjustableColumn3: int, adjustableColumn4: int, adjustableColumn5: int, adjustableColumn6: int, adjustableColumn: int, annotation: str, columnAlign: List[Tuple[int, str]], changeCommand: Callable, columnAlign2: Tuple[str, str], columnOffset2: Tuple[int, int], columnAttach2: Tuple[str, str], columnWidth: List[Tuple[int, int]], columnWidth1: int, columnWidth2: Tuple[int, int], dragCommand: Callable, dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enableKeyboardFocus: bool, extraLabel: str, enable: bool, enable1: bool, enable2: bool, enable3: bool, enable4: bool, exists: bool, fullPathName: bool, height: int, isObscured: bool, label: str, manage: bool, noBackground: bool, numberOfFields: int, numberOfPopupMenus: bool, parent: str, popupMenuArray: bool, preventOverride: bool, precision: int, step: float, statusBarMessage: str, showTrailingZeros: bool, useTemplate: str, value1: float, value2: float, value3: float, value4: float, visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def floatScrollBar(edit: bool, query: bool, annotation: str, changeCommand: Callable, dragCommand: Callable, dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enableKeyboardFocus: bool, enable: bool, exists: bool, fullPathName: bool, height: int, horizontal: bool, isObscured: bool, largeStep: float, manage: bool, maxValue: float, minValue: float, noBackground: bool, numberOfPopupMenus: bool, parent: str, popupMenuArray: bool, preventOverride: bool, step: float, statusBarMessage: str, useTemplate: str, value: float, visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def floatSlider(edit: bool, query: bool, annotation: str, changeCommand: Callable, dragCommand: Callable, dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enableKeyboardFocus: bool, enable: bool, exists: bool, fullPathName: bool, height: int, horizontal: bool, isObscured: bool, manage: bool, maxValue: float, minValue: float, noBackground: bool, numberOfPopupMenus: bool, parent: str, popupMenuArray: bool, preventOverride: bool, step: float, statusBarMessage: str, useTemplate: str, value: float, visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def floatSlider2(*args, **kwargs) -> Any: ...
def floatSliderButtonGrp(edit: bool, query: bool, adjustableColumn2: int, adjustableColumn3: int, adjustableColumn4: int, adjustableColumn5: int, adjustableColumn6: int, adjustableColumn: int, annotation: str, buttonCommand: Callable, buttonLabel: str, columnAlign: List[Tuple[int, str]], changeCommand: Callable, columnAlign2: Tuple[str, str], columnOffset2: Tuple[int, int], columnAttach2: Tuple[str, str], columnWidth: List[Tuple[int, int]], columnWidth1: int, columnWidth2: Tuple[int, int], dragCommand: Callable, dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enableKeyboardFocus: bool, extraLabel: str, enable: bool, exists: bool, field: bool, fieldMinValue: float, fieldMaxValue: float, fullPathName: bool, fieldStep: float, height: int, image: str, isObscured: bool, label: str, manage: bool, maxValue: float, minValue: float, noBackground: bool, numberOfPopupMenus: bool, parent: str, popupMenuArray: bool, preventOverride: bool, precision: int, step: float, symbolButtonCommand: Callable, symbolButtonDisplay: bool, statusBarMessage: str, sliderStep: float, useTemplate: str, value: float, visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def floatSliderGrp(edit: bool, query: bool, adjustableColumn2: int, adjustableColumn3: int, adjustableColumn4: int, adjustableColumn5: int, adjustableColumn6: int, adjustableColumn: int, annotation: str, columnAlign: List[Tuple[int, str]], changeCommand: Callable, columnAlign2: Tuple[str, str], columnOffset2: Tuple[int, int], columnAttach2: Tuple[str, str], columnWidth: List[Tuple[int, int]], columnWidth1: int, columnWidth2: Tuple[int, int], dragCommand: Callable, dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enableKeyboardFocus: bool, extraLabel: str, enable: bool, exists: bool, field: bool, fieldMinValue: float, fieldMaxValue: float, fullPathName: bool, fieldStep: float, height: int, isObscured: bool, label: str, manage: bool, maxValue: float, minValue: float, noBackground: bool, numberOfPopupMenus: bool, parent: str, popupMenuArray: bool, preventOverride: bool, precision: int, step: float, statusBarMessage: str, sliderStep: float, useTemplate: str, value: float, visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def flow(edit: bool, query: bool, localCompute: bool, objectCentered: bool) -> Any: ...
def flowLayout(edit: bool, query: bool, annotation: str, childArray: bool, columnSpacing: int, dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enableKeyboardFocus: bool, enable: bool, exists: bool, fullPathName: bool, height: int, horizontal: bool, isObscured: bool, manage: bool, noBackground: bool, numberOfChildren: bool, numberOfPopupMenus: bool, parent: str, popupMenuArray: bool, preventOverride: bool, statusBarMessage: str, useTemplate: str, vertical: bool, visibleChangeCommand: Callable, visible: bool, width: int, wrap: bool) -> Any: ...
def fluidAppend() -> Any: ...
def fluidAppendOpt() -> Any: ...
def fluidCacheInfo(edit: bool, query: bool, attribute: str, endFrame: bool, hasCache: bool, hasData: bool, initialConditions: bool, playback: bool, resolution: bool, startFrame: bool, cacheTime: int) -> Any: ...
def fluidDeleteCache() -> Any: ...
def fluidDeleteCacheFrames() -> Any: ...
def fluidDeleteCacheFramesOpt() -> Any: ...
def fluidDeleteCacheOpt() -> Any: ...
def fluidEmitter(edit: bool, query: bool, cycleEmission: str, cycleInterval: int, densityEmissionRate: float, fluidDropoff: float, fuelEmissionRate: float, heatEmissionRate: float, minDistance: float, maxDistance: float, name: str, rate: float, torusSectionRadius: float, type: str, volumeShape: str, volumeSweep: float) -> Any: ...
def fluidMergeCache() -> Any: ...
def fluidMergeCacheOpt() -> Any: ...
def fluidReplaceCache() -> Any: ...
def fluidReplaceCacheOpt() -> Any: ...
def fluidReplaceFrames() -> Any: ...
def fluidReplaceFramesOpt() -> Any: ...
def fluidVoxelInfo(checkBounds: bool, objectSpace: bool, radius: float, voxelCenter: bool, xIndex: int, yIndex: int, zIndex: int) -> Any: ...
def flushIdleQueue(resume: bool) -> Any: ...
def flushThumbnailCache(*args, **kwargs) -> Any: ...
def flushUndo() -> Any: ...
def fontAttributes(faceName: str, font: str, pitch: str, style: str, size: int, weight: str) -> Any: ...
def fontDialog(FontList: bool, scalable: bool) -> Any: ...
def formLayout(edit: bool, query: bool, attachNone: List[Tuple[str, str]], annotation: str, childArray: bool, dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enableKeyboardFocus: bool, enable: bool, exists: bool, fullPathName: bool, height: int, isObscured: bool, manage: bool, noBackground: bool, numberOfChildren: bool, numberOfDivisions: int, numberOfPopupMenus: bool, parent: str, popupMenuArray: bool, preventOverride: bool, statusBarMessage: str, useTemplate: str, visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def format(stringArg: List[str]) -> Any: ...
def frameBufferName(autoTruncate: bool, camera: str, renderLayer: str, renderPass: str) -> Any: ...
def frameLayout(edit: bool, query: bool, annotation: str, backgroundShade: bool, borderStyle: str, borderVisible: bool, childArray: bool, collapseCommand: Callable, collapse: bool, collapsable: bool, dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, expandCommand: Callable, enableKeyboardFocus: bool, enable: bool, exists: bool, font: str, fullPathName: bool, height: int, isObscured: bool, label: str, labelAlign: str, labelIndent: int, labelVisible: bool, labelWidth: int, manage: bool, marginHeight: int, marginWidth: int, noBackground: bool, numberOfChildren: bool, numberOfPopupMenus: bool, parent: str, preCollapseCommand: Callable, preExpandCommand: Callable, popupMenuArray: bool, preventOverride: bool, statusBarMessage: str, useTemplate: str, visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def freeFormFillet(edit: bool, query: bool, bias: float, caching: bool, constructionHistory: bool, depth: float, frozen: bool, name: str, nodeState: int, object: bool, polygon: int, positionTolerance: float, range: bool, tangentTolerance: float) -> Any: ...
def freezeOptions(query: bool, displayLayers: bool, downstream: str, explicitPropagation: bool, invisible: bool, referencedNodes: bool, runtimePropagation: bool, upstream: str) -> Any: ...
def geomBind(edit: bool, query: bool, bindMethod: int, falloff: float, maxInfluences: int) -> Any: ...
def geomToBBox(bakeAnimation: bool, combineMesh: bool, endTime: int, keepOriginal: bool, name: str, nameSuffix: str, single: bool, sampleBy: int, startTime: int) -> Any: ...
def geometryAppendCache() -> Any: ...
def geometryAppendCacheOpt() -> Any: ...
def geometryAttrInfo(boundingBox: bool, componentTagCategory: bool, componentTagExpression: str, componentTagHistoryHash: bool, components: bool, componentTagNames: bool, castToEdges: bool, castToFaces: bool, componentTagHistory: bool, castToVerts: bool, deformerChain: bool, elementCount: bool, groupId: int, componentTagHash: bool, matrix: bool, nodeChain: bool, outputPlugChain: bool, originalGeometry: bool, pointCount: bool, plugChain: bool, pointIndices: bool, points: bool, subsetState: bool) -> Any: ...
def geometryCache() -> Any: ...
def geometryCacheOpt() -> Any: ...
def geometryConstraint(edit: bool, query: bool, name: str, remove: bool, targetList: bool, weight: float, weightAliasList: bool) -> Any: ...
def geometryDeleteCacheFrames() -> Any: ...
def geometryDeleteCacheFramesOpt() -> Any: ...
def geometryDeleteCacheOpt() -> Any: ...
def geometryExportCache() -> Any: ...
def geometryExportCacheOpt() -> Any: ...
def geometryMergeCache() -> Any: ...
def geometryMergeCacheOpt() -> Any: ...
def geometryReplaceCache() -> Any: ...
def geometryReplaceCacheFrames() -> Any: ...
def geometryReplaceCacheFramesOpt() -> Any: ...
def geometryReplaceCacheOpt() -> Any: ...
def getAttr(asString: bool, caching: bool, channelBox: bool, keyable: bool, lock: bool, multiIndices: bool, size: bool, settable: bool, silent: bool, time: int, type: bool, expandEnvironmentVariables: bool) -> Any: ...
def getClassification(satisfies: str) -> Any: ...
def getDefaultBrush() -> Any: ...
def getFileList(folder: str, filespec: str) -> Any: ...
def getFluidAttr(attribute: str, lowerFace: bool, xvalue: bool, xIndex: int, yvalue: bool, yIndex: int, zvalue: bool, zIndex: int) -> Any: ...
def getInputDeviceRange(*args, **kwargs) -> Any: ...
def getLastError() -> Any: ...
def getMetadata(dataType: bool, listChannelNames: bool, listMemberNames: bool, listStreamNames: bool, memberName: str, scene: bool) -> Any: ...
def getModifiers() -> Any: ...
def getModulePath(moduleName: str) -> Any: ...
def getPanel(allConfigs: bool, allPanels: bool, atPosition: Tuple[int, int], allScriptedTypes: bool, allTypes: bool, containing: str, configWithLabel: str, invisiblePanels: bool, scriptType: str, typeOf: str, type: str, underPointer: bool, visiblePanels: bool, withFocus: bool, withLabel: str) -> Any: ...
def getParticleAttr(array: bool, attribute: str, object: str) -> Any: ...
def getProcArguments() -> Any: ...
def getRenderDependencies() -> Any: ...
def getRenderTasks(camera: str, renderLayer: str) -> Any: ...
def ghosting(edit: bool, query: bool, allInRange: bool, action: str, allGhostedObjects: bool, customFrames: List[int], enable: bool, frames: bool, farOpacity: float, geometryFilter: bool, ghostedObjects: bool, ghostsStep: int, hierarchy: bool, jointFilter: bool, locatorFilter: bool, mode: str, nearOpacity: float, preset: str, postFrames: int, preFrames: int, resetAll: bool, useDriver: bool) -> Any: ...
def glRender(edit: bool, query: bool, antiAliasMethod: str, accumBufferPasses: int, alphaSource: str, crossingEffect: bool, currentFrame: bool, cameraIcons: bool, collisionIcons: bool, drawStyle: str, emitterIcons: bool, edgeSmoothness: float, flipbookCallback: str, frameEnd: int, frameIncrement: int, fieldIcons: bool, fullResolution: bool, frameStart: int, grid: bool, imageDirectory: str, imageName: str, lightIcons: bool, lightingMode: str, lineSmoothing: bool, offScreen: bool, renderFrame: str, renderSequence: str, shutterAngle: float, sharpness: float, transformIcons: bool, textureDisplay: bool, useAccumBuffer: bool, writeDepthMap: bool) -> Any: ...
def glRenderEditor(edit: bool, query: bool, control: bool, defineTemplate: str, docTag: str, exists: bool, filter: str, forceMainConnection: str, highlightConnection: str, lockMainConnection: bool, lookThru: str, mainListConnection: str, parent: str, panel: str, selectionConnection: str, stateString: bool, unlockMainConnection: bool, unParent: bool, updateMainConnection: bool, useTemplate: str, viewCameraName: bool) -> Any: ...
def globalStitch(edit: bool, query: bool, caching: bool, constructionHistory: bool, frozen: bool, lockSurface: List[bool], modificationResistance: float, maxSeparation: float, name: str, nodeState: int, object: bool, replaceOriginal: bool, sampling: int, stitchCorners: int, stitchEdges: int, stitchPartialEdges: bool, stitchSmoothness: int) -> Any: ...
def goal(query: bool, goal: List[str], index: bool, useTransformAsGoal: bool, weight: float) -> Any: ...
def grabColor(hsvValue: bool, rgbValue: bool) -> Any: ...
def gradientControl(edit: bool, query: bool, annotation: str, adaptiveScaling: bool, attribute: str, dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enableKeyboardFocus: bool, enable: bool, exists: bool, fullPathName: bool, height: int, isObscured: bool, manage: bool, noBackground: bool, numberOfControls: int, numberOfPopupMenus: bool, parent: str, popupMenuArray: bool, preventOverride: bool, refreshOnRelease: int, statusBarMessage: str, selectedColorControl: str, selectedInterpControl: str, staticNumberOfControls: bool, staticPositions: bool, selectedPositionControl: str, upperLimitControl: str, useTemplate: str, visibleChangeCommand: Callable, visible: bool, verticalLayout: bool, width: int) -> Any: ...
def gradientControlNoAttr(edit: bool, query: bool, annotation: str, asString: str, changeCommand: Callable, currentKeyInterpValue: int, currentKey: int, currentKeyChanged: Callable, currentKeyCurveValue: bool, dragCommand: Callable, dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enableKeyboardFocus: bool, enable: bool, exists: bool, fullPathName: bool, height: int, isObscured: bool, manage: bool, noBackground: bool, numberOfPopupMenus: bool, optionVar: str, parent: str, popupMenuArray: bool, preventOverride: bool, rampAsColor: bool, statusBarMessage: str, useTemplate: str, visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def graphDollyCtx(edit: bool, query: bool, history: bool, exists: bool, image1: str, image2: str, image3: str, name: str) -> Any: ...
def graphSelectContext(*args, **kwargs) -> Any: ...
def graphTrackCtx(edit: bool, query: bool, history: bool, exists: bool, image1: str, image2: str, image3: str, name: str) -> Any: ...
def gravity(edit: bool, query: bool, attenuation: float, directionX: float, directionY: float, directionZ: float, magnitude: float, maxDistance: float, name: str, perVertex: bool, torusSectionRadius: float, volumeExclusion: bool, volumeShape: str, volumeSweep: float) -> Any: ...
def greasePencil() -> Any: ...
def greasePencilCtx(*args, **kwargs) -> Any: ...
def greasePencilHelper(*args, **kwargs) -> Any: ...
def greaseRenderPlane(edit: bool, query: bool, caching: bool, constructionHistory: bool, componentTagCreate: bool, createUVs: int, frozen: bool, height: float, name: str, nodeState: int, object: bool, subdivisionsHeight: int, subdivisionsWidth: int, subdivisionsX: int, subdivisionsY: int, texture: int, width: float) -> Any: ...
def grid(query: bool, divisions: int, displayAxes: bool, displayAxesBold: bool, displayDivisionLines: bool, default: bool, displayGridLines: bool, displayOrthographicLabels: bool, displayPerspectiveLabels: bool, orthographicLabelPosition: str, perspectiveLabelPosition: str, reset: bool, size: float, spacing: float, style: int, toggle: bool) -> Any: ...
def gridLayout(edit: bool, query: bool, allowEmptyCells: bool, autoGrow: bool, annotation: str, childArray: bool, cellHeight: int, columnsResizable: bool, cellWidth: int, cellWidthHeight: Tuple[int, int], dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enableKeyboardFocus: bool, enable: bool, exists: bool, fullPathName: bool, gridOrder: bool, height: int, isObscured: bool, manage: bool, noBackground: bool, numberOfColumns: int, numberOfChildren: bool, numberOfPopupMenus: bool, numberOfRows: int, numberOfRowsColumns: Tuple[int, int], parent: str, popupMenuArray: bool, preventOverride: bool, position: List[Tuple[str, int]], statusBarMessage: str, useTemplate: str, visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def group(absolute: bool, empty: bool, name: str, parent: str, relative: bool, useAsGroup: str, world: bool) -> Any: ...
def groupParts() -> Any: ...
def hardenPointCurve(edit: bool, query: bool, caching: bool, constructionHistory: bool, frozen: bool, multiplicity: int, name: str, nodeState: int, object: bool, replaceOriginal: bool) -> Any: ...
def hardware(brdType: bool, cpuType: bool, graphicsType: bool, megaHertz: bool, numProcessors: bool) -> Any: ...
def hardwareRenderPanel(edit: bool, query: bool, camera: str, copy: str, createString: bool, control: bool, defineTemplate: str, docTag: str, editString: bool, exists: bool, glRenderEditor: bool, init: bool, isUnique: bool, label: str, menuBarVisible: bool, menuBarRepeatLast: bool, needsInit: bool, parent: str, popupMenuProcedure: Callable, replacePanel: str, tearOff: bool, tearOffCopy: str, tearOffRestore: bool, unParent: bool, useTemplate: str) -> Any: ...
def hasMetadata(asList: bool, ignoreDefault: bool, memberName: str, scene: bool) -> Any: ...
def headsUpDisplay(edit: bool, query: bool, attributeChange: str, allDescendants: bool, allowOverlap: bool, attachToRefresh: bool, block: int, blockAlignment: str, blockSize: str, command: Callable, conditionChange: str, conditionFalse: str, connectionChange: str, conditionTrue: str, dataAlignment: str, dataFontSize: str, disregardIndex: bool, decimalPrecision: int, dataWidth: int, event: str, exists: bool, gridColor: int, label: str, listConditions: bool, listEvents: bool, labelFontSize: str, listHeadsUpDisplays: bool, listNodeChanges: bool, lastOccupiedBlock: int, listPresets: bool, layoutVisibility: bool, labelWidth: int, name: str, nodeChanges: List[str], nextFreeBlock: int, padding: int, preset: str, refresh: bool, remove: bool, removeID: int, resetNodeChanges: List[str], removePosition: Tuple[int, int], section: int, showGrid: bool, setOption: Tuple[str, str], scriptResult: bool, visible: bool) -> Any: ...
def headsUpMessage(*args, **kwargs) -> Any: ...
def help(query: bool, documentation: bool, list: bool, language: str, popupDisplayTime: int, popupMode: bool, popupPauseTime: int, popupSimpleMode: bool, rolloverMode: bool, syntaxOnly: bool) -> Any: ...
def helpLine(edit: bool, query: bool, annotation: str, dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enableKeyboardFocus: bool, enable: bool, exists: bool, fullPathName: bool, height: int, isObscured: bool, manage: bool, noBackground: bool, numberOfPopupMenus: bool, parent: str, popupMenuArray: bool, preventOverride: bool, statusBarMessage: str, useTemplate: str, visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def hide(allObjects: bool, clearLastHidden: bool, clearSelection: bool, invertComponents: bool, returnHidden: bool, testVisibility: bool) -> Any: ...
def hikGlobals(edit: bool, query: bool, releaseAllPinning: bool) -> Any: ...
def hilite(replace: bool, toggle: bool, unHilite: bool) -> Any: ...
def hitTest() -> Any: ...
def hotBox(query: bool, showAllToggleMenus: bool, animationOnlyMenus: bool, animationToggleMenus: bool, clothOnlyMenus: bool, clothToggleMenus: bool, commonOnlyMenus: bool, customMenuSetsToggleMenus: bool, commonToggleMenus: bool, displayCenterOnly: bool, displayHotbox: bool, dynamicsOnlyMenus: bool, displayStyle: bool, dynamicsToggleMenus: bool, displayZonesOnly: bool, liveOnlyMenus: bool, liveToggleMenus: bool, modelingOnlyMenus: bool, modelingToggleMenus: bool, menuSetOnly: str, noClickCommand: Callable, noClickDelay: float, noClickPosition: bool, noKeyPress: bool, polygonsOnlyMenus: bool, polygonsToggleMenus: bool, PaneOnlyMenus: bool, position: Tuple[int, int], PaneToggleMenus: bool, riggingOnlyMenus: bool, riggingToggleMenus: bool, release: bool, rmbPopups: bool, renderingOnlyMenus: bool, renderingToggleMenus: bool, surfacesOnlyMenus: bool, surfacesToggleMenus: bool, transparenyLevel: int, updateMenus: bool) -> Any: ...
def hotkey(query: bool, altModifier: bool, autoSave: bool, commandModifier: bool, ctrlModifier: bool, dragPress: bool, factorySettings: bool, keyShortcut: str, isModifier: bool, name: str, pressCommandRepeat: bool, releaseCommandRepeat: bool, releaseName: str, shiftModifier: bool, sourceUserHotkeys: bool) -> Any: ...
def hotkeyCheck(altModifier: bool, commandModifier: bool, ctrlModifier: bool, isRepeatable: bool, keyString: str, toBeRemovedInFutureMayaRelease: str, keyUp: bool, optionModifier: bool) -> Any: ...
def hotkeyCtx(query: bool, addClient: List[str], clientArray: bool, currentClient: str, insertTypeAt: Tuple[str, str], removeAllClients: bool, removeClient: List[str], removeType: str, typeArray: bool) -> Any: ...
def hotkeyEditor() -> Any: ...
def hotkeyEditorPanel(edit: bool, query: bool, annotation: str, dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enableKeyboardFocus: bool, enable: bool, exists: bool, fullPathName: bool, height: int, isObscured: bool, manage: bool, noBackground: bool, numberOfPopupMenus: bool, parent: str, popupMenuArray: bool, preventOverride: bool, statusBarMessage: str, useTemplate: str, visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def hotkeyMapSet(*args, **kwargs) -> Any: ...
def hotkeySet(edit: bool, query: bool, current: bool, delete: bool, export: str, exists: bool, hotkeySetArray: bool, ip: str, rename: str, source: str) -> Any: ...
def hudButton(edit: bool, query: bool, allowOverlap: bool, block: int, blockAlignment: str, blockSize: str, buttonShape: str, buttonWidth: int, label: str, labelFontSize: str, padding: int, pressCommand: Callable, releaseCommand: Callable, section: int, visible: bool) -> Any: ...
def hudSlider(edit: bool, query: bool, allowOverlap: bool, block: int, blockAlignment: str, blockSize: str, dragCommand: Callable, decimalPrecision: int, internalPadding: int, label: str, labelFontSize: str, labelWidth: int, maxValue: float, minValue: float, padding: int, pressCommand: Callable, releaseCommand: Callable, section: int, sliderIncrement: float, sliderLength: int, type: str, value: float, valueAlignment: str, valueFontSize: str, visible: bool, valueWidth: int) -> Any: ...
def hudSliderButton(edit: bool, query: bool, allowOverlap: bool, block: int, blockAlignment: str, buttonLabelFontSize: str, buttonLabel: str, buttonPressCommand: Callable, buttonReleaseCommand: Callable, blockSize: str, buttonShape: str, buttonWidth: int, decimalPrecision: int, internalPadding: int, maxValue: float, minValue: float, padding: int, section: int, sliderDragCommand: Callable, sliderLabelFontSize: str, sliderIncrement: float, sliderLabel: str, sliderLength: int, sliderLabelWidth: int, sliderPressCommand: Callable, sliderReleaseCommand: Callable, type: str, value: float, valueAlignment: str, valueFontSize: str, visible: bool, valueWidth: int) -> Any: ...
def hwReflectionMap(edit: bool, query: bool, backTextureName: str, bottomTextureName: str, cubeMap: bool, decalMode: bool, enable: bool, frontTextureName: str, leftTextureName: str, rightTextureName: str, sphereMapTextureName: str, topTextureName: str) -> Any: ...
def hwRender(query: bool, writeAlpha: bool, acceleratedMultiSampleSupport: bool, activeTextureCount: bool, camera: str, currentFrame: bool, currentView: bool, writeDepth: bool, edgeAntiAliasing: Tuple[int, int], frame: float, fixFileNameNumberPattern: bool, fullRenderSupport: bool, height: int, imageFileName: bool, layer: str, lowQualityLighting: bool, limitedRenderSupport: bool, noRenderView: bool, notWriteToFile: bool, printGeometry: bool, textureResolution: int, renderHardwareName: bool, renderSelected: bool, width: int) -> Any: ...
def hwRenderLoad() -> Any: ...
def hyperGraph(*args, **kwargs) -> Any: ...
def hyperPanel(*args, **kwargs) -> Any: ...
def hyperShade(*args, **kwargs) -> Any: ...
def iconTextButton(edit: bool, query: bool, actionIsSubstitute: bool, align: str, annotation: str, command: Callable, doubleClickCommand: Callable, dragCallback: Callable, disabledImage: str, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enableKeyboardFocus: bool, enable: bool, exists: bool, flat: bool, font: str, fullPathName: bool, flipX: float, flipY: float, height: int, highlightImage: str, handleNodeDropCallback: Callable, image: str, image1: str, image2: str, image3: str, isObscured: bool, imageOverlayLabel: str, label: str, labelEditingCallback: Callable, labelOffset: int, ltVersion: str, manage: bool, marginHeight: int, marginWidth: int, noBackground: bool, numberOfPopupMenus: bool, parent: str, popupMenuArray: bool, preventOverride: bool, rotation: float, commandRepeatable: bool, statusBarMessage: str, selectionImage: str, scaleIcon: bool, style: str, sourceType: str, useAlpha: float, useTemplate: str, visibleChangeCommand: Callable, version: str, visible: bool, width: int) -> Any: ...
def iconTextCheckBox(edit: bool, query: bool, align: str, annotation: str, changeCommand: Callable, dragCallback: Callable, disabledImage: str, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enableKeyboardFocus: bool, enable: bool, exists: bool, flat: bool, font: str, fullPathName: bool, flipX: float, flipY: float, height: int, highlightImage: str, image: str, image1: str, image2: str, image3: str, isObscured: bool, imageOverlayLabel: str, label: str, labelOffset: int, ltVersion: str, manage: bool, marginHeight: int, marginWidth: int, noBackground: bool, numberOfPopupMenus: bool, offCommand: Callable, onCommand: Callable, parent: str, popupMenuArray: bool, preventOverride: bool, rotation: float, statusBarMessage: str, selectionHighlightImage: str, selectionImage: str, style: str, useAlpha: float, useTemplate: str, value: bool, visibleChangeCommand: Callable, version: str, visible: bool, width: int) -> Any: ...
def iconTextRadioButton(edit: bool, query: bool, align: str, annotation: str, changeCommand: Callable, collection: str, dragCallback: Callable, disabledImage: str, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enableKeyboardFocus: bool, enable: bool, exists: bool, flat: bool, font: str, fullPathName: bool, flipX: float, flipY: float, height: int, highlightImage: str, image: str, image1: str, image2: str, image3: str, isObscured: bool, imageOverlayLabel: str, label: str, labelOffset: int, ltVersion: str, manage: bool, marginHeight: int, marginWidth: int, noBackground: bool, numberOfPopupMenus: bool, offCommand: Callable, onCommand: Callable, parent: str, popupMenuArray: bool, preventOverride: bool, rotation: float, statusBarMessage: str, selectionHighlightImage: str, selectionImage: str, select: bool, style: str, useAlpha: float, useTemplate: str, visibleChangeCommand: Callable, version: str, visible: bool, width: int) -> Any: ...
def iconTextRadioCollection(edit: bool, query: bool, collectionItemArray: bool, disableCommands: bool, defineTemplate: str, exists: bool, gl: bool, numberOfCollectionItems: bool, parent: str, select: str, useTemplate: str) -> Any: ...
def iconTextScrollList(edit: bool, query: bool, append: List[str], allowMultiSelection: bool, annotation: str, changeCommand: Callable, deselectAll: bool, doubleClickCommand: Callable, dragFeedbackVisible: bool, dragCallback: Callable, dropCallback: Callable, dropRectCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, editable: bool, editIndexed: int, enableKeyboardFocus: bool, enable: bool, exists: bool, fullPathName: bool, height: int, isObscured: bool, manage: bool, noBackground: bool, numberOfIcons: int, numberOfPopupMenus: bool, numberOfRows: bool, parent: str, popupMenuArray: bool, preventOverride: bool, removeAll: bool, statusBarMessage: str, selectCommand: Callable, selectItem: List[str], selectIndexedItem: List[int], useTemplate: str, visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def iconTextStaticLabel(edit: bool, query: bool, align: str, annotation: str, dragCallback: Callable, disabledImage: str, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enableKeyboardFocus: bool, enable: bool, exists: bool, font: str, fullPathName: bool, flipX: float, flipY: float, height: int, image: str, image1: str, image2: str, image3: str, isObscured: bool, imageOverlayLabel: str, label: str, labelOffset: int, ltVersion: str, manage: bool, marginHeight: int, marginWidth: int, noBackground: bool, numberOfPopupMenus: bool, parent: str, popupMenuArray: bool, preventOverride: bool, rotation: float, statusBarMessage: str, style: str, useAlpha: float, useTemplate: str, visibleChangeCommand: Callable, version: str, visible: bool, width: int) -> Any: ...
def ikHandle(edit: bool, query: bool, autoPriority: bool, curve: str, createCurve: bool, connectEffector: bool, createRootAxis: bool, disableHandles: bool, endEffector: str, enableHandles: bool, exists: str, freezeJoints: bool, forceSolver: bool, jointList: bool, name: str, numSpans: int, priority: int, parentCurve: bool, positionWeight: float, rootOnCurve: bool, rootTwistMode: bool, sticky: str, simplifyCurve: bool, snapHandleToEffector: bool, snapHandleFlagToggle: bool, startJoint: str, snapCurve: bool, solver: str, setupForRPsolver: bool, twistType: str, weight: float) -> Any: ...
def ikHandleCtx(*args, **kwargs) -> Any: ...
def ikHandleDisplayScale(*args, **kwargs) -> Any: ...
def ikSolver(edit: bool, query: bool, epsilon: float, maxIterations: int, name: str, solverType: str) -> Any: ...
def ikSplineHandleCtx(*args, **kwargs) -> Any: ...
def ikSystem(edit: bool, query: bool, autoPriority: bool, autoPriorityMC: bool, autoPrioritySC: bool, allowRotation: bool, list: Tuple[int, int], snap: bool, solve: bool, solverTypes: bool) -> Any: ...
def ikSystemInfo(query: bool, globalSnapHandle: bool) -> Any: ...
def ikfkDisplayMethod(query: bool, display: str) -> Any: ...
def illustratorCurves(edit: bool, query: bool, caching: bool, constructionHistory: bool, frozen: bool, illustratorFilename: str, name: str, nodeState: int, object: bool, scaleFactor: float, tolerance: float) -> Any: ...
def image(edit: bool, query: bool, annotation: str, dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enableKeyboardFocus: bool, enable: bool, exists: bool, fullPathName: bool, height: int, image: str, isObscured: bool, manage: bool, noBackground: bool, numberOfPopupMenus: bool, parent: str, popupMenuArray: bool, preventOverride: bool, statusBarMessage: str, useTemplate: str, visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def imagePlane(edit: bool, query: bool, camera: str, counter: bool, detach: bool, dropFrame: bool, frameDuration: int, fileName: str, height: float, imageSize: Tuple[int, int], lookThrough: str, maintainRatio: bool, name: str, numFrames: int, negTimesOK: bool, quickTime: bool, showInAllViews: bool, timeCode: int, twentyFourHourMax: bool, timeScale: int, timeCodeTrack: bool, width: float) -> Any: ...
def imageWindowEditor(edit: bool, query: bool, autoResize: bool, control: bool, drawAxis: bool, doubleBuffer: bool, displayImage: int, displayStyle: str, defineTemplate: str, docTag: str, exists: bool, filter: str, frameImage: bool, forceMainConnection: str, frameRegion: bool, highlightConnection: str, lockMainConnection: bool, loadImage: str, mainListConnection: str, nbImages: bool, parent: str, panel: str, removeAllImages: bool, refresh: bool, removeImage: bool, realSize: bool, scaleBlue: float, singleBuffer: bool, scaleGreen: float, saveImage: bool, selectionConnection: str, scaleRed: float, showRegion: Tuple[int, int], stateString: bool, toggle: bool, unlockMainConnection: bool, unParent: bool, updateMainConnection: bool, useTemplate: str, writeImage: str) -> Any: ...
def imfPlugins(query: bool, extension: str, keyword: str, multiFrameSupport: str, pluginName: str, readSupport: str, writeSupport: str) -> Any: ...
def inViewMessage(alpha: float, assistMessage: str, backColor: int, clickKill: bool, clear: str, dragKill: bool, fade: bool, fadeInTime: int, frameOffset: int, fadeOutTime: int, fadeStayTime: int, font: str, fontSize: int, hide: bool, minimize: bool, message: str, position: str, restore: bool, show: bool, statusMessage: str, textAlpha: float, textOffset: int, uvEditor: bool) -> Any: ...
def inheritTransform(query: bool, preserve: bool, toggle: bool) -> Any: ...
def insertJoint() -> Any: ...
def insertJointCtx(*args, **kwargs) -> Any: ...
def insertKeyCtx(edit: bool, query: bool, breakdown: bool, history: bool, exists: bool, image1: str, image2: str, image3: str, name: str, preserveTangent: bool) -> Any: ...
def insertKnotCurve(edit: bool, query: bool, addKnots: bool, caching: bool, constructionHistory: bool, curveOnSurface: bool, frozen: bool, insertBetween: bool, name: str, nodeState: int, numberOfKnots: List[int], object: bool, parameter: List[float], replaceOriginal: bool) -> Any: ...
def insertKnotSurface(edit: bool, query: bool, addKnots: bool, caching: bool, constructionHistory: bool, direction: int, frozen: bool, insertBetween: bool, name: str, nodeState: int, numberOfKnots: List[int], object: bool, parameter: List[float], replaceOriginal: bool) -> Any: ...
def insertListItem() -> Any: ...
def insertListItemBefore() -> Any: ...
def instance(leaf: bool, name: str, smartTransform: bool) -> Any: ...
def instanceable(query: bool, allow: bool, recursive: bool, shape: bool) -> Any: ...
def instancer(edit: bool, query: bool, addObject: bool, cycle: str, cycleStep: float, cycleStepUnits: str, index: int, levelOfDetail: str, name: str, object: List[str], objectPosition: str, objectRotation: str, objectScale: str, pointDataSource: bool, removeObject: bool, rotationOrder: str, rotationUnits: str, valueName: str) -> Any: ...
def intField(edit: bool, query: bool, annotation: str, changeCommand: Callable, dragCommand: Callable, dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enterCommand: Callable, editable: bool, enableKeyboardFocus: bool, enable: bool, exists: bool, fullPathName: bool, height: int, isObscured: bool, manage: bool, maxValue: int, minValue: int, noBackground: bool, numberOfPopupMenus: bool, parent: str, popupMenuArray: bool, preventOverride: bool, receiveFocusCommand: Callable, step: int, statusBarMessage: str, useTemplate: str, value: int, visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def intFieldGrp(edit: bool, query: bool, adjustableColumn2: int, adjustableColumn3: int, adjustableColumn4: int, adjustableColumn5: int, adjustableColumn6: int, adjustableColumn: int, annotation: str, columnAlign: List[Tuple[int, str]], changeCommand: Callable, columnAlign2: Tuple[str, str], columnOffset2: Tuple[int, int], columnAttach2: Tuple[str, str], columnWidth: List[Tuple[int, int]], columnWidth1: int, columnWidth2: Tuple[int, int], dragCommand: Callable, dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enableKeyboardFocus: bool, extraLabel: str, enable: bool, enable1: bool, enable2: bool, enable3: bool, enable4: bool, exists: bool, fullPathName: bool, height: int, isObscured: bool, label: str, manage: bool, noBackground: bool, numberOfFields: int, numberOfPopupMenus: bool, parent: str, popupMenuArray: bool, preventOverride: bool, statusBarMessage: str, useTemplate: str, value1: int, value2: int, value3: int, value4: int, visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def intScrollBar(edit: bool, query: bool, annotation: str, changeCommand: Callable, dragCommand: Callable, dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enableKeyboardFocus: bool, enable: bool, exists: bool, fullPathName: bool, height: int, horizontal: bool, isObscured: bool, largeStep: int, manage: bool, maxValue: int, minValue: int, noBackground: bool, numberOfPopupMenus: bool, parent: str, popupMenuArray: bool, preventOverride: bool, step: int, statusBarMessage: str, useTemplate: str, value: int, visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def intSlider(edit: bool, query: bool, annotation: str, changeCommand: Callable, dragCommand: Callable, dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enableKeyboardFocus: bool, enable: bool, exists: bool, fullPathName: bool, height: int, horizontal: bool, isObscured: bool, manage: bool, maxValue: int, minValue: int, noBackground: bool, numberOfPopupMenus: bool, parent: str, popupMenuArray: bool, preventOverride: bool, step: int, statusBarMessage: str, useTemplate: str, value: int, visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def intSliderGrp(edit: bool, query: bool, adjustableColumn2: int, adjustableColumn3: int, adjustableColumn4: int, adjustableColumn5: int, adjustableColumn6: int, adjustableColumn: int, annotation: str, columnAlign: List[Tuple[int, str]], changeCommand: Callable, columnAlign2: Tuple[str, str], columnOffset2: Tuple[int, int], columnAttach2: Tuple[str, str], columnWidth: List[Tuple[int, int]], columnWidth1: int, columnWidth2: Tuple[int, int], dragCommand: Callable, dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enableKeyboardFocus: bool, extraLabel: str, enable: bool, exists: bool, field: bool, fieldMinValue: int, fieldMaxValue: int, fullPathName: bool, fieldStep: int, height: int, isObscured: bool, label: str, manage: bool, maxValue: int, minValue: int, noBackground: bool, numberOfPopupMenus: bool, parent: str, popupMenuArray: bool, preventOverride: bool, step: int, statusBarMessage: str, sliderStep: int, useTemplate: str, value: int, visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def interactionStyle(query: bool, style: str) -> Any: ...
def internalVar(userAppDir: bool, userBitmapsDir: bool, userHotkeyDir: bool, userMarkingMenuDir: bool, userPrefDir: bool, userPresetsDir: bool, userScriptDir: bool, userShelfDir: bool, userTmpDir: bool, userWorkspaceDir: bool) -> Any: ...
def intersect(edit: bool, query: bool, caching: bool, constructionHistory: bool, curveOnSurface: bool, firstSurface: bool, frozen: bool, name: str, nodeState: int, object: bool, tolerance: float) -> Any: ...
def iprEngine(*args, **kwargs) -> Any: ...
def isConnected(ignoreUnitConversion: bool) -> Any: ...
def isDirty(connection: bool, datablock: bool) -> Any: ...
def isTrue() -> Any: ...
def isolateSelect(query: bool, addDagObject: str, addSelected: bool, addSelectedObjects: bool, loadSelected: bool, removeDagObject: str, removeSelected: bool, state: bool, update: bool, viewObjects: bool) -> Any: ...
def itemFilter(edit: bool, query: bool, byBin: List[str], byName: str, byScript: str, byType: List[str], category: List[str], clearByBin: bool, clearByType: bool, classification: str, difference: Tuple[str, str], exists: bool, intersect: Tuple[str, str], listBuiltInFilters: bool, listOtherFilters: bool, listUserFilters: bool, negate: bool, parent: str, pythonModule: str, secondScript: str, text: str, union: Tuple[str, str], uniqueNodeNames: bool) -> Any: ...
def itemFilterAttr(edit: bool, query: bool, byName: str, byNameString: List[str], byScript: str, classification: str, dynamic: bool, exists: bool, hidden: bool, hasCurve: bool, hasDrivenKey: bool, hasExpression: bool, intersect: Tuple[str, str], keyable: bool, listBuiltInFilters: bool, listOtherFilters: bool, listUserFilters: bool, negate: bool, parent: str, published: bool, readable: bool, scaleRotateTranslate: bool, secondScript: str, text: str, union: Tuple[str, str], writable: bool) -> Any: ...
def itemFilterRender(edit: bool, query: bool, anyTextures: bool, category: List[str], classification: str, exists: bool, exclusiveLights: bool, lights: bool, listBuiltInFilters: bool, linkedLights: bool, listOtherFilters: bool, lightSets: bool, listUserFilters: bool, nodeClassification: List[str], negate: bool, nonIlluminatingLights: bool, nonExclusiveLights: bool, parent: str, postProcess: bool, renderingNode: bool, renderableObjectSets: bool, renderUtilityNode: bool, shaders: bool, text: str, textures2d: bool, textures3d: bool, texturesProcedural: bool) -> Any: ...
def itemFilterType(edit: bool, query: bool, text: str, type: bool) -> Any: ...
def iterOnNurbs(*args, **kwargs) -> Any: ...
def joint(edit: bool, query: bool, absolute: bool, automaticLimits: bool, assumePreferredAngles: bool, angleX: float, angleY: float, angleZ: float, children: bool, component: bool, degreeOfFreedom: str, exists: str, limitSwitchX: bool, limitSwitchY: bool, limitSwitchZ: bool, limitX: Tuple[float, float], limitY: Tuple[float, float], limitZ: Tuple[float, float], name: str, orientJoint: str, relative: bool, radius: float, rotationOrder: str, symmetryAxis: str, secondaryAxisOrient: str, scaleCompensate: bool, setPreferredAngles: bool, stiffnessX: float, stiffnessY: float, stiffnessZ: float, symmetry: bool, zeroScaleOrient: bool) -> Any: ...
def jointCluster(edit: bool, query: bool, aboveBound: float, aboveCluster: bool, aboveDropoffType: str, aboveValue: float, belowBound: float, belowCluster: bool, belowDropoffType: str, belowValue: float, deformerTools: bool, joint: str, name: str) -> Any: ...
def jointCtx(*args, **kwargs) -> Any: ...
def jointDisplayScale(query: bool, absolute: bool, ikfk: bool) -> Any: ...
def jointLattice(edit: bool, query: bool, after: bool, afterReference: bool, before: bool, creasing: float, deformerTools: bool, exclusive: str, frontOfChain: bool, geometry: List[str], geometryIndices: bool, includeHiddenSelections: bool, ignoreSelected: bool, joint: str, lowerBindSkin: str, lengthIn: float, lengthOut: float, lowerTransform: str, name: str, parallel: bool, prune: bool, rounding: float, split: bool, upperBindSkin: str, useComponentTags: bool, upperTransform: str, widthLeft: float, widthRight: float) -> Any: ...
def journal(query: bool, comment: str, flush: bool, highPrecision: bool, state: bool) -> Any: ...
def keyTangent(edit: bool, query: bool, absolute: bool, animation: str, g: bool, inAngle: float, inTangentType: str, includeUpperBound: bool, inWeight: float, lock: bool, outAngle: float, outTangentType: str, outWeight: float, pluginTangentTypes: str, relative: bool, stepAttributes: bool, unify: bool, weightLock: bool, weightedTangents: bool) -> Any: ...
def keyframe(edit: bool, query: bool, absolute: bool, adjustBreakdown: bool, animation: str, breakdown: bool, eval: bool, floatChange: float, includeUpperBound: bool, indexValue: bool, keyframeCount: bool, lastSelected: bool, name: bool, option: str, relative: bool, selected: bool, timeChange: int, tickDrawSpecial: bool, valueChange: float) -> Any: ...
def keyframeOutliner(edit: bool, query: bool, animCurve: str, annotation: str, dragCallback: Callable, dropCallback: Callable, display: str, defineTemplate: str, docTag: str, enableBackground: bool, enableKeyboardFocus: bool, enable: bool, exists: bool, fullPathName: bool, height: int, isObscured: bool, manage: bool, noBackground: bool, numberOfPopupMenus: bool, parent: str, popupMenuArray: bool, preventOverride: bool, statusBarMessage: str, useTemplate: str, visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def keyframeRegionCurrentTimeCtx(edit: bool, query: bool, history: bool, exists: bool, image1: str, image2: str, image3: str, name: str) -> Any: ...
def keyframeRegionDirectKeyCtx(edit: bool, query: bool, history: bool, exists: bool, image1: str, image2: str, image3: str, name: str, option: str) -> Any: ...
def keyframeRegionDollyCtx(edit: bool, query: bool, history: bool, exists: bool, image1: str, image2: str, image3: str, name: str) -> Any: ...
def keyframeRegionInsertKeyCtx(edit: bool, query: bool, breakdown: bool, history: bool, exists: bool, image1: str, image2: str, image3: str, name: str) -> Any: ...
def keyframeRegionMoveKeyCtx(edit: bool, query: bool, history: bool, exists: bool, image1: str, image2: str, image3: str, name: str, option: str) -> Any: ...
def keyframeRegionScaleKeyCtx(edit: bool, query: bool, history: bool, exists: bool, image1: str, image2: str, image3: str, name: str, scaleSpecifiedKeys: bool, type: str) -> Any: ...
def keyframeRegionSelectKeyCtx(edit: bool, query: bool, history: bool, exists: bool, image1: str, image2: str, image3: str, name: str) -> Any: ...
def keyframeRegionSetKeyCtx(edit: bool, query: bool, breakdown: bool, history: bool, exists: bool, image1: str, image2: str, image3: str, name: str) -> Any: ...
def keyframeRegionTrackCtx(edit: bool, query: bool, history: bool, exists: bool, image1: str, image2: str, image3: str, name: str) -> Any: ...
def keyframeStats(edit: bool, query: bool, adjustableColumn2: int, adjustableColumn3: int, adjustableColumn4: int, adjustableColumn5: int, adjustableColumn6: int, adjustableColumn: int, animEditor: str, annotation: str, columnAlign: List[Tuple[int, str]], columnAlign2: Tuple[str, str], classicMode: bool, columnOffset2: Tuple[int, int], columnAttach2: Tuple[str, str], columnWidth: List[Tuple[int, int]], columnWidth1: int, columnWidth2: Tuple[int, int], dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enableKeyboardFocus: bool, enable: bool, exists: bool, fullPathName: bool, height: int, isObscured: bool, manage: bool, noBackground: bool, numberOfPopupMenus: bool, parent: str, popupMenuArray: bool, preventOverride: bool, precision: int, statusBarMessage: str, timeAnnotation: str, useTemplate: str, valueAnnotation: str, visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def keyingGroup(edit: bool, query: bool, activator: str, addElement: str, afterFilters: bool, anyMember: str, category: str, clear: str, color: int, copy: str, excludeDynamic: bool, edges: bool, empty: bool, editPoints: bool, excludeRotate: bool, excludeScale: bool, excludeTranslate: bool, excludeVisibility: bool, facets: bool, forceElement: str, setActiveFilter: str, flatten: str, isIntersecting: str, isMember: str, include: str, intersection: str, layer: bool, minimizeRotation: bool, name: str, noIntermediate: bool, nodesOnly: bool, noSurfaceShader: bool, noWarnings: bool, renderable: bool, removeActivator: str, remove: str, size: bool, split: str, subtract: str, text: str, union: str, vertices: bool) -> Any: ...
def lassoContext(edit: bool, query: bool, history: bool, drawClosed: bool, exists: bool, fastComponents: bool, image1: str, image2: str, image3: str, name: str) -> Any: ...
def lattice(edit: bool, query: bool, after: bool, afterReference: bool, before: bool, commonParent: bool, dualBase: bool, deformerTools: bool, exclusive: str, freezeMapping: bool, frontOfChain: bool, geometry: List[str], geometryIndices: bool, includeHiddenSelections: bool, ignoreSelected: bool, latticeReset: bool, name: str, objectCentered: bool, outsideFalloffDistance: float, outsideLattice: int, parallel: bool, prune: bool, removeTweaks: bool, split: bool, useComponentTags: bool) -> Any: ...
def latticeDeformKeyCtx(edit: bool, query: bool, history: bool, envelope: float, exists: bool, image1: str, image2: str, image3: str, latticeColumns: int, latticeRows: int, name: str, scaleLatticePts: bool) -> Any: ...
def launch(directory: str, movie: str, pdfFile: str, webPage: str) -> Any: ...
def launchImageEditor(editImageFile: str, viewImageFile: str) -> Any: ...
def layerButton(edit: bool, query: bool, annotation: str, command: Callable, changeCommand: Callable, current: bool, doubleClickCommand: Callable, dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enableKeyboardFocus: bool, enable: bool, exists: bool, fullPathName: bool, height: int, layerHideOnPlayback: bool, hideOnPlaybackCommand: Callable, identification: int, isObscured: bool, label: str, layerState: str, layerVisible: bool, labelWidth: bool, manage: bool, name: str, noBackground: bool, numberOfPopupMenus: bool, parent: str, popupMenuArray: bool, preventOverride: bool, renameCommand: str, select: bool, statusBarMessage: str, transparent: bool, typeCommand: Callable, useTemplate: str, visibleCommand: Callable, visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def layeredShaderPort(*args, **kwargs) -> Any: ...
def layeredTexturePort(*args, **kwargs) -> Any: ...
def layout(edit: bool, query: bool, annotation: str, childArray: bool, dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enableKeyboardFocus: bool, enable: bool, exists: bool, fullPathName: bool, height: int, isObscured: bool, manage: bool, noBackground: bool, numberOfChildren: bool, numberOfPopupMenus: bool, parent: str, popupMenuArray: bool, preventOverride: bool, statusBarMessage: str, useTemplate: str, visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def layoutDialog(dismiss: str, parent: str, title: str, uiScript: Callable) -> Any: ...
def license(borrow: bool, info: bool, isBorrowed: bool, isExported: bool, isTrial: bool, licenseMethod: bool, productChoice: bool, r: bool, status: bool, showBorrowInfo: bool, showProductInfoDialog: bool, usage: bool) -> Any: ...
def licenseCheck(mode: str, type: str) -> Any: ...
def lightList(edit: bool, query: bool, remove: str) -> Any: ...
def lightlink(b: bool, hierarchy: bool, light: List[str], make: bool, object: List[str], query: bool, sets: bool, shadow: bool, shapes: bool, transforms: bool, useActiveLights: bool, useActiveObjects: bool) -> Any: ...
def linearPrecision(query: bool) -> Any: ...
def listAnimatable(active: bool, manip: bool, manipHandle: bool, shape: bool, type: bool) -> Any: ...
def listAttr(array: bool, connectable: bool, caching: bool, channelBox: bool, changedSinceFileOpen: bool, category: List[str], extension: bool, fromPlugin: bool, hasData: bool, hasNullData: bool, inUse: bool, keyable: bool, locked: bool, leaf: bool, multi: bool, output: bool, read: bool, ramp: bool, readOnly: bool, scalar: bool, scalarAndArray: bool, settable: bool, shortNames: bool, string: List[str], unlocked: bool, userDefined: bool, usedAsFilename: bool, visible: bool, write: bool) -> Any: ...
def listAttrPatterns(patternType: bool, verbose: bool) -> Any: ...
def listCameras(orthographic: bool, perspective: bool, ufeCameras: bool) -> Any: ...
def listConnections(connections: bool, destination: bool, exactType: bool, plugs: bool, source: bool, skipConversionNodes: bool, shapes: bool, type: str) -> Any: ...
def listDeviceAttachments(*args, **kwargs) -> Any: ...
def listHistory(query: bool, allConnections: bool, allFuture: bool, allGraphs: bool, breadthFirst: bool, future: bool, fastIteration: bool, futureLocalAttr: bool, futureWorldAttr: bool, groupLevels: bool, historyAttr: bool, interestLevel: int, leaf: bool, levels: int, pruneDagObjects: bool) -> Any: ...
def listInputDeviceAxes(*args, **kwargs) -> Any: ...
def listInputDeviceButtons(*args, **kwargs) -> Any: ...
def listInputDevices(*args, **kwargs) -> Any: ...
def listNodeTypes(exclude: str) -> Any: ...
def listNodesWithIncorrectNames() -> Any: ...
def listRelatives(allDescendents: bool, allParents: bool, children: bool, fullPath: bool, noIntermediate: bool, parent: bool, path: bool, shapes: bool, type: List[str]) -> Any: ...
def listSets(allSets: bool, extendToShape: bool, object: str, type: int) -> Any: ...
def loadFluid(edit: bool, query: bool, currentTime: bool, frame: float, initialConditions: bool) -> Any: ...
def loadModule(allModules: bool, load: str, scan: bool) -> Any: ...
def loadPlugin(allPlugins: bool, addCallback: Callable, name: str, qObsolete: bool, quiet: bool, removeCallback: Callable) -> Any: ...
def loadPrefObjects() -> Any: ...
def loadUI(uiFile: str, listTypes: bool, uiString: str, verbose: bool, workingDirectory: str) -> Any: ...
def lockNode(query: bool, ignoreComponents: bool, lock: bool, lockName: bool, lockUnpublished: bool) -> Any: ...
def loft(edit: bool, query: bool, autoReverse: bool, close: bool, createCusp: List[bool], caching: bool, constructionHistory: bool, degree: int, frozen: bool, name: str, nodeState: int, object: bool, polygon: int, reverse: List[bool], rebuild: bool, range: bool, reverseSurfaceNormals: bool, sectionSpans: int, uniform: bool) -> Any: ...
def lookThru(query: bool, farClip: float, nearClip: float) -> Any: ...
def ls(absoluteName: bool, allPaths: bool, assemblies: bool, cameras: bool, containers: bool, containerType: List[str], dagObjects: bool, dependencyNodes: bool, defaultNodes: bool, exactType: List[str], excludeType: List[str], flatten: bool, geometry: bool, ghost: bool, head: int, hilite: bool, intermediateObjects: bool, invisible: bool, long: bool, leaf: bool, lockedNodes: bool, lights: bool, live: bool, materials: bool, modified: bool, noIntermediate: bool, nodeTypes: bool, objectsOnly: bool, orderedSelection: bool, planes: bool, persistentNodes: bool, partitions: bool, preSelectHilite: bool, recursive: bool, references: bool, renderGlobals: bool, referencedNodes: bool, readOnly: bool, renderQualities: bool, renderResolutions: bool, renderSetups: bool, shapes: bool, sets: bool, selection: bool, shortNames: bool, showNamespace: bool, showType: bool, textures: bool, tail: int, templated: bool, transforms: bool, type: List[str], undeletable: bool, ufeObjects: bool, uuid: bool, untemplated: bool, visible: bool) -> Any: ...
def lsThroughFilter(item: List[str], nodeArray: bool, reverse: bool, selection: bool, sort: str) -> Any: ...
def lsUI(controlLayouts: bool, collection: bool, cmdTemplates: bool, controls: bool, contexts: bool, dumpWidgets: bool, editors: bool, head: int, long: bool, menus: bool, menuItems: bool, numWidgets: bool, panels: bool, radioMenuItemCollections: bool, tail: int, type: List[str], windows: bool) -> Any: ...
def makeIdentity(apply: bool, jointOrient: bool, normal: int, preserveNormals: bool, rotate: bool, scale: bool, translate: bool) -> Any: ...
def makeLive(none: bool) -> Any: ...
def makePaintable(query: bool, altAttribute: List[str], activate: bool, activateAll: bool, attrType: str, clearAll: bool, remove: bool, shapeMode: str, uiName: str) -> Any: ...
def makeSingleSurface(edit: bool, query: bool, caching: bool, constructionHistory: bool, chordHeightRatio: float, chordHeight: float, delta: float, edgeSwap: bool, format: int, fractionalTolerance: float, frozen: bool, minEdgeLength: float, matchNormalDir: bool, name: str, nodeState: int, normalizeTrimmedUVRange: bool, object: bool, polygonCount: int, polygonType: int, stitchTolerance: float, useChordHeight: bool, useChordHeightRatio: bool, uNumber: int, uType: int, vNumber: int, vType: int) -> Any: ...
def makebot(checkdepends: bool, input: str, nooverwrite: bool, output: str, checkres: int, verbose: bool) -> Any: ...
def manipComponentPivot(*args, **kwargs) -> Any: ...
def manipComponentUpdate() -> Any: ...
def manipMoveContext(edit: bool, query: bool, activeHandle: int, activeHandleNormal: int, bakePivotOri: bool, currentActiveHandle: int, editPivotMode: bool, editPivotPosition: bool, exists: bool, image1: str, image2: str, image3: str, interactiveUpdate: bool, lastMode: int, mode: int, orientJoint: str, orientJointEnabled: bool, orientObject: str, position: bool, preserveChildPosition: bool, pinPivot: bool, postDragCommand: Tuple[Callable, str], pivotOriHandle: bool, preCommand: Callable, preDragCommand: Tuple[Callable, str], postCommand: Callable, preserveUV: bool, reflectionAbout: int, reflectionAxis: int, reflection: bool, reflectionTolerance: float, snap: bool, secondaryAxisOrient: str, snapComponentsRelative: bool, snapLiveFaceCenter: bool, snapLivePoint: bool, snapPivotOri: bool, snapPivotPos: bool, snapRelative: bool, snapValue: float, tweakMode: bool, manipVisible: bool, xformConstraint: str, constrainAlongNormal: bool) -> Any: ...
def manipMoveLimitsCtx(edit: bool, query: bool, history: bool, exists: bool, image1: str, image2: str, image3: str, name: str) -> Any: ...
def manipOptions(query: bool, enableSmartDuplicate: bool, enableSmartExtrude: bool, forceRefresh: bool, hideManipOnCtrl: bool, hideManipOnShift: bool, handleSize: float, hideManipOnShiftCtrl: bool, linePick: float, lineSize: float, middleMouseRepositioning: bool, planeHandleOffset: int, pivotRotateHandleOffset: int, pointSize: float, preselectHighlight: bool, relative: bool, rememberActiveHandle: bool, rememberActiveHandleAfterToolSwitch: bool, refreshMode: int, scale: float, smartDuplicateType: int, showExtrudeSliders: bool, showPlaneHandles: bool, showPivotRotateHandle: bool) -> Any: ...
def manipPivot(query: bool, bakeOri: bool, moveToolOri: int, oriValid: bool, pinPivot: bool, posValid: bool, reset: bool, resetOri: bool, resetPos: bool, rotateToolOri: int, snapOri: bool, snapPos: bool, scaleToolOri: int, valid: bool) -> Any: ...
def manipRotateContext(edit: bool, query: bool, activeHandle: int, bakePivotOri: bool, currentActiveHandle: int, centerTrackball: bool, editPivotMode: bool, editPivotPosition: bool, exists: bool, image1: str, image2: str, image3: str, lastMode: int, mode: int, modifyTranslation: bool, orientObject: str, position: bool, preserveChildPosition: bool, pinPivot: bool, postDragCommand: Tuple[Callable, str], pivotOriHandle: bool, preCommand: Callable, preDragCommand: Tuple[Callable, str], postCommand: Callable, preserveUV: bool, reflectionAbout: int, reflectionAxis: int, reflection: bool, reflectionTolerance: float, snap: bool, snapPivotOri: bool, snapPivotPos: bool, snapRelative: bool, snapValue: float, tweakMode: bool, useCenterPivot: bool, useManipPivot: bool, useObjectPivot: bool, manipVisible: bool, xformConstraint: str, constrainAlongNormal: bool) -> Any: ...
def manipRotateLimitsCtx(edit: bool, query: bool, history: bool, exists: bool, image1: str, image2: str, image3: str, name: str) -> Any: ...
def manipScaleContext(edit: bool, query: bool, activeHandle: int, bakePivotOri: bool, currentActiveHandle: int, editPivotMode: bool, editPivotPosition: bool, exists: bool, image1: str, image2: str, image3: str, lastMode: int, mode: int, orientObject: str, position: bool, preserveChildPosition: bool, pinPivot: bool, preventNegativeScale: bool, postDragCommand: Tuple[Callable, str], pivotOriHandle: bool, preCommand: Callable, preDragCommand: Tuple[Callable, str], postCommand: Callable, preserveUV: bool, reflectionAbout: int, reflectionAxis: int, reflection: bool, reflectionTolerance: float, snap: bool, snapPivotOri: bool, snapPivotPos: bool, snapRelative: bool, snapValue: float, tweakMode: bool, useManipPivot: bool, useObjectPivot: bool, manipVisible: bool, xformConstraint: str, constrainAlongNormal: bool) -> Any: ...
def manipScaleLimitsCtx(edit: bool, query: bool, history: bool, exists: bool, image1: str, image2: str, image3: str, name: str) -> Any: ...
def marker(edit: bool, query: bool, attach: bool, detach: bool, frontTwist: float, orientationMarker: bool, positionMarker: bool, sideTwist: float, time: int, valueU: float, upTwist: float) -> Any: ...
def matchTransform(scaleBox: bool, pivots: bool, position: bool, positionX: bool, positionY: bool, positionZ: bool, rotation: bool, rotatePivot: bool, rotationX: bool, rotationY: bool, rotationZ: bool, scale: bool, scalePivot: bool, scaleX: bool, scaleY: bool, scaleZ: bool) -> Any: ...
def mateCtx(*args, **kwargs) -> Any: ...
def matrix() -> Any: ...
def matrixUtil(edit: bool, query: bool, inverse: bool, relative: bool, transpose: bool) -> Any: ...
def mayaDpiSetting(query: bool, mode: int, realScaleValue: bool, systemDpi: bool, scaleValue: float) -> Any: ...
def mayaDpiSettingAction(*args, **kwargs) -> Any: ...
def mayaHasRenderSetup(edit: bool, query: bool, enableCurrentSession: bool, enableDuringTests: bool) -> Any: ...
def mayaPreviewRenderIntoNewWindow() -> Any: ...
def melInfo() -> Any: ...
def melOptions(query: bool, duplicateVariableWarnings: bool) -> Any: ...
def memory(asFloat: bool, adjustedVirtualMemory: bool, debug: bool, freeMemory: bool, gigaByte: bool, heapMemory: bool, kiloByte: bool, megaByte: bool, pageFaults: bool, physicalMemory: bool, pageReclaims: bool, processResidentMemory: bool, processVirtualMemory: bool, summary: bool, swaps: bool, swapFree: bool, swapLogical: bool, swapMax: bool, swapPhysical: bool, swapReserved: bool, swapVirtual: bool) -> Any: ...
def menu(edit: bool, query: bool, allowOptionBoxes: bool, deleteAllItems: bool, defineTemplate: str, docTag: str, enable: bool, exists: bool, familyImage: str, helpMenu: bool, itemArray: bool, label: str, ltVersion: str, mnemonic: str, numberOfItems: bool, parent: str, postMenuCommand: Callable, postMenuCommandOnce: bool, scrollable: bool, tearOff: bool, useTemplate: str, version: str, visible: bool) -> Any: ...
def menuBarLayout(edit: bool, query: bool, annotation: str, childArray: bool, dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enableKeyboardFocus: bool, enable: bool, exists: bool, fullPathName: bool, height: int, isObscured: bool, manage: bool, menuArray: bool, menuBarVisible: bool, menuIndex: Tuple[str, int], noBackground: bool, numberOfChildren: bool, numberOfMenus: bool, numberOfPopupMenus: bool, parent: str, popupMenuArray: bool, preventOverride: bool, statusBarMessage: str, useTemplate: str, visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def menuEditor(edit: bool, query: bool, annotation: str, cellHeight: int, cellWidth: int, cellWidthHeight: Tuple[int, int], delete: Tuple[str, int], dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enableKeyboardFocus: bool, enable: bool, exists: bool, fullPathName: bool, height: int, iconMenuCallback: str, isObscured: bool, manage: bool, menuItemTypes: bool, noBackground: bool, numberOfPopupMenus: bool, parent: str, popupMenuArray: bool, preventOverride: bool, statusBarMessage: str, subMenuEditorsOpen: bool, subMenuEditorWindow: str, subMenuAt: Tuple[str, int], separator: Tuple[str, int], style: str, topLevelMenu: str, useTemplate: str, visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def menuItem(edit: bool, query: bool, altModifier: bool, annotation: str, allowOptionBoxes: bool, boldFont: bool, command: Callable, checkBox: bool, collection: str, commandModifier: bool, ctrlModifier: bool, divider: bool, data: int, dragDoubleClickCommand: Callable, dividerLabel: str, dragMenuCommand: Callable, defineTemplate: str, docTag: str, echoCommand: bool, enableCommandRepeat: bool, enable: bool, exists: bool, familyImage: str, image: str, insertAfter: str, isCheckBox: bool, isOptionBox: bool, imageOverlayLabel: str, isRadioButton: bool, italicized: bool, keyEquivalent: str, label: str, longDivider: bool, ltVersion: str, mnemonic: str, optionBox: bool, optionBoxIcon: str, optionModifier: bool, parent: str, postMenuCommand: Callable, postMenuCommandOnce: bool, radioButton: bool, radialPosition: str, runTimeCommand: str, shiftModifier: bool, subMenu: bool, sourceType: str, tearOff: bool, useTemplate: str, version: str, visible: bool) -> Any: ...
def menuSet(edit: bool, query: bool, addMenu: str, allMenuSets: bool, currentMenuSet: str, hotBoxVisible: bool, insertMenu: Tuple[str, int], label: str, moveMenu: Tuple[str, int], moveMenuSet: Tuple[str, int], numberOfMenus: bool, numberOfMenuSets: bool, permanent: bool, removeMenu: str, removeMenuSet: str) -> Any: ...
def menuSetPref(edit: bool, query: bool, exists: bool, force: bool, loadAll: bool, removeAll: bool, saveAll: bool, saveBackup: bool, version: bool) -> Any: ...
def meshIntersectTest(*args, **kwargs) -> Any: ...
def messageLine(edit: bool, query: bool, annotation: str, dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enableKeyboardFocus: bool, enable: bool, exists: bool, fullPathName: bool, height: int, isObscured: bool, manage: bool, noBackground: bool, numberOfPopupMenus: bool, parent: str, popupMenuArray: bool, preventOverride: bool, statusBarMessage: str, useTemplate: str, visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def mimicManipulation(manipulations: str, prevalidation: bool, refresh: bool) -> Any: ...
def mimicMnipulation(*args, **kwargs) -> Any: ...
def minimizeApp() -> Any: ...
def mirrorJoint(mirrorBehavior: bool, mirrorXY: bool, mirrorXZ: bool, mirrorYZ: bool, searchReplace: Tuple[str, str]) -> Any: ...
def modelCurrentTimeCtx(edit: bool, query: bool, history: bool, exists: bool, image1: str, image2: str, image3: str, name: str, percent: float) -> Any: ...
def modelEditor(edit: bool, query: bool, activeCustomEnvironment: str, activeCustomGeometry: str, activeCustomLighSet: str, activeCustomRenderer: str, activeComponentsXray: bool, allObjects: bool, activeOnly: bool, addObjects: str, activeCustomOverrideGeometry: str, addSelected: bool, activeShadingGraph: str, addSelectedObjects: bool, activeView: bool, backfaceCulling: bool, bufferMode: str, bumpResolution: Tuple[int, int], cameras: bool, camera: str, clipGhosts: bool, colorMap: bool, cmEnabled: bool, cameraName: str, cullingOverride: str, capture: str, colorResolution: Tuple[int, int], cameraSetup: bool, captureSequenceNumber: int, cameraSet: str, control: bool, controllers: bool, controlVertices: bool, default: bool, displayAppearance: str, dynamicConstraints: bool, deformers: bool, dimensions: bool, interactiveDisableShadows: bool, displayLights: str, depthOfFieldPreview: bool, defineTemplate: str, docTag: str, displayTextures: bool, dynamics: bool, editorChanged: Callable, exists: bool, exposure: float, filter: str, fogDensity: float, fogEnd: float, fogging: bool, fluids: bool, forceMainConnection: str, fogMode: str, follicles: bool, filteredObjectList: bool, fogSource: str, fogStart: float, gamma: float, greasePencils: bool, grid: bool, height: int, handles: bool, highlightConnection: str, holdOuts: bool, hairSystems: bool, hulls: bool, headsUpDisplay: bool, interactive: bool, interactiveBackFaceCull: bool, isFiltered: bool, ikHandles: bool, imagePlane: bool, useRGBImagePlane: bool, ignorePanZoom: bool, joints: bool, jointXray: bool, locators: bool, lockMainConnection: bool, lowQualityLighting: bool, lights: bool, lineWidth: float, manipulators: bool, maxConstantTransparency: float, maximumNumHardwareLights: bool, mainListConnection: str, modelPanel: str, motionTrails: bool, nurbsCurves: bool, nCloths: bool, nParticles: bool, nRigids: bool, nurbsSurfaces: bool, noUndo: bool, objectFilter: str, objectFilterUI: str, occlusionCulling: bool, objectFilterList: bool, objectFilterShowInHUD: bool, objectFilterListUI: bool, parent: str, particleInstancers: bool, planes: bool, polymeshes: bool, panel: str, pluginShapes: bool, pivots: bool, resetCustomCamera: bool, rendererDeviceName: bool, rendererList: bool, rendererListUI: bool, rendererName: str, rendererOverrideList: bool, rendererOverrideName: str, rendererOverrideListUI: bool, removeSelected: bool, stereoDrawMode: bool, subdivSurfaces: bool, shadows: bool, selectionHiliteDisplay: bool, selectionConnection: str, shadingModel: int, smallObjectCulling: bool, smallObjectThreshold: float, sceneRenderFilter: str, setSelected: bool, sortTransparent: bool, strokes: bool, stateString: bool, smoothWireframe: bool, textureAnisotropic: bool, transparencyAlgorithm: str, textureCompression: bool, textureDisplay: str, textureEnvironmentMap: bool, toggleExposure: bool, toggleGamma: bool, textureHilight: bool, transpInShadows: bool, textureMaxSize: int, textureMemoryUsed: bool, textureSampling: int, twoSidedLighting: bool, textures: bool, useBaseRenderer: bool, useColorIndex: bool, updateColorMode: bool, useDefaultMaterial: bool, useInteractiveMode: bool, unlockMainConnection: bool, userNode: str, unParent: bool, updateMainConnection: bool, useReducedRenderer: bool, useTemplate: str, viewObjects: bool, viewSelected: bool, viewType: bool, viewTransformName: str, width: int, wireframeBackingStore: bool, wireframeOnShaded: bool, xray: bool) -> Any: ...
def modelPanel(edit: bool, query: bool, barLayout: bool, camera: str, copy: str, createString: bool, control: bool, defineTemplate: str, docTag: str, editString: bool, exists: bool, init: bool, isUnique: bool, label: str, menuBarVisible: bool, modelEditor: bool, menuBarRepeatLast: bool, needsInit: bool, parent: str, popupMenuProcedure: Callable, replacePanel: str, tearOff: bool, tearOffCopy: str, tearOffRestore: bool, unParent: bool, useTemplate: str) -> Any: ...
def modelingToolkitSuperCtx(*args, **kwargs) -> Any: ...
def moduleInfo(definition: bool, listModules: bool, moduleName: str, path: bool, version: bool) -> Any: ...
def mouldMesh(*args, **kwargs) -> Any: ...
def mouldSrf() -> Any: ...
def mouldSubdiv(*args, **kwargs) -> Any: ...
def mouse(enableScrollWheel: bool, mouseButtonTrackingStatus: bool, mouseButtonTracking: int, scrollWheelStatus: bool) -> Any: ...
def movIn(file: str, startTime: int) -> Any: ...
def movOut(comment: bool, file: str, precision: int, time: Incomplete) -> Any: ...
def move(absolute: bool, componentOffset: bool, componentSpace: bool, deletePriorHistory: bool, localSpace: bool, orientJoint: str, objectSpace: bool, parameter: bool, preserveChildPosition: bool, preserveGeometryPosition: bool, preserveUV: bool, relative: bool, reflectionAboutBBox: bool, reflectionAboutOrigin: bool, reflectionAboutX: bool, reflectionAboutY: bool, reflectionAboutZ: bool, reflection: bool, reflectionTolerance: float, rotatePivotRelative: bool, secondaryAxisOrient: str, symNegative: bool, scalePivotRelative: bool, ufeRotatePivot: bool, ufeScalePivot: bool, worldSpaceDistance: bool, worldSpace: bool, moveX: bool, xformConstraint: str, constrainAlongNormal: bool, moveXY: bool, moveXYZ: bool, moveXZ: bool, moveY: bool, moveYZ: bool, moveZ: bool) -> Any: ...
def moveKeyCtx(edit: bool, query: bool, history: bool, exists: bool, image1: str, image2: str, image3: str, moveFunction: str, name: str, option: str) -> Any: ...
def moveVertexAlongDirection(magnitude: List[float], normalDirection: List[float], uDirection: List[float], vDirection: List[float]) -> Any: ...
def movieCompressor(*args, **kwargs) -> Any: ...
def movieInfo(counter: bool, dropFrame: bool, frameCount: bool, frameDuration: bool, height: bool, movieTexture: bool, numFrames: bool, negTimesOK: bool, quickTime: bool, timeCode: bool, twentyFourHourMax: bool, timeScale: bool, timeCodeTrack: bool, width: bool) -> Any: ...
def mpBirailCtx(*args, **kwargs) -> Any: ...
def mrMapVisualizer() -> Any: ...
def mrShaderManager() -> Any: ...
def multiProfileBirailSurface(edit: bool, query: bool, caching: bool, constructionHistory: bool, frozen: bool, name: str, nodeState: int, object: bool, polygon: int, transformMode: int, tangentContinuityProfile1: bool, tangentContinuityProfile2: bool) -> Any: ...
def multiTouch(*args, **kwargs) -> Any: ...
def mute(query: bool, disable: bool, force: bool) -> Any: ...
def myTestCmd(*args, **kwargs) -> Any: ...
def nBase(edit: bool, query: bool, clearCachedTextureMap: str, clearStart: bool, stuffStart: bool, textureToVertex: str) -> Any: ...
def nClothAppend() -> Any: ...
def nClothAppendOpt() -> Any: ...
def nClothCache() -> Any: ...
def nClothCacheOpt() -> Any: ...
def nClothCreate() -> Any: ...
def nClothCreateOptions() -> Any: ...
def nClothDeleteCacheFrames() -> Any: ...
def nClothDeleteCacheFramesOpt() -> Any: ...
def nClothDeleteCacheOpt() -> Any: ...
def nClothDeleteHistory() -> Any: ...
def nClothDeleteHistoryOpt() -> Any: ...
def nClothDisplayCurrentMesh() -> Any: ...
def nClothDisplayInputMesh() -> Any: ...
def nClothLocalToWorld() -> Any: ...
def nClothMakeCollide() -> Any: ...
def nClothMakeCollideOptions() -> Any: ...
def nClothMergeCache() -> Any: ...
def nClothMergeCacheOpt() -> Any: ...
def nClothRemove() -> Any: ...
def nClothReplaceCache() -> Any: ...
def nClothReplaceCacheOpt() -> Any: ...
def nClothReplaceFrames() -> Any: ...
def nClothReplaceFramesOpt() -> Any: ...
def nClothRestToInput() -> Any: ...
def nClothRestToInputStart() -> Any: ...
def nClothRestToMesh() -> Any: ...
def nClothWorldToLocal() -> Any: ...
def nConstraintAddMembers() -> Any: ...
def nConstraintAttractToMatch() -> Any: ...
def nConstraintAttractToMatchOptions() -> Any: ...
def nConstraintCollisionExclusion() -> Any: ...
def nConstraintCollisionExclusionOptions() -> Any: ...
def nConstraintComponent() -> Any: ...
def nConstraintComponentOptions() -> Any: ...
def nConstraintComponentToComponent() -> Any: ...
def nConstraintComponentToComponentOptions() -> Any: ...
def nConstraintConstraintMembershipTool() -> Any: ...
def nConstraintDisableCollision() -> Any: ...
def nConstraintDisableCollisionOptions() -> Any: ...
def nConstraintForceField() -> Any: ...
def nConstraintForceFieldOptions() -> Any: ...
def nConstraintPointToSurface() -> Any: ...
def nConstraintPointToSurfaceOptions() -> Any: ...
def nConstraintRemoveMembers() -> Any: ...
def nConstraintReplaceMembers() -> Any: ...
def nConstraintSelectMembers() -> Any: ...
def nConstraintSlideOnSurface() -> Any: ...
def nConstraintSlideOnSurfaceOptions() -> Any: ...
def nConstraintTearableSurface() -> Any: ...
def nConstraintTearableSurfaceOptions() -> Any: ...
def nConstraintTransform() -> Any: ...
def nConstraintTransformOptions() -> Any: ...
def nConstraintWeldBorders() -> Any: ...
def nConstraintWeldBordersOptions() -> Any: ...
def nParticle(edit: bool, query: bool, conserve: float, cache: bool, count: bool, dynamicAttrList: bool, deleteCache: bool, floatValue: float, gridSpacing: List[float], inherit: float, jitterRadius: List[float], name: str, numJitters: List[int], perParticleDouble: bool, perParticleVector: bool, shapeName: str) -> Any: ...
def nSoft(query: bool, convert: bool, duplicate: bool, duplicateHistory: bool, goal: float, hideOriginal: bool, name: str) -> Any: ...
def nameCommand(annotation: str, command: Callable, default: bool, data1: str, data2: str, data3: str, sourceType: str) -> Any: ...
def nameField(edit: bool, query: bool, annotation: str, changeCommand: Callable, dragCallback: Callable, drawInactiveFrame: bool, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enableKeyboardFocus: bool, enable: bool, exists: bool, fullPathName: bool, height: int, isObscured: bool, manage: bool, noBackground: bool, nameChangeCommand: Callable, numberOfPopupMenus: bool, object: str, parent: str, popupMenuArray: bool, preventOverride: bool, receiveFocusCommand: Callable, statusBarMessage: str, useTemplate: str, visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def namespace(query: bool, addNamespace: str, absoluteName: bool, collapseAncestors: str, deleteNamespaceContent: bool, exists: str, force: bool, mergeNamespaceWithOther: str, mergeNamespaceWithParent: bool, mergeNamespaceWithRoot: bool, moveNamespace: Tuple[str, str], parent: str, recurse: bool, relativeNames: bool, rename: Tuple[str, str], removeNamespace: str, setNamespace: str, validateName: str) -> Any: ...
def namespaceInfo(absoluteName: bool, baseName: bool, currentNamespace: bool, dagPath: bool, fullName: bool, internal: bool, isRootNamespace: bool, listOnlyDependencyNodes: bool, listOnlyNamespaces: bool, listNamespace: bool, parent: bool, recurse: bool, shortName: bool) -> Any: ...
def newton(edit: bool, query: bool, attenuation: float, magnitude: float, minDistance: float, maxDistance: float, name: str, perVertex: bool, torusSectionRadius: float, volumeExclusion: bool, volumeShape: str, volumeSweep: float) -> Any: ...
def nodeCast(copyDynamicAttrs: bool, disableAPICallbacks: bool, disableScriptJobCallbacks: bool, disconnectUnmatchedAttrs: bool, force: bool, swapNames: bool, swapValues: bool) -> Any: ...
def nodeGrapher(*args, **kwargs) -> Any: ...
def nodeIconButton(edit: bool, query: bool, align: str, annotation: str, command: Callable, dragCallback: Callable, disabledImage: str, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enableKeyboardFocus: bool, enable: bool, exists: bool, font: str, fullPathName: bool, flipX: float, flipY: float, height: int, image: str, image1: str, image2: str, image3: str, isObscured: bool, imageOverlayLabel: str, label: str, labelOffset: int, ltVersion: str, manage: bool, marginHeight: int, marginWidth: int, noBackground: bool, numberOfPopupMenus: bool, parent: str, popupMenuArray: bool, preventOverride: bool, rotation: float, statusBarMessage: str, style: str, useAlpha: float, useTemplate: str, visibleChangeCommand: Callable, version: str, visible: bool, width: int) -> Any: ...
def nodeOutliner(edit: bool, query: bool, addObject: str, attrAlphaOrder: str, addCommand: Callable, annotation: str, connectivity: str, currentSelection: bool, dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enableKeyboardFocus: bool, enable: bool, exists: bool, fullPathName: bool, height: int, isObscured: bool, lastClickedNode: bool, lastMenuChoice: str, longNames: bool, manage: bool, menuCommand: Callable, menuMultiOption: bool, multiSelect: bool, noBackground: bool, noConnectivity: bool, nodesDisplayed: bool, niceNames: bool, numberOfPopupMenus: bool, parent: str, pressHighlightsUnconnected: bool, popupMenuArray: bool, preventOverride: bool, redraw: bool, remove: List[str], removeAll: bool, replace: str, redrawRow: bool, statusBarMessage: str, selectCommand: Callable, showConnectedOnly: bool, showHidden: bool, showInputs: bool, showNonConnectable: bool, showNonKeyable: bool, showOutputs: bool, showPublished: bool, showReadOnly: bool, useTemplate: str, visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def nodePreset(attributes: str, custom: str, delete: Tuple[str, str], exists: Tuple[str, str], isValidName: str, load: Tuple[str, str], list: str, save: Tuple[str, str]) -> Any: ...
def nodeTreeLister(edit: bool, query: bool, addFavorite: List[str], annotation: str, clearContents: bool, collapsePath: List[str], dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, executeItem: str, enableKeyboardFocus: bool, enable: bool, expandPath: List[str], expandToDepth: int, exists: bool, favoritesCallback: Callable, favoritesList: bool, fullPathName: bool, height: int, isObscured: bool, manage: bool, noBackground: bool, nodeLibrary: str, numberOfPopupMenus: bool, parent: str, popupMenuArray: bool, preventOverride: bool, refreshCommand: Callable, removeItem: List[str], removeFavorite: List[str], resultsPathUnderCursor: bool, statusBarMessage: str, selectPath: List[str], useTemplate: str, visibleChangeCommand: Callable, visible: bool, vnnString: bool, width: int) -> Any: ...
def nodeType(apiType: bool, derived: bool, inherited: bool, isTypeName: bool, ufeRuntimeName: bool) -> Any: ...
def nonLinear(edit: bool, query: bool, after: bool, autoParent: bool, afterReference: bool, before: bool, commonParent: bool, defaultScale: bool, deformerTools: bool, exclusive: str, frontOfChain: bool, geometry: List[str], geometryIndices: bool, includeHiddenSelections: bool, ignoreSelected: bool, name: str, parallel: bool, prune: bool, split: bool, type: str, useComponentTags: bool) -> Any: ...
def nop(*args, **kwargs) -> Any: ...
def normalConstraint(edit: bool, query: bool, name: str, remove: bool, targetList: bool, weight: float, weightAliasList: bool, worldUpObject: str, worldUpType: str) -> Any: ...
def notifyDecorator() -> Any: ...
def notifyPostRedo() -> Any: ...
def notifyPostUndo() -> Any: ...
def nucleusDisplayDynamicConstraintNodes() -> Any: ...
def nucleusDisplayMaterialNodes() -> Any: ...
def nucleusDisplayNComponentNodes() -> Any: ...
def nucleusDisplayOtherNodes() -> Any: ...
def nucleusDisplayTextureNodes() -> Any: ...
def nucleusDisplayTransformNodes() -> Any: ...
def nucleusGetEffectsAsset() -> Any: ...
def nucleusGetnClothExample() -> Any: ...
def nucleusGetnParticleExample() -> Any: ...
def nurbsBoolean(edit: bool, query: bool, caching: bool, constructionHistory: bool, frozen: bool, name: str, nodeState: int, nsrfsInFirstShell: int, object: bool, operation: int, smartConnection: bool, tolerance: float) -> Any: ...
def nurbsCopyUVSet(edit: bool, query: bool) -> Any: ...
def nurbsCube(edit: bool, query: bool, caching: bool, constructionHistory: bool, degree: int, frozen: bool, heightRatio: float, lengthRatio: float, name: str, nodeState: int, object: bool, polygon: int, patchesU: int, patchesV: int, width: float) -> Any: ...
def nurbsCurveRebuildPref(query: bool, degree: int, endKnots: int, fitRebuild: int, keepControlPoints: bool, keepEndPoints: bool, keepRange: int, keepTangents: bool, rebuildType: int, spans: int, smartSurfaceCurve: bool, tolerance: float) -> Any: ...
def nurbsCurveToBezier() -> Any: ...
def nurbsEditUV(query: bool, angle: float, pivotU: float, pivotV: float, relative: bool, rotation: bool, rotateRatio: float, scale: bool, scaleU: float, scaleV: float, uValue: float, vValue: float) -> Any: ...
def nurbsPlane(edit: bool, query: bool, caching: bool, constructionHistory: bool, degree: int, frozen: bool, lengthRatio: float, name: str, nodeState: int, object: bool, polygon: int, patchesU: int, patchesV: int, width: float) -> Any: ...
def nurbsSelect(bottomBorder: bool, borderSelection: bool, growSelection: int, leftBorder: bool, rightBorder: bool, shrinkSelection: int, topBorder: bool) -> Any: ...
def nurbsSquare(edit: bool, query: bool, caching: bool, constructionHistory: bool, centerX: float, centerY: float, centerZ: float, degree: int, frozen: bool, name: str, nodeState: int, normalX: float, normalY: float, normalZ: float, object: bool, sideLength1: float, sideLength2: float, spansPerSide: int) -> Any: ...
def nurbsToPoly(edit: bool, query: bool, caching: bool, constructionHistory: bool, chordHeightRatio: float, chordHeight: float, curvatureTolerance: int, delta: float, edgeSwap: bool, smoothEdgeRatio: float, explicitTessellationAttributes: bool, format: int, fractionalTolerance: float, frozen: bool, minEdgeLength: float, matchNormalDir: bool, matchRenderTessellation: bool, name: str, nodeState: int, normalizeTrimmedUVRange: bool, uDivisionsFactor: float, vDivisionsFactor: float, object: bool, polygonCount: int, polygonType: int, useChordHeight: bool, useChordHeightRatio: bool, smoothEdge: bool, uNumber: int, useSurfaceShader: bool, uType: int, vNumber: int, vType: int) -> Any: ...
def nurbsToPolygonsPref(query: bool, chordHeightRatio: float, chordHeight: float, delta3D: float, edgeSwap: bool, format: int, fraction: float, merge: int, minEdgeLen: float, matchRenderTessellation: int, mergeTolerance: float, polyCount: int, polyType: int, useChordHeight: bool, useChordHeightRatio: bool, uNumber: int, uType: int, vNumber: int, vType: int) -> Any: ...
def nurbsToSubdiv(edit: bool, query: bool, addUnderTransform: bool, caching: bool, constructionHistory: bool, collapsePoles: bool, frozen: bool, matchPeriodic: bool, maxPolyCount: int, name: str, nodeState: int, object: bool, reverseNormal: bool) -> Any: ...
def nurbsToSubdivPref(query: bool, bridge: int, collapsePoles: bool, capType: int, matchPeriodic: bool, maxPolyCount: int, offset: float, reverseNormal: bool, solidType: int, trans00: float, trans01: float, trans02: float, trans10: float, trans11: float, trans12: float, trans20: float, trans21: float, trans22: float, trans30: float, trans31: float, trans32: float) -> Any: ...
def nurbsUVSet(edit: bool, query: bool, create: bool, useExplicit: bool) -> Any: ...
def objExists() -> Any: ...
def objectCenter(gl: bool, local: bool) -> Any: ...
def objectType(convertTag: str, isType: str, isAType: str, tagFromType: str, typeFromTag: int, typeTag: bool) -> Any: ...
def objectTypeUI(isType: str, listAll: bool, superClasses: bool) -> Any: ...
def offsetCurve(edit: bool, query: bool, connectBreaks: int, caching: bool, constructionHistory: bool, cutLoop: bool, cutRadius: float, distance: float, frozen: bool, name: str, nodeState: int, object: bool, range: bool, reparameterize: bool, subdivisionDensity: int, stitch: bool, tolerance: float, useGivenNormal: bool) -> Any: ...
def offsetCurveOnSurface(edit: bool, query: bool, connectBreaks: int, caching: bool, constructionHistory: bool, cutLoop: bool, checkPoints: int, distance: float, frozen: bool, name: str, nodeState: int, object: bool, range: bool, subdivisionDensity: int, stitch: bool, tolerance: float) -> Any: ...
def offsetSurface(edit: bool, query: bool, caching: bool, constructionHistory: bool, distance: float, frozen: bool, method: int, name: str, nodeState: int, object: bool) -> Any: ...
def ogs(query: bool, deviceInformation: bool, disposeReleasableTextures: bool, dumpTexture: str, fragmentEditor: str, gpuMemoryTotal: int, gpuMemoryUsed: bool, enableHardwareInstancing: bool, isWinRemoteSession: bool, isLegacyViewportEnabled: bool, pause: bool, reset: bool, rebakeTextures: bool, isRemoteGLSessionEnabled: bool, reloadTextures: bool, regenerateUVTilePreview: str, shaderSource: str, traceRenderPipeline: bool, toggleTexturePaging: bool, fragmentXML: str) -> Any: ...
def ogsRender(edit: bool, query: bool, availableFloatingPointTargetFormat: bool, availableMultisampleType: bool, availableRenderOverrides: bool, camera: str, currentFrame: bool, activeRenderOverride: str, currentView: bool, enableFloatingPointRenderTarget: bool, enableMultisample: bool, frame: float, activeRenderTargetFormat: str, height: int, layer: str, activeMultisampleType: str, noRenderView: bool, width: int) -> Any: ...
def ogsdebug(count: int, debug: str, timing: str, verbose: bool) -> Any: ...
def openCLInfo(query: bool, minVertexBuffer: bool, valid: bool) -> Any: ...
def openGLExtension(extension: str, renderer: bool, version: bool, vendor: bool) -> Any: ...
def openMayaPref(edit: bool, query: bool, errlog: bool, lazyLoad: bool, oldPluginWarning: bool) -> Any: ...
def optionMenu(edit: bool, query: bool, alwaysCallChangeCommand: bool, annotation: str, beforeShowPopup: Callable, changeCommand: Callable, deleteAllItems: bool, dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enableKeyboardFocus: bool, enable: bool, exists: bool, fullPathName: bool, height: int, itemListLong: bool, itemListShort: bool, isObscured: bool, label: str, manage: bool, maxVisibleItems: int, noBackground: bool, numberOfItems: bool, numberOfPopupMenus: bool, parent: str, popupMenuArray: bool, postMenuCommand: Callable, postMenuCommandOnce: bool, preventOverride: bool, statusBarMessage: str, select: int, useTemplate: str, value: str, visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def optionMenuGrp(edit: bool, query: bool, adjustableColumn2: int, adjustableColumn3: int, adjustableColumn4: int, adjustableColumn5: int, adjustableColumn6: int, adjustableColumn: int, annotation: str, columnAlign: List[Tuple[int, str]], changeCommand: Callable, columnAlign2: Tuple[str, str], columnOffset2: Tuple[int, int], columnAttach2: Tuple[str, str], columnWidth: List[Tuple[int, int]], columnWidth1: int, columnWidth2: Tuple[int, int], deleteAllItems: bool, dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enableKeyboardFocus: bool, extraLabel: str, enable: bool, exists: bool, fullPathName: bool, height: int, itemListLong: bool, itemListShort: bool, isObscured: bool, label: str, manage: bool, noBackground: bool, numberOfItems: bool, numberOfPopupMenus: bool, parent: str, popupMenuArray: bool, postMenuCommand: Callable, postMenuCommandOnce: bool, preventOverride: bool, statusBarMessage: str, select: int, useTemplate: str, value: str, visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def optionVar(arraySize: str, clearArray: List[str], clearStash: List[str], exists: str, floatValue: List[Tuple[str, float]], floatValueAppend: List[Tuple[str, float]], intValue: List[Tuple[str, int]], intValueAppend: List[Tuple[str, int]], list: bool, query: str, removeFromArray: List[Tuple[str, int]], remove: List[str], stash: List[str], stringValue: List[Tuple[str, str]], stringValueAppend: List[Tuple[str, str]], unstash: List[str], version: int) -> Any: ...
def orbit(horizontalAngle: float, rotationAngles: Tuple[float, float], verticalAngle: float) -> Any: ...
def orbitCtx(edit: bool, query: bool, alternateContext: bool, history: bool, exists: bool, image1: str, image2: str, image3: str, localOrbit: bool, name: str, orbitScale: float, toolName: str) -> Any: ...
def orientConstraint(edit: bool, query: bool, createCache: Tuple[float, float], deleteCache: bool, layer: str, maintainOffset: bool, name: str, remove: bool, skip: List[str], targetList: bool, weight: float, weightAliasList: bool) -> Any: ...
def outlinerEditor(edit: bool, query: bool, showAssets: bool, attrAlphaOrder: str, showAnimCurvesOnly: bool, autoExpandLayers: bool, attrFilter: str, animLayerFilterOptions: str, allowMultiSelection: bool, autoSelectNewObjects: bool, showAttributes: bool, alwaysToggleSelect: bool, showAttrValues: bool, containersIgnoreFilters: bool, showCompounds: bool, showConnected: bool, control: bool, showDagOnly: bool, dropIsParent: bool, displayMode: str, doNotSelectNewObjects: bool, directSelect: bool, defineTemplate: str, docTag: str, expandAllItems: bool, editAttrName: bool, expandAllSelectedItems: bool, expandAttribute: bool, expandObjects: bool, exists: bool, filter: str, feedbackItemName: bool, feedbackRowNumber: bool, forceMainConnection: str, getCurrentSetOfItem: int, highlightActive: bool, ignoreDagHierarchy: bool, highlightConnection: str, highlightSecondary: bool, isChildSelected: str, ignoreHiddenAttribute: bool, ignoreOutlinerColor: bool, isSet: int, isSetMember: int, isUfeItem: int, showLeafs: bool, lockMainConnection: bool, longNames: bool, mainListConnection: str, mapMotionTrails: bool, masterOutliner: str, niceNames: bool, showNumericAttrsOnly: bool, organizeByClip: bool, object: str, organizeByLayer: bool, parent: str, pinPlug: str, panel: str, parentObject: bool, removeFromCurrentSet: int, renderFilterActive: bool, renderFilterIndex: int, refresh: bool, renderFilterVisible: bool, showReferenceMembers: bool, showReferenceNodes: bool, renameItem: int, renameSelectedItem: bool, showAssignedMaterials: bool, showAnimLayerWeight: bool, showSelected: bool, showContainerContents: bool, showContainedOnly: bool, selectCommand: Callable, setFilter: str, showShapes: bool, setsIgnoreFilters: bool, selectionConnection: str, showMuteInfo: bool, showNamespace: bool, sortOrder: str, sortCommand: Callable, selectionOrder: str, showParentContainers: bool, showPublishedAsConnected: bool, showPinIcons: bool, showSetMembers: bool, showTimeEditor: bool, stateString: bool, showUnitlessCurves: bool, showUpstreamCurves: bool, transmitFilters: bool, showTextureNodesOnly: bool, ufeFilterValue: bool, unlockMainConnection: bool, unpinPlug: str, unParent: bool, updateMainConnection: bool, useTemplate: str, showUVAttrsOnly: bool, autoExpandAnimatedShapes: bool, expandConnections: bool, autoExpand: bool) -> Any: ...
def outlinerPanel(edit: bool, query: bool, copy: str, createString: bool, control: bool, divider: int, defineTemplate: str, docTag: str, editString: bool, exists: bool, init: bool, isUnique: bool, label: str, menuBarVisible: bool, menuBarRepeatLast: bool, needsInit: bool, outlinerEditor: bool, parent: str, popupMenuProcedure: Callable, replacePanel: str, tearOff: bool, tearOffCopy: str, tearOffRestore: bool, unParent: bool, useTemplate: str) -> Any: ...
def outputWindow(query: bool, show: bool) -> Any: ...
def overrideModifier(*args, **kwargs) -> Any: ...
def paint3d() -> Any: ...
def paintEffectsDisplay(query: bool, meshDrawEnable: bool) -> Any: ...
def pairBlend(edit: bool, query: bool, attribute: List[str], input1: bool, input2: bool, node: str) -> Any: ...
def palettePort(edit: bool, query: bool, annotation: str, actualTotal: int, changeCommand: Callable, colorEdited: Callable, colorEditable: bool, dragCallback: Callable, dimensions: Tuple[int, int], dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, editable: bool, enableKeyboardFocus: bool, enable: bool, exists: bool, fullPathName: bool, height: int, isObscured: bool, manage: bool, noBackground: bool, numberOfPopupMenus: bool, parent: str, popupMenuArray: bool, preventOverride: bool, redraw: bool, statusBarMessage: str, setCurCell: int, transparent: int, topDown: bool, useTemplate: str, visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def panZoom(absolute: bool, downDistance: float, leftDistance: float, rightDistance: float, relative: bool, upDistance: float, zoomRatio: float) -> Any: ...
def panZoomCtx(edit: bool, query: bool, alternateContext: bool, buttonDown: bool, buttonUp: bool, history: bool, exists: bool, image1: str, image2: str, image3: str, name: str, panMode: bool, toolName: str, zoomMode: bool, zoomScale: float) -> Any: ...
def paneLayout(edit: bool, query: bool, activeFrameThickness: int, annotation: str, activePane: str, activePaneIndex: int, childArray: bool, configuration: str, dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enableKeyboardFocus: bool, enable: bool, exists: bool, fullPathName: bool, height: int, isObscured: bool, manage: bool, noBackground: bool, numberOfChildren: bool, numberOfPopupMenus: bool, numberOfVisiblePanes: bool, parent: str, pane1: bool, pane2: bool, pane3: bool, pane4: bool, popupMenuArray: bool, preventOverride: bool, paneUnderPointer: bool, statusBarMessage: str, staticHeightPane: int, separatorMovedCommand: Callable, setPane: List[Tuple[str, int]], separatorThickness: int, staticWidthPane: int, useTemplate: str, visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def panel(edit: bool, query: bool, copy: str, createString: bool, control: bool, defineTemplate: str, docTag: str, editString: bool, exists: bool, init: bool, isUnique: bool, label: str, menuBarVisible: bool, menuBarRepeatLast: bool, needsInit: bool, parent: str, popupMenuProcedure: Callable, replacePanel: str, tearOff: bool, tearOffCopy: str, tearOffRestore: bool, unParent: bool, useTemplate: str) -> Any: ...
def panelConfiguration(edit: bool, query: bool, configString: str, createStrings: bool, defaultImage: str, defineTemplate: str, editStrings: bool, exists: bool, image: str, isFixedState: bool, label: str, labelStrings: bool, numberOfPanels: bool, removeAllPanels: bool, replaceCreateString: Tuple[int, str], replaceEditString: Tuple[int, str], replaceLabel: Tuple[int, str], removeLastPanel: bool, replaceTypeString: Tuple[int, str], sceneConfig: bool, typeStrings: bool, userCreated: bool, useTemplate: str) -> Any: ...
def panelHistory(edit: bool, query: bool, back: bool, clear: bool, defineTemplate: str, exists: bool, forward: bool, historyDepth: int, isEmpty: bool, suspend: bool, targetPane: str, useTemplate: str, wrap: bool) -> Any: ...
def paramDimContext(edit: bool, query: bool, history: bool, exists: bool, image1: str, image2: str, image3: str, name: str) -> Any: ...
def paramDimension() -> Any: ...
def paramLocator(edit: bool, query: bool, position: bool) -> Any: ...
def parent(absolute: bool, addObject: bool, noConnections: bool, noInvScale: bool, relative: bool, removeObject: bool, shape: bool, world: bool) -> Any: ...
def parentConstraint(edit: bool, query: bool, createCache: Tuple[float, float], deleteCache: bool, decompRotationToChild: bool, layer: str, maintainOffset: bool, name: str, remove: bool, skipRotate: List[str], skipTranslate: List[str], targetList: bool, weight: float, weightAliasList: bool) -> Any: ...
def particle(edit: bool, query: bool, conserve: float, cache: bool, count: bool, dynamicAttrList: bool, deleteCache: bool, floatValue: float, gridSpacing: List[float], inherit: float, jitterRadius: List[float], name: str, numJitters: List[int], perParticleDouble: bool, perParticleVector: bool, shapeName: str) -> Any: ...
def particleExists() -> Any: ...
def particleFill(closePacking: bool, doubleWalled: bool, minX: float, minY: float, minZ: float, maxX: float, maxY: float, maxZ: float, particleDensity: float, resolution: int) -> Any: ...
def particleInstancer(edit: bool, query: bool, addObject: bool, aimAxis: str, aimDirection: str, particleAge: str, attributeMapping: bool, aimPosition: str, aimUpAxis: str, aimWorldUp: str, cycle: str, cycleStep: float, cycleStepUnits: str, index: int, instanceId: str, levelOfDetail: str, name: str, object: List[str], objectIndex: str, position: str, rotation: str, removeObject: bool, rotationOrder: str, rotationType: str, rotationUnits: str, scale: str, shear: str, cycleStartObject: str, visibility: str) -> Any: ...
def particleRenderInfo(query: bool, attrList: int, attrListAll: bool, name: int, renderTypeCount: bool) -> Any: ...
def partition(edit: bool, query: bool, addSet: str, name: str, render: bool, removeSet: str) -> Any: ...
def pasteKey(edit: bool, query: bool, animLayer: str, animation: str, connect: bool, clipboard: str, copies: int, floatOffset: float, includeUpperBound: bool, matchByName: bool, option: str, timeOffset: int, valueOffset: float) -> Any: ...
def pathAnimation(edit: bool, query: bool, bank: bool, bankScale: float, bankThreshold: float, curve: str, endTimeU: List[int], endU: float, follow: bool, followAxis: str, fractionMode: bool, inverseFront: bool, inverseUp: bool, name: str, startTimeU: List[int], startU: float, upAxis: str, useNormal: bool, worldUpObject: str, worldUpType: str) -> Any: ...
def pause(seconds: int) -> Any: ...
def perCameraVisibility(query: bool, camera: str, exclusive: bool, hide: bool, removeAll: bool, removeCamera: bool, remove: bool) -> Any: ...
def percent(query: bool, addPercent: bool, dropoffCurve: str, dropoffDistance: float, dropoffType: str, multiplyPercent: bool, value: float) -> Any: ...
def performanceOptions(query: bool, clusterResolution: float, disableStitch: str, disableTrimDisplay: str, disableTrimBoundaryDisplay: str, latticeResolution: float, passThroughBindSkinAndFlexors: str, passThroughBlendShape: str, passThroughCluster: str, passThroughDeltaMush: str, passThroughFlexors: str, passThroughLattice: str, passThroughPaintEffects: str, passThroughSculpt: str, passThroughWire: str, skipHierarchyTraversal: bool, useClusterResolution: str, useLatticeResolution: str) -> Any: ...
def pfxstrokes(filename: str, postCallback: bool, selected: bool) -> Any: ...
def pickWalk(direction: str, recurse: bool, type: str) -> Any: ...
def picture(edit: bool, query: bool, annotation: str, dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enableKeyboardFocus: bool, enable: bool, exists: bool, fullPathName: bool, height: int, image: str, isObscured: bool, manage: bool, noBackground: bool, numberOfPopupMenus: bool, parent: str, popupMenuArray: bool, preventOverride: bool, statusBarMessage: str, tile: bool, useTemplate: str, visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def pixelMove() -> Any: ...
def planarSrf(edit: bool, query: bool, caching: bool, constructionHistory: bool, degree: int, frozen: bool, keepOutside: bool, name: str, nodeState: int, object: bool, polygon: int, range: bool, tolerance: float) -> Any: ...
def plane(length: float, name: str, size: float, width: float) -> Any: ...
def play(query: bool, forward: bool, playSound: bool, record: bool, sound: str, state: bool, wait: bool) -> Any: ...
def playbackOptions(edit: bool, query: bool, animationEndTime: int, animationStartTime: int, blockingAnim: bool, framesPerSecond: bool, loop: str, maxTime: int, minTime: int, maxPlaybackSpeed: float, playbackSpeed: float, stepLoop: bool, view: str) -> Any: ...
def playblast(query: bool, activeEditor: bool, compression: str, clearCache: bool, completeFilename: str, codecOptions: bool, cameraSetup: List[Tuple[str, str]], combineSound: bool, editorPanelName: str, endTime: int, filename: str, format: str, forceOverwrite: bool, framePadding: int, frame: List[int], height: int, indexFromZero: bool, options: bool, showOrnaments: bool, offScreen: bool, offScreenViewportUpdate: bool, percent: int, quality: int, replaceAudioOnly: bool, replaceEndTime: int, replaceFilename: str, rawFrameNumbers: bool, replaceStartTime: int, sound: str, saveDepth: bool, sequenceTime: bool, startTime: int, throwOnError: bool, useTraxSounds: bool, viewer: bool, width: int, widthHeight: Tuple[int, int]) -> Any: ...
def pluginDisplayFilter(query: bool, classification: str, deregister: bool, exists: bool, label: str, listFilters: bool, register: bool) -> Any: ...
def pluginInfo(edit: bool, query: bool, autoload: bool, animCurveInterp: Tuple[str, str], allEvaluators: bool, activeFile: bool, apiVersion: bool, command: List[str], changedCommand: Callable, cacheFormat: bool, constraintCommand: bool, controlCommand: bool, data: List[Tuple[str, str]], dragAndDropBehavior: bool, dependNodeId: str, device: bool, evaluator: bool, iksolver: bool, loaded: bool, loadPluginPrefs: bool, listPlugins: bool, listPluginsPath: bool, modelEditorCommand: bool, name: str, path: str, pluginsInUse: bool, registered: bool, renderer: bool, remove: bool, referenceTranslators: bool, serviceDescriptions: bool, settings: bool, savePluginPrefs: bool, tool: List[str], translator: bool, userNamed: bool, unloadOk: bool, version: bool, vendor: str, writeRequires: bool) -> Any: ...
def pointConstraint(edit: bool, query: bool, layer: str, maintainOffset: bool, name: str, remove: bool, skip: List[str], targetList: bool, weight: float, weightAliasList: bool) -> Any: ...
def pointCurveConstraint(edit: bool, query: bool, caching: bool, constructionHistory: bool, frozen: bool, name: str, nodeState: int, object: bool, pointWeight: float, replaceOriginal: bool, weight: float) -> Any: ...
def pointLight(edit: bool, query: bool, decayRate: int, discRadius: float, exclusive: bool, intensity: float, name: str, useRayTraceShadows: bool, shadowDither: float, shadowSamples: int, softShadow: bool) -> Any: ...
def pointOnCurve(edit: bool, query: bool, curvatureCenter: bool, caching: bool, constructionHistory: bool, curvatureRadius: bool, frozen: bool, nodeState: int, normalizedNormal: bool, normal: bool, normalizedTangent: bool, position: bool, parameter: float, tangent: bool, turnOnPercentage: bool) -> Any: ...
def pointOnPolyConstraint(edit: bool, query: bool, layer: str, maintainOffset: bool, name: str, remove: bool, skip: List[str], targetList: bool, weight: float, weightAliasList: bool) -> Any: ...
def pointOnSurface(edit: bool, query: bool, caching: bool, constructionHistory: bool, frozen: bool, nodeState: int, normalizedNormal: bool, normal: bool, normalizedTangentU: bool, normalizedTangentV: bool, position: bool, turnOnPercentage: bool, tangentU: bool, tangentV: bool, parameterU: float, parameterV: float) -> Any: ...
def pointPosition(local: bool, world: bool) -> Any: ...
def poleVectorConstraint(edit: bool, query: bool, name: str, remove: bool, targetList: bool, weight: float, weightAliasList: bool) -> Any: ...
def polyAppend(edit: bool, query: bool, constructionHistory: bool, edge: List[int], name: str, subdivision: int, texture: int) -> Any: ...
def polyAppendFacetCtx(*args, **kwargs) -> Any: ...
def polyAppendVertex(edit: bool, query: bool, constructionHistory: bool, name: str, texture: int, vertex: List[int]) -> Any: ...
def polyAutoProjection(edit: bool, query: bool, caching: bool, constructionHistory: bool, createNewMap: bool, frozen: bool, insertBeforeDeformers: bool, layout: int, layoutMethod: int, name: str, nodeState: int, optimize: int, planes: int, projectBothDirections: bool, percentageSpace: float, pivotX: float, pivotY: float, pivotZ: float, rotateX: float, rotateY: float, rotateZ: float, scaleMode: int, skipIntersect: bool, scaleX: float, scaleY: float, scaleZ: float, translateX: float, translateY: float, translateZ: float, uvSetName: str, worldSpace: bool) -> Any: ...
def polyAverageNormal(allowZeroNormal: bool, distance: float, postnormalize: bool, prenormalize: bool) -> Any: ...
def polyAverageVertex(edit: bool, query: bool, caching: bool, constructionHistory: bool, frozen: bool, iterations: int, name: str, nodeState: int, worldSpace: bool) -> Any: ...
def polyBevel(edit: bool, query: bool, autoFit: bool, angleTolerance: float, caching: bool, constructionHistory: bool, useLegacyBevelAlgorithm: bool, fraction: float, fillNgons: bool, frozen: bool, maya2015: bool, miteringAngle: float, mergeVertices: bool, mergeVertexTolerance: float, name: str, nodeState: int, offset: float, offsetAsFraction: bool, roundness: float, smoothingAngle: float, segments: int, uvAssignment: int, worldSpace: bool) -> Any: ...
def polyBevel3(edit: bool, query: bool, autoFit: bool, angleTolerance: float, chamfer: bool, caching: bool, constructionHistory: bool, depth: float, fraction: float, fillNgons: bool, forceParallel: bool, frozen: bool, mitering: int, maya2015: bool, maya2016SP3: bool, maya2017Update1: bool, miteringAngle: float, miterAlong: int, mergeVertices: bool, mergeVertexTolerance: float, name: str, nodeState: int, offset: float, offsetAsFraction: bool, roundness: float, smoothingAngle: float, segments: int, subdivideNgons: bool, worldSpace: bool) -> Any: ...
def polyBlendColor(edit: bool, query: bool, baseColorName: str, blendFunc: int, blendWeightA: float, blendWeightB: float, blendWeightC: float, blendWeightD: float, caching: bool, constructionHistory: bool, dstColorName: str, frozen: bool, name: str, nodeState: int, srcColorName: str) -> Any: ...
def polyBlindData(edit: bool, associationType: str, booleanData: List[bool], binaryData: List[str], doubleData: List[float], delete: bool, typeId: int, intData: List[int], longDataName: List[str], int64Data: List[int], rescan: bool, reset: bool, stringData: List[str], shortDataName: List[str], shape: bool) -> Any: ...
def polyBoolOp(edit: bool, query: bool, caching: bool, constructionHistory: bool, classification: int, faceAreaThreshold: float, frozen: bool, mergeUVSets: int, name: str, nodeState: int, object: bool, operation: int, preserveColor: bool, useThresholds: bool, vertexDistanceThreshold: float) -> Any: ...
def polyBridgeEdge(edit: bool, query: bool, bridgeOffset: int, caching: bool, taperCurve_FloatValue: float, constructionHistory: bool, taperCurve_Interp: int, taperCurve_Position: float, curveType: int, direction: int, divisions: int, frozen: bool, inputCurve: str, name: str, nodeState: int, reverse: bool, sourceDirection: int, smoothingAngle: float, startVert1: int, startVert2: int, targetDirection: int, taper: float, twist: float, worldSpace: bool) -> Any: ...
def polyCBoolOp(edit: bool, query: bool, caching: bool, constructionHistory: bool, classification: int, edgeInterpolation: bool, faceAreaThreshold: float, frozen: bool, mergeUVSets: int, name: str, nodeState: int, object: bool, operation: int, preserveColor: bool, planarTolerance: float, sortOutput: bool, useCarveBooleans: bool, useThresholds: bool, vertexDistanceThreshold: float) -> Any: ...
def polyCacheMonitor(cacheValue: bool, nodeName: str) -> Any: ...
def polyCanBridgeEdge() -> Any: ...
def polyCheck(edge: bool, face: bool, faceOffset: bool, openFile: str) -> Any: ...
def polyChipOff(edit: bool, query: bool, attraction: float, caching: bool, constructionHistory: bool, duplicate: bool, frozen: bool, gain: List[float], gravityX: float, gravityY: float, gravityZ: float, keepFacesTogether: bool, localCenter: int, localDirectionX: float, localDirectionY: float, localDirectionZ: float, localRotateX: float, localRotateY: float, localRotateZ: float, localScaleX: float, localScaleY: float, localScaleZ: float, localTranslateX: float, localTranslateY: float, localTranslateZ: float, magnX: float, magnY: float, magnZ: float, name: str, nodeState: int, offset: float, pivotX: float, pivotY: float, pivotZ: float, random: float, rotateX: float, rotateY: float, rotateZ: float, scaleX: float, scaleY: float, scaleZ: float, translateX: float, translateY: float, translateZ: float, weight: float, worldSpace: bool, keepFacetTogether: bool) -> Any: ...
def polyCircularize(edit: bool, query: bool, alignment: int, caching: bool, constructionHistory: bool, divisions: int, evenlyDistribute: bool, frozen: bool, name: str, nodeState: int, normalOffset: float, normalOrientation: int, relaxInterior: float, radialOffset: float, smoothingAngle: float, supportingEdges: int, twist: float, worldSpace: bool) -> Any: ...
def polyCircularizeEdge(edit: bool, query: bool, alignment: int, caching: bool, constructionHistory: bool, divisions: int, evenlyDistribute: bool, frozen: bool, name: str, nodeState: int, normalOffset: float, normalOrientation: int, relaxInterior: float, radialOffset: float, smoothingAngle: float, supportingEdges: int, twist: float, worldSpace: bool) -> Any: ...
def polyCircularizeFace(edit: bool, query: bool, alignment: int, caching: bool, constructionHistory: bool, divisions: int, evenlyDistribute: bool, frozen: bool, name: str, nodeState: int, normalOffset: float, normalOrientation: int, relaxInterior: float, radialOffset: float, smoothingAngle: float, supportingEdges: int, twist: float, worldSpace: bool) -> Any: ...
def polyClean(edit: bool, query: bool, caching: bool, cleanEdges: bool, constructionHistory: bool, cleanPartialUVMapping: bool, cleanUVs: bool, cleanVertices: bool, frozen: bool, name: str, nodeState: int) -> Any: ...
def polyClipboard(clear: bool, color: bool, copy: bool, paste: bool, shader: bool, uvCoordinates: bool) -> Any: ...
def polyCloseBorder(edit: bool, query: bool, caching: bool, constructionHistory: bool, frozen: bool, name: str, nodeState: int) -> Any: ...
def polyCollapseEdge(edit: bool, query: bool, caching: bool, constructionHistory: bool, frozen: bool, name: str, nodeState: int) -> Any: ...
def polyCollapseFacet(edit: bool, query: bool, areaThreshold: float, caching: bool, constructionHistory: bool, frozen: bool, name: str, nodeState: int, useAreaThreshold: bool) -> Any: ...
def polyCollapseTweaks(query: bool, hasVertexTweaks: bool) -> Any: ...
def polyColorBlindData(*args, **kwargs) -> Any: ...
def polyColorDel(edit: bool, query: bool, caching: bool, constructionHistory: bool, colorSetName: str, frozen: bool, name: str, nodeState: int) -> Any: ...
def polyColorMod(edit: bool, query: bool, alphaScale_FloatValue: float, alphaScale_Interp: int, alphaScale_Position: float, baseColorName: str, blueScale_FloatValue: float, blueScale_Interp: int, blueScale_Position: float, caching: bool, constructionHistory: bool, frozen: bool, greenScale_FloatValue: float, greenScale_Interp: int, greenScale_Position: float, huev: float, name: str, nodeState: int, intensityScale_FloatValue: float, intensityScale_Interp: int, intensityScale_Position: float, redScale_FloatValue: float, redScale_Interp: int, redScale_Position: float, satv: float, value: float) -> Any: ...
def polyColorPerVertex(edit: bool, query: bool, alpha: float, colorB: float, colorDisplayOption: bool, clamped: bool, colorG: float, notUndoable: bool, colorR: float, relative: bool, remove: bool, representation: int) -> Any: ...
def polyColorSet(edit: bool, query: bool, allColorSets: bool, currentColorSet: bool, clamped: bool, copy: bool, currentPerInstanceSet: bool, create: bool, colorSet: str, delete: bool, newColorSet: str, rename: bool, representation: str, shareInstances: bool, unshared: bool) -> Any: ...
def polyColorSetCmdWrapper(*args, **kwargs) -> Any: ...
def polyCompare(colorSets: bool, edges: bool, faceDesc: bool, colorSetIndices: bool, uvSetIndices: bool, userNormals: bool, uvSets: bool, vertices: bool) -> Any: ...
def polyCone(edit: bool, query: bool, caching: bool, constructionHistory: bool, componentTagCreate: bool, createUVs: int, frozen: bool, height: float, name: str, nodeState: int, object: bool, radius: float, roundCap: bool, subdivisionsAxis: int, subdivisionsCap: int, subdivisionsHeight: int, subdivisionsX: int, subdivisionsY: int, subdivisionsZ: int, texture: bool) -> Any: ...
def polyConnectComponents(edit: bool, query: bool, adjustEdgeFlow: float, caching: bool, constructionHistory: bool, frozen: bool, insertWithEdgeFlow: bool, name: str, nodeState: int) -> Any: ...
def polyContourProjection(edit: bool, query: bool, caching: bool, constructionHistory: bool, createNewMap: bool, flipRails: bool, frozen: bool, insertBeforeDeformers: bool, method: int, name: str, nodeState: int, offset0: float, offset1: float, offset2: float, offset3: float, reduceShear: float, smoothness0: float, smoothness1: float, smoothness2: float, smoothness3: float, userDefinedCorners: bool, uvSetName: str, worldSpace: bool) -> Any: ...
def polyCopyUV(edit: bool, query: bool, caching: bool, constructionHistory: bool, createNewMap: bool, frozen: bool, name: str, nodeState: int, uvSetNameInput: str, uvSetName: str, worldSpace: bool) -> Any: ...
def polyCrease(edit: bool, query: bool, createHistory: bool, operation: int, relativeValue: float, value: List[float], vertexValue: List[float]) -> Any: ...
def polyCreaseCtx(*args, **kwargs) -> Any: ...
def polyCreateFacet(edit: bool, query: bool, constructionHistory: bool, name: str, subdivision: int, texture: int) -> Any: ...
def polyCreateFacetCtx(*args, **kwargs) -> Any: ...
def polyCube(edit: bool, query: bool, caching: bool, constructionHistory: bool, componentTagCreate: bool, createUVs: int, depth: float, frozen: bool, height: float, name: str, nodeState: int, object: bool, subdivisionsDepth: int, subdivisionsHeight: int, subdivisionsWidth: int, subdivisionsX: int, subdivisionsY: int, subdivisionsZ: int, texture: int, width: float) -> Any: ...
def polyCut(edit: bool, query: bool, caching: bool, cuttingDirection: str, constructionHistory: bool, deleteFaces: bool, extractFaces: bool, extractOffsetX: float, extractOffsetY: float, extractOffsetZ: float, frozen: bool, name: str, nodeState: int, onObject: bool, cutPlaneCenterX: float, cutPlaneCenterY: float, cutPlaneCenterZ: float, cutPlaneHeight: float, cutPlaneSize: Tuple[float, float], cutPlaneWidth: float, cutPlaneRotateX: float, cutPlaneRotateY: float, cutPlaneRotateZ: float, worldSpace: bool) -> Any: ...
def polyCutCtx(*args, **kwargs) -> Any: ...
def polyCutUVCtx(*args, **kwargs) -> Any: ...
def polyCylinder(edit: bool, query: bool, caching: bool, constructionHistory: bool, componentTagCreate: bool, createUVs: int, frozen: bool, height: float, name: str, nodeState: int, object: bool, radius: float, roundCap: bool, subdivisionsAxis: int, subdivisionsCaps: int, subdivisionsHeight: int, subdivisionsX: int, subdivisionsY: int, subdivisionsZ: int, texture: int) -> Any: ...
def polyCylindricalProjection(edit: bool, query: bool, caching: bool, constructionHistory: bool, createNewMap: bool, frozen: bool, insertBeforeDeformers: bool, imageCenter: Tuple[float, float], imageCenterX: float, imageCenterY: float, imageScale: Tuple[float, float], imageScaleU: float, imageScaleV: float, keepImageRatio: bool, mapDirection: str, name: str, nodeState: int, projectionCenterX: float, projectionCenterY: float, projectionCenterZ: float, projectionHeight: float, projectionHorizontalSweep: float, perInstance: bool, projectionScale: Tuple[float, float], projectionScaleU: float, projectionScaleV: float, radius: float, rotationAngle: float, rotateX: float, rotateY: float, rotateZ: float, seamCorrect: bool, smartFit: bool, worldSpace: bool) -> Any: ...
def polyDelEdge(edit: bool, query: bool, caching: bool, constructionHistory: bool, cleanVertices: bool, frozen: bool, name: str, nodeState: int) -> Any: ...
def polyDelFacet(edit: bool, query: bool, caching: bool, constructionHistory: bool, frozen: bool, name: str, nodeState: int) -> Any: ...
def polyDelVertex(edit: bool, query: bool, caching: bool, constructionHistory: bool, frozen: bool, name: str, nodeState: int) -> Any: ...
def polyDuplicateAndConnect(renameChildren: bool, removeOriginalFromShaders: bool) -> Any: ...
def polyDuplicateEdge(edit: bool, query: bool, adjustEdgeFlow: float, caching: bool, constructionHistory: bool, deleteEdge: bool, endVertexOffset: float, frozen: bool, insertWithEdgeFlow: bool, name: str, nodeState: int, offset: float, smoothingAngle: float, splitType: int, startVertexOffset: float) -> Any: ...
def polyEditEdgeFlow(edit: bool, query: bool, adjustEdgeFlow: float, caching: bool, constructionHistory: bool, edgeFlow: bool, frozen: bool, name: str, nodeState: int) -> Any: ...
def polyEditUV(query: bool, angle: float, pivotU: float, pivotV: float, relative: bool, rotation: bool, rotateRatio: float, scale: bool, scaleU: float, scaleV: float, uValue: float, uvSetName: str, vValue: float) -> Any: ...
def polyEditUVShell(query: bool, angle: float, pivotU: float, pivotV: float, relative: bool, rotation: bool, rotateRatio: float, scale: bool, scaleU: float, scaleV: float, uValue: float, uvSetName: str, vValue: float) -> Any: ...
def polyEvaluate(area: bool, accurateEvaluation: bool, activeShells: bool, activeUVShells: bool, boundingBox: bool, boundingBox2d: bool, boundingBoxComponent: bool, boundingBoxComponent2d: bool, displayStats: bool, edge: bool, edgeComponent: bool, face: bool, faceArea: bool, faceComponent: bool, format: bool, shell: bool, triangle: bool, triangleComponent: bool, uvEdgePairs: bool, uvFaceArea: bool, uvsInShell: int, uvShell: bool, uvShellIds: bool, uvcoord: bool, uvArea: bool, uvComponent: bool, uvSetName: str, vertex: bool, vertexComponent: bool, worldArea: bool, worldFaceArea: bool) -> Any: ...
def polyExtrudeEdge(edit: bool, query: bool, createCurve: bool, caching: bool, taperCurve_FloatValue: float, constructionHistory: bool, taperCurve_Interp: int, taperCurve_Position: float, divisions: int, frozen: bool, gain: List[float], inputCurve: str, keepFacesTogether: bool, localCenter: int, localDirectionX: float, localDirectionY: float, localDirectionZ: float, localRotateX: float, localRotateY: float, localRotateZ: float, localScaleX: float, localScaleY: float, localScaleZ: float, localTranslateX: float, localTranslateY: float, localTranslateZ: float, name: str, nodeState: int, offset: float, pivotX: float, pivotY: float, pivotZ: float, random: float, rotateX: float, rotateY: float, rotateZ: float, smoothingAngle: float, scaleX: float, scaleY: float, scaleZ: float, thickness: float, taper: float, twist: float, translateX: float, translateY: float, translateZ: float, worldSpace: bool) -> Any: ...
def polyExtrudeFacet(edit: bool, query: bool, attraction: float, createCurve: bool, caching: bool, taperCurve_FloatValue: float, constructionHistory: bool, taperCurve_Interp: int, taperCurve_Position: float, divisions: int, frozen: bool, gain: List[float], gravityX: float, gravityY: float, gravityZ: float, inputCurve: str, keepFacesTogether: bool, localCenter: int, localDirectionX: float, localDirectionY: float, localDirectionZ: float, localRotateX: float, localRotateY: float, localRotateZ: float, localScaleX: float, localScaleY: float, localScaleZ: float, localTranslateX: float, localTranslateY: float, localTranslateZ: float, maya2012: bool, maya2018: bool, magnX: float, magnY: float, magnZ: float, name: str, nodeState: int, newThickness: bool, offset: float, pivotX: float, pivotY: float, pivotZ: float, reverseAllFaces: bool, random: float, rotateX: float, rotateY: float, rotateZ: float, smoothingAngle: float, scaleX: float, scaleY: float, scaleZ: float, thickness: float, taper: float, twist: float, translateX: float, translateY: float, translateZ: float, weight: float, worldSpace: bool, keepFacetTogether: bool) -> Any: ...
def polyExtrudeVertex(edit: bool, query: bool, caching: bool, constructionHistory: bool, divisions: int, frozen: bool, length: float, name: str, nodeState: int, width: float, worldSpace: bool) -> Any: ...
def polyFlipEdge(edit: bool, query: bool) -> Any: ...
def polyFlipUV(edit: bool, query: bool, caching: bool, constructionHistory: bool, createNewMap: bool, cutUV: bool, flipType: int, frozen: bool, insertBeforeDeformers: bool, local: bool, name: str, nodeState: int, pivotU: float, pivotV: float, usePivot: bool, uvSetName: str, worldSpace: bool) -> Any: ...
def polyForceUV(createNewMap: bool, cameraProjection: bool, flipHorizontal: bool, flipVertical: bool, g: bool, local: bool, numItems: int, normalize: str, preserveAspectRatio: bool, unshare: bool, unitize: bool, uvSetName: str) -> Any: ...
def polyGeoSampler(*args, **kwargs) -> Any: ...
def polyHelix(edit: bool, query: bool, coils: float, caching: bool, constructionHistory: bool, componentTagCreate: bool, createUVs: int, direction: int, frozen: bool, height: float, name: str, nodeState: int, object: bool, useOldInitBehaviour: bool, radius: float, roundCap: bool, subdivisionsAxis: int, subdivisionsCaps: int, subdivisionsCoil: int, texture: int, width: float) -> Any: ...
def polyHole(edit: bool, query: bool, assignHole: bool, createHistory: bool) -> Any: ...
def polyInfo(edgeToFace: bool, edgeToVertex: bool, faceToEdge: bool, faceNormals: bool, faceToVertex: bool, invalidEdges: bool, invalidVertices: bool, laminaFaces: bool, nonManifoldEdges: bool, nonManifoldVertices: bool, nonManifoldUVEdges: bool, nonManifoldUVs: bool, vertexToEdge: bool, vertexToFace: bool) -> Any: ...
def polyInstallAction(*args, **kwargs) -> Any: ...
def polyIterOnPoly(*args, **kwargs) -> Any: ...
def polyLayoutUV(edit: bool, query: bool, caching: bool, constructionHistory: bool, flipReversed: bool, frozen: bool, gridU: int, gridV: int, layout: int, layoutMethod: int, name: str, nodeState: int, percentageSpace: float, rotateForBestFit: int, scale: int, separate: int, uvSetName: str, worldSpace: bool) -> Any: ...
def polyListComponentConversion(border: bool, fromEdge: bool, fromFace: bool, fromUV: bool, fromVertex: bool, fromVertexFace: bool, internal: bool, toEdge: bool, toFace: bool, toUV: bool, toVertex: bool, toVertexFace: bool, uvShell: bool, vertexFaceAllEdges: bool) -> Any: ...
def polyMapCut(edit: bool, query: bool, caching: bool, constructionHistory: bool, frozen: bool, moveRatio: float, moveratio: float, name: str, nodeState: int, usePinning: bool) -> Any: ...
def polyMapDel(edit: bool, query: bool, caching: bool, constructionHistory: bool, frozen: bool, name: str, nodeState: int) -> Any: ...
def polyMapSew(edit: bool, query: bool, caching: bool, constructionHistory: bool, frozen: bool, name: str, nodeState: int, usePinning: bool) -> Any: ...
def polyMapSewMove(edit: bool, query: bool, caching: bool, constructionHistory: bool, frozen: bool, limitPieceSize: bool, name: str, nodeState: int, numberFaces: int, uvSetName: str, worldSpace: bool) -> Any: ...
def polyMergeEdge(edit: bool, query: bool, caching: bool, constructionHistory: bool, firstEdge: int, frozen: bool, mergeMode: int, mergeTexture: bool, name: str, nodeState: int, secondEdge: int) -> Any: ...
def polyMergeEdgeCtx(*args, **kwargs) -> Any: ...
def polyMergeFacet(edit: bool, query: bool, caching: bool, constructionHistory: bool, firstFacet: int, frozen: bool, mergeMode: int, name: str, nodeState: int, secondFacet: int) -> Any: ...
def polyMergeFacetCtx(*args, **kwargs) -> Any: ...
def polyMergeUV(edit: bool, query: bool, caching: bool, constructionHistory: bool, distance: float, frozen: bool, name: str, nodeState: int, uvSetName: str, worldSpace: bool) -> Any: ...
def polyMergeVertex(edit: bool, query: bool, alwaysMergeTwoVertices: bool, caching: bool, constructionHistory: bool, distance: float, frozen: bool, mergeToComponents: str, name: str, nodeState: int, texture: bool, worldSpace: bool) -> Any: ...
def polyMirrorFace(edit: bool, query: bool, axis: int, axisDirection: int, caching: bool, constructionHistory: bool, cutMesh: bool, direction: int, firstNewFace: int, flipUVs: int, frozen: bool, keepVertexIDs: bool, lastNewFace: int, mirrorAxis: int, mergeMode: int, mirrorPosition: float, mergeThreshold: float, mergeThresholdType: int, name: str, nodeState: int, mirrorPlaneCenterX: float, mirrorPlaneCenterY: float, mirrorPlaneCenterZ: float, userSpecifiedPivot: bool, pivotX: float, pivotY: float, pivotZ: float, mirrorPlaneRotateX: float, mirrorPlaneRotateY: float, mirrorPlaneRotateZ: float, smoothingAngle: float, scalePivotX: float, scalePivotY: float, scalePivotZ: float, worldSpace: bool) -> Any: ...
def polyMoveEdge(edit: bool, query: bool, caching: bool, constructionHistory: bool, frozen: bool, gain: List[float], localCenter: int, localDirectionX: float, localDirectionY: float, localDirectionZ: float, localRotateX: float, localRotateY: float, localRotateZ: float, localScaleX: float, localScaleY: float, localScaleZ: float, localTranslateX: float, localTranslateY: float, localTranslateZ: float, name: str, nodeState: int, pivotX: float, pivotY: float, pivotZ: float, random: float, rotateX: float, rotateY: float, rotateZ: float, scaleX: float, scaleY: float, scaleZ: float, translateX: float, translateY: float, translateZ: float, worldSpace: bool) -> Any: ...
def polyMoveFacet(edit: bool, query: bool, attraction: float, caching: bool, constructionHistory: bool, frozen: bool, gain: List[float], gravityX: float, gravityY: float, gravityZ: float, localCenter: int, localDirectionX: float, localDirectionY: float, localDirectionZ: float, localRotateX: float, localRotateY: float, localRotateZ: float, localScaleX: float, localScaleY: float, localScaleZ: float, localTranslateX: float, localTranslateY: float, localTranslateZ: float, magnX: float, magnY: float, magnZ: float, name: str, nodeState: int, offset: float, pivotX: float, pivotY: float, pivotZ: float, random: float, rotateX: float, rotateY: float, rotateZ: float, scaleX: float, scaleY: float, scaleZ: float, translateX: float, translateY: float, translateZ: float, weight: float, worldSpace: bool) -> Any: ...
def polyMoveFacetUV(edit: bool, query: bool, caching: bool, constructionHistory: bool, frozen: bool, axisLen: Tuple[float, float], axisLenX: float, axisLenY: float, name: str, nodeState: int, pivot: Tuple[float, float], pivotU: float, pivotV: float, rotationAngle: float, random: float, scale: Tuple[float, float], scaleU: float, scaleV: float, translate: Tuple[float, float], translateU: float, translateV: float) -> Any: ...
def polyMoveUV(edit: bool, query: bool, caching: bool, constructionHistory: bool, frozen: bool, axisLen: Tuple[float, float], axisLenX: float, axisLenY: float, name: str, nodeState: int, pivot: Tuple[float, float], pivotU: float, pivotV: float, rotationAngle: float, random: float, scale: Tuple[float, float], scaleU: float, scaleV: float, translate: Tuple[float, float], translateU: float, translateV: float) -> Any: ...
def polyMoveVertex(edit: bool, query: bool, caching: bool, constructionHistory: bool, frozen: bool, gain: List[float], localDirectionX: float, localDirectionY: float, localDirectionZ: float, localTranslateX: float, localTranslateY: float, localTranslateZ: float, name: str, nodeState: int, pivotX: float, pivotY: float, pivotZ: float, random: float, rotateX: float, rotateY: float, rotateZ: float, scaleX: float, scaleY: float, scaleZ: float, translateX: float, translateY: float, translateZ: float, worldSpace: bool) -> Any: ...
def polyMultiLayoutUV(flipReversed: bool, gridU: int, gridV: int, layout: int, layoutMethod: int, offsetU: float, offsetV: float, percentageSpace: float, prescale: int, rotateForBestFit: int, scale: int, sizeU: float, sizeV: float, uvSetName: str) -> Any: ...
def polyNormal(edit: bool, query: bool, caching: bool, constructionHistory: bool, frozen: bool, name: str, nodeState: int, normalMode: int, userNormalMode: bool) -> Any: ...
def polyNormalPerVertex(edit: bool, query: bool, allLocked: bool, deformable: bool, freezeNormal: bool, relative: bool, unFreezeNormal: bool, normalX: float, normalY: float, normalZ: float) -> Any: ...
def polyNormalizeUV(edit: bool, query: bool, caching: bool, constructionHistory: bool, createNewMap: bool, centerOnTile: bool, frozen: bool, insertBeforeDeformers: bool, name: str, normalizeDirection: int, nodeState: int, normalizeType: int, preserveAspectRatio: bool, uvSetName: str, worldSpace: bool) -> Any: ...
def polyOptUvs(edit: bool, query: bool, applyToShell: bool, areaWeight: float, caching: bool, constructionHistory: bool, frozen: bool, globalBlend: float, globalMethodBlend: float, iterations: int, name: str, nodeState: int, optimizeAxis: int, pinSelected: bool, pinUvBorder: bool, scale: float, stoppingThreshold: float, useScale: bool, uvSetName: str, worldSpace: bool) -> Any: ...
def polyOptions(*args, **kwargs) -> Any: ...
def polyOutput(allValues: bool, color: bool, colorDesc: bool, edge: bool, edgeFace: bool, face: bool, faceNorm: bool, force: bool, group: bool, normDesc: bool, noOutput: bool, outputFile: str, triangle: bool, uvValue: bool, uvDesc: bool, vert: bool, vertEdge: bool, vertNorm: bool) -> Any: ...
def polyPinUV(edit: bool, query: bool, createHistory: bool, operation: int, unpinned: bool, uvSetName: str, value: List[float]) -> Any: ...
def polyPipe(edit: bool, query: bool, caching: bool, constructionHistory: bool, componentTagCreate: bool, createUVs: bool, frozen: bool, height: float, name: str, nodeState: int, object: bool, radius: float, roundCap: bool, subdivisionsAxis: int, subdivisionsCaps: int, subdivisionsHeight: int, thickness: float, texture: bool) -> Any: ...
def polyPlanarProjection(edit: bool, query: bool, caching: bool, constructionHistory: bool, createNewMap: bool, frozen: bool, insertBeforeDeformers: bool, imageCenter: Tuple[float, float], imageCenterX: float, imageCenterY: float, imageScale: Tuple[float, float], imageScaleU: float, imageScaleV: float, keepImageRatio: bool, mapDirection: str, name: str, nodeState: int, projectionCenterX: float, projectionCenterY: float, projectionCenterZ: float, projectionHeight: float, projectionHorizontalSweep: float, perInstance: bool, projectionScale: Tuple[float, float], projectionScaleU: float, projectionScaleV: float, radius: float, rotationAngle: float, rotateX: float, rotateY: float, rotateZ: float, seamCorrect: bool, smartFit: bool, worldSpace: bool) -> Any: ...
def polyPlane(edit: bool, query: bool, caching: bool, constructionHistory: bool, componentTagCreate: bool, createUVs: int, frozen: bool, height: float, name: str, nodeState: int, object: bool, subdivisionsHeight: int, subdivisionsWidth: int, subdivisionsX: int, subdivisionsY: int, texture: int, width: float) -> Any: ...
def polyPlatonicSolid(edit: bool, query: bool, caching: bool, constructionHistory: bool, componentTagCreate: bool, createUVs: int, frozen: bool, sideLength: float, name: str, nodeState: int, object: bool, radius: float, solidType: int, texture: int) -> Any: ...
def polyPoke(edit: bool, query: bool, caching: bool, constructionHistory: bool, frozen: bool, localTranslateX: float, localTranslateY: float, localTranslateZ: float, name: str, nodeState: int, translateX: float, translateY: float, translateZ: float, worldSpace: bool) -> Any: ...
def polyPrimitive(edit: bool, query: bool, caching: bool, constructionHistory: bool, componentTagCreate: bool, createUVs: int, frozen: bool, sideLength: float, name: str, nodeState: int, object: bool, polyType: int, radius: float, texture: int) -> Any: ...
def polyPrimitiveMisc(*args, **kwargs) -> Any: ...
def polyPrism(edit: bool, query: bool, caching: bool, constructionHistory: bool, componentTagCreate: bool, createUVs: int, frozen: bool, length: float, name: str, nodeState: int, numberOfSides: int, numderOfSides: int, object: bool, subdivisionsCaps: int, subdivisionsHeight: int, texture: int, sideLength: float) -> Any: ...
def polyProjectCurve(edit: bool, query: bool, automatic: bool, addUnderTransform: bool, baryCoord1: float, baryCoord2: float, baryCoord3: float, caching: bool, constructionHistory: bool, curveSamples: int, directionX: float, directionY: float, directionZ: float, face: int, frozen: bool, name: str, nodeState: int, object: bool, pointsOnEdges: bool, triangle: int, tolerance: float) -> Any: ...
def polyProjection(constructionHistory: bool, createNewMap: bool, insertBeforeDeformers: bool, imageCenterX: float, imageCenterY: float, imageScaleU: float, imageScaleV: float, keepImageRatio: bool, mapDirection: str, projectionCenterX: float, projectionCenterY: float, projectionCenterZ: float, projectionScaleU: float, projectionScaleV: float, rotationAngle: float, rotateX: float, rotateY: float, rotateZ: float, seamCorrect: bool, smartFit: bool, type: str, uvSetName: str) -> Any: ...
def polyPyramid(edit: bool, query: bool, caching: bool, constructionHistory: bool, componentTagCreate: bool, createUVs: int, frozen: bool, name: str, nodeState: int, numberOfSides: int, numderOfSides: int, object: bool, subdivisionsCaps: int, subdivisionsHeight: int, texture: bool, sideLength: float) -> Any: ...
def polyQuad(edit: bool, query: bool, angle: float, caching: bool, constructionHistory: bool, frozen: bool, keepGroupBorder: bool, keepHardEdges: bool, keepTextureBorders: bool, name: str, nodeState: int, worldSpace: bool) -> Any: ...
def polyQueryBlindData(associationType: str, booleanData: bool, binaryData: str, doubleData: float, typeId: int, intData: int, longDataName: List[str], maxValue: float, minValue: float, showComp: bool, stringData: str, shortDataName: List[str], subString: str) -> Any: ...
def polyReduce(edit: bool, query: bool, border: float, caching: bool, keepCreaseEdgeWeight: float, constructionHistory: bool, compactness: float, cachingReduce: bool, colorWeights: float, detail: float, frozen: bool, geomWeights: float, invertVertexWeights: bool, keepBorder: bool, keepBorderWeight: float, keepColorBorder: bool, keepCreaseEdge: bool, keepColorBorderWeight: float, keepOriginalVertices: bool, keepFaceGroupBorder: bool, keepFaceGroupBorderWeight: float, keepHardEdge: bool, keepHardEdgeWeight: float, keepMapBorder: bool, keepMapBorderWeight: float, keepQuadsWeight: float, line: float, name: str, nodeState: int, percentage: float, preserveLocation: bool, replaceOriginal: bool, sharpness: float, symmetryTolerance: float, symmetryPlaneW: float, symmetryPlaneX: float, symmetryPlaneY: float, symmetryPlaneZ: float, triangulate: bool, triangleCount: int, preserveTopology: bool, termination: int, useVirtualSymmetry: int, uvWeights: float, vertexCount: int, version: int, vertexMapName: str, vertexWeightCoefficient: float, weightCoefficient: float) -> Any: ...
def polyRemesh(edit: bool, query: bool, caching: bool, constructionHistory: bool, collapseThreshold: float, frozen: bool, interpolationType: int, maxEdgeLength: float, maxTriangleCount: int, name: str, nodeState: int, smoothStrength: float, tessellateBorders: bool, useRelativeValues: bool, worldSpace: bool) -> Any: ...
def polyRetopo(edit: bool, query: bool, anisotropy: float, caching: bool, constructionHistory: bool, curveInfluenceDirection: float, curveSingularitySeparation: float, faceUniformity: float, frozen: bool, name: str, nodeState: int, preserveHardEdges: bool, replaceOriginal: bool, targetEdgeDeviation: float, targetFaceCount: int, targetFaceCountTolerance: int, topologyRegularity: float) -> Any: ...
def polyRetopoCtx(*args, **kwargs) -> Any: ...
def polySelect(query: bool, addFirst: bool, asSelectString: bool, deselect: bool, everyN: int, noSelection: bool, replace: bool, toggle: bool) -> Any: ...
def polySelectConstraint(query: bool, angle: int, anglebound: Tuple[float, float], anglePropagation: bool, angleTolerance: float, border: bool, borderPropagation: bool, convexity: int, crease: bool, dist: int, distbound: Tuple[float, float], disable: bool, edgeDistance: int, geometricarea: int, geometricareabound: Tuple[float, float], holes: int, length: int, lengthbound: Tuple[float, float], loopPropagation: bool, mode: int, max2dAngle: float, max3dAngle: float, nonmanifold: int, orient: int, orientbound: Tuple[float, float], oppositeEdges: bool, order: int, orderbound: Tuple[int, int], planarity: int, propagate: int, random: int, ringPropagation: bool, randomratio: float, returnSelection: int, shell: bool, smoothness: int, stateString: bool, size: int, type: int, texturedarea: int, texturedareabound: Tuple[float, float], topology: int, textureshared: int, textured: int, uvBorderSelection: bool, uvFaceOrientation: int, uvEdgeLoopPropagation: bool, uvEdgeRingPropagation: bool, uvShell: bool, uvConstraint: bool, visibility: int, visibilityangle: float, where: int, wholeSensitive: bool) -> Any: ...
def polySelectConstraintMonitor(*args, **kwargs) -> Any: ...
def polySelectCtx(*args, **kwargs) -> Any: ...
def polySelectEditCtx(*args, **kwargs) -> Any: ...
def polySelectEditCtxDataCmd(*args, **kwargs) -> Any: ...
def polySelectSp(query: bool, loop: bool, ring: bool) -> Any: ...
def polySeparate(edit: bool, query: bool, caching: bool, constructionHistory: bool, endFace: int, frozen: bool, inPlace: bool, name: str, nodeState: int, object: bool, removeShells: bool, startFace: int, separateSpecificShell: List[int], userSpecifiedShells: bool) -> Any: ...
def polySetToFaceNormal(setUserNormal: bool) -> Any: ...
def polySetVertices() -> Any: ...
def polySewEdge(edit: bool, query: bool, caching: bool, constructionHistory: bool, frozen: bool, name: str, nodeState: int, tolerance: float, texture: bool, worldSpace: bool) -> Any: ...
def polyShortestPathCtx(*args, **kwargs) -> Any: ...
def polySlideEdge(absolute: bool, direction: int, edgeDirection: float, symmetry: bool) -> Any: ...
def polySlideEdgeCtx(*args, **kwargs) -> Any: ...
def polySmooth(edit: bool, query: bool, boundaryRule: int, continuity: float, caching: bool, constructionHistory: bool, degree: int, divisionsPerEdge: int, divisions: int, frozen: bool, keepBorder: bool, keepHardEdge: bool, keepMapBorders: int, keepSelectionBorder: bool, keepTessellation: bool, method: int, name: str, nodeState: int, osdCreaseMethod: int, osdFvarBoundary: int, osdFvarPropagateCorners: bool, osdSmoothTriangles: bool, osdVertBoundary: int, propagateEdgeHardness: bool, pushStrength: float, roundness: float, subdivisionType: int, subdivisionLevels: int, smoothUVs: bool, keepTesselation: bool) -> Any: ...
def polySoftEdge(edit: bool, query: bool, angle: float, caching: bool, constructionHistory: bool, frozen: bool, name: str, nodeState: int, worldSpace: bool) -> Any: ...
def polySphere(edit: bool, query: bool, caching: bool, constructionHistory: bool, componentTagCreate: bool, createUVs: int, frozen: bool, name: str, nodeState: int, object: bool, radius: float, subdivisionsAxis: int, subdivisionsHeight: int, subdivisionsX: int, subdivisionsY: int, texture: int) -> Any: ...
def polySphericalProjection(edit: bool, query: bool, caching: bool, constructionHistory: bool, createNewMap: bool, frozen: bool, insertBeforeDeformers: bool, imageCenter: Tuple[float, float], imageCenterX: float, imageCenterY: float, imageScale: Tuple[float, float], imageScaleU: float, imageScaleV: float, keepImageRatio: bool, mapDirection: str, name: str, nodeState: int, projectionCenterX: float, projectionCenterY: float, projectionCenterZ: float, projectionHeight: float, projectionHorizontalSweep: float, perInstance: bool, projectionScale: Tuple[float, float], projectionScaleU: float, projectionScaleV: float, radius: float, rotationAngle: float, rotateX: float, rotateY: float, rotateZ: float, seamCorrect: bool, smartFit: bool, worldSpace: bool) -> Any: ...
def polySpinEdge(edit: bool, query: bool, caching: bool, constructionHistory: bool, frozen: bool, name: str, nodeState: int, offset: int, reverse: bool) -> Any: ...
def polySplit(edit: bool, query: bool, adjustEdgeFlow: float, constructionHistory: bool, detachEdges: bool, edgepoint: List[Tuple[int, float]], insertWithEdgeFlow: bool, name: str, projectedCurve: List[str], projectedCurveTolerance: float, subdivision: int, smoothingangle: float) -> Any: ...
def polySplitCtx(*args, **kwargs) -> Any: ...
def polySplitCtx2(*args, **kwargs) -> Any: ...
def polySplitEdge(edit: bool, query: bool, caching: bool, constructionHistory: bool, frozen: bool, name: str, nodeState: int, operation: int) -> Any: ...
def polySplitRing(edit: bool, query: bool, adjustEdgeFlow: float, caching: bool, constructionHistory: bool, divisions: int, direction: bool, enableProfileCurve: bool, useFaceNormalsAtEnds: bool, fixQuads: bool, frozen: bool, insertWithEdgeFlow: bool, name: str, nodeState: int, profileCurve_FloatValue: float, profileCurve_Interp: int, profileCurveInputOffset: float, profileCurveInputScale: float, profileCurve_Position: float, rootEdge: int, smoothingAngle: float, splitType: int, useEqualMultiplier: bool, worldSpace: bool, weight: float) -> Any: ...
def polySplitVertex(edit: bool, query: bool, caching: bool, constructionHistory: bool, frozen: bool, name: str, nodeState: int, worldSpace: bool) -> Any: ...
def polyStraightenUVBorder(edit: bool, query: bool, blendOriginal: float, curvature: float, caching: bool, constructionHistory: bool, frozen: bool, gapTolerance: int, name: str, nodeState: int, preserveLength: float, uvSetName: str, worldSpace: bool) -> Any: ...
def polySubdivideEdge(edit: bool, query: bool, caching: bool, constructionHistory: bool, divisions: int, frozen: bool, name: str, nodeState: int, size: float, worldSpace: bool) -> Any: ...
def polySubdivideFacet(edit: bool, query: bool, caching: bool, constructionHistory: bool, divisionsU: int, divisions: int, divisionsV: int, frozen: bool, mode: int, name: str, nodeState: int, subdMethod: int) -> Any: ...
def polySuperCtx(*args, **kwargs) -> Any: ...
def polyTestPop(*args, **kwargs) -> Any: ...
def polyToCurve(edit: bool, query: bool, addUnderTransform: bool, caching: bool, constructionHistory: bool, degree: int, displaySmoothMesh: int, form: int, frozen: bool, name: str, nodeState: int, object: bool, conformToSmoothMeshPreview: bool) -> Any: ...
def polyToSubdiv(edit: bool, query: bool, applyMatrixToResult: bool, absolutePosition: bool, addUnderTransform: bool, caching: bool, constructionHistory: bool, frozen: bool, maxEdgesPerVert: int, maxPolyCount: int, name: str, nodeState: int, object: bool, preserveVertexOrdering: bool, quickConvert: bool, uvPoints: List[Tuple[float, float]], uvTreatment: int, uvPointsU: float, uvPointsV: float) -> Any: ...
def polyTorus(edit: bool, query: bool, caching: bool, constructionHistory: bool, componentTagCreate: bool, createUVs: bool, frozen: bool, name: str, nodeState: int, object: bool, radius: float, subdivisionsAxis: int, subdivisionsHeight: int, sectionRadius: float, subdivisionsX: int, subdivisionsY: int, twist: float, texture: bool) -> Any: ...
def polyTransfer(edit: bool, query: bool, alternateObject: str, caching: bool, constructionHistory: bool, frozen: bool, name: str, nodeState: int, uvSets: bool, vertices: bool, vertexColor: bool) -> Any: ...
def polyTriangulate(edit: bool, query: bool, caching: bool, constructionHistory: bool, frozen: bool, name: str, nodeState: int) -> Any: ...
def polyUVCoverage() -> Any: ...
def polyUVOverlap(nonOverlappingComponents: bool, overlappingComponents: bool) -> Any: ...
def polyUVRectangle(edit: bool, query: bool, caching: bool, constructionHistory: bool, frozen: bool, name: str, nodeState: int) -> Any: ...
def polyUVSet(edit: bool, query: bool, allUVSets: bool, allUVSetsWithCount: bool, copy: bool, currentPerInstanceUVSet: bool, create: bool, currentUVSet: bool, delete: bool, genNewUVSet: bool, currentLastUVSet: bool, newUVSet: str, projections: bool, rename: bool, reorder: bool, shareInstances: bool, unshared: bool, allUVSetsIndices: bool) -> Any: ...
def polyUVStackSimilarShells(onlyMatch: bool, tolerance: float) -> Any: ...
def polyUVStackSimilarShellsCmd(*args, **kwargs) -> Any: ...
def polyUnite(edit: bool, query: bool, caching: bool, constructionHistory: bool, centerPivot: bool, frozen: bool, mergeUVSets: int, name: str, nodeState: int, object: bool, objectPivot: bool) -> Any: ...
def polyUniteSkinned(edit: bool, query: bool, constructionHistory: bool, centerPivot: bool, mergeUVSets: int, objectPivot: bool) -> Any: ...
def polyVertexNormalCtx(*args, **kwargs) -> Any: ...
def polyWarpImage(bilinear: bool, fileFormat: str, inputName: str, inputUvSetName: str, noAlpha: bool, overwrite: bool, outputName: str, outputUvSetName: str, tiled: bool, xResolution: int, yResolution: int) -> Any: ...
def polyWedgeFace(edit: bool, query: bool, axisX: float, axisY: float, axisZ: float, caching: bool, constructionHistory: bool, centerX: float, centerY: float, centerZ: float, divisions: int, edge: List[int], frozen: bool, name: str, nodeState: int, wedgeAngle: float, worldSpace: bool) -> Any: ...
def popListItem() -> Any: ...
def popupMenu(edit: bool, query: bool, altModifier: bool, allowOptionBoxes: bool, button: int, ctrlModifier: bool, deleteAllItems: bool, defineTemplate: str, exists: bool, itemArray: bool, markingMenu: bool, numberOfItems: bool, parent: str, postMenuCommand: Callable, postMenuCommandOnce: bool, shiftModifier: bool, useTemplate: str) -> Any: ...
def pose(edit: bool, query: bool, apply: bool, allPoses: bool, name: str) -> Any: ...
def poseEditor(*args, **kwargs) -> Any: ...
def posePanel(*args, **kwargs) -> Any: ...
def preferredRenderer(query: bool, fallback: str, makeCurrent: bool) -> Any: ...
def preloadRefEd(*args, **kwargs) -> Any: ...
def prepareRender(edit: bool, query: bool, deregister: str, defaultTraversalSet: str, invokePostRenderFrame: bool, invokePostRenderLayer: bool, invokePostRender: bool, invokePreRenderFrame: bool, invokePreRenderLayer: bool, invokePreRender: bool, invokeSettingsUI: bool, label: str, listTraversalSets: bool, postRenderFrame: Callable, postRenderLayer: Callable, postRender: Callable, preRenderFrame: Callable, preRenderLayer: Callable, preRender: Callable, restore: bool, saveAssemblyConfig: bool, setup: bool, settingsUI: Callable, traversalSetInit: Callable) -> Any: ...
def prependListItem() -> Any: ...
def profiler(query: bool, addCategory: str, allCategories: bool, bufferSize: int, clearAllMelInstrumentation: bool, colorIndex: int, categoryRecording: bool, eventCount: bool, eventCategory: bool, eventCPUId: bool, eventColor: bool, eventDescription: bool, eventDuration: bool, eventName: bool, eventStartTime: bool, eventThreadId: bool, instrumentMel: bool, load: str, output: str, procedureDescription: str, procedureName: str, reset: bool, removeCategory: str, sampling: bool, signalEvent: bool, signalMelEvent: bool) -> Any: ...
def profilerTool(*args, **kwargs) -> Any: ...
def progressBar(edit: bool, query: bool, annotation: str, beginProgress: bool, dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enableKeyboardFocus: bool, enable: bool, endProgress: bool, exists: bool, fullPathName: bool, height: int, isCancelled: bool, isInterruptable: bool, isMainProgressBar: bool, isObscured: bool, manage: bool, maxValue: int, minValue: int, noBackground: bool, numberOfPopupMenus: bool, parent: str, popupMenuArray: bool, preventOverride: bool, progress: int, step: int, statusBarMessage: str, status: str, useTemplate: str, visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def progressWindow(edit: bool, query: bool, endProgress: bool, isCancelled: bool, isInterruptable: bool, maxValue: int, minValue: int, progress: int, step: int, status: str, title: str) -> Any: ...
def projectCurve(edit: bool, query: bool, caching: bool, constructionHistory: bool, directionX: float, directionY: float, directionZ: float, frozen: bool, name: str, nodeState: int, object: bool, range: bool, tolerance: float, useNormal: bool) -> Any: ...
def projectTangent(edit: bool, query: bool, curvature: bool, caching: bool, constructionHistory: bool, curvatureScale: float, frozen: bool, ignoreEdges: bool, name: str, nodeState: int, object: bool, rotate: float, replaceOriginal: bool, reverseTangent: bool, tangentDirection: int, tangentScale: float) -> Any: ...
def projectionContext(*args, **kwargs) -> Any: ...
def projectionManip(query: bool, fitBBox: bool, projType: int, switchType: bool) -> Any: ...
def promptDialog(query: bool, button: List[str], cancelButton: str, defaultButton: str, dismissString: str, message: str, messageAlign: str, parent: str, scrollableField: bool, style: str, title: str, text: str) -> Any: ...
def propModCtx(edit: bool, query: bool, animCurve: str, animCurveFalloff: Tuple[float, float], animCurveParam: str, exists: bool, image1: str, image2: str, image3: str, linear: float, linearParam: Tuple[float, float], nurbsCurve: str, powerCutoff: float, powerCutoffParam: Tuple[float, float], powerDegree: float, powerDegreeParam: float, script: str, scriptParam: str, type: int, worldspace: bool) -> Any: ...
def propMove(percent: List[float], percentX: List[float], percentY: List[float], percentZ: List[float], worldSpace: bool) -> Any: ...
def psdChannelOutliner(*args, **kwargs) -> Any: ...
def psdConvSolidTxOptions(*args, **kwargs) -> Any: ...
def psdEditTextureFile(*args, **kwargs) -> Any: ...
def psdExport(*args, **kwargs) -> Any: ...
def psdTextureFile(*args, **kwargs) -> Any: ...
def python() -> Any: ...
def querySubdiv(*args, **kwargs) -> Any: ...
def quit(abort: bool, exitCode: int, force: bool) -> Any: ...
def radial(edit: bool, query: bool, attenuation: float, magnitude: float, maxDistance: float, name: str, perVertex: bool, torusSectionRadius: float, type: float, volumeExclusion: bool, volumeShape: str, volumeSweep: float) -> Any: ...
def radioButton(edit: bool, query: bool, align: str, annotation: str, changeCommand: Callable, collection: str, data: int, dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, editable: bool, enableKeyboardFocus: bool, enable: bool, exists: bool, fullPathName: bool, height: int, isObscured: bool, label: str, manage: bool, noBackground: bool, numberOfPopupMenus: bool, offCommand: Callable, onCommand: Callable, parent: str, popupMenuArray: bool, preventOverride: bool, recomputeSize: bool, statusBarMessage: str, select: bool, useTemplate: str, visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def radioButtonGrp(edit: bool, query: bool, adjustableColumn2: int, adjustableColumn3: int, adjustableColumn4: int, adjustableColumn5: int, adjustableColumn6: int, adjustableColumn: int, annotation1: str, annotation2: str, annotation3: str, annotation4: str, annotation: str, columnAlign: List[Tuple[int, str]], changeCommand: Callable, changeCommand1: Callable, changeCommand2: Callable, changeCommand3: Callable, changeCommand4: Callable, columnAlign2: Tuple[str, str], columnOffset2: Tuple[int, int], columnAttach2: Tuple[str, str], columnWidth: List[Tuple[int, int]], columnWidth1: int, columnWidth2: Tuple[int, int], data1: int, data2: int, data3: int, data4: int, dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, editable: bool, enableKeyboardFocus: bool, enable: bool, enable1: bool, enable2: bool, enable3: bool, enable4: bool, exists: bool, fullPathName: bool, height: int, isObscured: bool, label: str, label1: str, label2: str, label3: str, label4: str, labelAnnotation: str, labelArray2: Tuple[str, str], manage: bool, noBackground: bool, numberOfPopupMenus: bool, numberOfRadioButtons: int, offCommand1: Callable, offCommand2: Callable, offCommand3: Callable, offCommand4: Callable, offCommand: Callable, onCommand1: Callable, onCommand2: Callable, onCommand3: Callable, onCommand4: Callable, onCommand: Callable, parent: str, popupMenuArray: bool, preventOverride: bool, statusBarMessage: str, shareCollection: str, select: int, useTemplate: str, visibleChangeCommand: Callable, visible: bool, vertical: bool, width: int) -> Any: ...
def radioCollection(edit: bool, query: bool, collectionItemArray: bool, defineTemplate: str, exists: bool, gl: bool, numberOfCollectionItems: bool, parent: str, select: str, useTemplate: str) -> Any: ...
def radioMenuItemCollection(edit: bool, query: bool, defineTemplate: str, exists: bool, gl: bool, parent: str, useTemplate: str) -> Any: ...
def rampColorPort(*args, **kwargs) -> Any: ...
def rampWidget(*args, **kwargs) -> Any: ...
def rampWidgetAttrless(*args, **kwargs) -> Any: ...
def rangeControl(edit: bool, query: bool, annotation: str, changedCommand: Callable, dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enableKeyboardFocus: bool, enable: bool, exists: bool, fullPathName: bool, height: int, isObscured: bool, manage: bool, maxRange: int, minRange: int, noBackground: bool, numberOfPopupMenus: bool, parent: str, popupMenuArray: bool, preventOverride: bool, statusBarMessage: str, useTemplate: str, visibleChangeCommand: Callable, visible: bool, width: int, widthHeight: Tuple[int, int]) -> Any: ...
def readPDC(file: str, test: bool) -> Any: ...
def readTake(*args, **kwargs) -> Any: ...
def rebuildCurve(edit: bool, query: bool, caching: bool, constructionHistory: bool, degree: int, endKnots: int, fitRebuild: bool, frozen: bool, keepControlPoints: bool, keepEndPoints: bool, keepRange: int, keepTangents: bool, name: str, noChanges: bool, nodeState: int, object: bool, range: bool, replaceOriginal: bool, rebuildType: int, spans: int, smartSurfaceCurveRebuild: bool, smooth: float, tolerance: float) -> Any: ...
def rebuildSurface(edit: bool, query: bool, caching: bool, constructionHistory: bool, direction: int, degreeU: int, degreeV: int, endKnots: int, fitRebuild: int, frozen: bool, keepCorners: bool, keepControlPoints: bool, keepRange: int, name: str, noChanges: bool, nodeState: int, object: bool, polygon: int, replaceOriginal: bool, rebuildType: int, spansU: int, spansV: int, tolerance: float) -> Any: ...
def recordAttr(edit: bool, query: bool, attribute: List[str], delete: bool) -> Any: ...
def recordDevice(*args, **kwargs) -> Any: ...
def redo() -> Any: ...
def reference(query: bool, connectionsBroken: bool, connectionsMade: bool, dagPath: bool, editCommand: str, filename: str, isNodeReferenced: bool, longName: bool, node: str, shortName: bool) -> Any: ...
def referenceEdit(applyFailedEdits: bool, changeEditTarget: Tuple[str, str], editCommand: List[str], failedEdits: bool, onReferenceNode: List[str], removeEdits: bool, successfulEdits: bool) -> Any: ...
def referenceQuery(child: bool, dagPath: bool, editAttrs: bool, editCommand: List[str], editNodes: bool, editStrings: bool, filename: bool, failedEdits: bool, isExportEdits: bool, isLoaded: bool, isNodeReferenced: bool, isPreviewOnly: bool, liveEdits: bool, nodes: bool, namespace: bool, onReferenceNode: List[str], parent: bool, parentNamespace: bool, referenceNode: bool, successfulEdits: bool, showDagPath: bool, shortName: bool, showNamespace: bool, topReference: bool, unresolvedName: bool, withoutCopyNumber: bool) -> Any: ...
def refineSubdivSelectionList(*args, **kwargs) -> Any: ...
def refresh(currentView: bool, force: bool, fileExtension: str, filename: str, suspend: bool) -> Any: ...
def refreshEditorTemplates() -> Any: ...
def regionSelectKeyCtx(edit: bool, query: bool, bottomManip: float, history: bool, exists: bool, image1: str, image2: str, image3: str, leftManip: float, name: str, rightManip: float, topManip: float) -> Any: ...
def rehash() -> Any: ...
def relationship(edit: bool, query: bool, b: bool, relationshipData: List[str]) -> Any: ...
def reloadImage() -> Any: ...
def removeJoint() -> Any: ...
def removeListItem() -> Any: ...
def removeMultiInstance(allChildren: bool, b: bool) -> Any: ...
def rename(ignoreShape: bool, uuid: bool) -> Any: ...
def renameAttr() -> Any: ...
def renameUI() -> Any: ...
def render(abortMissingTexture: bool, batch: bool, keepPreImage: bool, layer: str, nglowpass: bool, nshadows: bool, replace: bool, xresolution: int, yresolution: int) -> Any: ...
def renderGlobalsNode(name: str, parent: str, renderQuality: str, renderResolution: str, shared: bool, skipSelect: bool) -> Any: ...
def renderInfo(edit: bool, query: bool, chordHeight: float, chordHeightRatio: float, castShadows: bool, doubleSided: bool, edgeSwap: bool, minScreen: float, name: str, opposite: bool, smoothShading: bool, useChordHeight: bool, useChordHeightRatio: bool, useDefaultLights: bool, useMinScreen: bool, unum: int, utype: int, vnum: int, vtype: int) -> Any: ...
def renderLayerMembers() -> Any: ...
def renderLayerPostProcess(query: bool, keepImages: bool, sceneName: str) -> Any: ...
def renderManip(edit: bool, query: bool, state: bool) -> Any: ...
def renderPartition(query: bool) -> Any: ...
def renderPassRegistry(channels: int, isPassSupported: bool, passID: str, passName: bool, supportedPassSemantics: bool, renderer: str, supportedChannelCounts: bool, supportedDataTypes: bool, supportedRenderPassNames: bool, supportedRenderPasses: bool) -> Any: ...
def renderQualityNode(name: str, parent: str, shared: bool, skipSelect: bool) -> Any: ...
def renderSettings(*args, **kwargs) -> Any: ...
def renderSetup(query: bool, renderLayers: bool) -> Any: ...
def renderSetupFind() -> Any: ...
def renderSetupLegacyLayer() -> Any: ...
def renderSetupLocalOverride(query: bool, state: bool) -> Any: ...
def renderSetupPostApply() -> Any: ...
def renderSetupSwitchVisibleRenderLayer() -> Any: ...
def renderThumbnailUpdate(*args, **kwargs) -> Any: ...
def renderWindowEditor(*args, **kwargs) -> Any: ...
def renderWindowSelectContext(*args, **kwargs) -> Any: ...
def renderer(edit: bool, query: bool, addGlobalsNode: str, namesOfAvailableRenderers: bool, batchRenderProcedure: str, showBatchRenderLogProcedure: str, batchRenderOptionsProcedure: str, batchRenderOptionsStringProcedure: str, cancelBatchRenderProcedure: str, changeIprRegionProcedure: str, commandRenderProcedure: str, exists: bool, globalsNodes: bool, globalsTabCreateProcNames: bool, globalsTabLabels: bool, globalsTabUpdateProcNames: bool, iprOptionsProcedure: str, iprOptionsMenuLabel: str, iprRenderProcedure: str, iprOptionsSubMenuProcedure: str, iprRenderSubMenuProcedure: str, isRunningIprProcedure: str, logoCallbackProcedure: str, logoImageName: str, materialViewRendererList: bool, materialViewRendererPause: bool, materialViewRendererSuspend: bool, polyPrelightProcedure: str, pauseIprRenderProcedure: str, renderProcedure: str, renderDiagnosticsProcedure: str, renderingEditorsSubMenuProcedure: str, refreshIprRenderProcedure: str, renderGlobalsProcedure: str, renderMenuProcedure: str, renderOptionsProcedure: str, renderRegionProcedure: str, renderSequenceProcedure: str, showBatchRenderProcedure: str, supportColorManagement: bool, stopIprRenderProcedure: str, showRenderLogProcedure: str, startIprRenderProcedure: str, textureBakingProcedure: str, rendererUIName: str, unregisterRenderer: bool) -> Any: ...
def reorder(back: bool, front: bool, relative: int) -> Any: ...
def reorderContainer(edit: bool, query: bool, back: bool, front: bool, relative: int) -> Any: ...
def reorderDeformers(name: str) -> Any: ...
def repeatLast(edit: bool, query: bool, addCommand: str, addCommandLabel: str, commandList: int, commandNameList: int, historyLimit: int, item: int, numberOfHistoryItems: bool) -> Any: ...
def replaceCacheFrames() -> Any: ...
def replaceCacheFramesOpt() -> Any: ...
def requires(dataType: List[str], nodeType: List[str]) -> Any: ...
def reroot() -> Any: ...
def resampleFluid(edit: bool, query: bool, resampleDepth: int, resampleHeight: int, resampleWidth: int) -> Any: ...
def resetTool() -> Any: ...
def resolutionNode(name: str, parent: str, shared: bool, skipSelect: bool) -> Any: ...
def resourceManager(nameFilter: str, saveAs: Tuple[str, str]) -> Any: ...
def retimeHelper(edit: bool, query: bool, deleteFrame: int, frame: float, lockBar: Tuple[int, int], locks: int, moveFrame: Tuple[int, float], mouseOver: bool) -> Any: ...
def retimeKeyCtx(edit: bool, query: bool, history: bool, exists: bool, image1: str, image2: str, image3: str, moveByFrame: int, name: str, snapOnFrame: bool) -> Any: ...
def reverseCurve(edit: bool, query: bool, caching: bool, constructionHistory: bool, curveOnSurface: bool, frozen: bool, name: str, noChanges: bool, nodeState: int, object: bool, range: bool, replaceOriginal: bool) -> Any: ...
def reverseSurface(edit: bool, query: bool, caching: bool, constructionHistory: bool, direction: int, frozen: bool, name: str, noChanges: bool, nodeState: int, object: bool, replaceOriginal: bool) -> Any: ...
def revolve(edit: bool, query: bool, autoCorrectNormal: bool, axisChoice: int, axisX: float, axisY: float, axisZ: float, bridge: bool, caching: bool, constructionHistory: bool, computePivotAndAxis: int, degree: int, endSweep: float, frozen: bool, mergeItems: bool, name: str, nodeState: int, object: bool, polygon: int, pivotX: float, pivotY: float, pivotZ: float, radius: float, radiusAnchor: float, rebuild: bool, range: bool, sections: int, startSweep: float, tolerance: float, useLocalPivot: bool, useTolerance: bool) -> Any: ...
def rigidBody(edit: bool, query: bool, active: bool, applyForceAt: str, angularVelocity: bool, bounciness: float, cache: bool, contactCount: bool, collisions: bool, contactName: bool, contactPosition: bool, deleteCache: bool, dynamicFriction: float, damping: float, force: bool, ignore: bool, layer: int, lockCenterOfMass: bool, mass: float, name: str, passive: bool, particleCollision: bool, removeShape: str, staticFriction: float, standInObject: str, solver: str, tesselationFactor: int, velocity: bool) -> Any: ...
def rigidSolver(edit: bool, query: bool, autoTolerances: bool, bounciness: bool, collide: bool, cacheData: bool, create: bool, collisionTolerance: float, contactData: bool, current: bool, dynamics: bool, displayConstraint: bool, displayCenterOfMass: bool, deleteCache: bool, displayVelocity: bool, friction: bool, interpenetrate: bool, interpenetrationCheck: bool, name: str, rigidBodies: bool, rigidBodyCount: bool, stepSize: float, showCollision: bool, showInterpenetration: bool, solverMethod: int, state: bool, statistics: bool, startTime: float, velocityVectorScale: float) -> Any: ...
def roll(absolute: bool, degree: float, relative: bool) -> Any: ...
def rollCtx(edit: bool, query: bool, alternateContext: bool, history: bool, exists: bool, image1: str, image2: str, image3: str, name: str, rollScale: float, toolName: str) -> Any: ...
def rotate(absolute: bool, centerPivot: bool, componentSpace: bool, deletePriorHistory: bool, euler: bool, forceOrderXYZ: bool, objectCenterPivot: bool, objectSpace: bool, preserveChildPosition: bool, preserveGeometryPosition: bool, preserveUV: bool, relative: bool, reflectionAboutBBox: bool, reflectionAboutOrigin: bool, reflectionAboutX: bool, reflectionAboutY: bool, reflectionAboutZ: bool, reflection: bool, reflectionTolerance: float, symNegative: bool, translate: bool, worldSpace: bool, rotateX: bool, xformConstraint: str, constrainAlongNormal: bool, rotateXY: bool, rotateXYZ: bool, rotateXZ: bool, rotateY: bool, rotateYZ: bool, rotateZ: bool) -> Any: ...
def rotationInterpolation(query: bool, convert: str) -> Any: ...
def roundCRCtx(*args, **kwargs) -> Any: ...
def roundConstantRadius(edit: bool, query: bool, append: bool, caching: bool, constructionHistory: bool, frozen: bool, name: str, nodeState: int, object: bool, radius: List[float], radiuss: List[float], side: List[Tuple[str, int]], sidea: List[int], sideb: List[int], tolerance: float) -> Any: ...
def rowColumnLayout(edit: bool, query: bool, adjustableColumn: int, annotation: str, childArray: bool, columnAlign: List[Tuple[int, str]], columnSpacing: List[Tuple[int, int]], columnWidth: List[Tuple[int, int]], dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enableKeyboardFocus: bool, enable: bool, exists: bool, fullPathName: bool, height: int, isObscured: bool, manage: bool, noBackground: bool, numberOfColumns: int, numberOfChildren: bool, numberOfPopupMenus: bool, numberOfRows: int, parent: str, popupMenuArray: bool, preventOverride: bool, rowAlign: List[Tuple[int, str]], rowHeight: List[Tuple[int, int]], rowSpacing: List[Tuple[int, int]], statusBarMessage: str, useTemplate: str, visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def rowLayout(edit: bool, query: bool, adjustableColumn1: int, adjustableColumn2: int, adjustableColumn3: int, adjustableColumn4: int, adjustableColumn5: int, adjustableColumn6: int, adjustableColumn: int, annotation: str, childArray: bool, columnAlign: List[Tuple[int, str]], columnAlign1: str, columnAlign2: Tuple[str, str], columnOffset1: int, columnOffset2: Tuple[int, int], columnAttach1: str, columnAttach2: Tuple[str, str], columnWidth: List[Tuple[int, int]], columnWidth1: int, columnWidth2: Tuple[int, int], dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enableKeyboardFocus: bool, enable: bool, exists: bool, fullPathName: bool, height: int, isObscured: bool, manage: bool, noBackground: bool, numberOfColumns: int, numberOfChildren: bool, numberOfPopupMenus: bool, parent: str, popupMenuArray: bool, preventOverride: bool, statusBarMessage: str, useTemplate: str, visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def runTimeCommand(edit: bool, query: bool, annotation: str, command: Callable, commandArray: bool, categoryArray: bool, category: str, commandLanguage: str, default: bool, defaultCommandArray: bool, delete: bool, exists: bool, hotkeyCtx: str, image: str, keywords: str, label: str, longAnnotation: str, numberOfCommands: bool, numberOfDefaultCommands: bool, numberOfUserCommands: bool, plugin: str, save: bool, showInHotkeyEditor: bool, tags: str, userCommandArray: bool) -> Any: ...
def runup(cache: bool, fromPreviousFrame: bool, fromStartFrame: bool, maxFrame: int, state: bool) -> Any: ...
def safemodecheckhash() -> Any: ...
def sampleImage(*args, **kwargs) -> Any: ...
def saveAllShelves() -> Any: ...
def saveFluid(edit: bool, query: bool, currentTime: int, endTime: int, startTime: int) -> Any: ...
def saveImage(*args, **kwargs) -> Any: ...
def saveInitialState(saveall: bool, attribute: List[str]) -> Any: ...
def saveMenu() -> Any: ...
def savePrefObjects() -> Any: ...
def saveShelf() -> Any: ...
def saveToolSettings() -> Any: ...
def saveViewportSettings() -> Any: ...
def scale(absolute: bool, centerPivot: bool, componentSpace: bool, deletePriorHistory: bool, distanceOnly: bool, localSpace: bool, objectCenterPivot: bool, objectSpace: bool, preserveChildPosition: bool, preserveGeometryPosition: bool, preserveUV: bool, relative: bool, reflectionAboutBBox: bool, reflectionAboutOrigin: bool, reflectionAboutX: bool, reflectionAboutY: bool, reflectionAboutZ: bool, reflection: bool, reflectionTolerance: float, symNegative: bool, worldSpace: bool, scaleX: bool, xformConstraint: str, constrainAlongNormal: bool, scaleXY: bool, scaleXYZ: bool, scaleXZ: bool, scaleY: bool, scaleYZ: bool, scaleZ: bool) -> Any: ...
def scaleComponents() -> Any: ...
def scaleConstraint(edit: bool, query: bool, layer: str, maintainOffset: bool, name: str, remove: bool, scaleCompensate: bool, skip: List[str], targetList: bool, weight: float, weightAliasList: bool) -> Any: ...
def scaleKey(animation: str, autoSnap: bool, floatPivot: float, floatScale: float, includeUpperBound: bool, newEndFloat: float, newEndTime: int, newStartFloat: float, newStartTime: int, scaleSpecifiedKeys: bool, timePivot: int, timeScale: float, valuePivot: float, valueScale: float) -> Any: ...
def scaleKeyCtx(edit: bool, query: bool, history: bool, exists: bool, image1: str, image2: str, image3: str, name: str, scaleSpecifiedKeys: bool, type: str) -> Any: ...
def sceneEditor(*args, **kwargs) -> Any: ...
def sceneLint(*args, **kwargs) -> Any: ...
def sceneUIReplacement(clear: bool, deleteRemaining: bool, getNextFilter: Tuple[str, str], getNextPanel: Tuple[str, str], getNextScriptedPanel: Tuple[str, str], update: str) -> Any: ...
def scmh(absolute: bool, ignore: List[int], quiet: bool, relative: bool) -> Any: ...
def scriptCtx(edit: bool, query: bool, animBreakdown: List[bool], animCurve: List[bool], animInTangent: List[bool], animKeyframe: List[bool], allComponents: List[bool], allObjects: List[bool], animOutTangent: List[bool], baseClassName: str, byName: List[Tuple[str, int]], curve: List[bool], camera: List[bool], history: bool, curveKnot: List[bool], cluster: List[bool], collisionModel: List[bool], cumulativeLists: bool, curveOnSurface: List[bool], curveParameterPoint: List[bool], controlVertex: List[bool], dynamicConstraint: List[bool], dimension: List[bool], setDoneSelectionPrompt: List[str], edge: List[bool], emitter: List[bool], editPoint: List[bool], enableRootSelection: bool, escToQuit: bool, expandSelectionList: bool, exitUponCompletion: bool, exists: bool, forceAddSelect: bool, facet: List[bool], finalCommandScript: Callable, field: List[bool], fluid: List[bool], follicle: List[bool], handle: List[bool], hull: List[bool], hairSystem: List[bool], image1: str, image2: str, image3: str, ikEndEffector: List[bool], implicitGeometry: List[bool], ignoreInvalidItems: bool, ikHandle: List[bool], imagePlane: List[bool], isoparm: List[bool], joint: List[bool], jointPivot: List[bool], lattice: List[bool], lastAutoComplete: bool, locator: List[bool], latticePoint: List[bool], light: List[bool], locatorUV: List[bool], meshComponents: List[bool], meshUVShell: List[bool], motionTrailPoint: List[bool], motionTrailTangent: List[bool], name: str, nurbsCurve: List[bool], nCloth: List[bool], nonlinear: List[bool], nParticle: List[bool], nParticleShape: List[bool], nRigid: List[bool], nurbsSurface: List[bool], objectComponent: bool, orientationLocator: List[bool], polymesh: List[bool], polymeshEdge: List[bool], polymeshFace: List[bool], polymeshFreeEdge: List[bool], plane: List[bool], particle: List[bool], particleShape: List[bool], polymeshUV: List[bool], polymeshVertex: List[bool], polymeshVtxFace: List[bool], localRotationAxis: List[bool], rigidBody: List[bool], rigidConstraint: List[bool], rotatePivot: List[bool], setAutoComplete: List[bool], setAllowExcessCount: List[bool], setAutoToggleSelection: List[bool], sculpt: List[bool], subdiv: List[bool], surfaceEdge: List[bool], surfaceFace: List[bool], selectHandle: List[bool], surfaceKnot: List[bool], showManipulators: bool, subdivMeshEdge: List[bool], subdivMeshFace: List[bool], subdivMeshPoint: List[bool], subdivMeshUV: List[bool], setNoSelectionHeadsUp: List[str], setNoSelectionPrompt: List[str], scalePivot: List[bool], springComponent: List[bool], surfaceParameterPoint: List[bool], spring: List[bool], surfaceRange: List[bool], setSelectionCount: List[int], setSelectionHeadsUp: List[str], setSelectionPrompt: List[str], stroke: List[bool], surfaceUV: List[bool], title: str, toolCursorType: str, toolFinish: Callable, toolStart: Callable, totalSelectionSets: int, texture: List[bool], vertex: List[bool], locatorXYZ: List[bool]) -> Any: ...
def scriptEditorInfo(edit: bool, query: bool, clearHistory: bool, clearHistoryFile: bool, historyFilename: str, input: str, suppressErrors: bool, suppressInfo: bool, suppressResults: bool, suppressStackWindow: bool, suppressWarnings: bool, writeHistory: bool) -> Any: ...
def scriptJob(attributeAdded: Tuple[str, Callable], attributeChange: Tuple[str, Callable], attributeDeleted: Tuple[str, Callable], allChildren: bool, conditionChange: Tuple[str, Callable], conditionFalse: Tuple[str, Callable], connectionChange: Tuple[str, Callable], conditionTrue: Tuple[str, Callable], compressUndo: bool, disregardIndex: bool, event: Tuple[str, Callable], exists: int, force: bool, idleEvent: Callable, kill: List[int], killAll: bool, killWithScene: bool, listConditions: bool, listEvents: bool, listJobs: bool, nodeDeleted: Tuple[str, Callable], nodeNameChanged: Tuple[str, Callable], optionVarChanged: Tuple[str, Callable], parent: str, permanent: bool, protected: bool, runOnce: bool, replacePrevious: bool, timeChange: Callable, uiDeleted: Tuple[str, Callable]) -> Any: ...
def scriptNode(edit: bool, query: bool, afterScript: str, beforeScript: str, executeAfter: bool, executeBefore: bool, ignoreReferenceEdits: bool, name: str, scriptType: int, sourceType: str) -> Any: ...
def scriptTable(edit: bool, query: bool, afterCellChangedCmd: Callable, annotation: str, columns: int, cellBackgroundColorCommand: Callable, cellChangedCmd: Callable, columnFilter: Tuple[int, str], cellForegroundColorCommand: Callable, clearRow: int, clearTable: bool, cellValue: str, columnWidth: List[Tuple[int, int]], dragCallback: Callable, dropCallback: Callable, deleteRow: int, defineTemplate: str, docTag: str, enableBackground: bool, editable: bool, excludingHeaders: bool, enableKeyboardFocus: bool, enable: bool, exists: bool, fullPathName: bool, getCellCmd: Callable, height: int, isObscured: bool, insertRow: int, label: List[Tuple[int, str]], manage: bool, multiEditEnabled: bool, noBackground: bool, numberOfPopupMenus: bool, parent: str, popupMenuArray: bool, preventOverride: bool, rows: int, rowHeight: int, rowsRemovedCmd: Callable, rowsToBeRemovedCmd: Callable, selectionBehavior: int, statusBarMessage: str, selectionChangedCmd: Callable, sortEnabled: bool, selectionMode: int, selectedRow: bool, useDoubleClickEdit: bool, underPointerColumn: bool, underPointerRow: bool, useTemplate: str, visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def scriptedPanel(edit: bool, query: bool, copy: str, createString: bool, control: bool, defineTemplate: str, docTag: str, editString: bool, exists: bool, init: bool, isUnique: bool, label: str, menuBarVisible: bool, menuBarRepeatLast: bool, needsInit: bool, parent: str, popupMenuProcedure: Callable, replacePanel: str, tearOff: bool, tearOffCopy: str, tearOffRestore: bool, type: str, unParent: bool, useTemplate: str) -> Any: ...
def scriptedPanelType(edit: bool, query: bool, addCallback: str, createCallback: str, customView: bool, deleteCallback: str, defineTemplate: str, exists: bool, hotkeyCtxClient: str, initCallback: str, label: str, obsolete: bool, copyStateCallback: str, removeCallback: str, retainOnFileOpen: bool, saveStateCallback: str, unique: bool, useTemplate: str) -> Any: ...
def scrollField(edit: bool, query: bool, annotation: str, command: str, changeCommand: Callable, clear: bool, dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enterCommand: Callable, editable: bool, enableKeyboardFocus: bool, enable: bool, exists: bool, font: str, fontPointSize: int, fullPathName: bool, height: int, isObscured: bool, insertionPosition: int, insertText: str, keyPressCommand: Callable, manage: bool, noBackground: bool, numberOfLines: int, numberOfPopupMenus: bool, parent: str, popupMenuArray: bool, preventOverride: bool, qtFont: str, statusBarMessage: str, selection: bool, text: str, useTemplate: str, visibleChangeCommand: Callable, visible: bool, width: int, wordWrap: bool) -> Any: ...
def scrollLayout(edit: bool, query: bool, annotation: str, borderVisible: bool, childArray: bool, childResizable: bool, dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enableKeyboardFocus: bool, enable: bool, exists: bool, fullPathName: bool, height: int, horizontalScrollBarThickness: int, isObscured: bool, manage: bool, minChildWidth: int, noBackground: bool, numberOfChildren: bool, numberOfPopupMenus: bool, parent: str, panEnabled: bool, popupMenuArray: bool, preventOverride: bool, resizeCommand: Callable, scrollAreaHeight: bool, scrollAreaValue: bool, scrollAreaWidth: bool, statusBarMessage: str, scrollByPixel: Tuple[str, int], scrollPage: str, useTemplate: str, visibleChangeCommand: Callable, visible: bool, verticalScrollBarAlwaysVisible: bool, verticalScrollBarThickness: int, width: int) -> Any: ...
def sculpt(edit: bool, query: bool, after: bool, afterReference: bool, before: bool, dropoffDistance: float, dropoffType: str, deformerTools: bool, exclusive: str, frontOfChain: bool, geometry: List[str], geometryIndices: bool, groupWithLocator: bool, includeHiddenSelections: bool, insideMode: str, ignoreSelected: bool, mode: str, maxDisplacement: float, name: str, objectCentered: bool, parallel: bool, prune: bool, split: bool, sculptTool: str, useComponentTags: bool) -> Any: ...
def sculptMeshCacheChangeCloneSource(*args, **kwargs) -> Any: ...
def sculptMeshCacheCtx(*args, **kwargs) -> Any: ...
def sculptTarget(edit: bool, query: bool, after: bool, afterReference: bool, before: bool, deformerTools: bool, exclusive: str, frontOfChain: bool, geometry: List[str], geometryIndices: bool, inbetweenWeight: float, includeHiddenSelections: bool, ignoreSelected: bool, name: str, parallel: bool, prune: bool, regenerate: bool, snapshot: int, split: bool, target: int, useComponentTags: bool) -> Any: ...
def selLoadSettings(edit: bool, query: bool, activeProxy: str, deferReference: bool, fileName: str, numSettings: int, proxyManager: str, proxySetFiles: str, proxySetTags: str, proxyTag: str, referenceNode: str, shortName: bool, unresolvedName: bool) -> Any: ...
def select(allDependencyNodes: bool, allDagObjects: bool, addFirst: bool, containerCentric: bool, clear: bool, deselect: bool, hierarchy: bool, noExpand: bool, replace: bool, symmetry: bool, symmetrySide: int, toggle: bool, visible: bool) -> Any: ...
def selectContext(edit: bool, query: bool, history: bool, exists: bool, image1: str, image2: str, image3: str, name: str) -> Any: ...
def selectKey(addTo: bool, animation: str, clear: bool, inTangent: bool, includeUpperBound: bool, keyframe: bool, outTangent: bool, replace: bool, remove: bool, toggle: bool, unsnappedKeys: float) -> Any: ...
def selectKeyCtx(edit: bool, query: bool, history: bool, exists: bool, image1: str, image2: str, image3: str, name: str) -> Any: ...
def selectKeyframe(animation: str, includeUpperBound: bool) -> Any: ...
def selectKeyframeRegionCtx(edit: bool, query: bool, history: bool, exists: bool, image1: str, image2: str, image3: str, name: str) -> Any: ...
def selectMode(query: bool, component: bool, hierarchical: bool, leaf: bool, object: bool, preset: bool, root: bool, template: bool) -> Any: ...
def selectPref(query: bool, affectsActive: bool, allowHiliteSelection: bool, autoSelectContainer: bool, autoSelectOutlinerSetMembers: bool, autoUseDepth: bool, clickBoxSize: int, containerCentricSelection: bool, clickDrag: bool, disableComponentPopups: bool, expandPopupList: bool, ignoreSelectionPriority: bool, manipClickBoxSize: int, preSelectDeadSpace: int, preSelectTweakDeadSpace: int, preSelectHiliteSize: float, popupMenuSelection: bool, paintSelect: bool, preSelectBackfacing: bool, preSelectClosest: bool, paintSelectWithDepth: bool, paintSelectRefine: bool, preSelectHilite: bool, preSelectSize: int, singleBoxSelection: bool, selectionChildHighlightMode: int, straightLineDistance: bool, selectTypeChangeAffectsActive: bool, trackSelectionOrder: bool, useDepth: bool, xformNoSelect: bool) -> Any: ...
def selectPriority(query: bool, animBreakdown: int, animCurve: int, animInTangent: int, animKeyframe: int, allComponents: int, allObjects: int, animOutTangent: int, byName: List[Tuple[str, int]], curve: int, camera: int, curveKnot: int, cluster: int, collisionModel: int, curveOnSurface: int, curveParameterPoint: int, controlVertex: int, dynamicConstraint: int, dimension: int, edge: int, emitter: int, editPoint: int, facet: int, field: int, fluid: int, follicle: int, handle: int, hull: int, hairSystem: int, ikEndEffector: int, implicitGeometry: int, ikHandle: int, imagePlane: int, isoparm: int, joint: int, jointPivot: int, lattice: int, locator: int, latticePoint: int, light: int, locatorUV: int, meshUVShell: int, motionTrailPoint: int, motionTrailTangent: int, nurbsCurve: int, nCloth: int, nonlinear: int, nParticle: int, nParticleShape: int, nRigid: int, nurbsSurface: int, orientationLocator: int, polymesh: int, polymeshEdge: int, polymeshFace: int, polymeshFreeEdge: int, plane: int, particle: int, particleShape: int, polymeshUV: int, polymeshVertex: int, polymeshVtxFace: int, localRotationAxis: int, rigidBody: int, rigidConstraint: int, rotatePivot: int, sculpt: int, subdiv: int, surfaceEdge: int, surfaceFace: int, selectHandle: int, surfaceKnot: int, subdivMeshEdge: int, subdivMeshFace: int, subdivMeshPoint: int, subdivMeshUV: int, scalePivot: int, springComponent: int, surfaceParameterPoint: int, spring: int, surfaceRange: int, stroke: int, texture: int, vertex: int, locatorXYZ: int) -> Any: ...
def selectType(query: bool, animBreakdown: bool, animCurve: bool, animInTangent: bool, animKeyframe: bool, allComponents: bool, allObjects: bool, animOutTangent: bool, byName: List[Tuple[str, int]], curve: bool, camera: bool, curveKnot: bool, cluster: bool, collisionModel: bool, curveOnSurface: bool, curveParameterPoint: bool, controlVertex: bool, dynamicConstraint: bool, dimension: bool, edge: bool, emitter: bool, editPoint: bool, facet: bool, field: bool, fluid: bool, follicle: bool, handle: bool, hull: bool, hairSystem: bool, ikEndEffector: bool, implicitGeometry: bool, ikHandle: bool, imagePlane: bool, isoparm: bool, joint: bool, jointPivot: bool, lattice: bool, locator: bool, latticePoint: bool, light: bool, locatorUV: bool, meshComponents: bool, meshUVShell: bool, motionTrailPoint: bool, motionTrailTangent: bool, nurbsCurve: bool, nCloth: bool, nonlinear: bool, nParticle: bool, nParticleShape: bool, nRigid: bool, nurbsSurface: bool, objectComponent: bool, orientationLocator: bool, polymesh: bool, polymeshEdge: bool, polymeshFace: bool, polymeshFreeEdge: bool, plane: bool, particle: bool, particleShape: bool, polymeshUV: bool, polymeshVertex: bool, polymeshVtxFace: bool, localRotationAxis: bool, rigidBody: bool, rigidConstraint: bool, rotatePivot: bool, sculpt: bool, subdiv: bool, surfaceEdge: bool, surfaceFace: bool, selectHandle: bool, surfaceKnot: bool, subdivMeshEdge: bool, subdivMeshFace: bool, subdivMeshPoint: bool, subdivMeshUV: bool, scalePivot: bool, springComponent: bool, surfaceParameterPoint: bool, spring: bool, surfaceRange: bool, stroke: bool, surfaceUV: bool, texture: bool, vertex: bool, locatorXYZ: bool) -> Any: ...
def selectedNodes(dagObjects: bool) -> Any: ...
def selectionConnection(edit: bool, query: bool, activeCharacterList: bool, activeList: bool, addTo: str, addScript: Callable, activeCacheList: bool, characterList: bool, clear: bool, deselect: str, defineTemplate: str, editor: str, exists: bool, filter: str, findObject: str, g: bool, highlightList: bool, identify: bool, keyframeList: bool, lock: bool, connectionList: bool, modelList: bool, object: str, parent: str, remove: str, removeScript: Callable, select: str, setList: bool, switch: bool, useTemplate: str, worldList: bool) -> Any: ...
def separator(edit: bool, query: bool, annotation: str, dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enableKeyboardFocus: bool, enable: bool, exists: bool, fullPathName: bool, height: int, horizontal: bool, isObscured: bool, manage: bool, noBackground: bool, numberOfPopupMenus: bool, parent: str, popupMenuArray: bool, preventOverride: bool, statusBarMessage: str, style: str, useTemplate: str, visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def sequenceManager(edit: bool, query: bool, addSequencerAudio: str, attachSequencerAudio: str, currentShot: str, currentTime: int, listSequencerAudio: str, listShots: bool, modelPanel: str, node: str, writableSequencer: str) -> Any: ...
def setAttr(edit: bool, query: bool, alteredValue: bool, clamp: bool, caching: bool, channelBox: bool, capacityHint: int, keyable: bool, lock: bool, size: int, type: str) -> Any: ...
def setAttrMapping(*args, **kwargs) -> Any: ...
def setDefaultShadingGroup(query: bool) -> Any: ...
def setDrivenKeyframe(edit: bool, query: bool, attribute: List[str], currentDriver: str, count: bool, controlPoints: bool, driven: bool, driver: bool, driverValue: List[float], hierarchy: str, insert: bool, insertBlend: bool, inTangentType: str, outTangentType: str, shape: bool, value: float) -> Any: ...
def setDynStartState() -> Any: ...
def setDynamic(setAll: bool, allOnWhenRun: bool, disableAllOnWhenRun: bool, setOff: bool, setOn: bool) -> Any: ...
def setEditCtx(edit: bool, query: bool, history: bool, exists: bool, image1: str, image2: str, image3: str, name: str) -> Any: ...
def setFluidAttr(addValue: bool, attribute: str, clear: bool, floatRandom: float, floatValue: float, lowerFace: bool, reset: bool, xvalue: bool, xIndex: int, yvalue: bool, yIndex: int, zvalue: bool, zIndex: int) -> Any: ...
def setFocus() -> Any: ...
def setInfinity(edit: bool, query: bool, postInfinite: str, preInfinite: str) -> Any: ...
def setInputDeviceMapping(*args, **kwargs) -> Any: ...
def setKeyCtx(edit: bool, query: bool, breakdown: bool, history: bool, exists: bool, image1: str, image2: str, image3: str, name: str, preserveTangent: bool) -> Any: ...
def setKeyPath() -> Any: ...
def setKeyframe(edit: bool, query: bool, adjustTangent: bool, animLayer: str, animated: bool, attribute: List[str], breakdown: bool, clip: str, controlPoints: bool, dirtyDG: bool, float: List[float], hierarchy: str, insert: bool, insertBlend: bool, identity: bool, inTangentType: str, useCurrentLockedWeights: bool, minimizeRotation: bool, noResolve: bool, outTangentType: str, preserveCurveShape: bool, respectKeyable: bool, shape: bool, time: List[int], value: float) -> Any: ...
def setKeyframeBlendshapeTargetWts() -> Any: ...
def setMenuMode() -> Any: ...
def setNClothStartState() -> Any: ...
def setNodeTypeFlag(query: bool, display: bool, threadSafe: bool) -> Any: ...
def setParent(query: bool, defineTemplate: str, menu: bool, topLevel: bool, upLevel: bool, useTemplate: str) -> Any: ...
def setParticleAttr(attribute: str, floatValue: float, object: str, relative: bool, randomFloat: float) -> Any: ...
def setRenderPassType(defaultDataType: bool, numChannels: int, type: str) -> Any: ...
def setStartupMessage() -> Any: ...
def setToolTo() -> Any: ...
def setUITemplate(query: bool, popTemplate: bool, pushTemplate: bool) -> Any: ...
def setXformManip(*args, **kwargs) -> Any: ...
def sets(edit: bool, query: bool, addElement: str, afterFilters: bool, anyMember: str, clear: str, color: int, copy: str, edges: bool, empty: bool, editPoints: bool, facets: bool, forceElement: str, flatten: str, isIntersecting: str, isMember: str, include: str, intersection: str, layer: bool, name: str, noIntermediate: bool, nodesOnly: bool, noSurfaceShader: bool, noWarnings: bool, renderable: bool, remove: str, size: bool, split: str, subtract: str, text: str, union: str, vertices: bool) -> Any: ...
def shadingConnection(edit: bool, query: bool, connectionState: bool) -> Any: ...
def shadingGeometryRelCtx(*args, **kwargs) -> Any: ...
def shadingLightRelCtx(*args, **kwargs) -> Any: ...
def shadingNetworkCompare(query: bool, delete: bool, equivalent: bool, network1: bool, network2: bool, byName: bool, upstreamOnly: bool, byValue: bool) -> Any: ...
def shadingNode(*args, **kwargs) -> Any: ...
def shapeCompare() -> Any: ...
def shapeEditor(*args, **kwargs) -> Any: ...
def shapePanel(*args, **kwargs) -> Any: ...
def shelfButton(edit: bool, query: bool, actionIsSubstitute: bool, align: str, annotation: str, command: Callable, doubleClickCommand: Callable, dragCallback: Callable, disabledImage: str, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enableCommandRepeat: bool, enableKeyboardFocus: bool, enable: bool, exists: bool, flat: bool, font: str, fullPathName: bool, flexibleWidthType: int, flexibleWidthValue: int, flipX: float, flipY: float, height: int, highlightImage: str, handleNodeDropCallback: Callable, image: str, image1: str, image2: str, image3: str, isObscured: bool, imageOverlayLabel: str, label: str, labelEditingCallback: Callable, labelOffset: int, ltVersion: str, manage: bool, marginHeight: int, menuItem: List[Tuple[str, str]], menuItemPython: List[int], marginWidth: int, noBackground: bool, noDefaultPopup: bool, numberOfPopupMenus: bool, parent: str, popupMenuArray: bool, preventOverride: bool, rotation: float, commandRepeatable: bool, statusBarMessage: str, selectionImage: str, scaleIcon: bool, style: str, sourceType: str, useAlpha: float, useTemplate: str, visibleChangeCommand: Callable, version: str, visible: bool, width: int) -> Any: ...
def shelfLayout(edit: bool, query: bool, alignment: str, annotation: str, childArray: bool, cellHeight: int, cellWidth: int, cellWidthHeight: Tuple[int, int], dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enableKeyboardFocus: bool, enable: bool, exists: bool, fullPathName: bool, height: int, horizontal: bool, isObscured: bool, ltVersion: str, manage: bool, noBackground: bool, numberOfChildren: bool, numberOfPopupMenus: bool, parent: str, popupMenuArray: bool, preventOverride: bool, position: List[Tuple[str, int]], statusBarMessage: str, spacing: int, style: str, useTemplate: str, visibleChangeCommand: Callable, version: str, visible: bool, width: int) -> Any: ...
def shelfTabLayout(edit: bool, query: bool, annotation: str, borderStyle: str, childArray: bool, changeCommand: Callable, childResizable: bool, closeTab: int, closeTabCommand: Callable, doubleClickCommand: Callable, dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enableKeyboardFocus: bool, enable: bool, exists: bool, fullPathName: bool, height: int, horizontalScrollBarThickness: int, image: str, innerMarginHeight: int, innerMarginWidth: int, isObscured: bool, imageVisible: bool, manage: bool, minChildWidth: int, moveTab: Tuple[int, int], noBackground: bool, numberOfChildren: bool, numberOfPopupMenus: bool, newTabCommand: Callable, parent: str, popupMenuArray: bool, postMenuCommand: Callable, preventOverride: bool, preSelectCommand: Callable, statusBarMessage: str, selectCommand: Callable, scrollable: bool, showNewTab: bool, selectTab: str, scrollableTabs: bool, selectTabIndex: int, tabsClosable: bool, tabLabel: List[Tuple[str, str]], tabLabelIndex: List[Tuple[int, str]], tabPosition: str, tabTooltip: List[Tuple[str, str]], tabTooltipIndex: List[Tuple[int, str]], tabsVisible: bool, useTemplate: str, visibleChangeCommand: Callable, visible: bool, verticalScrollBarThickness: int, width: int) -> Any: ...
def shot(edit: bool, query: bool, audio: str, copy: bool, customAnim: bool, currentCamera: str, createCustomAnim: bool, clipDuration: int, clip: str, clipOpacity: float, clipSyncState: bool, clipZeroOffset: int, deleteCustomAnim: bool, determineTrack: bool, endTime: int, flag1: bool, flag10: bool, flag11: bool, flag12: bool, flag2: bool, flag3: bool, flag4: bool, flag5: bool, flag6: bool, flag7: bool, flag8: bool, flag9: bool, favorite: bool, hasCameraSet: bool, hasStereoCamera: bool, imagePlaneVisibility: bool, linkAudio: str, lock: bool, mute: bool, paste: bool, pasteInstance: bool, preHoldTime: int, postHoldTime: int, scale: float, sourceDuration: int, sequenceEndTime: int, selfmute: bool, shotName: str, sequenceDuration: int, sequenceStartTime: int, startTime: int, transitionInLength: int, transitionInType: int, transitionOutLength: int, transitionOutType: int, track: int, unlinkAudio: bool) -> Any: ...
def shotRipple(edit: bool, query: bool, deleted: bool, endDelta: int, endTime: int, startDelta: int, startTime: int) -> Any: ...
def shotTrack(edit: bool, query: bool, insertTrack: int, lock: bool, mute: bool, numTracks: int, removeEmptyTracks: bool, removeTrack: int, selfmute: bool, solo: bool, swapTracks: Tuple[int, int], title: str, unsolo: bool) -> Any: ...
def showHelp(query: bool, absolute: bool, docs: bool, helpTable: bool, version: bool) -> Any: ...
def showHidden(above: bool, allObjects: bool, below: bool, lastHidden: bool) -> Any: ...
def showManipCtx(edit: bool, query: bool, history: bool, currentNodeName: bool, exists: bool, image1: str, image2: str, image3: str, incSnapUI: bool, incSnapValue: List[Tuple[int, float]], lockSelection: bool, name: str, toolFinish: Callable, toggleIncSnap: bool, toolStart: Callable) -> Any: ...
def showMetadata(query: bool, auto: bool, interpolation: bool, isActivated: bool, listAllStreams: bool, listMembers: bool, listValidMethods: bool, listVisibleStreams: bool, method: str, range: Tuple[float, float], rayScale: float) -> Any: ...
def showSelectionInTitle() -> Any: ...
def showShadingGroupAttrEditor(*args, **kwargs) -> Any: ...
def showWindow() -> Any: ...
def simplify(animation: str, floatTolerance: float, includeUpperBound: bool, timeTolerance: int, valueTolerance: float) -> Any: ...
def singleProfileBirailSurface(edit: bool, query: bool, caching: bool, constructionHistory: bool, frozen: bool, name: str, nodeState: int, object: bool, polygon: int, transformMode: int, tangentContinuityProfile1: bool) -> Any: ...
def skeletonEmbed(query: bool, mergedMesh: bool, segmentationMethod: int, segmentationResolution: int) -> Any: ...
def skinBindCtx(*args, **kwargs) -> Any: ...
def skinCluster(edit: bool, query: bool, after: bool, addInfluence: List[str], afterReference: bool, addToSelection: bool, before: bool, bindMethod: int, baseShape: List[str], dropoffRate: float, deformerTools: bool, exclusive: str, forceNormalizeWeights: bool, frontOfChain: bool, geometry: List[str], geometryIndices: bool, heatmapFalloff: float, ignoreBindPose: bool, ignoreHierarchy: bool, includeHiddenSelections: bool, ignoreSelected: bool, lockWeights: bool, maximumInfluences: int, moveJointsMode: bool, name: str, nurbsSamples: int, normalizeWeights: int, obeyMaxInfluences: bool, parallel: bool, prune: bool, polySmoothness: float, recacheBindMatrices: bool, removeFromSelection: bool, removeInfluence: List[str], removeUnusedInfluence: bool, selectInfluenceVerts: List[str], skinMethod: int, split: bool, smoothWeights: float, smoothWeightsMaxIterations: int, toSelectedBones: bool, toSkeletonAndTransforms: bool, unbind: bool, unbindKeepHistory: bool, useComponentTags: bool, useGeometry: bool, volumeBind: float, volumeType: int, weightDistribution: int, weightedInfluence: bool, weight: float) -> Any: ...
def skinPercent(query: bool, normalize: bool, pruneWeights: float, relative: bool, resetToDefault: bool, transformMoveWeights: List[str], transformValue: List[Tuple[str, float]], value: bool, zeroRemainingInfluences: bool) -> Any: ...
def smoothCurve(edit: bool, query: bool, caching: bool, constructionHistory: bool, frozen: bool, name: str, nodeState: int, object: bool, replaceOriginal: bool, smoothness: float) -> Any: ...
def smoothTangentSurface(edit: bool, query: bool, caching: bool, constructionHistory: bool, direction: int, frozen: bool, name: str, nodeState: int, object: bool, parameter: List[float], replaceOriginal: bool, smoothness: int) -> Any: ...
def snapKey(animation: str, includeUpperBound: bool, mergeDuplicate: bool, timeMultiple: float, valueMultiple: float) -> Any: ...
def snapMode(query: bool, curve: bool, distanceIncrement: float, edgeMagnet: int, edgeMagnetTolerance: float, grid: bool, liveFaceCenter: bool, livePoint: bool, meshCenter: bool, point: bool, pixelCenter: bool, pixelSnap: bool, tolerance: int, useTolerance: bool, uvTolerance: int, viewPlane: bool) -> Any: ...
def snapTogetherCtx(edit: bool, query: bool, history: bool, clearSelection: bool, exists: bool, image1: str, image2: str, image3: str, name: str, setOrientation: bool, snapPolygonFace: bool) -> Any: ...
def snapshot(edit: bool, query: bool, constructionHistory: bool, endTime: int, increment: int, motionTrail: bool, motionTrailName: str, name: str, removeAnchorTransform: str, startTime: int, update: str) -> Any: ...
def snapshotBeadContext(*args, **kwargs) -> Any: ...
def snapshotBeadCtx(edit: bool, query: bool, history: bool, exists: bool, inTangent: bool, image1: str, image2: str, image3: str, name: str, outTangent: bool) -> Any: ...
def snapshotModifyKeyCtx(edit: bool, query: bool, history: bool, exists: bool, image1: str, image2: str, image3: str, name: str) -> Any: ...
def soft(query: bool, convert: bool, duplicate: bool, duplicateHistory: bool, goal: float, hideOriginal: bool, name: str) -> Any: ...
def softMod(edit: bool, query: bool, after: bool, afterReference: bool, before: bool, bindState: bool, curveInterpolation: List[int], curvePoint: List[float], curveValue: List[float], deformerTools: bool, envelope: float, exclusive: str, falloffAroundSelection: bool, falloffBasedOnX: bool, falloffBasedOnY: bool, falloffBasedOnZ: bool, falloffMasking: bool, frontOfChain: bool, falloffMode: int, falloffRadius: float, geometry: List[str], geometryIndices: bool, includeHiddenSelections: bool, ignoreSelected: bool, name: str, parallel: bool, prune: bool, relative: bool, resetGeometry: bool, split: bool, useComponentTags: bool, weightedNode: Tuple[str, str]) -> Any: ...
def softModContext(*args, **kwargs) -> Any: ...
def softSelect(edit: bool, query: bool, compressUndo: int, enableFalseColor: int, softSelectColorCurve: str, softSelectCurve: str, softSelectDistance: float, softSelectEnabled: int, softSelectFalloff: int, softSelectReset: bool, softSelectUVDistance: float) -> Any: ...
def softSelectOptionsCtx(edit: bool, query: bool, buttonDown: bool, buttonUp: bool, colorCurve: str, condition: bool, enableFalseColor: int, enabled: bool, exists: bool, falloffCurve: str, falloffMode: int, image1: str, image2: str, image3: str, size: float, uvSize: float) -> Any: ...
def soloMaterial(*args, **kwargs) -> Any: ...
def sortCaseInsensitive() -> Any: ...
def sound(edit: bool, query: bool, endTime: int, file: str, length: bool, mute: bool, name: str, offset: int, sourceEnd: int, sourceStart: int) -> Any: ...
def soundControl(edit: bool, query: bool, annotation: str, beginScrub: bool, dragCallback: Callable, dropCallback: Callable, displaySound: bool, defineTemplate: str, docTag: str, enableBackground: bool, enableKeyboardFocus: bool, enable: bool, endScrub: bool, exists: bool, fullPathName: bool, height: int, isObscured: bool, manage: bool, maxTime: int, minTime: int, noBackground: bool, numberOfPopupMenus: bool, parent: str, pressCommand: str, popupMenuArray: bool, preventOverride: bool, resample: bool, releaseCommand: str, repeatChunkSize: float, repeatOnHold: bool, sound: str, statusBarMessage: str, useTemplate: str, visibleChangeCommand: Callable, visible: bool, width: int, waveform: str) -> Any: ...
def soundPopup(edit: bool, query: bool, annotation: str, dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enableKeyboardFocus: bool, enable: bool, exists: bool, fullPathName: bool, height: int, isObscured: bool, manage: bool, noBackground: bool, numberOfPopupMenus: bool, parent: str, popupMenuArray: bool, preventOverride: bool, statusBarMessage: str, useTemplate: str, visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def spBirailCtx(*args, **kwargs) -> Any: ...
def spaceLocator(edit: bool, query: bool, absolute: bool, name: str, relative: bool) -> Any: ...
def sphere(edit: bool, query: bool, caching: bool, constructionHistory: bool, degree: int, endSweep: float, frozen: bool, heightRatio: float, name: str, nodeState: int, spans: int, object: bool, polygon: int, radius: float, sections: int, startSweep: float, tolerance: float, useTolerance: bool) -> Any: ...
def spotLight(edit: bool, query: bool, bottomBarnDoorAngle: float, barnDoors: bool, coneAngle: float, decayRate: int, dropOff: float, discRadius: float, exclusive: bool, intensity: float, leftBarnDoorAngle: float, name: str, penumbra: float, rightBarnDoorAngle: float, useRayTraceShadows: bool, shadowDither: float, shadowSamples: int, softShadow: bool, topBarnDoorAngle: float) -> Any: ...
def spotLightPreviewPort(*args, **kwargs) -> Any: ...
def spreadSheetEditor(edit: bool, query: bool, allAttr: bool, attrRegExp: str, control: bool, defineTemplate: str, docTag: str, exists: bool, execute: str, filter: str, forceMainConnection: str, highlightConnection: str, keyableOnly: bool, lockMainConnection: bool, longNames: bool, mainListConnection: str, niceNames: bool, parent: str, panel: str, precision: int, selectedAttr: bool, selectionConnection: str, showShapes: bool, stateString: bool, unlockMainConnection: bool, unParent: bool, updateMainConnection: bool, useTemplate: str) -> Any: ...
def spring(edit: bool, query: bool, addSprings: bool, allPoints: bool, count: bool, damping: float, dampingPS: float, damp: float, endForceWeight: float, exclusive: bool, length: float, minMax: bool, minDistance: float, maxDistance: float, name: str, noDuplicate: bool, restLengthPS: float, restLength: float, stiffness: float, stiffnessPS: float, startForceWeight: float, strength: float, useDampingPS: bool, useRestLengthPS: bool, useStiffnessPS: bool, wireframe: bool, walkLength: int) -> Any: ...
def squareSurface(edit: bool, query: bool, caching: bool, curveFitCheckpoints: int, constructionHistory: bool, continuityType1: int, continuityType2: int, continuityType3: int, continuityType4: int, endPointTolerance: float, frozen: bool, name: str, nodeState: int, object: bool, polygon: int, rebuildCurve1: bool, rebuildCurve2: bool, rebuildCurve3: bool, rebuildCurve4: bool) -> Any: ...
def srtContext(edit: bool, query: bool, history: bool, exists: bool, image1: str, image2: str, image3: str, name: str) -> Any: ...
def stackTrace(query: bool, dump: bool, parameterCount: int, parameterType: Tuple[int, int], parameterValue: Tuple[int, int], state: bool) -> Any: ...
def stitchSurface(edit: bool, query: bool, bias: float, cascade: bool, caching: bool, constructionHistory: bool, cvIthIndex: List[int], cvJthIndex: List[int], fixBoundary: bool, frozen: bool, keepG0Continuity: bool, keepG1Continuity: bool, name: str, nodeState: int, numberOfSamples: int, object: bool, positionalContinuity: List[bool], replaceOriginal: bool, stepCount: List[int], tangentialContinuity: List[bool], tolerance: List[float], togglePointNormals: bool, togglePointPosition: bool, toggleTolerance: List[bool], parameterU: List[float], parameterV: List[float], weight0: float, weight1: float) -> Any: ...
def stitchSurfaceCtx(*args, **kwargs) -> Any: ...
def stitchSurfacePoints(edit: bool, query: bool, bias: float, cascade: bool, caching: bool, constructionHistory: bool, cvIthIndex: List[int], cvJthIndex: List[int], equalWeight: bool, fixBoundary: bool, frozen: bool, keepG0Continuity: bool, keepG1Continuity: bool, name: str, nodeState: int, object: bool, positionalContinuity: List[bool], replaceOriginal: bool, stepCount: List[int], tangentialContinuity: List[bool], tolerance: List[float], togglePointNormals: bool, togglePointPosition: bool, toggleTolerance: List[bool], parameterU: List[float], parameterV: List[float]) -> Any: ...
def stringArrayIntersector(edit: bool, query: bool, allowDuplicates: bool, defineTemplate: str, exists: bool, reset: bool, useTemplate: str) -> Any: ...
def stroke(name: str, pressure: bool, seed: int) -> Any: ...
def subdAutoProjection(edit: bool, query: bool, caching: bool, constructionHistory: bool, frozen: bool, layout: int, layoutMethod: int, name: str, nodeState: int, optimize: int, planes: int, percentageSpace: float, scale: int, skipIntersect: bool, worldSpace: bool) -> Any: ...
def subdCleanTopology() -> Any: ...
def subdCollapse(edit: bool, query: bool, caching: bool, constructionHistory: bool, frozen: bool, level: int, name: str, nodeState: int, object: bool) -> Any: ...
def subdDisplayMode(*args, **kwargs) -> Any: ...
def subdDuplicateAndConnect() -> Any: ...
def subdEditUV(query: bool, angle: float, pivotU: float, pivotV: float, relative: bool, rotation: bool, rotateRatio: float, scale: bool, scaleU: float, scaleV: float, uValue: float, uvSetName: str, vValue: float) -> Any: ...
def subdLayoutUV(edit: bool, query: bool, caching: bool, constructionHistory: bool, flipReversed: bool, frozen: bool, layout: int, layoutMethod: int, name: str, nodeState: int, percentageSpace: float, rotateForBestFit: int, scale: int, separate: int, worldSpace: bool) -> Any: ...
def subdListComponentConversion(*args, **kwargs) -> Any: ...
def subdMapCut(edit: bool, query: bool, caching: bool, constructionHistory: bool, frozen: bool, name: str, nodeState: int) -> Any: ...
def subdMapSewMove(edit: bool, query: bool, caching: bool, constructionHistory: bool, frozen: bool, limitPieceSize: bool, name: str, nodeState: int, numberFaces: int, worldSpace: bool) -> Any: ...
def subdMatchTopology(frontOfChain: bool) -> Any: ...
def subdMirror(edit: bool, query: bool, caching: bool, constructionHistory: bool, frozen: bool, name: str, nodeState: int, object: bool, xMirror: bool, yMirror: bool, zMirror: bool) -> Any: ...
def subdPlanarProjection(edit: bool, query: bool, caching: bool, constructionHistory: bool, createNewMap: bool, frozen: bool, insertBeforeDeformers: bool, imageCenter: Tuple[float, float], imageCenterX: float, imageCenterY: float, imageScale: Tuple[float, float], imageScaleU: float, imageScaleV: float, keepImageRatio: bool, mapDirection: str, name: str, nodeState: int, projectionCenterX: float, projectionCenterY: float, projectionCenterZ: float, projectionHeight: float, projectionScale: Tuple[float, float], projectionWidth: float, rotationAngle: float, rotateX: float, rotateY: float, rotateZ: float, smartFit: bool, worldSpace: bool) -> Any: ...
def subdToBlind(*args, **kwargs) -> Any: ...
def subdToNurbs(edit: bool, query: bool, applyMatrixToResult: bool, addUnderTransform: bool, caching: bool, constructionHistory: bool, frozen: bool, name: str, nodeState: int, object: bool, outputType: int) -> Any: ...
def subdToPoly(edit: bool, query: bool, applyMatrixToResult: bool, addUnderTransform: bool, caching: bool, constructionHistory: bool, connectShaders: bool, copyUVTopology: bool, depth: int, extractPointPosition: bool, format: int, frozen: bool, inSubdCVId: List[Tuple[int, int]], inSubdCVIdLeft: int, inSubdCVIdRight: int, maxPolys: int, name: str, nodeState: int, object: bool, outSubdCVId: List[Tuple[int, int]], outSubdCVIdLeft: int, outSubdCVIdRight: int, outv: List[int], preserveVertexOrdering: bool, sampleCount: int, shareUVs: bool, subdNormals: bool) -> Any: ...
def subdTransferUVsToCache() -> Any: ...
def subdiv(*args, **kwargs) -> Any: ...
def subdivCrease(*args, **kwargs) -> Any: ...
def subdivDisplaySmoothness(*args, **kwargs) -> Any: ...
def subgraph(*args, **kwargs) -> Any: ...
def substituteGeometry(disableNonSkinDeformers: bool, newGeometryToLayer: bool, oldGeometryToLayer: bool, retainOldGeometry: bool, reWeightDistTolerance: float) -> Any: ...
def suitePrefs(edit: bool, query: bool, applyToSuite: str, installedAsSuite: bool, isCompleteSuite: bool) -> Any: ...
def superCtx(edit: bool, query: bool, attach: List[str], exists: bool, image1: str, image2: str, image3: str) -> Any: ...
def surface(degreeU: int, degreeV: int, formU: str, formV: str, knotU: List[float], knotV: List[float], name: str, objectSpace: bool, worldSpace: bool) -> Any: ...
def surfaceSampler(camera: str, fileFormat: List[str], filename: List[str], filterSize: float, filterType: int, flipU: bool, flipV: bool, ignoreMirroredFaces: bool, ignoreTransforms: bool, maximumValue: List[float], mapHeight: List[int], mapMaterials: List[bool], mapOutput: List[str], maxSearchDistance: List[float], mapWidth: List[int], overscan: int, source: List[str], searchCage: List[str], shadows: List[bool], searchMethod: int, searchOffset: List[float], mapSpace: List[str], superSampling: int, sourceUVSpace: List[str], target: List[str], targetUVSpace: List[str], useGeometryNormals: bool, uvSet: List[str]) -> Any: ...
def surfaceShaderList(edit: bool, query: bool, remove: str) -> Any: ...
def swatchDisplayPort(*args, **kwargs) -> Any: ...
def swatchRefresh() -> Any: ...
def switchTable(*args, **kwargs) -> Any: ...
def symbolButton(edit: bool, query: bool, annotation: str, command: Callable, dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enableKeyboardFocus: bool, enable: bool, exists: bool, fullPathName: bool, height: int, image: str, isObscured: bool, manage: bool, noBackground: bool, numberOfPopupMenus: bool, parent: str, popupMenuArray: bool, preventOverride: bool, statusBarMessage: str, useTemplate: str, visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def symbolCheckBox(edit: bool, query: bool, annotation: str, changeCommand: Callable, disableOffImage: str, dragCallback: Callable, disableOnImage: str, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enableKeyboardFocus: bool, enable: bool, exists: bool, fullPathName: bool, height: int, image: str, innerMargin: bool, isObscured: bool, ltVersion: str, manage: bool, noBackground: bool, numberOfPopupMenus: bool, offCommand: Callable, offImage: str, onCommand: Callable, onImage: str, parent: str, popupMenuArray: bool, preventOverride: bool, statusBarMessage: str, useTemplate: str, value: bool, visibleChangeCommand: Callable, version: str, visible: bool, width: int) -> Any: ...
def symmetricModelling(edit: bool, query: bool, about: str, allowPartial: bool, axis: str, preserveSeam: int, reset: bool, symmetry: int, seamFalloffCurve: str, seamTolerance: float, tolerance: float, topoSymmetry: bool) -> Any: ...
def syncSculptCache(*args, **kwargs) -> Any: ...
def sysFile(copy: str, delete: bool, makeDir: bool, move: str, removeEmptyDir: bool, rename: str) -> Any: ...
def tabLayout(edit: bool, query: bool, annotation: str, borderStyle: str, childArray: bool, changeCommand: Callable, childResizable: bool, closeTab: int, closeTabCommand: Callable, doubleClickCommand: Callable, dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enableKeyboardFocus: bool, enable: bool, exists: bool, fullPathName: bool, height: int, horizontalScrollBarThickness: int, image: str, innerMarginHeight: int, innerMarginWidth: int, isObscured: bool, imageVisible: bool, manage: bool, minChildWidth: int, moveTab: Tuple[int, int], noBackground: bool, numberOfChildren: bool, numberOfPopupMenus: bool, newTabCommand: Callable, parent: str, popupMenuArray: bool, postMenuCommand: Callable, preventOverride: bool, preSelectCommand: Callable, statusBarMessage: str, selectCommand: Callable, scrollable: bool, showNewTab: bool, selectTab: str, scrollableTabs: bool, selectTabIndex: int, tabsClosable: bool, tabLabel: List[Tuple[str, str]], tabLabelIndex: List[Tuple[int, str]], tabPosition: str, tabTooltip: List[Tuple[str, str]], tabTooltipIndex: List[Tuple[int, str]], tabsVisible: bool, useTemplate: str, visibleChangeCommand: Callable, visible: bool, verticalScrollBarThickness: int, width: int) -> Any: ...
def tangentConstraint(edit: bool, query: bool, name: str, remove: bool, targetList: bool, weight: float, weightAliasList: bool, worldUpObject: str, worldUpType: str) -> Any: ...
def targetWeldCtx(*args, **kwargs) -> Any: ...
def tension(edit: bool, query: bool, after: bool, afterReference: bool, before: bool, deformerTools: bool, envelope: float, exclusive: str, frontOfChain: bool, geometry: List[str], geometryIndices: bool, includeHiddenSelections: bool, ignoreSelected: bool, inwardConstraint: float, name: str, outwardConstraint: float, parallel: bool, pinBorderVertices: bool, prune: bool, smoothingIterations: int, split: bool, smoothingStep: float, useComponentTags: bool) -> Any: ...
def testPa() -> Any: ...
def testPassContribution(renderLayer: str, renderPass: str) -> Any: ...
def texCutContext(*args, **kwargs) -> Any: ...
def texLatticeDeformContext(*args, **kwargs) -> Any: ...
def texManipContext(*args, **kwargs) -> Any: ...
def texMoveContext(*args, **kwargs) -> Any: ...
def texMoveUVShellContext(*args, **kwargs) -> Any: ...
def texRotateContext(*args, **kwargs) -> Any: ...
def texScaleContext(*args, **kwargs) -> Any: ...
def texSculptCacheContext(*args, **kwargs) -> Any: ...
def texSculptCacheSync(*args, **kwargs) -> Any: ...
def texSelectContext(*args, **kwargs) -> Any: ...
def texSelectShortestPathCtx(*args, **kwargs) -> Any: ...
def texSmoothContext(*args, **kwargs) -> Any: ...
def texSmudgeUVContext(*args, **kwargs) -> Any: ...
def texTweakUVContext(*args, **kwargs) -> Any: ...
def texWinToolCtx(*args, **kwargs) -> Any: ...
def text(edit: bool, query: bool, align: str, annotation: str, dragCallback: Callable, dropCallback: Callable, dropRectCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enableKeyboardFocus: bool, enable: bool, exists: bool, font: str, fullPathName: bool, height: int, hyperlink: bool, isObscured: bool, label: str, manage: bool, noBackground: bool, numberOfPopupMenus: bool, parent: str, popupMenuArray: bool, preventOverride: bool, recomputeSize: bool, statusBarMessage: str, useTemplate: str, visibleChangeCommand: Callable, visible: bool, width: int, wordWrap: bool) -> Any: ...
def textCurves(edit: bool, query: bool, caching: bool, constructionHistory: bool, deprecatedFontName: bool, font: str, frozen: bool, name: str, nodeState: int, object: bool, text: str) -> Any: ...
def textField(edit: bool, query: bool, alwaysInvokeEnterCommandOnReturn: bool, annotation: str, changeCommand: Callable, disableButtons: bool, disableClearButton: bool, dragCallback: Callable, disableHistoryButton: bool, drawInactiveFrame: bool, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enterCommand: Callable, editable: bool, enableKeyboardFocus: bool, enable: bool, exists: bool, fileName: str, font: str, fullPathName: bool, height: int, isObscured: bool, insertionPosition: int, insertText: str, manage: bool, noBackground: bool, numberOfPopupMenus: bool, parent: str, placeholderText: str, popupMenuArray: bool, preventOverride: bool, receiveFocusCommand: Callable, statusBarMessage: str, searchField: bool, textChangedCommand: Callable, text: str, useTemplate: str, visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def textFieldButtonGrp(edit: bool, query: bool, adjustableColumn2: int, adjustableColumn3: int, adjustableColumn4: int, adjustableColumn5: int, adjustableColumn6: int, adjustableColumn: int, annotation: str, buttonCommand: Callable, buttonLabel: str, columnAlign: List[Tuple[int, str]], changeCommand: Callable, columnAlign2: Tuple[str, str], columnOffset2: Tuple[int, int], columnAttach2: Tuple[str, str], columnWidth: List[Tuple[int, int]], columnWidth1: int, columnWidth2: Tuple[int, int], dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableButton: bool, enableBackground: bool, editable: bool, enableKeyboardFocus: bool, enable: bool, exists: bool, forceChangeCommand: bool, fileName: str, fullPathName: bool, height: int, isObscured: bool, insertionPosition: int, insertText: str, label: str, manage: bool, noBackground: bool, numberOfPopupMenus: bool, parent: str, placeholderText: str, popupMenuArray: bool, preventOverride: bool, statusBarMessage: str, textChangedCommand: Callable, text: str, useTemplate: str, visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def textFieldGrp(edit: bool, query: bool, adjustableColumn2: int, adjustableColumn3: int, adjustableColumn4: int, adjustableColumn5: int, adjustableColumn6: int, adjustableColumn: int, annotation: str, columnAlign: List[Tuple[int, str]], changeCommand: Callable, columnAlign2: Tuple[str, str], columnOffset2: Tuple[int, int], columnAttach2: Tuple[str, str], columnWidth: List[Tuple[int, int]], columnWidth1: int, columnWidth2: Tuple[int, int], dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, editable: bool, enableKeyboardFocus: bool, enable: bool, exists: bool, forceChangeCommand: bool, fileName: str, fullPathName: bool, height: int, isObscured: bool, insertionPosition: int, insertText: str, label: str, manage: bool, noBackground: bool, numberOfPopupMenus: bool, parent: str, placeholderText: str, popupMenuArray: bool, preventOverride: bool, statusBarMessage: str, textChangedCommand: Callable, text: str, useTemplate: str, visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def textManip(*args, **kwargs) -> Any: ...
def textScrollList(edit: bool, query: bool, append: List[str], allowAutomaticSelection: bool, allItems: bool, allowSorting: List[bool], allowMultiSelection: bool, annotation: str, appendPosition: List[Tuple[int, str]], appendWithToolTip: List[Tuple[str, str]], deselectAll: bool, doubleClickCommand: Callable, dragCallback: Callable, deselectItem: List[str], deselectIndexedItem: List[int], deleteKeyCommand: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enableKeyboardFocus: bool, enable: bool, exists: bool, font: str, fullPathName: bool, height: int, isObscured: bool, lineFont: List[Tuple[int, str]], manage: bool, noBackground: bool, numberOfItems: bool, numberOfPopupMenus: bool, numberOfRows: int, numberOfSelectedItems: bool, parent: str, popupMenuArray: bool, preventOverride: bool, removeAll: bool, removeItem: List[str], removeIndexedItem: List[int], statusBarMessage: str, selectCommand: Callable, showIndexedItem: int, selectItem: List[str], selectIndexedItem: List[int], setUniformItemSize: bool, selectUniqueTagItem: List[str], useTemplate: str, uniqueTag: List[str], visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def textureDeformer(edit: bool, query: bool, after: bool, afterReference: bool, before: bool, direction: str, deformerTools: bool, envelope: float, exclusive: str, frontOfChain: bool, geometry: List[str], geometryIndices: bool, includeHiddenSelections: bool, ignoreSelected: bool, name: str, offset: float, parallel: bool, prune: bool, pointSpace: str, strength: float, split: bool, useComponentTags: bool, vectorSpace: str) -> Any: ...
def textureLassoContext(edit: bool, query: bool, history: bool, drawClosed: bool, exists: bool, image1: str, image2: str, image3: str, name: str) -> Any: ...
def texturePlacementContext(*args, **kwargs) -> Any: ...
def textureWindow(edit: bool, query: bool, activeSelectionOnTop: bool, checkerColorMode: int, checkerDensity: int, checkerDrawTileLabels: bool, checkerGradientOverlay: bool, clearImage: bool, cmEnabled: bool, capture: str, captureSequenceNumber: int, control: bool, divisions: int, drawAxis: bool, displayAxes: bool, doubleBuffer: bool, displayCheckered: bool, displayDivisionLines: bool, displayDistortion: bool, displayGridLines: bool, displayImage: int, displayIsolateSelectHUD: bool, displayLabels: bool, displayOverlappingUVCountHUD: bool, displayUsedPercentageHUD: bool, distortionPerObject: bool, displayPreselection: bool, displayReversedUVCountHUD: bool, displayUVShellCountHUD: bool, displaySolidMap: bool, drawSubregions: bool, displayStyle: str, defineTemplate: str, distortionAlpha: float, displayTextureBorder: bool, docTag: str, displayUVStatisticsHUD: bool, displayUVPositionHUD: bool, exists: bool, exposure: float, filter: str, frameAll: bool, forceMainConnection: str, forceRebake: bool, frameSelected: bool, gamma: float, highlightConnection: str, imageDisplay: bool, imageDim: bool, internalFaces: bool, imageNames: bool, imageRatio: bool, imageNumber: int, imagePixelSnap: bool, imageRatioValue: float, imageSize: bool, isolateSelectSetUpdated: bool, imageUnfiltered: bool, lockMainConnection: bool, loadImage: str, labelPosition: str, multiColorAlpha: float, mainListConnection: str, maxResolution: int, numberOfImages: int, nbImages: bool, numberOfTextures: int, numUvSets: bool, nextView: bool, parent: str, panel: str, previousView: bool, reset: bool, removeAllImages: bool, rendererString: str, refresh: bool, relatedFaces: bool, removeImage: bool, realSize: bool, size: float, solidMap3dView: bool, scaleBlue: float, singleBuffer: bool, solidMapColorSeed: int, scaleGreen: float, saveImage: bool, selectInternalFaces: bool, selectionConnection: str, spacing: float, solidMapPerShell: bool, scaleRed: float, selectRelatedFaces: bool, style: int, stateString: bool, setUvSet: int, textureBorder3dView: bool, textureBorderWidth: int, toggleExposure: bool, toggleGamma: bool, toggle: bool, tileLabels: bool, textureNumber: int, textureNames: bool, useFaceGroup: bool, unlockMainConnection: bool, unParent: bool, updateMainConnection: bool, useTemplate: str, uvSets: bool, viewPortImage: bool, viewTransformName: str, writeImage: str) -> Any: ...
def threadCount(query: bool, numberOfThreads: int) -> Any: ...
def threePointArcCtx(*args, **kwargs) -> Any: ...
def thumbnailCaptureComponent(query: bool, capture: bool, closeCurrentSession: bool, capturedFrameCount: bool, delete: bool, endFrame: int, fileDialogCallback: str, fileDialogProcessing: bool, isSessionOpened: bool, launchedFromOptionsBox: bool, previewPath: str, removeProjectThumbnail: str, save: str, startFrame: int, selectedFileName: bool) -> Any: ...
def timeCode(edit: bool, query: bool, mayaStartFrame: float, productionStartFrame: float, productionStartHour: float, productionStartMinute: float, productionStartSecond: float) -> Any: ...
def timeControl(edit: bool, query: bool, animCurveNames: bool, animLayerFilterOptions: str, annotation: str, animLayerShowWeight: bool, beginScrub: bool, dragCallback: Callable, dropCallback: Callable, displaySound: bool, defineTemplate: str, docTag: str, enableBackground: bool, enableKeyboardFocus: bool, enable: bool, endScrub: bool, exists: bool, forceRedraw: bool, fullPathName: bool, forceRefresh: bool, greasePencilSequenceNames: bool, globalTime: bool, height: int, isObscured: bool, manage: bool, mainListConnection: str, noBackground: bool, numberOfPopupMenus: bool, outsideSpacing: int, parent: str, pressCommand: Callable, popupMenuArray: bool, preventOverride: bool, resample: bool, rangeArray: bool, releaseCommand: Callable, repeatChunkSize: float, range: bool, repeatOnHold: bool, rangeVisible: bool, sound: str, statusBarMessage: str, showGreaseFrames: str, showKeys: str, showKeysCombined: bool, snap: bool, tickSize: int, tickSpan: int, useTemplate: str, visibleChangeCommand: Callable, visible: bool, width: int, waveform: str) -> Any: ...
def timeEditor(*args, **kwargs) -> Any: ...
def timeEditorAnimSource(*args, **kwargs) -> Any: ...
def timeEditorBakeClips(*args, **kwargs) -> Any: ...
def timeEditorClip(*args, **kwargs) -> Any: ...
def timeEditorClipLayer(*args, **kwargs) -> Any: ...
def timeEditorClipOffset(*args, **kwargs) -> Any: ...
def timeEditorComposition(*args, **kwargs) -> Any: ...
def timeEditorPanel(*args, **kwargs) -> Any: ...
def timeEditorTracks(*args, **kwargs) -> Any: ...
def timeField(edit: bool, query: bool, annotation: str, changeCommand: Callable, dragCommand: Callable, dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enterCommand: Callable, editable: bool, enableKeyboardFocus: bool, enable: bool, exists: bool, fullPathName: bool, height: int, isObscured: bool, manage: bool, noBackground: bool, numberOfPopupMenus: bool, parent: str, popupMenuArray: bool, preventOverride: bool, precision: int, receiveFocusCommand: Callable, step: int, statusBarMessage: str, useTemplate: str, value: int, visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def timeFieldGrp(edit: bool, query: bool, adjustableColumn2: int, adjustableColumn3: int, adjustableColumn4: int, adjustableColumn5: int, adjustableColumn6: int, adjustableColumn: int, annotation: str, columnAlign: List[Tuple[int, str]], changeCommand: Callable, columnAlign2: Tuple[str, str], columnOffset2: Tuple[int, int], columnAttach2: Tuple[str, str], columnWidth: List[Tuple[int, int]], columnWidth1: int, columnWidth2: Tuple[int, int], dragCommand: Callable, dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enableKeyboardFocus: bool, extraLabel: str, enable: bool, enable1: bool, enable2: bool, enable3: bool, enable4: bool, exists: bool, fullPathName: bool, height: int, isObscured: bool, label: str, manage: bool, noBackground: bool, numberOfFields: int, numberOfPopupMenus: bool, parent: str, popupMenuArray: bool, preventOverride: bool, precision: int, step: float, statusBarMessage: str, useTemplate: str, value1: float, value2: float, value3: float, value4: float, visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def timePort(edit: bool, query: bool, annotation: str, dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enableKeyboardFocus: bool, enable: bool, exists: bool, fullPathName: bool, globalTime: bool, height: int, isObscured: bool, manage: bool, noBackground: bool, numberOfPopupMenus: bool, parent: str, popupMenuArray: bool, preventOverride: bool, statusBarMessage: str, snap: bool, useTemplate: str, visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def timeRangeInfo(time: List[Incomplete]) -> Any: ...
def timeSliderCustomDraw(edit: bool, query: bool, clearPrimitives: bool, deregister: int, height: int, layer: int, location: int, priority: int, registerAbove: str, registerBelow: str, registerOn: Tuple[str, int], visible: bool) -> Any: ...
def timeWarp(edit: bool, query: bool, deleteFrame: int, frame: List[float], g: bool, interpType: Tuple[int, str], moveFrame: Tuple[int, float]) -> Any: ...
def timer(endTimer: bool, lapTime: bool, name: str, startTimer: bool) -> Any: ...
def timerX(startTime: float) -> Any: ...
def toggle(query: bool, above: bool, below: bool, boundary: bool, boundingBox: bool, controlVertex: bool, doNotWrite: bool, editPoint: bool, extent: bool, facet: bool, geometry: bool, gl: bool, hull: bool, highPrecisionNurbs: bool, localAxis: bool, latticePoint: bool, latticeShape: bool, newCurve: bool, newPolymesh: bool, normal: bool, newSurface: bool, origin: bool, pointDisplay: bool, pointFacet: bool, point: bool, rotatePivot: bool, surfaceFace: bool, selectHandle: bool, scalePivot: bool, state: bool, template: bool, uvCoords: bool, vertex: bool) -> Any: ...
def toggleAxis(query: bool, origin: bool, view: bool) -> Any: ...
def toggleDisplacement() -> Any: ...
def toggleWindowVisibility() -> Any: ...
def tolerance(query: bool, angular: float, linear: float) -> Any: ...
def toolBar(edit: bool, query: bool, area: str, allowedArea: List[str], annotation: str, content: str, dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enableKeyboardFocus: bool, enable: bool, exists: bool, fullPathName: bool, height: int, isObscured: bool, label: str, manage: bool, noBackground: bool, numberOfPopupMenus: bool, parent: str, popupMenuArray: bool, preventOverride: bool, statusBarMessage: str, useTemplate: str, visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def toolButton(edit: bool, query: bool, allowMultipleTools: bool, annotation: str, changeCommand: Callable, collection: str, doubleClickCommand: Callable, dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enableKeyboardFocus: bool, enable: bool, exists: bool, fullPathName: bool, height: int, image1: str, image2: str, image3: str, isObscured: bool, imageOverlayLabel: str, ltVersion: str, manage: bool, noBackground: bool, numberOfPopupMenus: bool, offCommand: Callable, onCommand: Callable, parent: str, popupIndicatorVisible: bool, popupMenuArray: bool, preventOverride: bool, statusBarMessage: str, select: bool, style: str, tool: List[str], toolArray: bool, toolCount: bool, toolImage1: List[Tuple[str, str]], toolImage2: List[Tuple[str, str]], toolImage3: List[Tuple[str, str]], useTemplate: str, visibleChangeCommand: Callable, version: str, visible: bool, width: int) -> Any: ...
def toolCollection(edit: bool, query: bool, collectionItemArray: bool, defineTemplate: str, exists: bool, gl: bool, numberOfCollectionItems: bool, parent: str, select: str, useTemplate: str) -> Any: ...
def toolDropped() -> Any: ...
def toolHasOptions() -> Any: ...
def toolPropertyWindow(edit: bool, query: bool, field: str, helpButton: str, icon: str, inMainWindow: bool, location: str, noviceMode: bool, resetButton: str, refresh: bool, restore: bool, selectCommand: str, showCommand: str) -> Any: ...
def torus(edit: bool, query: bool, caching: bool, constructionHistory: bool, degree: int, endSweep: float, frozen: bool, heightRatio: float, minorSweep: float, name: str, nodeState: int, spans: int, object: bool, polygon: int, radius: float, sections: int, startSweep: float, tolerance: float, useTolerance: bool) -> Any: ...
def track(down: float, left: float, right: float, upDistance01: float, upDistance02: float) -> Any: ...
def trackCtx(edit: bool, query: bool, alternateContext: bool, history: bool, exists: bool, image1: str, image2: str, image3: str, name: str, trackGeometry: bool, toolName: str, trackScale: float) -> Any: ...
def transferAttributes(edit: bool, query: bool, after: bool, afterReference: bool, before: bool, colorBorders: int, transferColors: int, deformerTools: bool, exclusive: str, frontOfChain: bool, flipUVs: int, geometry: List[str], geometryIndices: bool, includeHiddenSelections: bool, ignoreSelected: bool, matchChoice: int, name: str, transferNormals: int, parallel: bool, transferPositions: int, prune: bool, sourceColorSet: str, searchMethod: int, split: bool, sampleSpace: int, searchScaleX: float, searchScaleY: float, searchScaleZ: float, sourceUvSpace: str, sourceUvSet: str, targetColorSet: str, targetUvSpace: str, targetUvSet: str, useComponentTags: bool, transferUVs: int) -> Any: ...
def transferShadingSets(edit: bool, query: bool, searchMethod: int, sampleSpace: int) -> Any: ...
def transformCompare(root: bool) -> Any: ...
def transformLimits(edit: bool, query: bool, remove: bool, rotationX: Tuple[float, float], rotationY: Tuple[float, float], rotationZ: Tuple[float, float], scaleX: Tuple[float, float], scaleY: Tuple[float, float], scaleZ: Tuple[float, float], translationX: Tuple[float, float], translationY: Tuple[float, float], translationZ: Tuple[float, float]) -> Any: ...
def translator(query: bool, fileCompression: str, defaultFileRule: bool, defaultOptions: str, extension: bool, filter: bool, list: bool, loaded: bool, optionsScript: bool, objectType: bool, readSupport: bool, writeSupport: bool) -> Any: ...
def treeLister(edit: bool, query: bool, addFavorite: List[str], annotation: str, clearContents: bool, collapsePath: List[str], dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, executeItem: str, enableKeyboardFocus: bool, enable: bool, expandPath: List[str], expandToDepth: int, exists: bool, favoritesCallback: Callable, favoritesList: bool, fullPathName: bool, height: int, isObscured: bool, manage: bool, noBackground: bool, numberOfPopupMenus: bool, parent: str, popupMenuArray: bool, preventOverride: bool, refreshCommand: Callable, removeItem: List[str], removeFavorite: List[str], resultsPathUnderCursor: bool, statusBarMessage: str, selectPath: List[str], useTemplate: str, visibleChangeCommand: Callable, visible: bool, vnnString: bool, width: int) -> Any: ...
def treeView(edit: bool, query: bool, attachButtonRight: int, allowDragAndDrop: bool, allowHiddenParents: bool, addItem: List[Tuple[str, str]], allowMultiSelection: bool, annotation: str, allowReparenting: bool, contextMenuCommand: Callable, clearSelection: bool, dragAndDropCommand: Callable, itemDblClickCommand2: Callable, dragCallback: Callable, displayLabel: List[Tuple[str, str]], displayLabelSuffix: List[Tuple[str, str]], dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, expandCollapseCommand: Callable, enableKeyboardFocus: bool, editLabelCommand: Callable, enable: bool, enableKeys: bool, enableLabel: Tuple[str, int], exists: bool, flatButton: int, fontFace: Tuple[str, int], font: Tuple[str, str], fullPathName: bool, height: int, hideButtons: bool, itemAnnotation: Tuple[str, str], itemDblClickCommand: Callable, isObscured: bool, itemRenamedCommand: Callable, manage: bool, numberOfButtons: int, noBackground: bool, numberOfPopupMenus: bool, parent: str, pressCommand: List[Tuple[int, Callable]], popupMenuArray: bool, preventOverride: bool, removeAll: bool, removeItem: str, rightPressCommand: List[Tuple[int, Callable]], reverseTreeOrder: bool, statusBarMessage: str, selectCommand: Callable, selectionChangedCommand: Callable, showItem: str, select: Tuple[str, int], useTemplate: str, visibleChangeCommand: Callable, visible: bool, width: int) -> Any: ...
def trim(edit: bool, query: bool, caching: bool, constructionHistory: bool, frozen: bool, locatorU: List[float], locatorV: List[float], name: str, nodeState: int, object: bool, replaceOriginal: bool, shrink: bool, selected: int, tolerance: float) -> Any: ...
def trimCtx(*args, **kwargs) -> Any: ...
def truncateFluidCache(edit: bool, query: bool) -> Any: ...
def truncateHairCache(edit: bool, query: bool) -> Any: ...
def tumble(azimuthAngle: float, elevationAngle: float, localTumble: int, rotationAngles: Tuple[float, float]) -> Any: ...
def tumbleCtx(edit: bool, query: bool, alternateContext: bool, autoOrthoConstrain: bool, autoSetPivot: bool, history: bool, exists: bool, image1: str, image2: str, image3: str, localTumble: int, name: str, orthoLock: bool, orthoStep: float, objectTumble: bool, toolName: str, tumbleScale: float) -> Any: ...
def turbulence(edit: bool, query: bool, attenuation: float, frequency: float, magnitude: float, maxDistance: float, name: str, noiseLevel: int, noiseRatio: float, phase: float, perVertex: bool, phaseX: float, phaseY: float, phaseZ: float, torusSectionRadius: float, volumeExclusion: bool, volumeShape: str, volumeSweep: float) -> Any: ...
def twoPointArcCtx(*args, **kwargs) -> Any: ...
def ubercam() -> Any: ...
def uiTemplate(edit: bool, query: bool, defineTemplate: str, exists: bool, useTemplate: str) -> Any: ...
def unapplyOverride() -> Any: ...
def unassignInputDevice(*args, **kwargs) -> Any: ...
def undo() -> Any: ...
def undoInfo(query: bool, closeChunk: bool, chunkName: str, infinity: bool, length: int, openChunk: bool, printQueue: bool, printRedoQueue: bool, redoName: str, redoQueueEmpty: bool, state: bool, stateWithoutFlush: bool, undoName: str, undoQueueEmpty: bool) -> Any: ...
def unfold(applyToShell: bool, areaWeight: float, globalBlend: float, globalMethodBlend: float, iterations: int, optimizeAxis: int, pinSelected: bool, pinUvBorder: bool, scale: float, stoppingThreshold: float, useScale: bool) -> Any: ...
def ungroup(absolute: bool, parent: str, relative: bool, world: bool) -> Any: ...
def uniform(edit: bool, query: bool, attenuation: float, directionX: float, directionY: float, directionZ: float, magnitude: float, maxDistance: float, name: str, perVertex: bool, torusSectionRadius: float, volumeExclusion: bool, volumeShape: str, volumeSweep: float) -> Any: ...
def unknownNode(query: bool, plugin: bool, realClassName: bool, realClassTag: bool) -> Any: ...
def unknownPlugin(query: bool, dataTypes: bool, list: bool, nodeTypes: bool, remove: bool, version: bool) -> Any: ...
def unloadPlugin(addCallback: Callable, force: bool, removeCallback: Callable) -> Any: ...
def untangleUV(mapBorder: str, maxRelaxIterations: int, pinBorder: bool, pinSelected: bool, pinUnselected: bool, relax: str, relaxTolerance: float, shapeDetail: float) -> Any: ...
def untrim(edit: bool, query: bool, untrimAll: bool, caching: bool, constructionHistory: bool, curveOnSurface: bool, frozen: bool, name: str, noChanges: bool, nodeState: int, object: bool, replaceOriginal: bool) -> Any: ...
def upAxis(query: bool, axis: str, rotateView: bool) -> Any: ...
def userCtx(edit: bool, query: bool, history: bool, editCommand: Callable, editPrompt: str, exists: bool, finalCommand: str, selectionFlag: List[Tuple[int, str]], image1: str, image2: str, image3: str, name: str, noSelectionPrompt: List[Tuple[int, str]], selectionCount: List[Tuple[int, int]], selectionMask: List[Tuple[int, str]], selectionPrompt: List[str]) -> Any: ...
def uvLink(b: bool, isValid: bool, make: bool, query: bool, queryObject: str, texture: str, uvSet: str) -> Any: ...
def uvSnapshot(antiAliased: bool, blueColor: int, entireUVRange: bool, fileFormat: str, greenColor: int, name: str, overwrite: bool, redColor: int, uMin: float, uMax: float, uvSetName: str, vMin: float, vMax: float, xResolution: int, yResolution: int) -> Any: ...
def view2dToolCtx(*args, **kwargs) -> Any: ...
def viewCamera(move: str, sideView: bool, topView: bool) -> Any: ...
def viewClipPlane(query: bool, autoClipPlane: bool, farClipPlane: float, nearClipPlane: float, surfacesOnly: bool) -> Any: ...
def viewFit(allObjects: bool, animate: bool, center: bool, fitFactor: float, noChildren: bool, namespace: str, panel: str) -> Any: ...
def viewHeadOn() -> Any: ...
def viewLookAt() -> Any: ...
def viewManip(*args, **kwargs) -> Any: ...
def viewPlace(animate: bool, fieldOfView: float, ortho: bool, perspective: bool) -> Any: ...
def viewSet(query: bool, animate: bool, back: bool, bottom: bool, front: bool, fitFactor: float, home: bool, keepRenderSettings: bool, leftSide: bool, namespace: str, nextView: bool, persp: bool, previousView: bool, rightSide: bool, side: bool, viewNegativeX: bool, viewNegativeY: bool, viewNegativeZ: bool, viewX: bool, viewY: bool, viewZ: bool) -> Any: ...
def visor(*args, **kwargs) -> Any: ...
def volumeAxis(edit: bool, query: bool, awayFromCenter: float, awayFromAxis: float, alongAxis: float, aroundAxis: float, attenuation: float, directionalSpeed: float, detailTurbulence: float, directionX: float, directionY: float, directionZ: float, invertAttenuation: bool, magnitude: float, maxDistance: float, name: str, perVertex: bool, turbulenceFrequencyX: float, turbulenceFrequencyY: float, turbulenceFrequencyZ: float, turbulenceOffsetX: float, turbulenceOffsetY: float, turbulenceOffsetZ: float, turbulence: float, turbulenceSpeed: float, torusSectionRadius: float, volumeExclusion: bool, volumeShape: str, volumeSweep: float) -> Any: ...
def volumeBind(edit: bool, query: bool, influence: str, name: str) -> Any: ...
def vortex(edit: bool, query: bool, attenuation: float, axisX: float, axisY: float, axisZ: float, magnitude: float, maxDistance: float, name: str, perVertex: bool, torusSectionRadius: float, volumeExclusion: bool, volumeShape: str, volumeSweep: float) -> Any: ...
def waitCursor(query: bool, state: bool) -> Any: ...
def walkCtx(edit: bool, query: bool, alternateContext: bool, history: bool, exists: bool, image1: str, image2: str, image3: str, name: str, toolName: str, crouchCount: float, walkHeight: float, walkSpeed: float, walkSensitivity: float, walkToolHud: bool) -> Any: ...
def warnUserDialog(addInfo: Tuple[str, str], message: str, title: str) -> Any: ...
def warning(noContext: bool, showLineNumber: bool) -> Any: ...
def webBrowser(edit: bool, query: bool, annotation: str, back: bool, command: str, dragCallback: Callable, dropCallback: Callable, defineTemplate: str, docTag: str, enableBackground: bool, enableKeyboardFocus: bool, enable: bool, exists: bool, find: str, fullPathName: bool, forward: bool, height: int, home: bool, isObscured: bool, manage: bool, matchCase: bool, matchWholeWord: bool, noBackground: bool, numberOfPopupMenus: bool, parent: str, popupMenuArray: bool, preventOverride: bool, reload: bool, statusBarMessage: str, searchForward: bool, stop: bool, urlChangedCb: str, openURL: str, useTemplate: str, visibleChangeCommand: Callable, visible: bool, width: int, wrap: bool) -> Any: ...
def webBrowserPrefs(edit: bool, query: bool, preference: Tuple[str, str]) -> Any: ...
def weightsColor(*args, **kwargs) -> Any: ...
def whatsNewHighlight(query: bool, highlightOn: bool, showStartupDialog: bool) -> Any: ...
def window(edit: bool, query: bool, closeCommand: Callable, dockCorner: List[Tuple[str, str]], dockingLayout: str, dockStation: bool, defineTemplate: str, docTag: str, exists: bool, frontWindow: bool, height: int, iconify: bool, iconName: str, interactivePlacement: bool, leftEdge: int, menuArray: bool, menuBar: bool, menuBarResize: bool, menuBarVisible: bool, menuBarCornerWidget: Tuple[str, str], menuIndex: Tuple[str, int], mainMenuBar: bool, minimizeButton: bool, minimizeCommand: Callable, mainWindow: bool, maximizeButton: bool, nestedDockingEnabled: bool, numberOfMenus: bool, parent: str, restoreCommand: Callable, retain: bool, resizeToFitChildren: bool, sizeable: bool, state: str, title: str, titleBar: bool, titleBarMenu: bool, topEdge: int, toolbox: bool, topLeftCorner: Tuple[int, int], useTemplate: str, visible: bool, width: int, widthHeight: Tuple[int, int]) -> Any: ...
def windowPref(edit: bool, query: bool, enableAll: bool, exists: bool, height: int, loadAll: bool, leftEdge: int, maximized: bool, parentMain: bool, remove: bool, removeAll: bool, restoreMainWindowState: str, saveAll: bool, saveMainWindowState: str, topEdge: int, topLeftCorner: Tuple[int, int], width: int, widthHeight: Tuple[int, int]) -> Any: ...
def wire(edit: bool, query: bool, after: bool, afterReference: bool, before: bool, crossingEffect: float, dropoffDistance: List[Tuple[int, float]], deformerTools: bool, envelope: float, exclusive: str, frontOfChain: bool, geometry: List[str], geometryIndices: bool, groupWithBase: bool, holder: List[Tuple[int, str]], includeHiddenSelections: bool, ignoreSelected: bool, localInfluence: float, name: str, parallel: bool, prune: bool, split: bool, useComponentTags: bool, wire: List[str], wireCount: int) -> Any: ...
def wireContext(*args, **kwargs) -> Any: ...
def workspace(query: bool, active: bool, baseWorkspace: str, create: str, directory: str, expandName: str, filter: bool, fullName: bool, fileRule: Tuple[str, str], fileRuleEntry: str, fileRuleList: bool, list: bool, listFullWorkspaces: bool, listWorkspaces: bool, newWorkspace: bool, openWorkspace: bool, objectType: Tuple[str, str], objectTypeEntry: str, objectTypeList: bool, projectPath: str, rootDirectory: bool, removeFileRuleEntry: str, renderType: Tuple[str, str], renderTypeEntry: str, renderTypeList: bool, removeVariableEntry: str, saveWorkspace: bool, shortName: bool, update: bool, updateAll: bool, variable: Tuple[str, str], variableEntry: str, variableList: bool) -> Any: ...
def workspaceControl(edit: bool, query: bool, closeCommand: Callable, close: bool, collapse: bool, checksPlugins: bool, deleteLater: bool, defineTemplate: str, dockToControl: Tuple[str, str], duplicatable: bool, exists: bool, floating: bool, height: bool, heightProperty: str, horizontal: bool, initCallback: str, initialHeight: int, initialWidth: int, label: str, loadImmediately: bool, minimumHeight: int, minimumWidth: int, r: bool, requiredControl: List[str], requiredPlugin: List[str], restore: bool, resizeHeight: int, resizeWidth: int, retain: bool, stateString: str, tabToControl: Tuple[str, int], uiScript: Callable, useTemplate: str, visibleChangeCommand: Callable, visible: bool, width: bool, widthProperty: str) -> Any: ...
def workspaceControlState(edit: bool, query: bool, defaultTopLeftCorner: Tuple[int, int], defaultWidthHeight: Tuple[int, int], exists: bool, height: int, leftEdge: int, maximized: bool, remove: bool, topEdge: int, topLeftCorner: Tuple[int, int], width: int, widthHeight: Tuple[int, int]) -> Any: ...
def workspaceLayoutManager(edit: bool, query: bool, current: bool, delete: str, i: str, listLayouts: bool, listModuleLayouts: bool, listUserLayouts: bool, modified: str, parentWorkspaceControl: str, restoreMainWindowControls: bool, reset: bool, save: bool, saveAs: str, setCurrent: str, setCurrentCallback: str, setModifiedCallback: str, type: str) -> Any: ...
def workspacePanel(edit: bool, query: bool, defineTemplate: str, exists: bool, mainWindow: bool, useTemplate: str) -> Any: ...
def wrinkle(branchDepth: int, branchCount: int, crease: List[str], dropoffDistance: float, envelope: float, randomness: float, style: str, thickness: float, wrinkleCount: int, wrinkleIntensity: float) -> Any: ...
def wrinkleContext(*args, **kwargs) -> Any: ...
def writeTake(*args, **kwargs) -> Any: ...
def xform(query: bool, absolute: bool, boundingBox: bool, boundingBoxInvisible: bool, centerPivots: bool, centerPivotsOnComponents: bool, deletePriorHistory: bool, euler: bool, objectSpace: bool, preserve: bool, preserveUV: bool, relative: bool, reflectionAboutBBox: bool, reflectionAboutOrigin: bool, reflectionAboutX: bool, reflectionAboutY: bool, reflectionAboutZ: bool, reflection: bool, reflectionTolerance: float, rotateOrder: str, worldSpaceDistance: bool, worldSpace: bool, zeroTransformPivots: bool) -> Any: ...
def xformConstraint(edit: bool, query: bool, live: bool, alongNormal: bool, type: str) -> Any: ...
def xpmPicker(*args, **kwargs) -> Any: ...