from __future__ import annotations

# fmt: off
from typing import *
from typing_extensions import Self
from maya.OpenMaya import *
from maya.OpenMayaRender import *

if TYPE_CHECKING:
    from _typeshed import Incomplete


def M3dView_active3dView(*args: Any, **kwargs: Any) -> Any: ...
def M3dView_activeAffectedColor(*args: Any, **kwargs: Any) -> Any: ...
def M3dView_activeTemplateColor(*args: Any, **kwargs: Any) -> Any: ...
def M3dView_applicationShell(*args: Any, **kwargs: Any) -> Any: ...
def M3dView_backgroundColor(*args: Any, **kwargs: Any) -> Any: ...
def M3dView_backgroundColorBottom(*args: Any, **kwargs: Any) -> Any: ...
def M3dView_backgroundColorTop(*args: Any, **kwargs: Any) -> Any: ...
def M3dView_className(*args: Any, **kwargs: Any) -> Any: ...
def M3dView_displayStatus(*args: Any, **kwargs: Any) -> Any: ...
def M3dView_get3dView(*args: Any, **kwargs: Any) -> Any: ...
def M3dView_getM3dViewFromModelEditor(*args: Any, **kwargs: Any) -> Any: ...
def M3dView_getM3dViewFromModelPanel(*args: Any, **kwargs: Any) -> Any: ...
def M3dView_hiliteColor(*args: Any, **kwargs: Any) -> Any: ...
def M3dView_isBackgroundGradient(*args: Any, **kwargs: Any) -> Any: ...
def M3dView_leadColor(*args: Any, **kwargs: Any) -> Any: ...
def M3dView_liveColor(*args: Any, **kwargs: Any) -> Any: ...
def M3dView_numberOf3dViews(*args: Any, **kwargs: Any) -> Any: ...
def M3dView_referenceLayerColor(*args: Any, **kwargs: Any) -> Any: ...
def M3dView_scheduleRefreshAllViews(*args: Any, **kwargs: Any) -> Any: ...
def M3dView_templateColor(*args: Any, **kwargs: Any) -> Any: ...
def MDrawData_className(*args: Any, **kwargs: Any) -> Any: ...
def MDrawInfo_className(*args: Any, **kwargs: Any) -> Any: ...
def MDrawRequestQueue_className(*args: Any, **kwargs: Any) -> Any: ...
def MDrawRequest_className(*args: Any, **kwargs: Any) -> Any: ...
def MEvent_className(*args: Any, **kwargs: Any) -> Any: ...
def MExternalDropCallback_addCallback(*args: Any, **kwargs: Any) -> Any: ...
def MExternalDropCallback_removeCallback(*args: Any, **kwargs: Any) -> Any: ...
def MFeedbackLine_className(*args: Any, **kwargs: Any) -> Any: ...
def MFeedbackLine_clear(*args: Any, **kwargs: Any) -> Any: ...
def MFeedbackLine_setFormat(*args: Any, **kwargs: Any) -> Any: ...
def MFeedbackLine_setShowFeedback(*args: Any, **kwargs: Any) -> Any: ...
def MFeedbackLine_setTitle(*args: Any, **kwargs: Any) -> Any: ...
def MFeedbackLine_setValue(*args: Any, **kwargs: Any) -> Any: ...
def MFeedbackLine_showFeedback(*args: Any, **kwargs: Any) -> Any: ...
def MFnCircleSweepManip_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnCurveSegmentManip_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnDirectionManip_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnDiscManip_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnDistanceManip_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnFreePointTriadManip_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnManip3D_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnManip3D_deleteManipulator(*args: Any, **kwargs: Any) -> Any: ...
def MFnManip3D_drawPlaneHandles(*args: Any, **kwargs: Any) -> Any: ...
def MFnManip3D_globalSize(*args: Any, **kwargs: Any) -> Any: ...
def MFnManip3D_handleSize(*args: Any, **kwargs: Any) -> Any: ...
def MFnManip3D_lineSize(*args: Any, **kwargs: Any) -> Any: ...
def MFnManip3D_setDrawPlaneHandles(*args: Any, **kwargs: Any) -> Any: ...
def MFnManip3D_setGlobalSize(*args: Any, **kwargs: Any) -> Any: ...
def MFnManip3D_setHandleSize(*args: Any, **kwargs: Any) -> Any: ...
def MFnManip3D_setLineSize(*args: Any, **kwargs: Any) -> Any: ...
def MFnPointOnCurveManip_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnPointOnSurfaceManip_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnRotateManip_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnScaleManip_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnStateManip_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnToggleManip_className(*args: Any, **kwargs: Any) -> Any: ...
def MFnToolContext_className(*args: Any, **kwargs: Any) -> Any: ...
def MGraphEditorInfo_className(*args: Any, **kwargs: Any) -> Any: ...
def MHWShaderSwatchGenerator_createObj(*args: Any, **kwargs: Any) -> Any: ...
def MHWShaderSwatchGenerator_getSwatchBackgroundColor(*args: Any, **kwargs: Any) -> Any: ...
def MHWShaderSwatchGenerator_initialize(*args: Any, **kwargs: Any) -> Any: ...
def MManipData_className(*args: Any, **kwargs: Any) -> Any: ...
def MMaterialArray_className(*args: Any, **kwargs: Any) -> Any: ...
def MMaterial_className(*args: Any, **kwargs: Any) -> Any: ...
def MMaterial_defaultMaterial(*args: Any, **kwargs: Any) -> Any: ...
def MObjectListFilter_className(*args: Any, **kwargs: Any) -> Any: ...
def MObjectListFilter_deregisterFilter(*args: Any, **kwargs: Any) -> Any: ...
def MObjectListFilter_registerFilter(*args: Any, **kwargs: Any) -> Any: ...
def MPaintMessage_addVertexColorCallback(*args: Any, **kwargs: Any) -> Any: ...
def MPaintMessage_className(*args: Any, **kwargs: Any) -> Any: ...
def MPanelCanvasInfo_className(*args: Any, **kwargs: Any) -> Any: ...
def MProgressWindow_advanceProgress(*args: Any, **kwargs: Any) -> Any: ...
def MProgressWindow_className(*args: Any, **kwargs: Any) -> Any: ...
def MProgressWindow_endProgress(*args: Any, **kwargs: Any) -> Any: ...
def MProgressWindow_isCancelled(*args: Any, **kwargs: Any) -> Any: ...
def MProgressWindow_isInterruptable(*args: Any, **kwargs: Any) -> Any: ...
def MProgressWindow_progress(*args: Any, **kwargs: Any) -> Any: ...
def MProgressWindow_progressMax(*args: Any, **kwargs: Any) -> Any: ...
def MProgressWindow_progressMin(*args: Any, **kwargs: Any) -> Any: ...
def MProgressWindow_progressStatus(*args: Any, **kwargs: Any) -> Any: ...
def MProgressWindow_reserve(*args: Any, **kwargs: Any) -> Any: ...
def MProgressWindow_setInterruptable(*args: Any, **kwargs: Any) -> Any: ...
def MProgressWindow_setProgress(*args: Any, **kwargs: Any) -> Any: ...
def MProgressWindow_setProgressMax(*args: Any, **kwargs: Any) -> Any: ...
def MProgressWindow_setProgressMin(*args: Any, **kwargs: Any) -> Any: ...
def MProgressWindow_setProgressRange(*args: Any, **kwargs: Any) -> Any: ...
def MProgressWindow_setProgressStatus(*args: Any, **kwargs: Any) -> Any: ...
def MProgressWindow_setTitle(*args: Any, **kwargs: Any) -> Any: ...
def MProgressWindow_startProgress(*args: Any, **kwargs: Any) -> Any: ...
def MProgressWindow_title(*args: Any, **kwargs: Any) -> Any: ...
def MQtUtil_addWidgetToMayaLayout(*args: Any, **kwargs: Any) -> Any: ...
def MQtUtil_className(*args: Any, **kwargs: Any) -> Any: ...
def MQtUtil_createCursor(*args: Any, **kwargs: Any) -> Any: ...
def MQtUtil_createIcon(*args: Any, **kwargs: Any) -> Any: ...
def MQtUtil_createPixmap(*args: Any, **kwargs: Any) -> Any: ...
def MQtUtil_deregisterUIType(*args: Any, **kwargs: Any) -> Any: ...
def MQtUtil_dpiScale(*args: Any, **kwargs: Any) -> Any: ...
def MQtUtil_findControl(*args: Any, **kwargs: Any) -> Any: ...
def MQtUtil_findLayout(*args: Any, **kwargs: Any) -> Any: ...
def MQtUtil_findMenuItem(*args: Any, **kwargs: Any) -> Any: ...
def MQtUtil_findWindow(*args: Any, **kwargs: Any) -> Any: ...
def MQtUtil_fullName(*args: Any, **kwargs: Any) -> Any: ...
def MQtUtil_getCurrentParent(*args: Any, **kwargs: Any) -> Any: ...
def MQtUtil_getLayoutChildren(*args: Any, **kwargs: Any) -> Any: ...
def MQtUtil_getParent(*args: Any, **kwargs: Any) -> Any: ...
def MQtUtil_mainWindow(*args: Any, **kwargs: Any) -> Any: ...
def MQtUtil_nativeWindow(*args: Any, **kwargs: Any) -> Any: ...
def MQtUtil_newClocaleValidator(*args: Any, **kwargs: Any) -> Any: ...
def MQtUtil_registerUIType(*args: Any, **kwargs: Any) -> Any: ...
def MQtUtil_resourceGLContext(*args: Any, **kwargs: Any) -> Any: ...
def MQtUtil_toMString(*args: Any, **kwargs: Any) -> Any: ...
def MQtUtil_toQString(*args: Any, **kwargs: Any) -> Any: ...
def MSelectInfo_className(*args: Any, **kwargs: Any) -> Any: ...
def MTextureEditorDrawInfo_className(*args: Any, **kwargs: Any) -> Any: ...
def MToolsInfo_className(*args: Any, **kwargs: Any) -> Any: ...
def MToolsInfo_isDirty(*args: Any, **kwargs: Any) -> Any: ...
def MToolsInfo_resetDirtyFlag(*args: Any, **kwargs: Any) -> Any: ...
def MToolsInfo_setDirtyFlag(*args: Any, **kwargs: Any) -> Any: ...
def MUiMessage_add3dViewDestroyMsgCallback(*args: Any, **kwargs: Any) -> Any: ...
def MUiMessage_add3dViewPostMultipleDrawPassMsgCallback(*args: Any, **kwargs: Any) -> Any: ...
def MUiMessage_add3dViewPostRenderMsgCallback(*args: Any, **kwargs: Any) -> Any: ...
def MUiMessage_add3dViewPreMultipleDrawPassMsgCallback(*args: Any, **kwargs: Any) -> Any: ...
def MUiMessage_add3dViewPreRenderMsgCallback(*args: Any, **kwargs: Any) -> Any: ...
def MUiMessage_add3dViewRenderOverrideChangedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MUiMessage_add3dViewRendererChangedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MUiMessage_addCameraChangedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MUiMessage_addUiDeletedCallback(*args: Any, **kwargs: Any) -> Any: ...
def MUiMessage_className(*args: Any, **kwargs: Any) -> Any: ...
def boolPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
def charPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
cvar: swigvarlink
def doublePtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
def floatPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
def intPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
def shortPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
def uCharPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
def uIntPtr_frompointer(*args: Any, **kwargs: Any) -> Any: ...
class M3dView:
    def active3dView(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def activeAffectedColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def activeTemplateColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def applicationShell(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def backgroundColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def backgroundColorBottom(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def backgroundColorTop(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def beginGL(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def beginProjMatrixOverride(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def beginSelect(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def beginXorDrawing(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def colorAtIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def colorMask(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deviceContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def devicePixelRatio(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def disallowPolygonOffset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def display(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def displayStatus(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def displayStyle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawText(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def endGL(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def endProjMatrixOverride(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def endSelect(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def endXorDrawing(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def filteredObjectList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def get3dView(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCamera(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getColorIndexAndTable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getLightCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getLightIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getLightPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getLightingMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getM3dViewFromModelEditor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getM3dViewFromModelPanel(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getRendererName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getScreenPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hiliteColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def initNames(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isBackgroundGradient(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isLightVisible(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isShadeActiveOnly(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isVisible(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kActive: int = ...
    kActiveAffected: int = ...
    kActiveColors: int = ...
    kActiveComponent: int = ...
    kActiveTemplate: int = ...
    kBackgroundColor: int = ...
    kBoundingBox: int = ...
    kCenter: int = ...
    kDefaultQualityRenderer: int = ...
    kDepth_8: int = ...
    kDepth_Float: int = ...
    kDisplayCVs: int = ...
    kDisplayCameras: int = ...
    kDisplayDeformers: int = ...
    kDisplayDimensions: int = ...
    kDisplayDynamicConstraints: int = ...
    kDisplayDynamics: int = ...
    kDisplayEverything: int = ...
    kDisplayFluids: int = ...
    kDisplayFollicles: int = ...
    kDisplayGrid: int = ...
    kDisplayHairSystems: int = ...
    kDisplayHulls: int = ...
    kDisplayIkHandles: int = ...
    kDisplayImagePlane: int = ...
    kDisplayJoints: int = ...
    kDisplayLights: int = ...
    kDisplayLocators: int = ...
    kDisplayManipulators: int = ...
    kDisplayMeshes: int = ...
    kDisplayNCloths: int = ...
    kDisplayNParticles: int = ...
    kDisplayNRigids: int = ...
    kDisplayNurbsCurves: int = ...
    kDisplayNurbsSurfaces: int = ...
    kDisplayParticleInstancers: int = ...
    kDisplayPivots: int = ...
    kDisplayPlanes: int = ...
    kDisplaySelectHandles: int = ...
    kDisplayStrokes: int = ...
    kDisplaySubdivSurfaces: int = ...
    kDisplayTextures: int = ...
    kDormant: int = ...
    kDormantColors: int = ...
    kExcludeMotionTrails: int = ...
    kExcludePluginShapes: int = ...
    kExternalRenderer: int = ...
    kFlatShaded: int = ...
    kGouraudShaded: int = ...
    kHighQualityRenderer: int = ...
    kHilite: int = ...
    kIntermediateObject: int = ...
    kInvisible: int = ...
    kLead: int = ...
    kLeft: int = ...
    kLightActive: int = ...
    kLightAll: int = ...
    kLightDefault: int = ...
    kLightNone: int = ...
    kLightSelected: int = ...
    kLive: int = ...
    kNoStatus: int = ...
    kPoints: int = ...
    kRight: int = ...
    kStippleDashed: int = ...
    kStippleNone: int = ...
    kTemplate: int = ...
    kTemplateColor: int = ...
    kUnused1: int = ...
    kViewport2Renderer: int = ...
    kWireFrame: int = ...
    def leadColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def liveColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def loadName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def makeSharedContextCurrent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def modelViewMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def multipleDrawEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def multipleDrawPassCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numActiveColors(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numDormantColors(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numUserDefinedColors(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numberOf3dViews(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectDisplay(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectListFilterName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def playblastPortHeight(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def playblastPortWidth(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginObjectDisplay(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def popName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def popViewport(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def portHeight(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def portWidth(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def projectionMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pushName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pushViewport(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def readBufferTo2dTexture(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def readColorBuffer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def readDepthMap(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def referenceLayerColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def refresh(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def renderOverrideName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rendererString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scheduleRefresh(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scheduleRefreshAllViews(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def selectMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCamera(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setColorMask(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDisallowPolygonOffset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDisplayStyle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDrawColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDrawColorAndAlpha(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMultipleDrawEnable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMultipleDrawPassCount(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectDisplay(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setObjectListFilterName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPluginObjectDisplay(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRenderOverrideName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setShowObjectFilterNameInHUD(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setShowViewSelectedChildren(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUserDefinedColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setViewSelectedPrefix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def showObjectFilterNameInHUD(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def showViewSelectedChildren(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def templateColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def textureMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def twoSidedLighting(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def updateViewingParameters(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def userDefinedColorIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingDefaultMaterial(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def usingMipmappedTextures(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def viewIsFiltered(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def viewSelectedPrefix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def viewToObjectSpace(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def viewToWorld(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def viewport(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def widget(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def window(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def wireframeOnShaded(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def wireframeOnlyInShadedMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def worldToView(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def writeColorBuffer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def xray(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def xrayJoints(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MCursor:
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    crossHairCursor: MCursor = ...
    defaultCursor: MCursor = ...
    doubleCrossHairCursor: MCursor = ...
    editCursor: MCursor = ...
    handCursor: MCursor = ...
    pencilCursor: MCursor = ...
    thisown: property = ...

class MDeviceChannel:
    def axisIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def childByIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasChildren(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def longName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numChildren(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MDeviceState:
    def buttonState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def devicePosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNull(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def maxAxis(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setButtonState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDevicePosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MDrawData:
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def geometry(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MDrawInfo:
    def canDrawComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def completelyInside(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def displayStatus(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def displayStyle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getPrototype(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inSelect(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inUserInteraction(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def inclusiveMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def multiPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def objectDisplayStatus(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pluginObjectDisplayStatus(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def projectionMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMultiPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def userChangingViewContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def view(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MDrawRequest:
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def color(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def component(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def displayCullOpposite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def displayCulling(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def displayStatus(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def displayStyle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawLast(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isTransparent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def material(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def matrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def multiPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDisplayCullOpposite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDisplayCulling(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDisplayStatus(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDisplayStyle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDrawData(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDrawLast(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setIsTransparent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaterial(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMultiPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setToken(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setView(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def token(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def view(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MDrawRequestQueue:
    def add(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isEmpty(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MDrawTraversal:
    def enableFiltering(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def filterNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def filteringEnabled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def frustumValid(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def itemHasStatus(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def itemPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kActiveItem: int = ...
    kTemplateItem: int = ...
    def leafLevelCulling(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def numberOfItems(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFrustum(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLeafLevelCulling(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setOrthoFrustum(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPerspFrustum(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def traverse(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MEvent:
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    controlKey: int = ...
    def getPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getWindowPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isModifierControl(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isModifierKeyRelease(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isModifierLeftMouseButton(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isModifierMiddleMouseButton(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isModifierNone(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isModifierShift(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kLeftMouse: int = ...
    kMiddleMouse: int = ...
    def modifiers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def mouseButton(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setModifiers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPosition(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    shiftKey: int = ...
    thisown: property = ...

class MExternalDropCallback:
    def addCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def externalDropCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kMayaDefault: int = ...
    kNoMayaDefaultAndAccept: int = ...
    kNoMayaDefaultAndNoAccept: int = ...
    def removeCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MExternalDropData:
    def color(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dataSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def formats(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasFormat(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasHtml(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasImage(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasText(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def hasUrls(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def html(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def image(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAltModifier: int = ...
    kControlModifier: int = ...
    kLeftButton: int = ...
    kMidButton: int = ...
    kMiddleButton: int = ...
    kNoModifier: int = ...
    kRightButton: int = ...
    kShiftModifier: int = ...
    def keyboardModifiers(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def mouseButtons(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def text(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def urls(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFeedbackLine:
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFormat(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setShowFeedback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTitle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def showFeedback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnManip3D(MFnTransform):
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deleteManipulator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawPlaneHandles(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def globalSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def handleSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isOptimizePlaybackOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isVisible(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def lineSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def manipScale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateXYZValue(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDrawPlaneHandles(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setGlobalSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setHandleSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLineSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setManipScale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setOptimizePlayback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setVisible(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnCircleSweepManip(MFnManip3D):
    def angleIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def axisIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def centerIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectToAnglePlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def endCircleIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def endPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAngle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCenterPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDrawAsArc(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setEndPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setNormal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRadius(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setStartPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def startCircleIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def startPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnCurveSegmentManip(MFnManip3D):
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectToCurvePlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectToEndParamPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectToStartParamPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def curveIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def endParamIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def endParameter(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setEndParameter(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setStartParameter(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def startParamIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def startParameter(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnDirectionManip(MFnManip3D):
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectToDirectionPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def directionIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def endPointIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDirection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDrawStart(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setNormalizeDirection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setStartPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def startPointIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnDiscManip(MFnManip3D):
    def angleIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def axisIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def centerIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectToAnglePlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setAngle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setCenterPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setNormal(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRadius(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnDistanceManip(MFnManip3D):
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectToDistancePlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def currentPointIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def directionIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def distanceIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDrawLineOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDrawStartOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scalingFactor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDirection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDrawLine(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDrawStart(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setScalingFactor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setStartPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def startPointIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnFreePointTriadManip(MFnManip3D):
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectToPointPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDrawAxesOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isKeyframeAllOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isSnapModeOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def pointIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDirection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDrawArrowHead(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDrawAxes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setGlobalTriadPlane(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setKeyframeAll(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSnapMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnPointOnCurveManip(MFnManip3D):
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectToCurvePlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectToParamPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def curveIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def curvePoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDrawCurveOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def paramIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def parameter(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDrawCurve(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setParameter(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnPointOnSurfaceManip(MFnManip3D):
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectToParamPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectToSurfacePlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getParameters(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDrawSurfaceOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def paramIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDrawArrows(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDrawSurface(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setParameters(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def surfaceIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnRotateManip(MFnManip3D):
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectToRotationCenterPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectToRotationPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def displayWithNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isSnapModeOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotateMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotationCenterIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def rotationIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInitialRotation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotateMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setRotationCenter(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSnapIncrement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSnapMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def snapIncrement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnScaleManip(MFnManip3D):
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectToScaleCenterPlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectToScalePlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def displayWithNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getOrientation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getOrientationMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isSnapModeOn(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scaleCenterIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def scaleIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInitialScale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setOrientation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setOrientationMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSnapIncrement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSnapMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def snapIncrement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnStateManip(MFnManip3D):
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectToStatePlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def maxStates(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def positionIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInitialState(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaxStates(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def state(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def stateIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MFnToggleManip(MFnManip3D):
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def connectToTogglePlug(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def create(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def direction(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def directionIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def lengthIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDirection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setStartPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setToggle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def startPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def startPointIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def toggle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def toggleIndex(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MFnToolContext(MFnBase):
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def title(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MPanelCanvasInfo:
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getViewportBounds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getViewportSize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reset(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setViewportBounds(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def supportsUIDrawing(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MGraphEditorInfo(MPanelCanvasInfo):
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAnimCurveNodes(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isNormalizedViewportMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isStackedViewportMode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAnimCurveAllKnown: int = ...
    kAnimCurveHighlighted: int = ...
    kAnimCurveOutlinerOnly: int = ...
    kAnimCurveSelected: int = ...
    thisown: property = ...

class MHWShaderSwatchGenerator(MSwatchRenderBase):
    def createObj(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getSwatchBackgroundColor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def initialize(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MManipData:
    def asBool(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asDouble(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asFloat(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asLong(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asMObject(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asShort(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def asUnsigned(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isSimple(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MMaterial:
    def applyTexture(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def defaultMaterial(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def evaluateDiffuse(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def evaluateEmission(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def evaluateMaterial(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def evaluateShininess(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def evaluateSpecular(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def evaluateTexture(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def evaluateTextureTransformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getDiffuse(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getEmission(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getHasTransparency(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getHwShaderNode(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getShininess(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getSpecular(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getTextureTransformation(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAmbientColor: int = ...
    kBumpMap: int = ...
    kColor: int = ...
    kCosinePower: int = ...
    kDiffuse: int = ...
    kEccentricity: int = ...
    kHighlightSize: int = ...
    kIncandescence: int = ...
    kReflectedColor: int = ...
    kReflectivity: int = ...
    kRoughness: int = ...
    kSpecularColor: int = ...
    kSpecularRollOff: int = ...
    kTransluscence: int = ...
    kTransparency: int = ...
    kWhiteness: int = ...
    def materialIsTextured(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setMaterial(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def shadingEngine(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def textureImage(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MMaterialArray:
    def append(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def clear(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def copy(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def insert(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def length(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def remove(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def set(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setLength(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSizeIncrement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def sizeIncrement(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MObjectListFilter:
    def UIname(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dependentOnSceneUpdates(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterFilter(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def filterType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getList(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kAddRemoveObjects: int = ...
    kExclusionList: int = ...
    kInclusionList: int = ...
    kNone: int = ...
    kNumberOfFilterTypes: int = ...
    def name(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registerFilter(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def requireListUpdate(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setFilterType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setUIName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MPaintMessage(MMessage):
    def addVertexColorCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MProgressWindow:
    def advanceProgress(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def endProgress(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isCancelled(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isInterruptable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def progress(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def progressMax(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def progressMin(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def progressStatus(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def reserve(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setInterruptable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setProgress(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setProgressMax(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setProgressMin(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setProgressRange(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setProgressStatus(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setTitle(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def startProgress(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def title(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MQtUtil:
    def addWidgetToMayaLayout(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createCursor(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createIcon(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def createPixmap(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def deregisterUIType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def dpiScale(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findControl(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findLayout(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findMenuItem(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def findWindow(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def fullName(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getCurrentParent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getLayoutChildren(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getParent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def mainWindow(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def nativeWindow(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def newClocaleValidator(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def registerUIType(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def resourceGLContext(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def toMString(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def toQString(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MSelectInfo(MDrawInfo):
    def addSelection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getAlignmentMatrix(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def getLocalRay(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def highestPriority(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isRay(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def selectClosest(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def selectForHilite(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def selectOnHilitedOnly(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def selectPath(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def selectRect(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def selectable(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def selectableComponent(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setHighestPriority(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setSnapPoint(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def singleSelection(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def view(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class MTextureEditorDrawInfo:
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def drawingFunction(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    kDrawEdgeForSelect: int = ...
    kDrawEverything: int = ...
    kDrawFacetForSelect: int = ...
    kDrawFunctionFirst: int = ...
    kDrawFunctionLast: int = ...
    kDrawUVForSelect: int = ...
    kDrawVertexForSelect: int = ...
    kDrawWireframe: int = ...
    def setDrawingFunction(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MToolsInfo:
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def isDirty(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def resetDirtyFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def setDirtyFlag(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class MUiMessage(MMessage):
    def add3dViewDestroyMsgCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def add3dViewPostMultipleDrawPassMsgCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def add3dViewPostRenderMsgCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def add3dViewPreMultipleDrawPassMsgCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def add3dViewPreRenderMsgCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def add3dViewRenderOverrideChangedCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def add3dViewRendererChangedCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addCameraChangedCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def addUiDeletedCallback(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def className(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...

class boolPtr:
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class charPtr:
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class doublePtr:
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class floatPtr:
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class intPtr:
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class shortPtr:
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class uCharPtr:
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...

class uIntPtr:
    def assign(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def cast(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    def frompointer(self: Self, *args: Any, **kwargs: Any) -> Any: ...
    thisown: property = ...
    def value(self: Self, *args: Any, **kwargs: Any) -> Any: ...
